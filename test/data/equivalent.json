{
  "en": {
    "data": {
      "authored_hints": {
        "2-3 Artist 1 new_authored_hint": {
          "2-3_Artist_1_new_a": "If you use the block to have me `move forward by 100 pixels`, I will draw a line automatically.",
          "2-3_Artist_1_new_b": "Having trouble turning the corner? Use the `turn right 90 degrees` block."
        },
        "2-3 Artist 11_authored_hint": {
          "2-3_Artist_11_a": "Having trouble with the angles? You need to go 360 degrees in 8 turns.  What is 360/8? "
        },
        "2-3 Artist 12_authored_hint": {
          "2-3_Artist_12_a": "There are 360 degrees in a circle, so if the artist turns 1 degree each time through the loop, he'll need to go through 360 times."
        },
        "2-3 Artist 2 new_authored_hint": {
          "2-3_Artist_2_new_a": "The artist doesn't seem to be pointing in the correct direction. Can you make them turn first before drawing the line?"
        },
        "2-3 Artist 3new_authored_hint": {
          "2-3_Artist_3new_a": "What is 100-70?  Based on the story problem, that's how tall the hat needs to be!",
          "2-3_Artist_3new_b": "The artist doesn't seem to be pointing in the correct direction. Can you make them turn first before drawing the line?"
        },
        "2-3 Artist 4_authored_hint": {
          "2-3_Artist_4_a": "To finish the house, all we need to do is draw a square!"
        },
        "2-3 Artist 6_authored_hint": {
          "2-3_Artist_6_a": "To make those little angles, you have to turn *farther* each time than you did with the square.   ",
          "2-3_Artist_6_b": "Since I'm already facing to the right, it's easiest to start by moving forward, then make left turns to create the triangle.",
          "2-3_Artist_6_c": "Each side of the triangle is the same length as each side of the square...100 pixels!"
        },
        "2-3 Artist 7_authored_hint": {
          "2-3_Artist_7_a": "The easiest way to solve this puzzle is to draw the first square and end with the artist pointing down before starting your second square."
        },
        "2-3 Artist 8_authored_hint": {
          "2-3_Artist_8_a": "If you cut 200 in half, how many pixels wide does each square need to be?"
        },
        "2-3 Artist 9 NEW_authored_hint": {
          "2-3_Artist_9_a": "This diamond is really just a square on its side"
        },
        "2-3 Artist 9 REPLACEMENT_authored_hint": {
          "step_size": "Each step is 100 pixels wide and 100 pixels high."
        },
        "2-3 Artist 9_authored_hint": {
          "2-3_Artist_9_a": "This diamond is really just a square turned 45 degrees.",
          "2-3_Artist_9_b": "Don't forget to turn the artist left by 45 degrees before you start drawing your square!\n\n![](https://images.code.org/47cc2474e533667101a2d73b98da204e-image-1467744539967.gif)"
        },
        "2-3 Artist Debugging 10_authored_hint": {
          "2-3_Artist_Debugging_10_a": "Remember, you want the control panel 10 pixels *wider*...so be sure to **add** 10 to whatever number you change.",
          "2-3_Artist_Debugging_10_b": "**Trial and error is perfectly fine here!**  \n\nStart by changing one number at a time.   \n\nWhich numbers do what?  \n\nIf you get too lost, just click \"Start over\" and your code will be reset."
        },
        "2-3 Artist Debugging 2_authored_hint": {
          "2-3_Artist_Debugging_2_a": "Hint: Each whisker is 75 pixels long."
        },
        "2-3 Artist Debugging 3_authored_hint": {
          "2-3_Artist_Debugging_3_a": "One of the turns is 15 degrees too small.",
          "2-3_Artist_Debugging_3_b": "If the program runs too fast to see what's happening, try slowing it down with the slider."
        },
        "2-3 Artist Debugging 7_authored_hint": {
          "2-3_Artist_Debugging_7_a": "What happens if you have the artist move or jump backward after he draws the first line?"
        },
        "2-3 Artist Debugging 8_authored_hint": {
          "2-3_Artist_Debugging_8_a": "How many times did my shape repeat?\n\nHow many times *should* the shape repeat?\n\nWhere can you change that in the program?"
        },
        "2-3 Artist Debugging 9_authored_hint": {
          "2-3_Artist_Debugging_9_a": "The artist needs to turn 60 degrees farther left before starting to draw!",
          "2-3_Artist_Debugging_9_b": "You don't need to add another block to get the full turn, just add 60 degrees to the `turn left` block that's already there!"
        },
        "2-3 Artist Functions 1 a_authored_hint": {
          "2-3_Artist_Functions_1_a": "The squares each have 100 pixel sides, that means that you will have to move forward 175 pixels before drawing your second square.",
          "2-3_Artist_Functions_1_b": "It is okay to draw overlapping lines to make your glasses."
        },
        "2-3 Artist Functions 1_authored_hint": {
          "2-3_Artist_Functions_1_a": "The squares each have 100 pixel sides, that means that you will have to move forward 175 pixels before drawing your second square.",
          "2-3_Artist_Functions_1_b": "It is okay to draw overlapping lines to make your glasses."
        },
        "2-3 Artist Functions 11 a_authored_hint": {
          "2-3_Artist_Functions_11_a": "You will need to change not only the number and length of sides within the function, but also the angle the artist turns between each side."
        },
        "2-3 Artist Functions 11_authored_hint": {
          "2-3_Artist_Functions_11_a": "You will need to change not only the number and length of sides within the function, but also the angle the artist turns between each side."
        },
        "2-3 Artist Functions 12 a_authored_hint": {
          "2-3_Artist_Functions_12_a": "Try running the code first to see what you need to add."
        },
        "2-3 Artist Functions 12_authored_hint": {
          "2-3_Artist_Functions_12_a": "Try running the code first to see what you need to add."
        },
        "2-3 Artist Functions 2 a_authored_hint": {
          "2-3_Artist_Functions_2_a": "Your program should:\n- Use function\n- Move forward 100 + 75 pixels\n- Use function"
        },
        "2-3 Artist Functions 2_authored_hint": {
          "2-3_Artist_Functions_2_a": "Your program should:\n- Use function\n- Move forward 100 + 75 pixels\n- Use function"
        },
        "2-3 Artist Functions 3 a_authored_hint": {
          "2-3_Artist_Functions_3_a": "**115 + 45 = 160**"
        },
        "2-3 Artist Functions 3_authored_hint": {
          "2-3_Artist_Functions_3_a": "**115 + 45 = 160**"
        },
        "2-3 Artist Functions 4 a_authored_hint": {
          "2-3_Artist_Functions_4_a": "The artist needs to turn 120 degrees between each square to complete this design."
        },
        "2-3 Artist Functions 4_authored_hint": {
          "2-3_Artist_Functions_4_a": "The artist needs to turn 120 degrees between each square to complete this design."
        },
        "2-3 Artist Loops New 11_authored_hint": {
          "2-3_Artist_Loops_New_11_a": "Remember that the code from the last puzzle was:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat\">\n        <title name=\"TIMES\">8</title>\n        <statement name=\"DO\">\n          <block type=\"draw_colour\" inline=\"true\">\n            <value name=\"COLOUR\">\n              <block type=\"colour_random\"/>\n            </value>\n            <next>\n              <block type=\"draw_turn_by_constant_dropdown\">\n                <title name=\"DIR\">turnRight</title>\n                <title name=\"VALUE\" config=\"45,60,90,120,180\">45</title>\n                <next>\n                  <block type=\"draw_move_by_constant\">\n                    <title name=\"DIR\">moveForward</title>\n                    <title name=\"VALUE\">50</title>\n                    <next>\n                      <block type=\"draw_turn_by_constant_dropdown\">\n                        <title name=\"DIR\">turnLeft</title>\n                        <title name=\"VALUE\" config=\"45,60,90,120,180\">90</title>\n                        <next>\n                          <block type=\"draw_move_by_constant\">\n                            <title name=\"DIR\">moveForward</title>\n                            <title name=\"VALUE\">50</title>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n</xml>",
          "2-3_Artist_Loops_New_11_b": "Your new turn should go at the **end** of the code inside the loop."
        },
        "2-3 Artist Loops New 12_authored_hint": {
          "2-3_Artist Loops_New_12_a": "Before starting the diamond, the artist needs to turn left by 60 degrees to get on the right path.",
          "2-3_Artist Loops_New_12_b": "After the artist goes forward 100 pixels, he will need to turn right 120 degrees to make the sharp corner.",
          "2-3_Artist Loops_New_12_c": "The artist will need to turn right only 60 degrees to create a wide corner."
        },
        "2-3 Artist Loops New 13_authored_hint": {
          "2-3_Artist_Loops_New_13_a": "At the end of each diamond, the artist is already facing the right direction to start the next one.  \n\nBecause of this, we don't need to add an extra `turn left by` block before we start again.",
          "2-3_Artist_Loops_New_13_b": "To make each diamond, the artist needs to:   \n- move\n- turn right 120 degrees\n- move\n- turn right 60 degrees  \n\nThen do it all again!"
        },
        "2-3 Artist Loops New 9_authored_hint": {
          "2-3_Artist_Loops_New_9_a": "The artist needs to turn 45 degrees to the right before he starts drawing.",
          "2-3_Artist_Loops_New_9_b": "This V is really just half of a square.  What would the code be to draw half of a square?"
        },
        "2-3 Artist Nested Loops 1_authored_hint": {
          "2-3_Artist_Nested_Loops_1_a": "Remember to put all of the grey blocks inside of your loop."
        },
        "2-3 Artist Nested Loops 3_authored_hint": {
          "2-3_Artist_Nested_Loops_3_a": "Need help with the angles?  \n**360/12 = 30**",
          "2-3_Artist_Nested_Loops_3_b": "Remember to put all of the grey code and your turn block inside of a loop."
        },
        "2-3 Artist Nested Loops 4_authored_hint": {
          "2-3_Artist_Nested_Loops_3_a": "Need help with the angles?  \n**360/12 = 30**"
        },
        "2-3 Artist Nested Loops 5_authored_hint": {
          "2-3_Artist_Nested_Loops_5_a": "Try using the `jump forward` block to get from the top of one square to the place where you will start the next. \n\nIf your squares are 20 pixels tall and they are 20 pixels apart, how far do you need to jump?"
        },
        "2-3 Artist Nested Loops 7_authored_hint": {
          "2-3_Artist_Nested_Loops_7_a": "How far should you turn in each loop?  \n\nWhat is 360/10?"
        },
        "2-3 Artist Nested Loops 9_authored_hint": {
          "2-3_Artist_Nested_Loops_9_a": "Need help finding the correct angle?\n\n**360 / 12 = 30**"
        },
        "2-3 Bee Conditionals 14_authored_hint": {
          "2-3_Bee_Conditionals_14_a": "Having a hard time figuring out how to get the blocks down?  Try treating the red flower exactly the same as a purple flower!",
          "2-3_Bee_Conditionals_14_b": "If the red flower were purple, could you figure out how to use an extra `repeat` loop to cut down on code?"
        },
        "2-3 Bee Conditionals 15_authored_hint": {
          "2-3_Bee_Conditionals_15_a": "Remember: Purple flowers only have either 0 or 1 nectar and they can change each time you run the program."
        },
        "2-3 Bee Conditionals 3_authored_hint": {
          "2-3_Bee_Conditionals_3_a": "The code will be shortest if you use a loop each time you move forward, another loop to gather nectar, and another one to make honey."
        },
        "2-3 Bee Conditionals 6_authored_hint": {
          "2-3_Bee_Conditionals_6_a": "Remember: Purple flowers change between 0 and 1 nectar when you run your program!"
        },
        "2-3 Bee Debugging 1_authored_hint": {
          "2-3_Bee_Debugging_1_a": "Once you find and fix the incorrect block, do you see any patterns that could be made more simple using a `repeat` loop?"
        },
        "2-3 Bee Debugging 2_authored_hint": {
          "2-3_Bee_Debugging_2_a": "Once you find and fix the incorrect block, do you see any patterns that could be made more simple using a `repeat` loop?"
        },
        "2-3 Bee Debugging 4_authored_hint": {
          "2-3_Bee_Debugging_4_a": "Is there any place where the bee does something that doesn't make sense? What happens when you change that block?"
        },
        "2-3 Bee Functions 4_authored_hint": {
          "2-3_Bee_Functions_4_a": "You don't have to use a loop with a function. Try moving, using the function, then moving and using the function again."
        },
        "2-3 Bee Functions 6_authored_hint": {
          "2-3_Bee_Functions_6_a": "You don't have to use a loop with a function. Try moving, using the function, then moving and using the function again."
        },
        "2-3 Bee Functions 8_authored_hint": {
          "2-3_Bee_Functions_8_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!\n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        },
        "2-3 Bee Functions 9_authored_hint": {
          "2-3_Bee_Functions_8_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "2-3_Bee_Functions_8_b": "Remember to build your code inside of the green function block.\n\n![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)"
        },
        "2-3 Bee Loops 2_authored_hint": {
          "2-3_Bee_Loops_2_a": "You should end up with four blocks inside your loop."
        },
        "2-3 Bee Loops 3_authored_hint": {
          "2-3_Bee_Loops_3_a": "You should have 6 blocks inside your loop."
        },
        "2-3 Bee Loops 3B_authored_hint": {
          "2-3_Bee_Loops_3B_a": "You will need two different `repeat` loops, one after the other."
        },
        "2-3 Bee Loops 4_authored_hint": {
          "2-3_Bee_Loops_4_a": "You should end up with five blocks inside your loop."
        },
        "2-3 Bee Loops 4A_authored_hint": {
          "2-3_Bee_Loops_4A_a": "The first action will be a turn, rather than a move.",
          "2-3_Bee_Loops_4A_b": "The last piece of the program can be finished by writing code at the end of your program outside of your loop.",
          "2-3_Bee_Loops_4A_c": "If you can't spot the loops yet, try coding it out the long way first, then see what you can combine into a `repeat` loop at the end."
        },
        "2-3 Bee Loops 5_authored_hint": {
          "2-3_Bee_Loops_5_a": "If you can't spot the blocks to put inside `repeat` right away, start by coding out each move and look for a pattern."
        },
        "2-3 Bee Loops 6_authored_hint": {
          "2-3_Bee_Loops_6_a": "If you can't tell what should go into the `repeat` loop, try dragging blocks out one by one and see if you can find a pattern.",
          "2-3_Bee_Loops_6_b": "There should be 6 blocks inside your `repeat` loop when you're done."
        },
        "2-3 Bee Loops 7_authored_hint": {
          "2-3_Bee_Loops_7_a": "The first action will be a turn, rather than a move.",
          "2-3_Bee_Loops_7_b": "If you can't quite picture the loop from the beginning, try coding it out the long way, then look for a pattern.  "
        },
        "2-3 Maze 1_authored_hint": {
          "2-3_Maze_1_a": "To use a `move forward` block, drag it from the toolbar area out into the workspace and connect it to the `when run` block."
        },
        "2-3 Maze 16_authored_hint": {
          "2-3_Maze_16_a": "If the pattern is hard to see, try coding it all out first and see what things repeat over and over before you put the loops in.",
          "2-3_Maze_16_b": "To put lots of blocks inside a `repeat` loop, just drag a loop out into the workspace, then drag all of the blocks from the starting program inside of it.  \n\nConnect it all back to the `when run` block and you're good to go!"
        },
        "2-3 Maze 6_authored_hint": {
          "2-3_Maze_6_a": "There are two ways to solve this puzzle!"
        },
        "2-3 Maze Loops 17_authored_hint": {
          "2-3_Maze_Loops_17_a": "If the pattern is hard to see, try coding it all out first and see what things repeat over and over before you put the loops in.",
          "2-3_Maze_Loops_17_b": "Did the starting code get deleted?  Click `start over` to get it back!"
        },
        "2-3 Maze Loops 18_authored_hint": {
          "2-3_Maze_Loops_18_a": "If the pattern is hard to see, try coding it all out first and see what things repeat over and over before you put the loops in."
        },
        "2-3 Maze Loops 19_authored_hint": {
          "2-3_Maze_Loops_19_a": "If you are stuck, try writing out the code without loops first and looking for patterns.",
          "2-3_Maze_Loops_19_b": "Putting one repeat loop inside of another can help decrease the number of blocks used."
        },
        "2-3 Maze Loops 20_authored_hint": {
          "2-3_Maze_Loops_20_a": "Look for a stair-step pattern in this maze to find where a loop can be used."
        },
        "2-3 Maze Loops 21_authored_hint": {
          "2-3_Maze_Loops_21_a": "If you are having trouble finding the stair-step pattern, try covering the blocked paths with your finger."
        },
        "4-5 Artist 1_authored_hint": {
          "4-5_Artist_1_a": "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
        },
        "4-5 Artist 11_authored_hint": {
          "4-5_Artist_11_a": "Within your loop, make sure the artist jumps backwards and upwards after drawing each line."
        },
        "4-5 Artist 3_authored_hint": {
          "4-5_Artist_3_a": "If the flower bed is 600 pixels around and two of the sides are 200 pixels long, here is how to figure out what the short sides add up to:\n\n**600 - 200 - 200 = 200**\n\nThat means both short sides add up to 200 pixels.\n\n**What is 200 / 2?**",
          "4-5_Artist_3_b": "If you can't see where the `repeat` loop goes right away, try coding out the whole solution and look for a pattern."
        },
        "4-5 Artist 4_authored_hint": {
          "4-5_Artist_4_a": "There are 360 degrees in a circle! \n\nThat's how many times you need to repeat this code (turning 1 degree at a time) before the circle is done!"
        },
        "4-5 Artist 5_authored_hint": {
          "4-5_Artist_5_a": "Trial and error is a great method, but you can also solve the problem by dividing the 90 degree angle into thirds.\n\n**90 / 3 = _____**"
        },
        "4-5 Artist 7_authored_hint": {
          "4-5_Artist_7_a": "Which angle is the smallest?  At which angle is the artist standing? "
        },
        "4-5 Artist 8_authored_hint": {
          "4-5_Artist_8_a": "The long sides are 240 pixels each.  That means that the 2 short sides must total:\n\n**800 - 240 - 240 = 320**\n\nWhat is **320/2** ? ",
          "4-5_Artist_8_b": "This image can be done 2 ways!  \n- Draw two rectangles that are **120** long and **160** tall, with an overlapping side\n\n- Draw one rectangle that is **240** long and **160** tall, then add a line in the middle."
        },
        "4-5 Artist 9_authored_hint": {
          "4-5_Artist_9_a": "When a triangle is an equilateral, all sides and all angles are the same.  \n",
          "4-5_Artist_9_b": "You will need to draw three triangles of the same size. Don't forget to jump to your new position after each one."
        },
        "4-5 Artist Assessment 1_authored_hint": {
          "4-5_Artist_Assessment_1_a": "You only need to draw the outside triangle to complete this puzzle."
        },
        "4-5 Artist Patterns 11_authored_hint": {
          "4-5_Artist_Patterns_11_a": "If there are 360 degrees in a circle and each loop turns 3 degrees, how many times would you need to loop draw half of a full circle?"
        },
        "4-5 Artist Patterns 2_authored_hint": {
          "4-5_Artist_Patterns_2_a": "Notice that since the squares are 20 pixels long, you'll need to jump 20 pixels before you start your next square."
        },
        "4-5 Artist Patterns 3_authored_hint": {
          "4-5_Artist_Patterns_3_a": "Be careful to pull out the full block of \"code from the toolbar each time you try a new one.",
          "4-5_Artist_Patterns_3_b": "If your code becomes too confusing, you can always click \"Start Over\" and try again!"
        },
        "4-5 Artist Patterns 5_authored_hint": {
          "4-5_Artist_Patterns_5_a": "Now, when the artist finished each diamond, he's facing the opposite direction from where he needs to be to start the next one.  \n\nHow many degrees does he need to be turned to set himself straight?"
        },
        "4-5 Bee Conditionals 4_authored_hint": {
          "remember_quantum": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if` or `if/else`) to solve the challenge."
        },
        "4-5 Bee Conditionals 5_authored_hint": {
          "remember_quantum": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if` or `if/else`) to solve the challenge."
        },
        "4-5 Bee Conditionals 6_authored_hint": {
          "4-5 Bee Conditionals 6_a": "You can solve this puzzle using only the blocks on the workspace.  What order should they go in?",
          "4-5 Bee Conditionals 6_b": "Make sure that you are checking to see if the flower has more than **0** nectar at least **3** times to solve this puzzle."
        },
        "4-5 Bee Debugging 1_authored_hint": {
          "4-5_Bee_Debugging_1_a": "If you are having trouble figuring out what's not right, try running it to see where things go wrong."
        },
        "4-5 Bee Nested Loops Rows_authored_hint": {
          "4-5_Bee_Nested_Loops_Rows_a": "Try treating this puzzle like a long rectangle where the bee needs to move forward, then turn left several times to complete the path."
        },
        "4-5 Maze 10_authored_hint": {
          "4-5_Maze_10_a": "If you can't see how to use loops to solve the puzzle right away, try solving it the long way first, then looking for a pattern.\n\nWhat should you put a `repeat` around to make the code shorter?"
        },
        "4-5 Maze 4_authored_hint": {
          "4-5_Maze_4_a": "If you are having a hard time figuring out where to put the repeat, try coding everything out and looking for a pattern."
        },
        "4-5 Maze 5_authored_hint": {
          "4-5_Maze_5_a": "Try using a `repeat` loop anytime you need to `move forward` more than two steps.",
          "4-5_Maze_5_b": "You can use more than one `repeat` loop in a puzzle."
        },
        "4-5 Maze 6_authored_hint": {
          "4-5_Maze_6_a": "Try tracing out a path with your finger.  \nIs it the shortest path you can find?"
        },
        "4-5 Maze 7_authored_hint": {
          "4-5_Maze_7_a": "**Want to get your code as small as it can be?** \n\nLook for patterns in your blocks. Do you see something that repeats?  Try putting a loop around it instead!"
        },
        "4-5 Nested Loops 12_authored_hint": {
          "4-5_Nested_Loops_12_a": "**360 / 36 = ?**"
        },
        "4-5 Nested Loops 6_authored_hint": {
          "4-5_Nested_Loops_6_a": "Don't forget to make a turn after your inner loop.\n\nYou'll be looping 6 triangles over 360 degrees.\n\n**360 / 6 = ?**"
        },
        "4-5 Nested Loops 7_authored_hint": {
          "4-5_Nested_Loops_7_a": "This design will loop 10 times over 360 degrees.\n\n**360 / 10 = ?**"
        },
        "4-5 Nested Loops 8_authored_hint": {
          "4-5_Nested_Loops_8_a": "You will be looping this shape 6 times over 360 degrees.\n\n**360 / 6 = ?**"
        },
        "4-5 While Loops 8_authored_hint": {
          "4-5_While_Loops_8_a": "Each item will need its own `while` loop."
        },
        "Artist Inspiration_authored_hint": {
          "brush_width": "We set the brush width to 1, then the color to blue before we did anything else.",
          "double_loop": "Try putting a `for loop` inside of a `repeat` loop.",
          "specifics": "The `for loop` runs from three to seventeen for each of the six \"petals\" before moving on to create the next, drawing shapes with only an odd number of sides.\n        \nThe `set alpha` block uses division to fade the color as the counter gets higher.",
          "after": "When you're done with each \"petal\", be sure to `move forward` 20 pixels before you make a 60 degree rotation.",
          "solution": "**Solution**\n\n\n![Image of Solution Blocks](https://images.code.org/d85a18bd31a09f87b41a818fc8d6c1cc-image-1469641375258.png)"
        },
        "Bergeron Robot Maze1_authored_hint": {
          "2-3_Maze_1_a": "To use a `move forward` block, drag it from the toolbar area out into the workspace and connect it to the `when run` block."
        },
        "Course 4 Artist 11_authored_hint": {
          "Course_4_Artist_11_a": "The half-hexagon has a **length of 30** and turns right by **60 degrees**.  ",
          "Course_4_Artist_11_b": "The 2/3 triangle has a **length of 80** and turns right by **120 degrees**. "
        },
        "Course 4 Artist 12_authored_hint": {
          "Course_4_Artist_12_a": "Each repeated shape is the combination of **half of a hexagon**, followed by **2/3 of a triangle**. ",
          "Course_4_Artist_12_b": "The unit shape is almost the same as in the last puzzle, except the half-hexagon is a bit bigger. ",
          "Course_4_Artist_12_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n        <value name=\"COLOUR\">\n          <block type=\"colour_picker\">\n            <title name=\"COLOUR\">#843179</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"controls_repeat\">\n            <title name=\"TIMES\">6</title>\n            <statement name=\"DO\">\n              <block type=\"controls_repeat\">\n                <title name=\"TIMES\">3</title>\n                <statement name=\"DO\">\n                  <block type=\"draw_move_by_constant\">\n                    <title name=\"DIR\">moveForward</title>\n                    <title name=\"VALUE\">60</title>\n                    <next>\n                      <block type=\"draw_turn_by_constant\">\n                        <title name=\"DIR\">turnRight</title>\n                        <title name=\"VALUE\">60</title>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <next>\n                  <block type=\"controls_repeat\">\n                    <title name=\"TIMES\">2</title>\n                    <statement name=\"DO\">\n                      <block type=\"draw_move_by_constant\">\n                        <title name=\"DIR\">moveForward</title>\n                        <title name=\"VALUE\">80</title>\n                        <next>\n                          <block type=\"draw_turn_by_constant\">\n                            <title name=\"DIR\">turnRight</title>\n                            <title name=\"VALUE\">120</title>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 Artist 6_authored_hint": {
          "Course_4_Artist_6_a": "There are 3 triangles within the 360 degree rotation...how many times does 3 go into 360?"
        },
        "Course 4 Artist 8a_authored_hint": {
          "Course_4_Artist_8a": "Need help figuring out how far to turn?\n\nThere are 3 triangles within the 360 degree rotation.\n\nHow many times does 3 go into 360?"
        },
        "Course 4 Artist 9_authored_hint": {
          "Course_4_Artist_9_a": "Need to know how much to turn? \n\nWhat is 360 divided by 10?"
        },
        "Course 4 Artist Binary Free Play 2b_authored_hint": {
          "Course_4_Artist_Binary_Free_Play_2b_a": "This code uses two `for loops`. One counts up from 1 to 8, the other counts down from 8 to 1.",
          "Course_4_Artist_Binary_Free_Play_2b_b": "Each `for loop` has three repeats.  The first draws the leftmost set of 1s, the second draws the 0s in the middle and the third draws the 1s on the right.",
          "Course_4_Artist_Binary_Free_Play_2b_c": "In each repeat you need `counter` for 1s and `16-(2 x counter)` for 0s.",
          "Course_4_Artist_Binary_Free_Play_2b_d": "**Solution:**\n\n<xml><block type=\"when_run\" deletable=\"false\" movable=\"false\"><next><block type=\"controls_for_counter\" inline=\"true\"><mutation counter=\"counter\"></mutation><value name=\"FROM\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value><value name=\"TO\"><block type=\"math_number\"><title name=\"NUM\">8</title></block></value><value name=\"BY\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value><statement name=\"DO\"><block type=\"controls_repeat_ext\" inline=\"true\"><value name=\"TIMES\"><block type=\"variables_get\"><title name=\"VAR\">counter</title></block></value><statement name=\"DO\"><block type=\"procedures_callnoreturn\" inline=\"true\"><mutation name=\"draw\"><arg name=\"binary\"></arg></mutation><value name=\"ARG0\"><block type=\"text\"><title name=\"TEXT\">1</title></block></value></block></statement><next><block type=\"controls_repeat_ext\" inline=\"true\"><value name=\"TIMES\"><block type=\"math_arithmetic\" inline=\"true\"><title name=\"OP\">MINUS</title><value name=\"A\"><block type=\"math_number\"><title name=\"NUM\">16</title></block></value><value name=\"B\"><block type=\"math_arithmetic\" inline=\"true\"><title name=\"OP\">MULTIPLY</title><value name=\"A\"><block type=\"variables_get\"><title name=\"VAR\">counter</title></block></value><value name=\"B\"><block type=\"math_number\"><title name=\"NUM\">2</title></block></value></block></value></block></value><statement name=\"DO\"><block type=\"procedures_callnoreturn\" inline=\"true\"><mutation name=\"draw\"><arg name=\"binary\"></arg></mutation><value name=\"ARG0\"><block type=\"text\"><title name=\"TEXT\">0</title></block></value></block></statement><next><block type=\"controls_repeat_ext\" inline=\"true\"><value name=\"TIMES\"><block type=\"variables_get\"><title name=\"VAR\">counter</title></block></value><statement name=\"DO\"><block type=\"procedures_callnoreturn\" inline=\"true\"><mutation name=\"draw\"><arg name=\"binary\"></arg></mutation><value name=\"ARG0\"><block type=\"text\"><title name=\"TEXT\">1</title></block></value></block></statement></block></next></block></next></block></statement><next><block type=\"controls_for_counter\" inline=\"true\"><mutation counter=\"counter\"></mutation><value name=\"FROM\"><block type=\"math_number\"><title name=\"NUM\">8</title></block></value><value name=\"TO\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value><value name=\"BY\"><block type=\"math_number\"><title name=\"NUM\">1</title></block></value><statement name=\"DO\"><block type=\"controls_repeat_ext\" inline=\"true\"><value name=\"TIMES\"><block type=\"variables_get\"><title name=\"VAR\">counter</title></block></value><statement name=\"DO\"><block type=\"procedures_callnoreturn\" inline=\"true\"><mutation name=\"draw\"><arg name=\"binary\"></arg></mutation><value name=\"ARG0\"><block type=\"text\"><title name=\"TEXT\">1</title></block></value></block></statement><next><block type=\"controls_repeat_ext\" inline=\"true\"><value name=\"TIMES\"><block type=\"math_arithmetic\" inline=\"true\"><title name=\"OP\">MINUS</title><value name=\"A\"><block type=\"math_number\"><title name=\"NUM\">16</title></block></value><value name=\"B\"><block type=\"math_arithmetic\" inline=\"true\"><title name=\"OP\">MULTIPLY</title><value name=\"A\"><block type=\"variables_get\"><title name=\"VAR\">counter</title></block></value><value name=\"B\"><block type=\"math_number\"><title name=\"NUM\">2</title></block></value></block></value></block></value><statement name=\"DO\"><block type=\"procedures_callnoreturn\" inline=\"true\"><mutation name=\"draw\"><arg name=\"binary\"></arg></mutation><value name=\"ARG0\"><block type=\"text\"><title name=\"TEXT\">0</title></block></value></block></statement><next><block type=\"controls_repeat_ext\" inline=\"true\"><value name=\"TIMES\"><block type=\"variables_get\"><title name=\"VAR\">counter</title></block></value><statement name=\"DO\"><block type=\"procedures_callnoreturn\" inline=\"true\"><mutation name=\"draw\"><arg name=\"binary\"></arg></mutation><value name=\"ARG0\"><block type=\"text\"><title name=\"TEXT\">1</title></block></value></block></statement></block></next></block></next></block></statement></block></next></block></next></block></xml>"
        },
        "Course 4 Artist For Loops 11_authored_hint": {
          "Course_4_Artist_For_Loops_11_a": "The turn angle will change with each shape!  \n\nUse the math block to enter 360 divided by the number of sides the shape has to get the angle right. "
        },
        "Course 4 Artist For Loops 11a_authored_hint": {
          "Course_4_Artist_For_Loops_11a_a": "360 divided by the number of sides a shape has is the number of degrees you'll need to turn. ",
          "Course_4_Artist_For_Loops_11a_b": "Each time, you will need to move forward by 10 times the length of the current number of sides. "
        },
        "Course 4 Artist For Loops 3_authored_hint": {
          "Course_4_Artist_For_Loops_3_a": "To have the `for` loop drive your movement, make sure that you're using `counter` as your distance."
        },
        "Course 4 Artist For Loops 4_authored_hint": {
          "Course_4_Artist_For_Loops_4_a": "**What is the smallest number you will need?  \nWhat is the largest number?  \nHow big is the increase each time?**\n\nThose are the questions you need to ask to fill in the blanks of the `for` loop."
        },
        "Course 4 Artist For Loops Challenge_authored_hint": {
          "Course_4_Artist_For_Loops_Challenge_a": "The largest shape has 19 sides. The smallest has just two.",
          "Course_4_Artist_For_Loops_Challenge_b": "The `for` loop counts up by two each time through."
        },
        "Course 4 Artist For Loops Challenge_a_authored_hint": {
          "Course_4_Artist_For_Loops_Challenge_a": "The largest polygon has 19 sides.",
          "Course_4_Artist_For_Loops_Challenge_b": "Each polygon is incomplete, with one side fewer than it should have."
        },
        "Course 4 Artist For Loops inspire_authored_hint": {
          "Course_4_Artist_For_Loops_inspire_a": "The foundation of this code is the same as the solution to the previous challenge puzzle...with a couple of changes.",
          "Course_4_Artist_For_Loops_inspire_b": "Try a `for` loop that goes from 3 to 10 with an increment of 1.",
          "Course_4_Artist_For_Loops_inspire_c": "There are two iterations of the same repeat loop inside the `for` loop, but the second repeat turns the opposite direction.",
          "Course_4_Artist_For_Loops_inspire_d": "**Solution:**  \n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for_counter\" inline=\"true\" movable=\"false\">\n      <mutation counter=\"counter\"></mutation>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">10</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"math_arithmetic\" inline=\"true\">\n                <title name=\"OP\">MINUS</title>\n                <value name=\"A\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">counter</title>\n                  </block>\n                </value>\n                <value name=\"B\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">1</title>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"draw_move\" inline=\"true\">\n                <title name=\"DIR\">moveForward</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">40</title>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"draw_turn\" inline=\"true\">\n                    <title name=\"DIR\">turnRight</title>\n                    <value name=\"VALUE\">\n                      <block type=\"math_arithmetic\" inline=\"true\">\n                        <title name=\"OP\">DIVIDE</title>\n                        <value name=\"A\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">360</title>\n                          </block>\n                        </value>\n                        <value name=\"B\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"math_arithmetic\" inline=\"true\">\n                    <title name=\"OP\">MINUS</title>\n                    <value name=\"A\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <value name=\"B\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">1</title>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"draw_move\" inline=\"true\">\n                    <title name=\"DIR\">moveForward</title>\n                    <value name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">40</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"draw_turn\" inline=\"true\">\n                        <title name=\"DIR\">turnLeft</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_arithmetic\" inline=\"true\">\n                            <title name=\"OP\">DIVIDE</title>\n                            <value name=\"A\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">360</title>\n                              </block>\n                            </value>\n                            <value name=\"B\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 Artist Functions Inspiration_authored_hint": {
          "Course_4_Artist_Functions_Inspiration_a": "Start with the code from the last puzzle and add an extra `turn right` of three degrees inside the repeat loop.",
          "Course_4_Artist_Functions_Inspiration_b": "Try turning by more than 90 degrees outside of the `repeat loop`, but still inside the `for loop`.",
          "Course_4_Artist_Functions_Inspiration_c": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for_counter\" inline=\"true\">\n      <mutation counter=\"counter\"></mutation>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">14</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n            <value name=\"COLOUR\">\n              <block type=\"colour_random\"/>\n            </value>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">counter</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"procedures_callnoreturn\">\n                  <mutation name=\"draw a square 20\"></mutation>\n                    <next>\n                      <block type=\"jump_by_constant\">\n                        <title name=\"DIR\">jumpForward</title>\n                        <title name=\"VALUE\">20</title>\n                        <next>\n                          <block type=\"draw_turn_by_constant\">\n                            <title name=\"DIR\">turnRight</title>\n                            <title name=\"VALUE\">3</title>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <next>\n                  <block type=\"draw_turn_by_constant\">\n                    <title name=\"DIR\">turnLeft</title>\n                    <title name=\"VALUE\">100</title>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n  </xml>"
        },
        "Course 4 Artist Functions challenge_authored_hint": {
          "Course_4_Artist_Functions_challenge_a": "Part of understanding how to use functions is figuring out which ones you need, and which ones you don't.",
          "Course_4_Artist_Functions_challenge_b": "Use a `for loop`, then use its counter variable inside of a nested `repeat` loop.",
          "Course_4_Artist_Functions_challenge_c": "Each iteration, you should draw a square then jump forward.",
          "Course_4_Artist_Functions_challenge_d": "You will need to turn left by 90 degrees outside of your `repeat`, but still inside the `for loop`."
        },
        "Course 4 Artist Inspire_authored_hint": {
          "Course_4_Artist_Inspire_a": "After you complete one square, try jumping forward half of its length before turning and making another.",
          "Course_4_Artist_Inspire_b": "Each square and jump is repeated four times (using a left turn inbetween) to make a full pinwheel-like unit.",
          "Course_4_Artist_Inspire_c": "Each pinwheel is also repeated four times, with a right turn of **360/sides**.",
          "Course_4_Artist_Inspire_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n        <value name=\"COLOUR\">\n          <block type=\"colour_picker\">\n            <title name=\"COLOUR\">#843179</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"variables_set\" inline=\"false\">\n            <title name=\"VAR\">sides</title>\n            <value name=\"VALUE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">4</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"variables_set\" inline=\"false\">\n                <title name=\"VAR\">length</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_arithmetic\" inline=\"true\">\n                    <title name=\"OP\">DIVIDE</title>\n                    <value name=\"A\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">200</title>\n                      </block>\n                    </value>\n                    <value name=\"B\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">sides</title>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">sides</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"controls_repeat_ext\" inline=\"true\">\n                        <value name=\"TIMES\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">sides</title>\n                          </block>\n                        </value>\n                        <statement name=\"DO\">\n                          <block type=\"controls_repeat_ext\" inline=\"true\">\n                            <value name=\"TIMES\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">sides</title>\n                              </block>\n                            </value>\n                            <statement name=\"DO\">\n                              <block type=\"draw_move\" inline=\"true\">\n                                <title name=\"DIR\">moveForward</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"variables_get\">\n                                    <title name=\"VAR\">length</title>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"draw_turn\" inline=\"true\">\n                                    <title name=\"DIR\">turnRight</title>\n                                    <value name=\"VALUE\">\n                                      <block type=\"math_arithmetic\" inline=\"true\">\n                                        <title name=\"OP\">DIVIDE</title>\n                                        <value name=\"A\">\n                                          <block type=\"math_number\">\n                                            <title name=\"NUM\">360</title>\n                                          </block>\n                                        </value>\n                                        <value name=\"B\">\n                                          <block type=\"variables_get\">\n                                            <title name=\"VAR\">sides</title>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </statement>\n                            <next>\n                              <block type=\"jump\" inline=\"true\">\n                                <title name=\"DIR\">jumpForward</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_arithmetic\" inline=\"true\">\n                                    <title name=\"OP\">DIVIDE</title>\n                                    <value name=\"A\">\n                                      <block type=\"variables_get\">\n                                        <title name=\"VAR\">length</title>\n                                      </block>\n                                    </value>\n                                    <value name=\"B\">\n                                      <block type=\"math_number\">\n                                        <title name=\"NUM\">2</title>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"draw_turn\" inline=\"true\">\n                                    <title name=\"DIR\">turnLeft</title>\n                                    <value name=\"VALUE\">\n                                      <block type=\"math_arithmetic\" inline=\"true\">\n                                        <title name=\"OP\">DIVIDE</title>\n                                        <value name=\"A\">\n                                          <block type=\"math_number\">\n                                            <title name=\"NUM\">360</title>\n                                          </block>\n                                        </value>\n                                        <value name=\"B\">\n                                          <block type=\"variables_get\">\n                                            <title name=\"VAR\">sides</title>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type=\"jump\" inline=\"true\">\n                            <title name=\"DIR\">jumpForward</title>\n                            <value name=\"VALUE\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">length</title>\n                              </block>\n                            </value>\n                            <next>\n                              <block type=\"draw_turn\" inline=\"true\">\n                                <title name=\"DIR\">turnRight</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_arithmetic\" inline=\"true\">\n                                    <title name=\"OP\">DIVIDE</title>\n                                    <value name=\"A\">\n                                      <block type=\"math_number\">\n                                        <title name=\"NUM\">360</title>\n                                      </block>\n                                    </value>\n                                    <value name=\"B\">\n                                      <block type=\"variables_get\">\n                                        <title name=\"VAR\">sides</title>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 Artist Vars 13_authored_hint": {
          "Course_4_Artist_Vars_13_a": "You need two repeat loops (one inside the other) both repeating `sides` times.",
          "Course_4_Artist_Vars_13_b": "The inner repeat loop draws an octagon (turning to the left).   \n\nAfterwards, you need to move forward and turn right only in the outer loop.",
          "Course_4_Artist_Vars_13_c": "To adjust the shape to stay the same size when the number of sides change, use the math block to divide the length in pixels by the number of sides."
        },
        "Course 4 Artist Vars 6_authored_hint": {
          "Course_4_Artist_Vars_6_a": "To draw a regular polygon, turn **360/sides** each time."
        },
        "Course 4 Artist Vars 8_authored_hint": {
          "Course_4_Artist_Vars_8_a": "If you divide your starting length by the number of sides, the length of each side will get shorter as the number of sides gets higher."
        },
        "Course 4 Bee Params 7_authored_hint": {
          "notice_pattern": "Do you see a pattern in how the number of nectar changes? ",
          "count_with_for": "Notice that the nectar goes up in steps. What kind of block can you use to do the same thing many times while counting up?"
        },
        "Course 4 Bee Params 8_authored_hint": {
          "Course_4_Bee_Params_8_a": "It's okay to ask for a honey number and a nectar number each time.  If there's none of something, the number can be 0."
        },
        "Course 4 Play Lab Params 2_authored_hint": {
          "Course_4_Play_Lab_Params_2_a": "You will need to click \"edit\" on the jump function and update it so that it uses the `height` parameter."
        },
        "Course 4 Play Lab Vars 2_authored_hint": {
          "Course_4_Play_Lab_Vars_2_a": "Make sure to set the number for `dog_speed` to something larger than `cat_speed`."
        },
        "Course 4 Play Labs For Loops 2_authored_hint": {
          "Course_4_Play_Labs_For_Loops_2_a": "What would you add to your `for` loop every time to skip the even numbers?"
        },
        "Course 4 Playlab For Loops 4b_authored_hint": {
          "Course_4_Playlab_For_Loops_4b_a": "The flags are about 330 pixels away from the characters.",
          "Course_4_Playlab_For_Loops_4b_b": "How can you make each character reach 330 pixels in the same number of moves with different starting and stopping numbers?",
          "Course_4_Playlab_For_Loops_4b_c": "Remember, it doesn't matter how much a character passes the flag by on its last step, as long as it takes each character the same number of steps to get to the flag."
        },
        "Course 4 Playlab For Loops 5b_authored_hint": {
          "Course_4_Playlab_For_Loops_5b_a": "The characters are about 175 pixels away from the center.",
          "Course_4_Playlab_For_Loops_5b_b": "Remember, a character's next step will be longer than their last, since the counter keeps getting larger."
        },
        "Course 4 SCF 1_authored_hint": {
          "Course_4_SCF_1_a": "Each hexagon has 40 pixel sides.",
          "Course_4_SCF_1_b": "There is a 120 pixel jump between each hexagon in each horizontal line.",
          "Course_4_SCF_1_c": "Before you draw the second row of hexagons, you need to turn right by 60 degrees and jump forward 40 pixels.  \n\nOnce you're in the correct vertical location, you have to turn your artist back again and jump backward 320 pixels.",
          "Course_4_SCF_1_d": "Before you draw the third row of hexagons, you need to turn right by 60 degrees and jump forward 40 pixels.  \n\nOnce you're in the correct vertical location, you have to turn your artist back again and jump backward 440 pixels (120 pixels farther than your `shift down/forward` function. ",
          "Course_4_SCF_1_e": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_ext\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">2</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"procedures_callnoreturn\">\n          <mutation name=\"draw a line of hexagons\"></mutation>\n            <next>\n              <block type=\"procedures_callnoreturn\">\n              <mutation name=\"shift down/forward\"></mutation>\n                <next>\n                  <block type=\"procedures_callnoreturn\">\n                  <mutation name=\"draw a line of hexagons\"></mutation>\n                    <next>\n                      <block type=\"procedures_callnoreturn\">\n                      <mutation name=\"shift down/backward\"></mutation>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n  <block type=\"procedures_defnoreturn\">\n  <mutation></mutation>\n    <title name=\"NAME\">draw a hexagon</title>\n    <statement name=\"STACK\">\n      <block type=\"controls_repeat_ext\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">6</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"draw_move\" inline=\"true\">\n            <title name=\"DIR\">moveForward</title>\n            <value name=\"VALUE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">40</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"draw_turn\" inline=\"true\">\n                <title name=\"DIR\">turnRight</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">60</title>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type=\"procedures_defnoreturn\">\n  <mutation></mutation>\n    <title name=\"NAME\">shift down/backward</title>\n    <statement name=\"STACK\">\n      <block type=\"draw_turn\" inline=\"true\">\n        <title name=\"DIR\">turnRight</title>\n        <value name=\"VALUE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">60</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"jump\" inline=\"true\">\n            <title name=\"DIR\">jumpForward</title>\n            <value name=\"VALUE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">40</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"draw_turn\" inline=\"true\">\n                <title name=\"DIR\">turnLeft</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">60</title>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"jump\" inline=\"true\">\n                    <title name=\"DIR\">jumpBackward</title>\n                    <value name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">440</title>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type=\"procedures_defnoreturn\">\n  <mutation></mutation>\n    <title name=\"NAME\">draw a line of hexagons</title>\n    <statement name=\"STACK\">\n      <block type=\"controls_repeat_ext\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"procedures_callnoreturn\">\n          <mutation name=\"draw a hexagon\"></mutation>\n            <next>\n              <block type=\"jump\" inline=\"true\">\n                <title name=\"DIR\">jumpForward</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">120</title>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type=\"procedures_defnoreturn\">\n  <mutation></mutation>\n    <title name=\"NAME\">shift down/forward</title>\n    <statement name=\"STACK\">\n      <block type=\"draw_turn\" inline=\"true\">\n        <title name=\"DIR\">turnRight</title>\n        <value name=\"VALUE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">60</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"jump\" inline=\"true\">\n            <title name=\"DIR\">jumpForward</title>\n            <value name=\"VALUE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">40</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"draw_turn\" inline=\"true\">\n                <title name=\"DIR\">turnLeft</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">60</title>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"jump\" inline=\"true\">\n                    <title name=\"DIR\">jumpBackward</title>\n                    <value name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">320</title>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>"
        },
        "Course 4 SCF 1a_authored_hint": {
          "Course_4_SCF_1a_a": "Remember your functions from stage 16.",
          "Course_4_SCF_1a_b": "Look at this path as your main route:  \n\n![](https://images.code.org/1c3feab70af706409b3a05af4dc83c2e-image-1469726967858.png)",
          "Course_4_SCF_1a_c": "You should consider using a `for loop`. Not for the steps, but for the function parameter.",
          "Course_4_SCF_1a_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\" uservisible=\"false\" y=\"14\">\n    <next>\n      <block type=\"variables_set\" inline=\"false\" uservisible=\"false\">\n        <title name=\"VAR\">left</title>\n        <value name=\"VALUE\">\n          <block type=\"math_number\" uservisible=\"false\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"variables_set\" inline=\"false\" uservisible=\"false\">\n            <title name=\"VAR\">right</title>\n            <value name=\"VALUE\">\n              <block type=\"math_number\" uservisible=\"false\">\n                <title name=\"NUM\">0</title>\n              </block>\n            </value>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for\" inline=\"true\">\n        <title name=\"VAR\">counter</title>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">21</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"maze_move\">\n            <title name=\"DIR\">moveForward</title>\n            <next>\n              <block type=\"maze_if\">\n                <title name=\"DIR\">isPathLeft</title>\n                <statement name=\"DO\">\n                  <block type=\"procedures_callnoreturn\" inline=\"false\">\n                    <mutation name=\"get nectar\">\n                    <arg name=\"dir\"></arg>\n                    <arg name=\"counter\"></arg>\n                    </mutation>\n                    <value name=\"ARG0\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">left</title>\n                      </block>\n                    </value>\n                    <value name=\"ARG1\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n                <next>\n                  <block type=\"maze_turn\">\n                    <title name=\"DIR\">turnRight</title>\n                    <next>\n                      <block type=\"maze_move\">\n                        <title name=\"DIR\">moveForward</title>\n                        <next>\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnLeft</title>\n                            <next>\n                              <block type=\"maze_if\">\n                                <title name=\"DIR\">isPathRight</title>\n                                <statement name=\"DO\">\n                                  <block type=\"procedures_callnoreturn\" inline=\"false\">\n                                    <mutation name=\"get nectar\">\n                                    <arg name=\"dir\"></arg>\n                                    <arg name=\"counter\"></arg>\n                                    </mutation>\n                                    <value name=\"ARG0\">\n                                      <block type=\"variables_get\">\n                                        <title name=\"VAR\">right</title>\n                                      </block>\n                                    </value>\n                                    <value name=\"ARG1\">\n                                      <block type=\"variables_get\">\n                                        <title name=\"VAR\">counter</title>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n  <block type=\"procedures_defnoreturn\" editable=\"false\" usercreated=\"true\">\n    <mutation>\n    <arg name=\"dir\"></arg>\n    <arg name=\"counter\"></arg>\n    </mutation>\n    <title name=\"NAME\">get nectar</title>\n    <statement name=\"STACK\">\n      <block type=\"controls_if\" inline=\"false\">\n      <mutation else=\"1\"></mutation>\n        <value name=\"IF0\">\n          <block type=\"logic_compare\" inline=\"true\" movable=\"false\">\n            <title name=\"OP\">EQ</title>\n            <value name=\"A\">\n              <block type=\"parameters_get\">\n                <title name=\"VAR\">dir</title>\n              </block>\n            </value>\n            <value name=\"B\">\n              <block type=\"variables_get\">\n                <title name=\"VAR\">left</title>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name=\"DO0\">\n          <block type=\"maze_turn\">\n            <title name=\"DIR\">turnLeft</title>\n          </block>\n        </statement>\n        <statement name=\"ELSE\">\n          <block type=\"maze_turn\">\n            <title name=\"DIR\">turnRight</title>\n          </block>\n        </statement>\n        <next>\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">3</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n              </block>\n            </statement>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"parameters_get\">\n                    <title name=\"VAR\">counter</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                <block type=\"maze_nectar\"></block>\n                </statement>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">3</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"maze_move\">\n                        <title name=\"DIR\">moveBackward</title>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type=\"controls_if\" inline=\"false\">\n                      <mutation else=\"1\"></mutation>\n                        <value name=\"IF0\">\n                          <block type=\"logic_compare\" inline=\"true\" movable=\"false\">\n                            <title name=\"OP\">EQ</title>\n                            <value name=\"A\">\n                              <block type=\"parameters_get\">\n                                <title name=\"VAR\">dir</title>\n                              </block>\n                            </value>\n                            <value name=\"B\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">left</title>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <statement name=\"DO0\">\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnRight</title>\n                          </block>\n                        </statement>\n                        <statement name=\"ELSE\">\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnLeft</title>\n                          </block>\n                        </statement>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>"
        },
        "Course 4 SCF 1b_authored_hint": {
          "Course_4_SCF_1b_a": "Notice that the shape of all honey points is similar.  \n\nGood place for a function!",
          "Course_4_SCF_1b_b": "Look at this idea for how the bee might travel:  \n\n![](https://images.code.org/996ab4a2de6048cbb99b84c56cc4ad61-image-1469726859769.png)",
          "Course_4_SCF_1b_c": "You should consider using a `for loop` for the distance the bee travels.",
          "Course_4_SCF_1b_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for\" inline=\"true\">\n        <title name=\"VAR\">counter</title>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">2</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">4</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"procedures_callnoreturn\">\n          <mutation name=\"make honey up and over\"></mutation>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnLeft</title>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"maze_move\">\n                        <title name=\"DIR\">moveForward</title>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type=\"maze_turn\">\n                        <title name=\"DIR\">turnRight</title>\n                        <next>\n                          <block type=\"controls_repeat_ext\" inline=\"true\">\n                            <value name=\"TIMES\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n                              </block>\n                            </value>\n                            <statement name=\"DO\">\n                              <block type=\"maze_move\">\n                                <title name=\"DIR\">moveForward</title>\n                              </block>\n                            </statement>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n  <block type=\"procedures_defnoreturn\" editable=\"false\" usercreated=\"true\">\n  <mutation></mutation>\n    <title name=\"NAME\">make honey up and over</title>\n    <statement name=\"STACK\">\n      <block type=\"maze_move\">\n        <title name=\"DIR\">moveForward</title>\n        <next>\n          <block type=\"maze_turn\">\n            <title name=\"DIR\">turnRight</title>\n            <next>\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"maze_honey\">\n                    <next>\n                      <block type=\"maze_honey\">\n                        <next>\n                          <block type=\"maze_move\">\n                            <title name=\"DIR\">moveBackward</title>\n                            <next>\n                              <block type=\"maze_turn\">\n                                <title name=\"DIR\">turnLeft</title>\n                                <next>\n                                  <block type=\"maze_move\">\n                                    <title name=\"DIR\">moveBackward</title>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>"
        },
        "Course 4 SCF 2_authored_hint": {
          "Course_4_SCF_2_a": "Each octagon has 40 pixel sides.",
          "Course_4_SCF_2_b": "There is a 136 pixel jump between each octagon in each horizontal line.",
          "Course_4_SCF_2_c": "Before you draw the second row of octagons, you need to turn right by 45 degrees and jump forward 96 pixels.  \n\nOnce you're in the correct vertical location, you have to turn your artist back again and jump backward 408 pixels. ",
          "Course_4_SCF_2_d": "Notice that because there are fewer octagons in the even rows, you don't have to jump back any further to get to the starting place for the odd rows.  \n\nThis means you can use the same function for all rows.",
          "Course_4_SCF_2_e": "**Solution:**\n\n<xml>\n<block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_ext\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">2</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"procedures_callnoreturn\" inline=\"false\">\n            <mutation name=\"draw octagons\">\n            <arg name=\"numOctagons\"></arg>\n            </mutation>\n            <value name=\"ARG0\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"procedures_callnoreturn\">\n              <mutation name=\"shift down\"></mutation>\n                <next>\n                  <block type=\"procedures_callnoreturn\" inline=\"false\">\n                    <mutation name=\"draw octagons\">\n                    <arg name=\"numOctagons\"></arg>\n                    </mutation>\n                    <value name=\"ARG0\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">3</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"procedures_callnoreturn\">\n                      <mutation name=\"shift down\"></mutation>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type=\"procedures_callnoreturn\" inline=\"false\">\n            <mutation name=\"draw octagons\">\n            <arg name=\"numOctagons\"></arg>\n            </mutation>\n            <value name=\"ARG0\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n  <block type=\"procedures_defnoreturn\" editable=\"false\">\n    <mutation>\n    <arg name=\"numOctagons\"></arg>\n    </mutation>\n    <title name=\"NAME\">draw octagons</title>\n    <statement name=\"STACK\">\n      <block type=\"controls_repeat_ext\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"parameters_get\">\n            <title name=\"VAR\">numOctagons</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"procedures_callnoreturn\">\n          <mutation name=\"draw an octagon\"></mutation>\n            <next>\n              <block type=\"jump\" inline=\"true\">\n                <title name=\"DIR\">jumpForward</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">136</title>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type=\"procedures_defnoreturn\" editable=\"false\">\n  <mutation></mutation>\n    <title name=\"NAME\">draw an octagon</title>\n    <statement name=\"STACK\">\n      <block type=\"controls_repeat_ext\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">8</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"draw_move\" inline=\"true\">\n            <title name=\"DIR\">moveForward</title>\n            <value name=\"VALUE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">40</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"draw_turn\" inline=\"true\">\n                <title name=\"DIR\">turnRight</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">45</title>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type=\"procedures_defnoreturn\" editable=\"false\">\n  <mutation></mutation>\n    <title name=\"NAME\">shift down</title>\n    <statement name=\"STACK\">\n      <block type=\"draw_turn\" inline=\"true\">\n        <title name=\"DIR\">turnRight</title>\n        <value name=\"VALUE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">45</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"jump\" inline=\"true\">\n            <title name=\"DIR\">jumpForward</title>\n            <value name=\"VALUE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">96</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"draw_turn\" inline=\"true\">\n                <title name=\"DIR\">turnLeft</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">45</title>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"jump\" inline=\"true\">\n                    <title name=\"DIR\">jumpBackward</title>\n                    <value name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">408</title>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>"
        },
        "Course 4 SCF 3_authored_hint": {
          "Course_4_SCF_3_a": "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)",
          "Course_4_SCF_3_b": "This is a series of octagons with sides that are `counter` pixels long. ",
          "Course_4_SCF_3_c": "Each octagon is called from inside a `for` loop that goes from 200 down to 2 by 2. ",
          "Course_4_SCF_3_d": "Don't forget to turn by 22.5 degrees at the end of each iteration. ",
          "Course_4_SCF_3_e": "Both the color of each octagon and the width of the pen are controlled by the `counter` variable.",
          "Course_4_SCF_3_f": "**Solution:**\n\n<xml>\n  <block type=\"procedures_defnoreturn\" editable=\"false\">\n    <mutation>\n    <arg name=\"length\"></arg>\n    </mutation>\n    <title name=\"NAME\">draw an octagon</title>\n    <statement name=\"STACK\">\n      <block type=\"controls_repeat_ext\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">8</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"draw_move\" inline=\"true\">\n            <title name=\"DIR\">moveForward</title>\n            <value name=\"VALUE\">\n              <block type=\"parameters_get\">\n                <title name=\"VAR\">length</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"draw_turn\" inline=\"true\">\n                <title name=\"DIR\">turnRight</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">45</title>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for_counter\" inline=\"true\">\n      <mutation counter=\"counter\"></mutation>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">200</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">2</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">2</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n            <value name=\"COLOUR\">\n              <block type=\"colour_rgb\" inline=\"false\">\n                <value name=\"RED\">\n                  <block type=\"math_arithmetic\" inline=\"true\">\n                    <title name=\"OP\">MINUS</title>\n                    <value name=\"A\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">255</title>\n                      </block>\n                    </value>\n                    <value name=\"B\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <value name=\"GREEN\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">counter</title>\n                  </block>\n                </value>\n                <value name=\"BLUE\">\n                  <block type=\"math_arithmetic\" inline=\"true\">\n                    <title name=\"OP\">MULTIPLY</title>\n                    <value name=\"A\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <value name=\"B\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">2</title>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <next>\n              <block type=\"draw_width\" inline=\"false\">\n                <value name=\"WIDTH\">\n                  <block type=\"math_arithmetic\" inline=\"true\">\n                    <title name=\"OP\">DIVIDE</title>\n                    <value name=\"A\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <value name=\"B\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">4</title>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"procedures_callnoreturn\" inline=\"false\">\n                    <mutation name=\"draw an octagon\">\n                    <arg name=\"length\"></arg>\n                    </mutation>\n                    <value name=\"ARG0\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"draw_turn\" inline=\"true\">\n                        <title name=\"DIR\">turnLeft</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">22.5</title>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCFL 1_authored_hint": {
          "Course_4_SCFL_1_a": "Take a look at this option for movement:  \n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)",
          "Course_4_SCFL_1_b": "Try using two `for` loops: One for climbing up and grabbing nectar, and the other for climbing down and making honey.",
          "Course_4_SCFL_1_c": "Notice that one `for` loop needs several regular loops inside that repeat `counter` times to make the increasing stair pattern. \n\nThe other `for` loop only needs one regular loop to make `counter` amount of honey.",
          "Course_4_SCFL_1_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for\" inline=\"true\">\n        <title name=\"VAR\">counter</title>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"variables_get\">\n                <title name=\"VAR\">counter</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"maze_moveForward\"/>\n            </statement>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">counter</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"maze_nectar\"/>\n                </statement>\n                <next>\n                  <block type=\"maze_turn\">\n                    <title name=\"DIR\">turnLeft</title>\n                    <next>\n                      <block type=\"controls_repeat_ext\" inline=\"true\">\n                        <value name=\"TIMES\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                        <statement name=\"DO\">\n                          <block type=\"maze_moveForward\"/>\n                        </statement>\n                        <next>\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnRight</title>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type=\"maze_turn\">\n            <title name=\"DIR\">turnRight</title>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n                <next>\n                  <block type=\"controls_for\" inline=\"true\">\n                    <title name=\"VAR\">counter</title>\n                    <value name=\"FROM\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">2</title>\n                      </block>\n                    </value>\n                    <value name=\"TO\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">10</title>\n                      </block>\n                    </value>\n                    <value name=\"BY\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">2</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"maze_moveForward\">\n                        <next>\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnLeft</title>\n                            <next>\n                              <block type=\"maze_moveForward\">\n                                <next>\n                                  <block type=\"maze_turn\">\n                                    <title name=\"DIR\">turnRight</title>\n                                    <next>\n                                      <block type=\"controls_repeat_ext\" inline=\"true\">\n                                        <value name=\"TIMES\">\n                                          <block type=\"variables_get\">\n                                            <title name=\"VAR\">counter</title>\n                                          </block>\n                                        </value>\n                                        <statement name=\"DO\">\n                                          <block type=\"maze_honey\"/>\n                                        </statement>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCFL 1a_authored_hint": {
          "Course_4_SCFL_1a_a": "You may have to travel farther overall to use the smallest number of blocks.",
          "Course_4_SCFL_1a_b": "Take a look at this option for movement:  \n\n![](https://images.code.org/253d710ff7d1b494fe8fd20cfc92baaf-image-1469726263579.png)",
          "Course_4_SCFL_1a_c": "A `for loop` will help you execute the same pattern, but with a changing number of steps.  Notice that the number of steps needed decreases from 7 to 5 by 1.",
          "Course_4_SCFL_1a_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for\" inline=\"true\">\n        <title name=\"VAR\">counter</title>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">7</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">5</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"maze_moveForward\"/>\n            </statement>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnLeft</title>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"maze_moveForward\"/>\n                    </statement>\n                    <next>\n                      <block type=\"maze_turn\">\n                        <title name=\"DIR\">turnLeft</title>\n                        <next>\n                          <block type=\"controls_repeat_ext\" inline=\"true\">\n                            <value name=\"TIMES\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">2</title>\n                              </block>\n                            </value>\n                            <statement name=\"DO\">\n                              <block type=\"maze_moveForward\"/>\n                            </statement>\n                            <next>\n                              <block type=\"maze_turn\">\n                                <title name=\"DIR\">turnLeft</title>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCFL 1b_authored_hint": {
          "Course_4_SCFL_1b_a": "Try using a `for loop`.",
          "Course_4_SCFL_1b_b": "Take a look at this option for movement:  \n\n![](https://images.code.org/1957633c453f4025a3fd6ce0e201398b-image-1469642319721.png)",
          "Course_4_SCFL_1b_c": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for\" inline=\"true\">\n        <title name=\"VAR\">counter</title>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"variables_get\">\n                <title name=\"VAR\">counter</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"maze_moveForward\"/>\n            </statement>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnLeft</title>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"maze_moveForward\"/>\n                    </statement>\n                    <next>\n                      <block type=\"maze_turn\">\n                        <title name=\"DIR\">turnRight</title>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCFL 2_authored_hint": {
          "Course_4_SCFL_2_a": "Take a look at this option for movement:  \n\n![](https://images.code.org/a69c63a039031254097f19231dd7bf95-image-1469726483169.png)",
          "Course_4_SCFL_2_b": "Notice that there are three points during each iteration of this `for` loop where you stop to interact with objects.",
          "Course_4_SCFL_2_c": "During each iteration of the `for` loop, the number for each object relates to the `counter` variable in some way.",
          "Course_4_SCFL_2_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for\" inline=\"true\">\n        <title name=\"VAR\">counter</title>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">4</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"maze_moveForward\">\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">counter</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"maze_nectar\"/>\n                </statement>\n                <next>\n                  <block type=\"maze_turn\">\n                    <title name=\"DIR\">turnRight</title>\n                    <next>\n                      <block type=\"maze_moveForward\">\n                        <next>\n                          <block type=\"maze_moveForward\">\n                            <next>\n                              <block type=\"controls_repeat_ext\" inline=\"true\">\n                                <value name=\"TIMES\">\n                                  <block type=\"math_arithmetic\" inline=\"true\">\n                                    <title name=\"OP\">MULTIPLY</title>\n                                    <value name=\"A\">\n                                      <block type=\"variables_get\">\n                                        <title name=\"VAR\">counter</title>\n                                      </block>\n                                    </value>\n                                    <value name=\"B\">\n                                      <block type=\"math_number\">\n                                        <title name=\"NUM\">3</title>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                                <statement name=\"DO\">\n                                  <block type=\"maze_honey\"/>\n                                </statement>\n                                <next>\n                                  <block type=\"maze_turn\">\n                                    <title name=\"DIR\">turnLeft</title>\n                                    <next>\n                                      <block type=\"maze_moveForward\">\n                                        <next>\n                                          <block type=\"maze_moveForward\">\n                                            <next>\n                                              <block type=\"maze_turn\">\n                                                <title name=\"DIR\">turnRight</title>\n                                                <next>\n                                                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                                                    <value name=\"TIMES\">\n                                                      <block type=\"math_arithmetic\" inline=\"true\">\n                                                        <title name=\"OP\">POWER</title>\n                                                        <value name=\"A\">\n                                                          <block type=\"math_number\">\n                                                            <title name=\"NUM\">2</title>\n                                                          </block>\n                                                        </value>\n                                                        <value name=\"B\">\n                                                          <block type=\"variables_get\">\n                                                            <title name=\"VAR\">counter</title>\n                                                          </block>\n                                                        </value>\n                                                      </block>\n                                                    </value>\n                                                    <statement name=\"DO\">\n                                                      <block type=\"maze_nectar\"/>\n                                                    </statement>\n                                                  </block>\n                                                </next>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCFL 3_authored_hint": {
          "Course_4_SCFL_3_a": "The `pen width` is 1. The first square has 50 pixel sides, and each square is 50 pixels wider than the last.",
          "Course_4_SCFL_3_b": "The opacity on the brush is always `counter`/2.",
          "Course_4_SCFL_3_c": "After you make each square, don't forget to jump backward, turn, jump again, then turn back!",
          "Course_4_SCFL_3_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_width\" inline=\"false\">\n        <value name=\"WIDTH\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n            <value name=\"COLOUR\">\n              <block type=\"colour_picker\">\n                <title name=\"COLOUR\">#0000cd</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"controls_for_counter\" inline=\"true\">\n              <mutation counter=\"counter\"></mutation>\n                <value name=\"FROM\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">50</title>\n                  </block>\n                </value>\n                <value name=\"TO\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">350</title>\n                  </block>\n                </value>\n                <value name=\"BY\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">50</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"alpha\" inline=\"true\" id=\"alpha\">\n                    <value name=\"VALUE\">\n                      <block type=\"math_arithmetic\" inline=\"true\">\n                        <title name=\"OP\">DIVIDE</title>\n                        <value name=\"A\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                        <value name=\"B\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">2</title>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"controls_repeat_ext\" inline=\"true\">\n                        <value name=\"TIMES\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">4</title>\n                          </block>\n                        </value>\n                        <statement name=\"DO\">\n                          <block type=\"draw_move\" inline=\"true\">\n                            <title name=\"DIR\">moveForward</title>\n                            <value name=\"VALUE\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n                              </block>\n                            </value>\n                            <next>\n                              <block type=\"draw_turn\" inline=\"true\">\n                                <title name=\"DIR\">turnRight</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">90</title>\n                                  </block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type=\"jump\" inline=\"true\">\n                            <title name=\"DIR\">jumpBackward</title>\n                            <value name=\"VALUE\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">25</title>\n                              </block>\n                            </value>\n                            <next>\n                              <block type=\"draw_turn\" inline=\"true\">\n                                <title name=\"DIR\">turnRight</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">90</title>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"jump\" inline=\"true\">\n                                    <title name=\"DIR\">jumpBackward</title>\n                                    <value name=\"VALUE\">\n                                      <block type=\"math_number\">\n                                        <title name=\"NUM\">25</title>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type=\"draw_turn\" inline=\"true\">\n                                        <title name=\"DIR\">turnLeft</title>\n                                        <value name=\"VALUE\">\n                                          <block type=\"math_number\">\n                                            <title name=\"NUM\">90</title>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCFL 4_authored_hint": {
          "Course_4_SCFL_4_a": "The color change happens using the `set color with red, green, blue` block.  Red is always the value of `counter`, green is always `255 - counter`, and blue remains constant at 255 exactly.",
          "Course_4_SCFL_4_b": "Each shape is a square with sides that are `counter` pixels long, starting with 5px, and increasing by 5px all the way up to 200px.",
          "Course_4_SCFL_4_c": "The artist turns 15 degrees between each square.",
          "Course_4_SCFL_4_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_width\" inline=\"false\">\n        <value name=\"WIDTH\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"controls_for_counter\" inline=\"true\">\n          <mutation counter=\"counter\"></mutation>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">5</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">200</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">5</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n                <value name=\"COLOUR\">\n                  <block type=\"colour_rgb\" inline=\"false\">\n                    <value name=\"RED\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <value name=\"GREEN\">\n                      <block type=\"math_arithmetic\" inline=\"true\">\n                        <title name=\"OP\">MINUS</title>\n                        <value name=\"A\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">255</title>\n                          </block>\n                        </value>\n                        <value name=\"B\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <value name=\"BLUE\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">255</title>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">4</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"draw_move\" inline=\"true\">\n                        <title name=\"DIR\">moveForward</title>\n                        <value name=\"VALUE\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                        <next>\n                          <block type=\"draw_turn_by_constant\">\n                            <title name=\"DIR\">turnRight</title>\n                            <title name=\"VALUE\">90</title>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type=\"draw_turn\" inline=\"true\">\n                        <title name=\"DIR\">turnLeft</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">15</title>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCFL 6_authored_hint": {
          "Course_4_SCFL_6_a": "The color change happens using the `set color with red, green, blue` block.  Red is set constant at 255, green is always the value of `counter`, and blue is always `255 - counter`.",
          "Course_4_SCFL_6_b": "The code for this is much more simple than you might think.  Just set the color inside the `for loop`, move forward, then turn.",
          "Course_4_SCFL_6_c": "The `for loop` goes from 5 to 250 by 2. ",
          "Course_4_SCFL_6_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_width\" inline=\"false\">\n        <value name=\"WIDTH\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"controls_for_counter\" inline=\"true\">\n          <mutation counter=\"counter\"></mutation>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">5</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">250</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n                <value name=\"COLOUR\">\n                  <block type=\"colour_rgb\" inline=\"false\">\n                    <value name=\"RED\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">255</title>\n                      </block>\n                    </value>\n                    <value name=\"GREEN\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <value name=\"BLUE\">\n                      <block type=\"math_arithmetic\" inline=\"true\">\n                        <title name=\"OP\">MINUS</title>\n                        <value name=\"A\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">255</title>\n                          </block>\n                        </value>\n                        <value name=\"B\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"draw_move\" inline=\"true\">\n                    <title name=\"DIR\">moveForward</title>\n                    <value name=\"VALUE\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"draw_turn\" inline=\"true\">\n                        <title name=\"DIR\">turnRight</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">80</title>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCFL 7_authored_hint": {
          "Course_4_SCFL_7_a": "The color change happens using the `set color with red, green, blue` block.  Red is set to `counter`. Green is  `255 - counter`, and blue is set constant at 255.",
          "Course_4_SCFL_7_b": "This drawing is made using two similar `for loops`.  One goes from 5 to 200 by 2, the other goes from 200 to 5 by 2. ",
          "Course_4_SCFL_7_c": "Inside each `for loop` you move forward 5 pixels before you turn by `360 / counter`. Don't forget to set your brush to width `counter` before you do!",
          "Course_4_SCFL_7_d": "You'll need to turn left by 225 degrees between the two `for loops`.",
          "Course_4_SCFL_7_e": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"alpha\" inline=\"true\" id=\"alpha\">\n        <value name=\"VALUE\">\n          <block type=\"math_number_dropdown\">\n            <title name=\"NUM\" config=\"100,90,80,70,60,50,40,30,20,10,0\">20</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"controls_for_counter\" inline=\"true\">\n          <mutation counter=\"counter\"></mutation>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">5</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">200</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"draw_width\" inline=\"false\">\n                <value name=\"WIDTH\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">counter</title>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n                    <value name=\"COLOUR\">\n                      <block type=\"colour_rgb\" inline=\"false\">\n                        <value name=\"RED\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                        <value name=\"GREEN\">\n                          <block type=\"math_arithmetic\" inline=\"true\">\n                            <title name=\"OP\">MINUS</title>\n                            <value name=\"A\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">255</title>\n                              </block>\n                            </value>\n                            <value name=\"B\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <value name=\"BLUE\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">255</title>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"draw_move\" inline=\"true\">\n                        <title name=\"DIR\">moveForward</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">5</title>\n                          </block>\n                        </value>\n                        <next>\n                          <block type=\"draw_turn\" inline=\"true\">\n                            <title name=\"DIR\">turnLeft</title>\n                            <value name=\"VALUE\">\n                              <block type=\"math_arithmetic\" inline=\"true\">\n                                <title name=\"OP\">DIVIDE</title>\n                                <value name=\"A\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">360</title>\n                                  </block>\n                                </value>\n                                <value name=\"B\">\n                                  <block type=\"variables_get\">\n                                    <title name=\"VAR\">counter</title>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"draw_turn\" inline=\"true\">\n                <title name=\"DIR\">turnLeft</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">225</title>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"controls_for_counter\" inline=\"true\">\n                  <mutation counter=\"counter\"></mutation>\n                    <value name=\"FROM\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">200</title>\n                      </block>\n                    </value>\n                    <value name=\"TO\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">5</title>\n                      </block>\n                    </value>\n                    <value name=\"BY\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">2</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"draw_width\" inline=\"false\">\n                        <value name=\"WIDTH\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                        <next>\n                          <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n                            <value name=\"COLOUR\">\n                              <block type=\"colour_rgb\" inline=\"false\">\n                                <value name=\"RED\">\n                                  <block type=\"variables_get\">\n                                    <title name=\"VAR\">counter</title>\n                                  </block>\n                                </value>\n                                <value name=\"GREEN\">\n                                  <block type=\"math_arithmetic\" inline=\"true\">\n                                    <title name=\"OP\">MINUS</title>\n                                    <value name=\"A\">\n                                      <block type=\"math_number\">\n                                        <title name=\"NUM\">255</title>\n                                      </block>\n                                    </value>\n                                    <value name=\"B\">\n                                      <block type=\"variables_get\">\n                                        <title name=\"VAR\">counter</title>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                                <value name=\"BLUE\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">255</title>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <next>\n                              <block type=\"draw_move\" inline=\"true\">\n                                <title name=\"DIR\">moveForward</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">5</title>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"draw_turn\" inline=\"true\">\n                                    <title name=\"DIR\">turnRight</title>\n                                    <value name=\"VALUE\">\n                                      <block type=\"math_arithmetic\" inline=\"true\">\n                                        <title name=\"OP\">DIVIDE</title>\n                                        <value name=\"A\">\n                                          <block type=\"math_number\">\n                                            <title name=\"NUM\">360</title>\n                                          </block>\n                                        </value>\n                                        <value name=\"B\">\n                                          <block type=\"variables_get\">\n                                            <title name=\"VAR\">counter</title>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCV 1_authored_hint": {
          "Course_4_SCV_1_a": "Variables are helpful because you can add to them each time through a loop. ",
          "Course_4_SCV_1_b": "This puzzle has one loop that creates the polygon, one loop that repeats the polygon `sides` times, then another loop that does it all again after adding 5 to `sides`.",
          "Course_4_SCV_1_c": "Using a variable for `sides` and one for `length` makes the code cleaner because you can loop the same code multiple times, instead of creating a new copy for each set of numbers.",
          "Course_4_SCV_1_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_width\" inline=\"false\">\n        <value name=\"WIDTH\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"variables_set\" inline=\"false\">\n            <title name=\"VAR\">length</title>\n            <value name=\"VALUE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">500</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"variables_set\" inline=\"false\">\n                <title name=\"VAR\">sides</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">0</title>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">2</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n                        <value name=\"COLOUR\">\n                          <block type=\"colour_random\"/>\n                        </value>\n                        <next>\n                          <block type=\"variables_set\" inline=\"false\">\n                            <title name=\"VAR\">sides</title>\n                            <value name=\"VALUE\">\n                              <block type=\"math_arithmetic\" inline=\"true\">\n                                <title name=\"OP\">ADD</title>\n                                <value name=\"A\">\n                                  <block type=\"variables_get\">\n                                    <title name=\"VAR\">sides</title>\n                                  </block>\n                                </value>\n                                <value name=\"B\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">5</title>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <next>\n                              <block type=\"controls_repeat_ext\" inline=\"true\">\n                                <value name=\"TIMES\">\n                                  <block type=\"variables_get\">\n                                    <title name=\"VAR\">sides</title>\n                                  </block>\n                                </value>\n                                <statement name=\"DO\">\n                                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                                    <value name=\"TIMES\">\n                                      <block type=\"variables_get\">\n                                        <title name=\"VAR\">sides</title>\n                                      </block>\n                                    </value>\n                                    <statement name=\"DO\">\n                                      <block type=\"draw_move\" inline=\"true\">\n                                        <title name=\"DIR\">moveForward</title>\n                                        <value name=\"VALUE\">\n                                          <block type=\"math_arithmetic\" inline=\"true\">\n                                            <title name=\"OP\">DIVIDE</title>\n                                            <value name=\"A\">\n                                              <block type=\"variables_get\">\n                                                <title name=\"VAR\">length</title>\n                                              </block>\n                                            </value>\n                                            <value name=\"B\">\n                                              <block type=\"variables_get\">\n                                                <title name=\"VAR\">sides</title>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type=\"draw_turn\" inline=\"true\">\n                                            <title name=\"DIR\">turnLeft</title>\n                                            <value name=\"VALUE\">\n                                              <block type=\"math_arithmetic\" inline=\"true\">\n                                                <title name=\"OP\">DIVIDE</title>\n                                                <value name=\"A\">\n                                                  <block type=\"math_number\">\n                                                    <title name=\"NUM\">360</title>\n                                                  </block>\n                                                </value>\n                                                <value name=\"B\">\n                                                  <block type=\"variables_get\">\n                                                    <title name=\"VAR\">sides</title>\n                                                  </block>\n                                                </value>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </statement>\n                                    <next>\n                                      <block type=\"draw_turn\" inline=\"true\">\n                                        <title name=\"DIR\">turnRight</title>\n                                        <value name=\"VALUE\">\n                                          <block type=\"math_arithmetic\" inline=\"true\">\n                                            <title name=\"OP\">DIVIDE</title>\n                                            <value name=\"A\">\n                                              <block type=\"math_number\">\n                                                <title name=\"NUM\">360</title>\n                                              </block>\n                                            </value>\n                                            <value name=\"B\">\n                                              <block type=\"variables_get\">\n                                                <title name=\"VAR\">sides</title>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCV 2_authored_hint": {
          "Course_4_SCV_2_a": "The completed image is made up of 10 of these \"flowers\":  \n![](https://images.code.org/bac2a606dfa59c00409294499540267d-image-1469641972385.png)\n        \n...which are made up of 10 of these decagons:  \n![](https://images.code.org/1e15f278c9c1606f90a2490ec3a94eb4-image-1469642051512.png)",
          "Course_4_SCV_2_b": "This design uses nested loops (three deep). All loops run `sides` times. ",
          "Course_4_SCV_2_c": "The artist turns to the left when creating each decagon, but turns to the right in both of the other loops.",
          "Course_4_SCV_2_d": "To prevent all of your 10 petal \"flowers\" from getting drawn in the same place, make sure to jump forward by `length`/`sides` before you turn 360/`sides` degrees as part of your outermost loop.",
          "Course_4_SCV_2_e": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_width\" inline=\"false\">\n        <value name=\"WIDTH\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"variables_set\" inline=\"false\">\n            <title name=\"VAR\">length</title>\n            <value name=\"VALUE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">400</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"variables_set\" inline=\"false\">\n                <title name=\"VAR\">sides</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">10</title>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">sides</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n                        <value name=\"COLOUR\">\n                          <block type=\"colour_picker\">\n                            <title name=\"COLOUR\">#ff0000</title>\n                          </block>\n                        </value>\n                        <next>\n                          <block type=\"controls_repeat_ext\" inline=\"true\">\n                            <value name=\"TIMES\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">sides</title>\n                              </block>\n                            </value>\n                            <statement name=\"DO\">\n                              <block type=\"controls_repeat_ext\" inline=\"true\">\n                                <value name=\"TIMES\">\n                                  <block type=\"variables_get\">\n                                    <title name=\"VAR\">sides</title>\n                                  </block>\n                                </value>\n                                <statement name=\"DO\">\n                                  <block type=\"draw_move\" inline=\"true\">\n                                    <title name=\"DIR\">moveForward</title>\n                                    <value name=\"VALUE\">\n                                      <block type=\"math_arithmetic\" inline=\"true\">\n                                        <title name=\"OP\">DIVIDE</title>\n                                        <value name=\"A\">\n                                          <block type=\"variables_get\">\n                                            <title name=\"VAR\">length</title>\n                                          </block>\n                                        </value>\n                                        <value name=\"B\">\n                                          <block type=\"variables_get\">\n                                            <title name=\"VAR\">sides</title>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type=\"draw_turn\" inline=\"true\">\n                                        <title name=\"DIR\">turnLeft</title>\n                                        <value name=\"VALUE\">\n                                          <block type=\"math_arithmetic\" inline=\"true\">\n                                            <title name=\"OP\">DIVIDE</title>\n                                            <value name=\"A\">\n                                              <block type=\"math_number\">\n                                                <title name=\"NUM\">360</title>\n                                              </block>\n                                            </value>\n                                            <value name=\"B\">\n                                              <block type=\"variables_get\">\n                                                <title name=\"VAR\">sides</title>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </statement>\n                                <next>\n                                  <block type=\"draw_turn\" inline=\"true\">\n                                    <title name=\"DIR\">turnRight</title>\n                                    <value name=\"VALUE\">\n                                      <block type=\"math_arithmetic\" inline=\"true\">\n                                        <title name=\"OP\">DIVIDE</title>\n                                        <value name=\"A\">\n                                          <block type=\"math_number\">\n                                            <title name=\"NUM\">360</title>\n                                          </block>\n                                        </value>\n                                        <value name=\"B\">\n                                          <block type=\"variables_get\">\n                                            <title name=\"VAR\">sides</title>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </statement>\n                            <next>\n                              <block type=\"jump\" inline=\"true\">\n                                <title name=\"DIR\">jumpForward</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_arithmetic\" inline=\"true\">\n                                    <title name=\"OP\">DIVIDE</title>\n                                    <value name=\"A\">\n                                      <block type=\"variables_get\">\n                                        <title name=\"VAR\">length</title>\n                                      </block>\n                                    </value>\n                                    <value name=\"B\">\n                                      <block type=\"variables_get\">\n                                        <title name=\"VAR\">sides</title>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"draw_turn\" inline=\"true\">\n                                    <title name=\"DIR\">turnRight</title>\n                                    <value name=\"VALUE\">\n                                      <block type=\"math_arithmetic\" inline=\"true\">\n                                        <title name=\"OP\">DIVIDE</title>\n                                        <value name=\"A\">\n                                          <block type=\"math_number\">\n                                            <title name=\"NUM\">360</title>\n                                          </block>\n                                        </value>\n                                        <value name=\"B\">\n                                          <block type=\"variables_get\">\n                                            <title name=\"VAR\">sides</title>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCV 3_authored_hint": {
          "Course_4_SCV_3_a": "Use your math block to add and subtract points to the `points` variable when sprites collide. ",
          "Course_4_SCV_3_b": "You can change the parameter for how far you move your sprite each time one of the arrow keys is pressed.",
          "Course_4_SCV_3_c": "**Solution:**\n\n<xml><block type=\"when_run\"><next><block type=\"variables_set\" inline=\"false\"><title name=\"VAR\">points</title><value name=\"VALUE\"><block type=\"math_number\"><title name=\"NUM\">0</title></block></value></block></next></block><block type=\"studio_whenArrow\"><title name=\"VALUE\">up</title><next><block type=\"studio_moveDistanceParams\" inline=\"true\"><title name=\"SPRITE\">0</title><title name=\"DIR\">1</title><value name=\"DISTANCE\"><block type=\"math_number\"><title name=\"NUM\">25</title></block></value></block></next></block><block type=\"studio_whenArrow\"><title name=\"VALUE\">down</title><next><block type=\"studio_moveDistanceParams\" inline=\"true\"><title name=\"SPRITE\">0</title><title name=\"DIR\">4</title><value name=\"DISTANCE\"><block type=\"math_number\"><title name=\"NUM\">25</title></block></value></block></next></block><block type=\"studio_whenArrow\"><title name=\"VALUE\">left</title><next><block type=\"studio_moveDistanceParams\" inline=\"true\"><title name=\"SPRITE\">0</title><title name=\"DIR\">8</title><value name=\"DISTANCE\"><block type=\"math_number\"><title name=\"NUM\">25</title></block></value></block></next></block><block type=\"studio_whenArrow\"><title name=\"VALUE\">right</title><next><block type=\"studio_moveDistanceParams\" inline=\"true\"><title name=\"SPRITE\">0</title><title name=\"DIR\">2</title><value name=\"DISTANCE\"><block type=\"math_number\"><title name=\"NUM\">25</title></block></value></block></next></block><block type=\"studio_whenSpriteCollided\"><title name=\"SPRITE1\">0</title><title name=\"SPRITE2\">1</title><next><block type=\"variables_set\" inline=\"false\"><title name=\"VAR\">points</title><value name=\"VALUE\"><block type=\"math_arithmetic\" inline=\"true\"><title name=\"OP\">ADD</title><value name=\"A\"><block type=\"variables_get\"><title name=\"VAR\">points</title></block></value><value name=\"B\"><block type=\"math_number\"><title name=\"NUM\">2</title></block></value></block></value></block></next></block><block type=\"studio_whenSpriteCollided\"><title name=\"SPRITE1\">0</title><title name=\"SPRITE2\">2</title><next><block type=\"variables_set\" inline=\"false\"><title name=\"VAR\">points</title><value name=\"VALUE\"><block type=\"math_arithmetic\" inline=\"true\"><title name=\"OP\">ADD</title><value name=\"A\"><block type=\"variables_get\"><title name=\"VAR\">points</title></block></value><value name=\"B\"><block type=\"math_number\"><title name=\"NUM\">3</title></block></value></block></value></block></next></block>\n<block type=\"studio_whenSpriteCollided\">\n    <title name=\"SPRITE1\">1</title>\n    <title name=\"SPRITE2\">2</title>\n    <next>\n      <block type=\"variables_set\" inline=\"false\">\n        <title name=\"VAR\">points</title>\n        <value name=\"VALUE\">\n          <block type=\"math_arithmetic\" inline=\"true\">\n            <title name=\"OP\">MINUS</title>\n            <value name=\"A\">\n              <block type=\"variables_get\">\n                <title name=\"VAR\">points</title>\n              </block>\n            </value>\n            <value name=\"B\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCV 4_authored_hint": {
          "Course_4_SCV_4_a": "Three variables will help you out here.  One for units of nectar, one for units of honey, and one for how far the bee should move each iteration.",
          "Course_4_SCV_4_b": "It will be very helpful to use three loops inside of your main loop.  One for moving forward, one for collecting nectar and one for making honey. ",
          "Course_4_SCV_4_c": "Take a look at this option for movement:  \n\n![](https://images.code.org/78f8fb83da67c5b80126555a362b8b20-image-1469641782259.png)",
          "Course_4_SCV_4_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"variables_set\" inline=\"false\">\n        <title name=\"VAR\">honey</title>\n        <value name=\"VALUE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">4</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"variables_set\" inline=\"false\">\n            <title name=\"VAR\">nectar</title>\n            <value name=\"VALUE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">6</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">5</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"math_arithmetic\" inline=\"true\">\n                        <title name=\"OP\">MINUS</title>\n                        <value name=\"A\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">nectar</title>\n                          </block>\n                        </value>\n                        <value name=\"B\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">1</title>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"maze_moveForward\"/>\n                    </statement>\n                    <next>\n                      <block type=\"controls_repeat_ext\" inline=\"true\">\n                        <value name=\"TIMES\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">nectar</title>\n                          </block>\n                        </value>\n                        <statement name=\"DO\">\n                          <block type=\"maze_nectar\"/>\n                        </statement>\n                        <next>\n                          <block type=\"maze_moveForward\">\n                            <next>\n                              <block type=\"controls_repeat_ext\" inline=\"true\">\n                                <value name=\"TIMES\">\n                                  <block type=\"variables_get\">\n                                    <title name=\"VAR\">honey</title>\n                                  </block>\n                                </value>\n                                <statement name=\"DO\">\n                                  <block type=\"maze_honey\"/>\n                                </statement>\n                                <next>\n                                  <block type=\"maze_moveForward\">\n                                    <next>\n                                      <block type=\"maze_turn\">\n                                        <title name=\"DIR\">turnRight</title>\n                                        <next>\n                                          <block type=\"variables_set\" inline=\"false\">\n                                            <title name=\"VAR\">honey</title>\n                                            <value name=\"VALUE\">\n                                              <block type=\"math_arithmetic\" inline=\"true\">\n                                                <title name=\"OP\">ADD</title>\n                                                <value name=\"A\">\n                                                  <block type=\"variables_get\">\n                                                    <title name=\"VAR\">honey</title>\n                                                  </block>\n                                                </value>\n                                                <value name=\"B\">\n                                                  <block type=\"math_number\">\n                                                    <title name=\"NUM\">1</title>\n                                                  </block>\n                                                </value>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type=\"variables_set\" inline=\"false\">\n                                                <title name=\"VAR\">nectar</title>\n                                                <value name=\"VALUE\">\n                                                  <block type=\"math_arithmetic\" inline=\"true\">\n                                                    <title name=\"OP\">MINUS</title>\n                                                    <value name=\"A\">\n                                                      <block type=\"variables_get\">\n                                                        <title name=\"VAR\">nectar</title>\n                                                      </block>\n                                                    </value>\n                                                    <value name=\"B\">\n                                                      <block type=\"math_number\">\n                                                        <title name=\"NUM\">1</title>\n                                                      </block>\n                                                    </value>\n                                                  </block>\n                                                </value>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCV 5_authored_hint": {
          "Course_4_SCV_5_a": "Take a look at this option for movement:\n\n![](https://images.code.org/7f6f09c55cf9552a91fc1d33f44a7315-image-1469641639330.png)",
          "Course_4_SCV_5_b": "Each time through the loop, the flowers have two less nectar and the bee needs to make one more honey.",
          "Course_4_SCV_5_c": "Notice that at the beginning of the outside loop, the bee moves as many times as there is nectar in the next flower.",
          "Course_4_SCV_5_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"variables_set\" inline=\"false\">\n        <title name=\"VAR\">honey</title>\n        <value name=\"VALUE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"variables_set\" inline=\"false\">\n            <title name=\"VAR\">nectar</title>\n            <value name=\"VALUE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">5</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">3</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">nectar</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"maze_move\">\n                        <title name=\"DIR\">moveForward</title>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type=\"maze_turn\">\n                        <title name=\"DIR\">turnRight</title>\n                        <next>\n                          <block type=\"controls_repeat_ext\" inline=\"true\">\n                            <value name=\"TIMES\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">nectar</title>\n                              </block>\n                            </value>\n                            <statement name=\"DO\">\n                              <block type=\"maze_nectar\"/>\n                            </statement>\n                            <next>\n                              <block type=\"maze_move\">\n                                <title name=\"DIR\">moveForward</title>\n                                <next>\n                                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                                    <value name=\"TIMES\">\n                                      <block type=\"variables_get\">\n                                        <title name=\"VAR\">honey</title>\n                                      </block>\n                                    </value>\n                                    <statement name=\"DO\">\n                                      <block type=\"maze_honey\"/>\n                                    </statement>\n                                    <next>\n                                      <block type=\"variables_set\" inline=\"false\">\n                                        <title name=\"VAR\">honey</title>\n                                        <value name=\"VALUE\">\n                                          <block type=\"math_arithmetic\" inline=\"true\">\n            <title name=\"OP\">ADD</title>\n            <value name=\"A\">\n              <block type=\"variables_get\">\n                <title name=\"VAR\">honey</title>\n              </block>\n            </value>\n            <value name=\"B\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n          </block>\n                                        </value>\n                                        <next>\n                                          <block type=\"variables_set\" inline=\"false\">\n                                            <title name=\"VAR\">nectar</title>\n                                            <value name=\"VALUE\">\n                                              <block type=\"math_arithmetic\" inline=\"true\">\n            <title name=\"OP\">MINUS</title>\n            <value name=\"A\">\n              <block type=\"variables_get\">\n                <title name=\"VAR\">nectar</title>\n              </block>\n            </value>\n            <value name=\"B\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n          </block>\n                                            </value>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "Course 4 SCV 6_authored_hint": {
          "Course_4_SCV_6_a": "Take a look at what a single completed shape looks like\n\n![](https://images.code.org/9e30d3a87186cefe730984feee195806-image-1469642178866.png)",
          "Course_4_SCV_6_b": "You will benefit from creating 8 variables: red1, green1, blue1, red2, green2, blue2, length, and sides.",
          "Course_4_SCV_6_c": "Each of the shape's 5 sides is broken up into pieces of `length`/`sides` where the zig is teal (rgb = 0,175,200) and the zag is purple (rgb = 100, 50, 150).",
          "Course_4_SCV_6_d": "To zig, turn left by `360`/`sides`.  To zag, turn right by `360`/`sides`. ",
          "Course_4_SCV_6_e": "The rest of the program is very standard for making a full 360 degree rotation from a shape, except that we are overlapping the shapes by half, so we have to turn right by `180`/`sides`, which means that we need twice as many of them as usual (`sides`*`2` repetitions). ",
          "Course_4_SCV_6_f": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_width\" inline=\"false\">\n        <value name=\"WIDTH\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"variables_set\" inline=\"false\">\n            <title name=\"VAR\">red1</title>\n            <value name=\"VALUE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">0</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"variables_set\" inline=\"false\">\n                <title name=\"VAR\">green1</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">175</title>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"variables_set\" inline=\"false\">\n                    <title name=\"VAR\">blue1</title>\n                    <value name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">200</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"variables_set\" inline=\"false\">\n                        <title name=\"VAR\">red2</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">100</title>\n                          </block>\n                        </value>\n                        <next>\n                          <block type=\"variables_set\" inline=\"false\">\n                            <title name=\"VAR\">green2</title>\n                            <value name=\"VALUE\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">50</title>\n                              </block>\n                            </value>\n                            <next>\n                              <block type=\"variables_set\" inline=\"false\">\n                                <title name=\"VAR\">blue2</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">150</title>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"variables_set\" inline=\"false\">\n                                    <title name=\"VAR\">length</title>\n                                    <value name=\"VALUE\">\n                                      <block type=\"math_number\">\n                                        <title name=\"NUM\">70</title>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type=\"variables_set\" inline=\"false\">\n                                        <title name=\"VAR\">sides</title>\n                                        <value name=\"VALUE\">\n                                          <block type=\"math_number\">\n                                            <title name=\"NUM\">5</title>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type=\"controls_repeat_ext\" inline=\"true\">\n                                            <value name=\"TIMES\">\n                                              <block type=\"math_arithmetic\" inline=\"true\">\n                                                <title name=\"OP\">MULTIPLY</title>\n                                                <value name=\"A\">\n                                                  <block type=\"math_number\">\n                                                    <title name=\"NUM\">2</title>\n                                                  </block>\n                                                </value>\n                                                <value name=\"B\">\n                                                  <block type=\"variables_get\">\n                                                    <title name=\"VAR\">sides</title>\n                                                  </block>\n                                                </value>\n                                              </block>\n                                            </value>\n                                            <statement name=\"DO\">\n                                              <block type=\"controls_repeat_ext\" inline=\"true\">\n                                                <value name=\"TIMES\">\n                                                  <block type=\"variables_get\">\n                                                    <title name=\"VAR\">sides</title>\n                                                  </block>\n                                                </value>\n                                                <statement name=\"DO\">\n                                                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                                                    <value name=\"TIMES\">\n                                                      <block type=\"variables_get\">\n                                                        <title name=\"VAR\">sides</title>\n                                                      </block>\n                                                    </value>\n                                                    <statement name=\"DO\">\n                                                      <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n                                                        <value name=\"COLOUR\">\n                                                          <block type=\"colour_rgb\" inline=\"false\">\n                                                            <value name=\"RED\">\n                                                            <block type=\"variables_get\">\n                                                            <title name=\"VAR\">red1</title>\n                                                            </block>\n                                                            </value>\n                                                            <value name=\"GREEN\">\n                                                            <block type=\"variables_get\">\n                                                            <title name=\"VAR\">green1</title>\n                                                            </block>\n                                                            </value>\n                                                            <value name=\"BLUE\">\n                                                            <block type=\"variables_get\">\n                                                            <title name=\"VAR\">blue1</title>\n                                                            </block>\n                                                            </value>\n                                                          </block>\n                                                        </value>\n                                                        <next>\n                                                          <block type=\"draw_move\" inline=\"true\">\n                                                            <title name=\"DIR\">moveForward</title>\n                                                            <value name=\"VALUE\">\n                                                            <block type=\"math_arithmetic\" inline=\"true\">\n                                                            <title name=\"OP\">DIVIDE</title>\n                                                            <value name=\"A\">\n                                                            <block type=\"variables_get\">\n                                                            <title name=\"VAR\">length</title>\n                                                            </block>\n                                                            </value>\n                                                            <value name=\"B\">\n                                                            <block type=\"variables_get\">\n                                                            <title name=\"VAR\">sides</title>\n                                                            </block>\n                                                            </value>\n                                                            </block>\n                                                            </value>\n                                                            <next>\n                                                            <block type=\"draw_turn\" inline=\"true\">\n                                                            <title name=\"DIR\">turnLeft</title>\n                                                            <value name=\"VALUE\">\n                                                            <block type=\"math_arithmetic\" inline=\"true\">\n                                                            <title name=\"OP\">DIVIDE</title>\n                                                            <value name=\"A\">\n                                                            <block type=\"math_number\">\n                                                            <title name=\"NUM\">360</title>\n                                                            </block>\n                                                            </value>\n                                                            <value name=\"B\">\n                                                            <block type=\"variables_get\">\n                                                            <title name=\"VAR\">sides</title>\n                                                            </block>\n                                                            </value>\n                                                            </block>\n                                                            </value>\n                                                            <next>\n                                                            <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n                                                            <value name=\"COLOUR\">\n                                                            <block type=\"colour_rgb\" inline=\"false\">\n                                                            <value name=\"RED\">\n                                                            <block type=\"variables_get\">\n                                                            <title name=\"VAR\">red2</title>\n                                                            </block>\n                                                            </value>\n                                                            <value name=\"GREEN\">\n                                                            <block type=\"variables_get\">\n                                                            <title name=\"VAR\">green2</title>\n                                                            </block>\n                                                            </value>\n                                                            <value name=\"BLUE\">\n                                                            <block type=\"variables_get\">\n                                                            <title name=\"VAR\">blue2</title>\n                                                            </block>\n                                                            </value>\n                                                            </block>\n                                                            </value>\n                                                            <next>\n                                                            <block type=\"draw_move\" inline=\"true\">\n                                                            <title name=\"DIR\">moveForward</title>\n                                                            <value name=\"VALUE\">\n                                                            <block type=\"math_arithmetic\" inline=\"true\">\n                                                            <title name=\"OP\">DIVIDE</title>\n                                                            <value name=\"A\">\n                                                            <block type=\"variables_get\">\n                                                            <title name=\"VAR\">length</title>\n                                                            </block>\n                                                            </value>\n                                                            <value name=\"B\">\n                                                            <block type=\"variables_get\">\n                                                            <title name=\"VAR\">sides</title>\n                                                            </block>\n                                                            </value>\n                                                            </block>\n                                                            </value>\n                                                            <next>\n                                                            <block type=\"draw_turn\" inline=\"true\">\n                                                            <title name=\"DIR\">turnRight</title>\n                                                            <value name=\"VALUE\">\n                                                            <block type=\"math_arithmetic\" inline=\"true\">\n                                                            <title name=\"OP\">DIVIDE</title>\n                                                            <value name=\"A\">\n                                                            <block type=\"math_number\">\n                                                            <title name=\"NUM\">360</title>\n                                                            </block>\n                                                            </value>\n                                                            <value name=\"B\">\n                                                            <block type=\"variables_get\">\n                                                            <title name=\"VAR\">sides</title>\n                                                            </block>\n                                                            </value>\n                                                            </block>\n                                                            </value>\n                                                            </block>\n                                                            </next>\n                                                            </block>\n                                                            </next>\n                                                            </block>\n                                                            </next>\n                                                            </block>\n                                                            </next>\n                                                          </block>\n                                                        </next>\n                                                      </block>\n                                                    </statement>\n                                                    <next>\n                                                      <block type=\"draw_turn\" inline=\"true\">\n                                                        <title name=\"DIR\">turnRight</title>\n                                                        <value name=\"VALUE\">\n                                                          <block type=\"math_arithmetic\" inline=\"true\">\n                                                            <title name=\"OP\">DIVIDE</title>\n                                                            <value name=\"A\">\n                                                            <block type=\"math_number\">\n                                                            <title name=\"NUM\">360</title>\n                                                            </block>\n                                                            </value>\n                                                            <value name=\"B\">\n                                                            <block type=\"variables_get\">\n                                                            <title name=\"VAR\">sides</title>\n                                                            </block>\n                                                            </value>\n                                                          </block>\n                                                        </value>\n                                                      </block>\n                                                    </next>\n                                                  </block>\n                                                </statement>\n                                                <next>\n                                                  <block type=\"draw_turn\" inline=\"true\">\n                                                    <title name=\"DIR\">turnRight</title>\n                                                    <value name=\"VALUE\">\n                                                      <block type=\"math_arithmetic\" inline=\"true\">\n                                                        <title name=\"OP\">DIVIDE</title>\n                                                        <value name=\"A\">\n                                                          <block type=\"math_number\">\n                                                            <title name=\"NUM\">180</title>\n                                                          </block>\n                                                        </value>\n                                                        <value name=\"B\">\n                                                          <block type=\"variables_get\">\n                                                            <title name=\"VAR\">sides</title>\n                                                          </block>\n                                                        </value>\n                                                      </block>\n                                                    </value>\n                                                  </block>\n                                                </next>\n                                              </block>\n                                            </statement>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "CourseF_PlayLab_vars2_authored_hint": {
          "Course_4_Play_Lab_Vars_2_a": "Make sure to set the number for `dog_speed` to something larger than `cat_speed`."
        },
        "D_Frozen_nested3_authored_hint": {
          "courseD_artist_project3_a": "Use the drop down menu on the `turn` blocks to choose the angle you need!",
          "courseD_artist_project3_b": "Try nested loops!\n\nUse the code that you created to draw a line of shapes and nest it inside of another loop.  At the bottom, before the outside loop ends, add a block that will turn Elsa around.  \n\n- Try 72 degrees if you are repeating the outer loop 5 times\n- Try 60 degrees if you are repeating the outer loop 6 times"
        },
        "D_Frozen_nested4_authored_hint": {
          "courseD_artist_project4_a": "Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:\n\n<img src=\"https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png\" width=\"200px\" />\n\n\nHere's a set of hexagons with squares:\n\n<img src=\"https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png\" width=\"200px\" />\n",
          "courseD_artist_project4_b": "To try this, draw your first snowflake, turn, then draw a second snowflake."
        },
        "D_Frozen_nested5_authored_hint": {
          "courseD_artist_project4_a": "Lines of 2 hexagons and 4 triangles:\n\n<img src=\"https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png\" width=\"200px\" />\n"
        },
        "D_Frozen_nested6_authored_hint": {
          "courseD_artist_project1a_a": "This stair step uses a 76 degree turn and repeats 4 times.\n\n<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\" width=\"200px\" />\n",
          "courseD_artist_project1a_b": "These patterns are a lot like the stair steps from other puzzles, but using a different angle."
        },
        "D_Frozen_nested7_authored_hint": {
          "courseD_artist_project2a_a": "This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.\n\n<img src=\"https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png\" width=\"200px\" />\n"
        },
        "D_Frozen_nested8_authored_hint": {
          "courseD_artist_project3a_a": "You can choose different amounts to rotate your shape! What about 18 times with a 20 degree turn in between?"
        },
        "D_Frozen_nested9_authored_hint": {
          "courseD_artist_project4a_a": "Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)\n\n<img src=\"https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png\" width=\"200px\" />\n"
        },
        "Farmer for Authored Hint testing_authored_hint": {
          "first_hint": "This is the first hint.\n\nIt has *some* **basic** `markup`",
          "second_hint": "This is the second hint. It has a hint video.",
          "last_hint": "This is the third and final hint. It doesn't have anything special."
        },
        "Farmer for TTS testing_authored_hint": {
          "first_hint": "This is the first hint.\n\nIt has *some* **basic** `markup`",
          "second_hint": "This is the second hint. It has an image.\n\n![](https://images.code.org/cab43107265a683a6216e18faab2353f-image-1452027548372.png)",
          "last_hint": "This is the third and final hint. It doesn't have anything special."
        },
        "Function intro Ryan_authored_hint": {
          "Function_intro_Ryan_b": "If you call the functions correctly, this is the path you will travel...",
          "Function_intro_Ryan_a": "You can call a function many times inside of your program!  Try calling it twice to solve this puzzle."
        },
        "Harvesting_authored_hint": {
          "pointer_harvester_test": "What kind of block can I use to check something and make a decision?"
        },
        "Inspirational Artwork_authored_hint": {
          "brush_width": "We set the brush width to 1, then the color to blue before we did anything else.",
          "double_loop": "Try putting a `for loop` inside of a `repeat` loop.",
          "specifics": "The `for loop` runs from three to seventeen for each of the six \"petals\" before moving on to create the next, drawing shapes with only an odd number of sides.\n        \nThe `set alpha` block uses division to fade the color as the counter gets higher.",
          "after": "When you're done with each \"petal\", be sure to `move forward` 20 pixels before you make a 60 degree rotation.",
          "solution": "**Solution**\n\n\n![Image of Solution Blocks](https://images.code.org/d85a18bd31a09f87b41a818fc8d6c1cc-image-1469641375258.png)"
        },
        "K2.0 sequence 1_authored_hint": {
          "K2.0_sequence_1_a": "This program is missing one block. Can you figure out which one?"
        },
        "K2.0 sequence 10_authored_hint": {
          "K2.0_sequence_10_a": "If you're having trouble, try writing down the steps on a piece of paper first.",
          "K2.0_sequence_10_b": "You will need three different kinds of arrows to solve this puzzle."
        },
        "K2.0 sequence 12_authored_hint": {
          "K2.0_sequence_12_a": "If the pig isn't moving far enough, try adding another block."
        },
        "K2.0 sequence 2_authored_hint": {
          "K2.0_sequence_2_a": "One of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?"
        },
        "K2.0 sequence 3_authored_hint": {
          "K2.0_sequence_3_a": "If you are having trouble, try to figure out what the correct path is and then remove the block that doesn't fit."
        },
        "K2.0 sequence 4_authored_hint": {
          "K2.0_sequence_4_a": "Use 2 different arrow blocks to solve this puzzle!"
        },
        "K2.0 sequence 5_authored_hint": {
          "K2.0_sequence_5": "Your final code should have three movement blocks."
        },
        "K2.0 sequence 6_authored_hint": {
          "K2.0_sequence_6_a": "There is 1 block that you need to add to move the bird to the pig.",
          "K2.0_sequence_6_b": "If you can't figure out what to do, try drawing the puzzle on paper and use your finger to figure out which way to move."
        },
        "K2.0 sequence 7_authored_hint": {
          "K2.0_sequence_7_a": "If you're stuck, try drawing the image on paper to see how the bird should move."
        },
        "K2.0 sequence 8_authored_hint": {
          "K2.0_sequence_8_a": "Stuck? Try tracing the bird's path with your finger."
        },
        "K2.0 sequence 9_authored_hint": {
          "K2.0_sequence_9_a": "If you're having trouble, try writing down the steps on a piece of paper first.",
          "K2.0_sequence_9_b": "You will need to go three different directions to solve this puzzle."
        },
        "K2.0 sequence FP_authored_hint": {
          "K2.0_sequence_FP_a": "If the path you need is unclear, use your finger to trace your way from the bird to the pig."
        },
        "K2.0 sequence pre_authored_hint": {
          "K2.0_sequence_pre_a": "If you are having trouble getting the bird to move, make sure blocks are connected under `when run`."
        },
        "MC Agent Freeplay_authored_hint": {
          "MC_HOC_2017_13_Cole_a": "Try having the Agent build some minecart tracks so you can explore the world!"
        },
        "MC_HOC_2017_01_Cole_authored_hint": {
          "MC_HOC_2017_01_Cole_a": "Use your arrow keys to direct the player into the house. End up on the orange square to win."
        },
        "MC_HOC_2017_01_RETRY_authored_hint": {
          "MC_HOC_2017_01_RETRY_a": "Drag one `move forward` block from the toolbox to the workspace, and snap it into place beneath the `when run` block.",
          "MC_HOC_2017_01_RETRY_b": "Don't forget to click \"Run\" to run the code for the Agent.",
          "MC_HOC_2017_01_RETRY_c": "Once the Agent has run all of its code, you can move the player with the arrow keys!"
        },
        "MC_HOC_2017_02_Cole_authored_hint": {
          "MC_HOC_2017_02_Cole_a": "Move the Agent forward two spaces to stand on the pressure plate.  That will open the door for your player.",
          "MC_HOC_2017_02_Cole_b": "Press \"Run\"!\n\nYou can run your code even if it's not right.  Run and reset your code over and over again until you figure out what's going wrong.",
          "MC_HOC_2017_02_Cole_c": "Once the Agent has opened the door, use the arrow keys to move the player to the map!",
          "MC_HOC_2017_02_Cole_d": "Make sure the Agent is following the path outlined on the map!"
        },
        "MC_HOC_2017_02_Will_authored_hint": {
          "MC_HOC_2017_02_Cole_a": "Move the Agent forward two spaces to stand on the pressure plate.  That will open the door for your player.",
          "MC_HOC_2017_02_Cole_b": "Press \"Run Agent\"!\n\nYou can run your code even if it's not right.  Run and reset your code over and over again until you figure out what's going wrong.",
          "MC_HOC_2017_02_Cole_c": "Once the Agent has opened the door, use the arrow keys to move the player to the orange square."
        },
        "MC_HOC_2017_03_Cole_authored_hint": {
          "MC_HOC_2017_03_Cole_a": "Once you get the Agent to the pressure plate, you can use your arrow keys to walk the player to the compass!",
          "MC_HOC_2017_03_Cole_b": "Does the code feel a little long?  Try using a `repeat` loop and see if you can figure out how to make it shorter!"
        },
        "MC_HOC_2017_04POINT5_Cole_authored_hint": {
          "MC_HOC_2017_04POINT5_Cole_a": "Crossing these two pressure plates will open the path for the player.\n\n![](https://images.code.org/9760c20b83d191570858617f8522ddad-image-1507751553614.50.25.png)"
        },
        "MC_HOC_2017_04POINT5_RYAN_authored_hint": {
          "MC_HOC_2017_04POINT5_RYAN_b": "Use the `turn right` block to change the agent's direction ",
          "MC_HOC_2017_04POINT5_RYAN_a": "The Agent only needs to get to the first pressure plate to let Alex or Steve through to the axe."
        },
        "MC_HOC_2017_04_Cole_authored_hint": {
          "MC_HOC_2017_04_Cole_a": "The Agent needs to `move forward` 7 times.  How can you use a `repeat` loop to make that happen?",
          "MC_HOC_2017_04_Cole_c": "Press \"Run\"!\n\nYou can run your code even if it's not right.  Run and reset your code over and over again until you figure out what's going wrong.",
          "MC_HOC_2017_04_Cole_b": "Once the Agent gets to the pressure plate, the Agent will open the door for the player."
        },
        "MC_HOC_2017_05_Cole_authored_hint": {
          "MC_HOC_2017_05_Cole_a": "Did you know that you can put more than one piece of code inside of a loop?  Try moving forward **and** placing a plank inside of a `repeat` to complete this puzzle.",
          "MC_HOC_2017_05_Cole_b": "Get the Agent across the river, building a bridge as you go."
        },
        "MC_HOC_2017_05_Josh_authored_hint": {
          "MC_HOC_2017_05_Cole_a": "Did you know that you can put more than one piece of code inside of a loop?  Try placing a plank **and** moving forward inside of a `repeat` to complete this puzzle."
        },
        "MC_HOC_2017_06_Cole_authored_hint": {
          "MC_HOC_2017_06_Cole_a": "How many times does this loop run?  How many times *should* it run?",
          "MC_HOC_2017_06_Cole_b": "Help the Agent build a bridge all the way across the water! "
        },
        "MC_HOC_2017_06_Josh_authored_hint": {
          "MC_HOC_2017_06_Cole_a": "Try putting more than one instruction inside of a `repeat` loop!"
        },
        "MC_HOC_2017_07_Cole_authored_hint": {
          "MC_HOC_2017_07_Cole_c": "All you need to have the Agent do is clear the path to the Minecart.",
          "MC_HOC_2017_07_Cole_a": "To solve this puzzle, figure out what the `clear path` function does and call it as many times as you need using the small green `clear path` block from the toolbox.",
          "MC_HOC_2017_07_Cole_b": "Try mixing the function blocks with other blocks from the toolbox to help you solve this puzzle."
        },
        "MC_HOC_2017_08_RY_authored_hint": {
          "MC_HOC_2017_08_RY_a": "Press \"Run Agent\"!\n\nYou can run your code even if it's not right.  Run and reset your code over and over again until you figure out what's going wrong.",
          "MC_HOC_2017_08_RY_b": "There are LOTS of ways to solve this puzzle.  Try a few!"
        },
        "MC_HOC_2017_08_Will_authored_hint": {
          "MC_HOC_2017_08_RY_a": "Press \"Run Agent\"!\n\nYou can run your code even if it's not right.  Run and reset your code over and over again until you figure out what's going wrong.",
          "MC_HOC_2017_08_RY_b": "There are LOTS of ways to solve this puzzle.  Try a few!"
        },
        "MC_HOC_2017_10_Cole_authored_hint": {
          "MC_HOC_2017_10_Cole_a": "Use functions to make solving this puzzle easier!"
        },
        "MC_HOC_2017_10_RETRY_authored_hint": {
          "MC_HOC_2017_10_Cole_b": "Don't know where to go?  See if you can find the dotted line!",
          "MC_HOC_2017_10_Cole_a": "Use functions to make solving this puzzle easier!"
        },
        "MC_HOC_2017_13_Cole_authored_hint": {
          "MC_HOC_2017_13_Cole_a": "Try having the Agent build some bridges so that Alex or Steve can walk around beyond the edges of the map."
        },
        "MC_HOC_2017_4.5v2_authored_hint": {
          "MC_HOC_2017_04POINT5_Cole_a": "Crossing these two pressure plates will open the path for the player.\n\n![](https://images.code.org/9760c20b83d191570858617f8522ddad-image-1507751553614.50.25.png)"
        },
        "MC_HOC_2017_Ali_authored_hint": {
          "MC_HOC_2017_08_RY_a": "Press \"Run\"!\n\nYou can run your code even if it's not right.  Run and reset your code over and over again until you figure out what's going wrong.",
          "MC_HOC_2017_08_RY_b": "There are LOTS of ways to solve this puzzle.  Try a few!",
          "MC_HOC_2017_08_RY_c": "Try following the dotted line for a simple path through the lava."
        },
        "MC_HOC_2017_FP20x20_authored_hint": {
          "MC_HOC_2017_13_Cole_a": "Try having the Agent build some minecart tracks so you can explore the world!"
        },
        "MikeStar_authored_hint": {
          "hint1": "Don't give up!"
        },
        "MikeStarHard_authored_hint": {
          "hint1": "Don't give up!"
        },
        "MikeStarNested_authored_hint": {
          "hint1": "Don't give up!"
        },
        "NEW Course 4 Artist Functions 13_authored_hint": {
          "NEW_Course_4_Artist_Functions_13_a": "Try editing the `draw a line of squares` function so that you don't have to call it twice.",
          "NEW_Course_4_Artist_Functions_13_c": "What code would you need if you were going to try to make a star using regular lines instead of boxes?"
        },
        "NEW Course 4 Artist Functions 4_authored_hint": {
          "NEW_Course_4_Artist_Functions_4_a": "You will have to use a `turn right by 120 degrees` block after each square."
        },
        "NEW Course 4 Artist Functions 9_authored_hint": {
          "NEW_Course_4_Artist_Functions_9_a": "Try running the code before you add any blocks.   What makes the drawing look a little off?",
          "NEW_Course_4_Artist_Functions_9_b": "If you can't quite put your finger on what's going wrong, try slowing down the artist's by moving the slider to the left."
        },
        "NEW Course 4 Artist Params 11_authored_hint": {
          "NEW_Course_4_Artist_Params_11_a": "There is more than one number that needs to be replaced by a variable inside the function."
        },
        "NEW Course 4 Artist Params 13_authored_hint": {
          "NEW_Course_4_Artist_Params_13_a": "You will need to divide the *perimeter* by the number of sides in order to keep the shapes the same size overall. "
        },
        "NEW Course 4 Artist Params 14_authored_hint": {
          "NEW_Course_4_Artist_Params_14_a": "It's okay to run the program a few times to figure out how the function works with different parameters."
        },
        "NEW Course 4 Artist Params inspire_authored_hint": {
          "brush_width": "We set the brush width to 1, then the color to blue before we did anything else.",
          "double_loop": "Try putting a `for loop` inside of a `repeat` loop.",
          "specifics": "The `for loop` runs from three to seventeen for each of the six \"petals\" before moving on to create the next, drawing shapes with only an odd number of sides.\n        \nThe `set alpha` block uses division to fade the color as the counter gets higher.",
          "after": "When you're done with each \"petal\", be sure to `move forward` 20 pixels before you make a 60 degree rotation.",
          "solution": "**Solution**\n\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_width\" inline=\"false\">\n        <value name=\"WIDTH\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n            <value name=\"COLOUR\">\n              <block type=\"colour_picker\">\n                <title name=\"COLOUR\">#0000cd</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">6</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"controls_for_counter\" inline=\"true\">\n                  <mutation counter=\"counter\"></mutation>\n                    <value name=\"FROM\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">3</title>\n                      </block>\n                    </value>\n                    <value name=\"TO\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">17</title>\n                      </block>\n                    </value>\n                    <value name=\"BY\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">2</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"alpha\" inline=\"true\" id=\"alpha\">\n                        <value name=\"VALUE\">\n                          <block type=\"math_arithmetic\" inline=\"true\">\n                            <title name=\"OP\">DIVIDE</title>\n                            <value name=\"A\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">500</title>\n                              </block>\n                            </value>\n                            <value name=\"B\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <next>\n                          <block type=\"procedures_callnoreturn\" inline=\"false\">\n                            <mutation name=\"draw a polygon\">\n                            <arg name=\"length\"></arg>\n                            <arg name=\"sides\"></arg>\n                            </mutation>\n                            <value name=\"ARG0\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">30</title>\n                              </block>\n                            </value>\n                            <value name=\"ARG1\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type=\"draw_move\" inline=\"true\">\n                        <title name=\"DIR\">moveForward</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">20</title>\n                          </block>\n                        </value>\n                        <next>\n                          <block type=\"draw_turn\" inline=\"true\">\n                            <title name=\"DIR\">turnRight</title>\n                            <value name=\"VALUE\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">60</title>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n  </xml>"
        },
        "NEW Course 4 Bee For Loops 10a_authored_hint": {
          "NEW_Course_4_Bee_For_Loops_10a_a": "Can you find a pattern between the number of steps you need to take and the number of nectars to gather?",
          "NEW_Course_4_Bee_For_Loops_10a_b": "You'll need to have 2 repeats, one will use a math block."
        },
        "NEW Course 4 Bee For Loops 7_authored_hint": {
          "NEW_Course_4_Bee_For_Loops_7_a": "Try doing some math with the counter variable.\n\nWhat do you have to do to the counter at each flower to equal the amount of nectar you need to collect?"
        },
        "NEW Course 4 Bee For Loops 8_authored_hint": {
          "NEW_Course_4_Bee_For_Loops_8_a": "If your loop is counting up, the increment is added to your counter variable each time through. \n\nWhat do you need to add to each number to get the number after it?"
        },
        "New Minecraft Hero Project_authored_hint": {
          "MC_HOC_2017_13_Cole_a": "Try having the Agent build some bridges so that Alex or Steve can walk around beyond the edges of the map."
        },
        "Overworld Avoid Monsters_authored_hint": {
          "mc_8_a": "There are a few paths you can take. Which is the shortest?",
          "mc_8_b": "Use `repeat` loops to simplify your code.",
          "mc_8_c": "Your goal is to get into the doorway of the house at the top of the screen."
        },
        "Overworld Avoid Monsters_2018_authored_hint": {
          "mc_8_a": "There are a few paths you can take. Which is the shortest?",
          "mc_8_b": "Use `repeat` loops to simplify your code.",
          "mc_8_c": "Your goal is to get into the doorway of the house at the top of the screen."
        },
        "Overworld Chop Tree_authored_hint": {
          "mc_2_a": "You need to `move forward` twice to stand in front of the tree.\n",
          "mc_2_b": "The `destroy block` command cuts down the tree in front of you."
        },
        "Overworld Chop Tree_2018_authored_hint": {
          "mc_2_a": "You need to `move forward` twice to stand in front of the tree.\n",
          "mc_2_b": "The `destroy block` command cuts down the tree in front of you."
        },
        "Overworld Chop Trees_authored_hint": {
          "mc_4_a": "You can chop down trees in any order. What path takes the smallest number of blocks?\n",
          "mc_4_b": "The `destroy block` command cuts down the tree in front of you."
        },
        "Overworld Chop Trees_2018_authored_hint": {
          "mc_4_a": "You can chop down trees in any order. What path takes the smallest number of blocks?\n",
          "mc_4_b": "The `destroy block` command cuts down the tree in front of you."
        },
        "Overworld House Frame Chosen_authored_hint": {
          "mc_6_a": "Click the arrow on the `place` block to choose what you want to place.",
          "mc_6_b": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.",
          "mc_6_c": "You can put more than one block inside of a `repeat` loop."
        },
        "Overworld House Frame Chosen_2018_authored_hint": {
          "mc_6_a": "Click the arrow on the `place` block to choose what you want to place.",
          "mc_6_b": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.",
          "mc_6_c": "You can put more than one block inside of a `repeat` loop."
        },
        "Overworld Move to Sheep_authored_hint": {
          "mc_1_a": "The `move forward` block is at the top of the toolbox.\n",
          "mc_1_b": "Make sure both `move forward` blocks are snapped to the `when run` block.\n"
        },
        "Overworld Move to Sheep_2018_authored_hint": {
          "mc_1_a": "The `move forward` block is at the top of the toolbox.\n",
          "mc_1_b": "Make sure both `move forward` blocks are snapped to the `when run` block.\n"
        },
        "Overworld Place Wall_authored_hint": {
          "mc_5_a": "Use the `place` block first, and then the `move` block.",
          "mc_5_b": "Make sure both blocks are inside of the `repeat` loop to run the code more than once.",
          "mc_5_c": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet."
        },
        "Overworld Place Wall_2018_authored_hint": {
          "mc_5_a": "Use the `place` block first, and then the `move` block.",
          "mc_5_b": "Make sure both blocks are inside of the `repeat` loop to run the code more than once.",
          "mc_5_c": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet."
        },
        "Overworld Plant Crops_authored_hint": {
          "mc_7_a": "Use the `plant crop` block to plant a crop in the space where you are standing.",
          "mc_7_b": "Both stripes of dark brown land by the water need to be filled with crops.",
          "mc_7_c": "You can put more than one block inside of a `repeat` loop."
        },
        "Overworld Plant Crops_2018_authored_hint": {
          "mc_7_a": "Use the `plant crop` block to plant a crop in the space where you are standing.",
          "mc_7_b": "Both stripes of dark brown land by the water need to be filled with crops.",
          "mc_7_c": "You can put more than one block inside of a `repeat` loop."
        },
        "Overworld Powered Minecart_authored_hint": {
          "mc_13_a": "Use `place rail` to lay rail on the square you are standing in.",
          "mc_13_b": "Use `repeat` loops to make your code shorter."
        },
        "Overworld Powered Minecart_2018_authored_hint": {
          "mc_13_a": "Use `place rail` to lay rail on the square you are standing in.",
          "mc_13_b": "Use `repeat` loops to make your code shorter."
        },
        "Overworld Shear Sheep_authored_hint": {
          "mc_3_a": "The `shear` block gets the sheep in front of you. Are you facing the sheep?\n",
          "mc_3_b": "If you need to change the way you are facing, use a `turn` block.\n",
          "mc_3_c": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.\n"
        },
        "Overworld Shear Sheep_2018_authored_hint": {
          "mc_3_a": "The `shear` block gets the sheep in front of you. Are you facing the sheep?\n",
          "mc_3_b": "If you need to change the way you are facing, use a `turn` block.\n",
          "mc_3_c": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.\n"
        },
        "Pattern Bee 1_authored_hint": {
          "conditional_pointer": "Start by thinking about this part: what's different each step of the way? What kind of block can you use to make a *decision* about whether you're at a flower or honeycomb?\n\n![](https://images.code.org/a4883ea91c2f879ca1bb281d7944ed87-image-1471477752512.48.07 PM.png)",
          "turn_at_honeycomb_pointer": "Other than making honey, do you see anything different that you have to do at each honeycomb?"
        },
        "Planning Farmer_authored_hint": {
          "conditional_pointer": "Start by thinking about this part: what's different each step of the way? What kind of block can you use to make a *decision* about whether you're at a flower or honeycomb?\n\n![](https://images.code.org/a4883ea91c2f879ca1bb281d7944ed87-image-1471477752512.48.07 PM.png)",
          "turn_at_honeycomb_pointer": "Other than making honey, do you see anything different that you have to do at each honeycomb?"
        },
        "Quantum Bee - Ryan_authored_hint": {
          "test_hint": "This is a test hint."
        },
        "Underground Avoiding Lava_authored_hint": {
          "mc_11_a": "All of the code is in place to check for lava and deal with it. All you need to do is add a block to move.",
          "mc_11_b": "Should your `move forward` command go inside of the `if` statement or after?"
        },
        "Underground Avoiding Lava_2018_authored_hint": {
          "mc_11_a": "All of the code is in place to check for lava and deal with it. All you need to do is add a block to move.",
          "mc_11_b": "Should your `move forward` command go inside of the `if` statement or after?"
        },
        "Underground If Statements_authored_hint": {
          "mc_12_a": "The spaces with red speckles are where you will find Redstone.",
          "mc_12_b": "Can you use a `repeat` loop to make your code shorter?",
          "mc_12_c": "Use an `if` statement to check spaces for lava, then place cobblestones. "
        },
        "Underground If Statements_2018_authored_hint": {
          "mc_12_a": "The spaces with red speckles are where you will find Redstone.",
          "mc_12_b": "Can you use a `repeat` loop to make your code shorter?",
          "mc_12_c": "Use an `if` statement to check spaces for lava, then place cobblestones. "
        },
        "Underground Iron_authored_hint": {
          "mc_10_a": "The iron blocks are the speckled spaces behind the torch! How are you going to get over there?",
          "mc_10_b": "When you are standing at the edge of the lava, use `place cobblestone ahead` to make a safe path. Then, you can walk over it!",
          "mc_10_c": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet."
        },
        "Underground Iron_2018_authored_hint": {
          "mc_10_a": "The iron blocks are the speckled spaces behind the torch! How are you going to get over there?",
          "mc_10_b": "When you are standing at the edge of the lava, use `place cobblestone ahead` to make a safe path. Then, you can walk over it!",
          "mc_10_c": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet."
        },
        "Underground Mining Coal_authored_hint": {
          "mc_9_a": "Are you facing the right way? The `destroy block` mines the block in front of you.",
          "mc_9_b": "The black specks in the wall are coal! Use `destroy block` on these to mine the coal.",
          "mc_9_c": "Use `place torch` to put a torch in the space where you are standing."
        },
        "Underground Mining Coal_2018_authored_hint": {
          "mc_9_a": "Are you facing the right way? The `destroy block` mines the block in front of you.",
          "mc_9_b": "The black specks in the wall are coal! Use `destroy block` on these to mine the coal.",
          "mc_9_c": "Use `place torch` to put a torch in the space where you are standing."
        },
        "Valentine_artist2_01_authored_hint": {
          "Valentine_artist2_01_a": "Each side of the grass is 30 pixels long. Try using a stair step pattern.",
          "Valentine_artist2_01_b": "Do you see any patterns repeating? You should be using two `move forward` blocks and two different `turn` blocks inside a loop. ",
          "Valentine_artist2_01_c": "Try this loop\n\n<xml><block type=\"controls_repeat\">\n            <title name=\"TIMES\">8</title>\n            <statement name=\"DO\">\n              <block type=\"draw_move_by_constant\">\n                <title name=\"DIR\">moveForward</title>\n                <title name=\"VALUE\">30</title>\n                <next>\n                  <block type=\"draw_turn_by_constant\">\n                    <title name=\"DIR\">turnRight</title>\n                    <title name=\"VALUE\">90</title>\n                    <next>\n                      <block type=\"draw_move_by_constant\">\n                        <title name=\"DIR\">moveForward</title>\n                        <title name=\"VALUE\">30</title>\n                        <next>\n                          <block type=\"draw_turn_by_constant\">\n                            <title name=\"DIR\">turnLeft</title>\n                            <title name=\"VALUE\">90</title>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block></xml>"
        },
        "Valentine_artist_01_authored_hint": {
          "Valentine_artist_01_a": "Which direction does the artist need to face to move? Which direction does the artist need to face to place a new llama sticker?",
          "Valentine_artist_01_b": "The artist needs to place 10 llama stickers and turn 90 degrees at each turn."
        },
        "Valentine_playlab_01_authored_hint": {
          "Valentine_playlab_01_a": "Snap the `actor 1 throw red hearts down` block into the `when actor 1 clicked` event.\n\nDon't forget to change `left` to `down`!",
          "Valentine_playlab_01_b": "Use the `move actor 1 left` block by clicking it into place beneath the `when left arrow clicked` event."
        },
        "aE2_authored_hint": {
          "aE2_a": "Notice that since the napkins are 20 pixels long, you'll need to jump 20 pixels before you start your next loop."
        },
        "aE3_authored_hint": {
          "aE3_a": "After you run your **nested loop** from the last stage, you need to jump back to the start of the line.",
          "aE3_b": "Don't forget to move the artist down before you start a new row of shapes! \n\nTo move the artist down and get him facing the right way again, make sure to:\n- Turn 90 degrees (to face down)\n- Jump 20 pixels (to get to new row)\n- Turn back 90 degrees (to face right again)",
          "aE3_c": "When you're all done, your **nested loops** should be three repeats deep.",
          "aE3_d": "If your code becomes too confusing, you can always click \"Start Over\" and try again!"
        },
        "aE3alternate_authored_hint": {
          "aE3alternate_a": "After you run your **nested loop** from the last stage, you need to jump back to the start of the line.",
          "aE3alternate_b": "Don't forget to move the artist down before you start a new row of shapes! \n\nTo move the artist down and get him facing the right way again, make sure to:\n- Turn 90 degrees (to face down)\n- Jump 20 pixels (to get to new row)\n- Turn back 90 degrees (to face right again)",
          "aE3alternate_c": "When you're all done, your **nested loops** should be three repeats deep.",
          "aE3alternate_d": "If your code becomes too confusing, you can always click \"Start Over\" and try again!"
        },
        "aE3alternateB_authored_hint": {
          "aE4alternateB_a": "After you run your **nested loop** from the last stage, you need to jump back to the start of the line.",
          "aE4alternateB_b": "Don't forget to move the artist down before you start a new row of shapes! \n\nTo move the artist down and get him facing the right way again, make sure to:\n- Turn 90 degrees (to face down)\n- Jump 20 pixels (to get to new row)\n- Turn back 90 degrees (to face right again)",
          "aE4alternateB_c": "When you're all done, your **nested loops** should be three repeats deep.",
          "aE4alternateB_d": "If your code becomes too confusing, you can always click \"Start Over\" and try again!"
        },
        "aE4_authored_hint": {
          "aE4_a": "After you run your **nested loop** from the last stage, you need to jump back to the start of the line.",
          "aE4_b": "Don't forget to move the artist down before you start a new row of shapes! \n\nTo move the artist down and get him facing the right way again, make sure to:\n- Turn 90 degrees (to face down)\n- Jump 20 pixels (to get to new row)\n- Turn back 90 degrees (to face right again)",
          "aE4_c": "When you're all done, your **nested loops** should be three repeats deep.",
          "aE4_d": "If your code becomes too confusing, you can always click \"Start Over\" and try again!"
        },
        "aE6_authored_hint": {
          "aE6_a": "If there are 180 degrees in a semicircle and each loop the artist makes turns 3 degrees, how many times would you need to loop to draw half of a full circle?\n\n**180 ÷ 3 = ?**"
        },
        "aE7_authored_hint": {
          "aE7_a": "Draw the bottom half of a circle and then the top half of a circle to make one segment.",
          "aE7_b": "You will need 4 segments to complete this puzzle."
        },
        "aE8_authored_hint": {
          "aE8_a": "To make a square from your line, you will need to: \n-  draw the line \n-  use the curvy corner\n\nRepeat these steps 4 times."
        },
        "allHallows2017_authored_hint": {
          "allHallows2017_a": "Careful!  GT might follow behind you on his bike and erase your line!",
          "allHallows2017_g": "Sarah says: \"Are you cold? Come sit in the corner... It's 90 degrees!\"",
          "allHallows2017_c": "Jordyn says: \"You crayon't stop now! Keep going!\"",
          "allHallows2017_d": "Josh says: \"You will need to draw on your coding skills to complete this puzzle!\"",
          "allHallows2017_e": "Dani says: \"I'm not good at puns. Try using a repeat block!\"",
          "allHallows2017_b": "Baker says: \"The Chicago crayon only works on the *green line*.\"",
          "allHallows2017_f": "Amy says: \"You can do it! Just think outside the box\""
        },
        "artistDebugVideo1_authored_hint": {
          "courseA_artist_loops7_a": "Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern."
        },
        "artistLoopsK2_authored_hint": {
          "artistLoopsK2_a": "If you want the loop to repeat more than 4 times, you can change the number at the top of the block."
        },
        "artistLoopsK2gradek_artist_loops3_authored_hint": {
          "artistLoopsK2_a": "If you want the loop to repeat more than 4 times, you can change the number at the top of the block."
        },
        "artistLoopsK3_authored_hint": {
          "artistLoopsK3_a": "Try using what you've learned about repeat blocks to complete this puzzle!"
        },
        "artistLoopsK4_authored_hint": {
          "artistLoopsK4_a": "Stuck? Try running the code to see which block is incorrect."
        },
        "artistLoopsK5_authored_hint": {
          "artistLoopsK5_a": "All 4 of the starting blocks should go inside of your repeat block to solve this puzzle."
        },
        "artistLoopsK6_authored_hint": {
          "artistLoopsK6_a": "Try running the code to see where there is a bug."
        },
        "artistLoopsK7_authored_hint": {
          "artistLoopsK7_a": "All of the blocks you need for this puzzle are already in your workspace!"
        },
        "artistLoopsK8_authored_hint": {
          "artistLoopsK8_a": "Try running the code to see where there is a bug."
        },
        "artistLoopsK9_authored_hint": {
          "artistLoopsK9_a": "This challenge uses FOUR loops, one right after another!"
        },
        "artistLoopsKA_authored_hint": {
          "artistLoopsKA_a": "Use the jump block to move forward without drawing a line."
        },
        "artistLoopsKB_authored_hint": {
          "artistLoopsKB_a": "There should be 3 blocks inside of your loop to solve this puzzle."
        },
        "comment_intro_maze_2018_authored_hint": {
          "courseC_maze_programming4_a": "Comments are also helpful when other people try to read your code.",
          "courseC_maze_programming4_b": "Add a comment when you change directions- what would have happened if you turned the other way?"
        },
        "course1_artist_loops_challenge1_authored_hint": {
          "courseA_artist_loops_challenge1_a": "You can use loops like this to create the walls and the roof. Try repeating different blocks.\n\n\n\n![](https://images.code.org/1581a2f599b501103064fc9864aa964d-image-1491863694560.png)\n\nDesign your own or click the ![](https://images.code.org/53090194cea5dbf35ce9e35205156f5d-image-1491864793265.png) for some ideas!\n\n",
          "courseA_artist_loops_challenge1_b": "![](https://images.code.org/34f3bae38f77f07eaf455188c0b008e5-image-1491864823946.png)",
          "courseA_artist_loops_challenge1_c": "![](https://images.code.org/24b208839971803f3f6cd6ae41da56df-image-1491864839734.png)",
          "courseA_artist_loops_challenge1_d": "![](https://images.code.org/d3ccefffa0cc77bdd4a597cdb49fc85e-image-1491864847347.png)"
        },
        "course1_artist_loops_challenge2_authored_hint": {
          "harvey_tictactoe": "You can use `jump` blocks to move to other spaces."
        },
        "course1_artist_loops_challenge3_authored_hint": {
          "courseA_artist_loops_challenge2_a": "Blocks like this: <xml>  <block type=\"simple_move_up_left\"/></xml> will let your artist move at a slant!",
          "courseA_artist_loops_challenge2_b": "When you finish one bird house, `jump` to the next!",
          "courseA_artist_loops_challenge2_c": "You will need a LOT of blocks inside the loop for this challenge."
        },
        "course1_artist_loops_challenge4_authored_hint": {
          "courseB_artist_loops_challenge1_a": "Blocks like this: <xml>  <block type=\"simple_move_up_right\"/></xml> will let your artist move at a slant!",
          "courseB_artist_loops_challenge1_b": "When you finish one of the dice, `jump` to the next!",
          "courseB_artist_loops_challenge1_c": "You will need to `move` or `jump` over some of the same lines twice. "
        },
        "course1_collector_loops_challenge1_authored_hint": {
          "courseA_collector_loops_challenge1_a": "Try changing the numbers in each loop if something goes wrong.",
          "courseA_collector_loops_challenge1_b": "You don't need to use a loop if you are only doing something one time.",
          "courseA_collector_loops_challenge1_c": "There are 6 gems on the right side of the cave, but you only need to move and collect 5 times. Do you know why?"
        },
        "course1_collector_loops_challenge2_authored_hint": {
          "courseA_collector_loops_challenge2_b": "You only need to use one ![](https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34 PM.png) block to solve this.\n\n",
          "courseA_collector_loops_challenge2_a": "You can move back over the path a second time before moving south.\n\n![](https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png)"
        },
        "course1_collector_loops_challenge3_authored_hint": {
          "courseB_collector_loops_challenge1_b": "Start by looping the commands `move south` and `get treasure`.\n\n<xml>\n  <block type=\"maze_moveSouth\"/><next>\n  <block type=\"collector_collect\"/></next>\n  </xml>\n",
          "courseB_collector_loops_challenge1_a": "The north pattern is a little different than the south pattern.\n\n<xml>\n  <block type=\"collector_collect\"/><next>\n  <block type=\"maze_moveNorth\"/></next>next>\n  </xml>\n",
          "courseB_collector_loops_challenge1_c": "Move East twice between each path.\n\n<xml>\n  <block type=\"maze_moveEast\"/><next>\n  <block type=\"maze_moveEast\"/></next>next>\n  </xml>\n\nYou can do this with only 14 blocks. Click for one more hint to see a solution. \n",
          "courseB_collector_loops_challenge1_d": "Try this!\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_simplified\">\n        <title name=\"TIMES\">5</title>\n        <statement name=\"DO\">\n          <block type=\"maze_moveSouth\">\n            <next>\n              <block type=\"collector_collect\"/>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type=\"maze_moveEast\">\n            <next>\n              <block type=\"maze_moveEast\">\n                <next>\n                  <block type=\"controls_repeat_simplified\">\n                    <title name=\"TIMES\">5</title>\n                    <statement name=\"DO\">\n                      <block type=\"collector_collect\">\n                        <next>\n                          <block type=\"maze_moveNorth\"/>\n                        </next>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type=\"maze_moveEast\">\n                        <next>\n                          <block type=\"maze_moveEast\">\n                            <next>\n                              <block type=\"controls_repeat_simplified\">\n                                <title name=\"TIMES\">5</title>\n                                <statement name=\"DO\">\n                                  <block type=\"maze_moveSouth\">\n                                    <next>\n                                      <block type=\"collector_collect\"/>\n                                    </next>\n                                  </block>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "course1_collector_loops_challenge4_authored_hint": {
          "courseB_collector_loops_challenge2_a": "If something goes wrong, don't be afraid to start over. Don't give up!",
          "courseB_collector_loops_challenge2_b": "If you repeat this pattern, Laurel won't hit the wall at the bottom of the cave!\n\n<xml><block type=\"maze_moveEast\">\n            <next>\n              <block type=\"collector_collect\">\n                <next>\n                  <block type=\"maze_moveWest\">\n                    <next>\n                      <block type=\"maze_moveWest\">\n                        <next>\n                          <block type=\"maze_moveSouth\"/>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block></xml>",
          "courseB_collector_loops_challenge2_c": "Try using a `repeat` block to collect the final pile of treasure!",
          "courseB_collector_loops_challenge2_d": "Try this solution:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_simplified_dropdown\">\n        <title name=\"TIMES\" config=\"3-10\">4</title>\n        <statement name=\"DO\">\n          <block type=\"maze_moveEast\">\n            <next>\n              <block type=\"collector_collect\">\n                <next>\n                  <block type=\"maze_moveWest\">\n                    <next>\n                      <block type=\"maze_moveWest\">\n                        <next>\n                          <block type=\"maze_moveSouth\"/>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type=\"controls_repeat_simplified_dropdown\">\n            <title name=\"TIMES\" config=\"3-10\">6</title>\n            <statement name=\"DO\">\n              <block type=\"collector_collect\"/>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "course1_maze_debugging_challenge1_authored_hint": {
          "courseA_maze_seq_challenge1_a": "Some paths will lead to TNT, if you move too far."
        },
        "course1_maze_debugging_challenge2_authored_hint": {
          "courseB_maze_seq_challenge2_a": "You do not need to add or remove blocks to solve this puzzle.",
          "courseB_maze_seq_challenge2_b": "Rearrange the blocks and take the middle path."
        },
        "course1_maze_seq_challenge1_authored_hint": {
          "courseA_maze_seq_challenge2_a": "Try counting the spaces with your finger. Remember not to count the space where you start!"
        },
        "course1_maze_seq_challenge2_authored_hint": {
          "courseB_maze_seq_challenge1_a": "The shortest path might not work this time.",
          "courseB_maze_seq_challenge1_b": "Try moving west to start."
        },
        "course1_playlab_events_challenge1_authored_hint": {
          "courseA_playlab_events_challenge1_a": "Make Waddles the Penguin show when you click Robin!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_b": "Make Boo the Ghost show when you click Waddles!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_c": "Make Jayden the Fuzzy Monster show when you click Boo!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_d": "Make Spiff the Robot show when you click the monster!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_e": "Finally, make Wendel the Wizard show when you click on Spiff!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n      </block>\n    </next>\n  </block></xml>"
        },
        "course1_playlab_events_challenge2_authored_hint": {
          "courseA_playlab_events_challenge2_a": "You can make a bird sing.\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n          <block type=\"studio_saySprite\">\n            <title name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n          </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge2_b": "You can make a robot beep.\n\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      \n          <block type=\"studio_playSound\">\n            <title name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>",
          "courseA_playlab_events_challenge2_c": "You can make an angry monster growl.\n\n<xml>  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSpriteEmotion\">\n        <title name=\"SPRITE\">5</title>\n        <title name=\"VALUE\">2</title>\n        <next>\n          <block type=\"studio_saySprite\">\n            <title name=\"SPRITE\">5</title>\n            <title name=\"TEXT\">Roar!</title>\n            <next>\n              <block type=\"studio_setSpriteEmotion\">\n                <title name=\"SPRITE\">5</title>\n                <title name=\"VALUE\">0</title>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block></xml>"
        },
        "course2_artist_nestedLoops_challenge1_authored_hint": {
          "courseD_artist_nestedLoops_challenge1_a": "Start by making a nested loop to create four octagons. Turn 45 degrees to make the octagon. Jump, then turn 90 degrees after each one.",
          "courseD_artist_nestedLoops_challenge1_b": "Add code to draw a triangle inside of your nested loop. Use 120 degree turns for your triangle."
        },
        "course2_artist_nestedLoops_challenge2_authored_hint": {
          "courseD_artist_nestedLoops_challenge2_a": "To draw a regular octagon, the artist needs to turn 45 degrees 8 times.",
          "courseD_artist_nestedLoops_challenge2_b": "To draw a square, the artist needs to turn 90 degrees 4 times."
        },
        "course2_artist_prog_challenge1_authored_hint": {
          "courseC_artist_prog_challenge1_a": "The rectangle is 200 pixels wide and 100 pixels tall. "
        },
        "course2_artist_prog_challenge2_authored_hint": {
          "courseC_artist_prog_challenge2_a": "You can put commands inside `repeat` block to loop them over and over. Try it!\n\n<xml>\n  \n          <block type=\"controls_repeat\">\n            <title name=\"TIMES\">6</title>\n            <statement name=\"DO\">\n              <block type=\"draw_move_by_constant_dropdown\">\n                <title name=\"DIR\">moveForward</title>\n                <title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n                <next>\n                  <block type=\"jump_by_constant_dropdown\">\n                    <title name=\"DIR\">jumpForward</title>\n                    <title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n                  </block>\n                </next>\n              </block>\n              </statement></block></xml>"
        },
        "course2_bee_conditionals_challenge1_authored_hint": {
          "courseD_bee_conditionals_challenge1_a": "Can you find a path that reaches every flower and honeycomb without hitting any trees? The best path is a spiral.\n\n**You can solve this without ever turning left.**",
          "courseD_bee_conditionals_challenge1_b": "In this puzzle, each space could have a flower, a honey comb, or nothing.  That means you can repeat your `if/else` conditional at each square."
        },
        "course2_bee_conditionals_challenge2_authored_hint": {
          "courseD_bee_conditionals_challenge1_b": "Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The main differences is that the code inside will run repetitively until there is no nectar left.  Try this pattern:\n\n<xml>  <block type=\"bee_whileNectarAmount\">\n    <title name=\"ARG1\">nectarRemaining</title>\n    <title name=\"OP\">&gt;</title>\n    <title name=\"ARG2\">0</title>                    <statement name=\"DO\">\n                      <block type=\"maze_nectar\"/>\n                    </statement>\n  </block></xml>"
        },
        "course2_collector_loops_challenge2_authored_hint": {
          "courseC_maze_loops_challenge2_a": "The original code would work great - if there was only one piece of treasure in each pile!",
          "courseC_maze_loops_challenge2_b": "Use loops so you don't run out of `collect` blocks!"
        },
        "course2_collector_prog_challenge1_authored_hint": {
          "courseC_collector_prog_challenge1_a": "You can use the `collect` command more often to collect the extra treasure."
        },
        "course2_collector_prog_challenge2_authored_hint": {
          "courseC_collector_prog_challenge1_a": "You can use the `collect` command more often to collect the extra treasure."
        },
        "course2_harvester_loops_challenge1_authored_hint": {
          "courseC_harvester_loops_challenge1_a": "Don't even think about try about trying this without loops!",
          "courseC_harvester_loops_challenge1_b": "You can repeat `move forward` and `pick corn` as many times as you need to, then `turn right` at each corner.",
          "courseC_harvester_loops_challenge1_c": "The best way to collect the first four corn uses a `repeat` block inside of another `repeat` block. You can use this pattern for the rest of the puzzle too!\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat\">\n        <title name=\"TIMES\">2</title>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat\">\n            <title name=\"TIMES\">2</title>\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"harvester_corn\"/>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n              </block>\n            </next>\n          </block>\n        </statement>\n        </block></next></block></xml>"
        },
        "course2_harvester_loops_challenge2_authored_hint": {
          "courseC_harvester_loops_challenge2_a": "One way to solve this looks like a zig-zag. Another way looks like a spiral! There are lots of different solutions to a puzzle like this. Be persistent!",
          "courseC_harvester_loops_challenge2_b": "You can repeat `move forward` and `pick lettuce` as many times as you need to, then turn at each corner.",
          "courseC_harvester_loops_challenge2_c": "This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!\n\n![](https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png)\n",
          "courseC_harvester_loops_challenge2_d": "This spiral pattern can be coded with just 18 blocks!\n\n![](https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png)"
        },
        "course2_maze_loops_challenge1_authored_hint": {
          "courseC_maze_loops_challenge1_a": "Think about this path as being three different pieces. Each one has a pattern you can repeat.",
          "courseC_maze_loops_challenge1_b": "In between each `repeat` block, you will need to `turn left` or `turn right` to get ready Scrat for the next pattern.",
          "courseC_maze_loops_challenge1_c": "If you make it this far, you just need to `turn left` then `move forward` a few times. Don't give up!\n\n![](https://images.code.org/7696c5c16b8ddf1d53436cdc7fb6346d-image-1494101728016.14.34 PM.png)"
        },
        "course2_maze_programming_challenge2_authored_hint": {
          "courseC_maze_programming_challenge2_a": "*If you send me backwards, be extra careful that I turn the correct way!*",
          "courseC_maze_programming_challenge2_b": "The shortest solution use only 5 blocks, but it uses the `repeat` block!"
        },
        "course2_maze_seq_challenge1_authored_hint": {
          "courseA_maze_seq_challenge2_a": "Try counting the spaces with your finger. Remember not to count the space where you start!"
        },
        "course2_maze_seq_challenge2_authored_hint": {
          "courseB_maze_seq_challenge1_a": "The shortest path might not work this time.",
          "courseB_maze_seq_challenge1_b": "Try moving west to start."
        },
        "course3_artist_concept_challenge1_authored_hint": {
          "courseE_artist_concept_challenge1_a": "The half-hexagon has a **length of 30** and turns right by **60 degrees**.  ",
          "courseE_artist_concept_challenge1_b": "The 2/3 triangle has a **length of 80** and turns right by **120 degrees**. "
        },
        "course3_artist_functions_challenge1_authored_hint": {
          "courseE_artist_functions_challenge1_a": "If you call the function one more time, you can create the same design in the final corner. You can also `jump to` other positions or change the whole thing around however you want!"
        },
        "course3_artist_functions_challenge2_authored_hint": {
          "courseE_artist_functions_challenge1_a": "<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">350</title>\n    <title name=\"YPOS\">200</title>\n  </block>\n  </xml>\n\n  \nThis `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is *before* the command is run!\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
        },
        "course3_bee_debugging_challenge1_authored_hint": {
          "courseD_bee_debugging_challenge1_a": "Why does the first half of this program work? Think about why the bee needs to move backward. How much nectar does the bee collect each time it moves over a flower?",
          "courseD_bee_debugging_challenge1_b": "On the way back, have the bee follow the same pattern. How much honey does the bee need to make each time it moves over a honey comb?"
        },
        "course3_bee_functions_challenge1_authored_hint": {
          "courseE_bee_functions_challenge1_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "courseE_bee_functions_challenge1_b": "Remember to build your code inside of the green function block."
        },
        "course3_bee_functions_challenge2_authored_hint": {
          "courseE_bee_functions_challenge1_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "courseE_bee_functions_challenge1_b": "Remember to build your code inside of the green function block."
        },
        "course3_bee_functions_challenge3_authored_hint": {
          "courseF_bee_functions_challenge1_a": "You can use the functions in the tool box to help you. You can call a function inside of another function's definition!"
        },
        "course3_bee_functions_challenge4_authored_hint": {
          "courseF_bee_functions_challenge2_a": "If there is a path to the right, you should do the following:\n* Get any nectar or make any honey.\n* Turn right towards the side path.\n* Move to the end of the side path.\n* Turn right.\n\nIf you repeat the above actions twice, you will be ready to move back down the main path.\n\n**Only click for another hint if you want to see the full solution!**",
          "courseF_bee_functions_challenge2_b": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_ext\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">4</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"maze_untilBlocked\">\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"maze_if\">\n                    <title name=\"DIR\">isPathRight</title>\n                    <statement name=\"DO\">\n                      <block type=\"procedures_callnoreturn\" id=\"function\">\n                        <mutation name=\"move and check\"/>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnLeft</title>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n  <block type=\"procedures_defnoreturn\" editable=\"false\" usercreated=\"true\">\n    <mutation/>\n    <title name=\"NAME\">check nectar or honey</title>\n    <statement name=\"STACK\">\n      <block type=\"bee_ifElseFlower\">\n        <title name=\"LOC\">atFlower</title>\n        <statement name=\"DO\">\n          <block type=\"bee_whileNectarAmount\">\n            <title name=\"ARG1\">nectarRemaining</title>\n            <title name=\"OP\">&gt;</title>\n            <title name=\"ARG2\">0</title>\n            <statement name=\"DO\">\n              <block type=\"maze_nectar\"/>\n            </statement>\n          </block>\n        </statement>\n        <statement name=\"ELSE\">\n          <block type=\"bee_whileNectarAmount\">\n            <title name=\"ARG1\">honeyAvailable</title>\n            <title name=\"OP\">&gt;</title>\n            <title name=\"ARG2\">0</title>\n            <statement name=\"DO\">\n              <block type=\"maze_honey\"/>\n            </statement>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type=\"procedures_defnoreturn\" deletable=\"false\" movable=\"false\" editable=\"false\">\n    <mutation/>\n    <title name=\"NAME\">move and check</title>\n    <statement name=\"STACK\">\n      <block type=\"controls_repeat_ext\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">2</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"procedures_callnoreturn\">\n            <mutation name=\"check nectar or honey\"/>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n                <next>\n                  <block type=\"maze_untilBlocked\">\n                    <statement name=\"DO\">\n                      <block type=\"maze_move\">\n                        <title name=\"DIR\">moveForward</title>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type=\"maze_turn\">\n                        <title name=\"DIR\">turnRight</title>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n</xml>"
        },
        "course3_collector_debugging_challenge2_authored_hint": {
          "courseD_collector_debugging_challenge2_a": "Start by focusing on collect TWO gems from each of the first two piles.\n\n![](https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04 AM copy.png)\nUse these blocks.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n  </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title name=\"DIR\">moveForward</title>\n                  </block>\n                  \n \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n    <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>",
          "courseD_collector_debugging_challenge2_b": "Next, collect the remaining gems in this row.\n\n![](https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04 AM.png)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n<block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>",
          "courseD_collector_debugging_challenge2_c": "Finally, collect the remaining treasure. Add these blocks to your program.\n\n<xml>\n  <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n              </block>\n      <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>",
          "courseD_collector_debugging_challenge2_d": "Here is the complete solution for this puzzle.\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat\">\n            <title name=\"TIMES\">4</title>\n            <statement name=\"DO\">\n              <block type=\"controls_repeat\">\n                <title name=\"TIMES\">2</title>\n                <statement name=\"DO\">\n                  <block type=\"maze_move\">\n                    <title name=\"DIR\">moveForward</title>\n                    <next>\n                      <block type=\"controls_repeat\">\n                        <title name=\"TIMES\">2</title>\n                        <statement name=\"DO\">\n                          <block type=\"collector_collect\"/>\n                        </statement>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <next>\n                  <block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "course3_farmer_condLoops_challenge1_authored_hint": {
          "courseD_farmer_condLoops_challenge1_a": "The `STEP` button could be very helpful in this challenge.",
          "courseD_farmer_condLoops_challenge1_b": "Normally you would just `pick pumpkin` if you are at a pumpkin. What else do you need to do if you're at a pumpkin?"
        },
        "course3_farmer_condLoops_challenge2_authored_hint": {
          "courseD_farmer_condLoops_challenge2_a": "The amount of each vegetable in each space varies. Use `while` loops for these."
        },
        "course3_maze_debugging_challenge1_authored_hint": {
          "courseC_maze_debugging_challenge1_a": "Left or right? It's up to you!",
          "courseC_maze_debugging_challenge1_b": "Scrat's path is the shape of a rectangle! He needs to turn the same way each time!",
          "courseC_maze_debugging_challenge1_c": "If you are getting stuck, you can always start over, or remove all the code and find your own way!"
        },
        "course3_maze_debugging_challenge2_authored_hint": {
          "courseC_maze_debugging_challenge2_a": "One way to solve this is to add more steps forward in between the turns.",
          "courseC_maze_debugging_challenge2_b": "If you are getting stuck, you can always start over or remove all the code and find your own way!",
          "courseC_maze_debugging_challenge2_c": "There are two different paths you can follow just using `move forward`, and only four turns. If you find a way to use the `repeat` block, there may be even more!\n\n![](https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png)"
        },
        "course3_playLab_challenge1_authored_hint": {
          "courseE_playLab_challenge1_a": "Here are some things you could do when the player wins the game:\n\n* Make the dinosaur vanish.\n* Stop the squirrels.\n* Make the squirrels and knight happy.\n* Set a new background.\n* Make the knight thank the player for helping.\n* Make all of the actors vanish and show a \"You Win!\" message.",
          "courseE_playLab_challenge1_b": "Here are some things you could do when the player loses the game:\n\n* Make the knight vanish.\n* Make the squirrels sad.\n* Make the dinosaur say something.\n* Set a new background.\n* Make all of the actors vanish and show a \"Game Over\" message."
        },
        "course3_playlab_challenge2_authored_hint": {
          "courseE_playlab_challenge2_a": "The actor knows what to say based on its mood. Try playing with the things the witch might say.\n\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TEXT\">\n              <block type=\"text\">\n                <title name=\"TEXT\">Concentrate and ask again!</title>\n              </block>\n            </value>\n            <value name=\"TIME\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n          </block></xml>",
          "courseE_playlab_challenge2_b": "It will feel like the game starts all over if you call the `ask a question` function again below the list of conditionals.\n\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n               \n<block type=\"procedures_callnoreturn\">\n<mutation name=\"Ask a question\"></mutation>\n        </block></block></xml>",
          "courseE_playlab_challenge2_c": "You will need to add more conditional statements to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TEXT\">\n              <block type=\"text\">\n                <title name=\"TEXT\">???</title>\n              </block>\n            </value>\n            <value name=\"TIME\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n          </block>\n              </statement></block></xml>\n\n              \nDon't forget to change which moods the actor will show inside of the `repeat forever` loop. You can also set the moods randomly!",
          "courseE_playlab_challenge2_d": "Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.\n\nDon't forget to change the instructions inside the `show title screen` block so they still make sense!",
          "courseE_playlab_challenge2_e": "When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?\n\nHave a friend try your app when it is finished!"
        },
        "course4_artist_binary_challenge2_authored_hint": {
          "courseD_artist_binary_challenge2_a": "The best tip I have for you is to press `⟲ Start Over` if it starts to get really messy.\n\nThere are only few lines wrong in the original program. If one approach fails, back up and try again. There is a solution!"
        },
        "course4_artist_concept_challenge2_authored_hint": {
          "courseE_artist_concept_challenge2_a": "Once you define a function, you can call it over and over again - whenever and wherever you want!",
          "courseE_artist_concept_challenge2_b": "You can jump to different positions on the canvas using this command:\n\n<xml>  <block type=\"jump_to\">\n    <title name=\"VALUE\">???</title>\n  </block></xml>"
        },
        "course4_artist_functions_challenge2_authored_hint": {
          "courseE_artist_functions_challenge1_a": "<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">350</title>\n    <title name=\"YPOS\">200</title>\n  </block>\n  </xml>\n\n  \nThis `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is *before* the command is run!\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
        },
        "course4_artist_variables_challenge1_authored_hint": {
          "courseF_artist_variables_challenge1_a": "Each vertical line has a length of `10`. Each horizontal line should have a length of `length`.",
          "courseF_artist_variables_challenge1_b": "You will want to increase the value of `length` by 10 **twice** inside the loop.",
          "courseF_artist_variables_challenge1_c": "To complete the pattern you will need to turn left twice, turn right twice, and move forward a total of four times.",
          "courseF_artist_variables_challenge1_d": "This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.\n\n![](https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png)\n\nIf you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.",
          "courseF_artist_variables_challenge1_e": "Here is the solution.\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"variables_set\" inline=\"false\">\n        <title name=\"VAR\">length</title>\n        <value name=\"VALUE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">10</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">18</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"draw_move\" inline=\"true\">\n                <title name=\"DIR\">moveForward</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">10</title>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"draw_turn\" inline=\"true\">\n                    <title name=\"DIR\">turnRight</title>\n                    <value name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">90</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"draw_move\" inline=\"true\">\n                        <title name=\"DIR\">moveForward</title>\n                        <value name=\"VALUE\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">length</title>\n                          </block>\n                        </value>\n                        <next>\n                          <block type=\"variables_set\" inline=\"false\">\n                            <title name=\"VAR\">length</title>\n                            <value name=\"VALUE\">\n                              <block type=\"math_arithmetic\" inline=\"true\">\n                                <title name=\"OP\">ADD</title>\n                                <value name=\"A\">\n                                  <block type=\"variables_get\">\n                                    <title name=\"VAR\">length</title>\n                                  </block>\n                                </value>\n                                <value name=\"B\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">10</title>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <next>\n                              <block type=\"draw_turn\" inline=\"true\">\n                                <title name=\"DIR\">turnLeft</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">90</title>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"draw_move\" inline=\"true\">\n                                    <title name=\"DIR\">moveForward</title>\n                                    <value name=\"VALUE\">\n                                      <block type=\"math_number\">\n                                        <title name=\"NUM\">10</title>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type=\"draw_turn\" inline=\"true\">\n                                        <title name=\"DIR\">turnLeft</title>\n                                        <value name=\"VALUE\">\n                                          <block type=\"math_number\">\n                                            <title name=\"NUM\">90</title>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type=\"draw_move\" inline=\"true\">\n                                            <title name=\"DIR\">moveForward</title>\n                                            <value name=\"VALUE\">\n                                              <block type=\"variables_get\">\n                                                <title name=\"VAR\">length</title>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type=\"variables_set\" inline=\"false\">\n                                                <title name=\"VAR\">length</title>\n                                                <value name=\"VALUE\">\n                                                  <block type=\"math_arithmetic\" inline=\"true\">\n                                                    <title name=\"OP\">ADD</title>\n                                                    <value name=\"A\">\n                                                      <block type=\"variables_get\">\n                                                        <title name=\"VAR\">length</title>\n                                                      </block>\n                                                    </value>\n                                                    <value name=\"B\">\n                                                      <block type=\"math_number\">\n                                                        <title name=\"NUM\">10</title>\n                                                      </block>\n                                                    </value>\n                                                  </block>\n                                                </value>\n                                                <next>\n                                                  <block type=\"draw_turn\" inline=\"true\">\n                                                    <title name=\"DIR\">turnRight</title>\n                                                    <value name=\"VALUE\">\n                                                      <block type=\"math_number\">\n                                                        <title name=\"NUM\">90</title>\n                                                      </block>\n                                                    </value>\n                                                  </block>\n                                                </next>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "course4_artist_variables_challenge2_authored_hint": {
          "courseF_artist_variables_challenge2_a": "Variables are helpful because you can add to them each time through a loop. ",
          "courseF_artist_variables_challenge2_b": "This puzzle has one loop that creates the polygon, one loop that repeats the polygon `sides` times, then another loop that does it all again after adding 5 to `sides`.",
          "courseF_artist_variables_challenge2_c": "Using a variable for `sides` and one for `length` makes the code cleaner because you can loop the same code multiple times, instead of creating a new copy for each set of numbers.",
          "courseF_artist_variables_challenge2_d": "**Solution:**\n\n![Solution](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)"
        },
        "course4_bee_fwp_challenge1_authored_hint": {
          "courseF_bee_fwp_challenge1_a": "The main program should look something like this:\n\n<xml>\n<block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"procedures_callnoreturn\" inline=\"false\">\n        <mutation name=\"pick row\">\n          <arg name=\"length\"/>\n        </mutation>\n        <value name=\"ARG0\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"maze_move\">\n            <title name=\"DIR\">moveForward</title>\n            <next>\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"procedures_callnoreturn\" inline=\"false\">\n                    <mutation name=\"pick row\">\n                      <arg name=\"length\"/>\n                    </mutation>\n                    <value name=\"ARG0\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">5</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"maze_move\">\n                        <title name=\"DIR\">moveForward</title>\n                        <next>\n                          <block type=\"maze_move\">\n                            <title name=\"DIR\">moveForward</title>\n                            <next>\n                              <block type=\"procedures_callnoreturn\" inline=\"false\">\n                                <mutation name=\"pick row\">\n                                  <arg name=\"length\"/>\n                                </mutation>\n                                <value name=\"ARG0\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">6</title>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"maze_move\">\n                                    <title name=\"DIR\">moveForward</title>\n                                    <next>\n                                      <block type=\"maze_move\">\n                                        <title name=\"DIR\">moveForward</title>\n                                        <next>\n                                          <block type=\"procedures_callnoreturn\" inline=\"false\">\n                                            <mutation name=\"pick row\">\n                                              <arg name=\"length\"/>\n                                            </mutation>\n                                            <value name=\"ARG0\">\n                                              <block type=\"math_number\">\n                                                <title name=\"NUM\">4</title>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block></xml>",
          "courseF_bee_fwp_challenge1_b": "Look at how much corn is available to harvest in each space. Do you see the counter pattern? The `length` parameter should be used to set the maximum value in the `for loop`.\n\nDon't forget to have the farmer move back to the main path after harvesting!",
          "courseF_bee_fwp_challenge1_c": "Place a `for loop` inside a function and set it to count from `1` to `length` by `1`.\nInside this loop, you should move forward and pick all of the corn.\n\n<xml>\n<block type=\"controls_for\" inline=\"true\">\n            <title name=\"VAR\">counter</title>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"parameters_get\">\n                <title name=\"VAR\">length</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n            </statement>\n</block></xml>",
          "courseF_bee_fwp_challenge1_d": "Inside the `for loop` you will want to `move forward` then `get nectar` **counter times**.\nAfter the `for loop` you can just `move backward` **length times**.\n\nYou may need to read this hint several times to understand it. The part in **bold** is a hint about how to use the two `repeat` loops you will need.",
          "courseF_bee_fwp_challenge1_e": "**Here is the solution:**\n\n<xml>\n  <block type=\"procedures_defnoreturn\" editable=\"false\" usercreated=\"true\">\n    <mutation>\n      <arg name=\"length\"/>\n    </mutation>\n    <title name=\"NAME\">pick row</title>\n    <statement name=\"STACK\">\n      <block type=\"maze_turn\">\n        <title name=\"DIR\">turnLeft</title>\n        <next>\n          <block type=\"controls_for\" inline=\"true\">\n            <title name=\"VAR\">counter</title>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"parameters_get\">\n                <title name=\"VAR\">length</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"harvester_corn\"/>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"parameters_get\">\n                    <title name=\"VAR\">length</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n                </statement>\n                <next>\n                  <block type=\"maze_turn\">\n                    <title name=\"DIR\">turnRight</title>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    </block></xml>\n"
        },
        "course4_bee_fwp_challenge2_authored_hint": {
          "courseF_bee_fwp_challenge2_a": "Start by making sure you understand how this function is *supposed* to work. As the farmer moves down each path, she will only try to collect corn. Instead, how can you make her check for each of the 3 vegetables and pick only the one she finds?\n\nAdd conditional statements to the function to check for corn, pumpkins, and lettuce.",
          "courseF_bee_fwp_challenge2_b": "Are you running out of `move forward` blocks?\nTry using a *second* `for loop` in your main program. \n\n**Note:** Be careful not to confuse `counter` with `counter2` in your code.",
          "courseF_bee_fwp_challenge2_c": "**Here is what your function should look like:**\n\n<xml><block type=\"procedures_defnoreturn\" deletable=\"false\" movable=\"false\" editable=\"false\" usercreated=\"true\">\n    <mutation>\n      <arg name=\"length\"/>\n    </mutation>\n    <title name=\"NAME\">pick row</title>\n    <statement name=\"STACK\">\n      <block type=\"maze_turn\">\n        <title name=\"DIR\">turnLeft</title>\n        <next>\n          <block type=\"controls_for\" inline=\"true\">\n            <title name=\"VAR\">counter</title>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"parameters_get\">\n                <title name=\"VAR\">length</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"harvester_ifHasCrop\">\n                        <title name=\"LOC\">Corn</title>\n                        <statement name=\"DO\">\n                          <block type=\"harvester_corn\"/>\n                        </statement>\n                        <next>\n                          <block type=\"harvester_ifHasCrop\">\n                            <title name=\"LOC\">Pumpkin</title>\n                            <statement name=\"DO\">\n                              <block type=\"harvester_pumpkin\"/>\n                            </statement>\n                            <next>\n                              <block type=\"harvester_ifHasCrop\">\n                                <title name=\"LOC\">Lettuce</title>\n                                <statement name=\"DO\">\n                                  <block type=\"harvester_lettuce\"/>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"parameters_get\">\n                    <title name=\"VAR\">length</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n                </statement>\n                <next>\n                  <block type=\"maze_turn\">\n                    <title name=\"DIR\">turnRight</title>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>",
          "courseF_bee_fwp_challenge2_d": "**Here is what your main program should look like:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for\" inline=\"true\">\n        <title name=\"VAR\">counter2</title>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">6</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"maze_move\">\n            <title name=\"DIR\">moveForward</title>\n            <next>\n              <block type=\"procedures_callnoreturn\" inline=\"false\">\n                <mutation name=\"pick row\">\n                  <arg name=\"length\"/>\n                </mutation>\n                <value name=\"ARG0\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">counter2</title>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n    </block></xml>\n"
        },
        "course4_collector_nested_loops_challenge2_authored_hint": {
          "courseD_bee_nested_loops_challenge2_a": "Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!",
          "courseD_bee_nested_loops_challenge2_b": "To get all 4 gems, first use a loop to move away from the center. Turn left or right, then use a nested loop to move from the first pile of treasure to the second. If you repeat the nested loop enough times, the collector will move around the *entire* cave!",
          "courseD_bee_nested_loops_challenge2_c": "The shortest program that reaches all the treasure uses only one `collect` block and two turns.",
          "courseD_bee_nested_loops_challenge2_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_dropdown\">\n        <title name=\"TIMES\" config=\"3-10\">3</title>\n        <statement name=\"DO\">\n          <block type=\"maze_move\">\n            <title name=\"DIR\">moveForward</title>\n          </block>\n        </statement>\n        <next>\n          <block type=\"maze_turn\">\n            <title name=\"DIR\">turnLeft</title>\n            <next>\n              <block type=\"controls_repeat_dropdown\">\n                <title name=\"TIMES\" config=\"3-10\">3</title>\n                <statement name=\"DO\">\n                  <block type=\"collector_collect\">\n                    <next>\n                      <block type=\"controls_repeat_dropdown\">\n                        <title name=\"TIMES\" config=\"3-10\">3</title>\n                        <statement name=\"DO\">\n                          <block type=\"maze_move\">\n                            <title name=\"DIR\">moveForward</title>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnLeft</title>\n                            <next>\n                              <block type=\"controls_repeat_dropdown\">\n                                <title name=\"TIMES\" config=\"3-10\">3</title>\n                                <statement name=\"DO\">\n                                  <block type=\"maze_move\">\n                                    <title name=\"DIR\">moveForward</title>\n                                  </block>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "course4_harvester_nested_loops_challenge1_authored_hint": {
          "courseD_harvester_nested_loops_challenge1_a": "You have probably already used a loop to create a zig-zag pattern. If you remember that algorithm, you can make a few additions to it here."
        },
        "course4_playlab_variables_challenge1_authored_hint": {
          "courseF_playlab_variables_challenge1_a": "You will need additional blocks from the tool box to get the actors to talk.\n\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n      <value name=\"SPRITE\">\n        <block type=\"math_number\">\n          <title name=\"NUM\">1</title>\n        </block>\n      </value>\n                      <value name=\"TEXT\">\n                  <block type=\"text\">\n                    <title name=\"TEXT\">Knock knock.</title>\n                  </block>\n                </value>\n      <value name=\"TIME\">\n        <block type=\"math_number\">\n          <title name=\"NUM\">1</title>\n        </block>\n      </value>\n      </block></xml>"
        },
        "course4_playlab_variables_challenge3_authored_hint": {
          "courseF_playlab_variables_challenge3_a": "The actor knows what to say because it checks the current value of the `fortune` variable.\n\n<xml><block type=\"variables_set\" inline=\"false\">\n            <title name=\"VAR\">fortune</title>\n            <value name=\"VALUE\">\n              <block type=\"text\" movable=\"false\">\n                <title name=\"TEXT\">Concentrate and ask again!</title>\n              </block>\n            </value>\n          </block></xml>",
          "courseF_playlab_variables_challenge3_b": "It will feel like the game starts all over if you call the `ask a question` function again after the actor says the fortune.\n\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n                <value name=\"SPRITE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">1</title>\n                  </block>\n                </value>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">fortune</title>\n                  </block>\n                </value>\n                <value name=\"TIME\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">2</title>\n                  </block>\n                </value>\n              <next>\n<block type=\"procedures_callnoreturn\">\n        <mutation name=\"Ask a question\"/>\n        </block></next></block></xml>",
          "courseF_playlab_variables_challenge3_c": "You will need to add more conditional statements to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"variables_set\" inline=\"false\">\n                <title name=\"VAR\">fortune</title>\n                <value name=\"VALUE\">\n                  <block type=\"text\" movable=\"false\">\n                    <title name=\"TEXT\">???</title>\n                  </block>\n                </value>\n              </block>\n              </statement></block></xml>\n\n              \nDon't forget to change which moods the actor will show inside of the `repeat forever` loop. You can also set the moods randomly!",
          "courseF_playlab_variables_challenge3_d": "Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.\n\nDon't forget to change the instructions inside the `Ask a question` function so they still make sense!",
          "courseF_playlab_variables_challenge3_e": "When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?\n\nHave a friend try your app when it is finished!"
        },
        "courseA_artist_loops2_authored_hint": {
          "courseA_artist_loops2_a": "Can't figure out how to draw a line?  Start attaching blocks to the <xml><block type=\"when_run\"/></xml> block to see what happens.",
          "courseA_artist_loops2_b": "Use this block <xml><block type=\"simple_move_right\"/></xml> to solve this puzzle."
        },
        "courseA_artist_loops2_2018_authored_hint": {
          "courseA_artist_loops2_a": "Can't figure out how to draw a line?  Start attaching blocks to the <xml><block type=\"when_run\"/></xml> block to see what happens.",
          "courseA_artist_loops2_b": "Use this block <xml><block type=\"simple_move_right\"/></xml> to solve this puzzle."
        },
        "courseA_artist_loops3_authored_hint": {
          "courseA_artist_loops3_a": "Trace slowly through the program with your finger to see where it goes wrong.",
          "courseA_artist_loops3_b": "You will want to use a block like this to solve this puzzle.\n\n![](https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png)"
        },
        "courseA_artist_loops3_2018_authored_hint": {
          "courseA_artist_loops3_a": "Trace slowly through the program with your finger to see where it goes wrong.",
          "courseA_artist_loops3_b": "You will want to use a block like this to solve this puzzle.\n\n![](https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png)"
        },
        "courseA_artist_loops4_authored_hint": {
          "courseA_artist_loops4_a": "If you want the loop to repeat more than 4 times, you can change the number at the top of the block.",
          "courseA_artist_loops4_b": "Since you can only use one <xml><block type=\"simple_move_right\"/></xml>\n\nblock, try putting it inside of the <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"2-6\">5</title></block></xml> loop."
        },
        "courseA_artist_loops4_2018_authored_hint": {
          "courseA_artist_loops4_a": "If you want the loop to repeat more than 4 times, you can change the number at the top of the block.",
          "courseA_artist_loops4_b": "Since you can only use one <xml><block type=\"simple_move_right\"/></xml>\n\nblock, try putting it inside of the <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"2-6\">5</title></block></xml> loop."
        },
        "courseA_artist_loops5_authored_hint": {
          "courseA_artist_loops5_a": "Try using what you've learned about <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> blocks to complete this puzzle!",
          "courseA_artist_loops5_b": "If you want the loop to repeat more than 4 times, you can change the number at the top of the block.",
          "courseA_artist_loops5_c": "Since you can only use one <xml><block type=\"simple_move_right\"/></xml> block, try putting it inside of the \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml>\n\nloop."
        },
        "courseA_artist_loops5_2018_authored_hint": {
          "courseA_artist_loops5_a": "Try using what you've learned about <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> blocks to complete this puzzle!",
          "courseA_artist_loops5_b": "If you want the loop to repeat more than 4 times, you can change the number at the top of the block.",
          "courseA_artist_loops5_c": "Since you can only use one <xml><block type=\"simple_move_right\"/></xml> block, try putting it inside of the \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml>\n\nloop."
        },
        "courseA_artist_loops6_authored_hint": {
          "courseA_artist_loops6_a": "Can't figure out how to make the hill?  Try playing with the blocks a bit to see what each one draws.",
          "courseA_artist_loops6_b": "You will need 2 blocks in 2 directions to solve this puzzle."
        },
        "courseA_artist_loops6_2018_authored_hint": {
          "courseA_artist_loops6_a": "Can't figure out how to make the hill?  Try playing with the blocks a bit to see what each one draws.",
          "courseA_artist_loops6_b": "You will need 2 blocks in 2 directions to solve this puzzle."
        },
        "courseA_artist_loops7_authored_hint": {
          "courseA_artist_loops7_a": "Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern.",
          "courseA_artist_loops7_b": "Write the code for one wave first, then repeat that to draw the other two."
        },
        "courseA_artist_loops7_2018_authored_hint": {
          "courseA_artist_loops7_a": "Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern.",
          "courseA_artist_loops7_b": "Write the code for one wave first, then repeat that to draw the other two.",
          "courseA_artist_loops7_c": "Remember you can put more than one block in a <xml><block type=\"controls_repeat_simplified_dropdown\">\n    <title name=\"TIMES\" config=\"3-10\">???</title>\n  </block></xml> loop."
        },
        "courseA_artist_loops7_forVideo_authored_hint": {
          "courseA_artist_loops7_a": "Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern.",
          "courseA_artist_loops7_b": "Write the code for one wave first, then repeat that to draw the other two."
        },
        "courseA_artist_loops8_authored_hint": {
          "courseA_artist_loops8_a": "Try running the code to see what has been written for you.",
          "courseA_artist_loops8_b": "How would you loop the code that has been given to you?",
          "courseA_artist_loops8_c": "What does the code do?  \nWhat is it supposed to do?  \nWhat does that tell you?"
        },
        "courseA_artist_loops8_2018_authored_hint": {
          "courseA_artist_loops8_a": "Try running the code to see what has been written for you.",
          "courseA_artist_loops8_b": "How would you loop the code that has been given to you?",
          "courseA_artist_loops8_c": "What does the code do?  \nWhat is it supposed to do?  \nWhat does that tell you?"
        },
        "courseA_artist_loops9_authored_hint": {
          "courseA_artist_loops9_a": "Add another block to the code you are given to draw the rest of the stairs.",
          "courseA_artist_loops9_c": "If you can't figure out where to put the loop, try writing your code step-by-step and look for patterns."
        },
        "courseA_artist_loops9_2018_authored_hint": {
          "courseA_artist_loops9_a": "Add another block to the code you are given to draw the rest of the stairs.",
          "courseA_artist_loops9_c": "If you can't figure out where to put the loop, try writing your code step-by-step and look for patterns."
        },
        "courseA_artist_loops_challenge2_authored_hint": {
          "courseA_artist_loops_challenge2_a": "Blocks like this <xml>  <block type=\"simple_move_up_left\"/></xml> will let your artist move at a slant!",
          "courseA_artist_loops_challenge2_b": "When you finish one bird house, `jump` to the next!",
          "courseA_artist_loops_challenge2_c": "You will need a LOT of blocks inside the loop for this challenge."
        },
        "courseA_artist_loops_challenge2a_authored_hint": {
          "courseA_artist_loops_challenge2_a": "Blocks like this <xml>  <block type=\"simple_move_up_left\"/></xml> will let your artist move at a slant!",
          "courseA_artist_loops_challenge2_b": "When you finish one tent, `jump` up twice to get to the next!",
          "courseA_artist_loops_challenge2_c": "All of your blocks will need to be inside of a loop to finish this puzzle."
        },
        "courseA_artist_loops_challenge2a_2018_authored_hint": {
          "courseA_artist_loops_challenge2_a": "Blocks like this <xml>  <block type=\"simple_move_up_left\"/></xml> will let your artist move at a slant!",
          "courseA_artist_loops_challenge2_b": "When you finish one tent, `jump` up twice to get to the next!",
          "courseA_artist_loops_challenge2_c": "All of your blocks will need to be inside of a loop to finish this puzzle."
        },
        "courseA_artist_loops_challenge3_authored_hint": {
          "harvey_tictactoe": "You can use `jump` blocks to move to other spaces."
        },
        "courseA_bee_seq1_authored_hint": {
          "courseA_bee_seq1_a": "Use this block to get nectar once the bee finds a flower.\n\n<xml>\n  <block type=\"maze_nectar\"/>\n</xml>"
        },
        "courseA_bee_seq12_authored_hint": {
          "courseA_bee_seq1_a": "Use this block to get nectar once the bee finds a flower.\n\n<xml>\n  <block type=\"maze_nectar\"/>\n</xml>"
        },
        "courseA_collector_loops1_authored_hint": {
          "courseA_collector_loops1_a": "After you have moved to a square with treasure, use this block to pick it up.\n\n<xml>  <block type=\"collector_collect\"/></xml>",
          "courseA_collector_loops1_b": "A simple solution would be to move East 2 times, then get the treasure."
        },
        "courseA_collector_loops1_2018_authored_hint": {
          "courseA_collector_loops1_a": "After you have moved to a square with treasure, use this block to pick it up.\n\n<xml>  <block type=\"collector_collect\"/></xml>",
          "courseA_collector_loops1_b": "A simple solution would be to move East 2 times, then get the treasure."
        },
        "courseA_collector_loops2_authored_hint": {
          "courseA_collector_loops2_a": "You'll have to move before you can collect any treasure.",
          "courseA_collector_loops2_b": "After you have moved to a square with treasure, use this block to pick it up.\n\n<xml>  <block type=\"collector_collect\"/></xml>"
        },
        "courseA_collector_loops2_2018_authored_hint": {
          "courseA_collector_loops2_a": "You'll have to move before you can collect any treasure.",
          "courseA_collector_loops2_b": "After you have moved to a square with treasure, use this block to pick it up.\n\n<xml>  <block type=\"collector_collect\"/></xml>"
        },
        "courseA_collector_loops3_authored_hint": {
          "courseA_collector_loops3_b": "Remember, you can put more than 1 block inside a <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loop."
        },
        "courseA_collector_loops3_2018_authored_hint": {
          "courseA_collector_loops3_b": "Remember, you can put more than 1 block inside a <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loop."
        },
        "courseA_collector_loops4_authored_hint": {
          "courseA_collector_loops4_a": "To change how far Laurel goes, change the number of times that the loop runs.",
          "courseA_collector_loops4_b": "Don't forget that Laurel needs to walk down and collect the treasure after she finishes the <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loop!"
        },
        "courseA_collector_loops4_2018_authored_hint": {
          "courseA_collector_loops4_a": "To change how far Laurel goes, change the number of times that the loop runs.",
          "courseA_collector_loops4_b": "Don't forget that Laurel needs to walk down and collect the treasure after she finishes the <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loop!"
        },
        "courseA_collector_loops5_authored_hint": {
          "courseA_collector_loops5_a": "If you can't figure out the answer right away, try using a piece of paper to figure out what arrows you will need and look for a pattern.",
          "courseA_collector_loops5_b": "Try splitting the problem into 2 parts, moving sideways and then down.",
          "courseA_collector_loops5_c": "You'll want to start with a <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loop that moves Laurel west and collects treasure."
        },
        "courseA_collector_loops5_2018_authored_hint": {
          "courseA_collector_loops5_a": "If you can't figure out the answer right away, try using a piece of paper to figure out what arrows you will need and look for a pattern.",
          "courseA_collector_loops5_b": "Try splitting the problem into 2 parts, moving sideways and then down.",
          "courseA_collector_loops5_c": "You'll want to start with a <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loop that moves Laurel west and collects treasure."
        },
        "courseA_collector_loops6_authored_hint": {
          "courseA_collector_loops6_a": "Can't figure out what's wrong? Try running the code a couple of times to see what happens.",
          "courseA_collector_loops6_b": "The shortest solution has 2 <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loops, one after the other."
        },
        "courseA_collector_loops6_2018_authored_hint": {
          "courseA_collector_loops6_a": "Can't figure out what's wrong? Try running the code a couple of times to see what happens.",
          "courseA_collector_loops6_b": "The shortest solution has 2 <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loops, one after the other."
        },
        "courseA_collector_loops7_authored_hint": {
          "courseA_collector_loops7_a": "If you can't figure out what comes next, try running the code to see where Laurel ends up."
        },
        "courseA_collector_loops7_2018_authored_hint": {
          "courseA_collector_loops7_a": "If you can't figure out what comes next, try running the code to see where Laurel ends up."
        },
        "courseA_collector_loops8_authored_hint": {
          "courseA_collector_loops8_a": "If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper and looking for a pattern.",
          "courseA_collector_loops8_b": "Try breaking this puzzle into 3 separate problems, and writing loops for each.",
          "courseA_collector_loops8_c": "Remember you can write one piece of the code at a time, then press \"Run\" to figure out where you need to go from there."
        },
        "courseA_collector_loops8_2018_authored_hint": {
          "courseA_collector_loops8_a": "If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper and looking for a pattern.",
          "courseA_collector_loops8_b": "Try breaking this puzzle into 3 separate problems, and writing loops for each.",
          "courseA_collector_loops8_c": "Remember you can write one piece of the code at a time, then press \"Run\" to figure out where you need to go from there."
        },
        "courseA_collector_loops9_authored_hint": {
          "courseA_collector_loops9_a": "If you can't spot the best places to use loops, try coding it out step-by-step and look for a pattern. ",
          "courseA_collector_loops9_b": "Try putting 2 of your <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loops inside of another loop to make your code shorter!"
        },
        "courseA_collector_loops9_2018_authored_hint": {
          "courseA_collector_loops9_a": "If you can't spot the best places to use loops, try coding it out step-by-step and look for a pattern. ",
          "courseA_collector_loops9_b": "Try putting 2 of your <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loops inside of another loop to make your code shorter!"
        },
        "courseA_collector_loops_challenge1_authored_hint": {
          "courseA_collector_loops_challenge1_a": "Try changing the numbers in each loop if something seems wrong.",
          "courseA_collector_loops_challenge1_b": "You don't need to use a loop if you are only doing something one time.",
          "courseA_collector_loops_challenge1_c": "There are 6 gems on the right side of the cave when you start, but you only need to get treasure 5 times moving South. Do you know why?",
          "courseA_collector_loops_challenge1_d": "The starting program doesn't collect the last 2 gems. Try adding this code at the very end:\n\n<xml><block type=\"maze_moveEast\">\n                        <next>\n                          <block type=\"collector_collect_simplified\">\n                            <next>\n                              <block type=\"maze_moveSouth\">\n                                <next>\n                                  <block type=\"collector_collect\"/>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block></xml>"
        },
        "courseA_collector_loops_challenge1_2018_authored_hint": {
          "courseA_collector_loops_challenge1_a": "Try changing the numbers in each loop if something seems wrong.",
          "courseA_collector_loops_challenge1_b": "You don't need to use a loop if you are only doing something one time.",
          "courseA_collector_loops_challenge1_c": "There are 6 gems on the right side of the cave when you start, but you only need to get treasure 5 times moving South. Do you know why?",
          "courseA_collector_loops_challenge1_d": "The starting program doesn't collect the last 2 gems. Try adding this code at the very end:\n\n<xml><block type=\"maze_moveEast\">\n                        <next>\n                          <block type=\"collector_collect_simplified\">\n                            <next>\n                              <block type=\"maze_moveSouth\">\n                                <next>\n                                  <block type=\"collector_collect\"/>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block></xml>"
        },
        "courseA_collector_loops_challenge2_authored_hint": {
          "courseA_collector_loops_challenge2_b": "You only need to use 1 block to solve this.",
          "courseA_collector_loops_challenge2_a": "You can move back over the path a second time before moving south."
        },
        "courseA_collector_loops_challenge2kp_authored_hint": {
          "courseA_collector_loops_challenge2kp_b": "Try this path to get you to a solution.",
          "courseA_collector_loops_challenge2kp_a": "Can you use loops to solve this puzzle?"
        },
        "courseA_collector_loops_challenge2kp_2018_authored_hint": {
          "courseA_collector_loops_challenge2kp_b": "Try this path to get you to a solution.",
          "courseA_collector_loops_challenge2kp_a": "Can you use loops to solve this puzzle?"
        },
        "courseA_collector_preLoops4_authored_hint": {
          "courseA_collector_preLoops4_a": "To grab the treasure, snap two ![](https://images.code.org/2df8a25d7e96207f57d1a6b504950b70-image-1508906116743.34.37.png) blocks and one ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png) block to the bottom of the program and click \"Run\"!\n\n"
        },
        "courseA_collector_preLoops5_authored_hint": {
          "courseA_collector_preLoops5_a": "You'll need to go two different directions to get even one gem!"
        },
        "courseA_collector_preLoops6_authored_hint": {
          "courseA_collector_preLoops6_a": "You will need to use two ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png) blocks to solve this puzzle."
        },
        "courseA_collector_preLoops7_authored_hint": {
          "courseA_collector_loops2_b": "After you have moved to a square with treasure, use this block to pick it up.\n\n<xml>  <block type=\"collector_collect\"/></xml>"
        },
        "courseA_harvester_forVideo_authored_hint": {
          "courseA_harvester_loops3_a": "Use a `repeat` block like this to help you!\n\n<xml><block type=\"controls_repeat_simplified_dropdown\">\n    <title name=\"TIMES\" config=\"2-10\">3</title>\n  </block></xml>"
        },
        "courseA_harvester_loops1_authored_hint": {
          "courseA_harvester_loops1_a": "Once you move to some corn, use this block to pick it!\n\n<xml><block type=\"harvester_corn\"/></xml>"
        },
        "courseA_harvester_loops3_authored_hint": {
          "courseA_harvester_loops3_a": "Use a `repeat` block like this to help you!\n\n<xml><block type=\"controls_repeat_simplified_dropdown\">\n    <title name=\"TIMES\" config=\"2-10\">4</title>\n  </block></xml>",
          "courseA_harvester_loops3_b": "To repeat code, drag out a `repeat` (<xml><block type=\"controls_repeat_simplified_dropdown\">\n    <title name=\"TIMES\" config=\"2-10\">4</title>\n  </block></xml> )loop, then put the block you want inside of it. "
        },
        "courseA_harvester_loops4_authored_hint": {
          "courseA_harvester_loops4_a": "Don't be afraid to press `Run` to see what happens!",
          "courseA_harvester_loops4_b": "How many pieces of corn are there? How many times does your code repeat?"
        },
        "courseA_harvester_loops5_authored_hint": {
          "courseA_harvester_loops5_a": "If you get stuck, try solving the puzzle in 2 parts, one part before the corner and one part after the corner.",
          "courseA_harvester_loops5_b": "Your final code will have **one** `repeat`  <xml><block type=\"controls_repeat_simplified_dropdown\">\n    <title name=\"TIMES\" config=\"2-10\">6</title>\n    </block></xml> loop, **one** `move South`   <xml><block type=\"maze_moveSouth\" limit=\"1\"/></xml> block, and **one** `move East`   <xml><block type=\"maze_moveEast\" limit=\"1\"/> </xml>block.",
          "courseA_harvester_loops5_c": "Use this path to pick all the corn!"
        },
        "courseA_harvester_loops5a_authored_hint": {
          "courseA_harvester_loops5a_a": "You will need one `repeat` <xml> <block type=\"controls_repeat_simplified_dropdown\">\n    <title name=\"TIMES\" config=\"2-10\">6</title>\n  </block></xml> loop after another.",
          "courseA_harvester_loops5a_b": "One loop will repeat `move South`<xml><block type=\"maze_moveSouth\" limit=\"1\"/></xml>, and the other will repeat `move East` <xml><block type=\"maze_moveEast\" limit=\"1\"/></xml>",
          "courseA_harvester_loops5a_c": "Use this path to move one way, and then the other."
        },
        "courseA_harvester_loops5b_authored_hint": {
          "courseA_harvester_loops5b_a": "Press `Run` and see what happens!",
          "courseA_harvester_loops5b_b": "Are your loops repeating the right number of times?",
          "courseA_harvester_loops5b_c": "Move one way, then the other with this path."
        },
        "courseA_harvester_loops6_authored_hint": {
          "courseA_harvester_loops6_a": "If you get stuck, try writing the steps on paper and looking for repeating patterns.",
          "courseA_harvester_loops6_b": "This is the path you should take to pick all the corn."
        },
        "courseA_harvester_loops7_authored_hint": {
          "courseA_harvester_loops7_a": "You will need two `repeat` <xml><block type=\"controls_repeat_simplified_dropdown\">\n    <title name=\"TIMES\" config=\"2-10\">5</title>\n  </block></xml>loops after each other!",
          "courseA_harvester_loops7_b": "Use two loops to follow this path."
        },
        "courseA_harvester_loops9_authored_hint": {
          "courseA_harvester_loops9_a": "Break this puzzle up into three different parts. One part to the first corner, one part to the second corner, and one part to the end.",
          "courseA_harvester_loops9_b": "Don't be afraid to run your code after every part to see what happens!",
          "courseA_harvester_loops9_c": "Follow this path to pick all the corn."
        },
        "courseA_harvester_seq1_authored_hint": {
          "courseA_harvester_seq1_a": "Use this block to pick the corn when the harvester finds it!\n\n<xml>\n  <block type=\"harvester_corn\"/>\n</xml>",
          "courseA_harvester_seq1_b": "The harvester will need to move East three times to get to the corn. Use this block:\n\n<xml>\n  <block type=\"maze_moveEast\"/>\n</xml>"
        },
        "courseA_harvester_seq10_authored_hint": {
          "courseA_harvester_seq10_a": "Are you stuck? Try writing down the steps on a piece of paper first.",
          "courseA_harvester_seq10_b": "You need to `Move East`, then `Move North`. Do this two times. Don't forget to get all the corn too!",
          "courseA_harvester_seq10_c": "Try using this path to pick all the corn."
        },
        "courseA_harvester_seq13_authored_hint": {
          "courseA_bee_seq1_a": "Use this block to pick corn once the harvester gets to it.\n\n<xml>\n  <block type=\"harvester_corn\"/>\n</xml>"
        },
        "courseA_harvester_seq2_authored_hint": {
          "courseA_harvester_seq2_a": "Don't forget to use <xml><block type=\"harvester_corn\"/></xml> to pick the corn!",
          "courseA_harvester_seq2_b": "Try writing down the steps on paper to find a solution!"
        },
        "courseA_harvester_seq3_authored_hint": {
          "courseA_harvester_seq3_a": "Did you remember to use this block?\n\n<xml><block type=\"harvester_corn\"/></xml>",
          "courseA_harvester_seq3_b": "Say the steps out loud and see if it helps you figure out the answer."
        },
        "courseA_harvester_seq4_authored_hint": {
          "courseA_harvester_seq4_a": "How many spaces are between the Harvester and the corn? How many blocks are already in your workspace?",
          "courseA_harvester_seq4_b": "You will need five `Move East` blocks and one `Pick Corn` block:\n\n<xml><block type=\"harvester_corn\"/></xml>"
        },
        "courseA_harvester_seq5_authored_hint": {
          "courseA_harvester_seq5_a": "Which block moves the harvester the wrong way?",
          "courseA_harvester_seq5_b": "You need to remove one block.",
          "courseA_harvester_seq5_c": "Throw this block in the trash!\n\n<xml><block type=\"maze_moveNorth\"/></xml>"
        },
        "courseA_harvester_seq6_authored_hint": {
          "courseA_harvester_seq6_a": "If you're stuck, try saying the steps out loud. It could help you figure out the right path."
        },
        "courseA_harvester_seq7_authored_hint": {
          "courseA_harvester_seq7_a": "Try solving the puzzle in 2 parts, one part before the corner and one part after the corner.",
          "courseA_harvester_seq7_b": "Having trouble? This is the path the harvester should take."
        },
        "courseA_harvester_seq9_authored_hint": {
          "courseA_harvester_seq9_a": "Run the code a few times to see what happens. Where does the harvester stop?",
          "courseA_harvester_seq9_b": "Don't forget to pick all the corn! You will need **3** pick corn blocks.",
          "courseA_harvester_seq9_c": "You should take this path to pick all the corn."
        },
        "courseA_maze_ramp2_2018_authored_hint": {
          "1": "Your code should look like this:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"maze_moveEast\">\n        <next>\n          <block type=\"maze_moveEast\">\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseA_maze_ramp2a_2018_authored_hint": {
          "1": "Snap both `East` blocks to the bottom of the `when run` block."
        },
        "courseA_maze_ramp3_2018_authored_hint": {
          "courseC_maze_programming3_a": "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
        },
        "courseA_maze_ramp3a_2018_authored_hint": {
          "1": "Your code should look like this:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"maze_moveEast\">\n        <next>\n          <block type=\"maze_moveEast\">\n            <next>\n              <block type=\"maze_moveNorth\"/>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>\n"
        },
        "courseA_maze_ramp3b_2018_authored_hint": {
          "1": "Your code should look like this:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"maze_moveSouth\">\n        <next>\n          <block type=\"maze_moveWest\">\n            <next>\n              <block type=\"maze_moveWest\"/>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>\n"
        },
        "courseA_maze_ramp4_2018_authored_hint": {
          "courseC_maze_programming4_a": "You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.",
          "courseC_maze_programming4_b": "To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig."
        },
        "courseA_maze_ramp4a_2018_authored_hint": {
          "1": "Your code should look like this:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"maze_moveEast\">\n        <next>\n          <block type=\"maze_moveEast\">\n            <next>\n              <block type=\"maze_moveSouth\"/>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseA_maze_ramp5_2018_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseC_maze_programming5_b": "Remember that turns are from the bird's perspective.",
          "courseC_maze_programming5_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseA_maze_ramp5a_2018_authored_hint": {
          "1": "Your code should look like this:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"maze_moveWest\">\n        <next>\n          <block type=\"maze_moveWest\">\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseA_maze_seq1_authored_hint": {
          "courseA_maze_seq1_a": "If you are having trouble getting the bird to move, make sure blocks are snapped in place under <xml>\n  <block type=\"when_run\"/>\n</xml>",
          "courseA_maze_seq1_b": "The bird will need to move West 3 times to get to the pig. Use this block:\n\n<xml><block type=\"maze_moveWest\"/></xml>"
        },
        "courseA_maze_seq10_authored_hint": {
          "courseA_maze_seq10_a": "If you're having trouble, try writing down the steps on a piece of paper first.",
          "courseA_maze_seq10_b": "You will need to go 3 directions to solve this puzzle."
        },
        "courseA_maze_seq10_2018_authored_hint": {
          "courseA_maze_seq10_a": "If you're having trouble, try writing down the steps on a piece of paper first.",
          "courseA_maze_seq10_b": "You will need to go 3 different directions to solve this puzzle."
        },
        "courseA_maze_seq13_authored_hint": {
          "courseA_maze_seq13_a": "If the path you need is unclear, use your finger to trace your way from the bird to the pig.",
          "courseA_maze_seq13_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen."
        },
        "courseA_maze_seq13_2018_authored_hint": {
          "courseA_maze_seq13_a": "If the path you need is unclear, use your finger to trace your way from the bird to the pig.",
          "courseA_maze_seq13_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen."
        },
        "courseA_maze_seq1_2018_authored_hint": {
          "courseA_maze_seq1_a": "If you are having trouble getting the bird to move, make sure blocks are snapped in place under <xml>\n  <block type=\"when_run\"/>\n</xml>",
          "courseA_maze_seq1_b": "The bird will need to move West 3 times to get to the pig. Use this block:\n\n<xml><block type=\"maze_moveWest\"/></xml>"
        },
        "courseA_maze_seq2_authored_hint": {
          "courseA_maze_seq2_a": "This program is missing 1 block. Can you figure out which one?",
          "courseA_maze_seq2_b": "Try running the code first to see where the bird ends up. Where do you need to go from there?"
        },
        "courseA_maze_seq2_2018_authored_hint": {
          "courseA_maze_seq2_a": "This program is missing 1 block. Can you figure out which one?",
          "courseA_maze_seq2_b": "Try running the code first to see where the bird ends up. Where do you need to go from there?"
        },
        "courseA_maze_seq3_authored_hint": {
          "courseA_maze_seq3_a": "1 of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?",
          "courseA_maze_seq3_b": "Try using the step button to find where the program goes wrong. Is it the 1st step? The 2nd?",
          "courseA_maze_seq3_c": "This <xml><block type=\"maze_moveNorth\"/></xml> block doesn't seem to be moving the bird in the right direction. Can you replace it with a different block?"
        },
        "courseA_maze_seq3_2018_authored_hint": {
          "courseA_maze_seq3_a": "1 of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?",
          "courseA_maze_seq3_b": "Try using the step button to find where the program goes wrong. Is it the 1st step? The 2nd?",
          "courseA_maze_seq3_c": "This <xml><block type=\"maze_moveNorth\"/></xml> block doesn't seem to be moving the bird in the right direction. Can you replace it with a different block?"
        },
        "courseA_maze_seq4_authored_hint": {
          "courseA_maze_seq4_a": "If you are having trouble, try to figure out what the correct path is and then remove the block that doesn't fit.",
          "courseA_maze_seq4_b": "Try running the code as it is. Does something go wrong? Which block can you remove? How can you fix it?"
        },
        "courseA_maze_seq4_2018_authored_hint": {
          "courseA_maze_seq4_a": "If you are having trouble, try to figure out what the correct path is and then remove the block that doesn't fit.",
          "courseA_maze_seq4_b": "Try running the code as it is. Does something go wrong? Which block can you remove? How can you fix it?"
        },
        "courseA_maze_seq4a_authored_hint": {
          "courseA_maze_seq4_a": "If you are having trouble, try using your finger to figure out the correct path by pointing it out on the map. What moves did your finger make?"
        },
        "courseA_maze_seq5_authored_hint": {
          "courseA_maze_seq5_a": "Try writing down the steps on paper to find a solution!",
          "courseA_maze_seq5_b": "You will need 2 blocks, pointing in 2 directions."
        },
        "courseA_maze_seq5_2018_authored_hint": {
          "1": "Try writing down the steps on paper to find a solution!",
          "2": "You will need to use this block:\n\n<xml><block type=\"maze_moveSouth\"/></xml>"
        },
        "courseA_maze_seq5a_2018_authored_hint": {
          "1": "Say the steps out loud and see if it helps you figure out the answer."
        },
        "courseA_maze_seq6_authored_hint": {
          "courseA_maze_seq6_a": "Your final code should have 3 movement blocks.",
          "courseA_maze_seq6_b": "If you get stuck, try solving the puzzle in 2 parts, one part before the corner and one part after the corner."
        },
        "courseA_maze_seq6_2018_authored_hint": {
          "courseA_maze_seq6_a": "Your final code should have 3 movement blocks.",
          "courseA_maze_seq6_b": "If you get stuck, try solving the puzzle in 2 parts, one part before the corner and one part after the corner."
        },
        "courseA_maze_seq7_authored_hint": {
          "courseA_maze_seq7_a": "There is 1 block that you need to add to move the bird to the pig.",
          "courseA_maze_seq7_b": "If you can't figure out what to do, try drawing the puzzle on paper and use your finger to figure out which way to move."
        },
        "courseA_maze_seq7_2018_authored_hint": {
          "courseA_maze_seq7_a": "There is 1 block that you need to add to move the bird to the pig.",
          "courseA_maze_seq7_b": "If you can't figure out what to do, try drawing the puzzle on paper and use your finger to figure out which way to move."
        },
        "courseA_maze_seq8_authored_hint": {
          "courseA_maze_seq8_a": "If you're stuck, try drawing the image on paper to see how the bird should move."
        },
        "courseA_maze_seq8_2018_authored_hint": {
          "courseA_maze_seq8_a": "If you're stuck, try drawing the image on paper to see how the bird should move."
        },
        "courseA_maze_seq9_authored_hint": {
          "courseA_maze_seq9_a": "Stuck? Try tracing the bird's path with your finger.",
          "courseA_maze_seq9_b": "If you're not sure what to do, try pressing \"Start over\" and running the code to see what goes wrong.",
          "courseA_maze_seq9_c": "You will need to move in 3 directions to solve this puzzle."
        },
        "courseA_maze_seq9_2018_authored_hint": {
          "courseA_maze_seq9_a": "Stuck? Try tracing the bird's path with your finger.",
          "courseA_maze_seq9_b": "If you're not sure what to do, try pressing \"Start over\" and running the code to see what goes wrong.",
          "courseA_maze_seq9_c": "You will need to move in 3 directions to solve this puzzle."
        },
        "courseA_maze_seq_challenge1_authored_hint": {
          "courseA_maze_seq_challenge1_a": "There are two solutions to this puzzle."
        },
        "courseA_maze_seq_challenge1_2018_authored_hint": {
          "courseA_maze_seq_challenge1_a": "There are two solutions to this puzzle."
        },
        "courseA_maze_seq_challenge2_authored_hint": {
          "courseA_maze_seq_challenge2_a": "Try counting the spaces with your finger. Remember not to count the space where you start!"
        },
        "courseA_maze_seq_challenge2_2018_authored_hint": {
          "courseA_maze_seq_challenge2_a": "Try counting the spaces with your finger. Remember not to count the space where you start!"
        },
        "courseA_playLab_events2_authored_hint": {
          "courseA_playLab_events2_a": "Look for a block that makes the dog say something.",
          "courseA_playLab_events2_b": "This is the code you need to complete this puzzle:\n\n<xml>\n<block type=\"when_run\" movable=\"false\" deletable=\"false\">\n<next>\n<block type=\"studio_saySpriteChoices\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"VALUE\">Hi there.</title>\n  </block>\n</next>\n</block>\n</xml>"
        },
        "courseA_playLab_events2_2018_authored_hint": {
          "courseA_playLab_events2_a": "Look for a block that that makes the dog say something.",
          "courseA_playLab_events2_b": "This is the code you need to complete this puzzle:\n\n<xml>\n<block type=\"when_run\" movable=\"false\" deletable=\"false\">\n<next>\n<block type=\"studio_saySpriteChoices\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"VALUE\">Hi there.</title>\n  </block>\n</next>\n</block>\n</xml>"
        },
        "courseA_playLab_events3_authored_hint": {
          "courseA_playLab_events3_a": "Drag this block  <xml><block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">8</title>\n  </block></xml> out and snap it to the bottom of <xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">left</title>\n  </block></xml>",
          "courseA_playLab_events3_b": "Remember to use the left arrow key to move Jorge to the flag once you have written your program. When the flag turns green, you've finished!"
        },
        "courseA_playLab_events3_2018_authored_hint": {
          "courseA_playLab_events3_a": "Drag this block  <xml><block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">8</title>\n  </block></xml> out and snap it to the bottom of <xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">left</title>\n  </block></xml>",
          "courseA_playLab_events3_b": "Remember to use the left arrow key to move Jorge to the flag once you have written your program. When the flag turns green, you've finished!"
        },
        "courseA_playLab_events4_authored_hint": {
          "courseA_playLab_events4_a": "Here is the event block that you will need to get Jorge to move right:\n\n<xml><block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">2</title>\n  </block></xml>",
          "courseA_playLab_events4_b": "This is the code you will need to complete this puzzle:\n\n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n    <next>\n  <block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">2</title>\n  </block></next></block></xml>"
        },
        "courseA_playLab_events4_2018_authored_hint": {
          "courseA_playLab_events4_a": "Here is the event block that you will need to get Jorge to move right:\n\n<xml><block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">2</title>\n  </block></xml>",
          "courseA_playLab_events4_b": "This is the code you will need to complete this puzzle:\n\n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n    <next>\n  <block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">2</title>\n  </block></next></block></xml>"
        },
        "courseA_playLab_events5_authored_hint": {
          "courseA_playLab_events5_a": "Here are the event blocks that you will need to use to move Jorge up and down:\n\n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">up</title>\n  </block></xml>\n\nand \n\n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>",
          "courseA_playLab_events5_b": "Did you know that you can change the key for  the event arrow by clicking on the picture in the block and choosing a new key?\n\n![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)"
        },
        "courseA_playLab_events5_2018_authored_hint": {
          "courseA_playLab_events5_a": "Here are the event blocks that you will need to use to move Jorge up and down:\n\n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">up</title>\n  </block></xml>\n\nand \n\n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>",
          "courseA_playLab_events5_b": "Did you know that you can change the key for  the event arrow by clicking on the picture in the block and choosing a new key?\n\n![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)"
        },
        "courseA_playLab_events6_authored_hint": {
          "courseA_playLab_events6_a": "Here is the event block that you would use to have Jorge do something when clicked:\n\n<xml><block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">1</title>\n  </block></xml>",
          "courseA_playLab_events6_b": "Here is the block you would use to change the background:\n\n<xml><block type=\"studio_setBackground\">\n    <title name=\"VALUE\">random</title>\n  </block></xml>",
          "courseA_playLab_events6_c": "Here is the block you would use to play a random sound:\n\n<xml><block type=\"studio_playSound\">\n    <title name=\"SOUND\">random</title>\n  </block></xml>"
        },
        "courseA_playLab_events6_2018_authored_hint": {
          "courseA_playLab_events6_a": "Here is the event block that you would use to have Jorge do something when clicked:\n\n<xml><block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">1</title>\n  </block></xml>",
          "courseA_playLab_events6_b": "Here is the block you would use to change the background:\n\n<xml><block type=\"studio_setBackground\">\n    <title name=\"VALUE\">random</title>\n  </block></xml>",
          "courseA_playLab_events6_c": "Here is the block you would use to play a random sound:\n\n<xml><block type=\"studio_playSound\">\n    <title name=\"SOUND\">random</title>\n  </block></xml>"
        },
        "courseA_playLab_events7_authored_hint": {
          "courseA_playLab_events7_a": "Use this block to control what happens when the actors collide.\n\n<xml><block type=\"studio_whenSpriteCollided\">\n    <title name=\"SPRITE1\">1</title>\n    <title name=\"SPRITE2\">0</title>\n  </block></xml>"
        },
        "courseA_playLab_events7_2018_authored_hint": {
          "courseA_playLab_events7_a": "Use this block to control what happens when the actors collide.\n\n<xml><block type=\"studio_whenSpriteCollided\">\n    <title name=\"SPRITE1\">1</title>\n    <title name=\"SPRITE2\">0</title>\n  </block></xml>"
        },
        "courseA_playlab_events_challenge1_authored_hint": {
          "courseA_playlab_events_challenge1_a": "Make Waddles the Penguin show when you click Robin!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_b": "Make Boo the Ghost show when you click Waddles!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_c": "Make Jayden the Fuzzy Monster show when you click Boo!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_d": "Make Spiff the Robot show when you click the monster!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_e": "Finally, make Wendel the Wizard show when you click Spiff!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n      </block>\n    </next>\n  </block></xml>"
        },
        "courseA_playlab_events_challenge1_2018_authored_hint": {
          "courseA_playlab_events_challenge1_a": "Make Waddles the Penguin show when you click Robin!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_b": "Make Boo the Ghost show when you click Waddles!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_c": "Make Jayden the Fuzzy Monster show when you click Boo!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_d": "Make Spiff the Robot show when you click the monster!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_e": "Finally, make Wendel the Wizard show when you click Spiff!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n      </block>\n    </next>\n  </block></xml>"
        },
        "courseA_playlab_events_challenge1a_authored_hint": {
          "courseA_playlab_events_challenge1_a": "You can make a bird sing.\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n          <block type=\"studio_saySprite\">\n            <title name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n          </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_b": "You can make a robot beep.\n\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      \n          <block type=\"studio_playSound\">\n            <title name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_c": "You can make an angry monster growl.\n\n<xml>  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSpriteEmotion\">\n        <title name=\"SPRITE\">5</title>\n        <title name=\"VALUE\">2</title>\n        <next>\n          <block type=\"studio_saySprite\">\n            <title name=\"SPRITE\">5</title>\n            <title name=\"TEXT\">Roar!</title>\n            <next>\n              <block type=\"studio_setSpriteEmotion\">\n                <title name=\"SPRITE\">5</title>\n                <title name=\"VALUE\">0</title>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block></xml>"
        },
        "courseA_playlab_events_challenge2_authored_hint": {
          "courseA_playlab_events_challenge2_a": "You can make a bird sing.\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n          <block type=\"studio_saySprite\">\n            <title name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n          </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge2_b": "You can make a robot beep.\n\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      \n          <block type=\"studio_playSound\">\n            <title name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>",
          "courseA_playlab_events_challenge2_c": "You can make an angry monster growl.\n\n<xml>  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSpriteEmotion\">\n        <title name=\"SPRITE\">5</title>\n        <title name=\"VALUE\">2</title>\n        <next>\n          <block type=\"studio_saySprite\">\n            <title name=\"SPRITE\">5</title>\n            <title name=\"TEXT\">Roar!</title>\n            <next>\n              <block type=\"studio_setSpriteEmotion\">\n                <title name=\"SPRITE\">5</title>\n                <title name=\"VALUE\">0</title>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block></xml>"
        },
        "courseA_playlab_events_challenge2_2018_authored_hint": {
          "courseA_playlab_events_challenge2_a": "You can make a bird sing.\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n          <block type=\"studio_saySprite\">\n            <title name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n          </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge2_b": "You can make a robot beep.\n\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      \n          <block type=\"studio_playSound\">\n            <title name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>",
          "courseA_playlab_events_challenge2_c": "You can make an angry monster growl.\n\n<xml>  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSpriteEmotion\">\n        <title name=\"SPRITE\">5</title>\n        <title name=\"VALUE\">2</title>\n        <next>\n          <block type=\"studio_saySprite\">\n            <title name=\"SPRITE\">5</title>\n            <title name=\"TEXT\">Roar!</title>\n            <next>\n              <block type=\"studio_setSpriteEmotion\">\n                <title name=\"SPRITE\">5</title>\n                <title name=\"VALUE\">0</title>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block></xml>"
        },
        "courseA_playlab_events_challengeClone_authored_hint": {
          "courseA_playlab_events_challenge1_a": "Make Waddles the Penguin show when you click Robin!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_b": "Make Boo the Ghost show when you click Waddles!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_c": "Make Jayden the Fuzzy Monster show when you click Boo!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_d": "Make Spiff the Robot show when you click the monster!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n      </block>\n    </next>\n  </block></xml>",
          "courseA_playlab_events_challenge1_e": "Finally, make Wendel the Wizard show when you click on Spiff!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n      </block>\n    </next>\n  </block></xml>"
        },
        "courseB_Scrat_ramp1_2018_authored_hint": {
          "1": "If Scrat isn't doing what you want, make sure both of the blocks have been fully clicked together, then click \"Run\" again.",
          "2": "Don't be afraid to make a mistake! Try something, and if it doesn't work, try something else!"
        },
        "courseB_Scrat_ramp2_2018_authored_hint": {
          "1": "Your code should look like this:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"maze_moveEast\">\n        <next>\n          <block type=\"maze_moveEast\">\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseB_Scrat_ramp3a_2018_authored_hint": {
          "1": "Your code should look like this:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"maze_moveEast\">\n        <next>\n          <block type=\"maze_moveEast\">\n            <next>\n              <block type=\"maze_moveNorth\"/>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>\n"
        },
        "courseB_Scrat_ramp3b_2018_authored_hint": {
          "1": "Your code should look like this:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"maze_moveSouth\">\n        <next>\n          <block type=\"maze_moveEast\">\n            <next>\n              <block type=\"maze_moveEast\"/>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>\n"
        },
        "courseB_Scrat_ramp4a_2018_authored_hint": {
          "1": "Your code should look like this:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"maze_moveEast\">\n        <next>\n          <block type=\"maze_moveEast\">\n            <next>\n              <block type=\"maze_moveSouth\"/>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseB_Scrat_ramp5a_2018_authored_hint": {
          "1": "Your code should look like this:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"maze_moveWest\">\n        <next>\n          <block type=\"maze_moveWest\">\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseB_artist_loops2_authored_hint": {
          "courseB_artist_loops2_a": "If you want the loop to repeat more than 4 times, you can change the number at the top of the block.",
          "courseB_artist_loops2_b": "Try running the code first to see where the artist ends up."
        },
        "courseB_artist_loops2_2018_authored_hint": {
          "courseB_artist_loops2_a": "If you want the loop to repeat more than 4 times, you can change the number at the top of the block.",
          "courseB_artist_loops2_b": "Try running the code first to see where the artist ends up."
        },
        "courseB_artist_loops3_authored_hint": {
          "courseB_artist_loops3_a": "Remember to use a `repeat` loop for better code!",
          "courseB_artist_loops3_b": "The artist will want to move South to draw this line."
        },
        "courseB_artist_loops3_2018_authored_hint": {
          "courseB_artist_loops3_a": "Remember to use a `repeat` <xml><block type=\"controls_repeat_simplified\">\n    <title name=\"TIMES\">???</title>\n  </block></xml> loop for better code!",
          "courseB_artist_loops3_b": "The artist will want to move South to draw this line."
        },
        "courseB_artist_loops4_authored_hint": {
          "courseB_artist_loops4_a": "The jump block lets you move forward without drawing a line.",
          "courseB_artist_loops4_b": "You will need to add a block inside of the repeat loop to solve this puzzle.",
          "courseB_artist_loops4_c": "Don't forget to change the number of times the loop repeats."
        },
        "courseB_artist_loops4_2018_authored_hint": {
          "courseB_artist_loops4_a": "The jump block lets you move forward without drawing a line.",
          "courseB_artist_loops4_b": "You will need to add a block inside of the repeat loop to solve this puzzle.",
          "courseB_artist_loops4_c": "Don't forget to change the number of times the loop repeats."
        },
        "courseB_artist_loops5_authored_hint": {
          "courseB_artist_loops5_a": "Drag out a `repeat` loop, then put the other blocks inside of it. How many times do you need to repeat?"
        },
        "courseB_artist_loops5_2018_authored_hint": {
          "courseB_artist_loops5_a": "Drag out a `repeat` <xml><block type=\"controls_repeat_simplified\">\n    <title name=\"TIMES\">???</title>\n  </block></xml> loop, then put the other blocks inside of it. How many times do you need to repeat?"
        },
        "courseB_artist_loops6_authored_hint": {
          "courseB_artist_loops6_b": "Try writing the moves down on a piece of paper and look for a pattern."
        },
        "courseB_artist_loops6_2018_authored_hint": {
          "courseB_artist_loops6_b": "Try writing the moves down on a piece of paper and look for a pattern."
        },
        "courseB_artist_loops7_authored_hint": {
          "courseB_artist_loops7_a": "This challenge uses **4** loops, one right after another!",
          "courseB_artist_loops7_b": "Notice that every loop makes a stair pattern that goes a different direction.\n\n![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)",
          "courseB_artist_loops7_c": "The loops should do this:\n- Loop 1\n  - Right\n  - Down\n  \n- Loop 2\n  - Right\n  - Up\n\n- Loop 3\n  - Left\n  - Up\n\n- Loop 4\n  - Left\n  - Down"
        },
        "courseB_artist_loops7_2018_authored_hint": {
          "courseB_artist_loops7_a": "This challenge uses **4** loops, one right after another!",
          "courseB_artist_loops7_b": "Notice that every loop makes a stair pattern that goes a different direction.\n\n![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)",
          "courseB_artist_loops7_c": "The loops should do this:\n- Loop 1\n  - Right\n  - Down\n  \n- Loop 2\n  - Right\n  - Up\n\n- Loop 3\n  - Left\n  - Up\n\n- Loop 4\n  - Left\n  - Down"
        },
        "courseB_artist_loops8_authored_hint": {
          "courseB_artist_loops8_a": "How many times should you repeat the pattern to make the ladder?",
          "courseB_artist_loops8_b": "Try running the code you're given to see what it does."
        },
        "courseB_artist_loops8_2018_authored_hint": {
          "courseB_artist_loops8_a": "How many times should you repeat the pattern to make the ladder?",
          "courseB_artist_loops8_b": "Try running the code you're given to see what it does."
        },
        "courseB_artist_loops9_authored_hint": {
          "courseB_artist_loops9_a": "Remember that jump blocks can be used to move without drawing a line.",
          "courseB_artist_loops9_b": "You will want to use the W block to solve this puzzle.",
          "courseB_artist_loops9_c": "Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern."
        },
        "courseB_artist_loops9_2018_authored_hint": {
          "courseB_artist_loops9_a": "Remember that jump blocks can be used to move without drawing a line.",
          "courseB_artist_loops9_b": "You will want to use the W block to solve this puzzle.",
          "courseB_artist_loops9_c": "Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern."
        },
        "courseB_artist_loops_challenge1_authored_hint": {
          "courseB_artist_loops_challenge1_a": "Blocks like this: <xml>  <block type=\"simple_move_up_right\"/></xml> will let your artist move at a slant!",
          "courseB_artist_loops_challenge1_b": "When you finish one of the dice, `jump` to the next!",
          "courseB_artist_loops_challenge1_c": "You will need to `move` or `jump` over some of the same lines twice. "
        },
        "courseB_artist_loops_challenge1_2018_authored_hint": {
          "courseB_artist_loops_challenge1_a": "Blocks like this: <xml>  <block type=\"simple_move_up_right\"/></xml> will let your artist move at a slant!",
          "courseB_artist_loops_challenge1_b": "When you finish one of the dice, `jump` to the next!",
          "courseB_artist_loops_challenge1_c": "You will need to `move` or `jump` over some of the same lines twice. "
        },
        "courseB_artist_loops_challenge2_authored_hint": {
          "courseB_artist_loops_challenge2_a": "The code to draw an X is already given to you. All you need to do is repeat the X and `jump` to the next spot.",
          "courseB_artist_loops_challenge2_b": "You can use `jump` blocks to move to other spaces without drawing."
        },
        "courseB_artist_loops_challenge2_2018_authored_hint": {
          "courseB_artist_loops_challenge2_a": "The code to draw an X is already given to you. All you need to do is repeat the X and `jump` to the next spot.",
          "courseB_artist_loops_challenge2_b": "You can use `jump` blocks to move to other spaces without drawing."
        },
        "courseB_collector_loops1_authored_hint": {
          "courseB_collector_loops1_a": "The <xml><block type=\"collector_collect_simplified\"/></xml> block can be used to pick up treasure when you are standing on top of it."
        },
        "courseB_collector_loops10_authored_hint": {
          "courseB_collector_loops10_a": "If you can't figure out where to put the `repeat` loops, write out the code step-by-step and look for a pattern.",
          "courseB_collector_loops10_b": "Try writing the moves down on a piece of paper and looking for a pattern."
        },
        "courseB_collector_loops10_2018_authored_hint": {
          "courseB_collector_loops10_a": "If you can't figure out where to put the `repeat` loops, write out the code step-by-step and look for a pattern.",
          "courseB_collector_loops10_b": "Try writing the moves down on a piece of paper and looking for a pattern."
        },
        "courseB_collector_loops1_2018_authored_hint": {
          "courseB_collector_loops1_a": "The <xml><block type=\"collector_collect_simplified\"/></xml> block can be used to pick up treasure when you are standing on top of it."
        },
        "courseB_collector_loops2_authored_hint": {
          "courseB_collector_loops2_a": "You'll have to move before you can collect any treasure.",
          "courseB_collector_loops2_b": "When you have reached a spot with treasure, use the <xml><block type=\"collector_collect\"/></xml> block to pick it up."
        },
        "courseB_collector_loops2_2018_authored_hint": {
          "courseB_collector_loops2_a": "You'll have to move before you can collect any treasure.",
          "courseB_collector_loops2_b": "When you have reached a spot with treasure, use the <xml><block type=\"collector_collect\"/></xml> block to pick it up."
        },
        "courseB_collector_loops3_authored_hint": {
          "courseB_collector_prog3_a": "Try using a <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">5</title></block></xml> block to collect your treasure.",
          "courseB_collector_prog3_b": "Remember you can put more than one block inside a repeat loop."
        },
        "courseB_collector_loops3_2018_authored_hint": {
          "courseB_collector_prog3_a": "Try using a <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">5</title></block></xml> block to collect your treasure.",
          "courseB_collector_prog3_b": "Remember you can put more than one block inside a repeat loop."
        },
        "courseB_collector_loops3_predict1_authored_hint": {
          "courseB_collector_prog3_a": "Try using a `repeat` block to collect your gold."
        },
        "courseB_collector_loops4_authored_hint": {
          "courseB_collector_loops4_a": "Try using the step button to figure out where things go wrong.",
          "courseB_collector_loops4_b": "To change how far Laurel goes, change the number of times that the loop runs.",
          "courseB_collector_loops4_c": "Laurel needs to walk down and collect the treasure after she finishes the `repeat` loop!"
        },
        "courseB_collector_loops4_2018_authored_hint": {
          "courseB_collector_loops4_a": "Try using the step button to figure out where things go wrong.",
          "courseB_collector_loops4_b": "To change how far Laurel goes, change the number of times that the loop runs.",
          "courseB_collector_loops4_c": "Laurel needs to walk down and collect the treasure after she finishes the `repeat` <xml><block type=\"controls_repeat_simplified\">\n    <title name=\"TIMES\">???</title>\n  </block></xml>loop!"
        },
        "courseB_collector_loops5_authored_hint": {
          "courseB_collector_loops5_a": "Use more than one loop to get the job done.",
          "courseB_collector_loops5_b": "Try running the code a couple of times to see what happens."
        },
        "courseB_collector_loops5_2018_authored_hint": {
          "courseB_collector_loops5_a": "Use more than one loop to get the job done.",
          "courseB_collector_loops5_b": "Try running the code a couple of times to see what happens."
        },
        "courseB_collector_loops6_authored_hint": {
          "courseB_collector_loops6_a": "Can't figure out where things start going wrong? Use the \"Step\" button to run through your program one block at a time.",
          "courseB_collector_loops6_b": "You can change the number of times the repeat loop runs by clicking on the \"3\" and choosing a different number.",
          "courseB_collector_loops6_c": "You will want to use 3 `repeat` loops to solve this puzzle.",
          "courseB_collector_loops6_d": "If you're confused, try breaking this puzzle into 3 pieces."
        },
        "courseB_collector_loops6_2018_authored_hint": {
          "courseB_collector_loops6_a": "Can't figure out where things start going wrong? Use the \"Step\" button to run through your program one block at a time.",
          "courseB_collector_loops6_b": "You can change the number of times the repeat loop runs by clicking on the \"3\" and choosing a different number.",
          "courseB_collector_loops6_c": "You will want to use 3 `repeat` <xml><block type=\"controls_repeat_simplified\">\n    <title name=\"TIMES\">???</title>\n  </block></xml> loops to solve this puzzle.",
          "courseB_collector_loops6_d": "If you're confused, try breaking this puzzle into 3 pieces."
        },
        "courseB_collector_loops7_authored_hint": {
          "courseB_collector_loops7_a": "If you are having a hard time with the puzzle, try drawing it on paper to help you figure it out.",
          "courseB_collector_loops7_b": "You will need 3 repeat loops to solve this puzzle, and don't forget the extra treasure at the end!"
        },
        "courseB_collector_loops7_2018_authored_hint": {
          "courseB_collector_loops7_a": "If you are having a hard time with the puzzle, try drawing it on paper to help you figure it out.",
          "courseB_collector_loops7_b": "You will need 3 repeat loops to solve this puzzle, and don't forget the extra treasure at the end!"
        },
        "courseB_collector_loops8_authored_hint": {
          "courseB_collector_loops8_challenge_a": "If you can't figure out where to put the repeat loops, write out the code step-by-step and look for a pattern."
        },
        "courseB_collector_loops8_2018_authored_hint": {
          "courseB_collector_loops8_challenge_a": "If you can't figure out where to put the repeat loops, write out the code step-by-step and look for a pattern."
        },
        "courseB_collector_loops9_authored_hint": {
          "courseB_collector_loops9_a": "Does this seem too hard?  Break it up into 3 little problems to make it feel easier.\n",
          "courseB_collector_loops9_b": "You will need 3 repeat loops, one after the other, for this solution."
        },
        "courseB_collector_loops9_2018_authored_hint": {
          "courseB_collector_loops9_a": "Does this seem too hard?  Break it up into 3 little problems to make it feel easier.\n",
          "courseB_collector_loops9_b": "You will need 3 repeat loops, one after the other, for this solution."
        },
        "courseB_collector_loops_challenge1_authored_hint": {
          "courseB_collector_loops_challenge1_b": "Start by looping the following commands:\n\n<xml>\n  <block type=\"maze_moveSouth\">\n    <next>\n    <block type=\"collector_collect\"></block>\n    </next>\n    </block>\n</xml>\n",
          "courseB_collector_loops_challenge1_c": "Move East twice between each path.\n\n<xml>\n  <block type=\"maze_moveEast\"><next>\n  <block type=\"maze_moveEast\"></block></next></block>\n  </xml>\n\nYou can do this with only 14 blocks. Click for one more hint to see a solution. \n",
          "courseB_collector_loops_challenge1_d": "Try this!\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_simplified\">\n        <title name=\"TIMES\">5</title>\n        <statement name=\"DO\">\n          <block type=\"maze_moveSouth\">\n            <next>\n              <block type=\"collector_collect\"/>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type=\"maze_moveEast\">\n            <next>\n              <block type=\"maze_moveEast\">\n                <next>\n                  <block type=\"controls_repeat_simplified\">\n                    <title name=\"TIMES\">5</title>\n                    <statement name=\"DO\">\n                      <block type=\"collector_collect\">\n                        <next>\n                          <block type=\"maze_moveNorth\"/>\n                        </next>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type=\"maze_moveEast\">\n                        <next>\n                          <block type=\"maze_moveEast\">\n                            <next>\n                              <block type=\"controls_repeat_simplified\">\n                                <title name=\"TIMES\">5</title>\n                                <statement name=\"DO\">\n                                  <block type=\"maze_moveSouth\">\n                                    <next>\n                                      <block type=\"collector_collect\"/>\n                                    </next>\n                                  </block>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseB_collector_loops_challenge1_2018_authored_hint": {
          "courseB_collector_loops_challenge1_b": "Start by looping the following commands:\n\n<xml>\n  <block type=\"maze_moveSouth\">\n    <next>\n    <block type=\"collector_collect\"></block>\n    </next>\n    </block>\n</xml>\n",
          "courseB_collector_loops_challenge1_c": "Move East twice between each path.\n\n<xml>\n  <block type=\"maze_moveEast\"><next>\n  <block type=\"maze_moveEast\"></block></next></block>\n  </xml>\n\nYou can do this with only 14 blocks. Click for one more hint to see a solution. \n",
          "courseB_collector_loops_challenge1_d": "Try this!\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_simplified\">\n        <title name=\"TIMES\">5</title>\n        <statement name=\"DO\">\n          <block type=\"maze_moveSouth\">\n            <next>\n              <block type=\"collector_collect\"/>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type=\"maze_moveEast\">\n            <next>\n              <block type=\"maze_moveEast\">\n                <next>\n                  <block type=\"controls_repeat_simplified\">\n                    <title name=\"TIMES\">5</title>\n                    <statement name=\"DO\">\n                      <block type=\"collector_collect\">\n                        <next>\n                          <block type=\"maze_moveNorth\"/>\n                        </next>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type=\"maze_moveEast\">\n                        <next>\n                          <block type=\"maze_moveEast\">\n                            <next>\n                              <block type=\"controls_repeat_simplified\">\n                                <title name=\"TIMES\">5</title>\n                                <statement name=\"DO\">\n                                  <block type=\"maze_moveSouth\">\n                                    <next>\n                                      <block type=\"collector_collect\"/>\n                                    </next>\n                                  </block>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseB_collector_loops_challenge2_authored_hint": {
          "courseB_collector_loops_challenge2_a": "If something goes wrong, don't be afraid to start over. Don't give up!",
          "courseB_collector_loops_challenge2_b": "If you repeat this pattern, Laurel won't hit the wall at the bottom of the cave!\n\n<xml><block type=\"maze_moveEast\">\n            <next>\n              <block type=\"collector_collect\">\n                <next>\n                  <block type=\"maze_moveWest\">\n                    <next>\n                      <block type=\"maze_moveWest\">\n                        <next>\n                          <block type=\"maze_moveSouth\"/>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block></xml>",
          "courseB_collector_loops_challenge2_c": "Try using a `repeat` block to collect the final pile of treasure!",
          "courseB_collector_loops_challenge2_d": "Try this solution:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_simplified_dropdown\">\n        <title name=\"TIMES\" config=\"3-10\">4</title>\n        <statement name=\"DO\">\n          <block type=\"maze_moveEast\">\n            <next>\n              <block type=\"collector_collect\">\n                <next>\n                  <block type=\"maze_moveWest\">\n                    <next>\n                      <block type=\"maze_moveWest\">\n                        <next>\n                          <block type=\"maze_moveSouth\"/>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type=\"controls_repeat_simplified_dropdown\">\n            <title name=\"TIMES\" config=\"3-10\">6</title>\n            <statement name=\"DO\">\n              <block type=\"collector_collect\"/>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseB_collector_loops_challenge2_2018_authored_hint": {
          "courseB_collector_loops_challenge2_a": "If something goes wrong, don't be afraid to start over. Don't give up!",
          "courseB_collector_loops_challenge2_b": "If you repeat this pattern, Laurel won't hit the wall at the bottom of the cave!\n\n<xml><block type=\"maze_moveEast\">\n            <next>\n              <block type=\"collector_collect\">\n                <next>\n                  <block type=\"maze_moveWest\">\n                    <next>\n                      <block type=\"maze_moveWest\">\n                        <next>\n                          <block type=\"maze_moveSouth\"/>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block></xml>",
          "courseB_collector_loops_challenge2_c": "Try using a `repeat` block to collect the final pile of treasure!",
          "courseB_collector_loops_challenge2_d": "Try this solution:\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_simplified_dropdown\">\n        <title name=\"TIMES\" config=\"3-10\">4</title>\n        <statement name=\"DO\">\n          <block type=\"maze_moveEast\">\n            <next>\n              <block type=\"collector_collect\">\n                <next>\n                  <block type=\"maze_moveWest\">\n                    <next>\n                      <block type=\"maze_moveWest\">\n                        <next>\n                          <block type=\"maze_moveSouth\"/>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type=\"controls_repeat_simplified_dropdown\">\n            <title name=\"TIMES\" config=\"3-10\">6</title>\n            <statement name=\"DO\">\n              <block type=\"collector_collect\"/>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseB_collector_loops_challenge2a_authored_hint": {
          "courseB_collector_loops_challenge2a_a": "If something goes wrong, try debugging it. Don't give up!",
          "courseB_collector_loops_challenge2a_b": "Look at this option for getting through the maze. Do you see a pattern that you can repeat?",
          "courseB_collector_loops_challenge2a_c": "To collect all of the treasure, you will either need to add two  <xml> <block type=\"collector_collect\"/></xml> blocks inside your loop, or put the block inside of its own `repeat` block."
        },
        "courseB_collector_loops_challenge2a_2018_authored_hint": {
          "courseB_collector_loops_challenge2a_a": "If something goes wrong, try debugging it. Don't give up!",
          "courseB_collector_loops_challenge2a_b": "Look at this option for getting through the maze. Do you see a pattern that you can repeat?",
          "courseB_collector_loops_challenge2a_c": "To collect all of the treasure, you will either need to add two  <xml> <block type=\"collector_collect\"/></xml> blocks inside your loop, or put the block inside of its own `repeat` block."
        },
        "courseB_collector_loops_challenge`_authored_hint": {
          "courseA_collector_loops_challenge2_b": "You only need to use one ![](https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34 PM.png) block to solve this.\n\n",
          "courseA_collector_loops_challenge2_a": "You can move back over the path a second time before moving south.\n\n![](https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png)"
        },
        "courseB_collector_prog3_authored_hint": {
          "courseB_collector_prog3_a": "Try using a `repeat` block to collect your gold."
        },
        "courseB_iceage_loops1_authored_hint": {
          "courseB_iceage_loops1_a": "Watch out for broken ice! Scrat will fall right through!",
          "courseB_iceage_loops1_b": "You will have to use this block:\n\n<xml><block type=\"maze_moveEast\"/></xml>"
        },
        "courseB_iceage_loops10_authored_hint": {
          "courseB_iceage_loops10_a": "Watch out for broken ice! Scrat will fall into the water!",
          "courseB_iceage_loops10_b": "Try saying the steps out loud or writing them down on a piece of paper. Do you see any patterns?",
          "courseB_iceage_loops10_c": "This is a long puzzle! Follow this path."
        },
        "courseB_iceage_loops2_authored_hint": {
          "courseB_iceage_loops2_a": "Break this puzzle into two pieces, one before the corner, and one after the corner.",
          "courseB_iceage_loops2_b": "If you get stuck, try saying the steps out loud.",
          "courseB_iceage_loops2_c": "Follow this path to get Scrat to the acorn."
        },
        "courseB_iceage_loops3_authored_hint": {
          "courseB_iceage_loops3_b": "To repeat code, drag out a `repeat` <xml><block type=\"controls_repeat_simplified\">\n    <title name=\"TIMES\">???</title>\n  </block></xml>loop, then put the block you want inside of it."
        },
        "courseB_iceage_loops4_authored_hint": {
          "courseB_iceage_loops4_a": "Try writing down the steps Scrat would take to get to the acorn. Do you see a pattern?",
          "courseB_iceage_loops4_b": "Don't be afraid to run your code and see what happens!",
          "courseB_iceage_loops4_c": "This is the path Scrat should take."
        },
        "courseB_iceage_loops6_authored_hint": {
          "courseB_iceage_loops6_a": "Your final code will have **three** movement blocks.",
          "courseB_iceage_loops6_b": "You only need to add **one** more loop!",
          "courseB_iceage_loops6_c": "Your final path should look like this."
        },
        "courseB_iceage_loops7_authored_hint": {
          "courseB_iceage_loops7_a": "If you get stuck, try writing steps down on a piece of paper. Do you see a pattern?",
          "courseB_iceage_loops7_b": "This is the path Scrat should take to get to the acorn."
        },
        "courseB_iceage_loops8_authored_hint": {
          "courseB_iceage_loops8_a": "Are the movement blocks right? What else can you change?",
          "courseB_iceage_loops8_b": "The first loop should repeat **3** times, the second should repeat **5** times, the third loop should repeat **4** times, and the last loop should repeat **4** times.",
          "courseB_iceage_loops8_c": "Use loops to help Scrat follow this path."
        },
        "courseB_iceage_loops9_authored_hint": {
          "courseB_iceage_loops9_a": "Having trouble? Try breaking this puzzle into smaller pieces. Don't be afraid to run your puzzle as you code!",
          "courseB_iceage_loops9_b": "Your final code should have **4** loops.",
          "courseB_iceage_loops9_c": "Scrat should follow this path to get the acorn."
        },
        "courseB_maze_seq1_authored_hint": {
          "courseB_maze_seq1_a": "Connect blocks to the <xml><block type=\"when_run\"/></xml> block to make the bird move!",
          "courseB_maze_seq1_b": "Drag three of these <xml><block type=\"maze_moveSouth\"/></xml> arrows out and connect them to the <xml><block type=\"when_run\"/></xml> block to get your bird to the pig."
        },
        "courseB_maze_seq10_authored_hint": {
          "courseB_maze_seq10_a": "Try writing down the steps on a piece of paper first.",
          "courseB_maze_seq10_b": "You will need to move in two different directions to reach the pig."
        },
        "courseB_maze_seq11_authored_hint": {
          "courseB_maze_seq11_a": "Try writing down the steps on a piece of paper first.",
          "courseB_maze_seq11_b": "Solve the puzzle in two parts: one before the corner and one after the corner."
        },
        "courseB_maze_seq1_2018_authored_hint": {
          "courseB_maze_seq1_a": "Connect blocks to the <xml><block type=\"when_run\"/></xml> block to make Scrat move!",
          "courseB_maze_seq1_b": "Drag three of these <xml><block type=\"maze_moveSouth\"/></xml> arrows out and connect them to the <xml><block type=\"when_run\"/></xml> block to get Scrat to the acorn."
        },
        "courseB_maze_seq2_authored_hint": {
          "courseB_maze_seq2_a": "This program is missing one block. Can you figure out which one?",
          "courseB_maze_seq2_b": "Try running the code you are given to see what the bird needs to do next."
        },
        "courseB_maze_seq2_2018_authored_hint": {
          "courseB_maze_seq2_a": "This program is missing one block. Can you figure out which one?",
          "courseB_maze_seq2_b": "Try running the code you are given to see what Scrat needs to do next."
        },
        "courseB_maze_seq3_authored_hint": {
          "courseB_maze_seq3_a": "One of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?",
          "courseB_maze_seq3_b": "Try using the step button to find where the program goes wrong. Is it the first step? The second?",
          "courseB_maze_seq3_c": "The <xml><block type=\"maze_moveWest\"/></xml> block doesn't seem to be moving the bird in the right direction."
        },
        "courseB_maze_seq3_2018_authored_hint": {
          "courseB_maze_seq3_a": "One of the blocks is moving Scrat in the wrong direction. Can you figure out which one and replace it with the correct block?",
          "courseB_maze_seq3_b": "Try using the step button to find where the program goes wrong. Is it the first step? The second?",
          "courseB_maze_seq3_c": "The <xml><block type=\"maze_moveWest\"/></xml> block doesn't seem to be moving the bird in the right direction."
        },
        "courseB_maze_seq4_authored_hint": {
          "courseB_maze_seq4_a": "Try adding one instruction at a time until you get to the pig.",
          "courseB_maze_seq4_b": "You will want to use the <xml><block type=\"maze_moveEast\"/></xml> block to solve this puzzle."
        },
        "courseB_maze_seq4_2018_authored_hint": {
          "courseB_maze_seq4_a": "Try adding one instruction at a time until you get to the acorn.",
          "courseB_maze_seq4_b": "You will want to use the <xml><block type=\"maze_moveEast\"/></xml> block to solve this puzzle."
        },
        "courseB_maze_seq5_authored_hint": {
          "courseB_maze_seq5_a": "If you get stuck, try drawing out the path on paper.",
          "courseB_maze_seq5_b": "There are 2 ways to solve this puzzle!",
          "courseB_maze_seq5_c": "Not sure how to get to the pig?  Try this path."
        },
        "courseB_maze_seq5_2018_authored_hint": {
          "courseB_maze_seq5_a": "If you get stuck, try drawing out the path on paper.",
          "courseB_maze_seq5_b": "There are 2 ways to solve this puzzle!",
          "courseB_maze_seq5_c": "Not sure how to get to the acorn?  Try this path."
        },
        "courseB_maze_seq6_authored_hint": {
          "courseB_maze_seq6_a": "Your final code should have three movement blocks.",
          "courseB_maze_seq6_b": "If you get stuck, try solving the puzzle in two parts, one sideways and one up-and-down.",
          "courseB_maze_seq5_c": "There are two ways to solve this puzzle.",
          "courseB_maze_seq5_d": "Not sure how to get to the pig? Try this path!"
        },
        "courseB_maze_seq6_2018_authored_hint": {
          "courseB_maze_seq6_a": "Your final code should have three movement blocks.",
          "courseB_maze_seq6_b": "If you get stuck, try solving the puzzle in two parts, one sideways and one up-and-down.",
          "courseB_maze_seq5_c": "There are two ways to solve this puzzle.",
          "courseB_maze_seq5_d": "Not sure how to get to the acorn? Try this path!"
        },
        "courseB_maze_seq7_authored_hint": {
          "courseB_maze_seq7_a": "Add 1 block to move the bird to the pig.",
          "courseB_maze_seq7_b": "Try running the code that's given to you and see where you end up.",
          "courseB_maze_seq7_c": "Can't get to the pig?  Try this path!"
        },
        "courseB_maze_seq7_2018_authored_hint": {
          "courseB_maze_seq7_a": "Add 1 block to move Scrat to the acorn.",
          "courseB_maze_seq7_b": "Try running the code that's given to you and see where you end up.",
          "courseB_maze_seq7_c": "Can't get to the acorn?  Try this path!"
        },
        "courseB_maze_seq8_authored_hint": {
          "courseB_maze_seq8_a": "Try adding one block at a time until you solve the puzzle.",
          "courseB_maze_seq8_b": "There are two ways to solve this puzzle!",
          "courseB_maze_seq8_c": "Don't know which way to go? Try this path!"
        },
        "courseB_maze_seq8_2018_authored_hint": {
          "courseB_maze_seq8_a": "Try adding one block at a time until you solve the puzzle.",
          "courseB_maze_seq8_b": "There is more than one way to solve this puzzle!",
          "courseB_maze_seq8_c": "Don't know which way to go? Try this path!"
        },
        "courseB_maze_seq9_authored_hint": {
          "courseB_maze_seq9_a": "Try writing down all of the steps on a piece of paper first.",
          "courseB_maze_seq9_b": "Build your program a block at a time and test as you build.",
          "courseB_maze_seq9_c": "There are two ways to solve this puzzle.",
          "courseB_maze_seq9_d": "Stuck?  Try this path!"
        },
        "courseB_maze_seq9_2018_authored_hint": {
          "courseB_maze_seq9_a": "Try writing down all of the steps on a piece of paper first.",
          "courseB_maze_seq9_b": "Build your program a block at a time and test as you build.",
          "courseB_maze_seq9_c": "There are two ways to solve this puzzle.",
          "courseB_maze_seq9_d": "Stuck?  Try this path!"
        },
        "courseB_maze_seqCold_authored_hint": {
          "courseB_maze_seqCold_a": "Stuck? Try tracing the bird's path with your finger.",
          "courseB_maze_seqCold_b": "The extra blocks need to be added before the last ![](https://images.code.org/145dfc20c086bc8fc265de47f3cfe4b0-image-1467848177684.35.51 PM.png )"
        },
        "courseB_maze_seqOld_authored_hint": {
          "courseB_maze_seqOld_a": "If you're having trouble, try writing down the steps on a piece of paper first."
        },
        "courseB_maze_seq_challenge1_authored_hint": {
          "courseB_maze_seq_challenge1_a": "The shortest path might not work this time.",
          "courseB_maze_seq_challenge1_b": "Try using the <xml><block type=\"maze_moveWest\"/></xml> block to start."
        },
        "courseB_maze_seq_challenge1_2018_authored_hint": {
          "courseB_maze_seq_challenge1_a": "The shortest path might not work this time.",
          "courseB_maze_seq_challenge1_b": "Try using the <xml><block type=\"maze_moveWest\"/></xml> block to start."
        },
        "courseB_maze_seq_challenge2_authored_hint": {
          "courseB_maze_seq_challenge2_a": "You do not need to add or remove blocks to solve this puzzle.",
          "courseB_maze_seq_challenge2_b": "Rearrange the blocks and take the staircase pattern path."
        },
        "courseB_maze_seq_challenge2_2018_authored_hint": {
          "courseB_maze_seq_challenge2_a": "You do not need to add or remove blocks to solve this puzzle.",
          "courseB_maze_seq_challenge2_b": "Rearrange the blocks and take the staircase pattern path."
        },
        "courseB_playlab_events2_authored_hint": {
          "courseB_playlab_events2_a": "This is the block to have Daisy say something:\n\n<xml>\n  <block type=\"studio_saySpriteChoices\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">Hi there.</title>\n  </block>\n  </xml>"
        },
        "courseB_playlab_events2_2018_authored_hint": {
          "courseB_playlab_events2_a": "This is the block to have Daisy say something:\n\n<xml>\n  <block type=\"studio_saySpriteChoices\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">Hi there.</title>\n  </block>\n  </xml>"
        },
        "courseB_playlab_events3_authored_hint": {
          "courseB_playlab_events3_a": "This is the block you should use to add the event:\n\n<xml>\n<block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">0</title>\n  </block>\n  </xml>",
          "courseB_playlab_events3_b": "This is the block you need to switch Daisy's mood:\n\n<xml>\n<block type=\"studio_setSpriteEmotion\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">random</title>\n  </block>\n  </xml>"
        },
        "courseB_playlab_events3_2018_authored_hint": {
          "courseB_playlab_events3_a": "This is the block you should use to add the event:\n\n<xml>\n<block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">0</title>\n  </block>\n  </xml>",
          "courseB_playlab_events3_b": "This is the block you need to switch Daisy's mood:\n\n<xml>\n<block type=\"studio_setSpriteEmotion\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">random</title>\n  </block>\n  </xml>"
        },
        "courseB_playlab_events4_authored_hint": {
          "courseB_playlab_events4_a": "This is the event that controls the left arrow:\n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">left</title>\n  </block>\n  </xml>",
          "courseB_playlab_events4_b": "This is the block that makes the knight move left.\n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">8</title>\n  </block>\n  </xml>"
        },
        "courseB_playlab_events4_2018_authored_hint": {
          "courseB_playlab_events4_a": "This is the event that controls the left arrow:\n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">left</title>\n  </block>\n  </xml>",
          "courseB_playlab_events4_b": "This is the block that makes the knight move left.\n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">8</title>\n  </block>\n  </xml>"
        },
        "courseB_playlab_events5_authored_hint": {
          "courseB_playlab_events5_a": "This is the event block that controls the right arrow: \n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n  </block>\n  </xml>",
          "courseB_playlab_events5_b": "This is the block that makes the knight run away. \n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">2</title>\n  </block>\n</xml>"
        },
        "courseB_playlab_events5_2018_authored_hint": {
          "courseB_playlab_events5_a": "This is the event block that controls the right arrow: \n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n  </block>\n  </xml>",
          "courseB_playlab_events5_b": "This is the block that makes the knight run away. \n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">2</title>\n  </block>\n</xml>"
        },
        "courseB_playlab_events6_authored_hint": {
          "courseB_playlab_events6_a": "You will need these event blocks:\n\n<xml>\n  <block type=\"studio_whenArrow\" id=\"callMe\">\n    <title name=\"VALUE\">up</title>\n  </block>\n  <block type=\"studio_whenArrow\" id=\"callMe\">\n    <title name=\"VALUE\">down</title>\n  </block>\n  </xml>",
          "courseB_playlab_events6_b": "Use the drop down arrows on the green `when ___ arrow pressed` event blocks to choose different directions.\n\n![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)",
          "courseB_playlab_events6_c": "Get to all of the flags to pass!"
        },
        "courseB_playlab_events6_2018_authored_hint": {
          "courseB_playlab_events6_a": "You will need these event blocks:\n\n<xml>\n  <block type=\"studio_whenArrow\" id=\"callMe\">\n    <title name=\"VALUE\">up</title>\n  </block>\n  <block type=\"studio_whenArrow\" id=\"callMe\">\n    <title name=\"VALUE\">down</title>\n  </block>\n  </xml>",
          "courseB_playlab_events6_b": "Use the drop down arrows on the green `when ___ arrow pressed` event blocks to choose different directions.\n\n![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)",
          "courseB_playlab_events6_c": "Get to all of the flags to pass!"
        },
        "courseB_playlab_events7_authored_hint": {
          "courseB_playlab_events7_a": "This is the event block that you will need:\n\n<xml>\n<block type=\"studio_whenSpriteCollided\">\n    <title name=\"SPRITE1\">0</title>\n    <title name=\"SPRITE2\">1</title>\n  </block>\n</xml>",
          "courseB_playlab_events7_b": "This is the block you need to play a sound.\n\n<xml>\n<block type=\"studio_playSound\">\n    <title name=\"SOUND\">slap</title>\n  </block>\n</xml>",
          "courseB_playlab_events7_c": "This is the block you need to make the knight vanish:\n\n<xml>\n<block type=\"studio_vanish\">\n    <title name=\"SPRITE\">1</title>\n  </block>\n</xml>"
        },
        "courseB_playlab_events7_2018_authored_hint": {
          "courseB_playlab_events7_a": "This is the event block that you will need:\n\n<xml>\n<block type=\"studio_whenSpriteCollided\">\n    <title name=\"SPRITE1\">0</title>\n    <title name=\"SPRITE2\">1</title>\n  </block>\n</xml>",
          "courseB_playlab_events7_b": "This is the block you need to play a sound.\n\n<xml>\n<block type=\"studio_playSound\">\n    <title name=\"SOUND\">slap</title>\n  </block>\n</xml>",
          "courseB_playlab_events7_c": "This is the block you need to make the knight vanish:\n\n<xml>\n<block type=\"studio_vanish\">\n    <title name=\"SPRITE\">1</title>\n  </block>\n</xml>"
        },
        "courseB_playlab_eventsToolbox_authored_hint": {
          "courseB_playlab_events7_a": "This is the event block that you will need:\n\n![](https://images.code.org/2ed42b3a3108c6affdfc866de57f2eec-image-1475624565390.42.18.png)",
          "courseB_playlab_events7_b": "This is the block you need to play a sound.\n\n![](https://images.code.org/58e9b9a146a4ca3a8eee25845110b805-image-1475624550269.42.00.png)",
          "courseB_playlab_events7_c": "This is the block you need to make the knight vanish:\n\n![](https://images.code.org/f468611cbe51e1cb35531334f625395a-image-1475624478204.41.02.png)"
        },
        "courseB_playlab_events_challenge1_authored_hint": {
          "courseB_playlab_events_challenge1_a": "Make the other animals move down when you press `▼`. \n\n<xml>\n  <block type=\"studio_whenArrow\" movable=\"false\">\n    <title name=\"VALUE\">down</title>\n  </block>\n</xml>",
          "courseB_playlab_events_challenge1_b": "Change the speed of the animals by using this block:\n\n<xml>\n  <block type=\"studio_setSpriteSpeed\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">Studio.SpriteSpeed.NORMAL</title>\n  </block></xml>\n",
          "courseB_playlab_events_challenge1_c": "What will the everyone say when the race is over? Make them talk with this event:\n\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_saySpriteChoices\">\n        <title name=\"SPRITE\">2</title>\n        <title name=\"VALUE\">Woo hoo!</title>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseB_playlab_events_challenge1_2018_authored_hint": {
          "courseB_playlab_events_challenge1_a": "Make the other animals move down when you press `▼`. \n\n<xml>\n  <block type=\"studio_whenArrow\" movable=\"false\">\n    <title name=\"VALUE\">down</title>\n  </block>\n</xml>",
          "courseB_playlab_events_challenge1_b": "Change the speed of the animals by using this block:\n\n<xml>\n  <block type=\"studio_setSpriteSpeed\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">Studio.SpriteSpeed.NORMAL</title>\n  </block></xml>\n",
          "courseB_playlab_events_challenge1_c": "What will the everyone say when the race is over? Make them talk with this event:\n\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_saySpriteChoices\">\n        <title name=\"SPRITE\">2</title>\n        <title name=\"VALUE\">Woo hoo!</title>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseB_playlab_events_challenge2_authored_hint": {
          "courseB_playlab_events_challenge2_a": "Each animal in the game should disappear when clicked. It should also come back after a second or two!",
          "courseB_playlab_events_challenge2_b": "Use other event blocks to make the other animals disappear!\n\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">1</title>\n  </block>\n  </xml>",
          "courseB_playlab_events_challenge2_c": "Use extra commands to play sounds or score points when you click the animals!\n\n<xml>\n  <block type=\"studio_playSound\">\n    <title name=\"SOUND\">slap</title>\n  </block>\n  <block type=\"studio_changeScore\"/></xml>",
          "courseB_playlab_events_challenge2_d": "Mix it up!\n\nMake some animals give more points than others.\nUse different sounds.\nChange the animals' moods!"
        },
        "courseB_playlab_events_challenge2_2018_authored_hint": {
          "courseB_playlab_events_challenge2_a": "Each animal in the game should disappear when clicked. It should also come back after a second or two!",
          "courseB_playlab_events_challenge2_b": "Use other event blocks to make the other animals disappear!\n\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">1</title>\n  </block>\n  </xml>",
          "courseB_playlab_events_challenge2_c": "Use extra commands to play sounds or score points when you click the animals!\n\n<xml>\n  <block type=\"studio_playSound\">\n    <title name=\"SOUND\">slap</title>\n  </block>\n  <block type=\"studio_changeScore\"/></xml>",
          "courseB_playlab_events_challenge2_d": "Mix it up!\n\nMake some animals give more points than others.\nUse different sounds.\nChange the animals' moods!"
        },
        "courseB_playlab_events_challenge2_embed_authored_hint": {
          "courseB_playlab_events_challenge2_a": "Each animal in the game should vanish when tapped. It should also come back after a second or two!",
          "courseB_playlab_events_challenge2_b": "Use other event blocks to make the other animals disappear!\n\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">1</title>\n  </block>\n  </xml>",
          "courseB_playlab_events_challenge2_c": "Use extra commands to play sounds or score points when you click the animals!\n\n<xml>\n  <block type=\"studio_playSound\">\n    <title name=\"SOUND\">slap</title>\n  </block>\n  <block type=\"studio_changeScore\"/></xml>",
          "courseB_playlab_events_challenge2_d": "Mix it up!\n\nMake some animals give more points than others.\nUse different sounds.\nChange the animals' moods!"
        },
        "courseB_playlab_events_challenge2_template_authored_hint": {
          "courseB_playlab_events_challenge2_a": "Each animal in the game should vanish when tapped. It should also come back after a second or two!",
          "courseB_playlab_events_challenge2_b": "Use other event blocks to make the other animals disappear!\n\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">1</title>\n  </block>\n  </xml>",
          "courseB_playlab_events_challenge2_c": "Use extra commands to play sounds or score points when you click the animals!\n\n<xml>\n  <block type=\"studio_playSound\">\n    <title name=\"SOUND\">slap</title>\n  </block>\n  <block type=\"studio_changeScore\"/></xml>",
          "courseB_playlab_events_challenge2_d": "Mix it up!\n\nMake some animals give more points than others.\nUse different sounds.\nChange the animals' moods!"
        },
        "courseB_playlab_events_challenge2_template_2018_authored_hint": {
          "courseB_playlab_events_challenge2_a": "Each animal in the game should vanish when tapped. It should also come back after a second or two!",
          "courseB_playlab_events_challenge2_b": "Use other event blocks to make the other animals disappear!\n\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">1</title>\n  </block>\n  </xml>",
          "courseB_playlab_events_challenge2_c": "Use extra commands to play sounds or score points when you click the animals!\n\n<xml>\n  <block type=\"studio_playSound\">\n    <title name=\"SOUND\">slap</title>\n  </block>\n  <block type=\"studio_changeScore\"/></xml>",
          "courseB_playlab_events_challenge2_d": "Mix it up!\n\nMake some animals give more points than others.\nUse different sounds.\nChange the animals' moods!"
        },
        "courseB_starWars_prog1_authored_hint": {
          "courseB_starWars_prog1_a": "Try adding blocks one at a time, then click \"Run\" to see what happens.",
          "courseB_starWars_prog1_b": "You will want to move East to solve this puzzle. How far do you need to move?\n\n<xml><block type=\"studio_moveEast\"/></xml>\n"
        },
        "courseB_starWars_prog1_2018_authored_hint": {
          "courseB_starWars_prog1_a": "Try adding blocks one at a time, then click \"Run\" to see what happens.",
          "courseB_starWars_prog1_b": "You will want to move East to solve this puzzle. How far do you need to move?\n\n<xml><block type=\"studio_moveEast\"/></xml>\n"
        },
        "courseB_starWars_prog2_authored_hint": {
          "courseB_starWars_prog2_a": "Split this problem into two parts. Get one one pile of scrap metal, then figure out how to get to the other one."
        },
        "courseB_starWars_prog2_2018_authored_hint": {
          "courseB_starWars_prog2_a": "Split this problem into two parts. Get one one pile of scrap metal, then figure out how to get to the other one."
        },
        "courseB_starWars_prog3_authored_hint": {
          "courseB_starWars_prog3_a": "You will need to move 3 ways to solve this puzzle.",
          "courseB_starWars_prog3_b": "Build one piece of code at a time. Run it to figure out where to go from there."
        },
        "courseB_starWars_prog3_2018_authored_hint": {
          "courseB_starWars_prog3_a": "You will need to move 3 ways to solve this puzzle.",
          "courseB_starWars_prog3_b": "Build one piece of code at a time. Run it to figure out where to go from there."
        },
        "courseB_starWars_prog4_authored_hint": {
          "courseB_starWars_prog4_a": "Build one piece of code at a time. Run it to figure out where to go from there.",
          "courseB_starWars_prog4_b": "Try using the `repeat` block for shorter code.\n\n<xml>  <block type=\"controls_repeat_simplified\">\n    <title name=\"TIMES\">3</title>\n  </block>\n</xml>"
        },
        "courseB_starWars_prog4_2018_authored_hint": {
          "courseB_starWars_prog4_a": "Build one piece of code at a time. Run it to figure out where to go from there.",
          "courseB_starWars_prog4_b": "Try using the `repeat` block for shorter code.\n\n<xml>  <block type=\"controls_repeat_simplified\">\n    <title name=\"TIMES\">3</title>\n  </block>\n</xml>"
        },
        "courseB_starWars_prog5_authored_hint": {
          "courseB_starWars_prog5_a": "Doesn't this pattern look a little like the last puzzle?",
          "courseB_starWars_prog5_b": "BB-8 will grab the scrap metal as he rolls over it.",
          "courseB_starWars_prog5_c": "Trace this pattern with your finger. Count the pieces of metal as you move.",
          "courseB_starWars_prog5_da": "Look what happens if you use the same solution as the stair-step puzzle:\n\n![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)"
        },
        "courseB_starWars_prog5_2018_authored_hint": {
          "courseB_starWars_prog5_a": "Doesn't this pattern look a little like the last puzzle?",
          "courseB_starWars_prog5_b": "BB-8 will grab the scrap metal as he rolls over it.",
          "courseB_starWars_prog5_c": "Trace this pattern with your finger. Count the pieces of metal as you move.",
          "courseB_starWars_prog5_da": "Look what happens if you use the same solution as the stair-step puzzle:\n\n![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)"
        },
        "courseB_starWars_prog6_authored_hint": {
          "courseB_starWars_prog6_a": "This pattern is just a stair step with two moves per direction!",
          "courseB_starWars_prog6_b": "Try using the `repeat` block for shorter code.\n\n<xml>  <block type=\"controls_repeat_simplified\">\n    <title name=\"TIMES\">3</title>\n  </block>\n</xml>"
        },
        "courseB_starWars_prog6_2018_authored_hint": {
          "courseB_starWars_prog6_a": "This pattern is just a stair step with two moves per direction!",
          "courseB_starWars_prog6_b": "Try using the `repeat` block for shorter code.\n\n<xml>  <block type=\"controls_repeat_simplified\">\n    <title name=\"TIMES\">3</title>\n  </block>\n</xml>"
        },
        "courseB_starWars_prog7_authored_hint": {
          "courseB_starWars_prog7_a": "Doesn't this pattern look a little like the last puzzle?",
          "courseB_starWars_prog7_b": "BB-8 will grab the scrap metal as he rolls over it.",
          "courseB_starWars_prog7_c": "Try drawing the large stair step pattern over this puzzle. Does it cover all of the scrap metal?"
        },
        "courseB_starWars_prog7_2018_authored_hint": {
          "courseB_starWars_prog7_a": "Doesn't this pattern look a little like the last puzzle?",
          "courseB_starWars_prog7_b": "BB-8 will grab the scrap metal as he rolls over it.",
          "courseB_starWars_prog7_c": "Try drawing the large stair step pattern over this puzzle. Does it cover all of the scrap metal?"
        },
        "courseB_starWars_prog8_authored_hint": {
          "courseB_starWars_prog8_a": "It is okay to go back over a set of spaces where you have already traveled.",
          "courseB_starWars_prog8_b": "Try using the `repeat` block to see what happens to the code that you put inside.\n\n<xml>\n  <block type=\"controls_repeat_simplified\">\n    <title name=\"TIMES\">3</title>\n  </block>\n</xml>"
        },
        "courseB_starWars_prog8_2018_authored_hint": {
          "courseB_starWars_prog8_a": "It is okay to go back over a set of spaces where you have already traveled.",
          "courseB_starWars_prog8_b": "Try using the `repeat` block to see what happens to the code that you put inside.\n\n<xml>\n  <block type=\"controls_repeat_simplified\">\n    <title name=\"TIMES\">3</title>\n  </block>\n</xml>"
        },
        "courseB_starWars_prog9_authored_hint": {
          "courseB_starWars_prog9_a": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.",
          "courseB_starWars_prog9_b": "There are many ways to solve this puzzle.",
          "courseB_starWars_prog9_c": "Could a `repeat` loop help out here?"
        },
        "courseB_starWars_prog9_2018_authored_hint": {
          "courseB_starWars_prog9_a": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.",
          "courseB_starWars_prog9_b": "There are many ways to solve this puzzle.",
          "courseB_starWars_prog9_c": "Could a `repeat` <xml><block type=\"controls_repeat_simplified\">\n    <title name=\"TIMES\">3</title>\n  </block></xml>loop help out here?"
        },
        "courseC_PlayLab_events1_authored_hint": {
          "courseC_PlayLab_events1_a": "Attach this block to the `when run` block:\n\n<xml>\n  <block type=\"studio_saySpriteChoices\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">Hi there.</title>\n  </block>\n</xml>"
        },
        "courseC_PlayLab_events1_2018_authored_hint": {
          "courseC_PlayLab_events1_a": "Attach this block to the `when run` block:\n\n<xml>\n  <block type=\"studio_saySpriteChoices\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">Hi there.</title>\n  </block>\n</xml>"
        },
        "courseC_PlayLab_events2_authored_hint": {
          "courseC_PlayLab_events2_a": "Attach two of these blocks to the `when run` block:\n\n<xml>\n  <block type=\"studio_saySpriteChoices\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">Hi there.</title>\n  </block>\n</xml>",
          "courseC_PlayLab_events2_b": "Use the dropdown menu on the second `actor __ say` block to change which actor speaks."
        },
        "courseC_PlayLab_events2_2018_authored_hint": {
          "courseC_PlayLab_events2_a": "Attach two of these blocks to the `when run` block:\n\n<xml>\n  <block type=\"studio_saySpriteChoices\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">Hi there.</title>\n  </block>\n</xml>",
          "courseC_PlayLab_events2_b": "Use the dropdown menu on the second `actor __ say` block to change which actor speaks."
        },
        "courseC_PlayLab_events3_authored_hint": {
          "courseC_PlayLab_events3_a": "You only need to move Jorge to the right by about 25 pixels to solve this puzzle.",
          "courseC_PlayLab_events3_b": "Is there a block in the toolbox that looks like it would move an actor?",
          "courseC_PlayLab_events3_c": "Attach this block to the `when run` block:\n\n<xml>\n<block type=\"studio_moveDistance\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"DIR\">2</title>\n    <title name=\"DISTANCE\">25</title>\n  </block>\n</xml>"
        },
        "courseC_PlayLab_events3_2018_authored_hint": {
          "courseC_PlayLab_events3_a": "You only need to move Jorge to the right by about 25 pixels to solve this puzzle.",
          "courseC_PlayLab_events3_b": "Is there a block in the toolbox that looks like it would move an actor?",
          "courseC_PlayLab_events3_c": "Attach this block to the `when run` block:\n\n<xml>\n<block type=\"studio_moveDistance\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"DIR\">2</title>\n    <title name=\"DISTANCE\">25</title>\n  </block>\n</xml>"
        },
        "courseC_PlayLab_events4_authored_hint": {
          "courseC_PlayLab_events4_b": "When the \"Run\" button is clicked, Jorge needs to move right **100** pixels to reach Olive the Cat.",
          "courseC_PlayLab_events4_a": "You will need to attach an `actor __ say` block to the `when actor touches` event to solve this puzzle."
        },
        "courseC_PlayLab_events4_2018_authored_hint": {
          "courseC_PlayLab_events4_b": "When the \"Run\" button is clicked, Jorge needs to move right **100** pixels to reach Olive the Cat.",
          "courseC_PlayLab_events4_a": "You will need to attach an `actor __ say` block to the `when actor touches` event to solve this puzzle."
        },
        "courseC_PlayLab_events5_authored_hint": {
          "courseC_PlayLab_events5_a": "You will need to click the dropdown menu in the `actor say` block to find the text \"What's new?\"",
          "courseC_PlayLab_events5_b": "Click on Octavia when you run your program to check that it works!"
        },
        "courseC_PlayLab_events5_2018_authored_hint": {
          "courseC_PlayLab_events5_a": "You will need to click the dropdown menu in the `actor say` block to find the text \"What's new?\"",
          "courseC_PlayLab_events5_b": "Click on Octavia when you run your program to check that it works!"
        },
        "courseC_PlayLab_events6_authored_hint": {
          "courseC_PlayLab_events6_a": "Each green `when arrow` block should have one action below it.",
          "courseC_PlayLab_events6_b": "Use the drop down menu on the `move actor 1` block to change which direction Waddles moves.",
          "courseC_PlayLab_events6_c": "When you're done, you should be able to move Waddles around using the arrow keys on your computer!"
        },
        "courseC_PlayLab_events6_2018_authored_hint": {
          "courseC_PlayLab_events6_a": "Each green `when arrow` block should have one action below it.",
          "courseC_PlayLab_events6_b": "Use the drop down menu on the `move actor 1` block to change which direction Waddles moves.",
          "courseC_PlayLab_events6_c": "When you're done, you should be able to move Waddles around using the arrow keys on your computer!"
        },
        "courseC_PlayLab_events7_authored_hint": {
          "courseC_PlayLab_events7_a": "Use both the `move actor 2 up 400 pixels` block and the `move actor 2 down 400 pixels` block inside the `repeat forever` loop to solve this puzzle. ",
          "courseC_PlayLab_events7_b": "The `repeat forever` loop does not need to be connected to any other event blocks; it will run on its own."
        },
        "courseC_PlayLab_events7_2018_authored_hint": {
          "courseC_PlayLab_events7_a": "Use both the `move actor 2 up 400 pixels` block and the `move actor 2 down 400 pixels` block inside the `repeat forever` loop to solve this puzzle. ",
          "courseC_PlayLab_events7_b": "The `repeat forever` loop does not need to be connected to any other event blocks; it will run on its own."
        },
        "courseC_PlayLab_events8_authored_hint": {
          "courseC_PlayLab_events8_a": "You will need to connect blocks to the `when actor touches` block to make this happen correctly.",
          "courseC_PlayLab_events8_b": "The `actor say` and `play sound` blocks in the toolbox should help you out!"
        },
        "courseC_PlayLab_events8_2018_authored_hint": {
          "courseC_PlayLab_events8_a": "You will need to connect blocks to the `when actor touches` block to make this happen correctly.",
          "courseC_PlayLab_events8_b": "The `actor say` and `play sound` blocks in the toolbox should help you out!"
        },
        "courseC_PlayLab_events9_authored_hint": {
          "courseC_PlayLab_events9_a": "The `score point` block will help you to solve this puzzle.",
          "courseC_PlayLab_events9_b": "Make sure that your new `when actor touches` block says actor **1** and actor **3**.",
          "courseC_PlayLab_events9_c": "You can have more than one `when actor touches` event in your workspace at the same time, so you don't have to delete the first one!"
        },
        "courseC_PlayLab_events9_2018_authored_hint": {
          "courseC_PlayLab_events9_a": "The `score point` block will help you to solve this puzzle.",
          "courseC_PlayLab_events9_b": "Make sure that your new `when actor touches` block says actor **1** and actor **3**.",
          "courseC_PlayLab_events9_c": "You can have more than one `when actor touches` event in your workspace at the same time, so you don't have to delete the first one!"
        },
        "courseC_PlayLab_eventsA_authored_hint": {
          "courseC_PlayLab_eventsA_a": "Use the `set background` block and the `set actor to a ____ speed` block to solve this puzzle.",
          "courseC_PlayLab_eventsA_b": "You will need to specifically drag a `when run` event block into the workspace to solve this puzzle."
        },
        "courseC_PlayLab_eventsA_2018_authored_hint": {
          "courseC_PlayLab_eventsA_a": "Use the `set background` block and the `set actor to a ____ speed` block to solve this puzzle.",
          "courseC_PlayLab_eventsA_b": "You will need to specifically drag a `when run` event block into the workspace to solve this puzzle."
        },
        "courseC_PlayLab_eventsFP_authored_hint": {
          "idea1": "*Need an idea?*\n\n**Who's there?** Make characters appear with random images, so no one knows who's showing up next.\n\n![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)",
          "idea2": "*Need an idea?*\n\n**Going on an Adventure** - Change the background, then have the characters talk about where they are now.\n\n![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)",
          "idea3": "*Need an idea?*\n\n**Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen."
        },
        "courseC_PlayLab_eventsFP_2018_authored_hint": {
          "idea1": "*Need an idea?*\n\n**Who's there?** Make characters appear with random images, so no one knows who's showing up next.\n\n![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)",
          "idea2": "*Need an idea?*\n\n**Going on an Adventure** - Change the background, then have the characters talk about where they are now.\n\n![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)",
          "idea3": "*Need an idea?*\n\n**Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen."
        },
        "courseC_PlayLab_events_challenge1_authored_hint": {
          "courseC_PlayLab_events_challenge_a": "You can use this block to move actors to different places on the game space.\n\n<xml> <block type=\"studio_setSpritePosition\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">12</title>\n  </block></xml>\n",
          "courseC_PlayLab_events_challenge_b": "Try using `set actor 1 to the middle left position` when it touches either of the other actors. This will reset the game so the player can keep trying!",
          "courseC_PlayLab_events_challenge_c": "You might also want to try changing the speed of the different actors to make the game easier or more challenging!\n\n<xml>  <block type=\"studio_setSpriteSpeed\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">Studio.SpriteSpeed.FAST</title>\n  </block></xml>"
        },
        "courseC_PlayLab_events_challenge1_2018_authored_hint": {
          "courseC_PlayLab_events_challenge_a": "You can use this block to move actors to different places on the game space.\n\n<xml> <block type=\"studio_setSpritePosition\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">12</title>\n  </block></xml>\n",
          "courseC_PlayLab_events_challenge_b": "Try using `set actor 1 to the middle left position` when it touches either of the other actors. This will reset the game so the player can keep trying!",
          "courseC_PlayLab_events_challenge_c": "You might also want to try changing the speed of the different actors to make the game easier or more challenging!\n\n<xml>  <block type=\"studio_setSpriteSpeed\">\n    <title name=\"SPRITE\">0</title>\n    <title name=\"VALUE\">Studio.SpriteSpeed.FAST</title>\n  </block></xml>"
        },
        "courseC_PlayLab_events_challenge1_xy_blocks_authored_hint": {
          "courseC_PlayLab_events_challenge_a": "The two values on this block allow you to move an actor to any pixel in the game area. You can choose any number from 0-400.",
          "courseC_PlayLab_events_challenge_b": "You can decide which numbers to use, by thinking about how far over from the top left corner you'd like to move. The first number is the number of pixels from the left. The second number is the number of pixels from the top.\n\n<xml><block type=\"studio_setSpriteXY\" inline=\"true\">\n    <value name=\"SPRITE\">\n      <block type=\"math_number\" movable=\"false\">\n        <title name=\"NUM\">1</title>\n      </block>\n    </value>\n    <value name=\"XPOS\">\n      <block type=\"math_number\" movable=\"false\">\n        <title name=\"NUM\">37</title>\n      </block>\n    </value>\n    <value name=\"YPOS\">\n      <block type=\"math_number\" movable=\"false\">\n        <title name=\"NUM\">187</title>\n      </block>\n    </value>\n  </block></xml>\n\n![](https://images.code.org/b1559bf476ceb59f880c43271c5e10b2-image-1494111787192.59.49 PM.png)"
        },
        "courseC_artist_loop1_authored_hint": {
          "courseC_artist_loop1_a": "You don't need to make any changes to the loop, just put one block above it.",
          "courseC_artist_loop1_b": "This is the block you will need to set a pattern:\n\n<xml>\n<block type=\"draw_line_style_pattern\">\n    <title name=\"VALUE\">DEFAULT</title>\n  </block>\n</xml>\n\nChoose any pattern you like!"
        },
        "courseC_artist_loop1_2018_authored_hint": {
          "courseC_artist_loop1_a": "You don't need to make any changes to the loop, just put one block above it.",
          "courseC_artist_loop1_b": "This is the block you will need to set a pattern:\n\n<xml>\n<block type=\"draw_line_style_pattern\">\n    <title name=\"VALUE\">DEFAULT</title>\n  </block>\n</xml>\n\nChoose any pattern you like!"
        },
        "courseC_artist_loops1a_authored_hint": {
          "courseC_artist_loops1a_a": "This is the first block you will need:\n\n<xml>\n<block type=\"jump_to_xy\">\n    <title name=\"XPOS\">200</title>\n    <title name=\"YPOS\">200</title>\n  </block>\n</xml>",
          "courseC_artist_loops1a_b": "Use this block to draw the sticker!\n\n<xml>\n<block type=\"sticker\">\n    <title name=\"VALUE\">Bird</title>\n  </block>\n</xml>"
        },
        "courseC_artist_loops1a_2018_authored_hint": {
          "courseC_artist_loops1a_a": "This is the first block you will need:\n\n<xml>\n<block type=\"jump_to_xy\">\n    <title name=\"XPOS\">200</title>\n    <title name=\"YPOS\">200</title>\n  </block>\n</xml>",
          "courseC_artist_loops1a_b": "Use this block to draw the sticker!\n\n<xml>\n<block type=\"sticker\">\n    <title name=\"VALUE\">Bird</title>\n  </block>\n</xml>"
        },
        "courseC_artist_loops2a_authored_hint": {
          "courseC_artist_loops2a_a": "Inside your loop, you will want to jump to 200 over 200 down, then draw the bird sticker, then turn 30 degrees.",
          "courseC_artist_loops2a_b": "Click on the number at the top of the `repeat` loop to change how many times it repeats."
        },
        "courseC_artist_loops2a_2018_authored_hint": {
          "courseC_artist_loops2a_a": "Inside your loop, you will want to jump to 200 over 200 down, then draw the bird sticker, then turn 30 degrees.",
          "courseC_artist_loops2a_b": "Click on the number at the top of the `repeat` loop to change how many times it repeats."
        },
        "courseC_artist_loops3a_authored_hint": {
          "courseC_artist_loops3a_a": "You will want to add just one block inside of your loop, after the bird sticker.",
          "courseC_artist_loops3a_b": "Use the drop down menu on the `draw sticker` block to find the bat sticker."
        },
        "courseC_artist_loops3a_2018_authored_hint": {
          "courseC_artist_loops3a_a": "You will want to add just one block inside of your loop, after the bird sticker.",
          "courseC_artist_loops3a_b": "Use the drop down menu on the `draw sticker` block to find the bat sticker."
        },
        "courseC_artist_loops4a_authored_hint": {
          "courseC_artist_loops4a_a": "Use this block to jump forward:\n\n<xml>\n<block type=\"jump_by_constant\">\n    <title name=\"DIR\">jumpForward</title>\n    <title name=\"VALUE\">100</title>\n  </block>\n</xml>\n\nDon't forget to change how far!"
        },
        "courseC_artist_loops4a_2018_authored_hint": {
          "courseC_artist_loops4a_a": "Use this block to jump forward:\n\n<xml>\n<block type=\"jump_by_constant\">\n    <title name=\"DIR\">jumpForward</title>\n    <title name=\"VALUE\">100</title>\n  </block>\n</xml>\n\nDon't forget to change how far!"
        },
        "courseC_artist_loops5_authored_hint": {
          "courseC_artist_loops5_a": "Try using the `jump to` block to get your artist back toward the center:\n\n<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">100</title>\n    <title name=\"YPOS\">100</title>\n  </block>\n</xml>"
        },
        "courseC_artist_loops5a_authored_hint": {
          "courseC_artist_loops5a_a": "Use the drop down menus on the `draw sticker` blocks to change their images."
        },
        "courseC_artist_loops5a_2018_authored_hint": {
          "courseC_artist_loops5a_a": "Use the drop down menus on the `draw sticker` blocks to change their images."
        },
        "courseC_artist_loops5b_authored_hint": {
          "courseC_artist_loops5b_a": "Use this block to set the pattern of your lines:\n\n<xml>\n<block type=\"draw_line_style_pattern\">\n    <title name=\"VALUE\">DEFAULT</title>\n  </block>\n</xml>",
          "courseC_artist_loops5b_b": "To make a design like the one above, you will want to move backward the same amount that you move forward."
        },
        "courseC_artist_loops5b_2018_authored_hint": {
          "courseC_artist_loops5b_a": "Use this block to set the pattern of your lines:\n\n<xml>\n<block type=\"draw_line_style_pattern\">\n    <title name=\"VALUE\">DEFAULT</title>\n  </block>\n</xml>",
          "courseC_artist_loops5b_b": "To make a design like the one above, you will want to move backward the same amount that you move forward."
        },
        "courseC_artist_loops6_authored_hint": {
          "courseC_artist_loops6_a": "Try a triangle flower:\n<img src=\"https://images.code.org/4248a974a7631c4240effba06fdee731-image-1495821015097.49.18.png\" width=\"150px\" />\n\nOr a little green bug:\n<img src=\"https://images.code.org/b9454d6f1159e19c58d9f5b5b37fd156-image-1495821067980.52.43.png\" width=\"150px\" />\n"
        },
        "courseC_artist_loops6a_authored_hint": {
          "courseC_artist_loops6a_a": "To make a design like the one above, jump forward less than 75 pixels between each sticker."
        },
        "courseC_artist_loops6a_2018_authored_hint": {
          "courseC_artist_loops6a_a": "To make a design like the one above, jump forward less than 75 pixels between each sticker."
        },
        "courseC_artist_loops7a_authored_hint": {
          "courseC_artist_loops7a_a": "A circle has 360 degrees. Multiply the degrees in your turn times the number of times you repeat. Does it equal 360?\nCheck the suggested rotations to see that this works!"
        },
        "courseC_artist_loops7a_2018_authored_hint": {
          "courseC_artist_loops7a_a": "A circle has 360 degrees. Multiply the degrees in your turn times the number of times you repeat. Does it equal 360?\nCheck the suggested rotations to see that this works!"
        },
        "courseC_artist_loopsPre1a_authored_hint": {
          "courseC_artist_loopsPre1a_a": "Remember to put the `turn` block inside of the loop.",
          "courseC_artist_loopsPre1a_b": "Your `repeat` loop should have 3 blocks inside of it: `jump to 200 over 200 down`, `move forward by 50 pixels`, and `turn right by 60 degrees`."
        },
        "courseC_artist_loopsPre1a_2018_authored_hint": {
          "courseC_artist_loopsPre1a_a": "Remember to put the `turn` block inside of the loop.",
          "courseC_artist_loopsPre1a_b": "Your `repeat` loop should have 3 blocks inside of it: `jump to 200 over 200 down`, `move forward by 50 pixels`, and `turn right by 60 degrees`."
        },
        "courseC_artist_loopsPrePre1a_authored_hint": {
          "courseC_artist_loopsPrePre1a_a": "The first block you will need is:\n\n![](https://images.code.org/60e3354a2e7dd37b64833eac1e8694be-image-1499710228373.08.14 AM.png)",
          "courseC_artist_loopsPrePre1a_b": "To move forward 50 pixels, use this block:\n\n![](https://images.code.org/411fca4606a09641e6eedf5069ac4efa-image-1499710237929.08.27 AM.png)"
        },
        "courseC_artist_loopsPrePre1a_2018_authored_hint": {
          "courseC_artist_loopsPrePre1a_a": "The first block you will need is:\n\n<xml>  <block type=\"jump_to_xy\" id=\"callMe\">\n    <title name=\"XPOS\">200</title>\n    <title name=\"YPOS\">200</title>\n  </block></xml>",
          "courseC_artist_loopsPrePre1a_b": "To move forward 50 pixels, use this block:\n\n<xml><block type=\"draw_move_by_constant\">\n    <title name=\"DIR\">moveForward</title>\n    <title name=\"VALUE\">50</title>\n  </block></xml>"
        },
        "courseC_artist_prog2_authored_hint": {
          "courseC_artist_prog2_a": "*\"If you use the <xml><block type=\"draw_move_by_constant\"><title name=\"DIR\">moveForward</title><title name=\"VALUE\">100</title></block></xml> block, I will draw a line.\"*",
          "courseC_artist_prog2_b": "Having trouble turning the corner? Use the <xml><block type=\"draw_turn_by_constant_dropdown\"><title name=\"DIR\">turnRight</title><title name=\"VALUE\" config=\"45,60,90,120,180\">90</title></block></xml> block."
        },
        "courseC_artist_prog2_2018_authored_hint": {
          "courseC_artist_prog2_a": "*\"If you use the <xml><block type=\"draw_move_by_constant\"><title name=\"DIR\">moveForward</title><title name=\"VALUE\">100</title></block></xml> block, I will draw a line.\"*",
          "courseC_artist_prog2_b": "Having trouble turning the corner? Use the <xml><block type=\"draw_turn_by_constant_dropdown\"><title name=\"DIR\">turnRight</title><title name=\"VALUE\" config=\"45,60,90,120,180\">90</title></block></xml> block."
        },
        "courseC_artist_prog3_authored_hint": {
          "courseC_artist_prog3_a": "To create this window, just draw a square with 100 pixel sides.\n- move forward\n- turn\n- move forward\n- turn\n- move forward\n- turn\n- move forward",
          "courseC_artist_prog3_b": "Want to make shorter code? Try using a loop in this puzzle."
        },
        "courseC_artist_prog3_2018_authored_hint": {
          "courseC_artist_prog3_a": "To create this window, just draw a square with 100 pixel sides.\n- move forward\n- turn\n- move forward\n- turn\n- move forward\n- turn\n- move forward",
          "courseC_artist_prog3_b": "Want to make shorter code? Try using a loop in this puzzle."
        },
        "courseC_artist_prog4_authored_hint": {
          "courseC_artist_prog4_a": "To finish the rocket, just draw the triangle on top!",
          "courseC_artist_prog4_b": "You can use the drop down menu on the `turn` blocks to see which angle you need!",
          "courseC_artist_prog4_c": "To draw a triangle, you will want to:\n- move forward\n- turn left 120 degrees\n- move forward\n- turn left 120 degrees\n- move forward"
        },
        "courseC_artist_prog4_2018_authored_hint": {
          "courseC_artist_prog4_a": "To finish the rocket, just draw the triangle on top!",
          "courseC_artist_prog4_b": "You can use the drop down menu on the `turn` blocks to see which angle you need!",
          "courseC_artist_prog4_c": "To draw a triangle, you will want to:\n- move forward\n- turn left 120 degrees\n- move forward\n- turn left 120 degrees\n- move forward"
        },
        "courseC_artist_prog5_authored_hint": {
          "courseC_artist_prog5_a": "Slow the slider down all the way until you can run your code line-by-line to see where things go wrong.",
          "courseC_artist_prog5_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.",
          "courseC_artist_prog5_c": "You can use the drop down menu on the `turn` blocks to see which angle you need!",
          "courseC_artist_prog5_d": "Each turn should be 90 degrees to the right."
        },
        "courseC_artist_prog5_2018_authored_hint": {
          "courseC_artist_prog5_a": "Slow the slider down all the way until you can run your code line-by-line to see where things go wrong.",
          "courseC_artist_prog5_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.",
          "courseC_artist_prog5_c": "You can use the drop down menus in the blocks to change what they do!",
          "courseC_artist_prog5_d": "Each turn should be 90 degrees to the right."
        },
        "courseC_artist_prog6_authored_hint": {
          "courseC_artist_prog6_a": "The artist is already facing the correct way to draw his first line.",
          "courseC_artist_prog6_b": "This diamond is really just a square that's standing on its corner.",
          "courseC_artist_prog6_c": "Since this diamond is also a square, be sure to turn 90 degrees at the corners."
        },
        "courseC_artist_prog6_2018_authored_hint": {
          "courseC_artist_prog6_a": "The artist is already facing the correct way to draw his first line.",
          "courseC_artist_prog6_b": "This diamond is really just a square that's standing on its corner.",
          "courseC_artist_prog6_c": "Since this diamond is also a square, be sure to turn 90 degrees at the corners."
        },
        "courseC_artist_prog7_authored_hint": {
          "courseC_artist_prog7_a": "Every angle is either 45 or 90 degrees.",
          "courseC_artist_prog7_b": "Does it work at the first step?  \nHow about the second?  \nWhere does it go wrong?",
          "courseC_artist_prog7_c": "You can use the dropdown menu on the turn blocks to see which angle you need!",
          "courseC_artist_prog7_d": "You will want to:\n- move forward\n- turn right 45 degrees\n- move forward\n- turn right 90 degrees\n- move forward\n- turn right 45 degrees\n\nRepeat this pattern 2 times!",
          "courseC_artist_prog7_e": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseC_artist_prog7_2018_authored_hint": {
          "courseC_artist_prog7_a": "Every angle is either 45 or 90 degrees.",
          "courseC_artist_prog7_b": "Does it work at the first step?  \nHow about the second?  \nWhere does it go wrong?",
          "courseC_artist_prog7_c": "You can use the dropdown menu on the turn blocks to see which angle you need!",
          "courseC_artist_prog7_d": "You will want to:\n- move forward\n- turn right 45 degrees\n- move forward\n- turn right 90 degrees\n- move forward\n- turn right 45 degrees\n\nRepeat this pattern 2 times!",
          "courseC_artist_prog7_e": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseC_artist_prog_challenge1-doghouse_authored_hint": {
          "courseC_artist_prog7_a": "Use 60 degree angles to make the roof."
        },
        "courseC_artist_prog_challenge1_authored_hint": {
          "courseC_artist_prog_challenge1_a": "You can draw this as a rectangle with a line in the middle or two different squares!"
        },
        "courseC_artist_prog_challenge1_2018_authored_hint": {
          "courseC_artist_prog_challenge1_a": "You can draw this as a rectangle with a line in the middle or two different squares!"
        },
        "courseC_artist_prog_challenge2_authored_hint": {
          "courseC_artist_prog_challenge2_a": "You can put commands inside `repeat` block to loop them over and over. Try it!\n\n<xml>\n  \n          <block type=\"controls_repeat\">\n            <title name=\"TIMES\">6</title>\n            <statement name=\"DO\">\n              <block type=\"draw_move_by_constant_dropdown\">\n                <title name=\"DIR\">moveForward</title>\n                <title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n                <next>\n                  <block type=\"jump_by_constant_dropdown\">\n                    <title name=\"DIR\">jumpForward</title>\n                    <title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n                  </block>\n                </next>\n              </block>\n              </statement></block></xml>"
        },
        "courseC_artist_prog_challenge2a_authored_hint": {
          "courseC_artist_prog_challenge2_a": "After you draw the first line, turn left before you draw your second line.",
          "courseC_artist_prog_challenge2_b": "After you draw the second line, turn right before you draw your third line."
        },
        "courseC_artist_prog_challenge2a_2018_authored_hint": {
          "courseC_artist_prog_challenge2_a": "After you draw the first line, turn left before you draw your second line.",
          "courseC_artist_prog_challenge2_b": "After you draw the second line, turn right before you draw your third line."
        },
        "courseC_collector_loops_challenge2_authored_hint": {
          "courseC_maze_loops_challenge2_b": "Use loops so you don't run out of `collect` blocks!"
        },
        "courseC_collector_loops_challenge2_2018_authored_hint": {
          "courseC_maze_loops_challenge2_b": "Use loops so you don't run out of `collect` blocks!"
        },
        "courseC_collector_prog1_authored_hint": {
          "courseC_collector_prog1_a": "When you are standing on a space with treasure, use the <xml><block type=\"collector_collect\"/></xml> block to pick it up.",
          "courseC_collector_prog1_b": "The most simple solution would be to move forward once, then collect treasure."
        },
        "courseC_collector_prog1_2018_authored_hint": {
          "courseC_collector_prog1_a": "When you are standing on a space with treasure, use the <xml><block type=\"collector_collect\"/></xml> block to pick it up.",
          "courseC_collector_prog1_b": "The most simple solution would be to move forward once, then collect treasure."
        },
        "courseC_collector_prog2_authored_hint": {
          "courseC_collector_prog2_a": "You can use four <xml><block type=\"maze_move\"><title name=\"DIR\">moveForward</title></block></xml> blocks or use the <xml><block type=\"controls_repeat_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> block to make your program shorter.",
          "courseC_collector_prog2_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseC_collector_prog2_2018_authored_hint": {
          "courseC_collector_prog2_a": "You can use four <xml><block type=\"maze_move\"><title name=\"DIR\">moveForward</title></block></xml> blocks or use the <xml><block type=\"controls_repeat_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> block to make your program shorter.",
          "courseC_collector_prog2_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseC_collector_prog3_authored_hint": {
          "courseC_collector_prog3_a": "The program will only run the blocks that are connected to the <xml><block type=\"when_run\"/></xml> block.",
          "courseC_collector_prog3_b": "Try using the \"Step\" button to run your code one line at a time.  Do you see where the code goes wrong?",
          "courseC_collector_prog3_c": "If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper."
        },
        "courseC_collector_prog3_2018_authored_hint": {
          "courseC_collector_prog3_a": "The program will only run the blocks that are connected to the <xml><block type=\"when_run\"/></xml> block.",
          "courseC_collector_prog3_b": "Try using the \"Step\" button to run your code one line at a time.  Do you see where the code goes wrong?",
          "courseC_collector_prog3_c": "If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper."
        },
        "courseC_collector_prog4_authored_hint": {
          "courseC_collector_prog4_a": "If you get stuck, try writing out the steps on a piece of paper.",
          "courseC_collector_prog4_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.",
          "courseC_collector_prog4_c": "Try this option for a path."
        },
        "courseC_collector_prog4_2018_authored_hint": {
          "courseC_collector_prog4_a": "If you get stuck, try writing out the steps on a piece of paper.",
          "courseC_collector_prog4_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.",
          "courseC_collector_prog4_c": "Try this option for a path."
        },
        "courseC_collector_prog5_authored_hint": {
          "courseC_collector_prog5_a": "\"Does it work at the first step?\nDoes it work at the second step? \nWhere do things go wrong?\"",
          "courseC_collector_prog5_b": "If you fixed one bug and the program still doesn't work, use the steps above to find more bugs.",
          "courseC_collector_prog5_c": "If you get stuck, try writing out the steps on a piece of paper.",
          "courseC_collector_prog5_d": "Follow the path to collect the treasure."
        },
        "courseC_collector_prog5_2018_authored_hint": {
          "courseC_collector_prog5_a": "\"Does it work at the first step?\nDoes it work at the second step? \nWhere do things go wrong?\"",
          "courseC_collector_prog5_b": "If you fixed one bug and the program still doesn't work, use the steps above to find more bugs.",
          "courseC_collector_prog5_c": "If you get stuck, try writing out the steps on a piece of paper.",
          "courseC_collector_prog5_d": "Follow the path to collect the treasure."
        },
        "courseC_collector_prog6_authored_hint": {
          "courseC_collector_prog6_a": "Can you figure out what is going wrong?  \n\nTry using the \"Step\" button to find errors by running your code line by line.",
          "courseC_collector_prog6_b": "Stuck?  Try this path to collect the treasure."
        },
        "courseC_collector_prog6_2018_authored_hint": {
          "courseC_collector_prog6_a": "Can you figure out what is going wrong?  \n\nTry using the \"Step\" button to find errors by running your code line by line.",
          "courseC_collector_prog6_b": "Stuck?  Try this path to collect the treasure."
        },
        "courseC_collector_prog7_authored_hint": {
          "courseC_collector_prog7_a": "There is already a lot of great code in the workspace.  You don't need to delete any of it to solve this puzzle.  ",
          "courseC_collector_prog7_b": "Don't see the block you need to get the adventurer moving in the right direction?  Pull one from the toolbox.",
          "courseC_collector_prog7_c": "Having trouble seeing a route to collect all of the treasure?  Try this path!"
        },
        "courseC_collector_prog7_2018_authored_hint": {
          "courseC_collector_prog7_a": "There is already a lot of great code in the workspace.  You don't need to delete any of it to solve this puzzle.  ",
          "courseC_collector_prog7_b": "Don't see the block you need to get the adventurer moving in the right direction?  Pull one from the toolbox.",
          "courseC_collector_prog7_c": "Having trouble seeing a route to collect all of the treasure?  Try this path!"
        },
        "courseC_collector_progA_authored_hint": {
          "courseC_collector_progA_a": "Try using the \"Step\" button to go through your code line by line."
        },
        "courseC_collector_prog_challenge1_authored_hint": {
          "courseC_collector_prog_challenge1_a": "You can use the `collect` block many times to collect the extra treasure."
        },
        "courseC_collector_prog_challenge1_2018_authored_hint": {
          "courseC_collector_prog_challenge1_a": "You can use the `collect` block many times to collect the extra treasure."
        },
        "courseC_collector_prog_challenge2_authored_hint": {
          "courseC_collector_prog_challenge1_a": "You can use more than one `collect` block at each space.",
          "courseC_collector_prog_challenge1_b": "Lost your way?  Try this path to solve the puzzle!"
        },
        "courseC_collector_prog_challenge2_2018_authored_hint": {
          "courseC_collector_prog_challenge1_a": "You can use more than one `collect` block at each space.",
          "courseC_collector_prog_challenge1_b": "Lost your way?  Try this path to solve the puzzle!"
        },
        "courseC_flappy_events1_authored_hint": {
          "courseC_flappy_events1_a": "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
        },
        "courseC_flappy_events1_2018_authored_hint": {
          "courseC_flappy_events1_a": "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
        },
        "courseC_flappy_events2_authored_hint": {
          "courseC_flappy_events2_a": "The block you need to add is called `set speed`. ",
          "courseC_flappy_events2_b": "Connect the `set speed` block to the `when run` block to solve this puzzle."
        },
        "courseC_flappy_events2_2018_authored_hint": {
          "courseC_flappy_events2_a": "The block you need to add is called `set speed`. ",
          "courseC_flappy_events2_b": "Connect the `set speed` block to the `when run` block to solve this puzzle."
        },
        "courseC_flappy_events3_authored_hint": {
          "courseC_flappy_events3_a": "If something isn't working correctly, make sure your blocks are connected to the correct events in the workspace."
        },
        "courseC_flappy_events3_2018_authored_hint": {
          "courseC_flappy_events3_a": "If something isn't working correctly, make sure your blocks are connected to the correct events in the workspace."
        },
        "courseC_flappy_events4_authored_hint": {
          "courseC_flappy_events4_a": "Connect the `end game` block to `when hit an obstacle` to solve this puzzle."
        },
        "courseC_flappy_events4_2018_authored_hint": {
          "courseC_flappy_events4_a": "Connect the `end game` block to `when hit an obstacle` to solve this puzzle."
        },
        "courseC_flappy_events5_authored_hint": {
          "courseC_flappy_events5_a": "You will need to use the `score a point` block to pass this level."
        },
        "courseC_flappy_events5_2018_authored_hint": {
          "courseC_flappy_events5_a": "You will need to use the `score a point` block to pass this level."
        },
        "courseC_flappy_events6_authored_hint": {
          "courseC_flappy_events6_a": "Try connecting the `flap a ____ amount` block to the `when click` event."
        },
        "courseC_flappy_events6_2018_authored_hint": {
          "courseC_flappy_events6_a": "Try connecting the `flap a ____ amount` block to the `when click` event."
        },
        "courseC_flappy_events7_authored_hint": {
          "courseC_flappy_events7_a": "You can change the background using the `set scene` block. "
        },
        "courseC_flappy_events7_2018_authored_hint": {
          "courseC_flappy_events7_a": "You can change the background using the `set scene` block. "
        },
        "courseC_flappy_events8_authored_hint": {
          "courseC_flappy_events8_a": "Try connecting a second `set scene` block under the `when pass obstacle` event to pass this level."
        },
        "courseC_flappy_events8_2018_authored_hint": {
          "courseC_flappy_events8_a": "Try connecting a second `set scene` block under the `when pass obstacle` event to pass this level."
        },
        "courseC_flappy_events9_authored_hint": {
          "courseC_flappy_events9_a": "Connect the `set score 0` block to the `when hit an obstacle` event to pass this level."
        },
        "courseC_flappy_events9_2018_authored_hint": {
          "courseC_flappy_events9_a": "Connect the `set score 0` block to the `when hit an obstacle` event to pass this level."
        },
        "courseC_harvester_loops1_authored_hint": {
          "courseC_harvester_loops1_a": "Once you have moved to a pumpkin, use <xml><block type=\"harvester_pumpkin\"/></xml> to collect it.",
          "courseC_harvester_loops1_b": "You can use a loop with the <xml><block type=\"harvester_pumpkin\"/></xml> block to pick more than one pumpkin from a square."
        },
        "courseC_harvester_loops1_2018_authored_hint": {
          "courseC_harvester_loops1_a": "Once you have moved to a pumpkin, use <xml><block type=\"harvester_pumpkin\"/></xml> to collect it.",
          "courseC_harvester_loops1_b": "You can use a loop with the <xml><block type=\"harvester_pumpkin\"/></xml> block to pick more than one pumpkin from a square."
        },
        "courseC_harvester_loops2_authored_hint": {
          "courseC_harvester_loops2_a": "If you get stuck, try writing the steps on paper and looking for repeating patterns.",
          "courseC_harvester_loops2_b": "You will need one `repeat` loop after another.",
          "courseC_harvester_loops2_c": "One loop will repeat the `move forward` command, and the other will repeat the `pick pumpkin` command."
        },
        "courseC_harvester_loops2_2018_authored_hint": {
          "courseC_harvester_loops2_a": "If you get stuck, try writing the steps on paper and looking for repeating patterns.",
          "courseC_harvester_loops2_b": "You will need one `repeat` loop after another.",
          "courseC_harvester_loops2_c": "One loop will repeat the `move forward` command, and the other will repeat the `pick pumpkin` command."
        },
        "courseC_harvester_loops3_authored_hint": {
          "courseC_harvester_loops3_a": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.",
          "courseC_harvester_loops3_b": "For the first pumpkins, you can use code very similar to the last puzzle. Which way do you need to turn afterwards?",
          "courseC_harvester_loops3_c": "If you want to simplify your code, you can actually put one loop inside of another! This is called a **nested loop**."
        },
        "courseC_harvester_loops3_2018_authored_hint": {
          "courseC_harvester_loops3_a": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.",
          "courseC_harvester_loops3_b": "For the first pumpkins, you can use code very similar to the last puzzle. Which way do you need to turn afterwards?",
          "courseC_harvester_loops3_c": "If you want to simplify your code, you can actually put one loop inside of another! This is called a **nested loop**."
        },
        "courseC_harvester_loops4_authored_hint": {
          "courseC_harvester_loops4_a": "Use the new `pick corn` block to collect the corn.",
          "courseC_harvester_loops4_b": "You can use multiple repeat loops in your code, some to pick corn and some to pick pumpkins.",
          "courseC_harvester_loops4_c": "If you want to simplify your code, you can actually put one loop inside of another! This is called a **nested loop**."
        },
        "courseC_harvester_loops4_2018_authored_hint": {
          "courseC_harvester_loops4_a": "Use the new `pick corn` block to collect the corn.",
          "courseC_harvester_loops4_b": "You can use multiple repeat loops in your code, some to pick corn and some to pick pumpkins.",
          "courseC_harvester_loops4_c": "If you want to simplify your code, you can actually put one loop inside of another! This is called a **nested loop**."
        },
        "courseC_harvester_loops5_authored_hint": {
          "courseC_harvester_loops5_a": "If you get stuck, try drawing the entire program and then looking for repeating patterns.",
          "courseC_harvester_loops5_b": "Does this stair step look familiar from other puzzles? The movements should be similar, just remember to collect crops along the way."
        },
        "courseC_harvester_loops5_2018_authored_hint": {
          "courseC_harvester_loops5_a": "If you get stuck, try drawing the entire program and then looking for repeating patterns.",
          "courseC_harvester_loops5_b": "Does this stair step look familiar from other puzzles? The movements should be similar, just remember to collect crops along the way."
        },
        "courseC_harvester_loops6_authored_hint": {
          "courseC_harvester_loops6_a": "Remember you can put multiple blocks in one repeat loop.",
          "courseC_harvester_loops6_b": "Don’t forget to turn at the end of the row of corn."
        },
        "courseC_harvester_loops6_2018_authored_hint": {
          "courseC_harvester_loops6_a": "Remember you can put multiple blocks in one repeat loop.",
          "courseC_harvester_loops6_b": "Don’t forget to turn at the end of the row of corn."
        },
        "courseC_harvester_loops7_authored_hint": {
          "courseC_harvester_loops7_a": "You can solve this puzzle two ways, either get the corn or the pumpkins first.",
          "courseC_harvester_loops7_b": "You will need multiple `repeat` loops to solve this puzzle."
        },
        "courseC_harvester_loops7_2018_authored_hint": {
          "courseC_harvester_loops7_a": "You can solve this puzzle two ways, either get the corn or the pumpkins first.",
          "courseC_harvester_loops7_b": "You will need multiple `repeat` loops to solve this puzzle."
        },
        "courseC_harvester_loops8_authored_hint": {
          "courseC_harvester_loops8_a": "Does this stair step look familiar from the previous puzzle? The movements should be similar, just remember to collect crops along the way.",
          "courseC_harvester_loops8_b": "If you want to simplify your code more, you can actually put one `repeat` loop inside of another! This is called a **nested loop**."
        },
        "courseC_harvester_loops8_2018_authored_hint": {
          "courseC_harvester_loops8_a": "Does this stair step look familiar from the previous puzzle? The movements should be similar, just remember to collect crops along the way.",
          "courseC_harvester_loops8_b": "If you want to simplify your code more, you can actually put one `repeat` loop inside of another! This is called a **nested loop**."
        },
        "courseC_harvester_loops_challenge1_authored_hint": {
          "courseC_harvester_loops_challenge1_a": "This is too hard without loops!",
          "courseC_harvester_loops_challenge1_b": "You can repeat `move forward` and `pick corn` as many times as you need, then turn right at each corner.",
          "courseC_harvester_loops_challenge1_c": "The best way to collect the first four corn uses a `repeat` block inside of another `repeat` block. You can use this pattern for the rest of the puzzle too!\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat\">\n        <title name=\"TIMES\">2</title>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat\">\n            <title name=\"TIMES\">2</title>\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"harvester_corn\"/>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n              </block>\n            </next>\n          </block>\n        </statement>\n        </block></next></block></xml>"
        },
        "courseC_harvester_loops_challenge1a_authored_hint": {
          "courseC_harvester_loops_challenge1_a": "This is too hard without loops!",
          "courseC_harvester_loops_challenge1_b": "You can repeat `move forward` and `pick corn` as many times as you need, then `turn right` at each corner.",
          "courseC_harvester_loops_challenge1_c": "The best way to collect the corn in the middle uses a `repeat` block inside of another `repeat` block.\n\n<xml><block type=\"controls_repeat\">\n        <title name=\"TIMES\">2</title>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat\">\n            <title name=\"TIMES\">4</title>\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"harvester_corn\"/>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n              </block>\n            </next>\n          </block>\n        </statement>\n        </block></xml>"
        },
        "courseC_harvester_loops_challenge1a_2018_authored_hint": {
          "courseC_harvester_loops_challenge1_a": "This is too hard without loops!",
          "courseC_harvester_loops_challenge1_b": "You can repeat `move forward` and `pick corn` as many times as you need, then `turn right` at each corner.",
          "courseC_harvester_loops_challenge1_c": "The best way to collect the corn in the middle uses a `repeat` block inside of another `repeat` block.\n\n<xml><block type=\"controls_repeat\">\n        <title name=\"TIMES\">2</title>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat\">\n            <title name=\"TIMES\">4</title>\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"harvester_corn\"/>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n              </block>\n            </next>\n          </block>\n        </statement>\n        </block></xml>"
        },
        "courseC_harvester_loops_challenge2_authored_hint": {
          "courseC_harvester_loops_challenge2_a": "One way to solve this looks like a zig-zag. Another way looks like a spiral! There are lots of different solutions to a puzzle like this. Be persistent!",
          "courseC_harvester_loops_challenge2_b": "You can repeat `move forward` and `pick lettuce` as many times as you need to, then turn at each corner.",
          "courseC_harvester_loops_challenge2_c": "This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!\n\n![](https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png)\n",
          "courseC_harvester_loops_challenge2_d": "This spiral pattern can be coded with just 18 blocks!\n\n![](https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png)"
        },
        "courseC_harvester_loops_challenge2_2018_authored_hint": {
          "courseC_harvester_loops_challenge2_a": "One way to solve this looks like a zig-zag. Another way looks like a spiral! There are lots of different solutions to a puzzle like this. Be persistent!",
          "courseC_harvester_loops_challenge2_b": "You can repeat `move forward` and `pick lettuce` as many times as you need to, then turn at each corner.",
          "courseC_harvester_loops_challenge2_c": "This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!\n\n![](https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png)\n",
          "courseC_harvester_loops_challenge2_d": "This spiral pattern can be coded with just 18 blocks!\n\n![](https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png)"
        },
        "courseC_maze_debugging1_authored_hint": {
          "courseC_maze_debugging1_a": "- Does everything work after the first step?\n- Does it still work after the second?\n- Where does it go wrong?",
          "courseC_maze_debugging1_b": "There is 1 block you need to add to complete this puzzle."
        },
        "courseC_maze_debugging1_2018_authored_hint": {
          "courseC_maze_debugging1_a": "- Does everything work after the first step?\n- Does it still work after the second?\n- Where does it go wrong?",
          "courseC_maze_debugging1_b": "There is 1 block you need to add to complete this puzzle."
        },
        "courseC_maze_debugging2_authored_hint": {
          "courseC_maze_debugging2_a": "There is a lot of valuable code in the workspace.  Don't just delete it all and start over!",
          "courseC_maze_debugging2_b": "- Does everything work after the first step?\n- Does it still work after the second?\n- Where does it go wrong?",
          "courseC_maze_debugging2_c": "Can't figure out what's wrong? Try running the code a couple of times to see what happens."
        },
        "courseC_maze_debugging2_2018_authored_hint": {
          "courseC_maze_debugging2_a": "There is a lot of valuable code in the workspace.  Don't just delete it all and start over!",
          "courseC_maze_debugging2_b": "- Does everything work after the first step?\n- Does it still work after the second?\n- Where does it go wrong?",
          "courseC_maze_debugging2_c": "Can't figure out what's wrong? Try running the code a couple of times to see what happens."
        },
        "courseC_maze_debugging3_authored_hint": {
          "courseC_maze_debugging3_a": "To delete a block from the middle of your code, drag all of the blocks to another part of the workspace.\n\nDrag the block you want to delete back to the toolbox.\n\nFinally, put your other blocks back where they belong.\n\n![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)",
          "courseC_maze_debugging3_b": "Can't figure out what's wrong? Try running the code a couple of times to see what happens."
        },
        "courseC_maze_debugging3_2018_authored_hint": {
          "courseC_maze_debugging3_a": "To delete a block from the middle of your code, drag all of the blocks to another part of the workspace.\n\nDrag the block you want to delete back to the toolbox.\n\nFinally, put your other blocks back where they belong.\n\n![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)",
          "courseC_maze_debugging3_b": "Can't figure out what's wrong? Try running the code a couple of times to see what happens."
        },
        "courseC_maze_debugging4_authored_hint": {
          "courseC_maze_debugging4_a": "Use the \"Step\" button to run through the instructions one at a time.  Does that help you find the line where things go wrong?",
          "courseC_maze_debugging4_b": "One of the turns is making Scrat go in the wrong direction. Can you figure out which one?"
        },
        "courseC_maze_debugging4_2018_authored_hint": {
          "courseC_maze_debugging4_a": "Use the \"Step\" button to run through the instructions one at a time.  Does that help you find the line where things go wrong?",
          "courseC_maze_debugging4_b": "One of the turns is making Scrat go in the wrong direction. Can you figure out which one?"
        },
        "courseC_maze_debugging5_authored_hint": {
          "courseC_maze_debugging5_a": "There are lots of helpful blocks in the workspace already.  Don't delete them all! \n\nUse the \"Step\" button to go through and figure out where the code goes wrong.",
          "courseC_maze_debugging5_b": "Try saying what Scrat should do out loud.  Is it the same as the code in the workspace?  What goes wrong?"
        },
        "courseC_maze_debugging5_2018_authored_hint": {
          "courseC_maze_debugging5_a": "There are lots of helpful blocks in the workspace already.  Don't delete them all! \n\nUse the \"Step\" button to go through and figure out where the code goes wrong.",
          "courseC_maze_debugging5_c": "You can change the direction of the turn block by clicking on the dropdown.",
          "courseC_maze_debugging5_b": "Try saying what Scrat should do out loud.  Is it the same as the code in the workspace?  What goes wrong?"
        },
        "courseC_maze_debugging6_authored_hint": {
          "courseC_maze_debugging6_a": "- What is Scrat supposed to do?\n- What does Scrat do?\n- What does that tell you?",
          "courseC_maze_debugging6_b": "Once you've found and fixed the first bug, go through the debugging process again to find the second one.\n\nRepeat the process until the program works!"
        },
        "courseC_maze_debugging6_2018_authored_hint": {
          "courseC_maze_debugging6_a": "- What is Scrat supposed to do?\n- What does Scrat do?\n- What does that tell you?",
          "courseC_maze_debugging6_b": "Once you've found and fixed the first bug, go through the debugging process again to find the second one.\n\nRepeat the process until the program works!"
        },
        "courseC_maze_debugging7_authored_hint": {
          "courseC_maze_debugging7_a": "- Does everything work at the first step?\n- How about the second step?\n- Where does it go wrong?",
          "courseC_maze_debugging7_b": "Don't forget to use the \"Step\" button to run the program line by line!",
          "courseC_maze_debugging7_c": "After you find and fix the first bug, make sure to use the debugging process again to find the next one.\n\nRepeat the debugging process until the program works!"
        },
        "courseC_maze_debugging7_2018_authored_hint": {
          "courseC_maze_debugging7_a": "- Does everything work at the first step?\n- How about the second step?\n- Where does it go wrong?",
          "courseC_maze_debugging7_b": "Don't forget to use the \"Step\" button to run the program line by line!",
          "courseC_maze_debugging7_c": "After you find and fix the first bug, make sure to use the debugging process again to find the next one.\n\nRepeat the debugging process until the program works!"
        },
        "courseC_maze_debugging8_authored_hint": {
          "courseC_maze_debugging8_a": "- What is Scrat supposed to do?\n- What does Scrat do?\n- What does that tell you?"
        },
        "courseC_maze_debugging_challenge1_authored_hint": {
          "courseC_maze_debugging_challenge1_a": "Left or right? It's up to you!",
          "courseC_maze_debugging_challenge1_b": "Scrat's path is the shape of a rectangle! He needs to turn the same way each time.",
          "courseC_maze_debugging_challenge1_c": "If you are getting stuck, you can always start over and find a new way!"
        },
        "courseC_maze_debugging_challenge1_2018_authored_hint": {
          "courseC_maze_debugging_challenge1_a": "Left or right? It's up to you!",
          "courseC_maze_debugging_challenge1_b": "Scrat's path is the shape of a rectangle! He needs to turn the same way each time.",
          "courseC_maze_debugging_challenge1_c": "If you are getting stuck, you can always start over and find a new way!"
        },
        "courseC_maze_debugging_challenge2_authored_hint": {
          "courseC_maze_debugging_challenge2_b": "If you are getting stuck, try debugging the code.  Where does it go wrong?",
          "courseC_maze_debugging_challenge2_c": "There are two different paths you can follow by just moving forward and turning four times. If you find one way to use a loop, there may be even more!\n\n![](https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png)"
        },
        "courseC_maze_debugging_challenge2_2018_authored_hint": {
          "courseC_maze_debugging_challenge2_b": "If you are getting stuck, try debugging the code.  Where does it go wrong?",
          "courseC_maze_debugging_challenge2_c": "There are two different paths you can follow by just moving forward and turning four times. If you find one way to use a loop, there may be even more!\n\n![](https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png)"
        },
        "courseC_maze_loops2_authored_hint": {
          "courseC_maze_loops2_a": "You can solve this puzzle with just three blocks, including `when run`.",
          "courseC_maze_loops2_b": "Try putting the `move forward` block inside of a `repeat` block to create a loop.",
          "courseC_maze_loops2_c": "You need to repeat the `move forward` command 5 times to solve this puzzle."
        },
        "courseC_maze_loops2_predict1_authored_hint": {
          "courseC_maze_loops2_a": "You can solve this puzzle with just three blocks, including `when run`.",
          "courseC_maze_loops2_b": "Try putting the `move forward` block inside of a `repeat` block to create a loop.",
          "courseC_maze_loops2_c": "You need to repeat the `move forward` command 5 times to solve this puzzle."
        },
        "courseC_maze_loops3_authored_hint": {
          "courseC_maze_loops3_a": "This puzzle is very similar to the last one.",
          "courseC_maze_loops3_b": "Use a `repeat 5 times` block to create the loop."
        },
        "courseC_maze_loops4_authored_hint": {
          "courseC_maze_loops4_a": "Not all command blocks should be repeated.",
          "courseC_maze_loops4_b": "Use two `repeat` blocks set to different numbers.",
          "courseC_maze_loops4_c": "`Turn right` once between the two loops."
        },
        "courseC_maze_loops5_authored_hint": {
          "courseC_maze_loops5_a": "The best solution uses two `move forward` commands and one loop."
        },
        "courseC_maze_loops6_authored_hint": {
          "courseC_maze_loops6_a": "If the pattern is hard to see, try coding it all out first and see what repeats over and over before you put the loops in.",
          "courseC_maze_loops6_b": "To put lots of blocks inside a `repeat` loop, just drag a loop out into the workspace, then drag all of the blocks from the starting program inside of it.  \n\nConnect it all back to the `when run` block and you're good to go!"
        },
        "courseC_maze_loops7_authored_hint": {
          "courseC_maze_loops7_a": "If the pattern is hard to see, try coding it all out first and see what things repeat over and over before you put the loops in."
        },
        "courseC_maze_loops8_authored_hint": {
          "courseC_puppy_loops8courseC_maze_loops8_a": "Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!",
          "courseC_puppy_loops8courseC_maze_loops8_b": "The first half of this path is similar to the stairs from the last puzzle, but it goes in a different direction.",
          "courseC_puppy_loops8courseC_maze_loops8_c": "There are different ways to solve this. \n\nYou will want to use at least two loops, and repeat a set of actions in the first one, then a single `move forward` in the other."
        },
        "courseC_maze_loops9_authored_hint": {
          "courseC_maze_loops9_1": "If you're having trouble finding where the code should repeat, try writing it down on a piece of paper and looking for a pattern. "
        },
        "courseC_maze_loops_challenge1_authored_hint": {
          "courseC_maze_loops_challenge1_a": "Think about this path as being three different pieces. Each one has a pattern you can repeat.",
          "courseC_maze_loops_challenge1_b": "In between each `repeat` block, you will need to `turn left` or `turn right` to get ready Scrat for the next pattern."
        },
        "courseC_maze_loops_challenge1a_authored_hint": {
          "courseC_maze_loops_challenge1_a": "Think about this path as being two different pieces. Each one has a pattern you can repeat.",
          "courseC_maze_loops_challenge1_b": "Can you remember how to use loops to repeat a staircase pattern?"
        },
        "courseC_maze_loops_challenge1a_2018_authored_hint": {
          "courseC_maze_loops_challenge1_a": "Think about this path as being two different pieces. Each one has a pattern you can repeat.",
          "courseC_maze_loops_challenge1_b": "Can you remember how to use loops to repeat a staircase pattern?"
        },
        "courseC_maze_loops_challenge2_authored_hint": {
          "courseC_maze_loops_challenge2_a": "The original code would work great - if there was only one piece of treasure in each pile!",
          "courseC_maze_loops_challenge2_b": "Use loops so you don't run out of `collect` blocks!"
        },
        "courseC_maze_programming1_authored_hint": {
          "courseC_maze_programming1_0": "Make sure all of the blocks have been fully snapped together, then click \"Run\" again."
        },
        "courseC_maze_programming1_2018_authored_hint": {
          "courseC_maze_programming1_0": "Make sure all of the blocks have been fully snapped together, then click \"Run\" again."
        },
        "courseC_maze_programming2_authored_hint": {
          "courseC_maze_programming2_a": "To use a <xml><block type=\"maze_moveForward\"/></xml> block, drag it out of the toolbox and snap it to the <xml><block type=\"when_run\"/></xml> block.",
          "courseC_maze_programming2_b": "Make sure all of the blocks have been fully snapped together, then click \"Run\" again."
        },
        "courseC_maze_programming2_2018_authored_hint": {
          "courseC_maze_programming2_a": "To use a <xml><block type=\"maze_moveForward\"/></xml> block, drag it out of the toolbox and snap it to the <xml><block type=\"when_run\"/></xml> block.",
          "courseC_maze_programming2_b": "Make sure all of the blocks have been fully snapped together, then click \"Run\" again."
        },
        "courseC_maze_programming3_authored_hint": {
          "courseC_maze_programming3_a": "Try running the code first to see where it goes wrong.",
          "courseC_maze_programming3_b": "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks to another part of the workspace.\n\nDrag the block you want to delete back to the toolbox.\n\nFinally, put your other blocks back where they belong."
        },
        "courseC_maze_programming3_2018_authored_hint": {
          "courseC_maze_programming3_a": "Try running the code first to see where it goes wrong.",
          "courseC_maze_programming3_b": "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks to another part of the workspace.\n\nDrag the block you want to delete back to the toolbox.\n\nFinally, put your other blocks back where they belong."
        },
        "courseC_maze_programming4_authored_hint": {
          "courseC_maze_programming4_a": "Remember that when you turn, you are turning from the *bird's* point of view.  If you turn right, the bird will point down.",
          "courseC_maze_programming4_b": "To follow the path:\n- move forward\n- turn one way\n- move forward\n- turn back the other way\n- move forward"
        },
        "courseC_maze_programming4_2018_authored_hint": {
          "courseC_maze_programming4_a": "Remember that when you turn, you are turning from the *bird's* point of view.  If you turn right, the bird will point down.",
          "courseC_maze_programming4_b": "To follow the path:\n- move forward\n- turn one way\n- move forward\n- turn back the other way\n- move forward"
        },
        "courseC_maze_programming5_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseC_maze_programming5_b": "The bird will need to make one turn to complete this puzzle. Can you figure out which way?",
          "courseC_maze_programming5_c": "The solution will have two `move forward` blocks, a turn, and two more `move forward` blocks."
        },
        "courseC_maze_programming5_2018_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseC_maze_programming5_b": "The bird will need to make one turn to complete this puzzle. Can you figure out which way?",
          "courseC_maze_programming5_c": "The solution will have two `move forward` blocks, a turn, and two more `move forward` blocks."
        },
        "courseC_maze_programming6_authored_hint": {
          "courseC_maze_programming6_a": "There are two ways to solve this puzzle!",
          "courseC_maze_programming6_b": "Follow your finger from the bird to the pig, which steps did you take?",
          "courseC_maze_programming6_c": "Remember you have to turn first, since the bird starts facing a wall.",
          "courseC_maze_programming6_d": "Feel stuck?  Look at this path!"
        },
        "courseC_maze_programming6_2018_authored_hint": {
          "courseC_maze_programming6_a": "There are two ways to solve this puzzle!",
          "courseC_maze_programming6_b": "Follow your finger from the bird to the pig, which steps did you take?",
          "courseC_maze_programming6_c": "Remember you have to turn first, since the bird starts facing a wall.",
          "courseC_maze_programming6_d": "Feel stuck?  Look at this path!"
        },
        "courseC_maze_programming7_authored_hint": {
          "courseC_maze_programming7_a": "Don't forget to use the \"Step\" button to go through block by block and look for errors.",
          "courseC_maze_programming7_b": "If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper."
        },
        "courseC_maze_programming7_2018_authored_hint": {
          "courseC_maze_programming7_a": "Don't forget to use the \"Step\" button to go through block by block and look for errors.",
          "courseC_maze_programming7_b": "If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper."
        },
        "courseC_maze_programming8_authored_hint": {
          "courseC_maze_programming8_a": "Remember you can use the \"Step\" button to look through your code line-by-line if you get stuck.",
          "courseC_maze_programming8_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseC_maze_programming8_2018_authored_hint": {
          "courseC_maze_programming8_a": "Remember you can use the \"Step\" button to look through your code line-by-line if you get stuck.",
          "courseC_maze_programming8_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseC_maze_programming_challenge1_authored_hint": {
          "courseC_maze_programming_challenge1_a": "There are many ways to get to the pig. Use your finger to find a path and then program it!"
        },
        "courseC_maze_programming_challenge1_2018_authored_hint": {
          "courseC_maze_programming_challenge1_a": "There are many ways to get to the pig. Use your finger to find a path and then program it!"
        },
        "courseC_maze_programming_challenge2_authored_hint": {
          "courseC_maze_programming_challenge2_a": "*\"If you send me backwards, be extra careful that I turn the correct way!\"*",
          "courseC_maze_programming_challenge2_b": "The shortest solution uses only 5 blocks, but it uses this block:\n\n<xml><block type=\"controls_repeat_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml>"
        },
        "courseC_maze_programming_challenge2_2018_authored_hint": {
          "courseC_maze_programming_challenge2_a": "*\"If you send me backwards, be extra careful that I turn the correct way!\"*",
          "courseC_maze_programming_challenge2_b": "The shortest solution uses only 5 blocks, but it uses this block:\n\n<xml><block type=\"controls_repeat_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml>"
        },
        "courseC_puppy_loops10_authored_hint": {
          "courseC_puppy_loops9_1": "I need to move two or three time between each turn."
        },
        "courseC_puppy_loops8_authored_hint": {
          "2-3_Maze_Loops_17_a": "Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!",
          "2-3_Maze_Loops_17_b": "The first half of this path is similar to the stair step from the last puzzle, but it goes a different direction.",
          "courseC_puppy_loops8_c": "There are different ways to solve this. You will want to use at least two loops, and repeat either a set of actions or a single movement."
        },
        "courseC_puppy_loops8courseC_maze_loops8_authored_hint": {
          "courseC_puppy_loops8courseC_maze_loops8_a": "Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!",
          "courseC_puppy_loops8courseC_maze_loops8_b": "The first half of this path is similar to the stairs from the last puzzle, but it goes in a different direction.",
          "courseC_puppy_loops8courseC_maze_loops8_c": "There are different ways to solve this. \n\nYou will want to use at least two loops, and repeat a set of actions in the first one, then a single `move forward` in the other."
        },
        "courseC_puppy_loops9_authored_hint": {
          "courseC_puppy_loops9_1": "If you repeat the first few actions, you can get me to the pig with just four more blocks!"
        },
        "courseC_starWars_loops1_authored_hint": {
          "courseC_starWars_loops1_a": "When BB-8 rolls over scrap metal he picks it up automatically.",
          "courseC_starWars_loops1_b": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.",
          "courseC_starWars_loops1_c": "You will want to `move forward` five times to solve this puzzle."
        },
        "courseC_starWars_loops10_authored_hint": {
          "courseC_starWars_loops10_a": "Doesn't this pattern look like a giant set of stair steps? See if you can use what you learned from previous puzzles to get all of the turns.",
          "courseC_starWars_loops10_b": "If you want to use less code, you can put one `repeat` loop inside of another!   \nThis is called a **nested loop**.",
          "courseC_starWars_loops10_c": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet."
        },
        "courseC_starWars_loops10_2018_authored_hint": {
          "courseC_starWars_loops10_a": "Doesn't this pattern look like a giant set of stair steps? See if you can use what you learned from previous puzzles to get all of the turns.",
          "courseC_starWars_loops10_b": "If you want to use less code, you can put one `repeat` loop inside of another!   \nThis is called a **nested loop**.",
          "courseC_starWars_loops10_c": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet."
        },
        "courseC_starWars_loops1_2018_authored_hint": {
          "courseC_starWars_loops1_a": "When BB-8 rolls over scrap metal he picks it up automatically.",
          "courseC_starWars_loops1_b": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.",
          "courseC_starWars_loops1_c": "You will want to `move forward` five times to solve this puzzle."
        },
        "courseC_starWars_loops2_authored_hint": {
          "courseC_starWars_loops2_a": "To repeat code, drag out a `repeat` loop, then put the block you want inside of it."
        },
        "courseC_starWars_loops2_2018_authored_hint": {
          "courseC_starWars_loops2_a": "To repeat code, drag out a `repeat` loop, then put the block you want inside of it."
        },
        "courseC_starWars_loops4_authored_hint": {
          "courseC_starWars_loops4_c": "Clicking on the small arrow next to \"left\" on the turn block will let you change it to  \"right\".",
          "courseC_starWars_loops4_a": "Use two `repeat` blocks.",
          "courseC_starWars_loops4_b": "Each `repeat` loop will have only one command inside of it: `move forward`."
        },
        "courseC_starWars_loops4_2018_authored_hint": {
          "courseC_starWars_loops4_c": "Clicking on the small arrow next to \"left\" on the turn block will let you change it to  \"right\".",
          "courseC_starWars_loops4_a": "Use two `repeat` blocks.",
          "courseC_starWars_loops4_b": "Each `repeat` loop will have only one command inside of it: `move forward`."
        },
        "courseC_starWars_loops5_authored_hint": {
          "courseC_starWars_loops5_b": "To move down, you have to turn and then move forward.",
          "courseC_starWars_loops5_a": "The best solution uses a turn, then a single `move forward`, another turn, then a loop."
        },
        "courseC_starWars_loops5_2018_authored_hint": {
          "courseC_starWars_loops5_b": "To move down, you have to turn and then move forward.",
          "courseC_starWars_loops5_a": "The best solution uses a turn, then a single `move forward`, another turn, then a loop."
        },
        "courseC_starWars_loops6_authored_hint": {
          "courseC_starWars_loops6_a": "Try writing all of the moves down on a piece of paper and looking for a pattern.",
          "courseC_starWars_loops6_b": "If you want to use less code, you can put one `repeat` loop inside of another!   \nThis is called a **nested loop**."
        },
        "courseC_starWars_loops6_2018_authored_hint": {
          "courseC_starWars_loops6_a": "Try writing all of the moves down on a piece of paper and looking for a pattern.",
          "courseC_starWars_loops6_b": "If you want to use less code, you can put one `repeat` loop inside of another!   \nThis is called a **nested loop**."
        },
        "courseC_starWars_loops7_authored_hint": {
          "courseC_starWars_loops7_a": "This pattern looks harder than it is! Start with a simple stair step. Does that cover all of the scrap metal?",
          "courseC_starWars_loops7_b": "If you are having trouble with this puzzle, try writing all of the moves on a piece of paper and looking for a pattern.",
          "courseC_starWars_loops7_c": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet."
        },
        "courseC_starWars_loops7_2018_authored_hint": {
          "courseC_starWars_loops7_a": "This pattern looks harder than it is! Start with a simple stair step. Does that cover all of the scrap metal?",
          "courseC_starWars_loops7_b": "If you are having trouble with this puzzle, try writing all of the moves on a piece of paper and looking for a pattern.",
          "courseC_starWars_loops7_c": "Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet."
        },
        "courseC_starWars_loops8_authored_hint": {
          "course_starWars_loops8_a": "Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!",
          "course_starWars_loops8_b": "Think of the first half of this problem as a stair step problem. How did you solve that before?",
          "course_starWars_loops8_c": "Take a look at this path.\n\n![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)"
        },
        "courseC_starWars_loops8_2018_authored_hint": {
          "course_starWars_loops8_a": "Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!",
          "course_starWars_loops8_b": "Think of the first half of this problem as a stair step problem. How did you solve that before?",
          "course_starWars_loops8_c": "Take a look at this path.\n\n![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)"
        },
        "courseC_starWars_loops9_authored_hint": {
          "course_starWars_loops9_b": "You can put more than one block inside a `repeat` loop.",
          "course_starWars_loops9_c": "You do not need to turn left to solve this puzzle. All of your turns can be to the right.\n\n![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)"
        },
        "courseC_starWars_loops9_2018_authored_hint": {
          "course_starWars_loops9_b": "You can put more than one block inside a `repeat` loop.",
          "course_starWars_loops9_c": "You do not need to turn left to solve this puzzle. All of your turns can be to the right.\n\n![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)"
        },
        "courseD_Frozen_nested1_authored_hint": {
          "courseD_artist_project1_a": "Use the drop down menu on the `turn` blocks to choose the angle you need!",
          "courseD_artist_project1_b": "Remember that `move forward` draws a line, while `jump forward` does not."
        },
        "courseD_Frozen_nested2_authored_hint": {
          "courseD_artist_project2_a": "Remember that `move forward` draws a line, while `jump forward` does not.",
          "courseD_artist_project2_b": "After you draw and move the first time, you can repeat the code by adding a loop around the outside."
        },
        "courseD_Frozen_nested3_authored_hint": {
          "courseD_artist_project3_a": "Use the drop down menu on the `turn` blocks to choose the angle you need!",
          "courseD_artist_project3_b": "Try nested loops!\n\nUse the code that you created to draw a line of shapes and nest it inside of another loop.  At the bottom, before the outside loop ends, add a block that will turn Elsa around.  \n\n- Try 72 degrees if you are repeating the outer loop 5 times\n- Try 60 degrees if you are repeating the outer loop 6 times"
        },
        "courseD_Frozen_nested4_authored_hint": {
          "courseD_artist_project4_a": "Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:\n\n<img src=\"https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png\" width=\"200px\" />\n\n\nHere's a set of hexagons with squares:\n\n<img src=\"https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png\" width=\"200px\" />\n",
          "courseD_artist_project4_b": "To try this, draw your first snowflake, turn, then draw a second snowflake."
        },
        "courseD_Frozen_nested5_authored_hint": {
          "courseD_artist_project4_a": "Lines of 2 hexagons and 4 triangles:\n\n<img src=\"https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png\" width=\"200px\" />\n"
        },
        "courseD_Frozen_nested6_authored_hint": {
          "courseD_artist_project1a_a": "This stair step uses a 76 degree turn and repeats 4 times.\n\n<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\" width=\"200px\" />\n",
          "courseD_artist_project1a_b": "These patterns are a lot like the stair steps from other puzzles, but using a different angle."
        },
        "courseD_Frozen_nested7_authored_hint": {
          "courseD_artist_project2a_a": "This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.\n\n<img src=\"https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png\" width=\"200px\" />\n"
        },
        "courseD_Frozen_nested8_authored_hint": {
          "courseD_artist_project3a_a": "You can choose different amounts to rotate your shape! What about 18 times with a 20 degree turn in between?"
        },
        "courseD_Frozen_nested9_authored_hint": {
          "courseD_artist_project4a_a": "Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)\n\n<img src=\"https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png\" width=\"200px\" />\n"
        },
        "courseD_artist_1_2018_authored_hint": {
          "courseD_artist_project1_a": "Use the drop down menu on the `turn` blocks to choose the angle you need!",
          "courseD_artist_project1_b": "Remember that `move forward` draws a line, while `jump forward` does not."
        },
        "courseD_artist_2_2018_authored_hint": {
          "courseD_artist_project1_b": "Remember that `move` draws a line, while `jump` does not.",
          "courseD_artist_project1_a": "Use the drop down menu on the `turn` blocks to choose the angle you need!"
        },
        "courseD_artist_5_2018_authored_hint": {
          "1": "If you are switching your shapes, don't forget that you will need to switch their angles, too!"
        },
        "courseD_artist_7_2018_authored_hint": {
          "courseD_artist_project2a_a": "This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.\n\n<img src=\"https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png\" width=\"200px\" />\n"
        },
        "courseD_artist_8_2018_authored_hint": {
          "courseD_artist_project3a_a": "You can choose different amounts to rotate your shape! What about 18 times with a 20 degree turn in between?"
        },
        "courseD_artist_9_2018_authored_hint": {
          "courseD_artist_project4a_a": "Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)\n\n<img src=\"https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png\" width=\"200px\" />\n"
        },
        "courseD_artist_binary1_authored_hint": {
          "courseD_artist_binary1_a": "Replace the \"???\" in the text block with the binary image you want, in zeroes and ones.",
          "courseD_artist_binary1_b": "The artist will draw a white space for every 1 and a black space for every 0.",
          "courseD_artist_binary1_c": "This is how you can input your binary code:\n\n![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)"
        },
        "courseD_artist_binary1_2018_authored_hint": {
          "courseD_artist_binary1_a": "Replace the \"???\" in the text block with the binary image you want, in zeroes and ones.",
          "courseD_artist_binary1_b": "The artist will draw a white space for every 1 and a black space for every 0.",
          "courseD_artist_binary1_c": "This is how you can input your binary code:\n\n![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)"
        },
        "courseD_artist_binary2_authored_hint": {
          "courseD_artist_binary2_a": "Just click `Run` to see this program in action!"
        },
        "courseD_artist_binary2_2018_authored_hint": {
          "courseD_artist_binary2_a": "Just click `Run` to see this program in action!"
        },
        "courseD_artist_binary3_authored_hint": {
          "courseD_artist_binary3_a": "One of the four binary patterns in the toolbox will solve this puzzle!",
          "courseD_artist_binary3_b": "Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseD_artist_binary3_2018_authored_hint": {
          "courseD_artist_binary3_a": "One of the four binary patterns in the toolbox will solve this puzzle!",
          "courseD_artist_binary3_b": "Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseD_artist_binary4_authored_hint": {
          "courseD_artist_binary4_a": "Look at the first three squares on the top row. Could you repeat these three to get the whole pattern?",
          "courseD_artist_binary4_b": "Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_artist_binary4_2018_authored_hint": {
          "courseD_artist_binary4_a": "Look at the first three squares on the top row. Could you repeat these three to get the whole pattern?",
          "courseD_artist_binary4_b": "Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_artist_binary5_authored_hint": {
          "courseD_artist_binary5_a": "Try running the code first to see what you have to work with.",
          "courseD_artist_binary5_b": "You only need to switch two rows to make a smile.",
          "courseD_artist_binary5_c": "If you are having trouble figuring this puzzle out, try writing the binary lines down on a piece of paper and looking for a pattern."
        },
        "courseD_artist_binary5_2018_authored_hint": {
          "courseD_artist_binary5_a": "Try running the code first to see what you have to work with.",
          "courseD_artist_binary5_b": "You only need to switch two rows to make a smile.",
          "courseD_artist_binary5_c": "If you are having trouble figuring this puzzle out, try writing the binary lines down on a piece of paper and looking for a pattern."
        },
        "courseD_artist_binary6_authored_hint": {
          "courseD_artist_binary6_a": "Start at the top left. How far do you have to read before the pattern starts to repeat?",
          "courseD_artist_binary6_b": "You can build your binary string a bit at a time, and keep testing!"
        },
        "courseD_artist_binary6_2018_authored_hint": {
          "courseD_artist_binary6_a": "Start at the top left. How far do you have to read before the pattern starts to repeat?",
          "courseD_artist_binary6_b": "You can build your binary string a bit at a time, and keep testing!"
        },
        "courseD_artist_binary7_authored_hint": {
          "courseD_artist_binary7_a": "Start at the top left. How far do you have to read before the pattern starts to repeat?",
          "courseD_artist_binary7_b": "Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_artist_binary7_2018_authored_hint": {
          "courseD_artist_binary7_a": "Start at the top left. How far do you have to read before the pattern starts to repeat?",
          "courseD_artist_binary7_b": "Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_artist_binary8_authored_hint": {
          "courseD_artist_binary8_a": "The spiral can be confusing sometimes. Isolate each horizontal line in your mind as you create this design.",
          "courseD_artist_binary8_b": "Try running the code first to see what you have to work with.",
          "courseD_artist_binary8_c": "Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseD_artist_binary8_2018_authored_hint": {
          "courseD_artist_binary8_a": "The spiral can be confusing sometimes. Isolate each horizontal line in your mind as you create this design.",
          "courseD_artist_binary8_b": "Try running the code first to see what you have to work with.",
          "courseD_artist_binary8_c": "Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseD_artist_binary_challenge2_authored_hint": {
          "courseD_artist_binary_challenge2_a": "There are only few lines wrong in the original program."
        },
        "courseD_artist_binary_challenge2_2018_authored_hint": {
          "courseD_artist_binary_challenge2_a": "There are only few lines wrong in the original program."
        },
        "courseD_artist_binary_challenge3_authored_hint": {
          "courseD_artist_binary_challenge3_a": "The best tip I have for you is to press `⟲ Start Over` if it starts to get really messy.\n\nThere are only few lines wrong in the original program. If one approach fails, back up and try again. There is a solution!"
        },
        "courseD_artist_functions10_authored_hint": {
          "courseD_artist_functions10_b": "This drawing is a lot like the last one, except the function draws a different kind of line.",
          "courseD_artist_functions10_a": "To get around using multiple `move forward` blocks, create a `draw hexagon` function and call that multiple times."
        },
        "courseD_artist_functions2_authored_hint": {
          "courseD_artist_functions2_a": "Your program should:\n- Use function\n- Move forward 100 + 75 pixels\n- Use function"
        },
        "courseD_artist_functions3_authored_hint": {
          "courseD_artist_functions3_a": "To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.\n\nIf you can't remember what the starter code was, click \"start over\" in the upper right corner of the workspace."
        },
        "courseD_artist_functions4_authored_hint": {
          "courseD_artist_functions4_a": "Try using a function!"
        },
        "courseD_artist_functions5_authored_hint": {
          "courseD_artist_functions5_a": "Don't give up!  Remember what you have been learning.",
          "courseD_artist_functions5_b": "Functions make it easy to call saved code at any time, not just from inside a loop!"
        },
        "courseD_artist_functions6_authored_hint": {
          "grade4_artist_functions_windows0_a": "Focus only on making one window for now.  We'll create a function for it in the next puzzle.",
          "grade4_artist_functions_windows0_b": "Try using nested loops, where the inner loop makes the square and the outer loop rotates the square four times."
        },
        "courseD_artist_functions7_authored_hint": {
          "courseD_artist_functions7_a": "Try creating your function first then adding in windows one at a time.",
          "courseD_artist_functions7_b": "You shouldn't need to add any extra repeat loops.  Just jump the artist 100 pixels forward for each top window, and 150 pixels down to get the bottom windows."
        },
        "courseD_artist_functions8_authored_hint": {
          "courseD_artist_functions8_a": "Start by making a function for a square, then try making a function for a line of squares.\n\nHow would you use the `draw a line of squares` function to make this image?",
          "courseD_artist_functions8_b": "After your first line of squares, you need to move the artist down and back before you start your second line of squares.",
          "courseD_artist_functions8_c": "You should move the artist back a different number of pixels for even lines than for odd ones."
        },
        "courseD_artist_functions9_authored_hint": {
          "courseD_artist_functions9_a": "To get around the need to have multiple `move forward` blocks, create a `draw triangle` function and call that multiple times.",
          "courseD_artist_functions9_b": "This drawing is made by creating a line of triangles and turning either 60 or 120 degrees after each time you draw the triangle line."
        },
        "courseD_artist_nestedLoops1_authored_hint": {
          "courseD_artist_nestedLoops1_a": "The easiest way to draw this is to move forward and use right turns.",
          "courseD_artist_nestedLoops1_b": "You can draw this triangle with a `repeat` loop with two blocks inside. Which blocks do you need?",
          "courseD_artist_nestedLoops1_c": "Try writing the steps on paper and looking for patterns that can be simplified with loops."
        },
        "courseD_artist_nestedLoops1_2018_authored_hint": {
          "courseD_artist_nestedLoops1_a": "The easiest way to draw this is to move forward and use right turns.",
          "courseD_artist_nestedLoops1_b": "You can draw this triangle with a `repeat` loop with two blocks inside. Which blocks do you need?",
          "courseD_artist_nestedLoops1_c": "Try writing the steps on paper and looking for patterns that can be simplified with loops."
        },
        "courseD_artist_nestedLoops1a_authored_hint": {
          "courseD_artist_nestedLoops1a_a": "You will need to draw a total of 6 triangles. After finishing each triangle, rotate 60 degrees and move to start the next triangle.\n\n![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)",
          "courseD_artist_nestedLoops1a_b": "If you create your triangle with a loop, the artist should be facing the same way as they started. This will make the 60 degree turns a lot easier.",
          "courseD_artist_nestedLoops1a_c": "If you want colors, use the `set color` block in your code. You don't have to match the colors in the template image."
        },
        "courseD_artist_nestedLoops1a_2018_authored_hint": {
          "courseD_artist_nestedLoops1a_a": "You will need to draw a total of 6 triangles. After finishing each triangle, rotate 60 degrees and move to start the next triangle.\n\n![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)",
          "courseD_artist_nestedLoops1a_b": "If you create your triangle with a loop, the artist should be facing the same way as they started. This will make the 60 degree turns a lot easier.",
          "courseD_artist_nestedLoops1a_c": "If you want colors, use the `set color` block in your code. You don't have to match the colors in the template image."
        },
        "courseD_artist_nestedLoops2_authored_hint": {
          "courseD_artist_nestedLoops2_a": "Nest your loops by surrounding your triangle code with another `repeat` loop.",
          "courseD_artist_nestedLoops2_b": "Remember to put the `turn` block inside of the loop so that the artist turns after each triangle."
        },
        "courseD_artist_nestedLoops2_2018_authored_hint": {
          "courseD_artist_nestedLoops2_a": "Nest your loops by surrounding your triangle code with another `repeat` loop.",
          "courseD_artist_nestedLoops2_b": "Remember to put the `turn` block inside of the loop so that the artist turns after each triangle."
        },
        "courseD_artist_nestedLoops3_authored_hint": {
          "courseD_artist_nestedLoops3_a": "Try using the `jump forward` block to get from the top of one square to the place where you will start the next. \n\nIf your squares are 20 pixels tall and they are 20 pixels apart, how far do you need to jump?",
          "courseD_artist_nestedLoops3_b": "Don't forget to use a nested loop to solve this puzzle quickly. ",
          "courseD_artist_nestedLoops3_c": "Start by using a `repeat` loop to make one square.  Next, repeat that square 8 times, jumping 40 pixels in between. "
        },
        "courseD_artist_nestedLoops3_2018_authored_hint": {
          "courseD_artist_nestedLoops3_a": "Try using the `jump forward` block to get from the top of one square to the place where you will start the next. \n\nIf your squares are 20 pixels tall and they are 20 pixels apart, how far do you need to jump?",
          "courseD_artist_nestedLoops3_b": "Don't forget to use a nested loop to solve this puzzle quickly. ",
          "courseD_artist_nestedLoops3_c": "Start by using a `repeat` loop to make one square.  Next, repeat that square 8 times, jumping 40 pixels in between. "
        },
        "courseD_artist_nestedLoops4_authored_hint": {
          "courseD_artist_nestedLoops4_d": "To solve this correctly, you'll need to move **before** you turn, or else your circles will be off by the tiniest little amount!",
          "courseD_artist_nestedLoops4_b": "Don't forget to jump forward by 50 pixels between circles.",
          "courseD_artist_nestedLoops4_c": "Use a nested loop to draw your circles 4 times."
        },
        "courseD_artist_nestedLoops4_2018_authored_hint": {
          "courseD_artist_nestedLoops4_d": "To solve this correctly, you'll need to move **before** you turn, or else your circles will be off by the tiniest little amount!",
          "courseD_artist_nestedLoops4_b": "Don't forget to jump forward by 50 pixels between circles.",
          "courseD_artist_nestedLoops4_c": "Use a nested loop to draw your circles 4 times."
        },
        "courseD_artist_nestedLoops5_authored_hint": {
          "courseD_artist_nestedLoops5_b": "To make a circle you'll need to set a repeat loop to repeat 360 times. Inside the loop, move forward 1 pixel and turn by 1 degree."
        },
        "courseD_artist_nestedLoops5_2018_authored_hint": {
          "courseD_artist_nestedLoops5_b": "To make a circle you'll need to set a repeat loop to repeat 360 times. Inside the loop, move forward 1 pixel and turn by 1 degree."
        },
        "courseD_artist_nestedLoops6_authored_hint": {
          "courseD_artist_nestedLoops6_a": "You'll need to repeat your outer loop 6 times now, instead of only 4.",
          "courseD_artist_nestedLoops6_b": "Now that you're breaking 360 degrees into six pieces instead of only four, you will only need to turn 60 degrees between circles. "
        },
        "courseD_artist_nestedLoops7_authored_hint": {
          "courseD_artist_nestedLoops7_a": "You'll need to use nested loops here. First, use a loop to draw a square. What will the outer loop do if the inner loop draws a square?"
        },
        "courseD_artist_nestedLoops7_2018_authored_hint": {
          "courseD_artist_nestedLoops7_a": "You'll need to use nested loops here. First, use a loop to draw a square. What will the outer loop do if the inner loop draws a square?"
        },
        "courseD_artist_nestedLoops8_authored_hint": {
          "courseD_artist_nestedLoops8_a": "To have 8 hexagons in your drawing, you'll need to turn **45 degrees** between each of them. Why? Because 360 degrees (a full turn around) divided by 8 (the number of hexagons) is 45 degrees.",
          "courseD_artist_nestedLoops8_b": "If you're stuck, start by looking at the last puzzle, then change the things that are different."
        },
        "courseD_artist_nestedLoops8_2018_authored_hint": {
          "courseD_artist_nestedLoops8_a": "To have 8 hexagons in your drawing, you'll need to turn **45 degrees** between each of them. Why? Because 360 degrees (a full turn around) divided by 8 (the number of hexagons) is 45 degrees.",
          "courseD_artist_nestedLoops8_b": "If you're stuck, start by looking at the last puzzle, then change the things that are different."
        },
        "courseD_artist_nestedLoops9_authored_hint": {
          "courseD_artist_nestedLoops9_a": "Start by using a nested loop like you had before, but this time, make it with squares.",
          "courseD_artist_nestedLoops9_b": "Add a second set of nested loops to the end of the first set, but this time use triangles."
        },
        "courseD_artist_nestedLoops9_2018_authored_hint": {
          "courseD_artist_nestedLoops9_a": "Start by using a nested loop like you had before, but this time, make it with squares.",
          "courseD_artist_nestedLoops9_b": "Add a second set of nested loops to the end of the first set, but this time use triangles."
        },
        "courseD_artist_nestedLoopsFP_authored_hint": {
          "courseD_artist_nestedLoopsFP_a": "<img src=\"https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png\" width=\"200px\"/>\n\nThis image was made using a single nested loop that repeats a hexagon (with 50px sides) 15 times using a 48 degree turn.",
          "courseD_artist_nestedLoopsFP_b": "<img src=\"https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png\" width=\"200px\"/>\n\nThis image was made using similar code to other levels you've done before, but with circles (repeat 360 times: move forward 1, turn 1 degree).",
          "courseD_artist_nestedLoopsFP_c": "<img src=\"https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png\" width=\"200px\"/>\n\nThis image was made using a single nested loop that repeats a pentagon (with 50px sides) 15 times using a 48 degree turn."
        },
        "courseD_artist_nestedLoopsFP_2018_authored_hint": {
          "courseD_artist_nestedLoopsFP_a": "<img src=\"https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png\" width=\"200px\"/>\n\nThis image was made using a single nested loop that repeats a hexagon (with 50px sides) 15 times using a 48 degree turn.",
          "courseD_artist_nestedLoopsFP_b": "<img src=\"https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png\" width=\"200px\"/>\n\nThis image was made using similar code to other levels you've done before, but with circles (repeat 360 times: move forward 1, turn 1 degree).",
          "courseD_artist_nestedLoopsFP_c": "<img src=\"https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png\" width=\"200px\"/>\n\nThis image was made using a single nested loop that repeats a pentagon (with 50px sides) 15 times using a 48 degree turn."
        },
        "courseD_artist_nestedLoops_challenge1_authored_hint": {
          "courseD_artist_nestedLoops_challenge1_a": "Start by changing the color to blue, then create an octagon with 50 pixel sides and 45 degree left turns.",
          "courseD_artist_nestedLoops_challenge1_b": "Add the code to change the color to green, and make a triangle with 50 pixel sides and 120 degree left turns.",
          "courseD_artist_nestedLoops_challenge1_c": "After you've drawn both shapes, you will need to jump forward by 50 pixels before you turn right by 90 degrees.",
          "courseD_artist_nestedLoops_challenge1_d": "Put all of your code inside of a `repeat 4 times` loop to finish it off."
        },
        "courseD_artist_nestedLoops_challenge1_2018_authored_hint": {
          "courseD_artist_nestedLoops_challenge1_a": "Start by changing the color to blue, then create an octagon with 50 pixel sides and 45 degree left turns.",
          "courseD_artist_nestedLoops_challenge1_b": "Add the code to change the color to green, and make a triangle with 50 pixel sides and 120 degree left turns.",
          "courseD_artist_nestedLoops_challenge1_c": "After you've drawn both shapes, you will need to jump forward by 50 pixels before you turn right by 90 degrees.",
          "courseD_artist_nestedLoops_challenge1_d": "Put all of your code inside of a `repeat 4 times` loop to finish it off."
        },
        "courseD_artist_nestedLoops_challenge2_authored_hint": {
          "courseD_artist_nestedLoops_challenge2_a": "To draw a regular octagon, the artist needs to turn 45 degrees 8 times.",
          "courseD_artist_nestedLoops_challenge2_b": "To draw a square, the artist needs to turn 90 degrees 4 times."
        },
        "courseD_artist_nestedLoops_challenge2_2018_authored_hint": {
          "courseD_artist_nestedLoops_challenge2_a": "To draw a regular octagon, the artist needs to turn 45 degrees 8 times.",
          "courseD_artist_nestedLoops_challenge2_b": "To draw a square, the artist needs to turn 90 degrees 4 times."
        },
        "courseD_artist_project1_authored_hint": {
          "courseD_artist_project1_a": "Use the drop down menu on the `turn` blocks to choose the angle you need!",
          "courseD_artist_project1_b": "Remember that `move forward` draws a line, while `jump forward` does not."
        },
        "courseD_artist_project1_2018_authored_hint": {
          "courseD_artist_project1_a": "Use the drop down menu on the `turn` blocks to choose the angle you need!",
          "courseD_artist_project1_b": "Remember that `move forward` draws a line, while `jump forward` does not."
        },
        "courseD_artist_project1a_authored_hint": {
          "courseD_artist_project1a_a": "This stair step uses a 76 degree turn and repeats 4 times.\n\n<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\" width=\"200px\" />\n",
          "courseD_artist_project1a_b": "These patterns are a lot like the stair steps from other puzzles, but using a different angle."
        },
        "courseD_artist_project1a_2018_authored_hint": {
          "courseD_artist_project1a_a": "This stair step uses a 76 degree turn and repeats 4 times.\n\n<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\" width=\"200px\" />\n",
          "courseD_artist_project1a_b": "These patterns are a lot like the stair steps from other puzzles, but using a different angle."
        },
        "courseD_artist_project2_authored_hint": {
          "courseD_artist_project2_a": "Remember that `move forward` draws a line, while `jump forward` does not.",
          "courseD_artist_project2_b": "After you draw and move the first time, you can repeat the code by adding a loop around the outside."
        },
        "courseD_artist_project2_2018_authored_hint": {
          "courseD_artist_project2_a": "Remember that `move forward` draws a line, while `jump forward` does not.",
          "courseD_artist_project2_b": "After you draw and move the first time, you can repeat the code by adding a loop around the outside."
        },
        "courseD_artist_project2a_authored_hint": {
          "courseD_artist_project2a_a": "This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.\n\n<img src=\"https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png\" width=\"200px\" />\n"
        },
        "courseD_artist_project2a_2018_authored_hint": {
          "courseD_artist_project2a_a": "This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.\n\n<img src=\"https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png\" width=\"200px\" />\n"
        },
        "courseD_artist_project3_authored_hint": {
          "courseD_artist_project3_a": "Use the drop down menu on the `turn` blocks to choose the angle you need!",
          "courseD_artist_project3_b": "Try nested loops!\n\nUse the code that you created to draw a line of shapes and nest it inside of another loop.  At the bottom, before the outside loop ends, add a block that will turn Elsa around.  \n\n- Try 72 degrees if you are repeating the outer loop 5 times\n- Try 60 degrees if you are repeating the outer loop 6 times"
        },
        "courseD_artist_project3_2018_authored_hint": {
          "courseD_artist_project3_a": "Use the drop down menu on the `turn` blocks to choose the angle you need!",
          "courseD_artist_project3_b": "Try nested loops!\n\nUse the code that you created to draw a line of shapes and nest it inside of another loop.  At the bottom, before the outside loop ends, add a block that will turn Elsa around.  \n\n- Try 72 degrees if you are repeating the outer loop 5 times\n- Try 60 degrees if you are repeating the outer loop 6 times"
        },
        "courseD_artist_project3a_authored_hint": {
          "courseD_artist_project3a_a": "You can choose different amounts to rotate your shape! What about 18 times with a 20 degree turn in between?"
        },
        "courseD_artist_project3a_2018_authored_hint": {
          "courseD_artist_project3a_a": "You can choose different amounts to rotate your shape! What about 18 times with a 20 degree turn in between?"
        },
        "courseD_artist_project4_authored_hint": {
          "courseD_artist_project4_a": "Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:\n\n<img src=\"https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png\" width=\"200px\" />\n\n\nHere's a set of hexagons with squares:\n\n<img src=\"https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png\" width=\"200px\" />\n",
          "courseD_artist_project4_b": "To try this, draw your first snowflake, turn, then draw a second snowflake."
        },
        "courseD_artist_project4_2018_authored_hint": {
          "courseD_artist_project4_a": "Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:\n\n<img src=\"https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png\" width=\"200px\" />\n\n\nHere's a set of hexagons with squares:\n\n<img src=\"https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png\" width=\"200px\" />\n",
          "courseD_artist_project4_b": "To try this, draw your first snowflake, turn, then draw a second snowflake."
        },
        "courseD_artist_project4a_authored_hint": {
          "courseD_artist_project4a_a": "Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)\n\n<img src=\"https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png\" width=\"200px\" />\n"
        },
        "courseD_artist_project4a_2018_authored_hint": {
          "courseD_artist_project4a_a": "Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)\n\n<img src=\"https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png\" width=\"200px\" />\n"
        },
        "courseD_artist_project5_authored_hint": {
          "courseD_artist_project4_a": "Lines of 2 hexagons and 4 triangles:\n\n<img src=\"https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png\" width=\"200px\" />\n"
        },
        "courseD_artist_project5_2018_authored_hint": {
          "courseD_artist_project4_a": "Lines of 2 hexagons and 4 triangles:\n\n<img src=\"https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png\" width=\"200px\" />\n"
        },
        "courseD_artist_ramp11_authored_hint": {
          "courseD_artist_ramp11a": "To draw a side, use the `move forward by 100 pixels` block, and change the 100 to a 200.",
          "courseD_artist_ramp11b": "To draw 4 sides, put a `move forward by 200 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.\n\nDon't forget to turn afterward!",
          "courseD_artist_ramp11_c": "Remember to put the `turn` block inside of your loop!"
        },
        "courseD_artist_ramp12_authored_hint": {
          "courseD_artist_ramp12_a": "You can either draw the square first, then the triangle, or do it the other way around!",
          "courseD_artist_ramp12_b": "Try splitting the problem into 2 parts, and using 2 loops.",
          "courseD_artist_ramp12_c": "You can use the drop down menu on the `turn` blocks to see which angle you need!"
        },
        "courseD_bee_conditionals1_authored_hint": {
          "courseD_bee_conditionals1_a": "You will need to use an `if` block to check to see if there is a flower beneath the cloud before you try to get nectar."
        },
        "courseD_bee_conditionals1_predict1_authored_hint": {
          "courseD_bee_conditionals1_a": "You will need to use an `if` block to check to see if there is a flower beneath the cloud before you try to get nectar."
        },
        "courseD_bee_conditionals1_predict1_2018_authored_hint": {
          "courseD_bee_conditionals1_a": "You will need to use an `if` block to check to see if there is a flower beneath the cloud before you try to get nectar."
        },
        "courseD_bee_conditionals2_authored_hint": {
          "courseD_bee_conditionals2_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals2_a": "Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.",
          "courseD_bee_conditionals2_b": "You can use a `repeat` loop or a `while path ahead` to move through this maze.",
          "courseD_bee_conditionals2_c": "You don't have to check for honeycombs, there will only be flowers or blank spaces under the clouds.",
          "courseD_bee_conditionals2_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals2_2018_authored_hint": {
          "courseD_bee_conditionals2_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals2_a": "Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.",
          "courseD_bee_conditionals2_b": "You can use a `repeat` loop or a `while path ahead` to move through this maze.",
          "courseD_bee_conditionals2_c": "You don't have to check for honeycombs, there will only be flowers or blank spaces under the clouds.",
          "courseD_bee_conditionals2_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals2_test_authored_hint": {
          "courseD_bee_conditionals2_aa": "Need help getting started?  Here is a little hint video.",
          "courseD_bee_conditionals2_a": "Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.",
          "courseD_bee_conditionals2_b": "You can use a `repeat` loop or a `while path ahead` to move through this maze.",
          "courseD_bee_conditionals2_c": "You don't have to check for honeycombs, there will only be flowers or blank spaces under the clouds.",
          "courseD_bee_conditionals2_d": "Need help finishing things up?  Watch this hint video."
        },
        "courseD_bee_conditionals3_authored_hint": {
          "courseD_bee_conditionals3_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals3_a": "Be sure to use an `if` statement to check each space to see if it has either a flower or nothing.",
          "courseD_bee_conditionals3_b": "You can use a `repeat` loop or a `while` loop to keep the bee moving forward. Use whichever one you like!",
          "courseD_bee_conditionals3_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.",
          "courseD_bee_conditionals3_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals3_2018_authored_hint": {
          "courseD_bee_conditionals3_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals3_a": "Be sure to use an `if` statement to check each space to see if it has either a flower or nothing.",
          "courseD_bee_conditionals3_b": "You can use a `repeat` loop or a `while` loop to keep the bee moving forward. Use whichever one you like!",
          "courseD_bee_conditionals3_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.",
          "courseD_bee_conditionals3_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals4_authored_hint": {
          "courseD_bee_conditionals4_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals4_a": "You can still treat every space as if there is a cloud over it, even though you can see the whole path.",
          "courseD_bee_conditionals4_b": "Use an `if` statement inside your loop to check each space for nectar. ",
          "courseD_bee_conditionals4_c": "Using <xml><block type=\"maze_untilBlocked\"/></xml> block, you should move forward and check for a flower. If there is a flower, what should the bee do?",
          "courseD_bee_conditionals4_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals4_2018_authored_hint": {
          "courseD_bee_conditionals4_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals4_a": "You can still treat every space as if there is a cloud over it, even though you can see the whole path.",
          "courseD_bee_conditionals4_b": "Use an `if` statement inside your loop to check each space for nectar. ",
          "courseD_bee_conditionals4_c": "Using <xml><block type=\"maze_untilBlocked\"/></xml> block, you should move forward and check for a flower. If there is a flower, what should the bee do?",
          "courseD_bee_conditionals4_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals5_authored_hint": {
          "courseD_bee_conditionals5_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals5_a": "Think of every side of the rectangular path as a path by itself. Set up a nested loop with a `repeat` block on the outside and a `while there is a path ahead` loop on the inside. How many paths does the bee need to buzz down if the bee needs to buzz down every side with a flower?",
          "courseD_bee_conditionals5_c": "There are 3 sides of the rectangle with flowers, so the code needs to `repeat 3 times`. In every repeat, the bee will need to continue along the path, `while there is a path ahead`. To continue down the path, the bee will need to `move forward`. While on the path, the bee needs to check for a flower. `if there is a flower`, the bee should `get nectar`.",
          "courseD_bee_conditionals5_b": "Inside the `while there is a path ahead` block you will need to move forward and check for a flower. How do you check if there is a flower? What do you do if there is a flower?",
          "courseD_bee_conditionals5_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals5_2018_authored_hint": {
          "courseD_bee_conditionals5_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals5_a": "Think of every side of the rectangular path as a path by itself. Set up a nested loop with a `repeat` block on the outside and a `while path ahead` loop on the inside. How many paths does the bee need to buzz down if the bee needs to buzz down every side with a flower?",
          "courseD_bee_conditionals5_c": "There are 3 sides of the rectangle with flowers, so the code needs to `repeat 3 times`. In every repeat, the bee will need to continue along the path, `while path ahead`. To continue down the path, the bee will need to `move forward`. While on the path, the bee needs to check for a flower. `if there is a flower`, the bee should `get nectar`.",
          "courseD_bee_conditionals5_b": "Inside the `while path ahead` block you will need to move forward and check for a flower. How do you check if there is a flower? What do you do if there is a flower?",
          "courseD_bee_conditionals5_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals6_authored_hint": {
          "courseD_bee_conditionals6_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals6_a": "Make sure to use an `if` statement to check for honeycomb beneath each cloud.",
          "courseD_bee_conditionals6_b": "In this case, you do not need to check for flowers under the clouds.",
          "courseD_bee_conditionals6_c": "Is there a loop you can use to make your code simpler?",
          "courseD_bee_conditionals6_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals6_2018_authored_hint": {
          "courseD_bee_conditionals6_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals6_a": "Make sure to use an `if` statement to check for honeycomb beneath each cloud.",
          "courseD_bee_conditionals6_b": "In this case, you do not need to check for flowers under the clouds.",
          "courseD_bee_conditionals6_c": "Is there a loop you can use to make your code simpler?",
          "courseD_bee_conditionals6_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals7_authored_hint": {
          "courseD_bee_conditionals7_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals7_a": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve the challenge.",
          "courseD_bee_conditionals7_b": "If there is not a flower under the cloud, there must be a honeycomb, so you don't need to think about the case of an empty space.",
          "courseD_bee_conditionals7_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals7_2018_authored_hint": {
          "courseD_bee_conditionals7_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals7_a": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve the challenge.",
          "courseD_bee_conditionals7_b": "If there is not a flower under the cloud, there must be a honeycomb, so you don't need to think about the case of an empty space.",
          "courseD_bee_conditionals7_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals7_predict2_authored_hint": {
          "courseD_bee_conditionals7_a": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve the challenge."
        },
        "courseD_bee_conditionals7_predict2_2018_authored_hint": {
          "courseD_bee_conditionals7_a": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve the challenge."
        },
        "courseD_bee_conditionals8_authored_hint": {
          "courseD_bee_conditionals8_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals8_a": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if` or `if/else`) to solve the challenge.",
          "courseD_bee_conditionals8_b": "This puzzle is tricky, because you can't check blank squares, nectar, *and* honey with just one single conditional.\n\nOnly check for nectar and honey at the end of your path.",
          "courseD_bee_conditionals8_c": "How can you make sure to travel to the end every path, no matter how long the path is?",
          "courseD_bee_conditionals8_d": "Even though there is a cloud right in front of you, you don't have to visit it first. Try starting with the cloud in the bottom right of the square.\n\n![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)",
          "courseD_bee_conditionals8_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals8_2018_authored_hint": {
          "courseD_bee_conditionals8_hintVid1": "Need help getting started?  Watch the video!",
          "courseD_bee_conditionals8_a": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if` or `if/else`) to solve the challenge.",
          "courseD_bee_conditionals8_b": "This puzzle is tricky, because you can't check blank squares, nectar, *and* honey with just one single conditional.\n\nOnly check for nectar and honey at the end of your path.",
          "courseD_bee_conditionals8_c": "How can you make sure to travel to the end every path, no matter how long the path is?",
          "courseD_bee_conditionals8_d": "Even though there is a cloud right in front of you, you don't have to visit it first. Try starting with the cloud in the bottom right of the square.\n\n![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)",
          "courseD_bee_conditionals8_hintVid2": "Watch this video for help solving this puzzle."
        },
        "courseD_bee_conditionals_challenge1_authored_hint": {
          "courseD_bee_conditionals_challenge1_a": "Can you find a path that reaches every flower and honeycomb without hitting any trees? The best path is a spiral.",
          "courseD_bee_conditionals_challenge1_b": "In this puzzle, each space could have a flower, a honey comb, or nothing.  That means you can repeat your `if/else` conditional at each square."
        },
        "courseD_bee_conditionals_challenge1_2018_authored_hint": {
          "courseD_bee_conditionals_challenge1_a": "Can you find a path that reaches every flower and honeycomb without hitting any trees? The best path is a spiral.",
          "courseD_bee_conditionals_challenge1_b": "In this puzzle, each space could have a flower, a honey comb, or nothing.  That means you can repeat your `if/else` conditional at each square."
        },
        "courseD_bee_conditionals_challenge2_authored_hint": {
          "courseD_bee_conditionals_challenge1_b": "Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The difference is that the code inside will run over and over until there is no nectar left.  Try this pattern:\n\n<xml>  <block type=\"bee_whileNectarAmount\">\n    <title name=\"ARG1\">nectarRemaining</title>\n    <title name=\"OP\">&gt;</title>\n    <title name=\"ARG2\">0</title>                    <statement name=\"DO\">\n                      <block type=\"maze_nectar\"/>\n                    </statement>\n  </block></xml>"
        },
        "courseD_bee_conditionals_challenge2_2018_authored_hint": {
          "courseD_bee_conditionals_challenge1_b": "Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The difference is that the code inside will run over and over until there is no nectar left.  Try this pattern:\n\n<xml>  <block type=\"bee_whileNectarAmount\">\n    <title name=\"ARG1\">nectarRemaining</title>\n    <title name=\"OP\">&gt;</title>\n    <title name=\"ARG2\">0</title>                    <statement name=\"DO\">\n                      <block type=\"maze_nectar\"/>\n                    </statement>\n  </block></xml>"
        },
        "courseD_bee_conditionals_challenge3_authored_hint": {
          "courseD_bee_conditionals_challenge1_b": "Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The main differences is that the code inside will run repetitively until there is no nectar left.  Try this pattern:\n\n<xml>  <block type=\"bee_whileNectarAmount\">\n    <title name=\"ARG1\">nectarRemaining</title>\n    <title name=\"OP\">&gt;</title>\n    <title name=\"ARG2\">0</title>                    <statement name=\"DO\">\n                      <block type=\"maze_nectar\"/>\n                    </statement>\n  </block></xml>"
        },
        "courseD_bee_debugging1_authored_hint": {
          "courseD_bee_debugging1_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "courseD_bee_debugging1_b": "Do you see any patterns that could be made more simple using a `repeat` loop?"
        },
        "courseD_bee_debugging2_authored_hint": {
          "courseD_bee_debugging2_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "courseD_bee_debugging2_b": "Do you see a pattern?   \nTry using nested loops to solve this puzzle.\n\n![](https://images.code.org/72fbb8a06937479599b12804f990a0f3-image-1501012383369.50.27.png)"
        },
        "courseD_bee_debugging3_authored_hint": {
          "courseD_bee_debugging3_a": "Is there any place where the bee does something that doesn't make sense? What happens when you change those blocks?",
          "courseD_bee_debugging3_b": "Try simplifying the code using nested loops."
        },
        "courseD_bee_debugging4_authored_hint": {
          "courseD_bee_debugging4_a": "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?",
          "courseD_bee_debugging4_b": "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
        },
        "courseD_bee_debugging5_authored_hint": {
          "courseD_bee_debugging5_a": "Start by looking at just the first loop.\n\nWhat does it do?\n\nWhat is it supposed to do?\n\nWhat does that tell you?",
          "courseD_bee_debugging5_b": "Once you have the first loop the way you want it, what is left over in your code?",
          "courseD_bee_debugging5_c": "Try wrapping the leftover loop around the rest of your completed code.  Does is work now?\n\nIf not, what is still going wrong?"
        },
        "courseD_bee_debugging6_authored_hint": {
          "courseD_bee_debugging6_a": "Try running through the code using the \"Step\" button.  Is everything good at the first step?\n\nHow about the second?\n\nWhere do things go wrong?",
          "courseD_bee_debugging6_b": "It looks like all of the right steps are here, you just need more of them.  How can you repeat the `get nectar` and `make honey` actions multiple times?"
        },
        "courseD_bee_debugging7_authored_hint": {
          "courseD_bee_debugging7_a": "Try using the \"Step\" button.  Is everything right at the first step?  \n\nHow about the second?  \n\nWhere does it go wrong?  ",
          "courseD_bee_debugging7_b": "If something needs to happen several times, try adding a `repeat` loop."
        },
        "courseD_bee_debugging8_authored_hint": {
          "courseD_bee_debugging8_a": "Do you see a pattern that you can simplify with a loop?",
          "courseD_bee_debugging8_b": "Try using a nested loop to make this code shorter."
        },
        "courseD_bee_debugging9_authored_hint": {
          "courseD_bee_debugging9_a": "There are several ways to solve this problem...but they all involve turns!",
          "courseD_bee_debugging9_b": "Figure out how you would solve the puzzle, then move step-by-step to try to make the code match what is in your head.",
          "courseD_bee_debugging9_c": "Envision one of these stair steps to the flowers.   \n\n![](https://images.code.org/d3dfd710961b9ff8571816a97d76ae46-image-1501012931437.59.18.png)\n\nCan you build either of these with what's in the workspace and toolbox?\n\n"
        },
        "courseD_bee_debugging_challenge1_authored_hint": {
          "courseD_bee_debugging_challenge1_a": "Why does the first half of this program work? Think about why the bee needs to move backward. How much nectar does the bee collect each time it moves over a flower?",
          "courseD_bee_debugging_challenge1_b": "On the way back, have the bee follow the same pattern. How much honey does the bee need to make each time it moves over a honey comb?"
        },
        "courseD_bee_debugging_challenge1_2018_authored_hint": {
          "courseD_bee_debugging_challenge1_a": "Why does the first half of this program work? Think about why the bee needs to move backward. How much nectar does the bee collect each time it moves over a flower?",
          "courseD_bee_debugging_challenge1_b": "On the way back, have the bee follow the same pattern. How much honey does the bee need to make each time it moves over a honey comb?"
        },
        "courseD_bee_debugging_challenge1a_authored_hint": {
          "courseD_bee_debugging_challenge1_a": "Why does the first half of this program work? Think about why the bee needs to move backward. How much nectar does the bee collect each time it moves over a flower?",
          "courseD_bee_debugging_challenge1_b": "To solve this puzzle, have the bee follow the same pattern to make honey that it does when collecting nectar.",
          "courseD_bee_debugging_challenge1_c": "After the bee makes it to the bottom row, have it repeat these commands:\n\n<xml><block type=\"controls_repeat\">\n                    <title name=\"TIMES\">2</title>\n                    <statement name=\"DO\">\n                      <block type=\"maze_move\">\n                        <title name=\"DIR\">moveForward</title>\n                        <next>\n                          <block type=\"maze_honey\"/>\n                        </next>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type=\"maze_move\">\n                        <title name=\"DIR\">moveBackward</title>\n                      </block>\n                    </next>\n                  </block></xml>"
        },
        "courseD_bee_debugging_challenge2_authored_hint": {
          "courseD_bee_debugging_challenge1_a": "Why the first half of this program work? Think about why the bee needs to move backward. How much nectar does the bee collect each time it moves over a flower?",
          "courseD_bee_debugging_challenge1_b": "On the way back, have the bee follow the same pattern. How much honey does the bee need to make each time it moves over a honey comb?"
        },
        "courseD_bee_nestedLoops1_authored_hint": {
          "courseD_bee_nestedLoops1_a": "Not working?  Try using the \"Step\" button to see what happens line by line.",
          "courseD_bee_nestedLoops1_b": "Try writing code for one side of the square first. Can you loop this to get all of the nectar?",
          "courseD_bee_nestedLoops1_c": "Remember to use the `get nectar` block once you are on a square with a flower."
        },
        "courseD_bee_nestedLoops1_2018_authored_hint": {
          "courseD_bee_nestedLoops1_a": "Not working?  Try using the \"Step\" button to see what happens line by line.",
          "courseD_bee_nestedLoops1_b": "Try writing code for one side of the square first. Can you loop this to get all of the nectar?",
          "courseD_bee_nestedLoops1_c": "Remember to use the `get nectar` block once you are on a square with a flower."
        },
        "courseD_bee_nestedLoops1a_authored_hint": {
          "courseD_bee_nestedLoops1_a": "Not working?  Try using the \"Step\" button to see what happens line by line.",
          "courseD_bee_nestedLoops1_c": "Remember to use the `get nectar` block once you are on a square with a flower."
        },
        "courseD_bee_nestedLoops1a_2018_authored_hint": {
          "courseD_bee_nestedLoops1_a": "Not working?  Try using the \"Step\" button to see what happens line by line.",
          "courseD_bee_nestedLoops1_c": "Remember to use the `get nectar` block once you are on a square with a flower."
        },
        "courseD_bee_nestedLoops2_authored_hint": {
          "courseD_bee_nestedLoops2_a": "To solve this puzzle, you will need to nest one `repeat` loop inside of another.",
          "courseD_bee_nestedLoops2_b": "Can't figure out where to put the loops? Try writing the code on paper step-by-step and look for a pattern.",
          "courseD_bee_nestedLoops2_c": "Remember you can put more than one block inside of a loop."
        },
        "courseD_bee_nestedLoops2_2018_authored_hint": {
          "courseD_bee_nestedLoops2_a": "To solve this puzzle, you will need to nest one `repeat` loop inside of another.",
          "courseD_bee_nestedLoops2_b": "Can't figure out where to put the loops? Try writing the code on paper step-by-step and look for a pattern.",
          "courseD_bee_nestedLoops2_c": "Remember you can put more than one block inside of a loop."
        },
        "courseD_bee_nestedLoops3_authored_hint": {
          "grade4_bee_nestedLoops1_a": "If you don't understand how to use nested loops here, try writing out the instructions step by step on a piece of paper.  Circle the patterns that you see."
        },
        "courseD_bee_nestedLoops5_authored_hint": {
          "grade4_bee_nestedLoops4_a": "Try building your code line by line and see if you can spot the places where a repeat will make the code shorter!",
          "grade4_bee_nestedLoops4_b": "You will need a nested loop to move forward and get nectar, but only a single loop to collect honey at the end.\n\nAltogether, you should be using 3 loops."
        },
        "courseD_bee_nestedLoops6_2018_authored_hint": {
          "courseD_maze_nestedLoops6_a": "If you are stuck, try writing out the code out on paper without loops first and look for patterns.",
          "courseD_maze_nestedLoops6_b": "Nesting `repeat` loops can help decrease the number of blocks used.",
          "courseD_maze_nestedLoops6_c": "It will take two sets of nested `repeat` loops to solve this puzzle."
        },
        "courseD_bee_nestedLoops7_authored_hint": {
          "courseD_bee_nestedLoops7_a": "You will need to repeat `get nectar` inside of another `repeat` that also has the `move forward` block inside of it.",
          "courseD_bee_nestedLoops7_b": "You will need to use all three of the available `repeat` blocks to solve this puzzle."
        },
        "courseD_bee_nestedLoops7_2018_authored_hint": {
          "courseD_bee_nestedLoops7_a": "You will need to repeat `get nectar` inside of another `repeat` that also has the `move forward` block inside of it.",
          "courseD_bee_nestedLoops7_b": "You will need to use all three of the available `repeat` blocks to solve this puzzle."
        },
        "courseD_bee_nested_loops_challenge1_authored_hint": {
          "courseD_bee_nested_loops_challenge2_a": "Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!",
          "courseD_bee_nested_loops_challenge2_b": "To get all 4 gems, first use a loop to move away from the center. Turn left or right, then use a nested loop to move from the first pile of treasure to the second. If you repeat the nested loop enough times, the collector will move around the *entire* cave!",
          "courseD_bee_nested_loops_challenge2_c": "The shortest program that reaches all the treasure uses only one `collect` block and two turns."
        },
        "courseD_bee_nested_loops_challenge2_authored_hint": {
          "courseD_bee_nested_loops_challenge2_a": "Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!",
          "courseD_bee_nested_loops_challenge2_b": "To get all 4 gems, first use a loop to move away from the center. Then turn left or right and use a nested loop to move from the first pile of treasure to the second.",
          "courseD_bee_nested_loops_challenge2_c": "If you repeat the nested loop enough times, the collector will move around the *entire* cave!",
          "courseD_bee_nested_loops_challenge2_d": "The shortest program that reaches all the treasure uses only one `collect` block and two turns."
        },
        "courseD_bounce_events10s_authored_hint": {
          "courseD_bounce_events10s_a": "You should have both of these events in your code:\n\n<xml><block type=\"bounce_whenBallInGoal\" deletable=\"false\"><next><block type=\"bounce_playSound\"><title name=\"SOUND\">swish</title><next><block type=\"bounce_incrementPlayerScore\"></block></next></block></next></block><block type=\"bounce_whenBallMissesPaddle\" deletable=\"false\"><next><block type=\"bounce_playSound\"><title name=\"SOUND\">whistle</title><next><block type=\"bounce_incrementOpponentScore\"></block></next></block></next></block</xml>"
        },
        "courseD_bounce_events10s_2018_authored_hint": {
          "courseD_bounce_events10s_a": "You should have both of these events in your code:\n\n<xml><block type=\"bounce_whenBallInGoal\" deletable=\"false\"><next><block type=\"bounce_playSound\"><title name=\"SOUND\">swish</title><next><block type=\"bounce_incrementPlayerScore\"></block></next></block></next></block><block type=\"bounce_whenBallMissesPaddle\" deletable=\"false\"><next><block type=\"bounce_playSound\"><title name=\"SOUND\">whistle</title><next><block type=\"bounce_incrementOpponentScore\"></block></next></block></next></block</xml>"
        },
        "courseD_bounce_events11s_authored_hint": {
          "courseD_bounce_events11s_a": "You will need to throw a ball when the game starts, when you hit the basket, and when the hand misses the ball."
        },
        "courseD_bounce_events11s_2018_authored_hint": {
          "courseD_bounce_events11s_a": "You will need to throw a ball when the game starts, when you hit the basket, and when the hand misses the ball."
        },
        "courseD_bounce_events12s_authored_hint": {
          "courseD_bounce_events12s_a": "You can speed up the basketball or the hand by attaching those blocks to the `when run` event.",
          "courseD_bounce_events12s_b": "Try making each shot worth 2 points and changing the team logo to the one from your home town!"
        },
        "courseD_bounce_events12s_2018_authored_hint": {
          "courseD_bounce_events12s_a": "You can speed up the basketball or the hand by attaching those blocks to the `when run` event.",
          "courseD_bounce_events12s_b": "Try making each shot worth 2 points and changing the team logo to the one from your home town!"
        },
        "courseD_bounce_events1s_authored_hint": {
          "courseD_bounce_events1s_a": "You need to add the `move left` block to the `when left arrow` event to make this game work:\n\n <xml> <block type=\"bounce_whenLeft\" deletable=\"false\" x=\"20\" y=\"20\">\n    <next>\n      <block type=\"bounce_moveLeft\"/>\n    </next>\n  </block>\n   \n   </xml>",
          "courseD_bounce_events1s_b": "Don't forget to press \"Run\" and get the hand to the basket in order to solve this puzzle."
        },
        "courseD_bounce_events1s_2018_authored_hint": {
          "courseD_bounce_events1s_a": "You need to add the `move left` block to the `when left arrow` event to make this game work:\n\n <xml> <block type=\"bounce_whenLeft\" deletable=\"false\" x=\"20\" y=\"20\">\n    <next>\n      <block type=\"bounce_moveLeft\"/>\n    </next>\n  </block>\n   \n   </xml>",
          "courseD_bounce_events1s_b": "Don't forget to press \"Run\" and get the hand to the basket in order to solve this puzzle."
        },
        "courseD_bounce_events2s_authored_hint": {
          "courseD_bounce_events2s_a": "You will need to have two sets of `move` events coded for this to work:\n\n<xml>\n  <block type=\"bounce_whenLeft\" deletable=\"false\" x=\"20\" y=\"20\">\n    <next>\n      <block type=\"bounce_moveLeft\"/>\n    </next>\n  </block>\n  <block type=\"bounce_whenRight\" deletable=\"false\" x=\"180\" y=\"20\">\n    <next>\n      <block type=\"bounce_moveRight\"/>\n    </next>\n  </block>\n</xml>"
        },
        "courseD_bounce_events2s_2018_authored_hint": {
          "courseD_bounce_events2s_a": "You will need to have two sets of `move` events coded for this to work:\n\n<xml>\n  <block type=\"bounce_whenLeft\" deletable=\"false\" x=\"20\" y=\"20\">\n    <next>\n      <block type=\"bounce_moveLeft\"/>\n    </next>\n  </block>\n  <block type=\"bounce_whenRight\" deletable=\"false\" x=\"180\" y=\"20\">\n    <next>\n      <block type=\"bounce_moveRight\"/>\n    </next>\n  </block>\n</xml>"
        },
        "courseD_bounce_events5s_authored_hint": {
          "courseD_bounce_events5s_a": "You do not need to move the hand to solve this puzzle.",
          "courseD_bounce_events5s_b": "Make sure you have added this code to your workspace:\n\n<xml>  <block type=\"bounce_whenPaddleCollided\" deletable=\"false\"> <next> <block type=\"bounce_bounceBall\"/></next></block></xml>"
        },
        "courseD_bounce_events5s_2018_authored_hint": {
          "courseD_bounce_events5s_a": "You do not need to move the hand to solve this puzzle.",
          "courseD_bounce_events5s_b": "Make sure you have added this code to your workspace:\n\n<xml>  <block type=\"bounce_whenPaddleCollided\" deletable=\"false\"> <next> <block type=\"bounce_bounceBall\"/></next></block></xml>"
        },
        "courseD_bounce_events6s_authored_hint": {
          "courseD_bounce_events6s_a": "Do you have an event that looks like this?\n\n<xml><block type=\"bounce_whenWallCollided\" deletable=\"false\"><next><block type=\"bounce_bounceBall\"></block></next></block></block></xml>",
          "courseD_bounce_events6s_b": "If you've written the code correctly, you don't have to move the hand to win."
        },
        "courseD_bounce_events6s_2018_authored_hint": {
          "courseD_bounce_events6s_a": "Do you have an event that looks like this?\n\n<xml><block type=\"bounce_whenWallCollided\" deletable=\"false\"><next><block type=\"bounce_bounceBall\"></block></next></block></block></xml>",
          "courseD_bounce_events6s_b": "If you've written the code correctly, you don't have to move the hand to win."
        },
        "courseD_bounce_events7s_authored_hint": {
          "courseD_bounce_events7s_a": "You can add sounds in more places if you feel like it!"
        },
        "courseD_bounce_events7s_2018_authored_hint": {
          "courseD_bounce_events7s_a": "You can add sounds in more places if you feel like it!"
        },
        "courseD_collector_debugging1_authored_hint": {
          "courseD_collector_debugging1_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "courseD_collector_debugging1_b": "Do you see any patterns that could be made more simple using a `repeat` loop?",
          "courseD_collector_debugging1_c": "Remember to use the `collect` block to pick up treasure once you have moved to it.\n"
        },
        "courseD_collector_debugging10_predict1_authored_hint": {
          "courseD_collector_debugging9_a": "There are several ways to solve this problem...but they all involve turns!",
          "courseD_collector_debugging9_b": "Figure out how you would solve the puzzle, then move step-by-step to try to make the code match what is in your head."
        },
        "courseD_collector_debugging10_predict1_2018_authored_hint": {
          "courseD_collector_debugging9_a": "There are several ways to solve this problem...but they all involve turns!",
          "courseD_collector_debugging9_b": "Figure out how you would solve the puzzle, then move step-by-step to try to make the code match what is in your head."
        },
        "courseD_collector_debugging1_2018_authored_hint": {
          "courseD_collector_debugging1_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "courseD_collector_debugging1_b": "Do you see any patterns that could be made more simple using a `repeat` loop?",
          "courseD_collector_debugging1_c": "Remember to use the `collect` block to pick up treasure once you have moved to it.\n"
        },
        "courseD_collector_debugging1a_authored_hint": {
          "courseD_collector_debugging1_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "courseD_collector_debugging1_c": "Remember to use the `collect` block to pick up treasure once you have moved to it.\n"
        },
        "courseD_collector_debugging1a_2018_authored_hint": {
          "courseD_collector_debugging1_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "courseD_collector_debugging1_c": "Remember to use the `collect` block to pick up treasure once you have moved to it.\n"
        },
        "courseD_collector_debugging2_authored_hint": {
          "courseD_collector_debugging2_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "courseD_collector_debugging2_b": "Do you see any patterns that could be made more simple using a `repeat` loop?",
          "courseD_collector_debugging2_c": "Try collecting treasure for one side of this pattern. Can you repeat this to collect treasure on the other two sides?"
        },
        "courseD_collector_debugging2_2018_authored_hint": {
          "courseD_collector_debugging2_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "courseD_collector_debugging2_b": "Do you see any patterns that could be made more simple using a `repeat` loop?",
          "courseD_collector_debugging2_c": "Try collecting treasure for one side of this pattern. Can you repeat this to collect treasure on the other two sides?"
        },
        "courseD_collector_debugging2a_authored_hint": {
          "courseD_collector_debugging2a_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "courseD_collector_debugging2a_c": "What happens?\n\nWhat is supposed to happen?\n\nWhat does that tell you?"
        },
        "courseD_collector_debugging2a_2018_authored_hint": {
          "courseD_collector_debugging2a_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "courseD_collector_debugging2a_c": "What happens?\n\nWhat is supposed to happen?\n\nWhat does that tell you?"
        },
        "courseD_collector_debugging3_authored_hint": {
          "courseD_collector_debugging3_a": "Is there any place where Laurel does something that doesn't make sense? What happens when you change those blocks?",
          "courseD_collector_debugging3_b": "Try simplifying the code using nested loops."
        },
        "courseD_collector_debugging3_2018_authored_hint": {
          "courseD_collector_debugging3_a": "Is there any place where Laurel does something that doesn't make sense? What happens when you change those blocks?",
          "courseD_collector_debugging3_b": "Try simplifying the code using nested loops."
        },
        "courseD_collector_debugging3a_authored_hint": {
          "courseD_collector_debugging3_a": "Is there any place where Laurel does something that doesn't make sense? What happens when you change those blocks?"
        },
        "courseD_collector_debugging3a_2018_authored_hint": {
          "courseD_collector_debugging3_a": "Is there any place where Laurel does something that doesn't make sense? What happens when you change those blocks?"
        },
        "courseD_collector_debugging4_authored_hint": {
          "courseD_collector_debugging4_a": "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?",
          "courseD_collector_debugging4_b": "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!",
          "courseD_collector_debugging4_c": "This loop is only missing one block. Can you figure out which one?"
        },
        "courseD_collector_debugging4_2018_authored_hint": {
          "courseD_collector_debugging4_a": "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?",
          "courseD_collector_debugging4_b": "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!",
          "courseD_collector_debugging4_c": "This loop is only missing one block. Can you figure out which one?"
        },
        "courseD_collector_debugging4a_authored_hint": {
          "courseD_collector_debugging4_a": "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?",
          "courseD_collector_debugging4_b": "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
        },
        "courseD_collector_debugging4a_2018_authored_hint": {
          "courseD_collector_debugging4_a": "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?",
          "courseD_collector_debugging4_b": "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
        },
        "courseD_collector_debugging5_authored_hint": {
          "courseD_collector_debugging5_a": "Start by looking at just the first loop.\n\nWhat does it do?\n\nWhat is it supposed to do?\n\nWhat does that tell you?",
          "courseD_collector_debugging5_b": "Once you have the first loop the way you want it, what is left over in your code?"
        },
        "courseD_collector_debugging5_2018_authored_hint": {
          "courseD_collector_debugging5_a": "Start by looking at just the first loop.\n\nWhat does it do?\n\nWhat is it supposed to do?\n\nWhat does that tell you?",
          "courseD_collector_debugging5_b": "Once you have the first loop the way you want it, what is left over in your code?"
        },
        "courseD_collector_debugging5a_authored_hint": {
          "courseD_collector_debugging5a_a": "What does it do?\n\nWhat is it supposed to do?\n\nWhat does that tell you?",
          "courseD_collector_debugging5a_b": "Once you have the first line of treasure collected, what is left over in your code?"
        },
        "courseD_collector_debugging5a_2018_authored_hint": {
          "courseD_collector_debugging5a_a": "What does it do?\n\nWhat is it supposed to do?\n\nWhat does that tell you?",
          "courseD_collector_debugging5a_b": "Once you have the first line of treasure collected, what is left over in your code?"
        },
        "courseD_collector_debugging6_authored_hint": {
          "courseD_collector_debugging6_a": "Try running through the code using the \"Step\" button.  Is everything good at the first step?\n\nHow about the second?\n\nWhere do things go wrong?",
          "courseD_collector_debugging6_b": "It looks like all of the right steps are here, you just need more of them.  How can you repeat the `collect` action multiple times?"
        },
        "courseD_collector_debugging6_2018_authored_hint": {
          "courseD_collector_debugging6_a": "Try running through the code using the \"Step\" button.  Is everything good at the first step?\n\nHow about the second?\n\nWhere do things go wrong?",
          "courseD_collector_debugging6_b": "It looks like all of the right steps are here, you just need more of them.  How can you repeat the `collect` action multiple times?"
        },
        "courseD_collector_debugging6a_authored_hint": {
          "courseD_collector_debugging6_a": "Try running through the code using the \"Step\" button.  Is everything good at the first step?\n\nHow about the second?\n\nWhere do things go wrong?",
          "courseD_collector_debugging6_b": "It looks like all of the blocks you need are in the workspace. Try clicking \"start over\" if things get too confusing."
        },
        "courseD_collector_debugging6a_2018_authored_hint": {
          "courseD_collector_debugging6_a": "Try running through the code using the \"Step\" button.  Is everything good at the first step?\n\nHow about the second?\n\nWhere do things go wrong?",
          "courseD_collector_debugging6_b": "It looks like all of the blocks you need are in the workspace. Try clicking \"start over\" if things get too confusing."
        },
        "courseD_collector_debugging7_authored_hint": {
          "courseD_collector_debugging7_a": "Try running through the code using the \"Step\" button.  Is everything good at the first step?\n\nHow about the second?\n\nWhere do things go wrong?",
          "courseD_collector_debugging7_b": "If something needs to happen several times, try adding a `repeat` loop.",
          "courseD_collector_debugging7_c": "If you're having trouble, try writing the steps on a piece of paper and then putting the blocks into that order."
        },
        "courseD_collector_debugging8_authored_hint": {
          "courseD_collector_debugging8_a": "Do you see a pattern that you can simplify with a loop?",
          "courseD_collector_debugging8_b": "Try using a nested loop to make this code shorter."
        },
        "courseD_collector_debugging8_2018_authored_hint": {
          "courseD_collector_debugging8_a": "Do you see a pattern that you can simplify with a loop?",
          "courseD_collector_debugging8_b": "Try using a nested loop to make this code shorter."
        },
        "courseD_collector_debugging9_authored_hint": {
          "courseD_collector_debugging9_a": "There are several ways to solve this problem...but they all involve turns!",
          "courseD_collector_debugging9_b": "Figure out how you would solve the puzzle, then move step-by-step to try to make the code match what is in your head."
        },
        "courseD_collector_debugging9_2018_authored_hint": {
          "courseD_collector_debugging9_a": "There are several ways to solve this problem...but they all involve turns!",
          "courseD_collector_debugging9_b": "Figure out how you would solve the puzzle, then move step-by-step to try to make the code match what is in your head."
        },
        "courseD_collector_debugging_challenge2_authored_hint": {
          "courseD_collector_debugging_challenge2_a": "Start by collecting just **two** gems from each of the first **two** piles.\n\n![](https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04 AM copy.png)\nUse these blocks.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n  </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title name=\"DIR\">moveForward</title>\n                  </block>\n                  \n \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n    <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>",
          "courseD_collector_debugging_challenge2_b": "Next, collect the remaining gems in this row.\n\n![](https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04 AM.png)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n<block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>",
          "courseD_collector_debugging_challenge2_c": "Finally, collect the remaining treasure. Add these blocks to your program.\n\n<xml>\n  <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n              </block>\n      <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>",
          "courseD_collector_debugging_challenge2_d": "Here is the complete solution for this puzzle.\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat\">\n            <title name=\"TIMES\">4</title>\n            <statement name=\"DO\">\n              <block type=\"controls_repeat\">\n                <title name=\"TIMES\">2</title>\n                <statement name=\"DO\">\n                  <block type=\"maze_move\">\n                    <title name=\"DIR\">moveForward</title>\n                    <next>\n                      <block type=\"controls_repeat\">\n                        <title name=\"TIMES\">2</title>\n                        <statement name=\"DO\">\n                          <block type=\"collector_collect\"/>\n                        </statement>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <next>\n                  <block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseD_collector_debugging_challenge2_2018_authored_hint": {
          "courseD_collector_debugging_challenge2_a": "Start by collecting just **two** gems from each of the first **two** piles.\n\n![](https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04 AM copy.png)\nUse these blocks.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n  </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title name=\"DIR\">moveForward</title>\n                  </block>\n                  \n \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n    <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>",
          "courseD_collector_debugging_challenge2_b": "Next, collect the remaining gems in this row.\n\n![](https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04 AM.png)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n<block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>",
          "courseD_collector_debugging_challenge2_c": "Finally, collect the remaining treasure. Add these blocks to your program.\n\n<xml>\n  <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n              </block>\n      <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>",
          "courseD_collector_debugging_challenge2_d": "Here is the complete solution for this puzzle.\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat\">\n            <title name=\"TIMES\">4</title>\n            <statement name=\"DO\">\n              <block type=\"controls_repeat\">\n                <title name=\"TIMES\">2</title>\n                <statement name=\"DO\">\n                  <block type=\"maze_move\">\n                    <title name=\"DIR\">moveForward</title>\n                    <next>\n                      <block type=\"controls_repeat\">\n                        <title name=\"TIMES\">2</title>\n                        <statement name=\"DO\">\n                          <block type=\"collector_collect\"/>\n                        </statement>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <next>\n                  <block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseD_collector_nested_loops_challenge2_authored_hint": {
          "courseD_bee_nested_loops_challenge2_a": "Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!",
          "courseD_bee_nested_loops_challenge2_b": "To get all 4 gems, first use a loop to move away from the center. Turn left or right, then use a nested loop to move from the first pile of treasure to the second. If you repeat the nested loop enough times, the collector will move around the *entire* cave!",
          "courseD_bee_nested_loops_challenge2_c": "The shortest program that reaches all the treasure uses only one `collect` block and two turns.",
          "courseD_bee_nested_loops_challenge2_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_dropdown\">\n        <title name=\"TIMES\" config=\"3-10\">3</title>\n        <statement name=\"DO\">\n          <block type=\"maze_move\">\n            <title name=\"DIR\">moveForward</title>\n          </block>\n        </statement>\n        <next>\n          <block type=\"maze_turn\">\n            <title name=\"DIR\">turnLeft</title>\n            <next>\n              <block type=\"controls_repeat_dropdown\">\n                <title name=\"TIMES\" config=\"3-10\">3</title>\n                <statement name=\"DO\">\n                  <block type=\"collector_collect\">\n                    <next>\n                      <block type=\"controls_repeat_dropdown\">\n                        <title name=\"TIMES\" config=\"3-10\">3</title>\n                        <statement name=\"DO\">\n                          <block type=\"maze_move\">\n                            <title name=\"DIR\">moveForward</title>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnLeft</title>\n                            <next>\n                              <block type=\"controls_repeat_dropdown\">\n                                <title name=\"TIMES\" config=\"3-10\">3</title>\n                                <statement name=\"DO\">\n                                  <block type=\"maze_move\">\n                                    <title name=\"DIR\">moveForward</title>\n                                  </block>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseD_collector_nested_loops_challenge2_2018_authored_hint": {
          "courseD_bee_nested_loops_challenge2_a": "Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!",
          "courseD_bee_nested_loops_challenge2_b": "To get all 4 gems, first use a loop to move away from the center. Turn left or right, then use a nested loop to move from the first pile of treasure to the second. If you repeat the nested loop enough times, the collector will move around the *entire* cave!",
          "courseD_bee_nested_loops_challenge2_c": "The shortest program that reaches all the treasure uses only one `collect` block and two turns.",
          "courseD_bee_nested_loops_challenge2_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_dropdown\">\n        <title name=\"TIMES\" config=\"3-10\">3</title>\n        <statement name=\"DO\">\n          <block type=\"maze_move\">\n            <title name=\"DIR\">moveForward</title>\n          </block>\n        </statement>\n        <next>\n          <block type=\"maze_turn\">\n            <title name=\"DIR\">turnLeft</title>\n            <next>\n              <block type=\"controls_repeat_dropdown\">\n                <title name=\"TIMES\" config=\"3-10\">3</title>\n                <statement name=\"DO\">\n                  <block type=\"collector_collect\">\n                    <next>\n                      <block type=\"controls_repeat_dropdown\">\n                        <title name=\"TIMES\" config=\"3-10\">3</title>\n                        <statement name=\"DO\">\n                          <block type=\"maze_move\">\n                            <title name=\"DIR\">moveForward</title>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnLeft</title>\n                            <next>\n                              <block type=\"controls_repeat_dropdown\">\n                                <title name=\"TIMES\" config=\"3-10\">3</title>\n                                <statement name=\"DO\">\n                                  <block type=\"maze_move\">\n                                    <title name=\"DIR\">moveForward</title>\n                                  </block>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseD_collector_nested_loops_challenge2a_authored_hint": {
          "courseD_collector_nested_loops_challenge2a_a": "Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!",
          "courseD_collector_nested_loops_challenge2a_b": "Can you figure out how to get all four gems without using any more blocks than it takes to get two?"
        },
        "courseD_collector_ramp10_authored_hint": {
          "courseD_artist_ramp10_a": "Instead of using four `move forward` blocks for each side, try putting one `move forward` block inside of a `repeat` loop, like this:\n\n<xml><block type=\"controls_repeat\">\n                                            <title name=\"TIMES\">4</title>\n                                            <statement name=\"DO\">\n                                              <block type=\"maze_moveForward\"/>\n                                            </statement>\n                                          </block></xml>",
          "courseD_artist_ramp10_b": "Don't forget to collect one piece of treasure, then turn to start on a new side of the square!",
          "courseD_artist_ramp10_c": "If you want to simplify your code, you can put one loop inside of another! This is called a **nested loop**."
        },
        "courseD_collector_ramp8_authored_hint": {
          "courseD_collector_ramp8_a": "When you get to a square with treasure, use `collect` to pick it up. For this puzzle, you'll need to collect treasure more than once!",
          "courseD_collector_ramp8_b": "If you want to simplify your code more, you can actually put one `repeat` loop inside of another! This is called a **nested loop**."
        },
        "courseD_collector_ramp9_authored_hint": {
          "courseD_collector_ramp9_a": "Start by moving Laurel to the first treasure, then collecting it. Can you repeat this sequence to get the second pile?",
          "courseD_collector_ramp9_b": "If you want to simplify your code, you can put one repeat loop inside of another! This is called a **nested loop**."
        },
        "courseD_debugging_1_authored_hint": {
          "courseD_debugging_1_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "courseD_debugging_1_b": "Do you see any patterns that could be made more simple using a `repeat` loop?"
        },
        "courseD_debugging_2_authored_hint": {
          "courseD_debugging_2_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "courseD_debugging_2_b": "Do you see a pattern?  Try using nested loops to solve this puzzle."
        },
        "courseD_debugging_3_authored_hint": {
          "courseD_debugging_3_a": "Is there any place where the bee does something that doesn't make sense? What happens when you change those blocks?",
          "courseD_debugging_3_b": "Try simplifying the code using nested loops."
        },
        "courseD_debugging_4_authored_hint": {
          "courseD_debugging_4_a": "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?",
          "courseD_debugging_4_b": "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
        },
        "courseD_debugging_5_authored_hint": {
          "courseD_debugging_5_a": "Start by looking at just the first loop.\n\nWhat does it do?\n\nWhat is it supposed to do?\n\nWhat does that tell you?",
          "courseD_debugging_5_b": "Once you have the first loop the way you want it, what is left over in your code?",
          "courseD_debugging_5_c": "Try wrapping the leftover loop around the rest of your completed code.  Does is work now?\n\nIf not, what is still going wrong?"
        },
        "courseD_debugging_6_authored_hint": {
          "courseD_debugging_6_a": "Try running through the code using the \"Step\" button.  Is everything good at the first step?\n\nHow about the second?\n\nWhere do things go wrong?",
          "courseD_debugging_6_b": "It looks like all of the right steps are here, you just need more of them.  How can you repeat the `get nectar` and `make honey` actions multiple times?"
        },
        "courseD_farmer_condLoops1_authored_hint": {
          "courseD_farmer_condLoops1_a": "You will need to look for corn 5 times, using a repeat loop.",
          "courseD_farmer_condLoops1_b": "Make sure to use an `if at corn` block or you might try to pick something that's not there!"
        },
        "courseD_farmer_condLoops1_2018_authored_hint": {
          "courseD_farmer_condLoops1_a": "You will need to look for corn 5 times, using a repeat loop.",
          "courseD_farmer_condLoops1_b": "Make sure to use an `if at corn` block or you might try to pick something that's not there!"
        },
        "courseD_farmer_condLoops2_authored_hint": {
          "courseD_farmer_condLoops2_a": "The best way to do this is to nest `if` statements by placing one inside of the other.  ",
          "courseD_farmer_condLoops2_b": "For this puzzle, you should have one `if/else` statement and one plain `if` statement."
        },
        "courseD_farmer_condLoops2_2018_authored_hint": {
          "courseD_farmer_condLoops2_a": "The best way to do this is to nest `if` statements by placing one inside of the other.  ",
          "courseD_farmer_condLoops2_b": "For this puzzle, you should have one `if/else` statement and one plain `if` statement."
        },
        "courseD_farmer_condLoops3_authored_hint": {
          "courseD_farmer_condLoops3_a": "To get all of the items, try nesting `if` statements three deep.\n\nThis means you should put one `if` statement inside of another, then put a third `if` statement inside the second one.",
          "courseD_farmer_condLoops3_b": "For this puzzle, you should have two `if/else` statements and one plain `if` statement."
        },
        "courseD_farmer_condLoops3_2018_authored_hint": {
          "courseD_farmer_condLoops3_a": "To get all of the items, try nesting `if` statements three deep.\n\nThis means you should put one `if` statement inside of another, then put a third `if` statement inside the second one.",
          "courseD_farmer_condLoops3_b": "For this puzzle, you should have two `if/else` statements and one plain `if` statement."
        },
        "courseD_farmer_condLoops4_authored_hint": {
          "grade3_RunningFarm_4courseD_farmer_condLoops4": "No one knows how many heads of lettuce will grow from each sprout.\n\nUse a `while there is lettuce` loop to keep picking until each piece has been gathered.",
          "grade3_RunningFarm_4courseD_farmer_condLoops4_b": "The `while` loop will handle empty spaces as well! Since there is no lettuce, it will not pick any and let the code move on.",
          "grade3_RunningFarm_4courseD_farmer_condLoops4_c": "You can use either a `while path ahead` loop or a `repeat` loop to go through all of the crops."
        },
        "courseD_farmer_condLoops4_2018_authored_hint": {
          "grade3_RunningFarm_4courseD_farmer_condLoops4": "No one knows how many heads of lettuce will grow from each sprout.\n\nUse a `while there is lettuce` loop to keep picking until each piece has been gathered.",
          "grade3_RunningFarm_4courseD_farmer_condLoops4_b": "The `while` loop will handle empty spaces as well! Since there is no lettuce, it will not pick any and let the code move on.",
          "grade3_RunningFarm_4courseD_farmer_condLoops4_c": "You can use either a `while path ahead` loop or a `repeat` loop to go through all of the crops."
        },
        "courseD_farmer_condLoops4a_authored_hint": {
          "grade3_RunningFarm_4courseD_farmer_condLoops4": "No one knows how many heads of lettuce will grow from each sprout.\n\nUse a `while there is lettuce` loop to keep picking until each piece has been gathered."
        },
        "courseD_farmer_condLoops5_authored_hint": {
          "courseD_farmer_condLoops5_a": "There is a new loop: `repeat until at pumpkin`. Can you see how to use it in this puzzle?",
          "courseD_farmer_condLoops5_b": "There could be more than one corn or lettuce plant in each spot. Use a `while` loop to gather all of them!"
        },
        "courseD_farmer_condLoops5_2018_authored_hint": {
          "courseD_farmer_condLoops5_a": "There is a new loop: `repeat until at pumpkin`. Can you see how to use it in this puzzle?",
          "courseD_farmer_condLoops5_b": "There could be more than one corn or lettuce plant in each spot. Use a `while` loop to gather all of them!"
        },
        "courseD_farmer_condLoops6_authored_hint": {
          "courseD_farmer_condLoops6_a": "Use a `while there is corn` loop to make sure you get all of the corn along the way. This block won't do anything if there's no corn to pick.",
          "courseD_farmer_condLoops6_b": "Make sure to check `if` there's a path ahead before you take your next step!"
        },
        "courseD_farmer_condLoops6_2018_authored_hint": {
          "courseD_farmer_condLoops6_a": "Use a `while path ahead` loop to move the farmer down each piece of the spiral.",
          "courseD_farmer_condLoops6_b": "You only need to check for corn during most of the harvest.  Just pick one pumpkin at the very end of your program."
        },
        "courseD_farmer_condLoops7_authored_hint": {
          "courseD_farmer_condLoops7_a": "Notice that the easiest path to get to all of the crops is still a spiral.\n\n![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)",
          "courseD_farmer_condLoops7_b": "Try using `when path ahead` to keep the harvester moving the right number of steps."
        },
        "courseD_farmer_condLoops7_2018_authored_hint": {
          "courseD_farmer_condLoops7_a": "Notice that the easiest path to get to all of the crops is still a spiral.\n\n![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)",
          "courseD_farmer_condLoops7_b": "Try using `when path ahead` to keep the harvester moving the right number of steps."
        },
        "courseD_farmer_condLoops_challenge1_authored_hint": {
          "courseD_farmer_condLoops_challenge1_a": "The \"Step\" button could be very helpful in this challenge.",
          "courseD_farmer_condLoops_challenge1_b": "Normally you would just `pick pumpkin` if you are at a pumpkin. What else do you need to do if you're at a pumpkin?"
        },
        "courseD_farmer_condLoops_challenge1_2018_authored_hint": {
          "courseD_farmer_condLoops_challenge1_a": "The \"Step\" button could be very helpful in this challenge.",
          "courseD_farmer_condLoops_challenge1_b": "Normally you would just `pick pumpkin` if you are at a pumpkin. What else do you need to do if you're at a pumpkin?"
        },
        "courseD_farmer_condLoops_challenge2_authored_hint": {
          "courseD_farmer_condLoops_challenge2_a": "The amount of each vegetable in each space can change. A `while` loop can help!"
        },
        "courseD_farmer_condLoops_challenge2_2018_authored_hint": {
          "courseD_farmer_condLoops_challenge2_a": "The amount of each vegetable in each space can change. A `while` loop can help!"
        },
        "courseD_farmer_conditionals4_authored_hint": {
          "courseD_farmer_conditionals4_a": "Instead of using a `repeat` loop, use a `while` loop to keep digging until the pile is gone."
        },
        "courseD_farmer_conditionals5_authored_hint": {
          "courseD_farmer_conditionals5a": "Try nesting a `while` loop inside of a `repeat` loop."
        },
        "courseD_farmer_conditionals6_authored_hint": {
          "courseD_farmer_conditionals6_a": "Make sure you're using the `while` loop to figure out how many times to fill each hole.",
          "courseD_farmer_conditionals6_b": "Notice that the farmer needs to move forward and down several times in a stair-step pattern."
        },
        "courseD_farmer_conditionals7_authored_hint": {
          "courseD_farmer_conditionals8_a": "The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path."
        },
        "courseD_farmer_conditionals8_authored_hint": {
          "courseD_farmer_conditionals8_a": "You are going to need to use more than one `while` loop.",
          "courseD_farmer_conditionals8_b": "Every hole is at the end of a path, so use `while path ahead` before using `while there is a hole`.",
          "courseD_farmer_conditionals8_c": "Notice that you need to repeat the `while path ahead`, `while there is a hole` code six times."
        },
        "courseD_farmer_while1_authored_hint": {
          "courseD_farmer_while1_a": "You will need to move forward four times to get to the pile. Can you use a `repeat` loop for this?",
          "courseD_farmer_while1_b": "Use the `remove 1` block when you are standing on the pile of dirt to remove it."
        },
        "courseD_farmer_while1_2018_authored_hint": {
          "courseD_farmer_while1_a": "You will need to move forward four times to get to the pile. Can you use a `repeat` loop for this?",
          "courseD_farmer_while1_b": "Use the `remove 1` block when you are standing on the pile of dirt to remove it."
        },
        "courseD_farmer_while2_authored_hint": {
          "courseD_farmer_while2_a": "You will only need to move once to get to the hole.",
          "courseD_farmer_while2_b": "You will need the `fill 1` block six times. Can you use a loop to make this simpler?"
        },
        "courseD_farmer_while2_2018_authored_hint": {
          "courseD_farmer_while2_a": "You will only need to move once to get to the hole.",
          "courseD_farmer_while2_b": "You will need the `fill 1` block six times. Can you use a loop to make this simpler?"
        },
        "courseD_farmer_while3_authored_hint": {
          "courseD_farmer_while3_a": "A loop can help you simplify your code here.",
          "courseD_farmer_while3_b": "You shouldn't need any `turn` blocks to get to the pile."
        },
        "courseD_farmer_while3_2018_authored_hint": {
          "courseD_farmer_while3_a": "A loop can help you simplify your code here.",
          "courseD_farmer_while3_b": "You shouldn't need any `turn` blocks to get to the pile."
        },
        "courseD_farmer_while4_authored_hint": {
          "courseD_farmer_conditionals4_a": "Instead of using a `repeat` loop, use a `while` loop to keep digging until the pile is gone.",
          "courseD_farmer_conditionals4_b": "This looks very similar to an earlier puzzle, the only difference is which loop you need."
        },
        "courseD_farmer_while4_2018_authored_hint": {
          "courseD_farmer_conditionals4_a": "Instead of using a `repeat` loop, use a `while` loop to keep digging until the pile is gone.",
          "courseD_farmer_conditionals4_b": "This looks very similar to an earlier puzzle, the only difference is which loop you need."
        },
        "courseD_farmer_while5_authored_hint": {
          "courseD_farmer_conditionals5a_a": "Try nesting a `while` loop inside of a `repeat` loop.",
          "courseD_farmer_conditionals5a_b": "The farmer needs to move forward a total of five times to get to the end of the row. What else does the farmer need to do?",
          "courseD_farmer_conditionals5a_c": "Move forward 5 times. Each time you move forward, remove the pile of dirt by using the `while there is a pile` block."
        },
        "courseD_farmer_while5_2018_authored_hint": {
          "courseD_farmer_conditionals5a_a": "Try nesting a `while` loop inside of a `repeat` loop.",
          "courseD_farmer_conditionals5a_b": "The farmer needs to move forward a total of five times to get to the end of the row. What else does the farmer need to do?",
          "courseD_farmer_conditionals5a_c": "Move forward 5 times. Each time you move forward, remove the pile of dirt by using the `while there is a pile` block."
        },
        "courseD_farmer_while6_authored_hint": {
          "courseD_farmer_conditionals6_a": "Make sure you're using the `while` loop to figure out how many times to fill each hole.",
          "courseD_farmer_conditionals6_b": "Notice that the farmer needs to move forward and down several times in a stair-step pattern.",
          "courseD_farmer_conditionals6_c": "The stair step pattern uses the following blocks\n  - move forward\n  - fill hole\n  - turn right\n  - move forward\n  - fill hole\n  - turn left\n\nHow many times do you need to use this stair step pattern?\n\nMake sure you are using the `while there is a hole` to fill the hole."
        },
        "courseD_farmer_while6_2018_authored_hint": {
          "courseD_farmer_conditionals6_a": "Make sure you're using the `while` loop to figure out how many times to fill each hole.",
          "courseD_farmer_conditionals6_b": "Notice that the farmer needs to move forward and down several times in a stair-step pattern.",
          "courseD_farmer_conditionals6_c": "The stair step pattern uses the following blocks\n  - move forward\n  - fill hole\n  - turn right\n  - move forward\n  - fill hole\n  - turn left\n\nHow many times do you need to use this stair step pattern?\n\nMake sure you are using the `while there is a hole` to fill the hole."
        },
        "courseD_farmer_while7_authored_hint": {
          "courseD_farmer_conditionals8_a": "The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.",
          "courseD_farmer_conditionals8_b": "Putting a `while path ahead` loop inside of a repeat loop can help you in this puzzle.",
          "courseD_farmer_conditionals8_c": "What do you need to do at the end of each path?"
        },
        "courseD_farmer_while7_2018_authored_hint": {
          "courseD_farmer_conditionals8_a": "The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.",
          "courseD_farmer_conditionals8_b": "Putting a `while path ahead` loop inside of a repeat loop can help you in this puzzle.",
          "courseD_farmer_conditionals8_c": "What do you need to do at the end of each path?"
        },
        "courseD_farmer_while8_authored_hint": {
          "courseD_farmer_conditionals8_a": "You are going to need to use more than one `while` loop.",
          "courseD_farmer_conditionals8_b": "Every hole is at the end of a path, so use `while path ahead` before using `while there is a hole`.",
          "courseD_farmer_conditionals8_c": "Notice that you need to repeat the `while path ahead`, `while there is a hole` code six times."
        },
        "courseD_farmer_while8_2018_authored_hint": {
          "courseD_farmer_conditionals8_a": "You are going to need to use more than one `while` loop.",
          "courseD_farmer_conditionals8_b": "Every hole is at the end of a path, so use `while path ahead` before using `while there is a hole`.",
          "courseD_farmer_conditionals8_c": "Notice that you need to repeat the `while path ahead`, `while there is a hole` code six times."
        },
        "courseD_farmer_while_challenge1_authored_hint": {
          "courseD_farmer_while_challenge1_a": "Each hole or pile is located one space **backward** from the end of the path.",
          "courseD_farmer_while_challenge1_b": "If you use a `while` loop, you can tell the farmer to remove a pile or fill a hole, even if one isn't there. That means you can program her to remove any dirt or fill any hole, no matter where she is.",
          "courseD_farmer_conditionals8_c": "It is possible to solve this without using any `repeat` loops. To do this, you will need to use four `while` loops."
        },
        "courseD_farmer_while_challenge1_2018_authored_hint": {
          "courseD_farmer_while_challenge1_a": "Each hole or pile is located one space **backward** from the end of the path.",
          "courseD_farmer_while_challenge1_b": "If you use a `while` loop, you can tell the farmer to remove a pile or fill a hole, even if one isn't there. That means you can program her to remove any dirt or fill any hole, no matter where she is.",
          "courseD_farmer_conditionals8_c": "It is possible to solve this without using any `repeat` loops. To do this, you will need to use four `while` loops."
        },
        "courseD_farmer_while_challenge2_authored_hint": {
          "courseD_farmer_while_challenge1_a": "Each hole or pile is located one space **backward** from the end of the path.",
          "courseD_farmer_while_challenge1_b": "If you use a `while` loop, you can tell the farmer to remove a pile or fill a hole, even if one isn't there. That means you can program her to remove any dirt and fill any hole, while standing in the same place.",
          "courseD_farmer_conditionals8_c": "It is possible to solve this without using any `repeat` loops. To do this, you will need to use four `while` loops."
        },
        "courseD_farmer_while_challenge2_2018_authored_hint": {
          "courseD_farmer_while_challenge1_a": "Each hole or pile is located one space **backward** from the end of the path.",
          "courseD_farmer_while_challenge1_b": "If you use a `while` loop, you can tell the farmer to remove a pile or fill a hole, even if one isn't there. That means you can program her to remove any dirt and fill any hole, while standing in the same place.",
          "courseD_farmer_conditionals8_c": "It is possible to solve this without using any `repeat` loops. To do this, you will need to use four `while` loops."
        },
        "courseD_harvester_nested_loops_challenge1-broken_authored_hint": {
          "courseD_harvester_nested_loops_challenge1_a": "You have probably already used a loop to create a zig-zag pattern. If you remember that algorithm, you can make a few additions to it here."
        },
        "courseD_harvester_nested_loops_challenge1_authored_hint": {
          "courseD_harvester_nested_loops_challenge1_a": "Try following this path to reach all of the corn! ",
          "courseD_harvester_nested_loops_challenge1_b": "To collect more than one piece of corn, you need to use `pick corn` more than one time.",
          "courseD_harvester_nested_loops_challenge1_c": "You will need to put a small loop inside of your main loop to solve this puzzle!"
        },
        "courseD_harvester_nested_loops_challenge1_2018_authored_hint": {
          "courseD_harvester_nested_loops_challenge1_a": "Try following this path to reach all of the corn! ",
          "courseD_harvester_nested_loops_challenge1_b": "To collect more than one piece of corn, you need to use `pick corn` more than one time.",
          "courseD_harvester_nested_loops_challenge1_c": "You will need to put a small loop inside of your main loop to solve this puzzle!"
        },
        "courseD_iceage_loops1_authored_hint": {
          "courseD_iceage_loops1_a": "Watch out for broken ice! Scrat will fall right through!",
          "courseD_iceage_loops1_b": "You will have to use this block:\n\n<xml><block type=\"maze_moveForward\"/></xml>"
        },
        "courseD_iceage_loops10_authored_hint": {
          "courseB_iceage_loops10_a": "Watch out for broken ice! Scrat will fall into the water!",
          "courseB_iceage_loops10_b": "Try saying the steps out loud or writing them down on a piece of paper. Do you see any patterns?",
          "courseB_iceage_loops10_c": "This is a long puzzle! Follow this path."
        },
        "courseD_iceage_loops2_authored_hint": {
          "courseD_iceage_loops2_a": "Break this puzzle into two pieces, one before the corner, and one after the corner.",
          "courseD_iceage_loops2_b": "If you get stuck, try saying the steps out loud.",
          "courseD_iceage_loops2_c": "Follow this path to get Scrat to the acorn."
        },
        "courseD_iceage_loops3_authored_hint": {
          "courseB_iceage_loops3_b": "To repeat code, drag out a `repeat` loop, then put the block you want repeated inside."
        },
        "courseD_iceage_loops4_authored_hint": {
          "courseD_iceage_loops4_a": "Don't be afraid to run your code and see what happens!",
          "courseD_iceage_loops4_b": "Try writing down the steps Scrat would take to get to the acorn.  Do you see a pattern?",
          "courseD_iceage_loops4_c": "This is the path Scrat should take."
        },
        "courseD_iceage_loops6_authored_hint": {
          "courseD_iceage_loops6_a": "Your final code will have **three** `move forward` blocks.",
          "courseD_iceage_loops6_b": "You only need to add **one** more loop!",
          "courseD_iceage_loops6_c": "Your final path should look like this."
        },
        "courseD_iceage_loops7_authored_hint": {
          "courseB_iceage_loops7_a": "If you get stuck, try writing steps down on a piece of paper. Do you see a pattern?",
          "courseB_iceage_loops7_b": "This is the path Scrat should take to get to the acorn."
        },
        "courseD_iceage_loops8_authored_hint": {
          "courseD_iceage_loops8_a": "Are the `turn` blocks right? What else can you change?",
          "courseD_iceage_loops8_b": "The first loop should repeat **3** times, the second should repeat **5** times, the third loop should repeat **4** times, and the last loop should repeat **4** times.",
          "courseD_iceage_loops8_c": "Use loops to help Scrat follow this path."
        },
        "courseD_iceage_loops9_authored_hint": {
          "courseD_iceage_loops9_a": "Having trouble? Try breaking this puzzle into smaller pieces. Don't be afraid to run your puzzle as you code!",
          "courseD_iceage_loops9_b": "Your final code should have **4** loops.",
          "courseD_iceage_loops9_c": "Scrat should follow this path to get the acorn."
        },
        "courseD_maze_loops_challenge1_authored_hint": {
          "courseD_bee_nested_loops_challenge1_a": "Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!",
          "courseD_bee_nested_loops_challenge1_b": "To get all 4 gems, first use a loop to move away from the center. Turn left or right, then use a nested loop to move from the first pile of treasure to the second. If you repeat the nested loop enough times, the collector will move around the *entire* cave!",
          "courseD_bee_nested_loops_challenge1_c": "The shortest program that reaches all the treasure uses only one `collect` block and two turns."
        },
        "courseD_maze_nestedLoops3_authored_hint": {
          "courseD_maze_nestedLoops3_a": "To solve this puzzle, you will need to \"nest\" one `repeat` loop inside of another `repeat` loop.",
          "courseD_maze_nestedLoops3_b": "Can't figure out where to put the loops? Try writing the code step-by-step and look for a pattern.",
          "courseD_maze_nestedLoops3_c": "Try writing code for one straight piece of path and a turn. Can you repeat this to get to the sunflower?"
        },
        "courseD_maze_nestedLoops3_2018_authored_hint": {
          "courseD_maze_nestedLoops3_a": "To solve this puzzle, you will need to \"nest\" one `repeat` loop inside of another `repeat` loop.",
          "courseD_maze_nestedLoops3_b": "Can't figure out where to put the loops? Try writing the code step-by-step and look for a pattern.",
          "courseD_maze_nestedLoops3_c": "Try writing code for one straight piece of path and a turn. Can you repeat this to get to the sunflower?"
        },
        "courseD_maze_nestedLoops4_authored_hint": {
          "courseD_maze_nestedLoops4_a": "Try using this path through the maze.\n\n![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)",
          "courseD_maze_nestedLoops4_b": "If the loop pattern is hard to see, try coding it all out first and see what code repeats over and over before you put the loops in.",
          "courseD_maze_nestedLoops4_c": "Try using one `repeat` loop inside of another to cut down on the amount of code you need."
        },
        "courseD_maze_nestedLoops4_2018_authored_hint": {
          "courseD_maze_nestedLoops4_a": "Try using this path through the maze.\n\n![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)",
          "courseD_maze_nestedLoops4_b": "If the loop pattern is hard to see, try coding it all out first and see what code repeats over and over before you put the loops in.",
          "courseD_maze_nestedLoops4_c": "Try using one `repeat` loop inside of another to cut down on the amount of code you need."
        },
        "courseD_maze_nestedLoops5_authored_hint": {
          "courseD_maze_nestedLoops5_a": "Look for a stair-step pattern in this maze to find where a nested loop can be used.",
          "courseD_maze_nestedLoops5_b": "Can't figure out where to put the loops? Try writing the code step-by-step and look for a pattern."
        },
        "courseD_maze_nestedLoops5_2018_authored_hint": {
          "courseD_maze_nestedLoops5_a": "Look for a stair-step pattern in this maze to find where a nested loop can be used.",
          "courseD_maze_nestedLoops5_b": "Can't figure out where to put the loops? Try writing the code step-by-step and look for a pattern."
        },
        "courseD_maze_nestedLoops6_authored_hint": {
          "courseD_maze_nestedLoops6_a": "If you are stuck, try writing out the code out on paper without loops first and look for patterns.",
          "courseD_maze_nestedLoops6_b": "Nesting `repeat` loops can help decrease the number of blocks used.",
          "courseD_maze_nestedLoops6_c": "It will take two sets of nested `repeat` loops to solve this puzzle."
        },
        "courseD_maze_nestedLoops6_2018_authored_hint": {
          "courseD_maze_nestedLoops6_a": "If you are stuck, try writing out the code out on paper without loops first and look for patterns.",
          "courseD_maze_nestedLoops6_b": "Nesting `repeat` loops can help decrease the number of blocks used.",
          "courseD_maze_nestedLoops6_c": "It will take two sets of nested `repeat` loops to solve this puzzle."
        },
        "courseD_maze_ramp1_authored_hint": {
          "courseC_maze_programming1_a": "If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click \"Run\" again.",
          "courseC_maze_programming1_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_maze_ramp1_2018_authored_hint": {
          "courseC_maze_programming1_a": "If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click \"Run\" again.",
          "courseC_maze_programming1_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_maze_ramp2_authored_hint": {
          "courseC_maze_programming2_a": "To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.",
          "courseC_maze_programming2_b": "Make sure all 3 blocks are clicked together and attached to the `when run` block."
        },
        "courseD_maze_ramp2_2018_authored_hint": {
          "courseC_maze_programming2_a": "To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.",
          "courseC_maze_programming2_b": "Make sure all 3 blocks are clicked together and attached to the `when run` block."
        },
        "courseD_maze_ramp3_authored_hint": {
          "courseC_maze_programming3_a": "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
        },
        "courseD_maze_ramp3_2018_authored_hint": {
          "courseC_maze_programming3_a": "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
        },
        "courseD_maze_ramp4_authored_hint": {
          "courseC_maze_programming4_a": "You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.",
          "courseC_maze_programming4_b": "To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig."
        },
        "courseD_maze_ramp4_2018_authored_hint": {
          "courseC_maze_programming4_a": "You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.",
          "courseC_maze_programming4_b": "To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig."
        },
        "courseD_maze_ramp5_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseC_maze_programming5_b": "Remember that turns are from the bird's perspective.",
          "courseC_maze_programming5_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_maze_ramp5_2018_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseC_maze_programming5_b": "Remember that turns are from the bird's perspective.",
          "courseC_maze_programming5_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_maze_ramp5a_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseC_maze_programming5_b": "Remember that turns are from the bird's perspective.",
          "courseC_maze_programming5_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_maze_ramp5a_2018_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseC_maze_programming5_b": "Remember that turns are from the bird's perspective.",
          "courseC_maze_programming5_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_maze_ramp5b_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseC_maze_programming5_b": "Remember that turns are from the bird's perspective.",
          "courseC_maze_programming5_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_maze_ramp5b_2018_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseC_maze_programming5_b": "Remember that turns are from the bird's perspective.",
          "courseC_maze_programming5_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_maze_ramp6_authored_hint": {
          "courseC_maze_programming6_a": "There are two ways to solve this puzzle!",
          "courseC_maze_programming6_b": "The bird starts facing a wall, so remember to turn before you move.",
          "courseC_maze_programming6_c": "Remember you can write one piece of the code at a time, then run it to figure out where you need to go from there."
        },
        "courseD_maze_ramp6a_authored_hint": {
          "courseC_maze_programming6a_a": "Use a `repeat` loop to get this bird moving!"
        },
        "courseD_maze_ramp7_authored_hint": {
          "courseD_maze_ramp7_b": "Don't forget to use the \"Step\" button to go through block by block and look for errors.",
          "courseD_maze_ramp7_a": "Use repeat blocks to run either a single block or a chunk of code over and over.",
          "courseD_maze_ramp7_c": "If you want to simplify your code, you can put one repeat loop inside of another! This is called a **nested loop**."
        },
        "courseD_maze_until1_authored_hint": {
          "courseD_maze_until1_a": "Are there any sequences you can loop to make your code shorter?",
          "courseD_maze_until1_b": "Try using a nested loop to solve this puzzle."
        },
        "courseD_maze_until1_2018_authored_hint": {
          "courseD_maze_until1_a": "Are there any sequences you can loop to make your code shorter?",
          "courseD_maze_until1_b": "Try using a nested loop to solve this puzzle."
        },
        "courseD_maze_until2_authored_hint": {
          "courseD_maze_until2_a": "An `until pig` loop will help you keep going until you succeed!"
        },
        "courseD_maze_until3_authored_hint": {
          "courseD_maze_until3_a": "- What does your code do?\n- What is it supposed to do?\n- What does that tell you?",
          "courseD_maze_until3_b": "If you are getting stuck, try writing out the steps on a piece of paper and looking for places where they repeat.",
          "courseD_maze_until3_c": "Is there a stair step pattern you can follow for this puzzle?",
          "courseD_maze_until3_d": "Don't forget to use the `repeat until` block to make your code shorter."
        },
        "courseD_maze_until3_2018_authored_hint": {
          "courseD_maze_until3_a": "- What does your code do?\n- What is it supposed to do?\n- What does that tell you?",
          "courseD_maze_until3_b": "If you are getting stuck, try writing out the steps on a piece of paper and looking for places where they repeat.",
          "courseD_maze_until3_c": "Is there a stair step pattern you can follow for this puzzle?",
          "courseD_maze_until3_d": "Don't forget to use the `repeat until` block to make your code shorter."
        },
        "courseD_maze_until4_authored_hint": {
          "courseD_maze_until4_a": "Use the \"Step\" button to go through your code line by line.\n\n- Does everything work at the first step?\n- Does everything work at the second step?\n- Where does it go wrong?",
          "courseD_maze_until4_b": "Is there a stair step pattern you can follow for this puzzle?",
          "courseD_maze_until4_c": "Don't forget to use the `repeat until` block to make your code shorter."
        },
        "courseD_maze_until4_2018_authored_hint": {
          "courseD_maze_until4_a": "Use the \"Step\" button to go through your code line by line.\n\n- Does everything work at the first step?\n- Does everything work at the second step?\n- Where does it go wrong?",
          "courseD_maze_until4_b": "Is there a stair step pattern you can follow for this puzzle?",
          "courseD_maze_until4_c": "Don't forget to use the `repeat until` block to make your code shorter."
        },
        "courseD_maze_until5_authored_hint": {
          "courseD_maze_until5_a": "Don't forget to use `if path to the left` to keep the zombie checking for a place to turn.",
          "courseD_maze_until5_b": "To use only one `move forward`, put it inside the `repeat until sunflower` block.",
          "courseD_maze_until5_c": "After each step, the zombie should check whether there is a path to the left. What should he do if he finds one?"
        },
        "courseD_maze_until5_2018_authored_hint": {
          "courseD_maze_until5_b": "To use only one `move forward`, put it inside the `repeat until sunflower` block."
        },
        "courseD_maze_until6_authored_hint": {
          "courseD_maze_until6_a": "This time, try the `if path to the right` to keep the zombie on track.",
          "courseD_maze_until6_b": "To use only one `move forward`, put it inside the `repeat until sunflower` block.",
          "courseD_maze_until6_c": "Although there are more turns here than the last puzzle, your code can be almost identical because of the `repeat until` block!"
        },
        "courseD_maze_until6_2018_authored_hint": {
          "courseD_maze_until6_b": "To use only one `move forward`, put it inside the `repeat until sunflower` block."
        },
        "courseD_maze_until7_authored_hint": {
          "courseD_maze_until7_a": "You don't need your code to be any longer than last time, just because the maze is!",
          "courseD_maze_until7_b": "Although there are more turns here than the last puzzle, your code can be almost identical because of the `repeat until` block!",
          "courseD_maze_until7_c": "Remember to check for paths to the left, because turning right will take you down the wrong path!"
        },
        "courseD_maze_until7_2018_authored_hint": {
          "courseD_maze_until7_a": "You don't need your code to be any longer than last time, just because the maze is!",
          "courseD_maze_until7_b": "Although there are more turns here than the last puzzle, your code can be almost identical because of the `repeat until` block!"
        },
        "courseD_maze_until8_authored_hint": {
          "courseD_maze_until8_a": "Make sure you're using an `if/else` block to keep the zombie headed the right direction.",
          "courseD_maze_until8_b": "With your `if/else` block: if there is a path ahead, what should you do?",
          "courseD_maze_until8_c": "With your `if/else` block: if there is not a path ahead, which way should you turn?"
        },
        "courseD_maze_until8_2018_authored_hint": {
          "courseD_maze_until8_a": "Make sure you're using an `if/else` block to keep the zombie headed the right direction.",
          "courseD_maze_until8_b": "With your `if/else` block: if there is a path ahead, what should you do?",
          "courseD_maze_until8_c": "With your `if/else` block: if there is not a path ahead, which way should you turn?"
        },
        "courseD_maze_until9_authored_hint": {
          "courseD_maze_until8_a": "Using `if path ahead` will keep you going forward whenever possible, helping you miss the paths with chompers.",
          "courseD_maze_until8_b": "Which direction should you turn if there is no path forward?",
          "courseD_maze_until8_c": "Remember to use the `repeat until` block to get you to the sunflower!"
        },
        "courseD_maze_until9_2018_authored_hint": {
          "courseD_maze_until8_c": "Remember to use the `repeat until` block to get you to the sunflower!"
        },
        "courseD_playLab_cond1_authored_hint": {
          "courseD_playLab_cond1_a": "To solve this challenge, attach the `move actor 1 up` block to the `when up arrow` event, then do the same for every other direction.",
          "courseD_playLab_cond1_b": "Use the drop down menus on the `when arrow` and `move actor` blocks to change which direction they go.",
          "courseD_playLab_cond1_c": "Remember to move Pegleg to both of the flags once you click \"Run\"!"
        },
        "courseD_playLab_cond1_2018_authored_hint": {
          "courseD_playLab_cond1_a": "To solve this challenge, attach the `move actor 1 up` block to the `when up arrow` event, then do the same for every other direction.",
          "courseD_playLab_cond1_b": "Use the drop down menus on the `when arrow` and `move actor` blocks to change which direction they go.",
          "courseD_playLab_cond1_c": "Remember to move Pegleg to both of the flags once you click \"Run\"!"
        },
        "courseD_playLab_cond2_authored_hint": {
          "courseD_playLab_cond2_a": "To succeed with this puzzle, use the `score point` block beneath the `when actor 1 touches actor 2` event."
        },
        "courseD_playLab_cond2_2018_authored_hint": {
          "courseD_playLab_cond2_a": "To succeed with this puzzle, use the `score point` block beneath the `when actor 1 touches actor 2` event."
        },
        "courseD_playLab_cond3_authored_hint": {
          "courseD_playLab_cond3_a": "You will need to add two blocks to your `repeat forever` loop.  One will choose a random emotion for the dragon (actor 2) and the other will wait 1 second before going through the loop again."
        },
        "courseD_playLab_cond3_2018_authored_hint": {
          "courseD_playLab_cond3_a": "You will need to add two blocks to your `repeat forever` loop.  One will choose a random emotion for the dragon (actor 2) and the other will wait 1 second before going through the loop again."
        },
        "courseD_playLab_cond3b_authored_hint": {
          "courseD_playLab_cond3b_a": "You will need to add blocks to your `repeat forever` loop to make the dragon continue to move up and down"
        },
        "courseD_playLab_cond4_authored_hint": {
          "courseD_playLab_cond4_a": "You will want to use the `when run` event to get the ninja to chase the pirate.",
          "courseD_playLab_cond4_b": "There is a special block called `set every masked ninja to chase actor` that will keep the ninja hot on the pirate's trail!",
          "courseD_playLab_cond4_c": "Put the `end game as a loss` block underneath the `when actor 1 touches actor 3` event."
        },
        "courseD_playLab_cond4_2018_authored_hint": {
          "courseD_playLab_cond4_a": "You will want to use the `when run` event to get the ninja to chase the pirate.",
          "courseD_playLab_cond4_b": "There is a special block called `set every masked ninja to chase actor` that will keep the ninja hot on the pirate's trail!",
          "courseD_playLab_cond4_c": "Put the `end game as a loss` block underneath the `when actor 1 touches actor 3` event."
        },
        "courseD_playLab_cond5_authored_hint": {
          "courseD_playLab_cond5_a": "Use an `if` statement that compares whether `score` is `>` 5 to solve this challenge.",
          "courseD_playLab_cond5_b": "You can have more than one `repeat forever` loop in the workspace."
        },
        "courseD_playLab_cond5_2018_authored_hint": {
          "courseD_playLab_cond5_a": "Use an `if` statement that compares whether `score` is `>` 5 to solve this challenge.",
          "courseD_playLab_cond5_b": "You can have more than one `repeat forever` loop in the workspace."
        },
        "courseD_playLab_cond6_authored_hint": {
          "courseD_playLab_cond6_a": "Add the `set masked ninja speed` block to the beginning of the program to help slow the ninja down.",
          "courseD_playLab_cond6_b": "You will need to use an `if actor 1 y position > 255` block inside of a `repeat forever` block to always check if the pirate is below the octopuses."
        },
        "courseD_playLab_cond6_2018_authored_hint": {
          "courseD_playLab_cond6_a": "Add the `set masked ninja speed` block to the beginning of the program to help slow the ninja down.",
          "courseD_playLab_cond6_b": "You will need to use an `if actor 1 y position > 255` block inside of a `repeat forever` block to always check if the pirate is below the octopuses."
        },
        "courseD_playLab_cond6a_authored_hint": {
          "courseD_playLab_cond6_c": "Add a `wait 1 second` block to the top of the `repeat forever` loop that checks the pirate position (but not inside the `if` statement) to keep points from being removed too quickly."
        },
        "courseD_playLab_cond6a_2018_authored_hint": {
          "courseD_playLab_cond6_c": "Add a `wait 1 second` block to the top of the `repeat forever` loop that checks the pirate position (but not inside the `if` statement) to keep points from being removed too quickly."
        },
        "courseD_playLab_cond6cloneForTest_authored_hint": {
          "courseD_playLab_cond6_a": "Add the `set masked ninja speed` block to the beginning of the program to help slow the ninja down.",
          "courseD_playLab_cond6_b": "You will need to use an `if actor 1 y position > 255` block inside of a `repeat forever` block to always check if the pirate is below the octopuses.",
          "courseD_playLab_cond6_c": "Add a `wait 1 second` block to the top of the `repeat forever` loop that checks the pirate position (but not inside the `if` statement) to keep points from being removed too quickly."
        },
        "courseD_scrat_ramp1_authored_hint": {
          "courseC_maze_programming1_a": "If Scrat isn't getting to the acorn, make sure all three of the blocks have been fully snapped together, then click \"Run\" again.",
          "courseC_maze_programming1_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_scrat_ramp1_2018_authored_hint": {
          "courseC_maze_programming1_a": "If Scrat isn't getting to the acorn, make sure all three of the blocks have been fully snapped together, then click \"Run\" again.",
          "courseC_maze_programming1_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_scrat_ramp2_authored_hint": {
          "courseC_maze_programming2_a": "To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.",
          "courseC_maze_programming2_b": "Make sure all three `move forward` blocks are attached to the `when run` block."
        },
        "courseD_scrat_ramp2_2018_authored_hint": {
          "courseC_maze_programming2_a": "To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.",
          "courseC_maze_programming2_b": "Make sure all three `move forward` blocks are attached to the `when run` block."
        },
        "courseD_scrat_ramp3_authored_hint": {
          "courseC_maze_programming3_a": "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n",
          "courseC_maze_programming3_b": "Remember that turns to the right and left are from Scrat's perspective."
        },
        "courseD_scrat_ramp3_2018_authored_hint": {
          "courseC_maze_programming3_a": "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n",
          "courseC_maze_programming3_b": "Remember that turns to the right and left are from Scrat's perspective."
        },
        "courseD_scrat_ramp4_authored_hint": {
          "courseC_maze_programming4_a": "You can turn right or left from Scrat's point of view. If you are facing right, turning right will make you point downwards.",
          "courseC_maze_programming4_b": "To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the acorn.",
          "courseC_maze_programming4_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_scrat_ramp4_2018_authored_hint": {
          "courseC_maze_programming4_a": "You can turn right or left from Scrat's point of view. If you are facing right, turning right will make you point downwards.",
          "courseC_maze_programming4_b": "To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the acorn.",
          "courseC_maze_programming4_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_scrat_ramp5_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseC_maze_programming5_b": "How far do you need to move to get to the corner?",
          "courseC_maze_programming5_c": "You will need to turn left at the corner to get to the acorn."
        },
        "courseD_scrat_ramp5_2018_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseC_maze_programming5_b": "How far do you need to move to get to the corner?",
          "courseC_maze_programming5_c": "You will need to turn left at the corner to get to the acorn."
        },
        "courseD_scrat_ramp6_authored_hint": {
          "courseC_maze_programming6a_a": "Use a `repeat` loop to get Scrat moving!"
        },
        "courseD_scrat_ramp6_2018_authored_hint": {
          "courseC_maze_programming6a_a": "Use a `repeat` loop to get Scrat moving!"
        },
        "courseD_scrat_ramp7_authored_hint": {
          "courseD_scrat_programming6_a": "There are two ways to solve this puzzle!",
          "courseD_scrat_programming6_b": "Remember to turn first before moving, since Scrat is facing the wrong direction.",
          "courseD_scrat_programming6_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_scrat_ramp7_2018_authored_hint": {
          "courseD_scrat_programming6_a": "There are two ways to solve this puzzle!",
          "courseD_scrat_programming6_b": "Remember to turn first before moving, since Scrat is facing the wrong direction.",
          "courseD_scrat_programming6_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_scrat_ramp8_authored_hint": {
          "courseD_maze_ramp7_b": "Don't forget to use the \"Step\" button to go through block by block and look for errors.",
          "courseD_maze_ramp7_a": "Use repeat blocks to run either a single block or a chunk of code over and over.",
          "courseD_maze_ramp7_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseD_scrat_ramp8_2018_authored_hint": {
          "courseD_maze_ramp7_b": "Don't forget to use the \"Step\" button to go through block by block and look for errors.",
          "courseD_maze_ramp7_a": "Use repeat blocks to run either a single block or a chunk of code over and over.",
          "courseD_maze_ramp7_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseE_artist_concept1_authored_hint": {
          "courseE_artist_concept1_a": "The hexagons have 50 pixel sides and 60 degree turns to the right.",
          "courseE_artist_concept1_b": "Try using a function here so you don't have to write the code for a hexagon over and over again.",
          "courseE_artist_concept1_c": "Use the `set width` block before each function call to change the pen width."
        },
        "courseE_artist_concept1_2018_authored_hint": {
          "courseE_artist_concept1_a": "The hexagons have 50 pixel sides and 60 degree turns to the right.",
          "courseE_artist_concept1_b": "Try using a function here so you don't have to write the code for a hexagon over and over again.",
          "courseE_artist_concept1_c": "Use the `set width` block before each function call to change the pen width."
        },
        "courseE_artist_concept4_authored_hint": {
          "courseE_artist_concept4_a": "There are several ways to solve this puzzle. Can you make a plan?",
          "courseE_artist_concept4_b": "Try creating one square. Then make a line of squares.  What comes next?",
          "courseE_artist_concept4_c": "After drawing a line of squares, you can either turn around and draw another line of squares going left, or you can jump back to the left side of the figure to draw another line of squares going right. Which do you prefer?"
        },
        "courseE_artist_concept4_2018_authored_hint": {
          "courseE_artist_concept4_a": "There are several ways to solve this puzzle. Can you make a plan?",
          "courseE_artist_concept4_b": "Try creating one square. Then make a line of squares.  What comes next?",
          "courseE_artist_concept4_c": "After drawing a line of squares, you can either turn around and draw another line of squares going left, or you can jump back to the left side of the figure to draw another line of squares going right. Which do you prefer?"
        },
        "courseE_artist_concept_challenge1_authored_hint": {
          "courseE_artist_concept_challenge1_a": "The half-hexagon has a **length of 30** and turns right by **60 degrees**.  ",
          "courseE_artist_concept_challenge1_b": "The 2/3 triangle has a **length of 80** and turns right by **120 degrees**. ",
          "courseE_artist_concept_challenge1_c": "This is the design you want to repeat to make the full shape:\n\n![](https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png)"
        },
        "courseE_artist_concept_challenge1_2018_authored_hint": {
          "courseE_artist_concept_challenge1_a": "The half-hexagon has a **length of 30** and turns right by **60 degrees**.  ",
          "courseE_artist_concept_challenge1_b": "The 2/3 triangle has a **length of 80** and turns right by **120 degrees**. ",
          "courseE_artist_concept_challenge1_c": "This is the design you want to repeat to make the full shape:\n\n![](https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png)"
        },
        "courseE_artist_concept_challenge2_authored_hint": {
          "courseE_artist_concept_challenge2_a": "Once you define a function, you can call it over and over again - whenever and wherever you want!",
          "courseE_artist_concept_challenge2_b": "You can jump to different positions on the canvas using this command:\n\n<xml>  <block type=\"jump_to\">\n    <title name=\"VALUE\">???</title>\n  </block></xml>"
        },
        "courseE_artist_concept_challenge2_2018_authored_hint": {
          "courseE_artist_concept_challenge2_a": "Once you define a function, you can call it over and over again - whenever and wherever you want!",
          "courseE_artist_concept_challenge2_b": "You can jump to different positions on the canvas using this command:\n\n<xml>  <block type=\"jump_to\">\n    <title name=\"VALUE\">???</title>\n  </block></xml>"
        },
        "courseE_artist_functions1_authored_hint": {
          "courseE_artist_functions1_a": "The squares each have 100 pixel sides, that means that you will have to move forward 175 pixels before drawing your second square.",
          "courseE_artist_functions1_b": "It is okay to draw overlapping lines to make your glasses.",
          "courseE_artist_functions1_c": "For shorter code, try using a `repeat` loop to draw the square frames of the glasses."
        },
        "courseE_artist_functions10_authored_hint": {
          "courseD_artist_functions10_b": "This drawing is a lot like the last one, but the `draw line` function is now drawing a different shape.",
          "courseD_artist_functions10_a": "To avoid using multiple `move forward` blocks, create a `draw hexagon` function and call that multiple times.",
          "courseD_artist_functions10_c": "Do you see where this drawing could use a function called `line of hexagons`?\n\n![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)"
        },
        "courseE_artist_functions10_2018_authored_hint": {
          "courseD_artist_functions10_b": "This drawing is a lot like the last one, but the `draw line` function is now drawing a different shape.",
          "courseD_artist_functions10_a": "To avoid using multiple `move forward` blocks, create a `draw hexagon` function and call that multiple times.",
          "courseD_artist_functions10_c": "Do you see where this drawing could use a function called `line of hexagons`?\n\n![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)"
        },
        "courseE_artist_functions1_2018_authored_hint": {
          "courseE_artist_functions1_a": "The squares each have 100 pixel sides, that means that you will have to move forward 175 pixels before drawing your second square.",
          "courseE_artist_functions1_b": "It is okay to draw overlapping lines to make your glasses.",
          "courseE_artist_functions1_c": "For shorter code, try using a `repeat` loop to draw the square frames of the glasses."
        },
        "courseE_artist_functions2_authored_hint": {
          "courseD_artist_functions2_b": "The function you write should not contain your whole program, just the part that draws a square with 100 pixel sides.",
          "courseD_artist_functions2_c": "Use the green `draw a square` block to \"call\" your function under the `when run` block. Otherwise, the code in your function will not run.\n\n<xml><block type=\"procedures_callnoreturn\" limit=\"2\"><mutation name=\"draw a square\"/></block></xml>",
          "courseD_artist_functions2_a": "Your program should:\n- Use function\n- Move forward 100 + 75 pixels\n- Use function"
        },
        "courseE_artist_functions2_2018_authored_hint": {
          "courseD_artist_functions2_b": "The function should not contain your whole program, just the part that draws a square with 100 pixel sides.",
          "courseD_artist_functions2_c": "Make sure that you use the green `draw a square` block to \"call\" your function. Otherwise, the code in your function will not run.\n\n<xml><block type=\"procedures_callnoreturn\" limit=\"2\"><mutation name=\"draw a square\"/></block></xml>",
          "courseD_artist_functions2_a": "Your program should:\n- Use your function\n- Move forward 100 + 75 pixels\n- Use your function again"
        },
        "courseE_artist_functions3_authored_hint": {
          "courseD_artist_functions3_a": "To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.\n\nIf you can't remember what the starter code was, click \"start over\" in the upper right corner of the workspace.",
          "courseD_artist_functions3_b": "Your loop should have all 3 starter code blocks inside of it."
        },
        "courseE_artist_functions4_authored_hint": {
          "courseD_artist_functions4_a": "Try using a function!",
          "courseD_artist_functions4_b": "Drag the `draw a star` function block out of the toolbox to begin building your function. It should have the same code as the previous puzzle, since you are drawing the same star pattern.",
          "courseD_artist_functions4_c": "Use the green `draw a star` block to call this function in your main program. Don't forget to jump forward between each star!"
        },
        "courseE_artist_functions4_2018_authored_hint": {
          "courseD_artist_functions4_a": "Try using a function!",
          "courseD_artist_functions4_b": "Drag the `draw a star` function block out of the toolbox to begin building your function. It should have the same code as the previous puzzle, since you are drawing the same star pattern.",
          "courseD_artist_functions4_c": "Use the green `draw a star` block to call this function in your main program. Don't forget to jump forward between each star!"
        },
        "courseE_artist_functions5_authored_hint": {
          "courseD_artist_functions5_a": "Don't give up!  Remember what you have been learning.",
          "courseD_artist_functions5_b": "Functions make it easy to call saved code at any time, not just from inside a loop!",
          "courseD_artist_functions5_c": "Start by dragging the code for a star shape into the `draw a star` function, then use this function to draw the three stars!"
        },
        "courseE_artist_functions5_2018_authored_hint": {
          "courseD_artist_functions5_a": "Don't give up!  Remember what you have been learning.",
          "courseD_artist_functions5_b": "Functions make it easy to call saved code at any time, not just from inside a loop!",
          "courseD_artist_functions5_c": "Start by creating your `draw a star` function, then use this function to draw the three stars!"
        },
        "courseE_artist_functions6_authored_hint": {
          "grade4_artist_functions_windows0_a": "Focus only on making one window for now.  We'll create a function in the next puzzle.",
          "grade4_artist_functions_windows0_b": "Try using nested loops. The inner loop will make the square and the outer loop will rotate the square four times.",
          "grade4_artist_functions_windows0_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseE_artist_functions6_2018_authored_hint": {
          "grade4_artist_functions_windows0_a": "Focus only on making one window for now.  We'll create a function in the next puzzle.",
          "grade4_artist_functions_windows0_b": "Try using nested loops. The inner loop will make the square and the outer loop will rotate the square four times.",
          "grade4_artist_functions_windows0_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseE_artist_functions7_authored_hint": {
          "courseD_artist_functions7_a": "Try creating your function first then add windows one at a time.",
          "courseD_artist_functions7_b": "You shouldn't need to add any extra repeat loops.  Just jump the artist 100 pixels between each top window, then down 150 pixels to get to the bottom windows."
        },
        "courseE_artist_functions7_2018_authored_hint": {
          "courseD_artist_functions7_a": "Try creating your function first then add windows one at a time.",
          "courseD_artist_functions7_b": "To get from the top windows to the bottom windows, simply turn the artist right, jump 150 pixels, then turn the artist right again!  Now the artist will be facing the correct direction to finish the rest of the house!"
        },
        "courseE_artist_functions8_authored_hint": {
          "courseD_artist_functions8_f": "You only need one `move forward` block, but you will need quite a few `jump forward` and/or `jump backward` blocks!",
          "courseD_artist_functions8_a": "Start by making a function for a square, then try making a function for a line of squares.\n\nHow would you use the `draw a line of squares` function to make this image?",
          "courseD_artist_functions8_b": "Think of each row in this picture as a line of 3 squares. How many lines of squares are there and where do you start drawing each of them?\n\n![](https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png)",
          "courseD_artist_functions8_c": "At the end of each line of squares, the artist will need to jump down and backward before he draws the next line of squares.",
          "courseD_artist_functions8_g": "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
        },
        "courseE_artist_functions8_2018_authored_hint": {
          "courseD_artist_functions8_f": "You only need one `move forward` block, but you will need quite a few `jump forward` and/or `jump backward` blocks!",
          "courseD_artist_functions8_a": "Start by making a function for a square, then try making a function for a line of squares.\n\nHow would you use the `draw a line of squares` function to make this image?",
          "courseD_artist_functions8_b": "Think of each row in this picture as a line of 3 squares. How many lines of squares are there and where do you start drawing each of them?\n\n![](https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png)",
          "courseD_artist_functions8_c": "At the end of each set of staggered squares, the artist will need to jump down and backward before he draws the next set of staggered squares.",
          "courseD_artist_functions8_g": "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
        },
        "courseE_artist_functions8b_2018_authored_hint": {
          "courseD_artist_functions8_f": "You only need one `move forward` block if you're doing this correctly!",
          "courseD_artist_functions8_a": "Start by making a function for a square, then try making a function for a line of squares."
        },
        "courseE_artist_functions8c_2018_authored_hint": {
          "courseD_artist_functions8_f": "This is easier than it looks!  You shouldn't need any `move` or `jump` blocks here!",
          "courseD_artist_functions8_a": "The second line of squares is just a 180 degree turn different than the first!",
          "courseD_artist_functions8_c": "At the end of each line of squares, the artist only needs to turn 180 degrees before drawing the next line of squares.  Put the whole thing in a repeat loop to set you up for the next exercise!"
        },
        "courseE_artist_functions9_authored_hint": {
          "courseD_artist_functions9_e": "Can you spot all four places that the `line of triangles` can be used in this drawing?\n\n![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)",
          "courseD_artist_functions9_a": "This puzzle can be broken into three parts:\n  - make the `draw a triangle` function\n  - make the `draw a line of triangles` function\n  - use your `draw a line of triangles` function four times to complete the drawing",
          "courseD_artist_functions9_b": "This drawing is made by drawing a line of triangles 4 times and turning either 60 or 120 degrees before you draw the next triangle line."
        },
        "courseE_artist_functions9_2018_authored_hint": {
          "courseD_artist_functions9_e": "Can you spot all four places that the `line of triangles` can be used in this drawing?\n\n![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)",
          "courseD_artist_functions9_a": "This puzzle can be broken into three parts:\n  - make the `draw a triangle` function\n  - make the `draw a line of triangles` function\n  - use your `draw a line of triangles` function four times to complete the drawing",
          "courseD_artist_functions9_b": "This drawing is made by drawing a line of triangles 4 times and turning either 60 or 120 degrees before you draw the next triangle line."
        },
        "courseE_artist_functions_challenge_authored_hint": {
          "courseE_artist_functions_challenge_a": "If you call the function one more time, you can create the same design in the final corner. You can also `jump to` other positions or change the whole thing around however you want!"
        },
        "courseE_artist_functions_challenge1_authored_hint": {
          "courseE_artist_functions_challenge1_a": "If you call the function one more time, you can create the same design in the final corner.",
          "courseE_artist_functions_challenge1_b": "You can also `jump to` other positions or change the whole design however you want!"
        },
        "courseE_artist_functions_challenge1_2018_authored_hint": {
          "courseE_artist_functions_challenge1_a": "If you call the function one more time, you can create the same design in the final corner.",
          "courseE_artist_functions_challenge1_b": "You can also `jump to` other positions or change the whole design however you want!"
        },
        "courseE_artist_functions_challenge2_authored_hint": {
          "courseE_artist_functions_challenge1_a": "<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">350</title>\n    <title name=\"YPOS\">200</title>\n  </block>\n  </xml>\n\n  \nThis `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is *before* the command is run!\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
        },
        "courseE_artist_functions_challenge2_2018_authored_hint": {
          "courseE_artist_functions_challenge1_a": "<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">350</title>\n    <title name=\"YPOS\">200</title>\n  </block>\n  </xml>\n\n  \nThis `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is *before* the command is run!\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
        },
        "courseE_artist_ramp10_authored_hint": {
          "courseD_artist_ramp10_a": "Don't forget to turn by 60 degrees after each triangle.  Which loop do you need to put that instruction inside?",
          "courseD_artist_ramp10_b": "You can use the drop down menu on the `turn` blocks to see which angle you need!",
          "courseD_artist_ramp10_c": "The artist will draw six triangles in total:\n\n![](https://images.code.org/752d82f3afdca0a7d7c01d6fa2abb583-image-1499889821499.2_solution2.gif)"
        },
        "courseE_artist_ramp11_authored_hint": {
          "courseD_artist_ramp11a": "To draw a side, use the `move forward by 100 pixels` block, and change the 100 to a 200.",
          "courseD_artist_ramp11b": "To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.\n\nDon't forget to turn afterward!"
        },
        "courseE_artist_ramp12_authored_hint": {
          "courseD_artist_ramp12_a": "You can either draw the square first, then the triangle, or do it the other way around!"
        },
        "courseE_artist_ramp8_authored_hint": {
          "courseE_artist_ramp8_a": "To draw a side, use the `move forward by 100 pixels` block, and change the 100 to a 200.",
          "courseE_artist_ramp8_b": "To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.\n\nDon't forget to turn afterward!",
          "courseE_artist_ramp8_c": "Your loop should have two blocks inside of it: `move forward` and `turn right by 90 degrees`."
        },
        "courseE_artist_ramp8_2_authored_hint": {
          "courseE_artist_ramp8_a": "To draw a side, use the `move forward by 100 pixels` block, and change the 100 to a 200.",
          "courseE_artist_ramp8_b": "To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.\n\nDon't forget to turn afterward!",
          "courseE_artist_ramp8_c": "Your loop should have two blocks inside of it: `move forward` and `turn right by 90 degrees`."
        },
        "courseE_artist_ramp8_2018_authored_hint": {
          "courseE_artist_ramp8_a": "To draw a side, use the `move forward by 100 pixels` block, and change the 100 to a 200.",
          "courseE_artist_ramp8_b": "To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.\n\nDon't forget to turn afterward!",
          "courseE_artist_ramp8_c": "Your loop should have two blocks inside of it: `move forward` and `turn right by 90 degrees`."
        },
        "courseE_artist_ramp8_2_2018_authored_hint": {
          "courseE_artist_ramp8_a": "To draw a side, use the `move forward by 100 pixels` block, and change the 100 to a 200.",
          "courseE_artist_ramp8_b": "To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.\n\nDon't forget to turn afterward!",
          "courseE_artist_ramp8_c": "Your loop should have two blocks inside of it: `move forward` and `turn right by 90 degrees`."
        },
        "courseE_artist_ramp9_authored_hint": {
          "courseD_artist_ramp12_a": "How is this similar to a square?  How is it different?",
          "courseD_artist_ramp12_b": "You can use the drop down menu on the `turn` blocks to see which angle you need!",
          "courseD_artist_ramp12_c": "To draw each side, you will need to move forward 100 pixels, then turn right 120 degrees. How many sides do you need?"
        },
        "courseE_artist_ramp9_2_authored_hint": {
          "courseD_artist_ramp12_a": "How is this similar to a square?  How is it different?",
          "courseD_artist_ramp12_b": "You can use the drop down menu on the `turn` blocks to see which angle you need!",
          "courseD_artist_ramp12_c": "To draw each side, you will need to move forward 100 pixels, then turn right 120 degrees. How many sides do you need?"
        },
        "courseE_artist_ramp9_2018_authored_hint": {
          "courseD_artist_ramp12_a": "How is this similar to a square?  How is it different?",
          "courseD_artist_ramp12_b": "You can use the drop down menu on the `turn` blocks to see which angle you need!",
          "courseD_artist_ramp12_c": "To draw each side, you will need to move forward 100 pixels, then turn right 120 degrees. How many sides do you need?"
        },
        "courseE_artist_ramp9_2_2018_authored_hint": {
          "courseD_artist_ramp12_a": "How is this similar to a square?  How is it different?",
          "courseD_artist_ramp12_b": "You can use the drop down menu on the `turn` blocks to see which angle you need!",
          "courseD_artist_ramp12_c": "To draw each side, you will need to move forward 100 pixels, then turn right 120 degrees. How many sides do you need?"
        },
        "courseE_bee_concept1_authored_hint": {
          "courseE_bee_concept1_b": "Are there any patterns that *repeat* here?",
          "courseE_bee_concept1_a": "If you don't understand how to use nested loops here, try writing out the instructions step by step on a piece of paper.  Circle the patterns that you see."
        },
        "courseE_bee_concept1_2018_authored_hint": {
          "courseE_bee_concept1_b": "Are there any patterns that *repeat* here?",
          "courseE_bee_concept1_a": "If you don't understand how to use nested loops here, try writing out the instructions step by step on a piece of paper.  Circle the patterns that you see."
        },
        "courseE_bee_concept2_authored_hint": {
          "courseE_bee_concept2_a": "Would a `while` loop help here?",
          "courseE_bee_concept2_d": "You can even check empty spaces to see if honey is > 0.",
          "courseE_bee_concept2_b": "You can use `while` loops to move to the end of each path, and to collect all of the honey from each space.",
          "courseE_bee_concept2_c": "Which way should the bee turn after each path?"
        },
        "courseE_bee_concept2_2018_authored_hint": {
          "courseE_bee_concept2_a": "Would a `while` loop help here?",
          "courseE_bee_concept2_d": "With this `while` loop you  can check empty spaces to see if the amount of honey is > 0. This does the same as the `while there is honey` loop. ",
          "courseE_bee_concept2_b": "You can use `while` loops to move to the end of each path, and to collect all of the honey from each space.",
          "courseE_bee_concept2_c": "Which way should the bee turn after each path?"
        },
        "courseE_bee_concept3_authored_hint": {
          "courseE_bee_concept3a_a": "Try using nested `repeat` loops to solve this puzzle.",
          "courseE_bee_concept3a_b": "If you can't figure out where to put the loops, try writing your code step-by-step and looking for patterns.",
          "courseE_bee_concept3a_c": "There are three groups of flowers, so your outer `repeat` loop should repeat three times."
        },
        "courseE_bee_concept3_2018_authored_hint": {
          "courseE_bee_concept3a_a": "Try using nested `repeat` loops to solve this puzzle.",
          "courseE_bee_concept3a_b": "If you can't figure out where to put the loops, try writing your code step-by-step and looking for patterns.",
          "courseE_bee_concept3a_c": "There are three groups of flowers, so your outer `repeat` loop should repeat three times."
        },
        "courseE_bee_concept4_authored_hint": {
          "courseE_bee_concept4_a": "An `if/else` statement could really help you out here.",
          "courseE_bee_concept4_b": "The stair step pattern can help you get through all of the flowers and honeycombs.",
          "courseE_bee_concept4_c": "If you are at a flower, how many times do you have to get nectar? Is this the same number for all flowers?"
        },
        "courseE_bee_concept4_2018_authored_hint": {
          "courseE_bee_concept4_a": "An `if/else` statement could really help you out here.",
          "courseE_bee_concept4_b": "The stair step pattern can help you get through all of the flowers and honeycombs.",
          "courseE_bee_concept4_c": "If you are at a flower, how many times do you have to get nectar? Is this the same number for all flowers?"
        },
        "courseE_bee_concept5_authored_hint": {
          "courseE_bee_concept5_a": "The flowers follow a rectangular path.  You can trace that rectangle using `while path ahead` even with a different number of squares per side.",
          "courseE_bee_concept5_c": "Here's a picture of a rectangular path the bee could take.\n\n![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)",
          "courseE_bee_concept5_b": "You can check every square for a flower using the `if` block, even if you already know there's not one there."
        },
        "courseE_bee_concept5_2018_authored_hint": {
          "courseE_bee_concept5_a": "The flowers follow a rectangular path.  You can trace that rectangle using `while path ahead` even with a different number of squares per side.",
          "courseE_bee_concept5_c": "Here's a picture of a rectangular path the bee could take.\n\n![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)",
          "courseE_bee_concept5_b": "You can check every square for a flower using the `if` block, even if you already know there's not one there."
        },
        "courseE_bee_functions1_authored_hint": {
          "courseE_bee_functions1_a": "Remember that left and right turns are from the point of view of the bee.",
          "courseE_bee_functions1_b": "Use a `repeat` loop when collecting nectar to make your code shorter.",
          "courseE_bee_functions1_c": "Remember that left and right turns are from the perspective of the bee."
        },
        "courseE_bee_functions10_authored_hint": {
          "courseE_bee_functions10_a": "You will need a `while` loop to collect all of the honey, since it varies between honeycombs.",
          "courseE_bee_functions10_b": "Include the turns and movement in your function, so you can call it when the bee is on the main path.",
          "courseE_bee_functions10_c": "Remember to call your function in the main program!"
        },
        "courseE_bee_functions10_2018_authored_hint": {
          "courseE_bee_functions10_a": "You will need a `while` loop to collect all of the honey, since it varies between honeycombs.",
          "courseE_bee_functions10_b": "Include the turns and movement in your function, so you can call it when the bee is on the main path.",
          "courseE_bee_functions10_c": "Remember to call your function in the main program!"
        },
        "courseE_bee_functions1_2018_authored_hint": {
          "courseE_bee_functions1_a": "Remember that left and right turns are from the point of view of the bee.",
          "courseE_bee_functions1_b": "Use a `repeat` loop when collecting nectar to make your code shorter.",
          "courseE_bee_functions1_c": "Remember that left and right turns are from the perspective of the bee."
        },
        "courseE_bee_functions2_authored_hint": {
          "courseE_bee_functions2_a": "The function has been written for you, but you will need to call it at each flower.",
          "courseE_bee_functions2_b": "This <xml><block type=\"procedures_callnoreturn\"><mutation name=\"get 2 nectar\"/></block></xml> block calls the function given to you.",
          "courseE_bee_functions2_c": "You will want to move forward and get 2 nectar twice to solve this puzzle."
        },
        "courseE_bee_functions2_2018_authored_hint": {
          "courseE_bee_functions2_a": "The function has been written for you, but you will need to call it at each flower.",
          "courseE_bee_functions2_b": "This <xml><block type=\"procedures_callnoreturn\"><mutation name=\"get 2 nectar\"/></block></xml> block calls the function given to you.",
          "courseE_bee_functions2_c": "You will want to move forward and get 2 nectar twice to solve this puzzle."
        },
        "courseE_bee_functions3_authored_hint": {
          "courseE_bee_functions3_a": "Your function for this puzzle only needs to collect nectar, it shouldn't have any `move forward` or `turn` blocks in it. ",
          "courseE_bee_functions3_b": "Call your `get 5` function under the `when run` block.",
          "courseE_bee_functions3_c": "Your main program will control all of the movement, the function is just for what happens when the bee reaches a flower.",
          "courseE_bee_functions3_d": "Try using this path through."
        },
        "courseE_bee_functions3_2018_authored_hint": {
          "courseE_bee_functions3_a": "Your function for this puzzle only needs to collect nectar, it shouldn't have any `move forward` or `turn` blocks in it. ",
          "courseE_bee_functions3_b": "Call your `get 5` function under the `when run` block.",
          "courseE_bee_functions3_c": "Your main program will control all of the movement, the function is just for what happens when the bee reaches a flower.",
          "courseE_bee_functions3_d": "Try using this path through."
        },
        "courseE_bee_functions4_authored_hint": {
          "courseE_bee_functions4_a": "Your function will already travel down the side paths and return the bee back to the main road.  You don't need to add that part to your program.",
          "courseE_bee_functions4_b": "Use the green `move and get nectar` block to call this function.",
          "courseE_bee_functions4_c": "You don't need to change the function, just use it in your program."
        },
        "courseE_bee_functions4_2018_authored_hint": {
          "courseE_bee_functions4_a": "Your function will already travel down the side paths and return the bee back to the main road.  You don't need to add that part to your program.",
          "courseE_bee_functions4_b": "Use the green `move and get nectar` block to call this function.",
          "courseE_bee_functions4_c": "You don't need to change the function, just use it in your program."
        },
        "courseE_bee_functions5_authored_hint": {
          "courseE_bee_functions5_a": "Edit the function so that it solves the puzzle without having to change the main program.",
          "courseE_bee_functions5_c": "The `move forward` block can be changed into a `move backward` block. Use this instead of turning all the way around at the end of the paths!",
          "courseE_bee_functions5_b": "Your function should make the bee: \n- turn\n- move forward\n- collect all of the nectar\n- move backward\n- turn back to the direction that the bee started from"
        },
        "courseE_bee_functions5_2018_authored_hint": {
          "courseE_bee_functions5_a": "Edit the function so that it solves the puzzle without having to change the main program.",
          "courseE_bee_functions5_c": "The `move forward` block can be changed into a `move backward` block. Use this instead of turning all the way around at the end of the paths!",
          "courseE_bee_functions5_b": "Your function should make the bee: \n- turn\n- move forward\n- collect all of the nectar\n- move backward\n- turn back to the direction that the bee started from"
        },
        "courseE_bee_functions6_authored_hint": {
          "courseE_bee_functions6_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!\n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)",
          "courseE_bee_functions6_b": "It might help in this case to move inside of the function, but not all of your `move` blocks need to be there."
        },
        "courseE_bee_functions6_2018_authored_hint": {
          "courseE_bee_functions6_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!\n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)",
          "courseE_bee_functions6_b": "It might help in this case to move inside of the function, but not all of your `move` blocks need to be there."
        },
        "courseE_bee_functions6test_authored_hint": {
          "courseE_bee_functions6_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!\n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)",
          "courseE_bee_functions6_b": "It might help in this case to move inside of the function, but not all of your `move` blocks need to be there."
        },
        "courseE_bee_functions7_authored_hint": {
          "courseE_bee_functions7_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "courseE_bee_functions7_b": "Remember to build your code inside of the green function block.\n\n![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)",
          "courseE_bee_functions7_c": "This function should turn the bee to head him down the path, collect the nectar, make the honey, then turn the bee around and bring him back."
        },
        "courseE_bee_functions7_2018_authored_hint": {
          "courseE_bee_functions7_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "courseE_bee_functions7_b": "Remember to build your code inside of the green function block.\n\n![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)",
          "courseE_bee_functions7_c": "This function should turn the bee to head him down the path, collect the nectar, make the honey, then turn the bee around and bring him back."
        },
        "courseE_bee_functions8_authored_hint": {
          "courseE_bee_functions8_a": "Your function will only need to collect nectar. Try using a while loop instead of a repeat loop.",
          "courseE_bee_functions8_b": "Use `while nectar > 0` to make sure you get all of the nectar.",
          "courseE_bee_functions8_c": "Your main program will need a stair step movement pattern. Remember, the main program is the code under the `when run` block."
        },
        "courseE_bee_functions8_2018_authored_hint": {
          "courseE_bee_functions8_a": "Your function will only need to collect nectar. Try using a while loop instead of a repeat loop.",
          "courseE_bee_functions8_b": "Use `while nectar > 0` to make sure you get all of the nectar.",
          "courseE_bee_functions8_c": "Your main program will need a stair step movement pattern. Remember, the main program is the code under the `when run` block."
        },
        "courseE_bee_functions9_authored_hint": {
          "courseE_bee_functions9_a": "You can use the exact same function for this puzzle as you did in the last puzzle.  All you need to do is create a function that collects all of the nectar when you get to each flower.",
          "courseE_bee_functions9_b": "Even though you know how much nectar some of the flowers have, a `while` loop can make one function work for all of them."
        },
        "courseE_bee_functions9_2018_authored_hint": {
          "courseE_bee_functions9_a": "You can use the exact same function for this puzzle as you did in the last puzzle.  All you need to do is create a function that collects all of the nectar when you get to each flower.",
          "courseE_bee_functions9_b": "Even though you know how much nectar some of the flowers have, a `while` loop can make one function work for all of them."
        },
        "courseE_bee_functions_challenge1_authored_hint": {
          "courseE_bee_functions_challenge1_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "courseE_bee_functions_challenge1_b": "Remember to build your code inside of the green function block."
        },
        "courseE_bee_functions_challenge1_2018_authored_hint": {
          "courseE_bee_functions_challenge1_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "courseE_bee_functions_challenge1_b": "Remember to build your code inside of the green function block."
        },
        "courseE_bee_functions_challenge2_authored_hint": {
          "courseE_bee_functions_challenge1_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "courseE_bee_functions_challenge1_b": "Remember to build your code inside of the green function block."
        },
        "courseE_bee_functions_challenge2_2018_authored_hint": {
          "courseE_bee_functions_challenge1_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "courseE_bee_functions_challenge1_b": "Remember to build your code inside of the green function block."
        },
        "courseE_bee_ramp14_authored_hint": {
          "courseE_bee_ramp14_a": "The bee works just like the farmer in the previous puzzle. Buzz along the path and collect nectar while there is nectar (while nectar > 0) and make all of the honey.",
          "courseE_bee_ramp14_b": "There can be more than one flower or honeycomb at each space, so make sure to use `while` loops to get them all!",
          "courseE_bee_ramp14_c": "This puzzle is nearly identical to the previous one, just with honey and nectar instead of vegetables."
        },
        "courseE_bee_ramp14_2018_authored_hint": {
          "courseE_bee_ramp14_a": "The bee works just like the farmer in the previous puzzle. Buzz along the path and collect nectar while there is nectar (while nectar > 0) and make all of the honey.",
          "courseE_bee_ramp14_b": "There can be more than one flower or honeycomb at each space, so make sure to use `while` loops to get them all!",
          "courseE_bee_ramp14_c": "This puzzle is nearly identical to the previous one, just with honey and nectar instead of vegetables."
        },
        "courseE_bee_ramp17_authored_hint": {
          "courseE_bee_ramp17_a": "Since we don't have a repeat block to do something a certain number of times, what block should we use to move along the path?",
          "courseE_bee_ramp17": "If you were to solve this puzzle without an until block, where would you see repeated code? How can you use this repeated code to shape how you must use an until block to solve the problem?",
          "courseE_bee_ramp17_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.",
          "courseE_bee_ramp17_c": "You will want to move in a stair-step pattern. Try coding that first, then adding the `if/else` statement and `while` loops to check for flowers and honeycombs."
        },
        "courseE_collector_ramp10_authored_hint": {
          "courseD_artist_ramp10_a": "Instead of using four `move forward` blocks for each side, try putting one `move forward` block inside of a `repeat` loop, like this:\n\n<xml><block type=\"controls_repeat\">\n                                            <title name=\"TIMES\">4</title>\n                                            <statement name=\"DO\">\n                                              <block type=\"maze_moveForward\"/>\n                                            </statement>\n                                          </block></xml>",
          "courseD_artist_ramp10_b": "Don't forget to collect one piece of treasure, then turn after each set of steps!"
        },
        "courseE_farmer_concept1_authored_hint": {
          "courseE_farmer_concept1_a": "A `while there is a hole` block will help you fill any hole until it's flat.",
          "courseE_farmer_concept1_b": "You can use a stair step pattern to get to the holes."
        },
        "courseE_farmer_concept1_2018_authored_hint": {
          "courseE_farmer_concept1_a": "A `while there is a hole` block will help you fill any hole until it's flat.",
          "courseE_farmer_concept1_b": "You can use a stair step pattern to get to the holes."
        },
        "courseE_farmer_concept2_authored_hint": {
          "courseE_farmer_concept2_a": "The paths are all the same length, but they are a different number of squares apart.  A loop isn't ideal here. Try a function.",
          "courseE_farmer_concept2_b": "A function which turns, goes down the path, gathers pumpkins, and returns to the main horizontal path could be helpful here.",
          "courseE_farmer_concept2_c": "Your main program can call this function with the green `do something` block."
        },
        "courseE_farmer_concept2_2018_authored_hint": {
          "courseE_farmer_concept2_a": "The paths are all the same length, but they are a different number of squares apart.  A loop isn't ideal here. Try a function.",
          "courseE_farmer_concept2_b": "A function which turns, goes down the path, gathers pumpkins, and returns to the main horizontal path could be helpful here.",
          "courseE_farmer_concept2_c": "Your main program can call this function with the green `do something` block."
        },
        "courseE_farmer_concept3_authored_hint": {
          "grade3_robotFarmer_ConditionalsIntro_8_a": "The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.",
          "grade3_robotFarmer_ConditionalsIntro_8_b": "What should you do once you've reached the end of a path?",
          "grade3_robotFarmer_ConditionalsIntro_8_c": "Use a `repeat` loop to run your code multiple times for each straight path."
        },
        "courseE_farmer_concept3_2018_authored_hint": {
          "grade3_robotFarmer_ConditionalsIntro_8_a": "The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.",
          "grade3_robotFarmer_ConditionalsIntro_8_b": "What should you do once you've reached the end of a path?",
          "grade3_robotFarmer_ConditionalsIntro_8_c": "Use a `repeat` loop to run your code multiple times for each straight path."
        },
        "courseE_farmer_concept4_authored_hint": {
          "4-5_Artist_Patterns_3_a": "Be careful to pull out the full block of \"code from the toolbar each time you try a new one.",
          "4-5_Artist_Patterns_3_b": "If your code becomes too confusing, you can always click \"Start Over\" and try again!"
        },
        "courseE_farmer_elseif_test_authored_hint": {
          "grade3_robotFarmer_ConditionalsIntro_8_a": "The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.",
          "grade3_robotFarmer_ConditionalsIntro_8_b": "What should you do once you've reached the end of a path?",
          "grade3_robotFarmer_ConditionalsIntro_8_c": "Use a `repeat` loop to run your code multiple times for each straight path."
        },
        "courseE_farmer_functions1_authored_hint": {
          "courseE_farmer_functions1_a": "The toolbox is organized a little differently this time! Click on the different categories to see which blocks you have.",
          "courseE_farmer_functions1_b": "You only need to pick one pumpkin, but could you use a loop to get to it?"
        },
        "courseE_farmer_functions10b_authored_hint": {
          "courseE_farmer_functions10b_a": "You will have to re-create your function first.",
          "courseE_farmer_functions10b_b": "Which way do you need to turn after the first pumpkin?",
          "courseE_farmer_functions10b_c": "Look back at the last puzzle if you need help making the function."
        },
        "courseE_farmer_functions10b_2018_authored_hint": {
          "courseE_farmer_functions10b_a": "You will have to re-create your function first.",
          "courseE_farmer_functions10b_b": "Which way do you need to turn after the first pumpkin?",
          "courseE_farmer_functions10b_c": "Look back at the last puzzle if you need help making the function."
        },
        "courseE_farmer_functions1_2018_authored_hint": {
          "courseE_farmer_functions1_a": "The toolbox is organized a little differently this time! Click on the different categories to see which blocks you have.",
          "courseE_farmer_functions1_b": "You only need to pick one pumpkin, but could you use a loop to get to it?"
        },
        "courseE_farmer_functions1a_authored_hint": {
          "courseE_farmer_functions1a_a": "Think through the `if/else` statements step by step. What should you do if you are standing at a corn plant?",
          "courseE_farmer_functions1a_b": "Use a `repeat until` block to get to the pumpkin!"
        },
        "courseE_farmer_functions1a_2018_authored_hint": {
          "courseE_farmer_functions1a_a": "Make sure you read through the function definition. Can you tell what it does?",
          "courseE_farmer_functions1a_b": "Use a `repeat until` block to get to the pumpkin!"
        },
        "courseE_farmer_functions2b_authored_hint": {
          "courseE_farmer_functions2b_a": "You can use a `repeat until pumpkin` to get to the ends of the two paths.",
          "courseE_farmer_functions2b_b": "There is no corn on the connecting path, so you can just move along it and turn.",
          "courseE_farmer_functions2b_c": "You will need two separate `repeat until` blocks to get all of the crops."
        },
        "courseE_farmer_functions2b_2018_authored_hint": {
          "courseE_farmer_functions2b_a": "You can `repeat until pumpkin` to get to the ends of the two paths.",
          "courseE_farmer_functions2b_b": "There is no corn on the connecting path, so you can just move along it and turn.",
          "courseE_farmer_functions2b_c": "You will need two separate `repeat until` blocks to get all of the crops."
        },
        "courseE_farmer_functions2ba_authored_hint": {
          "courseE_farmer_functions2ba_a": "Use the green `corn and pumpkin` block to call this function.",
          "courseE_farmer_functions2ba_b": "Drag all of the blocks in the workspace together under `when run` to see how this function works."
        },
        "courseE_farmer_functions2ba_2018_authored_hint": {
          "courseE_farmer_functions2ba_a": "Use the green `get all pumpkins` block to make sure you get all of the pumpkins!"
        },
        "courseE_farmer_functions3_authored_hint": {
          "courseE_farmer_functions3_a": "Try using a `while path ahead` loop to get you where you need to be."
        },
        "courseE_farmer_functions3b_authored_hint": {
          "courseE_farmer_functions1a_a": "Nested `if` and `if/else` statements will really help you out here."
        },
        "courseE_farmer_functions3c_authored_hint": {
          "courseE_farmer_functions3c_a": "What sequence is repeated often in this program? Can you drag these blocks into the function?",
          "courseE_farmer_functions3c_b": "Don't forget to call your function in the main program wherever you removed blocks."
        },
        "courseE_farmer_functions3c1_2018_authored_hint": {
          "coursee_farmer_functions3c1_2018_a": "You'll need to use the `pick along path` function three times to solve this puzzle.",
          "coursee_farmer_functions3c1_2018_b": "What code do you need to add to get around the corners?"
        },
        "courseE_farmer_functions4_authored_hint": {
          "courseE_farmer_functions4_a": "Drag all of the code out of your `repeat` loop and into the `go get pumpkins` function.",
          "courseE_farmer_functions4_b": "Don't forget to put the block that calls the `go get pumpkins` functions inside your loop before you run your code."
        },
        "courseE_farmer_functions4b_authored_hint": {
          "courseE_farmer_functions4b_a": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.",
          "courseE_farmer_functions4b_b": "Remember to turn after each path.",
          "courseE_farmer_functions4b_c": "The green `corn and pumpkin` blocks are in the Functions tab of the toolbox."
        },
        "courseE_farmer_functions4b_2018_authored_hint": {
          "courseE_farmer_functions4b_a": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.",
          "courseE_farmer_functions4b_b": "Remember to turn after each path.",
          "courseE_farmer_functions4b_c": "The green `corn and pumpkin` blocks are in the Functions tab of the toolbox."
        },
        "courseE_farmer_functions5b_authored_hint": {
          "courseE_farmer_functions5b_a": "You will need to use a `while corn` loop, a `while lettuce` and a `while pumpkin` to make sure you get everything."
        },
        "courseE_farmer_functions5c_authored_hint": {
          "courseE_farmer_functions5c_a": "Are there any other patterns you can loop in this puzzle?",
          "courseE_farmer_functions5c_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseE_farmer_functions5c_2018_authored_hint": {
          "courseE_farmer_functions5c_a": "Are there any other patterns you can loop in this puzzle?",
          "courseE_farmer_functions5c_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseE_farmer_functions6c_authored_hint": {
          "courseE_farmer_functions6c_a": "Edit your function to check for the lettuce as well.",
          "courseE_farmer_functions6c_b": "Would an `if/else` block help to check if there is lettuce in a space?",
          "courseE_farmer_functions6c_c": "Don't forget to keep checking for corn!"
        },
        "courseE_farmer_functions6c_2018_authored_hint": {
          "courseE_farmer_functions6c_a": "Edit your function to check for the lettuce as well.",
          "courseE_farmer_functions6c_b": "Would an `if/else` block help to check if there is lettuce in a space?",
          "courseE_farmer_functions6c_c": "Don't forget to keep checking for corn!"
        },
        "courseE_farmer_functions7a1_2018_authored_hint": {
          "courseE_farmer_functions7a1_2018_a": "Create your function under the `functions` section in the toolbox.",
          "courseE_farmer_functions7a1_2018_b": "Don't forget to use your function when you're done making it!"
        },
        "courseE_farmer_functions7b_authored_hint": {
          "courseE_farmer_functions7b_a": "You don't need a function here, but you can make one if it is helpful to you!",
          "courseE_farmer_functions7b_b": "Use an `if/else` statement to check for crops, then turn based on which crop you find.",
          "courseE_farmer_functions7b_c": "A `repeat until pumpkin` loop can help you get all the way through the maze."
        },
        "courseE_farmer_functions7b_2018_authored_hint": {
          "courseE_farmer_functions7b_a": "You don't need a function here, but you can make one if it is helpful to you!",
          "courseE_farmer_functions7b_b": "Use an `if/else` statement to check for crops, then turn based on which crop you find.",
          "courseE_farmer_functions7b_c": "A `repeat until pumpkin` loop can help you get all the way through the maze."
        },
        "courseE_farmer_functions8_authored_hint": {
          "courseE_farmer_functions8_a": "Create a function that takes the farmer to the corn, gets all of the corn, then turns around and comes back."
        },
        "courseE_farmer_functions8a1_2018_authored_hint": {
          "courseE_farmer_functions8a1_2018a": "Start this puzzle off by coding the same function you made in the last puzzle.",
          "courseE_farmer_functions8a1_2018b": "After the function runs the first time, you'll need to make one extra turn before you can run it again."
        },
        "courseE_farmer_functions8b_authored_hint": {
          "courseE_farmer_functions8b_a": "Try running the code given to see what it does. What do you need after this?",
          "courseE_farmer_functions8b_b": "Drag all of the starter blocks into a function so that you can use them more than once.",
          "courseE_farmer_functions8b_c": "How many times do you need to call the function?"
        },
        "courseE_farmer_functions8b_2018_authored_hint": {
          "courseE_farmer_functions8b_a": "Try running the code given to see what it does. What do you need after this?",
          "courseE_farmer_functions8b_b": "Drag all of the starter blocks into a function so that you can use them more than once.",
          "courseE_farmer_functions8b_c": "How many times do you need to call the function?"
        },
        "courseE_farmer_functions9_authored_hint": {
          "courseE_farmer_functions8_a": "Create a function that takes the farmer to the corn, gets all of the corn, then turns around and comes back."
        },
        "courseE_farmer_functions9a1_2018_authored_hint": {
          "courseE_farmer_functions9a1_2018a": "You'll use the same function that you made in the last couple of puzzles.",
          "courseE_farmer_functions9a1_2018b": "Use the same steps from the previous puzzle to solve the first half of this puzzle.",
          "courseE_farmer_functions9a1_2018c": "You'll need to `turn` a few times and `move forward` to get to the last crop of lettuce before you can call your function again."
        },
        "courseE_farmer_functions9b_authored_hint": {
          "courseE_farmer_functions9b_a": "Can you use nested `if` and `if/else` statements to move along the path?",
          "courseE_farmer_functions9b_b": "Use `repeat until pumpkin` to move through all of the paths.",
          "courseE_farmer_functions9b_c": "You will want to move through the paths as if they are squares getting larger after each loop."
        },
        "courseE_farmer_functions9b_2018_authored_hint": {
          "courseE_farmer_functions9b_a": "Can you use nested `if` and `if/else` statements to move along the path?",
          "courseE_farmer_functions9b_b": "Use `repeat until pumpkin` to move through all of the paths.",
          "courseE_farmer_functions9b_c": "You will want to move through the paths as if they are squares getting larger after each loop."
        },
        "courseE_farmer_predict1_authored_hint": {
          "courseE_farmer_ramp12a": "Feel free to go back to the last puzzle if you need a reminder of how to pick produce only **while** there is produce to pick."
        },
        "courseE_farmer_predict1_2018_authored_hint": {
          "courseE_farmer_ramp12a": "Feel free to go back to the last puzzle if you need a reminder of how to pick produce only **while** there is produce to pick."
        },
        "courseE_farmer_ramp11_authored_hint": {
          "courseE_farmer_ramp11_a": "If you're having a hard time seeing where the loops should go, try coding it all out then looking for a pattern.",
          "courseE_farmer_ramp11_b": "How can you use a `repeat` loop to pick lettuce instead of dragging out 5 `pick lettuce` blocks?",
          "courseE_farmer_ramp11_c": "You don't need to use 5 repeat loops to get all of the lettuce.  Instead, drag your lettuce picking repeat loop inside of another loop (along with a `move forward` block, and you'll have it!)"
        },
        "courseE_farmer_ramp11a_authored_hint": {
          "courseE_farmer_ramp12_a": "Instead of using a `repeat` loop to tell the farmer how many times to shovel dirt, now you can use a `while there is a pile` block.  ",
          "courseE_farmer_ramp12_b": "You only need to move forward once to get to the dirt."
        },
        "courseE_farmer_ramp11a_2018_authored_hint": {
          "courseE_farmer_ramp12_a": "Instead of using a `repeat` loop to tell the farmer how many times to shovel dirt, now you can use a `while there is a pile` block.  ",
          "courseE_farmer_ramp12_b": "You only need to move forward once to get to the dirt."
        },
        "courseE_farmer_ramp11b_authored_hint": {
          "courseE_farmer_ramp11b_a": "You can nest your `while` loop inside of a `repeat` loop to make your code shorter."
        },
        "courseE_farmer_ramp11b_2018_authored_hint": {
          "courseE_farmer_ramp11b_a": "You can nest your `while` loop inside of a `repeat` loop to make your code shorter."
        },
        "courseE_farmer_ramp12_authored_hint": {
          "courseE_farmer_ramp12_b": "You will still need to use a `repeat` loop on the outside of it all to tell the farmer how many times to walk forward and get lettuce."
        },
        "courseE_farmer_ramp12_2018_authored_hint": {
          "courseE_farmer_ramp12_b": "You will still need to use a `repeat` loop on the outside of it all to tell the farmer how many times to walk forward and get lettuce."
        },
        "courseE_farmer_ramp12_forswap_authored_hint": {
          "courseE_farmer_ramp12_b": "You will still need to use a `repeat` loop on the outside of it all to tell the farmer how many times to walk forward and get lettuce."
        },
        "courseE_farmer_ramp12_forswap_2018_authored_hint": {
          "courseE_farmer_ramp12_b": "You will still need to use a `repeat` loop on the outside of it all to tell the farmer how many times to walk forward and get lettuce."
        },
        "courseE_farmer_ramp12a_authored_hint": {
          "courseE_farmer_ramp12b": "You will need to check your `if` statement 21 times to solve this puzzle.",
          "courseE_farmer_ramp12c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.",
          "courseE_farmer_ramp12d": "There will only be lettuce, so you don't need to worry about empty spaces, corn, or pumpkins."
        },
        "courseE_farmer_ramp12a_2018_authored_hint": {
          "courseE_farmer_ramp12b": "You will need to check your `if` statement 21 times to solve this puzzle.",
          "courseE_farmer_ramp12c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.",
          "courseE_farmer_ramp12d": "There will only be lettuce, so you don't need to worry about empty spaces, corn, or pumpkins."
        },
        "courseE_farmer_ramp12c_authored_hint": {
          "courseE_farmer_ramp12b_b": "You will still need to use an `until` loop first, then use a `while` loop once you get to the lettuce."
        },
        "courseE_farmer_ramp12c_2018_authored_hint": {
          "courseE_farmer_ramp12b_b": "You will still need to use an `until` loop first, then use a `while` loop once you get to the lettuce."
        },
        "courseE_farmer_ramp12d_authored_hint": {
          "courseE_farmer_ramp12d_b": "You will still need to put your `until` and `while` loops inside of a `repeat` loop to solve this puzzle!"
        },
        "courseE_farmer_ramp12d_2018_authored_hint": {
          "courseE_farmer_ramp12d_b": "You will still need to put your `until` and `while` loops inside of a `repeat` loop to solve this puzzle!"
        },
        "courseE_farmer_ramp12e_authored_hint": {
          "courseE_farmer_ramp12e_b": "The solution to this puzzle will look a lot like the solution to the last puzzle, but turning in the other direction."
        },
        "courseE_farmer_ramp12e_2018_authored_hint": {
          "courseE_farmer_ramp12e_b": "The solution to this puzzle will look a lot like the solution to the last puzzle, but turning in the other direction."
        },
        "courseE_farmer_ramp12f_authored_hint": {
          "courseE_farmer_ramp12f_b": "Use an `if/else` block to help the farmer decide if she needs to turn right or left."
        },
        "courseE_farmer_ramp12f_2018_authored_hint": {
          "courseE_farmer_ramp12f_b": "Use an `if/else` block to help the farmer decide if she needs to turn right or left."
        },
        "courseE_farmer_ramp12g_authored_hint": {
          "courseE_farmer_ramp12G_b": "Use an `if/else` block to help the farmer decide if she needs to turn right or left."
        },
        "courseE_farmer_ramp12g_2018_authored_hint": {
          "courseE_farmer_ramp12G_b": "Use an `if/else` block to help the farmer decide if she needs to turn right or left."
        },
        "courseE_farmer_ramp13_authored_hint": {
          "courseE_farmer_ramp13_a": "There can be more than one of either crop in a space, so make sure to use `while` loops to pick them all!",
          "courseE_farmer_ramp13_b": "Use a `repeat` loop so that you don't have to write a separate if statement for each square.",
          "courseE_farmer_ramp13_c": "If you can't figure out where to put the loops, try writing your code step-by-step and look for patterns."
        },
        "courseE_farmer_ramp13_2018_authored_hint": {
          "courseE_farmer_ramp13_a": "There can be more than one of either crop in a space, so make sure to use `while` loops to pick them all!",
          "courseE_farmer_ramp13_b": "Use a `repeat` loop so that you don't have to write a separate if statement for each square.",
          "courseE_farmer_ramp13_c": "If you can't figure out where to put the loops, try writing your code step-by-step and look for patterns."
        },
        "courseE_farmer_ramp15_authored_hint": {
          "courseE_farmer_ramp15_a": "Use the `repeat until at pumpkin` block to make it to the end of the path.",
          "courseE_farmer_ramp15_b": "What else needs to be done while moving along the path to the pumpkin?",
          "courseE_farmer_ramp15_c": "The sprouts hide various amounts of either corn or lettuce to harvest on your way to the pumpkin."
        },
        "courseE_farmer_ramp15_2018_authored_hint": {
          "courseE_farmer_ramp15_a": "Use the `repeat until at pumpkin` block to make it to the end of the path.",
          "courseE_farmer_ramp15_b": "What else needs to be done while moving along the path to the pumpkin?",
          "courseE_farmer_ramp15_c": "The sprouts hide various amounts of either corn or lettuce to harvest on your way to the pumpkin."
        },
        "courseE_farmer_ramp16_authored_hint": {
          "courseE_farmer_ramp16_a": "If we are moving along the path to the pumpkin, what do we have to do over and over? When do we stop repeating?",
          "courseE_farmer_ramp16_b": "Checking for corn or lettuce at every space will help simplify your code. What should you do if there is a crop? What if there is nothing?",
          "courseE_farmer_ramp16_c": "Use an `if/else` block to keep moving forward. Which way do you need to turn when the forward path is blocked?"
        },
        "courseE_maze_ramp1_authored_hint": {
          "courseC_maze_programming1_0": "If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click \"Run\" again.",
          "courseC_maze_programming1_b": "You don't need any extra blocks from the toolbox for this puzzle!"
        },
        "courseE_maze_ramp13_authored_hint": {
          "courseD_maze_ramp11_b": "Don't forget to use the \"Step\" button to go through block by block and look for errors.",
          "courseD_maze_ramp11_a": "Use repeat blocks to run either a single block or a chunk of code over and over."
        },
        "courseE_maze_ramp1_2018_authored_hint": {
          "courseC_maze_programming1_0": "If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click \"Run\" again.",
          "courseC_maze_programming1_b": "You don't need any extra blocks from the toolbox for this puzzle!"
        },
        "courseE_maze_ramp2_authored_hint": {
          "courseC_maze_programming2_a": "To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.",
          "courseC_maze_programming2_b": "Make sure all three `move forward` blocks are attached to the `when run` block."
        },
        "courseE_maze_ramp2_2018_authored_hint": {
          "courseC_maze_programming2_a": "To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.",
          "courseC_maze_programming2_b": "Make sure all three `move forward` blocks are attached to the `when run` block."
        },
        "courseE_maze_ramp3_authored_hint": {
          "courseC_maze_programming3_a": "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n",
          "courseC_maze_programming3_b": "Remember that turns to the right and left are from the bird's perspective."
        },
        "courseE_maze_ramp3_2018_authored_hint": {
          "courseC_maze_programming3_a": "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n",
          "courseC_maze_programming3_b": "Remember that turns to the right and left are from the bird's perspective."
        },
        "courseE_maze_ramp4_authored_hint": {
          "courseC_maze_programming4_a": "You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.",
          "courseC_maze_programming4_b": "To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.",
          "courseC_maze_programming4_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseE_maze_ramp4_2018_authored_hint": {
          "courseC_maze_programming4_a": "You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.",
          "courseC_maze_programming4_b": "To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.",
          "courseC_maze_programming4_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseE_maze_ramp5_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseC_maze_programming5_b": "How far do you need to move to get to the corner?",
          "courseC_maze_programming5_c": "You will need to turn left at the corner to get to the pig."
        },
        "courseE_maze_ramp5_2018_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseC_maze_programming5_b": "How far do you need to move to get to the corner?",
          "courseC_maze_programming5_c": "You will need to turn left at the corner to get to the pig."
        },
        "courseE_maze_ramp6_authored_hint": {
          "courseC_maze_programming6_a": "There are two ways to solve this puzzle!",
          "courseC_maze_programming6_b": "Remember to turn first before moving, since the bird starts facing a wall.",
          "courseC_maze_programming6_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseE_maze_ramp6_2018_authored_hint": {
          "courseC_maze_programming6_a": "There are two ways to solve this puzzle!",
          "courseC_maze_programming6_b": "Remember to turn first before moving, since the bird starts facing a wall.",
          "courseC_maze_programming6_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseE_maze_ramp7_authored_hint": {
          "courseD_maze_ramp7_b": "Don't forget to use the \"Step\" button to go through block by block and look for errors.",
          "courseD_maze_ramp7_a": "Use repeat blocks to run either a single block or a chunk of code over and over.",
          "courseD_maze_ramp7_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseE_maze_ramp7_2018_authored_hint": {
          "courseD_maze_ramp7_b": "Don't forget to use the \"Step\" button to go through block by block and look for errors.",
          "courseD_maze_ramp7_a": "Use repeat blocks to run either a single block or a chunk of code over and over.",
          "courseD_maze_ramp7_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseE_multi_maze_ramp5_authored_hint": {
          "courseC_maze_programming5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?"
        },
        "courseE_playLab_challenge1_authored_hint": {
          "courseE_playLab_challenge1_a": "Here are some things you could do when the player wins the game:\n\n* Make the dinosaur vanish.\n* Stop the squirrels.\n* Make the squirrels and knight happy.\n* Set a new background.\n* Make the knight thank the player for helping.\n* Make all of the actors vanish and show a \"You Win!\" message.",
          "courseE_playLab_challenge1_b": "Here are some things you could do when the player loses the game:\n\n* Make the knight vanish.\n* Make the squirrels sad.\n* Make the dinosaur say something.\n* Set a new background.\n* Make all of the actors vanish and show a \"Game Over\" message."
        },
        "courseE_playLab_challenge1_2018_authored_hint": {
          "courseE_playLab_challenge1_a": "Here are some things you could do when the player wins the game:\n\n* Make the dinosaur vanish.\n* Stop the squirrels.\n* Make the squirrels and knight happy.\n* Set a new background.\n* Make the knight thank the player for helping.\n* Make all of the actors vanish and show a \"You Win!\" message.",
          "courseE_playLab_challenge1_b": "Here are some things you could do when the player loses the game:\n\n* Make the knight vanish.\n* Make the squirrels sad.\n* Make the dinosaur say something.\n* Set a new background.\n* Make all of the actors vanish and show a \"Game Over\" message."
        },
        "courseE_playLab_scaffold1_authored_hint": {
          "courseE_playLab_scaffold1_a": "The `set actor 1 to ??? image` block can be used to add an actor to the stage.",
          "courseE_playLab_scaffold1_b": "Put the `set actor` block under `when run` to make your actor appear at the beginning of the program.",
          "courseE_playLab_scaffold1_c": "Use `set ??? background` to choose a background for your scene."
        },
        "courseE_playLab_scaffold1_2018_authored_hint": {
          "courseE_playLab_scaffold1_a": "The `set actor 1 to ??? image` block can be used to add an actor to the stage.",
          "courseE_playLab_scaffold1_b": "Put the `set actor` block under `when run` to make your actor appear at the beginning of the program.",
          "courseE_playLab_scaffold1_c": "Use `set ??? background` to choose a background for your scene."
        },
        "courseE_playLab_scaffold2_authored_hint": {
          "courseE_playLab_scaffold1_a": "Pull on the dropdown menu of the `when ____ arrow` event to change the direction the block controls.",
          "courseE_playLab_scaffold1_b": "You should have four `when arrow` event blocks, with a direction to move underneath each.",
          "courseE_playLab_scaffold1_c": "When you are done, you should be able to move your hero with the arrow keys!"
        },
        "courseE_playLab_scaffold2_2018_authored_hint": {
          "courseE_playLab_scaffold1_a": "Pull on the dropdown menu of the `when ____ arrow` event to change the direction the block controls.",
          "courseE_playLab_scaffold1_b": "You should have four `when arrow` event blocks, with a direction to move underneath each.",
          "courseE_playLab_scaffold1_c": "When you are done, you should be able to move your hero with the arrow keys!"
        },
        "courseE_playLab_scaffold4_authored_hint": {
          "courseE_playLab_scaffold4_a": "Use `score point` to add a point, and `remove point` to subtract one."
        },
        "courseE_playLab_scaffold4_2018_authored_hint": {
          "courseE_playLab_scaffold4_a": "Use `score point` to add a point, and `remove point` to subtract one."
        },
        "courseE_playLab_scaffold5_authored_hint": {
          "courseE_playLab_scaffold5_a": "To finish this level, you need to win or lose. Use a `end game as win` or `end game as loss` block to finish."
        },
        "courseE_playLab_scaffold5_2018_authored_hint": {
          "courseE_playLab_scaffold5_a": "To finish this level, you need to win or lose. Use a `end game as win` or `end game as loss` block to finish."
        },
        "courseE_playlab_challenge2_authored_hint": {
          "courseE_playlab_challenge2_a": "The actor knows what to say based on its mood. Try playing with the things the witch might say.\n\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TEXT\">\n              <block type=\"text\">\n                <title name=\"TEXT\">Concentrate and ask again!</title>\n              </block>\n            </value>\n            <value name=\"TIME\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n          </block></xml>",
          "courseE_playlab_challenge2_b": "It will feel like the game starts all over if you call the `ask a question` function again below the list of conditionals.\n\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n               \n<block type=\"procedures_callnoreturn\">\n<mutation name=\"Ask a question\"></mutation>\n        </block></block></xml>",
          "courseE_playlab_challenge2_c": "You will need to add more conditional statements to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TEXT\">\n              <block type=\"text\">\n                <title name=\"TEXT\">???</title>\n              </block>\n            </value>\n            <value name=\"TIME\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n          </block>\n              </statement></block></xml>\n\n              \nDon't forget to change which moods the actor will show inside of the `repeat forever` loop. You can also set the moods randomly!",
          "courseE_playlab_challenge2_d": "Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.\n\nDon't forget to change the instructions inside the `show title screen` block so they still make sense!",
          "courseE_playlab_challenge2_e": "When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?\n\nHave a friend try your app when it is finished!"
        },
        "courseE_playlab_variables_challenge2_authored_hint": {
          "courseF_playlab_variables_challenge3_a": "The actor knows what to say because it checks the current value of the `fortune` variable.\n\n<xml><block type=\"variables_set\" inline=\"false\">\n            <title name=\"VAR\">fortune</title>\n            <value name=\"VALUE\">\n              <block type=\"text\" movable=\"false\">\n                <title name=\"TEXT\">Concentrate and ask again!</title>\n              </block>\n            </value>\n          </block></xml>",
          "courseF_playlab_variables_challenge3_b": "It will feel like the game starts all over if you call the `ask a question` function again after the actor says the fortune.\n\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n                <value name=\"SPRITE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">1</title>\n                  </block>\n                </value>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">fortune</title>\n                  </block>\n                </value>\n                <value name=\"TIME\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">2</title>\n                  </block>\n                </value>\n              <next>\n<block type=\"procedures_callnoreturn\">\n        <mutation name=\"Ask a question\"/>\n        </block></next></block></xml>",
          "courseF_playlab_variables_challenge3_c": "You will need to add more conditional statements to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"variables_set\" inline=\"false\">\n                <title name=\"VAR\">fortune</title>\n                <value name=\"VALUE\">\n                  <block type=\"text\" movable=\"false\">\n                    <title name=\"TEXT\">???</title>\n                  </block>\n                </value>\n              </block>\n              </statement></block></xml>\n\n              \nDon't forget to change which moods the actor will show inside of the `repeat forever` loop. You can also set the moods randomly!",
          "courseF_playlab_variables_challenge3_d": "Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.\n\nDon't forget to change the instructions inside the `Ask a question` function so they still make sense!",
          "courseF_playlab_variables_challenge3_e": "When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?\n\nHave a friend try your app when it is finished!"
        },
        "courseF_IceAge_1_authored_hint": {
          "iceage_hello1_a": "You only need to add one block to solve this puzzle.  Drag the `actor 1 say` block out from the toolbar and connect it to the `when run` event block that is already in the workspace. Next, type \"Hello!\" inside."
        },
        "courseF_IceAge_10_authored_hint": {
          "iceage_throw_hearts_a": "When do you want to throw hearts at granny?  When an arrow is pressed? When you click on Sid?  When you click on Granny?  The choice is yours!",
          "iceage_throw_hearts_b": "To get granny to be happy when she receives a heart, you will need to connect the `set actor 2 mood to happy` block beneath the `when actor 2 touches projectile` event."
        },
        "courseF_IceAge_11_authored_hint": {
          "iceage_free_play_a": "Can you make Sid and Manny have an Ice Crystal fight?  ",
          "iceage_free_play_b": "Make Granny chase Diego.  End the game as a win if she catches him.",
          "iceage_free_play_c": "Can you have Sid throw snowflakes at Diego and have Diego get bigger each time one hits?  End the game as a win if Diego gets hit 5 times."
        },
        "courseF_IceAge_2_authored_hint": {
          "iceage_hello2_a": "To solve this puzzle, you will need to have Sid say something using the `actor 1 say` block.  You will also need to have Manny say something with the `actor 2 say` block. "
        },
        "courseF_IceAge_3_authored_hint": {
          "iceage_hello3_a": "Use the `move actor 1 right by 200 pixels` block to solve this puzzle."
        },
        "courseF_IceAge_4_authored_hint": {
          "iceage_move_to_actor_a": "For this puzzle, you can either move Diego down by 200 pixels, or move Manny up by 200 pixels.",
          "iceage_move_to_actor_b": "Connect the `play ___ sound` block to the `when actor 1 touches actor 2` event to finish this challenge."
        },
        "courseF_IceAge_5_authored_hint": {
          "iceage_repeat_a": "Use both the `move actor 1 left` and `move actor 1 right` blocks to solve this puzzle."
        },
        "courseF_IceAge_6_authored_hint": {
          "iceage_click_hello_a": "Add one or more `actor 1 say` blocks to the `when clicked` event to complete this puzzle."
        },
        "courseF_IceAge_7_authored_hint": {
          "iceage_move_events_a": "Each of the `when ___ arrow` events will need to have a different `move actor 1` command connected to it to solve this puzzle. "
        },
        "courseF_IceAge_8_authored_hint": {
          "iceage_sound_and_points_a": "You will need to add two blocks beneath the `when actor 1 touches actor 2` event."
        },
        "courseF_IceAge_9_authored_hint": {
          "iceage_warn_ice_age_a": "You should only have to add two blocks to get this puzzle where it needs to be. ",
          "iceage_warn_ice_age_b": "Add both new blocks beneath the `when run` event to have them happen immediately after the program starts."
        },
        "courseF_artist_for1_authored_hint": {
          "courseF_artist_for1_a": "Can you draw something like this:\n\n![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)"
        },
        "courseF_artist_for10_authored_hint": {
          "courseF_artist_for10_a": "The image in the drawing was made using a counter for the `set alpha` and `counter` / 10 as a brush size.",
          "courseF_artist_for10_b": "The image in the drawing uses a turn of 61 degrees.",
          "courseF_artist_for10_c": "Want to know how the sample image was done?\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n        <value name=\"COLOUR\">\n          <block type=\"colour_picker\">\n            <title name=\"COLOUR\">#ff0000</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"controls_for_counter\" inline=\"true\">\n          <mutation counter=\"counter\"></mutation>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">15</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">175</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"draw_width\" inline=\"false\">\n                <value name=\"WIDTH\">\n                  <block type=\"math_arithmetic\" inline=\"true\">\n                    <title name=\"OP\">DIVIDE</title>\n                    <value name=\"A\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <value name=\"B\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">10</title>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"alpha\" inline=\"true\" id=\"alpha\">\n                    <value name=\"VALUE\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"draw_move\" inline=\"true\">\n                        <title name=\"DIR\">moveForward</title>\n                        <value name=\"VALUE\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                        <next>\n                          <block type=\"draw_turn\" inline=\"true\">\n                            <title name=\"DIR\">turnRight</title>\n                            <value name=\"VALUE\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">61</title>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseF_artist_for10_2018_authored_hint": {
          "courseF_artist_for10_a": "The image in the drawing was made using a counter for the `set alpha` and `counter` / 10 as a brush size.",
          "courseF_artist_for10_b": "The image in the drawing uses a turn of 61 degrees.",
          "courseF_artist_for10_c": "Want to know how the sample image was done?\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n        <value name=\"COLOUR\">\n          <block type=\"colour_picker\">\n            <title name=\"COLOUR\">#ff0000</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"controls_for_counter\" inline=\"true\">\n          <mutation counter=\"counter\"></mutation>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">15</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">175</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"draw_width\" inline=\"false\">\n                <value name=\"WIDTH\">\n                  <block type=\"math_arithmetic\" inline=\"true\">\n                    <title name=\"OP\">DIVIDE</title>\n                    <value name=\"A\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <value name=\"B\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">10</title>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"alpha\" inline=\"true\" id=\"alpha\">\n                    <value name=\"VALUE\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"draw_move\" inline=\"true\">\n                        <title name=\"DIR\">moveForward</title>\n                        <value name=\"VALUE\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                        <next>\n                          <block type=\"draw_turn\" inline=\"true\">\n                            <title name=\"DIR\">turnRight</title>\n                            <value name=\"VALUE\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">61</title>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseF_artist_for1_2018_authored_hint": {
          "courseF_artist_for1_a": "Can you draw something like this:\n\n![](https://images.code.org/efee6df2a8840c89fa535bef72e9e45f-image-1530131926453.png)"
        },
        "courseF_artist_for2_authored_hint": {
          "courseF_artist_for2_a": "Use `counter` for the length of your triangles inside your `repeat` loop.\n\n<xml><block type=\"draw_move\" inline=\"true\">\n      <title name=\"DIR\">moveForward</title>\n      <value name=\"VALUE\">\n        <block type=\"variables_get\">\n          <title name=\"VAR\">counter</title>\n        </block>\n      </value>\n    </block>\n    </xml>",
          "courseF_artist_for2_b": "Remember to count by 10 within your for loop.",
          "courseF_artist_for2_c": "This is the pattern that the Artist will follow:\n\n![](https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif)"
        },
        "courseF_artist_for2_2018_authored_hint": {
          "courseF_artist_for2_a": "Use `counter` for the length of your triangles inside your `repeat` loop.\n\n<xml><block type=\"draw_move\" inline=\"true\">\n      <title name=\"DIR\">moveForward</title>\n      <value name=\"VALUE\">\n        <block type=\"variables_get\">\n          <title name=\"VAR\">counter</title>\n        </block>\n      </value>\n    </block>\n    </xml>",
          "courseF_artist_for2_b": "Remember to count by 10 within your for loop.",
          "courseF_artist_for2_c": "This is the pattern that the Artist will follow:\n\n![](https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif)"
        },
        "courseF_artist_for3_authored_hint": {
          "courseF_artist_for3_a": "To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.\n\n<xml>\n<block type=\"draw_move\" inline=\"true\">\n      <title name=\"DIR\">moveForward</title>\n      <value name=\"VALUE\">\n        <block type=\"variables_get\">\n          <title name=\"VAR\">counter</title>\n        </block>\n      </value>\n    </block>\n</xml>",
          "courseF_artist_for3_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseF_artist_for3_2018_authored_hint": {
          "courseF_artist_for3_a": "To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.\n\n<xml>\n<block type=\"draw_move\" inline=\"true\">\n      <title name=\"DIR\">moveForward</title>\n      <value name=\"VALUE\">\n        <block type=\"variables_get\">\n          <title name=\"VAR\">counter</title>\n        </block>\n      </value>\n    </block>\n</xml>",
          "courseF_artist_for3_b": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseF_artist_for4_authored_hint": {
          "courseF_artist_for4_a": "**What is the smallest number you will need?  \nWhat is the largest number?  \nHow big is the increase each time?**\n\nThose are the questions you need to ask to fill in the blanks of the `for` loop.",
          "courseF_artist_for4_b": "Your code will be very similar to what you wrote in the last puzzle, but remember to draw a square this time!",
          "courseF_artist_for4_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseF_artist_for4_2018_authored_hint": {
          "courseF_artist_for4_a": "**What is the smallest number you will need?  \nWhat is the largest number?  \nHow big is the increase each time?**\n\nThose are the questions you need to ask to fill in the blanks of the `for` loop.",
          "courseF_artist_for4_b": "Your code will be very similar to what you wrote in the last puzzle, but remember to draw a square this time!",
          "courseF_artist_for4_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseF_artist_for5_authored_hint": {
          "courseF_artist_for5_a": "You don't need the `repeat` loop inside when making this spiral!",
          "courseF_artist_for5_b": "Your `for` loop, move, and turn blocks can stay exactly the same."
        },
        "courseF_artist_for5_2018_authored_hint": {
          "courseF_artist_for5_a": "You don't need the `repeat` loop inside when making this spiral!",
          "courseF_artist_for5_b": "Your `for` loop, move, and turn blocks can stay exactly the same."
        },
        "courseF_artist_for6_authored_hint": {
          "courseF_artist_for6_a": "Your `for` loop will count from 15 to 300 by 15.",
          "courseF_artist_for6_b": "Put a `move forward` and a `turn` block within this `for` loop.",
          "courseF_artist_for6_c": "All you have to change is the number of degrees in the `turn` block."
        },
        "courseF_artist_for6_2018_authored_hint": {
          "courseF_artist_for6_a": "Your `for` loop will count from 15 to 300 by 15.",
          "courseF_artist_for6_b": "Put a `move forward` and a `turn` block within this `for` loop.",
          "courseF_artist_for6_c": "All you have to change is the number of degrees in the `turn` block."
        },
        "courseF_artist_for7_authored_hint": {
          "courseF_artist_for7_a": "The pen is thinner in this puzzle. You will need to set it to `1` before you start.",
          "courseF_artist_for7_b": "Notice that this spiral turns right instead of left!",
          "courseF_artist_for7_c": "The `for` loop in this puzzle goes from 15 to 300 by 2.",
          "courseF_artist_for7_d": "This image is made by turning just 89 degrees."
        },
        "courseF_artist_for7_2018_authored_hint": {
          "courseF_artist_for7_a": "The pen is thinner in this puzzle. You will need to set it to `1` before you start.",
          "courseF_artist_for7_b": "Notice that this spiral turns right instead of left!",
          "courseF_artist_for7_c": "The `for` loop in this puzzle goes from 15 to 300 by 2.",
          "courseF_artist_for7_d": "This image is made by turning just 89 degrees."
        },
        "courseF_artist_for8_authored_hint": {
          "courseF_artist_for8_a": "Keep everything else the same in your code, only the turn angle needs to change.",
          "courseF_artist_for8_b": "If you want, you can choose a different color for your spiral!"
        },
        "courseF_artist_for8_2018_authored_hint": {
          "courseF_artist_for8_a": "Keep everything else the same in your code, only the turn angle needs to change.",
          "courseF_artist_for8_b": "If you want, you can choose a different color for your spiral!"
        },
        "courseF_artist_for9_authored_hint": {
          "courseF_artist_for9_a": "If you put the `set alpha` block inside of your `for` loop, and use the `counter` variable to change it, you can create a design like this.",
          "courseF_artist_for9_b": "The `set alpha` block changes the opacity of a color. The smaller the value, the more transparent the color is."
        },
        "courseF_artist_for9_2018_authored_hint": {
          "courseF_artist_for9_a": "If you put the `set alpha` block inside of your `for` loop, and use the `counter` variable to change it, you can create a design like this.",
          "courseF_artist_for9_b": "The `set alpha` block changes the opacity of a color. The smaller the value, the more transparent the color is."
        },
        "courseF_artist_for_challenge1_authored_hint": {
          "courseF_artist_for_challenge1_a": "The `pen width` is 1. The first square has 50 pixel sides, and each square is 50 pixels wider than the last.",
          "courseF_artist_for_challenge1_b": "The opacity on the brush is always `counter`/2.",
          "courseF_artist_for_challenge1_c": "After you make each square, don't forget to jump backward, turn, jump again, then turn back!",
          "courseF_artist_for_challenge1_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_width\" inline=\"false\">\n        <value name=\"WIDTH\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n            <value name=\"COLOUR\">\n              <block type=\"colour_picker\">\n                <title name=\"COLOUR\">#0000cd</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"controls_for_counter\" inline=\"true\">\n              <mutation counter=\"counter\"></mutation>\n                <value name=\"FROM\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">50</title>\n                  </block>\n                </value>\n                <value name=\"TO\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">350</title>\n                  </block>\n                </value>\n                <value name=\"BY\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">50</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"alpha\" inline=\"true\" id=\"alpha\">\n                    <value name=\"VALUE\">\n                      <block type=\"math_arithmetic\" inline=\"true\">\n                        <title name=\"OP\">DIVIDE</title>\n                        <value name=\"A\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                        <value name=\"B\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">2</title>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"controls_repeat_ext\" inline=\"true\">\n                        <value name=\"TIMES\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">4</title>\n                          </block>\n                        </value>\n                        <statement name=\"DO\">\n                          <block type=\"draw_move\" inline=\"true\">\n                            <title name=\"DIR\">moveForward</title>\n                            <value name=\"VALUE\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n                              </block>\n                            </value>\n                            <next>\n                              <block type=\"draw_turn\" inline=\"true\">\n                                <title name=\"DIR\">turnRight</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">90</title>\n                                  </block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type=\"jump\" inline=\"true\">\n                            <title name=\"DIR\">jumpBackward</title>\n                            <value name=\"VALUE\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">25</title>\n                              </block>\n                            </value>\n                            <next>\n                              <block type=\"draw_turn\" inline=\"true\">\n                                <title name=\"DIR\">turnRight</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">90</title>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"jump\" inline=\"true\">\n                                    <title name=\"DIR\">jumpBackward</title>\n                                    <value name=\"VALUE\">\n                                      <block type=\"math_number\">\n                                        <title name=\"NUM\">25</title>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type=\"draw_turn\" inline=\"true\">\n                                        <title name=\"DIR\">turnLeft</title>\n                                        <value name=\"VALUE\">\n                                          <block type=\"math_number\">\n                                            <title name=\"NUM\">90</title>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseF_artist_for_challenge1_2018_authored_hint": {
          "courseF_artist_for_challenge1_a": "The `pen width` is 1. The first square has 50 pixel sides, and each square is 50 pixels wider than the last.",
          "courseF_artist_for_challenge1_b": "The opacity on the brush is always `counter`/2.",
          "courseF_artist_for_challenge1_c": "After you make each square, don't forget to jump backward, turn, jump again, then turn back!",
          "courseF_artist_for_challenge1_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_width\" inline=\"false\">\n        <value name=\"WIDTH\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n            <value name=\"COLOUR\">\n              <block type=\"colour_picker\">\n                <title name=\"COLOUR\">#0000cd</title>\n              </block>\n            </value>\n            <next>\n              <block type=\"controls_for_counter\" inline=\"true\">\n              <mutation counter=\"counter\"></mutation>\n                <value name=\"FROM\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">50</title>\n                  </block>\n                </value>\n                <value name=\"TO\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">350</title>\n                  </block>\n                </value>\n                <value name=\"BY\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">50</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"alpha\" inline=\"true\" id=\"alpha\">\n                    <value name=\"VALUE\">\n                      <block type=\"math_arithmetic\" inline=\"true\">\n                        <title name=\"OP\">DIVIDE</title>\n                        <value name=\"A\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                        <value name=\"B\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">2</title>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"controls_repeat_ext\" inline=\"true\">\n                        <value name=\"TIMES\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">4</title>\n                          </block>\n                        </value>\n                        <statement name=\"DO\">\n                          <block type=\"draw_move\" inline=\"true\">\n                            <title name=\"DIR\">moveForward</title>\n                            <value name=\"VALUE\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n                              </block>\n                            </value>\n                            <next>\n                              <block type=\"draw_turn\" inline=\"true\">\n                                <title name=\"DIR\">turnRight</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">90</title>\n                                  </block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type=\"jump\" inline=\"true\">\n                            <title name=\"DIR\">jumpBackward</title>\n                            <value name=\"VALUE\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">25</title>\n                              </block>\n                            </value>\n                            <next>\n                              <block type=\"draw_turn\" inline=\"true\">\n                                <title name=\"DIR\">turnRight</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">90</title>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"jump\" inline=\"true\">\n                                    <title name=\"DIR\">jumpBackward</title>\n                                    <value name=\"VALUE\">\n                                      <block type=\"math_number\">\n                                        <title name=\"NUM\">25</title>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type=\"draw_turn\" inline=\"true\">\n                                        <title name=\"DIR\">turnLeft</title>\n                                        <value name=\"VALUE\">\n                                          <block type=\"math_number\">\n                                            <title name=\"NUM\">90</title>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseF_artist_for_challenge2_authored_hint": {
          "courseF_artist_for_challenge2_c": "The `for loop` goes from 5 to 250 by 2. ",
          "courseF_artist_for_challenge2_a": "The color change happens using the `set color with red, green, blue` block.  Red is set constant at 255, green is always the value of `counter`, and blue is always `255 - counter`.",
          "courseF_artist_for_challenge2_b": "The code for this is simpler than you might think.  Just set the color inside the for loop, move forward, then turn.",
          "courseF_artist_for_challenge2_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_width\" inline=\"false\">\n        <value name=\"WIDTH\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"controls_for_counter\" inline=\"true\">\n          <mutation counter=\"counter\"></mutation>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">5</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">250</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n                <value name=\"COLOUR\">\n                  <block type=\"colour_rgb\" inline=\"false\">\n                    <value name=\"RED\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">255</title>\n                      </block>\n                    </value>\n                    <value name=\"GREEN\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <value name=\"BLUE\">\n                      <block type=\"math_arithmetic\" inline=\"true\">\n                        <title name=\"OP\">MINUS</title>\n                        <value name=\"A\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">255</title>\n                          </block>\n                        </value>\n                        <value name=\"B\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"draw_move\" inline=\"true\">\n                    <title name=\"DIR\">moveForward</title>\n                    <value name=\"VALUE\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"draw_turn\" inline=\"true\">\n                        <title name=\"DIR\">turnRight</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">80</title>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>\n\n![](https://images.code.org/4ce89e8d907f670408c3705f040e8677-image-1497728974326.49.09 PM.png)"
        },
        "courseF_artist_for_challenge2_2018_authored_hint": {
          "courseF_artist_for_challenge2_c": "The `for loop` goes from 5 to 250 by 2. ",
          "courseF_artist_for_challenge2_a": "The color change happens using the `set color with red, green, blue` block.  Red is set constant at 255, green is always the value of `counter`, and blue is always `255 - counter`.",
          "courseF_artist_for_challenge2_b": "The code for this is simpler than you might think.  Just set the color inside the for loop, move forward, then turn.",
          "courseF_artist_for_challenge2_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"draw_width\" inline=\"false\">\n        <value name=\"WIDTH\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"controls_for_counter\" inline=\"true\">\n          <mutation counter=\"counter\"></mutation>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">5</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">250</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"draw_colour\" inline=\"true\" id=\"draw-color\">\n                <value name=\"COLOUR\">\n                  <block type=\"colour_rgb\" inline=\"false\">\n                    <value name=\"RED\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">255</title>\n                      </block>\n                    </value>\n                    <value name=\"GREEN\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <value name=\"BLUE\">\n                      <block type=\"math_arithmetic\" inline=\"true\">\n                        <title name=\"OP\">MINUS</title>\n                        <value name=\"A\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">255</title>\n                          </block>\n                        </value>\n                        <value name=\"B\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"draw_move\" inline=\"true\">\n                    <title name=\"DIR\">moveForward</title>\n                    <value name=\"VALUE\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"draw_turn\" inline=\"true\">\n                        <title name=\"DIR\">turnRight</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">80</title>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>\n\n![](https://images.code.org/4ce89e8d907f670408c3705f040e8677-image-1497728974326.49.09 PM.png)"
        },
        "courseF_artist_fwp1_authored_hint": {
          "courseF_artist_fwp1_c": "Put all of the code for drawing a square inside the function editor.",
          "courseF_artist_fwp1_a": "Remember, you need to turn 90 degrees to draw a square.",
          "courseF_artist_fwp1_b": "You only need to repeat as many times as the number of sides in a square."
        },
        "courseF_artist_fwp1_2018_authored_hint": {
          "courseF_artist_fwp1_c": "Put all of the code for drawing a square inside the function editor.",
          "courseF_artist_fwp1_a": "Remember, you need to turn 90 degrees to draw a square.",
          "courseF_artist_fwp1_b": "You only need to repeat as many times as the number of sides in a square."
        },
        "courseF_artist_fwp2_authored_hint": {
          "courseF_artist_fwp2_a": "You need to click the \"edit\" button to get into the function.  Once you're there, add a parameter called `length` and use it inside your `move forward` block!",
          "courseF_artist_fwp2_b": "When calling your function, use a `for loop` for the best possible code!"
        },
        "courseF_artist_fwp2_2018_authored_hint": {
          "courseF_artist_fwp2_a": "You need to click the \"edit\" button to get into the function.  Once you're there, add a parameter called `length` and use it inside your `move forward` block!",
          "courseF_artist_fwp2_b": "When calling your function, use a `for loop` for the best possible code!"
        },
        "courseF_artist_fwp3_authored_hint": {
          "courseF_artist_fwp3_a": "This gets easier if you put it all in a `for` loop.",
          "courseF_artist_fwp3_b": "Be sure to turn 90 degrees between each square!\n\n![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)"
        },
        "courseF_artist_fwp3_2018_authored_hint": {
          "courseF_artist_fwp3_a": "This gets easier if you put it all in a `for` loop.",
          "courseF_artist_fwp3_b": "Be sure to turn 90 degrees between each square!\n\n![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)"
        },
        "courseF_artist_fwp4_authored_hint": {
          "courseF_artist_fwp4_b": "Remember to **add** a parameter.  Don't remove the one that is already there!",
          "courseF_artist_fwp4_c": "You will need to call your function three times to draw the shapes."
        },
        "courseF_artist_fwp4_2018_authored_hint": {
          "courseF_artist_fwp4_b": "Remember to **add** a parameter.  Don't remove the one that is already there!",
          "courseF_artist_fwp4_c": "You will need to call your function three times to draw the shapes."
        },
        "courseF_artist_fwp5_authored_hint": {
          "courseF_artist_fwp5_d": "A `for` loop would really help you out here!",
          "courseF_artist_fwp5_c": "You will need to edit the function a little bit, since your previous function turned the artist to the right after each side, and this image needs a turn to the left.",
          "courseF_artist_fwp5_a": "The length of sides for each shape is 7 times the number of sides it has.",
          "courseF_artist_fwp5_b": "Don't forget to jump 100 pixels between shapes."
        },
        "courseF_artist_fwp5_2018_authored_hint": {
          "courseF_artist_fwp5_d": "A `for` loop would really help you out here!",
          "courseF_artist_fwp5_c": "You will need to edit the function a little bit, since your previous function turned the artist to the right after each side, and this image needs a turn to the left.",
          "courseF_artist_fwp5_a": "The length of sides for each shape is 7 times the number of sides it has.",
          "courseF_artist_fwp5_b": "Don't forget to jump 100 pixels between shapes."
        },
        "courseF_artist_fwp6_authored_hint": {
          "courseF_artist_fwp6_a": "It's okay to run the program a few times to figure out how the function works with different parameters.",
          "courseF_artist_fwp6_b": "You don't need to add any `move` or `turn` blocks to finish this code."
        },
        "courseF_artist_fwp6_2018_authored_hint": {
          "courseF_artist_fwp6_a": "It's okay to run the program a few times to figure out how the function works with different parameters.",
          "courseF_artist_fwp6_b": "You don't need to add any `move` or `turn` blocks to finish this code."
        },
        "courseF_artist_fwp7_authored_hint": {
          "courseF_artist_fwp7_a": "Feeling lost after trying a couple of ideas? Try clicking the \"Start over\" button in the upper right-hand corner.",
          "courseF_artist_fwp7_b": "Your new `min` variable should go in the first slot in your `for` loop, inside the function."
        },
        "courseF_artist_fwp7_2018_authored_hint": {
          "courseF_artist_fwp7_a": "Feeling lost after trying a couple of ideas? Try clicking the \"Start over\" button in the upper right-hand corner.",
          "courseF_artist_fwp7_b": "Your new `min` variable should go in the first slot in your `for` loop, inside the function."
        },
        "courseF_artist_fwp8_authored_hint": {
          "courseF_artist_fwp8_a": "If your function is correct, you shouldn't need to change it for this puzzle.",
          "courseF_artist_fwp8_b": "The only thing you should need to do between function calls is change the color of the line."
        },
        "courseF_artist_fwp8_2018_authored_hint": {
          "courseF_artist_fwp8_a": "If your function is correct, you shouldn't need to change it for this puzzle.",
          "courseF_artist_fwp8_b": "The only thing you should need to do between function calls is change the color of the line."
        },
        "courseF_artist_fwp9_authored_hint": {
          "courseF_artist_fwp9_a": "Try one of these drawings.\n![](https://images.code.org/eae6d52956c2bc06b90db3693037df36-image-1493739069435.9.13 hints.png)"
        },
        "courseF_artist_fwp9_2018_authored_hint": {
          "courseF_artist_fwp9_a": "Try one of these drawings.\n![](https://images.code.org/eae6d52956c2bc06b90db3693037df36-image-1493739069435.9.13 hints.png)"
        },
        "courseF_artist_fwp_challenge1_authored_hint": {
          "courseF_artist_fwp_challenge1_b": "This is a series of polygons with sides that are counter pixels long.",
          "courseF_artist_fwp_challenge1_c": "Each polygon is called from inside a for loop that goes from 3 down to 6 by an increment of 1. What shapes is it making?"
        },
        "courseF_artist_fwp_challenge1_2018_authored_hint": {
          "courseF_artist_fwp_challenge1_b": "This is a series of polygons with sides that are counter pixels long.",
          "courseF_artist_fwp_challenge1_c": "Each polygon is called from inside a for loop that goes from 3 down to 6 by an increment of 1. What shapes is it making?"
        },
        "courseF_artist_fwp_challenge2_authored_hint": {
          "courseF_artist_fwp_challenge1_a": "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)",
          "courseF_artist_fwp_challenge1_b": "This is a series of octagons with sides that are `counter` pixels long. ",
          "courseF_artist_fwp_challenge1_c": "Each octagon is called from inside a `for` loop that goes from 200 down to 2 by 2. ",
          "courseF_artist_fwp_challenge1_d": "Don't forget to turn by 22.5 degrees at the end of each iteration. ",
          "courseF_artist_fwp_challenge1_e": "Both the color of each octagon and the width of the pen are controlled by the `counter` variable.",
          "courseF_artist_fwp_challenge1_f": "**Solution:**\n\n![Solution Blocks](https://images.code.org/a82cfea836b95ce6625b08afcc3b7b37-image-1469727289590.png)"
        },
        "courseF_artist_fwp_challenge2_2018_authored_hint": {
          "courseF_artist_fwp_challenge1_a": "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)",
          "courseF_artist_fwp_challenge1_b": "This is a series of octagons with sides that are `counter` pixels long. ",
          "courseF_artist_fwp_challenge1_c": "Each octagon is called from inside a `for` loop that goes from 200 down to 2 by 2. ",
          "courseF_artist_fwp_challenge1_d": "Don't forget to turn by 22.5 degrees at the end of each iteration. ",
          "courseF_artist_fwp_challenge1_e": "Both the color of each octagon and the width of the pen are controlled by the `counter` variable.",
          "courseF_artist_fwp_challenge1_f": "**Solution:**\n\n![Solution Blocks](https://images.code.org/a82cfea836b95ce6625b08afcc3b7b37-image-1469727289590.png)"
        },
        "courseF_artist_ramp10_authored_hint": {
          "courseF_artist_ramp10_a": "Don't forget to turn by 60 degrees after each triangle.  Which loop do you need to put that instruction inside?",
          "courseF_artist_ramp10_b": "If your code for a triangle is in a <xml><block type=\"controls_repeat\"><title name=\"TIMES\">6</title></block></xml> loop, this task will be a lot simpler.",
          "courseF_artist_ramp10_c": "You will draw six triangles in total for this design:\n\n![](https://images.code.org/bc62bed22e90d35e420b0a116ac487ef-image-1500347536221.2_solution2.gif)"
        },
        "courseF_artist_ramp10_2018_authored_hint": {
          "courseF_artist_ramp10_a": "Don't forget to turn by 60 degrees after each triangle.  Which loop do you need to put that instruction inside?",
          "courseF_artist_ramp10_b": "If your code for a triangle is in a <xml><block type=\"controls_repeat\"><title name=\"TIMES\">6</title></block></xml> loop, this task will be a lot simpler.",
          "courseF_artist_ramp10_c": "You will draw six triangles in total for this design:\n\n![](https://images.code.org/bc62bed22e90d35e420b0a116ac487ef-image-1500347536221.2_solution2.gif)"
        },
        "courseF_artist_ramp8_authored_hint": {
          "courseF_artist_ramp8_a": "To draw a side, use the <xml><block type=\"draw_move_by_constant\"><title name=\"DIR\">moveForward</title><title name=\"VALUE\">100</title></block></xml> block, and change the 100 to a 200.",
          "courseF_artist_ramp8_b": "To draw 4 sides, put the <xml><block type=\"draw_move_by_constant\"><title name=\"DIR\">moveForward</title><title name=\"VALUE\">200</title></block></xml> block inside of a repeat loop and make sure the loop is set to draw 4 times.\n\nDon't forget to turn afterward!",
          "courseF_artist_ramp8_c": "Your turn will also go inside of the <xml><block type=\"controls_repeat\"><title name=\"TIMES\">3</title></block></xml> loop."
        },
        "courseF_artist_ramp8_2018_authored_hint": {
          "courseF_artist_ramp8_a": "To draw a side, use the <xml><block type=\"draw_move_by_constant\"><title name=\"DIR\">moveForward</title><title name=\"VALUE\">100</title></block></xml> block, and change the 100 to a 200.",
          "courseF_artist_ramp8_b": "To draw 4 sides, put the <xml><block type=\"draw_move_by_constant\"><title name=\"DIR\">moveForward</title><title name=\"VALUE\">200</title></block></xml> block inside of a repeat loop and make sure the loop is set to draw 4 times.\n\nDon't forget to turn afterward!",
          "courseF_artist_ramp8_c": "Your turn will also go inside of the <xml><block type=\"controls_repeat\"><title name=\"TIMES\">3</title></block></xml> loop."
        },
        "courseF_artist_ramp9_authored_hint": {
          "courseF_artist_ramp9_a": "How is this similar to a square?  How is it different?",
          "courseF_artist_ramp9_b": "You can use the drop down menu on the turn blocks to see which angle you need!",
          "courseF_artist_ramp9_c": "You will want to move forward 100 pixels, then turn right 120 degrees for each side. Can you use a <xml><block type=\"controls_repeat\"><title name=\"TIMES\">3</title></block></xml> loop to make your code shorter?"
        },
        "courseF_artist_ramp9_2018_authored_hint": {
          "courseF_artist_ramp9_a": "How is this similar to a square?  How is it different?",
          "courseF_artist_ramp9_b": "You can use the drop down menu on the turn blocks to see which angle you need!",
          "courseF_artist_ramp9_c": "You will want to move forward 100 pixels, then turn right 120 degrees for each side. Can you use a <xml><block type=\"controls_repeat\"><title name=\"TIMES\">3</title></block></xml> loop to make your code shorter?"
        },
        "courseF_artist_variables10_authored_hint": {
          "courseF_artist_variables10_a": "Have fun with this level! See what little changes can do to your code.",
          "courseF_artist_variables10_b": "You can try multiple things, and run your code multiple times."
        },
        "courseF_artist_variables10_2018_authored_hint": {
          "courseF_artist_variables10_a": "Have fun with this level! See what little changes can do to your code.",
          "courseF_artist_variables10_b": "You can try multiple things, and run your code multiple times."
        },
        "courseF_artist_variables2_authored_hint": {
          "courseF_artist_variables2_a": "Remember to move forward after drawing each triangle.",
          "courseF_artist_variables2_b": "Your new loop will contain the loop for your triangle, then a `move forward` command."
        },
        "courseF_artist_variables2_2018_authored_hint": {
          "courseF_artist_variables2_a": "Remember to move forward after drawing each triangle.",
          "courseF_artist_variables2_b": "Your new loop will contain the loop for your triangle, then a `move forward` command."
        },
        "courseF_artist_variables3_authored_hint": {
          "courseF_artist_variables3_a": "The variable `length` will be used in two places in your code: In the side length of your triangle, and in the amount you move forward between triangles.",
          "courseF_artist_variables3_b": "A number block with value 50 should only be in one place: after the `set variable length` block."
        },
        "courseF_artist_variables3_2018_authored_hint": {
          "courseF_artist_variables3_a": "The variable `length` will be used in two places in your code: In the side length of your triangle, and in the amount you move forward between triangles.",
          "courseF_artist_variables3_b": "A number block with value 50 should only be in one place: after the `set variable length` block."
        },
        "courseF_artist_variables4_authored_hint": {
          "courseF_artist_variables4_a": "Your code won't be much different than it was in the last puzzle, except that you will need to turn the artist to jump down, then turn him back to get ready to jump forward again.",
          "courseF_artist_variables4_c": "This is the pattern your artist will be following:\n\n![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)",
          "courseF_artist_variables4_b": "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
        },
        "courseF_artist_variables4_2018_authored_hint": {
          "courseF_artist_variables4_a": "Your code won't be much different than it was in the last puzzle, except that you will need to turn the artist to jump down, then turn him back to get ready to jump forward again.",
          "courseF_artist_variables4_c": "This is the pattern your artist will be following:\n\n![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)",
          "courseF_artist_variables4_b": "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
        },
        "courseF_artist_variables5_authored_hint": {
          "courseF_artist_variables5_a": "The second half of your code should look almost the same as the first half, except you will be turning *left*, jumping, then turning *right*.",
          "courseF_artist_variables5_b": "The first half of your code will draw three triangles, and the second half will draw the other three.",
          "courseF_artist_variables5_c": "Start by duplicating the code in the first half of your program, then alter it to make the design shown.",
          "courseF_artist_variables5_d": "This is the pattern your artist will follow:\n\n![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)"
        },
        "courseF_artist_variables5_2018_authored_hint": {
          "courseF_artist_variables5_a": "The second half of your code should look almost the same as the first half, except you will be turning *left*, jumping, then turning *right*.",
          "courseF_artist_variables5_b": "The first half of your code will draw three triangles, and the second half will draw the other three.",
          "courseF_artist_variables5_c": "Start by duplicating the code in the first half of your program, then alter it to make the design shown.",
          "courseF_artist_variables5_d": "This is the pattern your artist will follow:\n\n![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)"
        },
        "courseF_artist_variables6_authored_hint": {
          "courseF_artist_variables6_a": "Thanks to variables, you only need to change one number at the top to make this work.",
          "courseF_artist_variables6_b": "You will need to edit the number block with value 50, but nothing else in the code needs to be altered."
        },
        "courseF_artist_variables6_2018_authored_hint": {
          "courseF_artist_variables6_a": "Thanks to variables, you only need to change one number at the top to make this work.",
          "courseF_artist_variables6_b": "You will need to edit the number block with value 50, but nothing else in the code needs to be altered."
        },
        "courseF_artist_variables6a_authored_hint": {
          "courseF_artist_variables6a_a": "Remember to use the variable `length` instead of an actual number to solve this puzzle.",
          "courseF_artist_variables6a_b": "This code will be very similar to your triangle code, just with a different shape!",
          "courseF_artist_variables6a_c": "Write the code for one square first, then add the code to move between squares. Finally, add a loop around everything!",
          "courseF_artist_variables6a_d": "This is the pattern you'll follow!\n\n![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)"
        },
        "courseF_artist_variables6a_2018_authored_hint": {
          "courseF_artist_variables6a_a": "Remember to use the variable `length` instead of an actual number to solve this puzzle.",
          "courseF_artist_variables6a_b": "This code will be very similar to your triangle code, just with a different shape!",
          "courseF_artist_variables6a_c": "Write the code for one square first, then add the code to move between squares. Finally, add a loop around everything!",
          "courseF_artist_variables6a_d": "This is the pattern you'll follow!\n\n![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)"
        },
        "courseF_artist_variables7_authored_hint": {
          "courseF_artist_variables7_a": "Start your code by using the `set length` block. Set the length variable to 150.",
          "courseF_artist_variables7_b": "You can use a `repeat` loop to make your code for the triangle simpler.",
          "courseF_artist_variables7_c": "You will want to turn left 120 degrees to make the corners of the triangle."
        },
        "courseF_artist_variables7_2018_authored_hint": {
          "courseF_artist_variables7_a": "Start your code by using the `set length` block. Set the length variable to 150.",
          "courseF_artist_variables7_b": "You can use a `repeat` loop to make your code for the triangle simpler.",
          "courseF_artist_variables7_c": "You will want to turn left 120 degrees to make the corners of the triangle."
        },
        "courseF_artist_variables8_authored_hint": {
          "courseF_artist_variables8_b": "Remember to start your code for the triangle with the `set length` block, and start it at 150 pixels.",
          "courseF_artist_variables8_c": "Make sure to use the `repeat` loop to draw your triangle.",
          "courseF_artist_variables8_a": "Try putting the set of \n\n<xml>\n<block type=\"variables_set\" inline=\"false\">\n                        <title name=\"VAR\">length</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_arithmetic\" inline=\"true\">\n                            <title name=\"OP\">ADD</title>\n                            <value name=\"A\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">length</title>\n                              </block>\n                            </value>\n                            <value name=\"B\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">10</title>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n</xml>\n\nblocks inside your loop at the end.\n"
        },
        "courseF_artist_variables8_2018_authored_hint": {
          "courseF_artist_variables8_b": "Remember to start your code for the triangle with the `set length` block, and start it at 150 pixels.",
          "courseF_artist_variables8_c": "Make sure to use the `repeat` loop to draw your triangle.",
          "courseF_artist_variables8_a": "Try putting the set of \n\n<xml>\n<block type=\"variables_set\" inline=\"false\">\n                        <title name=\"VAR\">length</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_arithmetic\" inline=\"true\">\n                            <title name=\"OP\">ADD</title>\n                            <value name=\"A\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">length</title>\n                              </block>\n                            </value>\n                            <value name=\"B\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">10</title>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n</xml>\n\nblocks inside your loop at the end.\n"
        },
        "courseF_artist_variables9_authored_hint": {
          "courseF_artist_variables9_a": "For this puzzle, all you need to do is change how many times the loop repeats.",
          "courseF_artist_variables9_b": "Make sure the blocks that increment `length` are within your loop so the lines keep getting longer."
        },
        "courseF_artist_variables9_2018_authored_hint": {
          "courseF_artist_variables9_a": "For this puzzle, all you need to do is change how many times the loop repeats.",
          "courseF_artist_variables9_b": "Make sure the blocks that increment `length` are within your loop so the lines keep getting longer."
        },
        "courseF_artist_variablesFP_authored_hint": {
          "courseF_artist_variablesFP_a": "Try one of these three drawings.\n![](https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png)"
        },
        "courseF_artist_variablesFP_2018_authored_hint": {
          "courseF_artist_variablesFP_a": "Try one of these three drawings.\n![](https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png)"
        },
        "courseF_artist_variables_4_authored_hint": {
          "courseF_artist_variables_4_a": "Your code won't be much different than it was in the last puzzle, except that you will need to turn the artist to move down, then turn him back to get ready to move forward again.",
          "courseF_artist_variables_4_b": "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
        },
        "courseF_artist_variables_6_authored_hint": {
          "courseF_artist_variables_6_a": "Thanks to variables, you only need to change one number at the top to make this work."
        },
        "courseF_artist_variables_6a_authored_hint": {
          "courseF_artist_variables6a_a": "Remember to use the variable `length` instead of an actual number to solve this puzzle."
        },
        "courseF_artist_variables_8_authored_hint": {
          "courseF_artist_variables_8_a": "Try putting the set of ![](https://images.code.org/6525bebee31ee15b84a48761b2866f53-image-1477531948829.31.37.png) blocks inside your loop at the end.\n"
        },
        "courseF_artist_variables_challenge1_authored_hint": {
          "courseF_artist_variables_challenge1_a": "Each vertical line has a length of `10`. Each horizontal line should have a length of `length`.",
          "courseF_artist_variables_challenge1_b": "You will want to increase the value of `length` by 10 **twice** inside the loop.",
          "courseF_artist_variables_challenge1_c": "To complete the pattern you will need to turn left twice, turn right twice, and move forward a total of four times.",
          "courseF_artist_variables_challenge1_d": "This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.\n\n![](https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png)\n\nIf you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.",
          "courseF_artist_variables_challenge1_e": "Here is the solution.\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"variables_set\" inline=\"false\">\n        <title name=\"VAR\">length</title>\n        <value name=\"VALUE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">10</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">18</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"draw_move\" inline=\"true\">\n                <title name=\"DIR\">moveForward</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">10</title>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"draw_turn\" inline=\"true\">\n                    <title name=\"DIR\">turnRight</title>\n                    <value name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">90</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"draw_move\" inline=\"true\">\n                        <title name=\"DIR\">moveForward</title>\n                        <value name=\"VALUE\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">length</title>\n                          </block>\n                        </value>\n                        <next>\n                          <block type=\"variables_set\" inline=\"false\">\n                            <title name=\"VAR\">length</title>\n                            <value name=\"VALUE\">\n                              <block type=\"math_arithmetic\" inline=\"true\">\n                                <title name=\"OP\">ADD</title>\n                                <value name=\"A\">\n                                  <block type=\"variables_get\">\n                                    <title name=\"VAR\">length</title>\n                                  </block>\n                                </value>\n                                <value name=\"B\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">10</title>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <next>\n                              <block type=\"draw_turn\" inline=\"true\">\n                                <title name=\"DIR\">turnLeft</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">90</title>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"draw_move\" inline=\"true\">\n                                    <title name=\"DIR\">moveForward</title>\n                                    <value name=\"VALUE\">\n                                      <block type=\"math_number\">\n                                        <title name=\"NUM\">10</title>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type=\"draw_turn\" inline=\"true\">\n                                        <title name=\"DIR\">turnLeft</title>\n                                        <value name=\"VALUE\">\n                                          <block type=\"math_number\">\n                                            <title name=\"NUM\">90</title>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type=\"draw_move\" inline=\"true\">\n                                            <title name=\"DIR\">moveForward</title>\n                                            <value name=\"VALUE\">\n                                              <block type=\"variables_get\">\n                                                <title name=\"VAR\">length</title>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type=\"variables_set\" inline=\"false\">\n                                                <title name=\"VAR\">length</title>\n                                                <value name=\"VALUE\">\n                                                  <block type=\"math_arithmetic\" inline=\"true\">\n                                                    <title name=\"OP\">ADD</title>\n                                                    <value name=\"A\">\n                                                      <block type=\"variables_get\">\n                                                        <title name=\"VAR\">length</title>\n                                                      </block>\n                                                    </value>\n                                                    <value name=\"B\">\n                                                      <block type=\"math_number\">\n                                                        <title name=\"NUM\">10</title>\n                                                      </block>\n                                                    </value>\n                                                  </block>\n                                                </value>\n                                                <next>\n                                                  <block type=\"draw_turn\" inline=\"true\">\n                                                    <title name=\"DIR\">turnRight</title>\n                                                    <value name=\"VALUE\">\n                                                      <block type=\"math_number\">\n                                                        <title name=\"NUM\">90</title>\n                                                      </block>\n                                                    </value>\n                                                  </block>\n                                                </next>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseF_artist_variables_challenge1_2018_authored_hint": {
          "courseF_artist_variables_challenge1_a": "Each vertical line has a length of `10`. Each horizontal line should have a length of `length`.",
          "courseF_artist_variables_challenge1_b": "You will want to increase the value of `length` by 10 **twice** inside the loop.",
          "courseF_artist_variables_challenge1_c": "To complete the pattern you will need to turn left twice, turn right twice, and move forward a total of four times.",
          "courseF_artist_variables_challenge1_d": "This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.\n\n![](https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png)\n\nIf you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.",
          "courseF_artist_variables_challenge1_e": "Here is the solution.\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"variables_set\" inline=\"false\">\n        <title name=\"VAR\">length</title>\n        <value name=\"VALUE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">10</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">18</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"draw_move\" inline=\"true\">\n                <title name=\"DIR\">moveForward</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">10</title>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"draw_turn\" inline=\"true\">\n                    <title name=\"DIR\">turnRight</title>\n                    <value name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">90</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"draw_move\" inline=\"true\">\n                        <title name=\"DIR\">moveForward</title>\n                        <value name=\"VALUE\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">length</title>\n                          </block>\n                        </value>\n                        <next>\n                          <block type=\"variables_set\" inline=\"false\">\n                            <title name=\"VAR\">length</title>\n                            <value name=\"VALUE\">\n                              <block type=\"math_arithmetic\" inline=\"true\">\n                                <title name=\"OP\">ADD</title>\n                                <value name=\"A\">\n                                  <block type=\"variables_get\">\n                                    <title name=\"VAR\">length</title>\n                                  </block>\n                                </value>\n                                <value name=\"B\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">10</title>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <next>\n                              <block type=\"draw_turn\" inline=\"true\">\n                                <title name=\"DIR\">turnLeft</title>\n                                <value name=\"VALUE\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">90</title>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"draw_move\" inline=\"true\">\n                                    <title name=\"DIR\">moveForward</title>\n                                    <value name=\"VALUE\">\n                                      <block type=\"math_number\">\n                                        <title name=\"NUM\">10</title>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type=\"draw_turn\" inline=\"true\">\n                                        <title name=\"DIR\">turnLeft</title>\n                                        <value name=\"VALUE\">\n                                          <block type=\"math_number\">\n                                            <title name=\"NUM\">90</title>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type=\"draw_move\" inline=\"true\">\n                                            <title name=\"DIR\">moveForward</title>\n                                            <value name=\"VALUE\">\n                                              <block type=\"variables_get\">\n                                                <title name=\"VAR\">length</title>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type=\"variables_set\" inline=\"false\">\n                                                <title name=\"VAR\">length</title>\n                                                <value name=\"VALUE\">\n                                                  <block type=\"math_arithmetic\" inline=\"true\">\n                                                    <title name=\"OP\">ADD</title>\n                                                    <value name=\"A\">\n                                                      <block type=\"variables_get\">\n                                                        <title name=\"VAR\">length</title>\n                                                      </block>\n                                                    </value>\n                                                    <value name=\"B\">\n                                                      <block type=\"math_number\">\n                                                        <title name=\"NUM\">10</title>\n                                                      </block>\n                                                    </value>\n                                                  </block>\n                                                </value>\n                                                <next>\n                                                  <block type=\"draw_turn\" inline=\"true\">\n                                                    <title name=\"DIR\">turnRight</title>\n                                                    <value name=\"VALUE\">\n                                                      <block type=\"math_number\">\n                                                        <title name=\"NUM\">90</title>\n                                                      </block>\n                                                    </value>\n                                                  </block>\n                                                </next>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseF_artist_variables_challenge1a_authored_hint": {
          "courseF_artist_variables_challenge1_a": "Variables are helpful because you can add to them each time through a loop. ",
          "courseF_artist_variables_challenge1_b": "This puzzle has one loop that creates the polygon, one loop that repeats the polygon `sides` times, then another loop that does it all again after adding 5 to `sides`.",
          "courseF_artist_variables_challenge1_c": "Using a variable for `sides` and one for `length` makes the code cleaner because you can loop the same code multiple times, instead of creating a new copy for each set of numbers.",
          "courseF_artist_variables_challenge1_d": "**Solution:**\n\n![Solution](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)"
        },
        "courseF_artist_variables_challenge2_authored_hint": {
          "courseF_artist_variables_challenge2_a": "Variables are helpful because you can add to them each time through a loop.",
          "courseF_artist_variables_challenge2_c": "Using one variable for `sides` and one for `length` makes the code cleaner because you can loop the same code multiple times, instead of creating a new copy for each set of numbers.",
          "courseF_artist_variables_challenge2_d": "**Solution:**\n\n![Solution](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)"
        },
        "courseF_artist_variables_challenge2_2018_authored_hint": {
          "courseF_artist_variables_challenge2_a": "Variables are helpful because you can add to them each time through a loop.",
          "courseF_artist_variables_challenge2_c": "Using one variable for `sides` and one for `length` makes the code cleaner because you can loop the same code multiple times, instead of creating a new copy for each set of numbers.",
          "courseF_artist_variables_challenge2_d": "**Solution:**\n\n![Solution](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)"
        },
        "courseF_bee_conditionals10_authored_hint": {
          "courseF_bee_conditionals10_a": "Imagine there is a cloud in every spot. Does this help simplify your code?",
          "courseF_bee_conditionals10_b": "Use an `if/else` block to check every space for nectar or honey.",
          "courseF_bee_conditionals10_c": "Could a `while` loop help get to the end of this path?"
        },
        "courseF_bee_conditionals10_2018_authored_hint": {
          "courseF_bee_conditionals10_a": "Imagine there is a cloud in every spot. Does this help simplify your code?",
          "courseF_bee_conditionals10_b": "Use an `if/else` block to check every space for nectar or honey.",
          "courseF_bee_conditionals10_c": "Could a `while` loop help get to the end of this path?"
        },
        "courseF_bee_conditionals2_authored_hint": {
          "courseF_bee_conditionals2_a": "Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.",
          "courseF_bee_conditionals2_b": "Try writing the sequence to get you to all of the spaces, then add the `if` statement."
        },
        "courseF_bee_conditionals2_2018_authored_hint": {
          "courseF_bee_conditionals2_a": "Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.",
          "courseF_bee_conditionals2_b": "Try writing the sequence to get you to all of the spaces, then add the `if` statement."
        },
        "courseF_bee_conditionals3_authored_hint": {
          "courseF_bee_conditionals3_a": "Be sure to use an `if` statement to check each space to see if it has either a flower or nothing.",
          "courseF_bee_conditionals3_b": "A `repeat` loop will be useful so you only have to use one `if` block.",
          "courseF_bee_conditionals3_c": "Try writing code to check the first cloud. Can you loop this to check all of them?"
        },
        "courseF_bee_conditionals3_2018_authored_hint": {
          "courseF_bee_conditionals3_a": "Be sure to use an `if` statement to check each space to see if it has either a flower or nothing.",
          "courseF_bee_conditionals3_b": "A `repeat` loop will be useful so you only have to use one `if` block.",
          "courseF_bee_conditionals3_c": "Try writing code to check the first cloud. Can you loop this to check all of them?"
        },
        "courseF_bee_conditionals4_authored_hint": {
          "courseD_bee_conditionals4_a": "You can still treat every space as if there is a cloud over it, even though you can see the whole path.",
          "courseF_bee_conditionals4_b": "Use an `if` statement inside your loop to check each space for nectar. ",
          "courseF_bee_conditionals4_c": "Using the block `while there is a path ahead`, you should `move forward` and check for a flower. `if there is a flower` what should the bee do?"
        },
        "courseF_bee_conditionals4_2018_authored_hint": {
          "courseD_bee_conditionals4_a": "You can still treat every space as if there is a cloud over it, even though you can see the whole path.",
          "courseF_bee_conditionals4_b": "Use an `if` statement inside your loop to check each space for nectar. ",
          "courseF_bee_conditionals4_c": "Using the block `while there is a path ahead`, you should `move forward` and check for a flower. `if there is a flower` what should the bee do?"
        },
        "courseF_bee_conditionals5_authored_hint": {
          "courseF_bee_conditionals5_a": "Think of every side of the rectangular path as a path by itself. Set up a nested loop with a `repeat` block on the outside and a `while there is a path ahead` on the inside. How many paths does the bee need to buzz down if the bee needs to buzz every side with a flower?",
          "courseF_bee_conditionals5_b": "Inside the `while there is a path ahead` block, you will need to move forward and check for a flower. How do you check if there is a flower? What do you do if there is a flower?",
          "courseF_bee_conditionals5_c": "There are 3 sides of the rectangle with flowers, so the code needs to `repeat 3 times`. In every repeat, the bee will need to continue along the path, `while there is a path ahead`. ",
          "courseF_bee_conditionals5_d": "To continue down the path, the bee will need to `move forward`. While on the path, the bee needs to check for a flower. What should the bee do if there is a flower?"
        },
        "courseF_bee_conditionals5_2018_authored_hint": {
          "courseF_bee_conditionals5_a": "Think of every side of the rectangular path as a path by itself. Set up a nested loop with a `repeat` block on the outside and a `while there is a path ahead` on the inside. How many paths does the bee need to buzz down if the bee needs to buzz every side with a flower?",
          "courseF_bee_conditionals5_b": "Inside the `while there is a path ahead` block, you will need to move forward and check for a flower. How do you check if there is a flower? What do you do if there is a flower?",
          "courseF_bee_conditionals5_c": "There are 3 sides of the rectangle with flowers, so the code needs to `repeat 3 times`. In every repeat, the bee will need to continue along the path, `while there is a path ahead`. ",
          "courseF_bee_conditionals5_d": "To continue down the path, the bee will need to `move forward`. While on the path, the bee needs to check for a flower. What should the bee do if there is a flower?"
        },
        "courseF_bee_conditionals8_authored_hint": {
          "courseF_bee_conditionals8_a": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if` or `if/else`) to solve the challenge.",
          "courseF_bee_conditionals8_b": "This puzzle is tricky, because you can't check blank squares, nectar, *and* honey with just one single conditional.\n\nOnly check for nectar and honey at the end of your path.",
          "courseF_bee_conditionals8_c": "What happens if you skip the first flower, then use the `while path ahead` block?"
        },
        "courseF_bee_conditionals8_2018_authored_hint": {
          "courseF_bee_conditionals8_a": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if` or `if/else`) to solve the challenge.",
          "courseF_bee_conditionals8_b": "This puzzle is tricky, because you can't check blank squares, nectar, *and* honey with just one single conditional.\n\nOnly check for nectar and honey at the end of your path.",
          "courseF_bee_conditionals8_c": "What happens if you skip the first flower, then use the `while path ahead` block?"
        },
        "courseF_bee_for1_authored_hint": {
          "courseF_bee_for1_a": "Drag a purple number block into the blank space on the `repeat` loop to tell it how many times to repeat.",
          "courseF_bee_for1_b": "You will need two blocks in your ‘repeat’ loop to collect all of the nectar."
        },
        "courseF_bee_for10_authored_hint": {
          "courseF_bee_for10_a": "Can you find a pattern between the number of steps you need to take and the number of nectars to gather?",
          "courseF_bee_for10_b": "The first set of flowers has a total of **14 flowers**. To get to this first set, the bee must buzz down **7 squares** (or 14 squares divided by 2.) How many flowers are in the next set and how many squares will be the bee have to travel to get there?",
          "courseF_bee_for10_c": "In the puzzle, the first set of flowers has **14** flowers, the second set has **10** flowers, third set has **6** flowers, and the fourth set has **2** flowers.\n\nIn this drawing, notice there are **7** red squares, **5** orange squares, **3** green squares, and **1** blue block. \n\n![](https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png)\n\nHow do the numbers relate?",
          "courseF_bee_for10_d": "You'll need to have 2 repeats, one will use a math block."
        },
        "courseF_bee_for10_2018_authored_hint": {
          "courseF_bee_for10_a": "Can you find a pattern between the number of steps you need to take and the number of nectars to gather?",
          "courseF_bee_for10_b": "The first set of flowers has a total of **14 flowers**. To get to this first set, the bee must buzz down **7 squares** (or 14 squares divided by 2.) How many flowers are in the next set and how many squares will be the bee have to travel to get there?",
          "courseF_bee_for10_c": "In the puzzle, the first set of flowers has **14** flowers, the second set has **10** flowers, third set has **6** flowers, and the fourth set has **2** flowers.\n\nIn this drawing, notice there are **7** red squares, **5** orange squares, **3** green squares, and **1** blue block. \n\n![](https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png)\n\nHow do the numbers relate?",
          "courseF_bee_for10_d": "You'll need to have 2 repeats, one will use a math block."
        },
        "courseF_bee_for11_authored_hint": {
          "courseF_bee_for11_a": "How much less is 12 than 15?  \nHow much less is 9 than 12?\n\nDo you see a pattern?"
        },
        "courseF_bee_for11_2018_authored_hint": {
          "courseF_bee_for11_a": "How much less is 12 than 15?  \nHow much less is 9 than 12?\n\nDo you see a pattern?"
        },
        "courseF_bee_for1_2018_authored_hint": {
          "courseF_bee_for1_a": "Drag a purple number block into the blank space on the `repeat` loop to tell it how many times to repeat.",
          "courseF_bee_for1_b": "You will need two blocks in your ‘repeat’ loop to collect all of the nectar."
        },
        "courseF_bee_for2_authored_hint": {
          "courseF_bee_for2_a": "If you’re confused, work one flower at a time, and test often.",
          "courseF_bee_for2_b": "Remember to move forward between each loop, so you reach each flower."
        },
        "courseF_bee_for2_2018_authored_hint": {
          "courseF_bee_for2_a": "If you’re confused, work one flower at a time, and test often.",
          "courseF_bee_for2_b": "Remember to move forward between each loop, so you reach each flower."
        },
        "courseF_bee_for3_authored_hint": {
          "courseF_bee_for3_a": "Use the `counter` variable inside the `repeat` loop where nectar is gathered to solve this puzzle. ",
          "courseF_bee_for3_b": "Your `for` loop will need to count from 1 to 5 with an increment of 1."
        },
        "courseF_bee_for4_authored_hint": {
          "courseF_bee_for4_a": "Use a `for` loop that goes from 1 to 7 with an increment of 1 to solve this puzzle.",
          "courseF_bee_for4_b": "Within your `for` loop, you will want to have a `move forward` command, and a loop to collect nectar.",
          "courseF_bee_for4_c": "Make sure to use the `counter` variable inside your nested `repeat` loop to get enough nectar!"
        },
        "courseF_bee_for4_2018_authored_hint": {
          "courseF_bee_for4_a": "Use a `for` loop that goes from 1 to 7 with an increment of 1 to solve this puzzle.",
          "courseF_bee_for4_b": "Within your `for` loop, you will want to have a `move forward` command, and a loop to collect nectar.",
          "courseF_bee_for4_c": "Make sure to use the `counter` variable inside your nested `repeat` loop to get enough nectar!"
        },
        "courseF_bee_for5_authored_hint": {
          "courseF_bee_for5_a": "This time, your `move forward` block and your `get nectar` block will need to be in separate `repeat` loops, both inside the same `for` loop.",
          "courseF_bee_for5_b": "Use the `counter` variable in each loop so the bee moves different distances between each flower.",
          "courseF_bee_for5_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseF_bee_for5_2018_authored_hint": {
          "courseF_bee_for5_a": "This time, your `move forward` block and your `get nectar` block will need to be in separate `repeat` loops, both inside the same `for` loop.",
          "courseF_bee_for5_b": "Use the `counter` variable in each loop so the bee moves different distances between each flower.",
          "courseF_bee_for5_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseF_bee_for6_authored_hint": {
          "courseF_bee_for6_a": "Don't forget to use a `counter` variable inside your `repeat` loop.",
          "courseF_bee_for6_b": "Within your `for` loop, you will want to have a `move forward` command, and a loop to collect nectar.",
          "courseF_bee_for6_c": "Your loop should count **from 5 to 1**."
        },
        "courseF_bee_for6_2018_authored_hint": {
          "courseF_bee_for6_a": "Don't forget to use a `counter` variable inside your `repeat` loop.",
          "courseF_bee_for6_b": "Within your `for` loop, you will want to have a `move forward` command, and a loop to collect nectar.",
          "courseF_bee_for6_c": "Your loop should count **from 5 to 1**."
        },
        "courseF_bee_for7_authored_hint": {
          "courseF_bee_for7_a": "Your `for` loop will need to count from 1 to 7 by 2.",
          "courseF_bee_for7_b": "Within your `for` loop, you will want to have a `move forward` command, and a loop to collect nectar.",
          "courseF_bee_for7_c": "Remember to use the `counter` variable in your `repeat` loop."
        },
        "courseF_bee_for7_2018_authored_hint": {
          "courseF_bee_for7_a": "Your `for` loop will need to count from 1 to 7 by 2.",
          "courseF_bee_for7_b": "Within your `for` loop, you will want to have a `move forward` command, and a loop to collect nectar.",
          "courseF_bee_for7_c": "Remember to use the `counter` variable in your `repeat` loop."
        },
        "courseF_bee_for8_authored_hint": {
          "courseF_bee_for8_a": "If your loop is counting up, the increment is added to your counter variable each time through. \n\nWhat do you need to add to each number to get the next amount of nectar?",
          "courseF_bee_for8_b": "In this puzzle, you will need to move in a stair step pattern to get to the flowers.",
          "courseF_bee_for8_c": "Your loop will count *from 3 to 15* with some increment. What is it?"
        },
        "courseF_bee_for8_2018_authored_hint": {
          "courseF_bee_for8_a": "If your loop is counting up, the increment is added to your counter variable each time through. \n\nWhat do you need to add to each number to get the next amount of nectar?",
          "courseF_bee_for8_b": "In this puzzle, you will need to move in a stair step pattern to get to the flowers.",
          "courseF_bee_for8_c": "Your loop will count *from 3 to 15* with some increment. What is it?"
        },
        "courseF_bee_for9_authored_hint": {
          "courseF_bee_for9_a": "Try doing some math with the counter variable.\n\nWhat do you have to do to the counter at each flower to equal the amount of nectar you need to collect?",
          "courseF_bee_for9_c": "It looks like you will need to turn the bee at the beginning of each loop iteration if you want to solve the puzzle.",
          "courseF_bee_for9_b": "**Remember:** If your loop is counting up, the increment is added to your `counter` variable each time through."
        },
        "courseF_bee_for9_2018_authored_hint": {
          "courseF_bee_for9_a": "Try doing some math with the counter variable.\n\nWhat do you have to do to the counter at each flower to equal the amount of nectar you need to collect?",
          "courseF_bee_for9_c": "It looks like you will need to turn the bee at the beginning of each loop iteration if you want to solve the puzzle.",
          "courseF_bee_for9_b": "**Remember:** If your loop is counting up, the increment is added to your `counter` variable each time through."
        },
        "courseF_bee_for_challenge2_authored_hint": {
          "courseF_bee_for_challenge2_a": "Take a look at this option for movement:  \n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)",
          "courseF_bee_for_challenge2_b": "Try using two `for` loops: One for climbing up and grabbing nectar, and the other for climbing down and making honey.",
          "courseF_bee_for_challenge2_c": "Notice that one `for` loop needs several regular loops inside that repeat `counter` times to make the increasing stair pattern. \n\nThe other `for` loop only needs one regular loop to make `counter` amount of honey.",
          "courseF_bee_for_challenge2_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for\" inline=\"true\">\n        <title name=\"VAR\">counter</title>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"variables_get\">\n                <title name=\"VAR\">counter</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"maze_moveForward\"/>\n            </statement>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">counter</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"maze_nectar\"/>\n                </statement>\n                <next>\n                  <block type=\"maze_turn\">\n                    <title name=\"DIR\">turnLeft</title>\n                    <next>\n                      <block type=\"controls_repeat_ext\" inline=\"true\">\n                        <value name=\"TIMES\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                        <statement name=\"DO\">\n                          <block type=\"maze_moveForward\"/>\n                        </statement>\n                        <next>\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnRight</title>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type=\"maze_turn\">\n            <title name=\"DIR\">turnRight</title>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n                <next>\n                  <block type=\"controls_for\" inline=\"true\">\n                    <title name=\"VAR\">counter</title>\n                    <value name=\"FROM\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">2</title>\n                      </block>\n                    </value>\n                    <value name=\"TO\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">10</title>\n                      </block>\n                    </value>\n                    <value name=\"BY\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">2</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"maze_moveForward\">\n                        <next>\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnLeft</title>\n                            <next>\n                              <block type=\"maze_moveForward\">\n                                <next>\n                                  <block type=\"maze_turn\">\n                                    <title name=\"DIR\">turnRight</title>\n                                    <next>\n                                      <block type=\"controls_repeat_ext\" inline=\"true\">\n                                        <value name=\"TIMES\">\n                                          <block type=\"variables_get\">\n                                            <title name=\"VAR\">counter</title>\n                                          </block>\n                                        </value>\n                                        <statement name=\"DO\">\n                                          <block type=\"maze_honey\"/>\n                                        </statement>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseF_bee_for_challenge2_2018_authored_hint": {
          "courseF_bee_for_challenge2_a": "Take a look at this option for movement:  \n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)",
          "courseF_bee_for_challenge2_b": "Try using two `for` loops: One for climbing up and grabbing nectar, and the other for climbing down and making honey.",
          "courseF_bee_for_challenge2_c": "Notice that one `for` loop needs several regular loops inside that repeat `counter` times to make the increasing stair pattern. \n\nThe other `for` loop only needs one regular loop to make `counter` amount of honey.",
          "courseF_bee_for_challenge2_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for\" inline=\"true\">\n        <title name=\"VAR\">counter</title>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"variables_get\">\n                <title name=\"VAR\">counter</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"maze_moveForward\"/>\n            </statement>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">counter</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"maze_nectar\"/>\n                </statement>\n                <next>\n                  <block type=\"maze_turn\">\n                    <title name=\"DIR\">turnLeft</title>\n                    <next>\n                      <block type=\"controls_repeat_ext\" inline=\"true\">\n                        <value name=\"TIMES\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                        <statement name=\"DO\">\n                          <block type=\"maze_moveForward\"/>\n                        </statement>\n                        <next>\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnRight</title>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type=\"maze_turn\">\n            <title name=\"DIR\">turnRight</title>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n                <next>\n                  <block type=\"controls_for\" inline=\"true\">\n                    <title name=\"VAR\">counter</title>\n                    <value name=\"FROM\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">2</title>\n                      </block>\n                    </value>\n                    <value name=\"TO\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">10</title>\n                      </block>\n                    </value>\n                    <value name=\"BY\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">2</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"maze_moveForward\">\n                        <next>\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnLeft</title>\n                            <next>\n                              <block type=\"maze_moveForward\">\n                                <next>\n                                  <block type=\"maze_turn\">\n                                    <title name=\"DIR\">turnRight</title>\n                                    <next>\n                                      <block type=\"controls_repeat_ext\" inline=\"true\">\n                                        <value name=\"TIMES\">\n                                          <block type=\"variables_get\">\n                                            <title name=\"VAR\">counter</title>\n                                          </block>\n                                        </value>\n                                        <statement name=\"DO\">\n                                          <block type=\"maze_honey\"/>\n                                        </statement>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseF_bee_for_challenge3_authored_hint": {
          "courseF_bee_for_challenge2_a": "Take a look at this option for movement:  \n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)",
          "courseF_bee_for_challenge2_b": "Try using two `for` loops: One for climbing up and grabbing nectar, and the other for climbing down and making honey.",
          "courseF_bee_for_challenge2_c": "Notice that one `for` loop needs several regular loops inside that repeat `counter` times to make the increasing stair pattern. \n\nThe other `for` loop only needs one regular loop to make `counter` amount of honey.",
          "courseF_bee_for_challenge2_d": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for\" inline=\"true\">\n        <title name=\"VAR\">counter</title>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"variables_get\">\n                <title name=\"VAR\">counter</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"maze_moveForward\"/>\n            </statement>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">counter</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"maze_nectar\"/>\n                </statement>\n                <next>\n                  <block type=\"maze_turn\">\n                    <title name=\"DIR\">turnLeft</title>\n                    <next>\n                      <block type=\"controls_repeat_ext\" inline=\"true\">\n                        <value name=\"TIMES\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                        <statement name=\"DO\">\n                          <block type=\"maze_moveForward\"/>\n                        </statement>\n                        <next>\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnRight</title>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type=\"maze_turn\">\n            <title name=\"DIR\">turnRight</title>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n                <next>\n                  <block type=\"controls_for\" inline=\"true\">\n                    <title name=\"VAR\">counter</title>\n                    <value name=\"FROM\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">2</title>\n                      </block>\n                    </value>\n                    <value name=\"TO\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">10</title>\n                      </block>\n                    </value>\n                    <value name=\"BY\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">2</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"maze_moveForward\">\n                        <next>\n                          <block type=\"maze_turn\">\n                            <title name=\"DIR\">turnLeft</title>\n                            <next>\n                              <block type=\"maze_moveForward\">\n                                <next>\n                                  <block type=\"maze_turn\">\n                                    <title name=\"DIR\">turnRight</title>\n                                    <next>\n                                      <block type=\"controls_repeat_ext\" inline=\"true\">\n                                        <value name=\"TIMES\">\n                                          <block type=\"variables_get\">\n                                            <title name=\"VAR\">counter</title>\n                                          </block>\n                                        </value>\n                                        <statement name=\"DO\">\n                                          <block type=\"maze_honey\"/>\n                                        </statement>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseF_bee_functions2_authored_hint": {
          "courseF_bee_functions2_a": "The function has been written for you, but you will need to call it at each flower.",
          "courseF_bee_functions2_b": "Click on the blue edit button on the `get only nectar` function to see what it does."
        },
        "courseF_bee_functions2_2018_authored_hint": {
          "courseF_bee_functions2_a": "The function has been written for you, but you will need to call it at each flower.",
          "courseF_bee_functions2_b": "Click on the blue edit button on the `get only nectar` function to see what it does."
        },
        "courseF_bee_functions3_authored_hint": {
          "courseF_bee_functions3_a": "Your function for this puzzle only needs to make honey, it shouldn't have any `move forward` or `turn` blocks in it. ",
          "courseF_bee_functions3_b": "Remember that your function should only get honey *if* there is a honeycomb.",
          "courseF_bee_functions3_c": "Use the green `only make honey` block to call your function.",
          "courseF_bee_functions3_d": "Check out this path."
        },
        "courseF_bee_functions3_2018_authored_hint": {
          "courseF_bee_functions3_a": "Your function for this puzzle only needs to make honey, it shouldn't have any `move forward` or `turn` blocks in it. ",
          "courseF_bee_functions3_b": "Remember that your function should only get honey *if* there is a honeycomb.",
          "courseF_bee_functions3_c": "Use the green `only make honey` block to call your function.",
          "courseF_bee_functions3_d": "Check out this path."
        },
        "courseF_bee_functions3a_authored_hint": {
          "courseF_bee_functions3a_a": "Your function for this puzzle only needs to get nectar or make honey, it shouldn't have any `move forward` or `turn` blocks in it. ",
          "courseF_bee_functions3a_b": "Use a stairstep pattern to check the first four clouds."
        },
        "courseF_bee_functions3a_2018_authored_hint": {
          "courseF_bee_functions3a_a": "Your function for this puzzle only needs to get nectar or make honey, it shouldn't have any `move forward` or `turn` blocks in it. ",
          "courseF_bee_functions3a_b": "Use a stairstep pattern to check the first four clouds."
        },
        "courseF_bee_functions4_authored_hint": {
          "courseF_bee_functions4_a": "Your function should travel down the side paths and return the bee back to the main road.  You don't need to add that part to your main program.",
          "courseF_bee_functions4_b": "Try building the program and using the function blocks as you expect the function to behave, then create the function."
        },
        "courseF_bee_functions4_2018_authored_hint": {
          "courseF_bee_functions4_a": "Your function should travel down the side paths and return the bee back to the main road.  You don't need to add that part to your main program.",
          "courseF_bee_functions4_b": "Try building the program and using the function blocks as you expect the function to behave, then create the function."
        },
        "courseF_bee_functions5_authored_hint": {
          "courseE_bee_functions5_a": "Edit the function so that it solves the puzzle without having to change the main program.",
          "courseE_bee_functions5_b": "Your function should make the bee: \n- turn\n- move forward\n- collect all of the nectar\n- turn around\n- move back to the main path\n- turn back to the direction that the bee started from"
        },
        "courseF_bee_functions5a_authored_hint": {
          "courseF_bee_functions5a_a": "Your function should check if there's a path to the right, and if there is, travel down the side paths and return the bee back to the main road.  \n\nYou don't need to add that part to your main program.",
          "courseF_bee_functions5a_b": "Use a `while` loop to travel down all of the main paths, since they are different lengths.",
          "courseF_bee_functions5a_c": "Within your `while` loop, make sure to move forward, then use your function to check for a path."
        },
        "courseF_bee_functions5a_2018_authored_hint": {
          "courseF_bee_functions5a_a": "Your function should check if there's a path to the right, and if there is, travel down the side paths and return the bee back to the main road.  \n\nYou don't need to add that part to your main program.",
          "courseF_bee_functions5a_b": "Use a `while` loop to travel down all of the main paths, since they are different lengths.",
          "courseF_bee_functions5a_c": "Within your `while` loop, make sure to move forward, then use your function to check for a path."
        },
        "courseF_bee_functions6_authored_hint": {
          "courseF_bee_functions6_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!\n\n\n<xml>\n  <block type=\"procedures_defnoreturn\" editable=\"false\">\n    <mutation/>\n    <title name=\"NAME\">get nectar make honey</title>\n    <statement name=\"STACK\">\n    </statement>\n  </block>\n</xml>",
          "courseF_bee_functions6_b": "Your function should check if there is a flower or honeycomb, get nectar or make honey, then turn.",
          "courseF_bee_functions6_c": "Since you are turning within your function, you only need one `while` loop to get you through this maze."
        },
        "courseF_bee_functions6_2018_authored_hint": {
          "courseF_bee_functions6_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!\n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)",
          "courseF_bee_functions6_b": "Your function should check if there is a flower or honeycomb, get nectar or make honey, then turn.",
          "courseF_bee_functions6_c": "Since you are turning within your function, you only need one `while` loop to get you through this maze."
        },
        "courseF_bee_functions7_authored_hint": {
          "courseF_bee_functions7_a": "You can look back at the last puzzle to see your function.",
          "courseF_bee_functions7_b": "Try drawing a path through this maze with your finger. Where will the bee have to make a decision?"
        },
        "courseF_bee_functions7_2018_authored_hint": {
          "courseF_bee_functions7_a": "You can look back at the last puzzle to see your function.",
          "courseF_bee_functions7_b": "Try drawing a path through this maze with your finger. Where will the bee have to make a decision?"
        },
        "courseF_bee_functions8a_authored_hint": {
          "courseF_bee_functions8a_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "courseF_bee_functions8a_b": "Remember to build code inside of the function editor.\n\n"
        },
        "courseF_bee_functions8a_2018_authored_hint": {
          "courseF_bee_functions8a_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "courseF_bee_functions8a_b": "Remember to build code inside of the function editor.\n\n"
        },
        "courseF_bee_functionsPre7_authored_hint": {
          "courseF_bee_functions7_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "courseF_bee_functions7_b": "Remember to build code inside of the green function block.\n\n<xml>\n  <block type=\"procedures_defnoreturn\" editable=\"false\">\n    <mutation/>\n    <title name=\"NAME\">get nectar make honey</title>\n    <statement name=\"STACK\">\n    </statement>\n  </block>\n</xml>\n",
          "courseF_bee_functions7_c": "Which way should you turn if there is a honeycomb? What about a flower? What if there is nothing?"
        },
        "courseF_bee_functionsPre7_2018_authored_hint": {
          "courseF_bee_functions7_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "courseF_bee_functions7_b": "Remember to build code inside of the green function block.\n\n![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)",
          "courseF_bee_functions7_c": "Which way should you turn if there is a honeycomb? What about a flower? What if there is nothing?"
        },
        "courseF_bee_functions_challenge1_authored_hint": {
          "courseF_bee_functions_challenge1_a": "You can use the functions in the tool box to help you. You can call a function inside of another function's definition!"
        },
        "courseF_bee_functions_challenge1_2018_authored_hint": {
          "courseF_bee_functions_challenge1_a": "You can use the functions in the tool box to help you. You can call a function inside of another function's definition!"
        },
        "courseF_bee_functions_challenge2_authored_hint": {
          "courseF_bee_functions_challenge2_a": "If there is a path to the right, you should do the following:\n* Get any nectar or make any honey.\n* Turn right towards the side path.\n* Move to the end of the side path.\n* Turn right.\n\nIf you repeat the above actions twice, you will be ready to move back down the main path.\n\n**Only click for another hint if you want to see the full solution!**",
          "courseF_bee_functions_challenge2_b": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_ext\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">4</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"maze_untilBlocked\">\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"maze_if\">\n                    <title name=\"DIR\">isPathRight</title>\n                    <statement name=\"DO\">\n                      <block type=\"procedures_callnoreturn\" id=\"function\">\n                      <mutation name=\"move and check\"></mutation>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnLeft</title>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n  <block type=\"procedures_defnoreturn\" editable=\"false\">\n  <mutation></mutation>\n    <title name=\"NAME\">move and check</title>\n    <statement name=\"STACK\">\n      <block type=\"controls_repeat_ext\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">2</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"procedures_callnoreturn\">\n          <mutation name=\"check nectar or honey\"></mutation>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n                <next>\n                  <block type=\"maze_untilBlocked\">\n                    <statement name=\"DO\">\n                      <block type=\"maze_move\">\n                        <title name=\"DIR\">moveForward</title>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type=\"maze_turn\">\n                        <title name=\"DIR\">turnRight</title>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type=\"procedures_defnoreturn\" editable=\"false\" usercreated=\"true\">\n  <mutation></mutation>\n    <title name=\"NAME\">check nectar or honey</title>\n    <statement name=\"STACK\">\n      <block type=\"bee_whileNectarAmount\">\n        <title name=\"ARG1\">nectarRemaining</title>\n        <title name=\"OP\">&gt;</title>\n        <title name=\"ARG2\">0</title>\n        <statement name=\"DO\">\n          <block type=\"maze_nectar\"/>\n        </statement>\n        <next>\n          <block type=\"bee_whileNectarAmount\">\n            <title name=\"ARG1\">honeyAvailable</title>\n            <title name=\"OP\">&gt;</title>\n            <title name=\"ARG2\">0</title>\n            <statement name=\"DO\">\n              <block type=\"maze_honey\"/>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>"
        },
        "courseF_bee_functions_challenge2_2018_authored_hint": {
          "courseF_bee_functions_challenge2_a": "If there is a path to the right, you should do the following:\n* Get any nectar or make any honey.\n* Turn right towards the side path.\n* Move to the end of the side path.\n* Turn right.\n\nIf you repeat the above actions twice, you will be ready to move back down the main path.\n\n**Only click for another hint if you want to see the full solution!**",
          "courseF_bee_functions_challenge2_b": "**Solution:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_repeat_ext\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">4</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"maze_untilBlocked\">\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"maze_if\">\n                    <title name=\"DIR\">isPathRight</title>\n                    <statement name=\"DO\">\n                      <block type=\"procedures_callnoreturn\" id=\"function\">\n                      <mutation name=\"move and check\"></mutation>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnLeft</title>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n  <block type=\"procedures_defnoreturn\" editable=\"false\">\n  <mutation></mutation>\n    <title name=\"NAME\">move and check</title>\n    <statement name=\"STACK\">\n      <block type=\"controls_repeat_ext\" inline=\"true\">\n        <value name=\"TIMES\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">2</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"procedures_callnoreturn\">\n          <mutation name=\"check nectar or honey\"></mutation>\n            <next>\n              <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n                <next>\n                  <block type=\"maze_untilBlocked\">\n                    <statement name=\"DO\">\n                      <block type=\"maze_move\">\n                        <title name=\"DIR\">moveForward</title>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type=\"maze_turn\">\n                        <title name=\"DIR\">turnRight</title>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type=\"procedures_defnoreturn\" editable=\"false\" usercreated=\"true\">\n  <mutation></mutation>\n    <title name=\"NAME\">check nectar or honey</title>\n    <statement name=\"STACK\">\n      <block type=\"bee_whileNectarAmount\">\n        <title name=\"ARG1\">nectarRemaining</title>\n        <title name=\"OP\">&gt;</title>\n        <title name=\"ARG2\">0</title>\n        <statement name=\"DO\">\n          <block type=\"maze_nectar\"/>\n        </statement>\n        <next>\n          <block type=\"bee_whileNectarAmount\">\n            <title name=\"ARG1\">honeyAvailable</title>\n            <title name=\"OP\">&gt;</title>\n            <title name=\"ARG2\">0</title>\n            <statement name=\"DO\">\n              <block type=\"maze_honey\"/>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>"
        },
        "courseF_bee_functions_challenge2_recursion_authored_hint": {
          "courseF_bee_functions8a_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "courseF_bee_functions8a_b": "Remember to build code inside of the function editor.\n\n"
        },
        "courseF_bee_fwp1_authored_hint": {
          "courseF_bee_fwp1_a": "Use `if` statements to make sure you're only getting nectar from a flower.",
          "courseF_bee_fwp1_b": "Continue along the path using a `repeat` block. Make sure you are using a `move forward` block and checking if there is a flower using a `if` statement."
        },
        "courseF_bee_fwp1_2018_authored_hint": {
          "courseF_bee_fwp1_a": "Use `if` statements to make sure you're only getting nectar from a flower.",
          "courseF_bee_fwp1_b": "Continue along the path using a `repeat` block. Make sure you are using a `move forward` block and checking if there is a flower using a `if` statement."
        },
        "courseF_bee_fwp2_authored_hint": {
          "courseF_bee_fwp2_a": "To turn this into a function, simply drag the code into the existing function block.  \n\n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)",
          "courseF_bee_fwp2_b": "Don't forget to connect the `rowOfNectar` block to `when run` to call the function that you just built."
        },
        "courseF_bee_fwp2_2018_authored_hint": {
          "courseF_bee_fwp2_a": "To turn this into a function, simply drag the code into the existing function block.  \n\n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)",
          "courseF_bee_fwp2_b": "Don't forget to connect the `rowOfNectar` block to `when run` to call the function that you just built."
        },
        "courseF_bee_fwp3_authored_hint": {
          "courseF_bee_fwp3_a": "Your function will run no matter which direction you're facing.",
          "courseF_bee_fwp3_b": "There are 3 rows of nectar, what kind of turns and movements do you need to make between each row?",
          "courseF_bee_fwp3_c": "To solve this puzzle, you'll need to call your function 3 times. In between each call, you need to `turn right`, `move forward` 2 times, then `turn right` again. OR, you need to `turn left`, `move forward` 2 times, then `turn left` again."
        },
        "courseF_bee_fwp3_2018_authored_hint": {
          "courseF_bee_fwp3_a": "Your function will run no matter which direction you're facing.",
          "courseF_bee_fwp3_b": "There are 3 rows of nectar, what kind of turns and movements do you need to make between each row?",
          "courseF_bee_fwp3_c": "To solve this puzzle, you'll need to call your function 3 times. In between each call, you need to `turn right`, `move forward` 2 times, then `turn right` again. OR, you need to `turn left`, `move forward` 2 times, then `turn left` again."
        },
        "courseF_bee_fwp4_authored_hint": {
          "courseF_bee_fwp4_a": "You will need to add a parameter and use the resulting variable in your loop.",
          "courseF_bee_fwp4_b": "The parameter you create for your function will be used to in the repeat loop to determine how many times the bee will move forward and check for nectar."
        },
        "courseF_bee_fwp4_2018_authored_hint": {
          "courseF_bee_fwp4_a": "You will need to add a parameter and use the resulting variable in your loop.",
          "courseF_bee_fwp4_b": "The parameter you create for your function will be used to in the repeat loop to determine how many times the bee will move forward and check for nectar."
        },
        "courseF_bee_fwp5_authored_hint": {
          "courseF_bee_fwp5_a": "Count the number of spaces you need to check in each stretch and use those numbers as your parameters to the function call.",
          "courseF_bee_fwp5_a_b": "Remember to turn between each function call."
        },
        "courseF_bee_fwp5_2018_authored_hint": {
          "courseF_bee_fwp5_a": "Count the number of spaces you need to check in each stretch and use those numbers as your parameters to the function call.",
          "courseF_bee_fwp5_a_b": "Remember to turn between each function call."
        },
        "courseF_bee_fwp6_authored_hint": {
          "courseF_bee_fwp6_a": "Which block automatically increments a variable that you could use as a parameter?",
          "courseF_bee_fwp6_b": "Try using a `for` loop to solve this puzzle."
        },
        "courseF_bee_fwp6_2018_authored_hint": {
          "courseF_bee_fwp6_a": "Which block automatically increments a variable that you could use as a parameter?",
          "courseF_bee_fwp6_b": "Try using a `for` loop to solve this puzzle."
        },
        "courseF_bee_fwp7_authored_hint": {
          "courseF_bee_fwp7_a": "You don't need a second parameter for this function, only a second `if` statement.",
          "courseF_bee_fwp7_b": "Add an `if` statement in your function so the bee checks for both honeycombs and flowers."
        },
        "courseF_bee_fwp7_2018_authored_hint": {
          "courseF_bee_fwp7_a": "You don't need a second parameter for this function, only a second `if` statement.",
          "courseF_bee_fwp7_b": "Add an `if` statement in your function so the bee checks for both honeycombs and flowers."
        },
        "courseF_bee_fwp8_authored_hint": {
          "courseF_bee_fwp8_a": "How could a `for` loop help in this puzzle?",
          "courseF_bee_fwp8_b": "Since the spiral gets smaller as you go in, your `for` loop should count down."
        },
        "courseF_bee_fwp8_2018_authored_hint": {
          "courseF_bee_fwp8_a": "How could a `for` loop help in this puzzle?",
          "courseF_bee_fwp8_b": "Since the spiral gets smaller as you go in, your `for` loop should count down."
        },
        "courseF_bee_fwp_challenge1_authored_hint": {
          "courseF_bee_fwp_challenge1_a": "The main program should look something like this:\n\n<xml>\n<block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"procedures_callnoreturn\" inline=\"false\">\n        <mutation name=\"pick row\">\n          <arg name=\"length\"/>\n        </mutation>\n        <value name=\"ARG0\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"maze_move\">\n            <title name=\"DIR\">moveForward</title>\n            <next>\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"procedures_callnoreturn\" inline=\"false\">\n                    <mutation name=\"pick row\">\n                      <arg name=\"length\"/>\n                    </mutation>\n                    <value name=\"ARG0\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">5</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"maze_move\">\n                        <title name=\"DIR\">moveForward</title>\n                        <next>\n                          <block type=\"maze_move\">\n                            <title name=\"DIR\">moveForward</title>\n                            <next>\n                              <block type=\"procedures_callnoreturn\" inline=\"false\">\n                                <mutation name=\"pick row\">\n                                  <arg name=\"length\"/>\n                                </mutation>\n                                <value name=\"ARG0\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">6</title>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"maze_move\">\n                                    <title name=\"DIR\">moveForward</title>\n                                    <next>\n                                      <block type=\"maze_move\">\n                                        <title name=\"DIR\">moveForward</title>\n                                        <next>\n                                          <block type=\"procedures_callnoreturn\" inline=\"false\">\n                                            <mutation name=\"pick row\">\n                                              <arg name=\"length\"/>\n                                            </mutation>\n                                            <value name=\"ARG0\">\n                                              <block type=\"math_number\">\n                                                <title name=\"NUM\">4</title>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block></xml>",
          "courseF_bee_fwp_challenge1_b": "Look at how much corn is available to harvest in each space. Do you see the counter pattern? ",
          "courseF_bee_fwp_challenge1_b1": "The `length` parameter should be used to set the maximum value in the `for loop`.\n\nDon't forget to have the farmer move back to the main path after harvesting!",
          "courseF_bee_fwp_challenge1_c": "Place a `for loop` inside a function and set it to count from `1` to `length` by `1`.\nInside this loop, you should move forward and pick all of the corn.\n\n<xml>\n<block type=\"controls_for\" inline=\"true\">\n            <title name=\"VAR\">counter</title>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"parameters_get\">\n                <title name=\"VAR\">length</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n            </statement>\n</block></xml>",
          "courseF_bee_fwp_challenge1_d": "Inside the `for loop` you will want to `move forward` then `pick corn` **counter times**.",
          "courseF_bee_fwp_challenge1_d2": "After the `for loop` you can just `move backward` **length times**.",
          "courseF_bee_fwp_challenge1_e": "**Here is the solution:**\n\n<xml>\n  <block type=\"procedures_defnoreturn\" editable=\"false\" usercreated=\"true\">\n    <mutation>\n      <arg name=\"length\"/>\n    </mutation>\n    <title name=\"NAME\">pick row</title>\n    <statement name=\"STACK\">\n      <block type=\"maze_turn\">\n        <title name=\"DIR\">turnLeft</title>\n        <next>\n          <block type=\"controls_for\" inline=\"true\">\n            <title name=\"VAR\">counter</title>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"parameters_get\">\n                <title name=\"VAR\">length</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"harvester_corn\"/>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"parameters_get\">\n                    <title name=\"VAR\">length</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n                </statement>\n                <next>\n                  <block type=\"maze_turn\">\n                    <title name=\"DIR\">turnRight</title>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    </block></xml>\n"
        },
        "courseF_bee_fwp_challenge1_2018_authored_hint": {
          "courseF_bee_fwp_challenge1_a": "The main program should look something like this:\n\n<xml>\n<block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"procedures_callnoreturn\" inline=\"false\">\n        <mutation name=\"pick row\">\n          <arg name=\"length\"/>\n        </mutation>\n        <value name=\"ARG0\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n        </value>\n        <next>\n          <block type=\"maze_move\">\n            <title name=\"DIR\">moveForward</title>\n            <next>\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"procedures_callnoreturn\" inline=\"false\">\n                    <mutation name=\"pick row\">\n                      <arg name=\"length\"/>\n                    </mutation>\n                    <value name=\"ARG0\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">5</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"maze_move\">\n                        <title name=\"DIR\">moveForward</title>\n                        <next>\n                          <block type=\"maze_move\">\n                            <title name=\"DIR\">moveForward</title>\n                            <next>\n                              <block type=\"procedures_callnoreturn\" inline=\"false\">\n                                <mutation name=\"pick row\">\n                                  <arg name=\"length\"/>\n                                </mutation>\n                                <value name=\"ARG0\">\n                                  <block type=\"math_number\">\n                                    <title name=\"NUM\">6</title>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type=\"maze_move\">\n                                    <title name=\"DIR\">moveForward</title>\n                                    <next>\n                                      <block type=\"maze_move\">\n                                        <title name=\"DIR\">moveForward</title>\n                                        <next>\n                                          <block type=\"procedures_callnoreturn\" inline=\"false\">\n                                            <mutation name=\"pick row\">\n                                              <arg name=\"length\"/>\n                                            </mutation>\n                                            <value name=\"ARG0\">\n                                              <block type=\"math_number\">\n                                                <title name=\"NUM\">4</title>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </next>\n  </block></xml>",
          "courseF_bee_fwp_challenge1_b": "Look at how much corn is available to harvest in each space. Do you see the counter pattern? ",
          "courseF_bee_fwp_challenge1_b1": "The `length` parameter should be used to set the maximum value in the `for loop`.\n\nDon't forget to have the farmer move back to the main path after harvesting!",
          "courseF_bee_fwp_challenge1_c": "Place a `for loop` inside a function and set it to count from `1` to `length` by `1`.\nInside this loop, you should move forward and pick all of the corn.\n\n<xml>\n<block type=\"controls_for\" inline=\"true\">\n            <title name=\"VAR\">counter</title>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"parameters_get\">\n                <title name=\"VAR\">length</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n            </statement>\n</block></xml>",
          "courseF_bee_fwp_challenge1_d": "Inside the `for loop` you will want to `move forward` then `pick corn` **counter times**.",
          "courseF_bee_fwp_challenge1_d2": "After the `for loop` you can just `move backward` **length times**.",
          "courseF_bee_fwp_challenge1_e": "**Here is the solution:**\n\n<xml>\n  <block type=\"procedures_defnoreturn\" editable=\"false\" usercreated=\"true\">\n    <mutation>\n      <arg name=\"length\"/>\n    </mutation>\n    <title name=\"NAME\">pick row</title>\n    <statement name=\"STACK\">\n      <block type=\"maze_turn\">\n        <title name=\"DIR\">turnLeft</title>\n        <next>\n          <block type=\"controls_for\" inline=\"true\">\n            <title name=\"VAR\">counter</title>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"parameters_get\">\n                <title name=\"VAR\">length</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"harvester_corn\"/>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"parameters_get\">\n                    <title name=\"VAR\">length</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n                </statement>\n                <next>\n                  <block type=\"maze_turn\">\n                    <title name=\"DIR\">turnRight</title>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    </block></xml>\n"
        },
        "courseF_bee_fwp_challenge2_authored_hint": {
          "courseF_bee_fwp_challenge2_a": "Start by making sure you understand how this function is *supposed* to work. As the farmer moves down each path, she will only try to collect corn. Instead, how can you make her check for each of the 3 vegetables and pick only the one she finds?\n\nAdd conditional statements to the function to check for corn, pumpkins, and lettuce.",
          "courseF_bee_fwp_challenge2_b": "Are you running out of `move forward` blocks?\nTry using a *second* `for loop` in your main program.",
          "courseF_bee_fwp_challenge2_c": "**Here is what your function should look like:**\n\n<xml><block type=\"procedures_defnoreturn\" deletable=\"false\" movable=\"false\" editable=\"false\" usercreated=\"true\">\n    <mutation>\n      <arg name=\"length\"/>\n    </mutation>\n    <title name=\"NAME\">pick row</title>\n    <statement name=\"STACK\">\n      <block type=\"maze_turn\">\n        <title name=\"DIR\">turnLeft</title>\n        <next>\n          <block type=\"controls_for\" inline=\"true\">\n            <title name=\"VAR\">counter</title>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"parameters_get\">\n                <title name=\"VAR\">length</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"harvester_ifHasCrop\">\n                        <title name=\"LOC\">Corn</title>\n                        <statement name=\"DO\">\n                          <block type=\"harvester_corn\"/>\n                        </statement>\n                        <next>\n                          <block type=\"harvester_ifHasCrop\">\n                            <title name=\"LOC\">Pumpkin</title>\n                            <statement name=\"DO\">\n                              <block type=\"harvester_pumpkin\"/>\n                            </statement>\n                            <next>\n                              <block type=\"harvester_ifHasCrop\">\n                                <title name=\"LOC\">Lettuce</title>\n                                <statement name=\"DO\">\n                                  <block type=\"harvester_lettuce\"/>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"parameters_get\">\n                    <title name=\"VAR\">length</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n                </statement>\n                <next>\n                  <block type=\"maze_turn\">\n                    <title name=\"DIR\">turnRight</title>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>",
          "courseF_bee_fwp_challenge2_d": "**Here is what your main program should look like:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for\" inline=\"true\">\n        <title name=\"VAR\">counter2</title>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">6</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"maze_move\">\n            <title name=\"DIR\">moveForward</title>\n            <next>\n              <block type=\"procedures_callnoreturn\" inline=\"false\">\n                <mutation name=\"pick row\">\n                  <arg name=\"length\"/>\n                </mutation>\n                <value name=\"ARG0\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">counter2</title>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n    </block></xml>\n"
        },
        "courseF_bee_fwp_challenge2_2018_authored_hint": {
          "courseF_bee_fwp_challenge2_a": "Start by making sure you understand how this function is *supposed* to work. As the farmer moves down each path, she will only try to collect corn. Instead, how can you make her check for each of the 3 vegetables and pick only the one she finds?\n\nAdd conditional statements to the function to check for corn, pumpkins, and lettuce.",
          "courseF_bee_fwp_challenge2_b": "Are you running out of `move forward` blocks?\nTry using a *second* `for loop` in your main program.",
          "courseF_bee_fwp_challenge2_c": "**Here is what your function should look like:**\n\n<xml><block type=\"procedures_defnoreturn\" deletable=\"false\" movable=\"false\" editable=\"false\" usercreated=\"true\">\n    <mutation>\n      <arg name=\"length\"/>\n    </mutation>\n    <title name=\"NAME\">pick row</title>\n    <statement name=\"STACK\">\n      <block type=\"maze_turn\">\n        <title name=\"DIR\">turnLeft</title>\n        <next>\n          <block type=\"controls_for\" inline=\"true\">\n            <title name=\"VAR\">counter</title>\n            <value name=\"FROM\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TO\">\n              <block type=\"parameters_get\">\n                <title name=\"VAR\">length</title>\n              </block>\n            </value>\n            <value name=\"BY\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"maze_move\">\n                <title name=\"DIR\">moveForward</title>\n                <next>\n                  <block type=\"controls_repeat_ext\" inline=\"true\">\n                    <value name=\"TIMES\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <statement name=\"DO\">\n                      <block type=\"harvester_ifHasCrop\">\n                        <title name=\"LOC\">Corn</title>\n                        <statement name=\"DO\">\n                          <block type=\"harvester_corn\"/>\n                        </statement>\n                        <next>\n                          <block type=\"harvester_ifHasCrop\">\n                            <title name=\"LOC\">Pumpkin</title>\n                            <statement name=\"DO\">\n                              <block type=\"harvester_pumpkin\"/>\n                            </statement>\n                            <next>\n                              <block type=\"harvester_ifHasCrop\">\n                                <title name=\"LOC\">Lettuce</title>\n                                <statement name=\"DO\">\n                                  <block type=\"harvester_lettuce\"/>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"parameters_get\">\n                    <title name=\"VAR\">length</title>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n                </statement>\n                <next>\n                  <block type=\"maze_turn\">\n                    <title name=\"DIR\">turnRight</title>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>",
          "courseF_bee_fwp_challenge2_d": "**Here is what your main program should look like:**\n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for\" inline=\"true\">\n        <title name=\"VAR\">counter2</title>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">6</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"maze_move\">\n            <title name=\"DIR\">moveForward</title>\n            <next>\n              <block type=\"procedures_callnoreturn\" inline=\"false\">\n                <mutation name=\"pick row\">\n                  <arg name=\"length\"/>\n                </mutation>\n                <value name=\"ARG0\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">counter2</title>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n    </block></xml>\n"
        },
        "courseF_farmer_ramp11_authored_hint": {
          "courseF_farmer_ramp11_a": "If you're having a hard time seeing where the loops should go, try coding it all out then looking for a pattern.",
          "courseF_farmer_ramp11_b": "How can you use a <xml><block type=\"controls_repeat\"><title name=\"TIMES\">???</title></block></xml> loop to pick lettuce, instead of dragging out 5 <xml><block type=\"harvester_lettuce\"/></xml> blocks?",
          "courseF_farmer_ramp11_c": "You don't need to use 5 repeat loops to get all of the lettuce.  Instead, drag your lettuce picking repeat loop inside of another loop (along with a <xml><block type=\"maze_moveForward\"/></xml> block, and you'll have it!)"
        },
        "courseF_farmer_ramp11_2018_authored_hint": {
          "courseF_farmer_ramp11_a": "If you're having a hard time seeing where the loops should go, try coding it all out then looking for a pattern.",
          "courseF_farmer_ramp11_b": "How can you use a <xml><block type=\"controls_repeat\"><title name=\"TIMES\">???</title></block></xml> loop to pick lettuce, instead of dragging out 5 <xml><block type=\"harvester_lettuce\"/></xml> blocks?",
          "courseF_farmer_ramp11_c": "You don't need to use 5 repeat loops to get all of the lettuce.  Instead, drag your lettuce picking repeat loop inside of another loop (along with a <xml><block type=\"maze_moveForward\"/></xml> block, and you'll have it!)"
        },
        "courseF_maze_ramp1_authored_hint": {
          "courseF_maze_ramp1_a": "If the bird isn't getting to the pig, make sure all of the blocks have been fully snapped together, then click \"Run\" again.",
          "courseF_maze_ramp1_b": "You don't need any extra blocks from the toolbox here!"
        },
        "courseF_maze_ramp13_authored_hint": {
          "courseF_maze_ramp13_b": "Don't forget to use the \"Step\" button to go through block by block and look for errors.",
          "courseF_maze_ramp13_a": "Use repeat blocks to run either a single block or a chunk of code over and over.",
          "courseF_maze_ramp13_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.",
          "courseF_maze_ramp13_d": "Once your loop is done, what do you have to do to move the final few squares? Attach these blocks after the loop."
        },
        "courseF_maze_ramp15_authored_hint": {
          "courseF_maze_ramp7_b": "Don't forget to use the \"Step\" button to go through block by block and look for errors.",
          "courseF_maze_ramp7_a": "Use repeat blocks to run either a single block or a chunk of code over and over."
        },
        "courseF_maze_ramp1_2018_authored_hint": {
          "courseF_maze_ramp1_a": "If the bird isn't getting to the pig, make sure all of the blocks have been fully snapped together, then click \"Run\" again.",
          "courseF_maze_ramp1_b": "You don't need any extra blocks from the toolbox here!"
        },
        "courseF_maze_ramp2_authored_hint": {
          "courseF_maze_ramp2_a": "To use a new block, drag it from the toolbox out into the workspace and connect it to the program that is attached to the <xml><block type=\"when_run\"/></xml> block.",
          "courseF_maze_ramp2_b": "Make sure the <xml><block type=\"maze_moveForward\"/></xml> block is inside of the loop, so that it is repeated."
        },
        "courseF_maze_ramp2_2018_authored_hint": {
          "courseF_maze_ramp2_a": "To use a new block, drag it from the toolbox out into the workspace and connect it to the program that is attached to the <xml><block type=\"when_run\"/></xml> block.",
          "courseF_maze_ramp2_b": "Make sure the <xml><block type=\"maze_moveForward\"/></xml> block is inside of the loop, so that it is repeated."
        },
        "courseF_maze_ramp4_authored_hint": {
          "courseF_maze_ramp4_a": "You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.",
          "courseF_maze_ramp4_b": "To follow the path, move forward and turn one way, then move three times before turning the opposite way. Move forward one more time to reach the pig.",
          "courseF_maze_ramp4_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseF_maze_ramp4_2018_authored_hint": {
          "courseF_maze_ramp4_a": "You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.",
          "courseF_maze_ramp4_b": "To follow the path, move forward and turn one way, then move three times before turning the opposite way. Move forward one more time to reach the pig.",
          "courseF_maze_ramp4_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet."
        },
        "courseF_maze_ramp5_authored_hint": {
          "courseF_maze_ramp5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseF_maze_ramp5_b": "There is more than one way to get to the pig.",
          "courseF_maze_ramp5_c": "Try using a <xml><block type=\"controls_repeat\"><title name=\"TIMES\">3</title></block></xml> loop for shorter code!"
        },
        "courseF_maze_ramp5_2018_authored_hint": {
          "courseF_maze_ramp5_a": "Try using the \"Step\" button to run your code line by line. Can you figure out what you need to do next?",
          "courseF_maze_ramp5_b": "There is more than one way to get to the pig.",
          "courseF_maze_ramp5_c": "Try using a <xml><block type=\"controls_repeat\"><title name=\"TIMES\">3</title></block></xml> loop for shorter code!"
        },
        "courseF_maze_ramp6_authored_hint": {
          "courseF_maze_ramp6_a": "There are two ways to solve this puzzle!",
          "courseF_maze_ramp6_b": "The bird starts facing a wall, so remember to turn before moving!",
          "courseF_maze_ramp6_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseF_maze_ramp6_2018_authored_hint": {
          "courseF_maze_ramp6_a": "There are two ways to solve this puzzle!",
          "courseF_maze_ramp6_b": "The bird starts facing a wall, so remember to turn before moving!",
          "courseF_maze_ramp6_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet."
        },
        "courseF_maze_ramp7_authored_hint": {
          "courseF_maze_ramp7_b": "Don't forget to use the \"Step\" button to go through block by block and look for errors.",
          "courseF_maze_ramp7_a": "Use repeat blocks to run either a single block or a chunk of code over and over.",
          "courseF_maze_ramp7_c": "Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.",
          "courseF_maze_ramp7_d": "There is more than one way to get to the pig. Which requires the least code?",
          "courseF_maze_ramp7_aa": "Look at this path...\n\n![](https://images.code.org/e1d29901495eea9504c194b09efaa88e-image-1503437474226.29.32.png)"
        },
        "courseF_playlab_brokenText_authored_hint": {
          "courseF_playlab_variables6c_a": "Under the “Input” section, use the `ask` block to get input from users."
        },
        "courseF_playlab_variables1a_authored_hint": {
          "courseF_playlab_variables1a_a": "You will want to replace the words “What should I shout?” in the green block with “Goal!”"
        },
        "courseF_playlab_variables1a_2018_authored_hint": {
          "courseF_playlab_variables1a_a": "You will want to replace the words “What should I shout?” in the green block with “Goal!”"
        },
        "courseF_playlab_variables2b_authored_hint": {
          "courseF_playlab_variables2b_a": "What do you think Kiki will say when you hit `Run`?"
        },
        "courseF_playlab_variables2b_2018_authored_hint": {
          "courseF_playlab_variables2b_a": "What do you think Kiki will say when you hit `Run`?"
        },
        "courseF_playlab_variables3b_authored_hint": {
          "courseF_playlab_variables3b_a": "The variable blocks are already in the workspace.  All you have to do is put them where they belong!"
        },
        "courseF_playlab_variables3bEdit_authored_hint": {
          "courseF_playlab_variables3b_a": "The variable blocks are already in the workspace.  All you have to do is put them where they belong!"
        },
        "courseF_playlab_variables3b_josh_authored_hint": {
          "courseF_playlab_variables3b_a": "There are two blocks with empty spaces: an `actor say` block, and a `join` block. Add the variable blocks there!"
        },
        "courseF_playlab_variables3b_josh_2018_authored_hint": {
          "courseF_playlab_variables3b_a": "There are two blocks with empty spaces: an `actor say` block, and a `join` block. Add the variable blocks there!"
        },
        "courseF_playlab_variables4b_authored_hint": {
          "courseF_playlab_variables4b_a": "You don’t need any more blocks from the toolbox here.",
          "courseF_playlab_variables4b_b": "Put the two `age` variables and one `name` variable where they make the most sense in the conversation."
        },
        "courseF_playlab_variables4b_2018_authored_hint": {
          "courseF_playlab_variables4b_a": "You don’t need any more blocks from the toolbox here.",
          "courseF_playlab_variables4b_b": "Put the two `age` variables and one `name` variable where they make the most sense in the conversation."
        },
        "courseF_playlab_variables5c_authored_hint": {
          "courseF_playlab_variables5c_a": "Find an `answer` variable block in the toolbox, under “Variables”.",
          "courseF_playlab_variables5c_b": "Test your code! Try entering “red”, and also other colors, to see what happens."
        },
        "courseF_playlab_variables5c_2018_authored_hint": {
          "courseF_playlab_variables5c_a": "Find an `answer` variable block in the toolbox, under “Variables”.",
          "courseF_playlab_variables5c_b": "Test your code! Try entering “red”, and also other colors, to see what happens."
        },
        "courseF_playlab_variables6c_authored_hint": {
          "courseF_playlab_variables6c_a": "Under the “Input” section, use the `ask` block to get input from users."
        },
        "courseF_playlab_variables6c_2018_authored_hint": {
          "courseF_playlab_variables6c_a": "Under the “Input” section, use the `ask` block to get input from users."
        },
        "courseF_playlab_variables7b_authored_hint": {
          "courseF_playlab_variables7b_a": "Have a cat and a dog talk about their favorite foods. Use the ask block to find out the favorite food, then display the text to the screen!",
          "courseF_playlab_variables7b_b": "Have your favorite character ask if you want to hear a joke. If the answer is yes, display a joke to the screen."
        },
        "courseF_playlab_variables7b_2018_authored_hint": {
          "courseF_playlab_variables7b_a": "Have a cat and a dog talk about their favorite foods. Use the ask block to find out the favorite food, then display the text to the screen!",
          "courseF_playlab_variables7b_b": "Have your favorite character ask if you want to hear a joke. If the answer is yes, display a joke to the screen."
        },
        "courseF_playlab_variables7c_authored_hint": {
          "courseF_playlab_variables7c_a": "Put the new `ask` block before your `if/else` statement so you can use it there in other stages."
        },
        "courseF_playlab_variables7c_2018_authored_hint": {
          "courseF_playlab_variables7c_a": "Put the new `ask` block before your `if/else` statement so you can use it there in other stages."
        },
        "courseF_playlab_variables8c_authored_hint": {
          "courseF_playlab_variables8c_a": "The `join` block goes into an `actor say` block, and lets you use your variables in larger sentences."
        },
        "courseF_playlab_variables8c_2018_authored_hint": {
          "courseF_playlab_variables8c_a": "The `join` block goes into an `actor say` block, and lets you use your variables in larger sentences."
        },
        "courseF_playlab_variables_challenge1_authored_hint": {
          "courseF_playlab_variables_challenge1_a": "You will need additional blocks from the tool box to get the actors to talk.\n\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n      <value name=\"SPRITE\">\n        <block type=\"math_number\">\n          <title name=\"NUM\">1</title>\n        </block>\n      </value>\n                      <value name=\"TEXT\">\n                  <block type=\"text\">\n                    <title name=\"TEXT\">Knock knock.</title>\n                  </block>\n                </value>\n      <value name=\"TIME\">\n        <block type=\"math_number\">\n          <title name=\"NUM\">1</title>\n        </block>\n      </value>\n      </block></xml>"
        },
        "courseF_playlab_variables_challenge1_2018_authored_hint": {
          "courseF_playlab_variables_challenge1_a": "You will need additional blocks from the tool box to get the actors to talk.\n\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n      <value name=\"SPRITE\">\n        <block type=\"math_number\">\n          <title name=\"NUM\">1</title>\n        </block>\n      </value>\n                      <value name=\"TEXT\">\n                  <block type=\"text\">\n                    <title name=\"TEXT\">Knock knock.</title>\n                  </block>\n                </value>\n      <value name=\"TIME\">\n        <block type=\"math_number\">\n          <title name=\"NUM\">1</title>\n        </block>\n      </value>\n      </block></xml>"
        },
        "courseF_playlab_variables_challenge2_authored_hint": {
          "courseF_playlab_variables_challenge2_a": "Add and subtract points to the `score` variable when sprites collide.",
          "courseF_playlab_variables_challenge2_b": "You can change how far you move your sprite each time one of the arrow keys is pressed.",
          "courseF_playlab_variables_challenge2_c": "**Solution:**\n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">up</title>\n    <next>\n      <block type=\"studio_moveDistanceParams\" inline=\"true\">\n        <title name=\"SPRITE\">0</title>\n        <title name=\"DIR\">1</title>\n        <value name=\"DISTANCE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">25</title>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n    <next>\n      <block type=\"studio_moveDistanceParams\" inline=\"true\">\n        <title name=\"SPRITE\">0</title>\n        <title name=\"DIR\">4</title>\n        <value name=\"DISTANCE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">25</title>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">left</title>\n    <next>\n      <block type=\"studio_moveDistanceParams\" inline=\"true\">\n        <title name=\"SPRITE\">0</title>\n        <title name=\"DIR\">8</title>\n        <value name=\"DISTANCE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">25</title>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n    <next>\n      <block type=\"studio_moveDistanceParams\" inline=\"true\">\n        <title name=\"SPRITE\">0</title>\n        <title name=\"DIR\">2</title>\n        <value name=\"DISTANCE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">25</title>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n  <block type=\"studio_whenSpriteCollided\">\n    <title name=\"SPRITE1\">0</title>\n    <title name=\"SPRITE2\">1</title>\n    <next>\n      <block type=\"studio_setScore\" inline=\"false\">\n        <value name=\"VALUE\">\n          <block type=\"math_arithmetic\" inline=\"true\">\n            <title name=\"OP\">ADD</title>\n            <value name=\"A\">\n              <block type=\"studio_getScore\"/>\n            </value>\n            <value name=\"B\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">3</title>\n              </block>\n            </value>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n  <block type=\"studio_whenSpriteCollided\">\n    <title name=\"SPRITE1\">0</title>\n    <title name=\"SPRITE2\">2</title>\n    <next>\n      <block type=\"studio_setScore\" inline=\"false\">\n        <value name=\"VALUE\">\n          <block type=\"math_arithmetic\" inline=\"true\">\n            <title name=\"OP\">ADD</title>\n            <value name=\"A\">\n              <block type=\"studio_getScore\"/>\n            </value>\n            <value name=\"B\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">3</title>\n              </block>\n            </value>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n  <block type=\"studio_whenSpriteCollided\">\n    <title name=\"SPRITE1\">1</title>\n    <title name=\"SPRITE2\">2</title>\n    <next>\n      <block type=\"studio_setScore\" inline=\"false\">\n        <value name=\"VALUE\">\n          <block type=\"math_arithmetic\" inline=\"true\">\n            <title name=\"OP\">MINUS</title>\n            <value name=\"A\">\n              <block type=\"studio_getScore\"/>\n            </value>\n            <value name=\"B\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseF_playlab_variables_challenge2_2018_authored_hint": {
          "courseF_playlab_variables_challenge2_a": "Add and subtract points to the `score` variable when sprites collide.",
          "courseF_playlab_variables_challenge2_b": "You can change how far you move your sprite each time one of the arrow keys is pressed.",
          "courseF_playlab_variables_challenge2_c": "**Solution:**\n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">up</title>\n    <next>\n      <block type=\"studio_moveDistanceParams\" inline=\"true\">\n        <title name=\"SPRITE\">0</title>\n        <title name=\"DIR\">1</title>\n        <value name=\"DISTANCE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">25</title>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n    <next>\n      <block type=\"studio_moveDistanceParams\" inline=\"true\">\n        <title name=\"SPRITE\">0</title>\n        <title name=\"DIR\">4</title>\n        <value name=\"DISTANCE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">25</title>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">left</title>\n    <next>\n      <block type=\"studio_moveDistanceParams\" inline=\"true\">\n        <title name=\"SPRITE\">0</title>\n        <title name=\"DIR\">8</title>\n        <value name=\"DISTANCE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">25</title>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n    <next>\n      <block type=\"studio_moveDistanceParams\" inline=\"true\">\n        <title name=\"SPRITE\">0</title>\n        <title name=\"DIR\">2</title>\n        <value name=\"DISTANCE\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">25</title>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n  <block type=\"studio_whenSpriteCollided\">\n    <title name=\"SPRITE1\">0</title>\n    <title name=\"SPRITE2\">1</title>\n    <next>\n      <block type=\"studio_setScore\" inline=\"false\">\n        <value name=\"VALUE\">\n          <block type=\"math_arithmetic\" inline=\"true\">\n            <title name=\"OP\">ADD</title>\n            <value name=\"A\">\n              <block type=\"studio_getScore\"/>\n            </value>\n            <value name=\"B\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">3</title>\n              </block>\n            </value>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n  <block type=\"studio_whenSpriteCollided\">\n    <title name=\"SPRITE1\">0</title>\n    <title name=\"SPRITE2\">2</title>\n    <next>\n      <block type=\"studio_setScore\" inline=\"false\">\n        <value name=\"VALUE\">\n          <block type=\"math_arithmetic\" inline=\"true\">\n            <title name=\"OP\">ADD</title>\n            <value name=\"A\">\n              <block type=\"studio_getScore\"/>\n            </value>\n            <value name=\"B\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">3</title>\n              </block>\n            </value>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n  <block type=\"studio_whenSpriteCollided\">\n    <title name=\"SPRITE1\">1</title>\n    <title name=\"SPRITE2\">2</title>\n    <next>\n      <block type=\"studio_setScore\" inline=\"false\">\n        <value name=\"VALUE\">\n          <block type=\"math_arithmetic\" inline=\"true\">\n            <title name=\"OP\">MINUS</title>\n            <value name=\"A\">\n              <block type=\"studio_getScore\"/>\n            </value>\n            <value name=\"B\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n</xml>"
        },
        "courseF_playlab_variables_challenge3_authored_hint": {
          "courseF_playlab_variables_challenge3_a": "The actor knows what to say because it checks the current value of the `fortune` variable.\n\n<xml><block type=\"variables_set\" inline=\"false\">\n            <title name=\"VAR\">fortune</title>\n            <value name=\"VALUE\">\n              <block type=\"text\" movable=\"false\">\n                <title name=\"TEXT\">Concentrate and ask again!</title>\n              </block>\n            </value>\n          </block></xml>",
          "courseF_playlab_variables_challenge3_b": "It will feel like the game starts all over if you call the `ask a question` function again after the actor says the fortune.\n\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n                <value name=\"SPRITE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">1</title>\n                  </block>\n                </value>\n                <value name=\"TEXT\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">fortune</title>\n                  </block>\n                </value>\n                <value name=\"TIME\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">2</title>\n                  </block>\n                </value>\n              <next>\n<block type=\"procedures_callnoreturn\">\n        <mutation name=\"Ask a question\"/>\n        </block></next></block></xml>",
          "courseF_playlab_variables_challenge3_c": "You will need to add more conditional statements to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"variables_set\" inline=\"false\">\n                <title name=\"VAR\">fortune</title>\n                <value name=\"VALUE\">\n                  <block type=\"text\" movable=\"false\">\n                    <title name=\"TEXT\">???</title>\n                  </block>\n                </value>\n              </block>\n              </statement></block></xml>\n\n              \nDon't forget to change which moods the actor will show inside of the `repeat forever` loop. You can also set the moods randomly!",
          "courseF_playlab_variables_challenge3_d": "Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.\n\nDon't forget to change the instructions inside the `Ask a question` function so they still make sense!",
          "courseF_playlab_variables_challenge3_e": "When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?\n\nHave a friend try your app when it is finished!"
        },
        "coursea_maze_ramp1_2018_authored_hint": {
          "courseC_maze_programming1_a": "If the bird isn't getting to the pig, make sure both of the blocks have been fully clicked together, then click \"Run\" again.",
          "courseC_maze_programming1_b": "Don't be afraid to make a mistake! Try something, and if it doesn't work, try something else!"
        },
        "coursef_maze_ramp3_authored_hint": {
          "courseF_maze_ramp3_a": "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n",
          "courseF_maze_ramp3_b": "Use the step button to go through the program line-by-line. Where does something go wrong?"
        },
        "coursef_maze_ramp3_2018_authored_hint": {
          "courseF_maze_ramp3_a": "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n",
          "courseF_maze_ramp3_b": "Use the step button to go through the program line-by-line. Where does something go wrong?"
        },
        "drawings!_authored_hint": {
          "triangle_geometry_hint": "Remember: an equilateral triangle has three sides, with a 60 degree turn between each!",
          "repeat_pointer": "You have to draw a side and turn 3 times...what block can you use to run the same instructions many times?",
          "repeat_bottom_out": "Use a `repeat 3 times` block!"
        },
        "farmer-test-lb_authored_hint": {
          "hint_2": "Pointing 123"
        },
        "grade1_adventurer_loops10_authored_hint": {
          "grade1_adventurer_loops10_a": "You'll need three `repeat` loops to solve this puzzle."
        },
        "grade1_adventurer_loops2_authored_hint": {
          "grade1_adventurer_loops2_a": "Try using a `repeat` block to collect your gold."
        },
        "grade1_adventurer_loops3_authored_hint": {
          "grade1_adventurer_loops3_a": "Is something not right? Try using the step button to figure out where things go wrong."
        },
        "grade1_adventurer_loops4_authored_hint": {
          "grade1_adventurer_loops4_a": "Try using more than one loop to get the job done."
        },
        "grade1_adventurer_loops5_authored_hint": {
          "grade1_adventurer_loops5_a": "Can't figure out where things start going wrong? Use the \"Step\" button to run through your program one block at a time."
        },
        "grade1_adventurer_loops6_authored_hint": {
          "grade1_adventurer_loops6_a": "If you are having a hard time with the puzzle, try drawing it on paper to help you figure it out."
        },
        "grade1_adventurer_loops7_challenge_authored_hint": {
          "grade1_adventurer_loops7_challenge_a": "If you can't figure out where to put the repeat loops, program it out step-by-step and look for a pattern. ",
          "grade1_adventurer_loops7_challenge_b": "Does the code feel a little long?  You can make it much shorter by moving two of your `repeat` loops inside of another loop."
        },
        "grade1_adventurer_loops8_challenge_authored_hint": {
          "grade1_adventurer_loops8_challenge_a": "Can you find a pattern in the steps?  Where can you use a repeat?"
        },
        "grade1_adventurer_loops9_authored_hint": {
          "grade1_adventurer_loops9_a": "Does this seem too hard?  Break it up into 4 little problems to make it feel easier.\n"
        },
        "grade1_artist_loops1_authored_hint": {
          "grade1_artist_loops1_a": "If you want the loop to repeat more than 4 times, you can change the number at the top of the block."
        },
        "grade1_artist_loops2_authored_hint": {
          "grade1_artist_loops2_a": "Remember to use a `repeat` loop for better code!"
        },
        "grade1_artist_loops4_authored_hint": {
          "grade1_artist_loops4_a": "Drag out a `repeat` loop, then put the other blocks inside of it. How many times do you need to repeat?"
        },
        "grade1_artist_loops6_authored_hint": {
          "grade1_artist_loops6_a": "This challenge uses FOUR loops, one right after another!",
          "grade1_artist_loops6_b": "Notice that every loop makes a stair pattern that travels in a different direction.\n\n![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)",
          "grade1_artist_loops6_c": "The loops should do this:\n- Loop 1\n  - Right\n  - Down\n  \n- Loop 2\n  - Right\n  - Up\n\n- Loop 3\n  - Left\n  - Up\n\n- Loop 4\n  - Left\n  - Down"
        },
        "grade1_artist_loops7a_authored_hint": {
          "artistLoopsK9_a": "This challenge uses FOUR loops, one right after another!",
          "artistLoopsK9_b": "Notice that every loop makes a stair pattern that travels in a different direction.\n\n![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)",
          "artistLoopsK9_c": "The loops should do this:\n- Loop 1\n  - Right\n  - Down\n  \n- Loop 2\n  - Right\n  - Up\n\n- Loop 3\n  - Left\n  - Up\n\n- Loop 4\n  - Left\n  - Down"
        },
        "grade1_artist_loops7b_authored_hint": {
          "grade1_artist_loops7b_a": "How many times should you repeat the pattern to make the ladder?"
        },
        "grade1_maze_sequence1_authored_hint": {
          "grade1_maze_sequence1_a": "This program is missing one block. Can you figure out which one?"
        },
        "grade1_maze_sequence10_authored_hint": {
          "grade1_maze_sequence10_a": "If you're having trouble, try writing down the steps on a piece of paper first."
        },
        "grade1_maze_sequence2_authored_hint": {
          "grade1_maze_sequence2_a": "One of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?"
        },
        "grade1_maze_sequence3_authored_hint": {
          "grade1_maze_sequence3_a": "Try adding one instruction at a time until you get to the pig."
        },
        "grade1_maze_sequence5_authored_hint": {
          "K2.0_sequence_5": "Your final code should have three movement blocks."
        },
        "grade1_maze_sequence6_authored_hint": {
          "K2.0_sequence_6_a": "There is 1 block that you need to add to move the bird to the pig."
        },
        "grade1_maze_sequence7_authored_hint": {
          "grade1_maze_sequence7a": "If you're stuck, try adding one block at a time until you solve the puzzle."
        },
        "grade1_maze_sequence8_authored_hint": {
          "grade1_maze_sequence8_a": "Stuck? Try tracing the bird's path with your finger.",
          "grade1_maze_sequence8_b": "The extra blocks need to be added before the last ![](https://images.code.org/145dfc20c086bc8fc265de47f3cfe4b0-image-1467848177684.35.51 PM.png )"
        },
        "grade1_maze_sequence9_authored_hint": {
          "grade1_maze_sequence9_a": "If you're having trouble, try writing down the steps on a piece of paper first."
        },
        "grade1_maze_sequenceA_authored_hint": {
          "grade1_maze_sequence10_a": "If you're having trouble, try writing down the steps on a piece of paper first."
        },
        "grade1_maze_sequenceB_authored_hint": {
          "grade1_maze_sequenceB_a": "If you're having trouble, try writing down the steps on a piece of paper first."
        },
        "grade1_maze_sequenceC_authored_hint": {
          "grade1_maze_sequenceC_a": "If you're having trouble, try writing down the steps on a piece of paper first."
        },
        "grade2_CaringForNewPet_0_authored_hint": {
          "grade2_CaringForNewPet_0": "If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click \"Run\" again."
        },
        "grade2_CaringForNewPet_1_authored_hint": {
          "2-3_Maze_1_a": "To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block."
        },
        "grade2_CaringForNewPet_2courseC_maze_programming3_authored_hint": {
          "courseC_maze_programming3_a": "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
        },
        "grade2_CaringForNewPet_3_authored_hint": {
          "hint1": "You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.",
          "hint2": "This path is a zig-zag. You need to move forward 3 times and turn 2 times.",
          "hint3": "To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig."
        },
        "grade2_CaringForNewPet_4_authored_hint": {
          "2-3_Maze_6_a": "There are two ways to solve this puzzle!"
        },
        "grade2_CaringForNewPet_5_authored_hint": {
          "grade2_CaringForNewPet_5_a": "If you can't quite see what you need to do, try saying the steps that your bird will take out loud one-by-one and see if they match the blocks in the workspace."
        },
        "grade2_CaringForNewPet_6_authored_hint": {
          "grade2_CaringForNewPet_6_a": "You don't have to code the whole solution at once!  Try running the code as you go to make sure it works at each step."
        },
        "grade2_CaringForNewPet_7D_authored_hint": {
          "grade2_CaringForNewPet_7D_a": "Don't forget to use the \"Step\" button to go through block by block and look for errors."
        },
        "grade2_MakeDogTag_1_authored_hint": {
          "2-3_Artist_1_new_a": "If you use the block to have me `move forward by 100 pixels`, I will draw a line automatically.",
          "2-3_Artist_1_new_b": "Having trouble turning the corner? Use the `turn right 90 degrees` block."
        },
        "grade2_MakeDogTag_2_authored_hint": {
          "2-3_Artist_2_new_a": "To create this window, just draw a square with 100 pixel sides."
        },
        "grade2_MakeDogTag_3_authored_hint": {
          "2-3_Artist_4_a": "To finish the rocket, just draw the triangle on top!"
        },
        "grade2_MakeDogTag_5_authored_hint": {
          "grade2_MakeDogTag_5a": "The artist is already facing the correct way to draw his first line.",
          "grade2_MakeDogTag_5b": "This diamond is really just a square that's standing on its corner.",
          "grade2_MakeDogTag_5c": "Since this diamond is also a square, be sure to turn 90 degrees at the corners."
        },
        "grade2_MakeDogTag_6_authored_hint": {
          "grade2_MakeDogTag_6a": "Every angle is either 45 or 90 degrees.",
          "grade2_MakeDogTag_6b": "Does it work at the first step?  \nHow about the second?  \nWhere does it go wrong?"
        },
        "grade2_MakeDogTag_7_authored_hint": {
          "2-3_Artist_11_a": "The exterior angles on this triangle are 120 degrees each."
        },
        "grade2_MakeDogTag_9_authored_hint": {
          "2-3_Artist_Loops_New_11_a": "Remember that the code from the last puzzle was:\n\n![](https://images.code.org/e5c7492f509dd41efe2888c7e7895c28-image-1461177002636.29.02.png)",
          "2-3_Artist_Loops_New_11_b": "Your new turn should go at the **end** of the code inside the loop."
        },
        "grade2_PuppyLoops_10_authored_hint": {
          "2-3_Artist_Debugging_8_a": "How many times did my shape repeat?\n\nHow many times *should* the shape repeat?\n\nWhere can you change that in the program?"
        },
        "grade2_PuppyLoops_3_authored_hint": {
          "hint1": "This puzzle is very similar to the last one.",
          "hint2": "Use a `repeat 5 times` block to create the loop.",
          "hint3": "Place a `move forward` block inside the `repeat block`."
        },
        "grade2_PuppyLoops_5_authored_hint": {
          "hint1": "The best solution uses two `move forward` commands and one loop."
        },
        "grade2_PuppyLoops_6_authored_hint": {
          "2-3_Maze_16_a": "If the pattern is hard to see, try coding it all out first and see what things repeat over and over before you put the loops in.",
          "2-3_Maze_16_b": "To put lots of blocks inside a `repeat` loop, just drag a loop out into the workspace, then drag all of the blocks from the starting program inside of it.  \n\nConnect it all back to the `when run` block and you're good to go!"
        },
        "grade2_PuppyLoops_7_authored_hint": {
          "2-3_Maze_Loops_17_a": "If the pattern is hard to see, try coding it all out first and see what things repeat over and over before you put the loops in.",
          "2-3_Maze_Loops_17_b": "Did the starting code get deleted?  Click `start over` to get it back!"
        },
        "grade2_PuppyLoops_8_authored_hint": {
          "2-3_Artist_Debugging_2_a": "Hint: Each whisker is 75 pixels long."
        },
        "grade2_PuppyLoops_9_authored_hint": {
          "2-3_Artist_Debugging_7_a": "What happens if you have the artist move or jump backward after he draws the first line?"
        },
        "grade2_collector_2_authored_hint": {
          "hint1": "You can use four `move forward` blocks or use the `repeat 4 times` block to make your program shorter."
        },
        "grade2_maze_intro4_authored_hint": {
          "hint_1": "Connect a \"move forward\" block to the bottom of the program."
        },
        "grade2_playlab_project_6_authored_hint": {
          "idea1": "*Need an idea?*\n\n**Who's there?** Make characters appear with random images, so no one knows who's showing up next.\n\n![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)",
          "idea2": "*Need an idea?*\n\n**Going on an Adventure** - Change the background, then have the characters talk about where they are now.\n\n![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)",
          "idea3": "*Need an idea?*\n\n**Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen."
        },
        "grade2_puppy_loops2_authored_hint": {
          "hint1": "You can solve this puzzle with just three blocks, including `when run`.",
          "hint2": "Try putting the `move forward` block inside of a `repeat` block to create a loop.",
          "hint3": "You need to repeat the `move forward` command 5 times to solve this puzzle."
        },
        "grade2_puppy_loops3_authored_hint": {
          "hint1": "This puzzle is very similar to the last one.",
          "hint2": "Use a `repeat 5 times` block to create the loop.",
          "hint3": "Place a `move forward` block inside the `repeat block`."
        },
        "grade2_puppy_loops4_authored_hint": {
          "hint1": "Not all command blocks should be repeated.",
          "hint2": "Use two `repeat` blocks set to different numbers.",
          "hint3": "`Turn right` once between the two loops."
        },
        "grade2_puppy_loops5_authored_hint": {
          "hint1": "The best solution uses two `move forward` commands and one loop."
        },
        "grade2_puppy_loops6_authored_hint": {
          "2-3_Maze_16_a": "If the pattern is hard to see, try coding it all out first and see what things repeat over and over before you put the loops in.",
          "2-3_Maze_16_b": "To put lots of blocks inside a `repeat` loop, just drag a loop out into the workspace, then drag all of the blocks from the starting program inside of it.  \n\nConnect it all back to the `when run` block and you're good to go!"
        },
        "grade2_puppy_loops7_authored_hint": {
          "2-3_Maze_Loops_17_a": "If the pattern is hard to see, try coding it all out first and see what things repeat over and over before you put the loops in."
        },
        "grade3_ConditionalsElse_4_authored_hint": {
          "remember_quantum": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if` or `if/else`) to solve the challenge."
        },
        "grade3_ConditionalsElse_5_authored_hint": {
          "remember_quantum": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if` or `if/else`) to solve the challenge."
        },
        "grade3_ConditionalsElse_TeacherIDo_authored_hint": {
          "remember_quantum": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if` or `if/else`) to solve the challenge."
        },
        "grade3_Conditionals_10 BAD_authored_hint": {
          "4-5_Bee_Nested_Loops_Rows_a": "Try treating this puzzle like a long rectangle where the bee needs to move forward, then turn left several times to complete the path."
        },
        "grade3_Conditionals_11_authored_hint": {
          "2-3_Bee_Conditionals_14_a": "Having a hard time figuring out how to get the blocks down?  Try treating the red flower exactly the same as a purple flower!",
          "2-3_Bee_Conditionals_14_b": "If the red flower were purple, could you figure out how to use an extra `repeat` loop to cut down on code?"
        },
        "grade3_Conditionals_12_authored_hint": {
          "2-3_Bee_Conditionals_15_a": "Remember: Purple flowers only have either 0 or 1 nectar and they can change each time you run the program."
        },
        "grade3_Conditionals_2_authored_hint": {
          "2-3_Bee_Conditionals_3_a": "The code will be shortest if you use a loop each time you move forward, another loop to gather nectar, and another one to make honey."
        },
        "grade3_Conditionals_4_authored_hint": {
          "2-3_Bee_Conditionals_6_a": "Remember: Purple flowers change between 0 and 1 nectar when you run your program!"
        },
        "grade3_Conditionals_TeacherIDo_authored_hint": {
          "2-3_Bee_Conditionals_6_a": "Remember: Purple flowers change between 0 and 1 nectar when you run your program!"
        },
        "grade3_Debugging_1_authored_hint": {
          "2-3_Bee_Debugging_1_a": "Once you find and fix the incorrect block, do you see any patterns that could be made more simple using a `repeat` loop?"
        },
        "grade3_Debugging_10_authored_hint": {
          "grade3_Debugging_10_a": "Start by looking at just the first loop.\n\nWhat does it do?\n\nWhat is it supposed to do?\n\nWhat does that tell you?",
          "grade3_Debugging_10_b": "Once you have the first loop the way you want it, what is left over in your code?",
          "grade3_Debugging_10_c": "Try wrapping the leftover loop around the rest of your completed code.  Does is work now?\n\nIf not, what is still going wrong?"
        },
        "grade3_Debugging_11_authored_hint": {
          "grade3_Debugging_11_a": "Try running through the code using the \"Step\" button.  Is everything good at the first step?\n\nHow about the second?\n\nWhere do things go wrong?",
          "grade3_Debugging_11_b": "It looks like all of the right steps are here, you just need more of them.  How can you repeat the `get nectar` and `make honey` actions multiple times?"
        },
        "grade3_Debugging_2_authored_hint": {
          "grade3_Debugging_2_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "grade3_Debugging_2_b": "Do you see any patterns that could be made more simple using a `repeat` loop?"
        },
        "grade3_Debugging_3_authored_hint": {
          "grade3_Debugging_3_a": "Use the \"Step\" button to see if everything is right at the first step.\n\nHow about the second?\n\nWhere does it go wrong?",
          "grade3_Debugging_3_b": "Do you see a pattern?  Try using nested loops to solve this puzzle."
        },
        "grade3_Debugging_4_authored_hint": {
          "grade3_Debugging_4_a": "Is there any place where the bee does something that doesn't make sense? What happens when you change those blocks?",
          "grade3_Debugging_4_b": "Try simplifying the code using nested loops."
        },
        "grade3_Debugging_8_authored_hint": {
          "grade3_Debugging_8_a": "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?",
          "grade3_Debugging_8_b": "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
        },
        "grade3_Debugging_TeacherIDo_authored_hint": {
          "2-3_Bee_Debugging_4_a": "Is there any place where the bee does something that doesn't make sense? What happens when you change that block?"
        },
        "grade3_Loops_10_authored_hint": {
          "2-3_Bee_Loops_4_a": "You should end up with five blocks inside your loop."
        },
        "grade3_Loops_11_authored_hint": {
          "2-3_Bee_Loops_5_a": "If you can't spot the blocks to put inside `repeat` right away, start by coding out each move and look for a pattern."
        },
        "grade3_Loops_12_authored_hint": {
          "2-3_Bee_Loops_6_a": "If you can't tell what should go into the `repeat` loop, try dragging blocks out one by one and see if you can find a pattern.",
          "2-3_Bee_Loops_6_b": "There should be 6 blocks inside your `repeat` loop when you're done."
        },
        "grade3_Loops_4_authored_hint": {
          "2-3_Bee_Loops_3B_a": "You will need two different `repeat` loops, one after the other."
        },
        "grade3_Loops_5_authored_hint": {
          "2-3_Bee_Loops_7_a": "The first action will be a turn, rather than a move.",
          "2-3_Bee_Loops_7_b": "If you can't quite picture the loop from the beginning, try coding it out the long way, then look for a pattern.  "
        },
        "grade3_Loops_6_authored_hint": {
          "2-3_Bee_Loops_4A_a": "The first action will be a turn, rather than a move.",
          "2-3_Bee_Loops_4A_b": "The last piece of the program can be finished by writing code at the end of your program outside of your loop.",
          "2-3_Bee_Loops_4A_c": "If you can't spot the loops yet, try coding it out the long way first, then see what you can combine into a `repeat` loop at the end."
        },
        "grade3_Loops_8_authored_hint": {
          "2-3_Bee_Loops_2_a": "You should end up with four blocks inside your loop."
        },
        "grade3_Loops_9_authored_hint": {
          "2-3_Bee_Loops_3_a": "You should have 6 blocks inside your loop."
        },
        "grade3_RunningFarm_1_authored_hint": {
          "grade3_RunningFarm_1_a": "You will need to look for corn 5 times, using a repeat loop.",
          "grade3_RunningFarm_1_b": "Make sure to use an `if at corn` block or you might try to pick something that's not there!"
        },
        "grade3_RunningFarm_10_authored_hint": {
          "grade3_RunningFarm_10_a": "This puzzle uses almost the exact same code as the last level, except you only need to repeat 4 times."
        },
        "grade3_RunningFarm_11a_authored_hint": {
          "grade3_RunningFarm_11a_a": "You shouldn't need the `while path ahead` loop this time."
        },
        "grade3_RunningFarm_2_authored_hint": {
          "grade3_RunningFarm_2_a": "The best way to do this is to nest `if` statements by placing one inside of the other.  ",
          "grade3_RunningFarm_2_b": "For this puzzle, you should have one `if/else` statement and one plain `if` statement."
        },
        "grade3_RunningFarm_3_authored_hint": {
          "grade3_RunningFarm_3_a": "To get all of the items, try nesting `if` statements three deep.\n\nThis means you should put one `if` statement inside of another, then put a third `if` statement inside the second one.",
          "grade3_RunningFarm_3_b": "For this puzzle, you should have two `if/else` statements and one plain `if` statement."
        },
        "grade3_RunningFarm_4_authored_hint": {
          "grade3_RunningFarm_4_a": "No one knows how many heads of lettuce will grow from each sprout.\n\nUse a `while there is lettuce` loop to keep picking until each piece has been gathered."
        },
        "grade3_RunningFarm_5_authored_hint": {
          "grade3_RunningFarm_5_a": "You will need to check for each type of crop that the farmer can pick.  Try using two `if/else` statements and one  `if` block."
        },
        "grade3_RunningFarm_6_authored_hint": {
          "grade3_RunningFarm_6_a": "Use a `while path ahead` loop to move the farmer down each piece of the spiral.",
          "grade3_RunningFarm_6_b": "You only need to check for corn during most of the harvest.  Just pick one pumpkin at the very end of your program."
        },
        "grade3_RunningFarm_7_authored_hint": {
          "grade3_RunningFarm_7_a": "Notice that the easiest path to get to all of the crops is still a spiral.\n\n![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)",
          "grade3_RunningFarm_7_b": "Try using `when path ahead` to keep the farmer moving the right number of steps.",
          "grade3_RunningFarm_7_c": "Use nested `if` statements and `while there is` loops to check each space for corn and lettuce, then pick only a single pumpkin at the end. "
        },
        "grade3_bee_Conditionals_new4_authored_hint": {
          "grade3_bee_Conditionals_new4_a": "Don't forget that you can use loops for shorter code!"
        },
        "grade3_bee_conditionals_new1a_authored_hint": {
          "grade3_bee_conditionals_new1a_a": "Be sure to use an `if` statement to check each space to see if it has a flower or nothing."
        },
        "grade3_bee_conditionals_new2a_authored_hint": {
          "grade3_bee_conditionals_new2a_a": "You can still treat every space as if there is a cloud over it, even though you can see the whole path.",
          "grade3_bee_conditionals_new2a_b": "Use an `if` statement inside your loop to check each space. "
        },
        "grade3_bee_conditionals_new3a_authored_hint": {
          "grade3_bee_conditionals_new3a_a": "In this puzzle, you know that each square has either a flower or a honeycomb.  That means you can repeat your `if/else` conditional at each square."
        },
        "grade3_bee_conditionals_quantum1_authored_hint": {
          "grade3_bee_conditionals_quantum1_a": "You will need to use an `if` block to check to see if there is a flower beneath the cloud before you try to get nectar."
        },
        "grade3_bee_conditionals_quantum2_authored_hint": {
          "grade3_bee_conditionals_quantum2_a": "Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement."
        },
        "grade3_bee_conditionals_quantum3_authored_hint": {
          "grade3_bee_conditionals_quantum3": "Make sure to use an `if` statement to check for honeycomb beneath each cloud."
        },
        "grade3_bee_conditionals_quantum4_authored_hint": {
          "remember_quantum": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve the challenge."
        },
        "grade3_bee_conditionals_quantum5_authored_hint": {
          "remember_quantum": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if` or `if/else`) to solve the challenge.",
          "grade3_bee_conditionals_quantum5_a": "This puzzle is tricky, because you can't check blank squares, nectar *and* honey with a single conditional."
        },
        "grade3_maze_loops1_authored_hint": {
          "grade3_maze_loops1_a": "Try using the \"Step\" button to find errors."
        },
        "grade3_maze_loops2_authored_hint": {
          "grade3_maze_loops2_a": "Try using this path through the maze.\n\n![](https://images.code.org/6a8b4b97a8eef813d8a827b0b7b2d36b-image-1480446509692.05.22.png)",
          "grade3_maze_loops2_b": "If the pattern is hard to see, try coding it all out first and see what things repeat over and over before you put the loops in.",
          "grade3_maze_loops2_c": "Try using one `repeat` loop inside of another to cut down on the amount of code you need."
        },
        "grade3_maze_loops2a_authored_hint": {
          "grade3_maze_loops2a_a": "To solve this puzzle, you will need to \"nest\" one `repeat` loop inside of another `repeat` loop."
        },
        "grade3_maze_loops3_authored_hint": {
          "2-3_Maze_Loops_19_a": "If you are stuck, try writing out the code out on paper without loops first and look for patterns.",
          "2-3_Maze_Loops_19_b": "Nesting `repeat` loops can help decrease the number of blocks used.",
          "2-3_Maze_Loops_19_c": "It will take two sets of nested `repeat` loops to solve this puzzle."
        },
        "grade3_maze_loops4_authored_hint": {
          "2-3_Maze_Loops_20_a": "Look for a stair-step pattern in this maze to find where a nested loop can be used."
        },
        "grade3_maze_loops5_authored_hint": {
          "2-3_Maze_Loops_21_a": "If you are having trouble finding the stair-step pattern, try covering the blocked paths with your finger."
        },
        "grade3_robotFarmer_ConditionalsIntro_5_authored_hint": {
          "grade3_robotFarmer_ConditionalsIntro_5a": "Try nesting a `while` loop inside of a `repeat` loop."
        },
        "grade3_robotFarmer_ConditionalsIntro_7_authored_hint": {
          "grade3_robotFarmer_ConditionalsIntro_7_a": "Make sure you're using the `while` loop to figure out how many times to fill each hole.",
          "grade3_robotFarmer_ConditionalsIntro_7_b": "Notice that the farmer needs to move forward and down several times in a stair-step pattern."
        },
        "grade3_robotFarmer_ConditionalsIntro_8_authored_hint": {
          "grade3_robotFarmer_ConditionalsIntro_8_a": "The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path."
        },
        "grade3_robotFarmer_ConditionalsIntro_9_authored_hint": {
          "grade3_robotFarmer_ConditionalsIntro_9_a": "You are going to need to use more than one `while` loop.",
          "grade3_robotFarmer_ConditionalsIntro_9_b": "Every hole is at the end of a path, so use `while path ahead` before using `while there is a hole`.",
          "grade3_robotFarmer_ConditionalsIntro_9_c": "Notice that you need to repeat the `while path ahead`, `while there is a hole` code six times."
        },
        "grade4_arist_nested_loop_polygons1_authored_hint": {
          "4-5_Nested_Loops_7_a": "This design will loop 10 times over 360 degrees.\n\n**360 / 10 = ?**"
        },
        "grade4_arist_nested_loop_polygons2_authored_hint": {
          "4-5_Nested_Loops_8_a": "You will be looping this shape 6 times over 360 degrees.\n\n**360 / 6 = ?**"
        },
        "grade4_arist_nested_loop_triangles3_authored_hint": {
          "4-5_Nested_Loops_6_a": "Don't forget to make a turn after your inner loop.\n\nYou'll be looping 6 triangles over 360 degrees.\n\n**360 / 6 = ?**"
        },
        "grade4_arist_nested_loop_triangles6_authored_hint": {
          "4-5_Nested_Loops_12_a": "**360 / 36 = ?**"
        },
        "grade4_artist_functions1_authored_hint": {
          "2-3_Artist_Functions_1_a": "The squares each have 100 pixel sides, that means that you will have to move forward 175 pixels before drawing your second square.",
          "2-3_Artist_Functions_1_b": "It is okay to draw overlapping lines to make your glasses."
        },
        "grade4_artist_functions2_authored_hint": {
          "2-3_Artist_Functions_2_a": "Your program should:\n- Use function\n- Move forward 100 + 75 pixels\n- Use function"
        },
        "grade4_artist_functions2a_authored_hint": {
          "grade4_artist_functions2a_a": "To get around using multiple `move forward` blocks, create a `draw triangle` function and call that multiple times."
        },
        "grade4_artist_functions3a_authored_hint": {
          "grade4_artist_functions2a_a": "To get around using multiple `move forward` blocks, create a `draw triangle` function and call that multiple times."
        },
        "grade4_artist_functions3b_authored_hint": {
          "grade4_artist_functions2a_a": "To get around using multiple `move forward` blocks, create a `draw hexagon` function and call that multiple times."
        },
        "grade4_artist_functionsChallenge0_authored_hint": {
          "grade4_artist_functionsChallenge0_a": "Start by making a function for a square, then try making a function for a line of squares.\n\nHow would you use the `draw a line of squares` function to make this image?",
          "grade4_artist_functionsChallenge0_b": "After your first line of squares, you need to move the artist down and back before you start your second line of squares.",
          "grade4_artist_functionsChallenge0_c": "You should move the artist back a different number of pixels for even lines than for odd ones."
        },
        "grade4_artist_functions_challenge_authored_hint": {
          "Course_4_SCF_1_a": "Each hexagon has 40 pixel sides.",
          "Course_4_SCF_1_b": "There is a 120 pixel jump between each hexagon in each horizontal line.",
          "Course_4_SCF_1_c": "Before you draw the second row of hexagons, you need to turn right by 60 degrees and jump forward 40 pixels.  \n\nOnce you're in the correct vertical location, you have to turn your artist back again and jump backward 320 pixels.",
          "Course_4_SCF_1_d": "Before you draw the third row of hexagons, you need to turn right by 60 degrees and jump forward 40 pixels.  \n\nOnce you're in the correct vertical location, you have to turn your artist back again and jump backward 440 pixels (120 pixels farther than your `shift down/forward` function. ",
          "Course_4_SCF_1_e": "**Solution:**\n\n![Solution Blocks](https://images.code.org/d64a0e22c1db1d98c35b243bca6460ab-image-1469727090121.png)"
        },
        "grade4_artist_functions_challenge2_authored_hint": {
          "Course_4_SCF_1_a": "Each hexagon has 40 pixel sides.",
          "Course_4_SCF_1_b": "There is a 120 pixel jump between each hexagon in each horizontal line.",
          "Course_4_SCF_1_c": "Before you draw the second row of hexagons, you need to turn right by 60 degrees and jump forward 40 pixels.  \n\nOnce you're in the correct vertical location, you have to turn your artist back again and jump backward 320 pixels.",
          "Course_4_SCF_1_d": "Before you draw the third row of hexagons, you need to turn right by 60 degrees and jump forward 40 pixels.  \n\nOnce you're in the correct vertical location, you have to turn your artist back again and jump backward 440 pixels (120 pixels farther than your `shift down/forward` function. ",
          "Course_4_SCF_1_e": "**Solution:**\n\n![Solution Blocks](https://images.code.org/d64a0e22c1db1d98c35b243bca6460ab-image-1469727090121.png)"
        },
        "grade4_artist_functions_stars0_authored_hint": {
          "grade4_artist_functions_stars0_a": "To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.\n\nIf you can't remember what the starter code was, click \"start over\" in the upper right corner of the workspace."
        },
        "grade4_artist_functions_stars1_authored_hint": {
          "grade4_artist_functions_stars1_a": "Try using a function!"
        },
        "grade4_artist_functions_stars2_authored_hint": {
          "grade4_artist_functions_stars2_a": "Don't give up!  Remember what you have been learning.",
          "grade4_artist_functions_stars2_b": "Functions make it easy to call saved code at any time, not just from inside a loop!"
        },
        "grade4_artist_functions_stars3_authored_hint": {
          "hint1": "Don't give up!"
        },
        "grade4_artist_functions_windows0_authored_hint": {
          "grade4_artist_functions_windows0_a": "Focus only on making one window for now.  We'll create a function for it in the next puzzle.",
          "grade4_artist_functions_windows0_b": "Try using nested loops, where the inner loop makes the square and the outer loop rotates the square four times."
        },
        "grade4_artist_functions_windows2_authored_hint": {
          "grade4_artist_functions_windows2_a": "Try creating your function first then adding in windows one at a time.",
          "grade4_artist_functions_windows2_b": "You shouldn't need to add any extra repeat loops.  Just jump the artist 100 pixels forward for each top window, and 150 pixels down to get the bottom windows."
        },
        "grade4_artist_nestedLoops_challenge2_authored_hint": {
          "Course_4_Artist_11_a": "The half-hexagon has a **length of 30** and turns right by **60 degrees**.  ",
          "Course_4_Artist_11_b": "The 2/3 triangle has a **length of 80** and turns right by **120 degrees**. "
        },
        "grade4_artist_nested_loop_polygons1_authored_hint": {
          "4-5_Nested_Loops_7_a": "This design will loop 10 times over 360 degrees.\n\n**360 / 10 = ?**"
        },
        "grade4_artist_nested_loop_polygons2_authored_hint": {
          "4-5_Nested_Loops_8_a": "You will be looping this shape 6 times over 360 degrees.\n\n**360 / 6 = ?**"
        },
        "grade4_artist_nested_loop_triangles3_authored_hint": {
          "4-5_Nested_Loops_6_a": "Don't forget to make a turn after your inner loop.\n\nYou'll be looping 6 triangles over 360 degrees.\n\n**6 x ? = 360**"
        },
        "grade4_artist_nested_loop_triangles6_authored_hint": {
          "4-5_Nested_Loops_12_a": "**360 / 36 = ?**"
        },
        "grade4_bee_conditionals_new1a_authored_hint": {
          "grade4_bee_conditionals_new1a_a": "An `if` block will help you out in this puzzle."
        },
        "grade4_bee_conditionals_new2_authored_hint": {
          "grade4_bee_conditionals_new2_a": "The flowers follow a rectangular path.  You can trace that rectangle using `while path ahead` even with a different number of squares per side. ",
          "grade4_bee_conditionals_new2_b": "You can check every square for a flower using the `if` block, even if you already know there's not one there."
        },
        "grade4_bee_conditionals_new3b_authored_hint": {
          "grade4_bee_conditionals_new3b_a": "An `if/else` statement could really help you out here."
        },
        "grade4_bee_conditionals_quantum4_authored_hint": {
          "remember_quantum": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if` or `if/else`) to solve the challenge."
        },
        "grade4_bee_conditionals_quantum5_authored_hint": {
          "remember_quantum": "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if` or `if/else`) to solve the challenge."
        },
        "grade4_bee_functions1_authored_hint": {
          "grade4_bee_functions1_a": "There is more than one right answer to this puzzle."
        },
        "grade4_bee_functions10_authored_hint": {
          "grade4_bee_functions10_a": "You can use the exact same function for this puzzle as you did in the last puzzle.  All you need to do is create a function that collects all of the nectar when you get to each flower."
        },
        "grade4_bee_functions2_authored_hint": {
          "grade4_bee_functions2_a": "The function has been written for you, but you will need to call it at each flower."
        },
        "grade4_bee_functions3_authored_hint": {
          "grade4_bee_functions3_a": "Your function for this puzzle only needs to collect nectar, it shouldn't have any `move forward` or `turn` blocks in it. "
        },
        "grade4_bee_functions4_authored_hint": {
          "grade4_bee_functions4_a": "Your function will travel down the side paths and return the bee back to the main road.  You don't need to add that part to your program."
        },
        "grade4_bee_functions6_authored_hint": {
          "grade4_bee_functions6_a": "Edit the function so that it solves the puzzle without having to change the main program.",
          "grade4_bee_functions6_b": "Your function should make the bee: \n- turn\n- move forward\n- collect all of the nectar\n- turn around\n- move back to the main path\n- turn back to the direction that the bee started from"
        },
        "grade4_bee_functions7_authored_hint": {
          "2-3_Bee_Functions_8_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!\n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        },
        "grade4_bee_functions8_authored_hint": {
          "2-3_Bee_Functions_8_a": "If the puzzle seems challenging, try building your function a little at a time.  \n\nAdd some blocks, then try it out. Add more, then try again.  Soon, you'll get there!",
          "2-3_Bee_Functions_8_b": "Remember to build your code inside of the green function block.\n\n![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)",
          "2-3_Bee_Functions_8_c": "This function should turn the bee to head him down the path, collect the nectar, make the honey, then turn the bee around and bring him back."
        },
        "grade4_bee_functions9_authored_hint": {
          "grade4_bee_functions9_a": "Your function will only need to collect nectar... but this time, you will need to use a `while` loop instead of a `repeat` loop.",
          "grade4_bee_functions9_b": "Use `while nectar > 0` to make sure you get all of the nectar."
        },
        "grade4_bee_nestedLoops1_authored_hint": {
          "grade4_bee_nestedLoops1_a": "If you don't understand how to use nested loops here, try writing out the instructions step by step on a piece of paper.  Circle the patterns that you see."
        },
        "grade4_bee_nestedLoops2_authored_hint": {
          "grade4_bee_nestedLoops2_a": "You will need to repeat `get nectar` inside of another `repeat` that also has the `move forward` block inside of it.",
          "grade4_bee_nestedLoops2_b": "You will need to use all three of the available `repeat` blocks to solve this puzzle."
        },
        "grade4_bee_nestedLoops2a_authored_hint": {
          "grade4_bee_nestedLoops2a_a": "Try using nested `repeat` loops to solve this puzzle."
        },
        "grade4_bee_nestedLoops4_authored_hint": {
          "grade4_bee_nestedLoops4_a": "Try building your code line by line and see if you can spot the places where a repeat will make the code shorter!",
          "grade4_bee_nestedLoops4_b": "You will need a nested loop to move forward and get nectar, but only a single loop to collect honey at the end.\n\nAltogether, you should be using 3 loops."
        },
        "grade4_bee_nestedLoops5_authored_hint": {
          "grade4_bee_nestedLoops5_a": "You will need 4 repeat blocks!"
        },
        "grade4_review_artist1_authored_hint": {
          "2-3_Artist_1_new_a": "If you use the block to have me `move forward by 100 pixels`, I will draw a line automatically.",
          "2-3_Artist_1_new_b": "Having trouble turning the corner? Use the `turn right 90 degrees` block."
        },
        "grade4_review_artist2_authored_hint": {
          "2-3_Artist_6_a": "To make those little angles, you have to turn *farther* each time than you did with the square.   ",
          "2-3_Artist_6_b": "Since I'm already facing to the right, it's easiest to start by moving forward, then make left turns to create the triangle.",
          "2-3_Artist_6_c": "Each side of the triangle is the same length as each side of the square...100 pixels!"
        },
        "grade4_review_bee1_authored_hint": {
          "2-3_Bee_Loops_3B_a": "You will need two different `repeat` loops, one after the other."
        },
        "grade4_review_bee2_authored_hint": {
          "2-3_Bee_Loops_3_a": "You should have 6 blocks inside your loop."
        },
        "grade4_review_bee3_authored_hint": {
          "2-3_Bee_Loops_4_a": "You should end up with five blocks inside your loop."
        },
        "grade5_artist_binary10_authored_hint": {
          "Course_4_Artist_Binary_Free_Play_2b_a": "This code uses two `for loops`. One counts up from 1 to 8, the other counts down from 8 to 1.",
          "Course_4_Artist_Binary_Free_Play_2b_b": "Each `for loop` has three repeats.  The first draws the leftmost set of 1s, the second draws the 0s in the middle and the third draws the 1s on the right.",
          "Course_4_Artist_Binary_Free_Play_2b_c": "In each repeat you need `counter` for 1s and `16-(2 x counter)` for 0s.",
          "Course_4_Artist_Binary_Free_Play_2b_d": "**Solution:**\n![solution](https://images.code.org/866a92e042a546de3afcf462a8b5c695-image-1444438735003.58.28.png)"
        },
        "grade5_artist_for_loops1_authored_hint": {
          "grade5_artist_for_loops1_a": "If you use this `for` loop, it will run just like a `repeat 3 times` loop.\n\n![](https://images.code.org/585d2e24f3021ac2561aec6e96dde430-image-1475906135993.54.11.png)"
        },
        "grade5_artist_for_loops10_authored_hint": {
          "Course_4_Artist_For_Loops_Challenge_a": "The largest polygon has 19 sides.",
          "Course_4_Artist_For_Loops_Challenge_b": "Each polygon is incomplete, with one side fewer than it should have."
        },
        "grade5_artist_for_loops1b_authored_hint": {
          "grade5_artist_for_loops1b_a": "Can you draw something like this:\n\n![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)"
        },
        "grade5_artist_for_loops2_authored_hint": {
          "grade5_artist_for_loops2_a": "Use `counter` for the length of your triangles inside your `repeat` loop.\n\n![](https://images.code.org/5e9465321a0b7a4d791848a79f3e6715-image-1475908305872.31.26.png)"
        },
        "grade5_artist_for_loops3_authored_hint": {
          "Course_4_Artist_For_Loops_3_a": "To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.\n\n![](https://images.code.org/15e87fc7fe408cbf1b63e0e8e69b7ffe-image-1475908502078.31.26.png)"
        },
        "grade5_artist_for_loops4_authored_hint": {
          "Course_4_Artist_For_Loops_4_a": "**What is the smallest number you will need?  \nWhat is the largest number?  \nHow big is the increase each time?**\n\nThose are the questions you need to ask to fill in the blanks of the `for` loop."
        },
        "grade5_artist_for_loops5_authored_hint": {
          "grade5_artist_for_loops5_a": "You don't need the traditional repeat loop when making this spiral!"
        },
        "grade5_artist_for_loops7_authored_hint": {
          "grade5_artist_for_loops7_a": "The pen is thinner in this puzzle. You will need to set it to `1` before you start.",
          "grade5_artist_for_loops7_b": "Notice that this spiral turns right instead of left!"
        },
        "grade5_artist_for_loops8_authored_hint": {
          "Course_4_Artist_For_Loops_11_a": "The turn angle will change with each shape!  \n\nUse the math block to enter 360 divided by the number of sides the shape has to get the angle right. "
        },
        "grade5_artist_for_loops9_authored_hint": {
          "Course_4_Artist_For_Loops_11a_a": "360 divided by the number of sides a shape has is the number of degrees you'll need to turn. ",
          "Course_4_Artist_For_Loops_11a_b": "Each time, you will need to move forward by 10 times the length of the current number of sides. "
        },
        "grade5_artist_for_loopsfreeplay11_authored_hint": {
          "Course_4_Artist_For_Loops_inspire_a": "The foundation of this code is the same as the solution to the previous challenge puzzle...with a couple of changes.",
          "Course_4_Artist_For_Loops_inspire_b": "Try a `for` loop that goes from 3 to 10 with an increment of 1.",
          "Course_4_Artist_For_Loops_inspire_c": "There are two iterations of the same repeat loop inside the `for` loop, but the second repeat turns the opposite direction.",
          "Course_4_Artist_For_Loops_inspire_d": "**Solution:**  ![Solution](https://images.code.org/d619892fc17ff491c201d86bb917e523-image-1441005190828.12.30.png) "
        },
        "grade5_artist_for_loopsfreeplay12_authored_hint": {
          "grade5_artist_for_loopsfreeplay12_a": "The image in the drawing was made using a counter for the `set alpha` and `counter` / 10 as a brush size.",
          "grade5_artist_for_loopsfreeplay12_b": "The image in the drawing uses a turn of 61 degrees.",
          "grade5_artist_for_loopsfreeplay12_c": "Want to know how the sample image was done?\n\n![](https://images.code.org/fdc5d6c15b357ba9763ac9ea914967a9-image-1475911612774.23.51.png)"
        },
        "grade5_artist_functionparameters10_authored_hint": {
          "brush_width": "We set the brush width to 1, then the color to blue before we did anything else.",
          "double_loop": "Try putting a `for loop` inside of a `repeat` loop.",
          "specifics": "The `for loop` runs from three to seventeen for each of the six \"petals\" before moving on to create the next, drawing shapes with only an odd number of sides.\n        \nThe `set alpha` block uses division to fade the color as the counter gets higher.",
          "after": "When you're done with each \"petal\", be sure to `move forward` 20 pixels before you make a 60 degree rotation.",
          "solution": "**Solution**\n\n![](https://images.code.org/7e9f4be39d45726d537fe8e6e9147986-image-1456445254361.png)"
        },
        "grade5_artist_functionparameters8_authored_hint": {
          "NEW_Course_4_Artist_Params_13_a": "The length of sides for each shape is 7 times the number of sides it has."
        },
        "grade5_artist_functionparameters9_authored_hint": {
          "NEW_Course_4_Artist_Params_14_a": "It's okay to run the program a few times to figure out how the function works with different parameters.",
          "grade5_artist_functionparameters9_b": "You don't need to add any `move` or `turn` blocks to finish this code."
        },
        "grade5_artist_functionparameters9a_authored_hint": {
          "grade5_artist_functionparameters9a_a": "Did the code get so scrambled up that it's no longer recognizable?  Try clicking the \"Start over\" button in the upper righthand corner. ",
          "grade5_artist_functionparameters9a_b": "Your new `min` variable should go in the first slot in your `for` loop, inside the function."
        },
        "grade5_artist_functionparameters9b_authored_hint": {
          "grade5_artist_functionparameters9b_a": "If your function is correct, you shouldn't need to change it for this puzzle.",
          "grade5_artist_functionparameters9b_b": "The only thing you should need to do between function calls is change the color of the line."
        },
        "grade5_artist_functionparameters_6_authored_hint": {
          "grade5_artist_functionparameters_6_a": "Use a `for` loop to get the code as smooth as you can.",
          "grade5_artist_functionparameters_6_b": "Remember to **add** a parameter.  Don't remove the one that is already there!"
        },
        "grade5_artist_parameters_squares1a_authored_hint": {
          "grade5_artist_parameters_squares1a_a": "Remember, you need to turn 90 degrees to draw a square.",
          "grade5_artist_parameters_squares1a_b": "You only need to repeat as many times as the number of sides in a square."
        },
        "grade5_artist_parameters_squares2_authored_hint": {
          "grade5_artist_parameters_squares2_a": "This gets easier if you put it all in a `for` loop.",
          "grade5_artist_parameters_squares2_b": "Be sure to turn 90 degrees between each square!\n\n![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)"
        },
        "grade5_artist_parameters_squares2a_authored_hint": {
          "grade5_artist_parameters_squares2a_a": "You need to click the \"edit\" button to get into the function.  Once you're there, add a parameter called `length` and use it inside your `move forward` block!",
          "grade5_artist_parameters_squares2a_b": "When calling your function, use a `for loop` for the best possible code!"
        },
        "grade5_artist_parameters_stars1_authored_hint": {
          "hint1": "Don't give up!"
        },
        "grade5_artist_variables_freeplay10_authored_hint": {
          "Course_4_Artist_Vars_8_a": "If you divide your starting length by the number of sides, the length of each side will get shorter as the number of sides gets higher."
        },
        "grade5_artist_variables_freeplay15_authored_hint": {
          "Course_4_Artist_Inspire_a": "After you complete one square, try jumping forward half of it's length before turning and making another.",
          "Course_4_Artist_Inspire_b": "Each square and jump is repeated four times (using a left turn inbetween) to make a full pinwheel-like unit.",
          "Course_4_Artist_Inspire_c": "Each pinwheel is also repeated four times, with a right turn of **360/sides**.",
          "Course_4_Artist_Inspire_d": "**Solution:**\n![Blocks for solution](https://images.code.org/1865aaf1b4a8ba84a5e8a7408401092d-image-1440060930335.43.39.png)"
        },
        "grade5_artist_variables_octagons13_authored_hint": {
          "Course_4_Artist_Vars_13_a": "You need two repeat loops (one inside the other) both repeating `sides` times.",
          "Course_4_Artist_Vars_13_b": "The inner repeat loop draws an octagon (turning to the left).   \n\nAfterwards, you need to move forward and turn right only in the outer loop.",
          "Course_4_Artist_Vars_13_c": "To adjust the shape to stay the same size when the number of sides change, use the math block to divide the length in pixels by the number of sides."
        },
        "grade5_artist_variables_square7_authored_hint": {
          "Course_4_Artist_Vars_6_a": "To draw a regular polygon, turn **360/sides** each time."
        },
        "grade5_artist_variables_triangles1_authored_hint": {
          "grade5_artist_variables_triangles1_a": "To make an internal angle of 60 degrees in this triangle, remember to turn the artist 120 degrees.",
          "grade5_artist_variables_triangles1_b": "Use the `repeat` loop to make your code shorter.",
          "grade5_artist_variables_triangles1_c": "Inside your loop, you will want to move forward 50 pixels, then turn left 120 degrees."
        },
        "grade5_artist_variables_triangles1_2018_authored_hint": {
          "grade5_artist_variables_triangles1_a": "To make an internal angle of 60 degrees in this triangle, remember to turn the artist 120 degrees.",
          "grade5_artist_variables_triangles1_b": "Use the `repeat` loop to make your code shorter.",
          "grade5_artist_variables_triangles1_c": "Inside your loop, you will want to move forward 50 pixels, then turn left 120 degrees."
        },
        "grade5_bee_for_loops10_authored_hint": {
          "grade5_bee_for_loops10_a": "How much less is 12 than 15?  \nHow much less is 9 than 12?\n\nDo you see a pattern?"
        },
        "grade5_bee_for_loops11_authored_hint": {
          "NEW_Course_4_Bee_For_Loops_10a_a": "Can you find a pattern between the number of steps you need to take and the number of nectars to gather?",
          "NEW_Course_4_Bee_For_Loops_10a_b": "You'll need to have 2 repeats, one will use a math block."
        },
        "grade5_bee_for_loops3_authored_hint": {
          "grade5_bee_for_loops3_a": "Use the `counter` variable inside the `repeat` loop where nectar is gathered to solve this puzzle. ",
          "grade5_bee_for_loops3_b": "Your `for` loop will need to count from 1 to 5 with an increment of 1."
        },
        "grade5_bee_for_loops4_authored_hint": {
          "grade5_bee_for_loops4_a": "Use a `for` loop that goes from 1 to 7 with an increment of 1 to solve this puzzle.",
          "grade5_bee_for_loops4_b": "Make sure to use the `counter` variable inside your nested `repeat` loop to get enough nectar!"
        },
        "grade5_bee_for_loops5_authored_hint": {
          "grade5_bee_for_loops5_a": "This time, your `move forward` block and your `get nectar` block will need to be in separate `repeat` loops."
        },
        "grade5_bee_for_loops6_authored_hint": {
          "grade5_bee_for_loops6_a": "Don't forget to use a `counter` variable inside your `repeat` loop."
        },
        "grade5_bee_for_loops7_authored_hint": {
          "grade5_bee_for_loops7_a": "Your `for` loop will need to count from 1 to 7 by 2."
        },
        "grade5_bee_for_loops8_authored_hint": {
          "NEW_Course_4_Bee_For_Loops_8_a": "If your loop is counting up, the increment is added to your counter variable each time through. \n\nWhat do you need to add to each number to get the next amount of nectar?"
        },
        "grade5_bee_for_loops9_authored_hint": {
          "NEW_Course_4_Bee_For_Loops_7_a": "Try doing some math with the counter variable.\n\nWhat do you have to do to the counter at each flower to equal the amount of nectar you need to collect?",
          "NEW_Course_4_Bee_For_Loops_7_b": "Remember: If your loop is counting up, the increment is added to your `counter` variable each time through."
        },
        "grade5_bee_parameters_new1_authored_hint": {
          "grade5_bee_parameters_new1_a": "Use `if` statements to make sure you're only getting nectar from a flower."
        },
        "grade5_bee_parameters_new2_authored_hint": {
          "grade5_bee_parameters_new2_a": "To turn this into a function, simply drag the code into the existing function block.  \n\n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)",
          "grade5_bee_parameters_new2_b": "Don't forget to connect the `rowOfNectar` block to `when run` to call the function that you just built."
        },
        "grade5_bee_parameters_new3_authored_hint": {
          "grade5_bee_parameters_new3_a": "Your function will run no matter which direction you're facing."
        },
        "grade5_bee_parameters_new4_authored_hint": {
          "grade5_bee_parameters_new4_a": "You will need to add a parameter and use the resulting variable in your loop."
        },
        "grade5_bee_parameters_new5_authored_hint": {
          "grade5_bee_parameters_new5_a": "Count the number of spaces you need to check in each stretch and use those numbers as your parameters to the function call."
        },
        "grade5_bee_parameters_new6_authored_hint": {
          "grade5_bee_parameters_new6_a": "Which block automatically increments a variable that you could use as a parameter?"
        },
        "grade5_bee_parameters_new7_authored_hint": {
          "grade5_bee_parameters_new7_a": "You don't need a second parameter for this function, only a second `if` statement."
        },
        "grade5_bee_parameters_new8a_authored_hint": {
          "grade5_bee_parameters_new8a_a": "This spiral can be simplified with a `for` loop."
        },
        "grade5_bee_parameters_new9a_authored_hint": {
          "grade5_bee_parameters_new9a_a": "A `for` loop can help you with this stair step pattern, too!",
          "grade5_bee_parameters_new9a_b": "For each stair, you'll need to call the function once, turn right, call the function again, then turn left."
        },
        "grade5_playlab_variables2_authored_hint": {
          "Course_4_Play_Lab_Vars_2_a": "Make sure to set the number for `dog_speed` to something larger than `cat_speed`."
        },
        "gradeK_sequence_4_authored_hint": {
          "gradeK_sequence_4_a": "Try writing down the steps on paper to find a solution!"
        },
        "gradek_adventurer_loops3_authored_hint": {
          "gradek_adventurer_loops3_a": "To change how far the adventurer goes, change the number of times that the loop runs.",
          "gradek_adventurer_loops3_b": "Don't forget that the adventurer needs to walk down and collect gold after she finishes the `repeat` loop!"
        },
        "gradek_adventurer_loops4_authored_hint": {
          "gradek_adventurer_loops4_a": "If you can't figure out the answer right away, try using a piece of paper to figure out what arrows you will need and look for a pattern."
        },
        "gradek_adventurer_loops4a_authored_hint": {
          "gradek_adventurer_loops4a_a": "Can't figure out what's wrong? Try running the code to see what happens."
        },
        "gradek_adventurer_loops5_authored_hint": {
          "gradek_adventurer_loops5_a": "If you can't figure out what comes next, try running the code to see where Laurel ends up."
        },
        "gradek_adventurer_loops6_authored_hint": {
          "gradek_adventurer_loops6_a": "If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper and look for a pattern."
        },
        "gradek_adventurer_loops7_challenge_authored_hint": {
          "gradek_adventurer_loops7_challenge_a": "Does the code feel really long?  Try putting two of your `repeat` loops inside of another loop to make it much shorter!"
        },
        "gradek_adventurer_loops8_authored_hint": {
          "gradek_adventurer_loops8_a": "If you can't figure out where to put the loops, try writing the code out step-by-step and look for a pattern."
        },
        "gradek_adventurer_loops9_authored_hint": {
          "gradek_adventurer_loops9_a": "If you can't figure out where to put the loops, try writing your code step-by-step and look for patterns."
        },
        "gradek_artist_loops1_authored_hint": {
          "gradek_artist_loops1_a": "Can't figure out how to draw a line?  Start attaching blocks to the `when run` block to see what happens."
        },
        "gradek_artist_loops2_authored_hint": {
          "gradek_artist_loops2_a": "Is something not quite right?  Use the \"Step\" button to see where things go wrong."
        },
        "gradek_artist_loops3_authored_hint": {
          "artistLoopsK2_a": "If you want the loop to repeat more than 4 times, you can change the number at the top of the block."
        },
        "gradek_artist_loops4_authored_hint": {
          "artistLoopsK3_a": "Try using what you've learned about repeat blocks to complete this puzzle!"
        },
        "gradek_artist_loops5_authored_hint": {
          "gradek_artist_loops5_a": "Can't figure out how to make the hill?  Try playing with the blocks a bit to see what each one draws."
        },
        "gradek_artist_loops6_authored_hint": {
          "gradek_artist_loops6_a": "Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern."
        },
        "gradek_artist_loops7_authored_hint": {
          "gradek_artist_loops7_a": "Try running the code to see what has been written for you.",
          "gradek_artist_loops7_b": "How would you loop the code that has been given to you?",
          "gradek_artist_loops7_c": "What does the code do?  \nWhat is it supposed to do?  \nWhat does that tell you?"
        },
        "gradek_artist_loops8_authored_hint": {
          "gradek_artist_loops8_a": "You don't have to delete everything!  Some of the code is good. Use it to build the rest of the stairs. "
        },
        "gradek_artist_loops9_authored_hint": {
          "artistLoopsKA_a": "Use the jump block to move forward without drawing a line."
        },
        "gradek_artist_loopsA_authored_hint": {
          "artistLoopsKB_a": "There should be 2 blocks inside of your loop to solve this puzzle."
        },
        "gradek_playlab_events1a_authored_hint": {
          "gradek_playlab_events1a_a": "Attach the `move up` block to the `when click` event so that the cat moves up when the \"up\" button is pressed."
        },
        "gradek_playlab_events1c_authored_hint": {
          "gradek_playlab_events1c_a": "Here is the block you should connect to the `when run` block: \n\n![](https://images.code.org/ae72d1270ad210cd00fae7e0dfb3549a-image-1478144412134.png)"
        },
        "gradek_playlab_events2c_authored_hint": {
          "gradek_playlab_events2c_a": "drag this block out ![](https://images.code.org/b3d6215901969328333d6393f8101c5b-image-1478142333199.png) and connect it to ![](https://images.code.org/4f2130b2a3053695414a02c3d39ef864-image-1478143461271.png)"
        },
        "gradek_playlab_events3c_authored_hint": {
          "gradek_playlab_events3c_a": "Here is the event block that you will need to get Jorge to move right:\n\n![](https://images.code.org/cfc4b696b1ad5762ff40c1c8a17a194d-image-1478141370249.png)",
          "gradek_playlab_events3c_b": "Here is the block you should connect to the `when right` event:\n\n![](https://images.code.org/e5c559cc1deef643c8b997d17ecb78e3-image-1478141726783.png)"
        },
        "gradek_playlab_events4c_authored_hint": {
          "gradek_playlab_events4c_a": "Here are the event blocks that you will need to use to move Jorge up and down:\n\n![](https://images.code.org/cf9a6992f7b4619dfb592fb6905effbb-image-1478140906017.png)\nand \n![](https://images.code.org/bb2a117cef485e79119a63e5d027968e-image-1478140979742.png)"
        },
        "gradek_playlab_events5c_authored_hint": {
          "gradek_playlab_events5c_a": "Here is the event block that you would use to have Jorge do something when clicked:\n\n![](https://images.code.org/6e3a654378643fd0590307ec3a0e429c-image-1478140058859.png)",
          "gradek_playlab_events5c_b": "Here is the block you would use to change the background:\n\n![](https://images.code.org/3f6d7a642b37c3abffe7b0de062ea076-image-1478140261440.png)",
          "gradek_playlab_events5c_c": "Here is the block you would use to play a random sound:\n\n![](https://images.code.org/81a8ef4f64023039438199fef67bb56b-image-1478140125332.png)"
        },
        "harvester_Kahoot_authored_hint": {
          "courseE_farmer_functions1a_a": "Think through the `if/else` statements step by step. What should you do if you are standing at a corn plant?",
          "courseE_farmer_functions1a_b": "Use a `repeat until` block to get to the pumpkin!"
        },
        "harvey_tictactoe_authored_hint": {
          "harvey_tictactoe": "You can use `jump` blocks to move to other spaces."
        },
        "iceage_click_hello_authored_hint": {
          "iceage_click_hello_a": "Add one or more `actor 1 say` blocks to the `when clicked` event to complete this puzzle."
        },
        "iceage_click_hello_2018_authored_hint": {
          "iceage_click_hello_a": "Add one or more `actor 1 say` blocks to the `when clicked` event to complete this puzzle."
        },
        "iceage_free_play_authored_hint": {
          "iceage_free_play_a": "Can you make Sid and Manny have an Ice Crystal fight?  ",
          "iceage_free_play_b": "Make Granny chase Diego.  End the game as a win if she catches him.",
          "iceage_free_play_c": "Can you have Sid throw snowflakes at Diego and have Diego get bigger each time one hits?  End the game as a win if Diego gets hit 5 times."
        },
        "iceage_free_play_2018_authored_hint": {
          "iceage_free_play_a": "Can you make Sid and Manny have an Ice Crystal fight?  ",
          "iceage_free_play_b": "Make Granny chase Diego.  End the game as a win if she catches him.",
          "iceage_free_play_c": "Can you have Sid throw snowflakes at Diego and have Diego get bigger each time one hits?  End the game as a win if Diego gets hit 5 times."
        },
        "iceage_free_playcourseF_IceAge_11_authored_hint": {
          "iceage_free_play_a": "Can you make Sid and Manny have an Ice Crystal fight?  ",
          "iceage_free_play_b": "Make Granny chase Diego.  End the game as a win if she catches him.",
          "iceage_free_play_c": "Can you have Sid throw snowflakes at Diego and have Diego get bigger each time one hits?  End the game as a win if Diego gets hit 5 times."
        },
        "iceage_hello1_authored_hint": {
          "iceage_hello1_a": "You only need to add one block to solve this puzzle.  Drag the `say` block out from the toolbar and connect it to the `when run` event block that is already in the workspace. Next, type \"Hello!\" inside."
        },
        "iceage_hello1_2018_authored_hint": {
          "iceage_hello1_a": "You only need to add one block to solve this puzzle.  Drag the `say` block out from the toolbar and connect it to the `when run` event block that is already in the workspace. Next, type \"Hello!\" inside."
        },
        "iceage_hello2_authored_hint": {
          "iceage_hello2_a": "To solve this puzzle, you will need to have Sid say something using the `actor 1 say` block.  You will also need to have Manny say something with the `actor 2 say` block. "
        },
        "iceage_hello2_2018_authored_hint": {
          "iceage_hello2_a": "To solve this puzzle, you will need to have Sid say something using the `actor 1 say` block.  You will also need to have Manny say something with the `actor 2 say` block. "
        },
        "iceage_move_events_authored_hint": {
          "iceage_move_events_a": "Each of the `when ___ arrow` events will need to have a different `move actor 1` command connected to it to solve this puzzle. "
        },
        "iceage_move_events_2018_authored_hint": {
          "iceage_move_events_a": "Each of the `when ___ arrow` events will need to have a different `move actor 1` command connected to it to solve this puzzle. "
        },
        "iceage_move_to_actor_authored_hint": {
          "iceage_move_to_actor_a": "For this puzzle, you can either move Diego down by 200 pixels, or move Manny up by 200 pixels.",
          "iceage_move_to_actor_b": "Connect the `play ___ sound` block to the `when actor 1 touches actor 2` event to finish this challenge."
        },
        "iceage_move_to_actor_2018_authored_hint": {
          "iceage_move_to_actor_a": "For this puzzle, you can either move Diego down by 200 pixels, or move Manny up by 200 pixels.",
          "iceage_move_to_actor_b": "Connect the `play ___ sound` block to the `when actor 1 touches actor 2` event to finish this challenge."
        },
        "iceage_move_to_flag_authored_hint": {
          "iceage_hello3_a": "Use the `move actor 1 right by 200 pixels` block to solve this puzzle."
        },
        "iceage_move_to_flag_2018_authored_hint": {
          "iceage_hello3_a": "Use the `move actor 1 right by 200 pixels` block to solve this puzzle."
        },
        "iceage_repeat_authored_hint": {
          "iceage_repeat_a": "Use both the `move actor 1 left` and `move actor 1 right` blocks to solve this puzzle."
        },
        "iceage_repeat_2018_authored_hint": {
          "iceage_repeat_a": "Use both the `move actor 1 left` and `move actor 1 right` blocks to solve this puzzle."
        },
        "iceage_sound_and_points_authored_hint": {
          "iceage_sound_and_points_a": "You will need to add two blocks beneath the `when actor 1 touches actor 2` event."
        },
        "iceage_sound_and_points_2018_authored_hint": {
          "iceage_sound_and_points_a": "You will need to add two blocks beneath the `when actor 1 touches actor 2` event."
        },
        "iceage_throw_hearts_authored_hint": {
          "iceage_throw_hearts_a": "When do you want to throw hearts at granny?  When an arrow is pressed? When you click on Sid?  When you click on Granny?  The choice is yours!",
          "iceage_throw_hearts_b": "To get granny to be happy when she receives a heart, you will need to connect the `set actor 2 mood to happy` block beneath the `when actor 2 touches projectile` event."
        },
        "iceage_throw_hearts_2018_authored_hint": {
          "iceage_throw_hearts_a": "When do you want to throw hearts at granny?  When an arrow is pressed? When you click on Sid?  When you click on Granny?  The choice is yours!",
          "iceage_throw_hearts_b": "To get granny to be happy when she receives a heart, you will need to connect the `set actor 2 mood to happy` block beneath the `when actor 2 touches projectile` event."
        },
        "iceage_warn_ice_age_authored_hint": {
          "iceage_warn_ice_age_a": "You should only have to add two blocks to get this puzzle where it needs to be. ",
          "iceage_warn_ice_age_b": "Add both new blocks beneath the `when run` event to have them happen immediately after the program starts."
        },
        "iceage_warn_ice_age_2018_authored_hint": {
          "iceage_warn_ice_age_a": "You should only have to add two blocks to get this puzzle where it needs to be. ",
          "iceage_warn_ice_age_b": "Add both new blocks beneath the `when run` event to have them happen immediately after the program starts."
        },
        "level 'grade3_Loops_10_authored_hint": {
          "2-3_Bee_Loops_4_a": "You should end up with five blocks inside your loop."
        },
        "level 'grade3_Loops_11_authored_hint": {
          "2-3_Bee_Loops_5_a": "If you can't spot the blocks to put inside `repeat` right away, start by coding out each move and look for a pattern."
        },
        "level 'grade3_Loops_12_authored_hint": {
          "2-3_Bee_Loops_6_a": "If you can't tell what should go into the `repeat` loop, try dragging blocks out one by one and see if you can find a pattern.",
          "2-3_Bee_Loops_6_b": "There should be 6 blocks inside your `repeat` loop when you're done."
        },
        "level 'grade3_Loops_4_authored_hint": {
          "2-3_Bee_Loops_3B_a": "You will need two different `repeat` loops, one after the other."
        },
        "level 'grade3_Loops_5_authored_hint": {
          "2-3_Bee_Loops_7_a": "The first action will be a turn, rather than a move.",
          "2-3_Bee_Loops_7_b": "If you can't quite picture the loop from the beginning, try coding it out the long way, then look for a pattern.  "
        },
        "level 'grade3_Loops_6_authored_hint": {
          "2-3_Bee_Loops_4A_a": "The first action will be a turn, rather than a move.",
          "2-3_Bee_Loops_4A_b": "The last piece of the program can be finished by writing code at the end of your program outside of your loop.",
          "2-3_Bee_Loops_4A_c": "If you can't spot the loops yet, try coding it out the long way first, then see what you can combine into a `repeat` loop at the end."
        },
        "level 'grade3_Loops_8_authored_hint": {
          "2-3_Bee_Loops_2_a": "You should end up with four blocks inside your loop."
        },
        "level 'grade3_Loops_9_authored_hint": {
          "2-3_Bee_Loops_3_a": "You should have 6 blocks inside your loop."
        },
        "playLabDebugVideo1_authored_hint": {
          "courseA_playLab_events2_a": "Here is the block you should connect to the `when run` block: \n\n![](https://images.code.org/ae72d1270ad210cd00fae7e0dfb3549a-image-1478144412134.png)"
        },
        "sample3_authored_hint": {
          "sample3_a": "Try writing the code once and looping it seven times:\n\n![](https://images.code.org/2a116e75e31ee3a8a8683349c9460286-image-1464307689813.gif)"
        },
        "sample5_authored_hint": {
          "sample5_a": "Did you know that you can put as many blocks inside of a repeat loop as you want to?",
          "sample5_b": "The bee is looping these actions over and over again:\n- move forward\n- make honey\n- turn left\n- move forward\n- turn right"
        },
        "sample6_authored_hint": {
          "sample6_a": "Did you know that you can use more than one repeat loop in a puzzle?",
          "sample6_b": "Sometimes repeat loops have lots of blocks inside, and sometimes they might only have one!"
        }
      },
      "instructions": {
        "2-3 Artist 1 new_instruction": "Hi, I'm an artist. You can write code to make me draw almost anything. Use a few blocks to make me draw over the grey lines in the picture. (Each line is 100 pixels long)",
        "2-3 Artist 11_instruction": "Give the stop sign a border by making an octagon with 100 pixels sides. \n\n",
        "2-3 Artist 12_instruction": "Create a circle to finish the eyeball!\n\nIf the artist turns 1 degree with each loop, how many times do you need to repeat the code to draw a circle? 180? 360? 500?",
        "2-3 Artist 2 new_instruction": "This house has a half-finished wall. Each side is 100, but the half-finished wall is only 50. Complete the wall. ",
        "2-3 Artist 2_instruction": "This house has a half-finished wall. Each side is 100, but the half-finished wall is only 50. Complete the wall. ",
        "2-3 Artist 3.4_instruction": "The jump block moves the artist without drawing. Draw the dashed line using both the `jump forward` and `move forward` blocks. Each line is 50 pixels long.",
        "2-3 Artist 3_instruction": "This hat is 100 pixels high. Draw a hat that is 70 pixels less.",
        "2-3 Artist 3new_instruction": "The red hat is 100 pixels tall. Finish drawing a black hat that is 70 pixels shorter. \n(Note: The width of each hat is 50 pixels.)",
        "2-3 Artist 4_instruction": "Help me complete the house for this cat.",
        "2-3 Artist 5_instruction": "Replace this code with a \"repeat times\" block to draw the same house using only 3 blocks.",
        "2-3 Artist 6_instruction": "This house needs a roof! Draw the triangle.  Hint: all three sides are the same length.",
        "2-3 Artist 7_instruction": "Finish drawing the last set of windows on the school so that everyone in class can see outside. The sides of each square window pane are 25 pixels long. ",
        "2-3 Artist 8_instruction": "Complete the rooms for each of the animals by splitting the rectangle into 2 equal-sized squares. The rectangle is 200 pixels wide and 100 pixels tall. There are many different ways to solve this puzzle, so have some fun!",
        "2-3 Artist 9 NEW_instruction": "Finish this kite",
        "2-3 Artist 9 REPLACEMENT_instruction": "Finish drawing these stairs!",
        "2-3 Artist 9_instruction": "Finish this kite",
        "2-3 Artist Assessment 1_instruction": "Assessment: Finish drawing the last tooth. It is 25 pixels wide and 25 pixels tall.",
        "2-3 Artist Debugging 1_instruction": "This hat should only be 50 pixels wide.  Can you fix it?",
        "2-3 Artist Debugging 10_instruction": "The direction pad on my game controller is too narrow. \n\nCan you make it wider by 10 pixels?\n\nTry running the code first to see what's wrong.",
        "2-3 Artist Debugging 11_instruction": "My snowflake is falling apart!\n\nCan you figure out what's going wrong?",
        "2-3 Artist Debugging 12_instruction": "I'm supposed to add an ocean wave to this scene.  Can you help me?",
        "2-3 Artist Debugging 2_instruction": "This code for the cat's whiskers is wrong. \n\nFix this code to draw whiskers that are all the same length.",
        "2-3 Artist Debugging 3_instruction": "My boat has a hole! \n\nWhat do you need to fix to make the ends meet?",
        "2-3 Artist Debugging 4_instruction": "What is the image that we're trying to draw? Finish connecting the dots using the proper lines and angles.",
        "2-3 Artist Debugging 5_instruction": "The code that we have for the leg and foot is wrong. \n\nCan you fix it?",
        "2-3 Artist Debugging 6_instruction": "Looks like I'm sitting on a chair that’s missing a leg!\n\nEdit the code to draw the last leg.",
        "2-3 Artist Debugging 7_instruction": "Looks like the C in code is drawn backwards!\n\nCan you make it look like a C again?",
        "2-3 Artist Debugging 8_instruction": "My teacher says that I should finish what I start!\n\nHelp me finish my pinwheel. Can you figure out what's wrong?",
        "2-3 Artist Debugging 9_instruction": "Something is off!\n\nThe code for this stem is wrong. Can you figure out how to get the artist to trace the stem the right way?",
        "2-3 Artist Debugging Assessment 1_instruction": "Assessment: Why does this square end up being 75 pixels too small on each side?  \n\nWhere does the code go wrong?",
        "2-3 Artist Free Play_instruction": "Free-play! Draw anything you'd like.",
        "2-3 Artist Functions 1 a_instruction": "\"Me zombie artist. Me love drawing!\"  \n\nHelp the zombie draw square glasses.  \n\nThe bridge between the glasses is 25 pixels shorter than the width of the squares, which is 100 pixels.",
        "2-3 Artist Functions 1_instruction": "\"Me zombie artist. Me love drawing!\"  \n\nHelp the zombie draw square glasses.  \n\nThe bridge between the glasses is 25 pixels shorter than the width of the squares, which is 100 pixels.",
        "2-3 Artist Functions 10_instruction": "Freeplay: Here are two functions, one to draw a big gear and one to draw a small gear. Use them to draw the inside of a machine!",
        "2-3 Artist Functions 11 a_instruction": "We've renamed the `draw a square` function to `draw a hexagon`, but it's still giving us squares! Can you modify the `draw a hexagon` function to draw a hexagon with 50 pixel sides? \n\nDraw the image using the new function!",
        "2-3 Artist Functions 11.5 a_instruction": "Here's that same `draw a hexagon` function. \n\nWhat happens if you loop the main program 6 times, turning 60 degrees each time you loop?",
        "2-3 Artist Functions 11.5_instruction": "Here's that same `draw a hexagon` function. \n\nWhat happens if you loop the main program 6 times, turning 60 degrees each time you loop?",
        "2-3 Artist Functions 11_instruction": "We've renamed the `draw a square` function to `draw a hexagon`, but it's still giving us squares! Can you modify the `draw a hexagon` function to draw a hexagon with 50 pixel sides? \n\nDraw the image using the new function!",
        "2-3 Artist Functions 12 Mike_instruction": "Functions are really great for drawing complex things multiple times. \n\nCan you use the `draw a flower` function to fill the rest of the planter box?\nThe plants are all 100 pixels apart.",
        "2-3 Artist Functions 12 a_instruction": "Functions are really great for drawing complex things multiple times. \n\nCan you use the `draw a flower` function to fill the rest of the planter box?\nThe plants are all 100 pixels apart.",
        "2-3 Artist Functions 12_instruction": "Functions are really great for drawing complex things multiple times. \n\nCan you use the `draw a flower` function to fill the rest of the planter box?\nThe plants are all 100 pixels apart.",
        "2-3 Artist Functions 13_instruction": "We've provided you with four functions. Use them any way you like inside of one or more loops to make pictures that you can share with your friends. Press run to see an example.",
        "2-3 Artist Functions 2 a_instruction": "Use the small green `draw a square` block to call this new function and create the glasses. ",
        "2-3 Artist Functions 2_instruction": "Functions let you define new blocks! \n\nWe've moved the blocks needed for drawing a square into a function called `draw a square`. This time, use the `draw a square` function to create the glasses. \n\nThe squares are 75 pixels apart.",
        "2-3 Artist Functions 3 a_instruction": "Edit the \"draw a square\" function to draw glasses with frames that are 115px on each side. \n\nThe squares are now 45 pixels apart.",
        "2-3 Artist Functions 3_instruction": "Edit the function to draw a square with a side length of 115 to draw the bigger glasses. \n\nThe squares are now 45 pixels apart.",
        "2-3 Artist Functions 4 a_instruction": "Now, put the function inside of a loop and add an extra turn to draw these three squares.",
        "2-3 Artist Functions 4_instruction": "Now, put the function inside of a loop to draw these three squares.",
        "2-3 Artist Functions 7_instruction": "Use the \"draw a house\" function to draw two houses using two different parameters. (Hint: the first house is 100 pixels).",
        "2-3 Artist Functions 9_instruction": "Freeplay: Here is a snowflake function. Experiment with it to create a winter scene! This is a free play level, so there is no puzzle to solve. Have fun!",
        "2-3 Artist Loops 1_instruction": "Can you make a hexagon with sides that are 100 pixels long to finish the cell? Remember, that means that you will only need to turn 60 degrees!",
        "2-3 Artist Loops 10_instruction": "What happens to the design when we make our final step forward half as long?",
        "2-3 Artist Loops 11_instruction": "Now let's put *another* loop around our whole creation!  Don't forget to add an angle at the end of the outer loop.",
        "2-3 Artist Loops 2_instruction": "Now use a repeat block to make the cell a shell.",
        "2-3 Artist Loops 4_instruction": "Want to see what happens when we repeat that shape over and over again using a loop?",
        "2-3 Artist Loops 5_instruction": "Now let's make a small change to the loop and see how different our picture becomes.",
        "2-3 Artist Loops 6_instruction": "Add one more move and another turn inside the loop and see how your design changes.",
        "2-3 Artist Loops 7_instruction": "We can use loops to make all kinds of polygons.  Can you create a rhombus inside this hexagon?",
        "2-3 Artist Loops 8_instruction": "Let's put both elements inside a loop.",
        "2-3 Artist Loops 9_instruction": "We're going to loop the same elements, but now we're going to add some distance between them.\nUse the same code as before, but add a step forward at the end of the outer loop.",
        "2-3 Artist Loops New 1_instruction": "Let's draw this robot's head! Can you make a square with sides that are 100 pixels?",
        "2-3 Artist Loops New 10_instruction": "Now let's connect a bunch of V's together in a loop.",
        "2-3 Artist Loops New 11_instruction": "Rebuild the code from the last puzzle, but this time, add a left turn of 30 degrees inside the loop. Now, repeat it 24 times instead of 8.",
        "2-3 Artist Loops New 12_instruction": "Draw a diamond with sides of 100 pixels. ",
        "2-3 Artist Loops New 13_instruction": "We are going to start you with some code (in grey) to make one diamond. \n\nLoop the grey code to create a fun pattern!",
        "2-3 Artist Loops New 14_instruction": "Play around with the code for the diamond and see what other patterns you can make. Try changing how many degrees you turn and how many times you loop.",
        "2-3 Artist Loops New 15_instruction": "Now, draw anything you like!",
        "2-3 Artist Loops New 2_instruction": "Here is the same puzzle that we just solved, but this time, we can only use one `move forward` block and one `turn` block this time.\n\nCan you use a `repeat` to solve this puzzle?",
        "2-3 Artist Loops New 9_instruction": "Draw a simple V (where both sides are 50 pixels) to complete the arrow.",
        "2-3 Artist Match Hex Pic_instruction": "Match:  Help finish the Hexagon.",
        "2-3 Artist Match Rho Pic_instruction": "Match:  Finish the missing code.",
        "2-3 Artist Match Sq Pic_instruction": "Match: Complete the missing code",
        "2-3 Artist Match Tri pic_instruction": "Matching:  Fill in the missing code.",
        "2-3 Artist Nested Loops 1_instruction": "Put a `repeat` block around this whole stack of code to draw the pattern.",
        "2-3 Artist Nested Loops 10_instruction": "Loop this code 12 times to complete the pattern.",
        "2-3 Artist Nested Loops 11_instruction": "Loop this code 4 times to complete the pattern, turn 90 degrees after each circle.",
        "2-3 Artist Nested Loops 12_instruction": "Loop this code 12 times to complete the curls.",
        "2-3 Artist Nested Loops 2_instruction": "Now loop the triangle 6 times. \n\nAfter each triangle, you'll need to turn 60 degrees before drawing the next.",
        "2-3 Artist Nested Loops 3_instruction": "You'll need to loop the triangle 12 times to draw this pattern. \n\nDivide the number of degrees in a circle (360) by the number of shapes you're drawing (12) to figure out how far to turn after each shape.",
        "2-3 Artist Nested Loops 4_instruction": "Loop this diamond 12 times to draw a flower!\n\nNote: We'll use the same angle to loop 12 diamonds as we did for 12 triangles.  \nHow much do you need to turn after each shape?",
        "2-3 Artist Nested Loops 5_instruction": "Fill in this building's windows using a nested loop. \n\nThe windows are 20 pixels long and 20 pixels apart.",
        "2-3 Artist Nested Loops 6_instruction": "This dinosaur has 8 spikes running up its tail.\nEach spike is 30 pixels long. Loop the triangle 8 times, but make sure to jump forward after each one!",
        "2-3 Artist Nested Loops 7_instruction": "Loop this triangle 10 times to draw the sun. \n\nYou'll need to move and turn after each triangle. \n\nYou can figure out how much to turn by dividing the number of degrees in a circle by the number of triangles that make it up.",
        "2-3 Artist Nested Loops 8_instruction": "Now let's add some grass to our picture. \n\nEach tuft of grass is 50 pixels apart.",
        "2-3 Artist Nested Loops 9_instruction": "We'll finish this picture by adding our flower. \n\nLoop the diamond 12 times to draw the flower.",
        "2-3 Artist Nested Loops Free Play_instruction": "Free play, draw something cool with nested loops.",
        "2-3 Bee Conditionals 1_instruction": "Hi! I'm a bee. Help me get nectar from the flower.",
        "2-3 Bee Conditionals 10_instruction": "Purple flowers may have either 1 or 0 nectar. Be careful not to collect nectar from a purple flower if it doesn't have any.\n",
        "2-3 Bee Conditionals 11_instruction": "I wonder what's out there!\n\nHelp me fly around the yard and collect nectar only from the flowers that have some. ",
        "2-3 Bee Conditionals 12_instruction": "Help me find all of the nectar using as few blocks as possible!",
        "2-3 Bee Conditionals 13_instruction": "There's a lot happening here!\n\nUse what you've learned to collect all of the nectar and then make the honey.",
        "2-3 Bee Conditionals 14_instruction": "Let's put everything together!\n\nUse what you've learned to help me collect nectar only from flowers that have it, using as few blocks as possible.  Don't forget to make honey at the end.",
        "2-3 Bee Conditionals 15_instruction": "This stair step pattern should look familiar.  \n\nCan you collect nectar only from the flowers that have some, using as few blocks as possible?",
        "2-3 Bee Conditionals 2_instruction": "I'm a hungry bee! \nHelp me collect all of the nectar from the flowers using the fewest number of blocks.",
        "2-3 Bee Conditionals 3_instruction": "Look at all of that nectar!\n\nHelp me collect the nectar and make the honey using as few blocks as you can.  ",
        "2-3 Bee Conditionals 4_instruction": "Help me collect all of the nectar from the flowers and make all the honey.",
        "2-3 Bee Conditionals 5_instruction": "Be careful not to collect nectar from a purple flower if it doesn't have any. \nYou must first check if the nectar is equal to 1 using the `if nectar` block.",
        "2-3 Bee Conditionals 6_instruction": "Check this flower with an \"if\" block to see if there is any nectar available.",
        "2-3 Bee Conditionals 7_instruction": "Collect nectar from each flower only if it has any.",
        "2-3 Bee Conditionals 8_instruction": "This field has red and purple flowers. Red flowers have a known nectar amount, but purple flower nectar is unknown. Collect all the nectar.",
        "2-3 Bee Conditionals 9_instruction": "Collect all the nectar from each flower.",
        "2-3 Bee Conditionals Assessment 1_instruction": "Assessment: Collect all of the nectar. Be careful not to try to collect nectar from a purple flower if it doesn't have any.",
        "2-3 Bee Debugging 1_instruction": "These blocks are really bugging me. Fix the error(s) to collect all of the nectar.",
        "2-3 Bee Debugging 10_instruction": "This puzzle is making me loopy! \nFix the error(s) to collect all of the nectar and make all of the honey.",
        "2-3 Bee Debugging 2_instruction": "Can you find the problem here?\nFix the error(s) to collect all of the nectar.",
        "2-3 Bee Debugging 3_instruction": "Ooh, this one stings!\n\nFix the error(s) to collect all of the nectar.",
        "2-3 Bee Debugging 4_instruction": "These blocks are really bugging me. Fix the error(s) to collect all of the nectar and make all of the honey.",
        "2-3 Bee Debugging 5_instruction": "That flower looks tasty! \n\nFix the error(s) to collect all of the nectar.  You can now use both run and step.",
        "2-3 Bee Debugging 6_instruction": "What a sweet challenge!\n\nFix the error(s) to collect all of the nectar.",
        "2-3 Bee Debugging 7_instruction": "Fix the error(s) to collect all of the nectar and make all of the honey.",
        "2-3 Bee Debugging 8_instruction": "So many beautiful flowers!\n\nFix the error(s) to collect all of the nectar.",
        "2-3 Bee Debugging 9_instruction": "\"Bee\" patient with this one!\n\nYou will need to fix a couple of things in this program to collect all of the nectar and make all of the honey.",
        "2-3 Bee Debugging Assessment 1_instruction": "Assessment:  Now it's time to show what you know!\n\nFix the error(s) to collect all of the nectar and make all of the honey.",
        "2-3 Bee Functions 1_instruction": "Functions are blocks of code that perform a task. Use the \"get 2 nectar\" function to collect the nectar from each flower.",
        "2-3 Bee Functions 10_instruction": "Purple flowers change between either 1 or 0 nectar each time you run the puzzle.   \n\nCreate a function that collects nectar only from purple flowers that have nectar.",
        "2-3 Bee Functions 2_instruction": "Functions are blocks of code that perform a task.  \n\nUse the `get 5` function to get 5 nectars at a time.",
        "2-3 Bee Functions 3_instruction": "Collect all the nectar from each flower.",
        "2-3 Bee Functions 4_instruction": "The `move and get nectar` function turns the bee, collects nectar, and then returns the bee to where it started.  \n\nUse the function to collect all of the nectar.",
        "2-3 Bee Functions 5_instruction": "There is now more nectar at the flowers. Edit the given function so that it collects 4 nectars and use it to collect all of the nectar from the flowers.",
        "2-3 Bee Functions 6_instruction": "Now use the same function to collect nectar from the three flowers.",
        "2-3 Bee Functions 7_instruction": "The flowers are now further away. Edit the given function and use it to collect all of the nectar from the flowers.",
        "2-3 Bee Functions 8_instruction": "Create your own function that gets 7 nectar, moves forward, and makes 7 honey. Use the function to collect nectar at each flower and make honey at each honeycomb.",
        "2-3 Bee Functions 9_instruction": "Create your own function that goes down a path, gets nectar, makes honey, and then returns the bee to the top of the path.",
        "2-3 Bee Functions Assessment 1_instruction": "Assessment: Use the given function to collect nectar from each flower.",
        "2-3 Bee Functions Assessment 2_instruction": "Assessment: Create a function to turn, move forward and make 3 honey, then return the bee to where it started and turn back.",
        "2-3 Bee Loops 1_instruction": "Those flowers look tasty!\n\nCollect nectar from each of the flowers using the fewest blocks possible.",
        "2-3 Bee Loops 10_instruction": "Can you use a while loop inside of two other loops to collect all of the nectar?",
        "2-3 Bee Loops 11_instruction": "Use while loops to collect all of the nectar from the flowers in this field.",
        "2-3 Bee Loops 12_instruction": "Use while loops to collect all of the nectar from the flowers in this field.",
        "2-3 Bee Loops 13_instruction": "Assessment: Collect all of the nectar using the fewest blocks possible.",
        "2-3 Bee Loops 1A_instruction": "Hi, I'm a bee. Can you help me collect the nectar from these flowers? ",
        "2-3 Bee Loops 2_instruction": "Collect all the nectar and make all of the honey using the fewest blocks possible.",
        "2-3 Bee Loops 2A_instruction": "This time, use a loop to gather all of the nectar.",
        "2-3 Bee Loops 3_instruction": "Collect nectar from each flower and make honey at each honeycomb using the fewest blocks possible.",
        "2-3 Bee Loops 3A_instruction": "Use a `repeat` loop to collect all of the nectar.",
        "2-3 Bee Loops 3B_instruction": "Now use the `repeat` block to collect all of the nectar and make all of the honey.",
        "2-3 Bee Loops 4_instruction": "Such a busy bee!\n\nHelp bee collect all of the nectar and make all of the honey with the fewest blocks possible.",
        "2-3 Bee Loops 4A_instruction": "How many times can loops help you in this puzzle?  \n\nLoops are your friend! Use a few of them to complete this puzzle with the fewest blocks possible.",
        "2-3 Bee Loops 5_instruction": "The shape of this path is different than the others. \n\nCan you collect all of the nectar using as few blocks as possible?",
        "2-3 Bee Loops 6_instruction": "Can you find the quickest way for the bee to collect all of the nectar and make all of the honey?",
        "2-3 Bee Loops 7_instruction": "What a beautiful field of flowers!   Help the bee visit each one.  Can you find a way to do it with fewer than 7 blocks?",
        "2-3 Bee Loops 8_instruction": "These purple flowers have different amount of nectar each time you run the puzzle. \n\nUse the `while nectar` loop to collect all of the nectar. \n\nThis loop will run as long as the condition is true, in this case `nectar > 0`.",
        "2-3 Bee Loops 9_instruction": "The while loop can perform the same action as an if statement in a loop. Add a while loop to this code to perform the same task.",
        "2-3 Bee Loops Assessment 1_instruction": "Assessment: Use a `while` loop to collect all of the nectar from these flowers.",
        "2-3 Maze 1_instruction": "Can you help me catch the naughty pig? Stack a couple of `move forward` blocks below the `when run` block and press \"Run\". ",
        "2-3 Maze 10_instruction": "Guide me to the green evilness! (Watch out for TNT)",
        "2-3 Maze 11_instruction": "Get me to the flower I'm hungry! How many times do you have to repeat a block?",
        "2-3 Maze 12 (copy 1)_instruction": "Can you replace the previous answer with only two blocks? (Hint: Create a loop using a \"repeat times\" block.)",
        "2-3 Maze 12 (copy 2)_instruction": "Can you replace the previous answer with only two blocks? (Hint: Create a loop using a \"repeat times\" block.)",
        "2-3 Maze 12 (old)_instruction": "Get me to the pig, now with the Repeat times block!",
        "2-3 Maze 12 - One Move Block_instruction": "Get to the pig! But this time, you can only use one `move forward` block. Do you see any other blocks that could help you?",
        "2-3 Maze 12_instruction": "Can you get to the pig by creating a loop that uses only one `move forward` block inside of a `repeat`?",
        "2-3 Maze 13 (old)_instruction": "Get me to the pig, now with the Repeat until block!",
        "2-3 Maze 13_instruction": "Get me to the pig! You can only use one move forward block this time",
        "2-3 Maze 14 (old)_instruction": "Get me to the pig with the Repeat until block!",
        "2-3 Maze 14_instruction": "Get me to the sunflower! (Where is that \"repeat times\" block when I need it?)",
        "2-3 Maze 15 (old)_instruction": "Get me to the pig with the Repeat until block!",
        "2-3 Maze 15_instruction": "In this puzzle, two `repeat` loops will help you get to the pig with the fewest number of blocks!",
        "2-3 Maze 16 (old)_instruction": "Get me to the pig with the Repeat until block!",
        "2-3 Maze 16 before_instruction": "Can you figure out the fastest way to get me to the pig?",
        "2-3 Maze 16_instruction": "Loops even work with more than one block inside!  Can you loop this sequence to get the zombie to the sunflower?",
        "2-3 Maze 2_instruction": "This pig is ruffling my feathers. Help me get to him!",
        "2-3 Maze 3_instruction": "Trace the path and lead me to the silly pig. Avoid TNT or feathers will fly!",
        "2-3 Maze 4_instruction": "Guide me to the green evilness! (Watch out for TNT)",
        "2-3 Maze 5_instruction": "Guide me to the green evilness! (Watch out for TNT)",
        "2-3 Maze 6_instruction": "Keep calm and help me find the bad pig. Otherwise I might get angry!",
        "2-3 Maze 7_instruction": "Guide me to the green evilness! (Watch out for TNT)",
        "2-3 Maze 8_instruction": "Get me to the pig!",
        "2-3 Maze 9_instruction": "Guide me to the green evilness! (Watch out for TNT)",
        "2-3 Maze Loops 1_instruction": "Can you get me to the pig using 5 of the same kind of blocks?",
        "2-3 Maze Loops 17_instruction": "Use what you learned to get me to the sunflower!",
        "2-3 Maze Loops 18_instruction": "Get me to the sunflower using the fewest blocks possible!  \n\nTry using one `repeat` loop inside of another to cut down on the amount of code you need.",
        "2-3 Maze Loops 19_instruction": "Let's take this to another level! \nUse loops to get me to the sunflower with the fewest loops possible.",
        "2-3 Maze Loops 20_instruction": "Get me to the sunflower using the fewest number of blocks possible!",
        "2-3 Maze Loops 21_instruction": "Get me to the sunflower using the fewest blocks possible!",
        "2-3 Maze Loops Assessment 1_instruction": "Assessment:  Get me to the sunflower using only 5 blocks! ",
        "2-3 Maze sq1_instruction": "This pig is ruffling my feathers.  Help me find him!",
        "2-3 Maze sq10_instruction": "Get me to the pig! What blocks got repeated?",
        "2-3 Maze sq10v2_instruction": "Get me to the pig! What blocks got repeated?",
        "2-3 Maze sq2_instruction": "Trace the path and lead me to the silly pig.  Avoid the TNT or the feathers will fly!",
        "2-3 Maze sq3_instruction": "Guide me to the green evilness! (Watch out for TNT)",
        "2-3 Maze sq4_instruction": "Keep calm and help me find the bad pig. Otherwise I might get angry!",
        "2-3 Maze sq5_instruction": "Get me to the pig! How many times do you have to repeat a block?",
        "2-3 Maze sq6_instruction": "Can you replace the previous answer with only two blocks? (Hint: Create a loop using a \"repeat times\" block.)",
        "2-3 Maze sq7_instruction": "Get me to the green intruder using only three blocks.",
        "2-3 Maze sq8_instruction": "Get me to the pig! (Where is that \"repeat times\" block when I need it?)",
        "2-3 Maze sq9_instruction": "Create loops to get to the pig using less blocks.",
        "2-3 maze sq11_instruction": "Get me to the pig! What blocks got repeated?",
        "2-3 maze sq12_instruction": "Can you replace the previous answer with a loop by using a \"repeat times\" block?",
        "2-3 maze sq13_instruction": "Dear person. Me zombie. Must... get... to sunflower. Create loop with \"repeat until\" block.",
        "2-3 maze sq14_instruction": "Can you get to the sunflower using only four blocks?",
        "2-3 maze sq15_instruction": "Can you get to the sunflower using only five blocks?",
        "2-3 maze sq16_instruction": "Ok, this is similar, but slightly different. Can you do it in only five blocks?",
        "2-3_instruction": "Purple flowers may have either 1 or 0 nectar. Be careful not to collect nectar from a purple flower if it doesn't have any.",
        "2-3level1_instruction": "Help the bird catch the naughty pig by moving it forward",
        "20hr_farmer_stage9_1_instruction": "Hi, I'm a farmer. I need your help to flatten the field on my farm so it's ready for planting. Move me to the pile of dirt and use the \"remove\" block to remove it.",
        "20hr_farmer_stage9_10_instruction": "I'm working late, so it's dark out, and I can't tell how large the piles are. Now I don't have all the options I used to have on the while block. Move me along the field, and if there is a pile, remove it",
        "20hr_farmer_stage9_11_instruction": "It's still dark outside. Move me along the field. If there is a pile, remove it, and if there is a hole, fill it in. Hint: use the dropdown menu of options on the \"if\" block.",
        "20hr_farmer_stage9_2_instruction": "Next, move me to the hole and fill it with TWO shovelfuls of dirt, using the \"fill\" block.",
        "20hr_farmer_stage9_3_instruction": "Move me to the pile of dirt and tell me how many shovelfuls to remove using as few blocks as possible.",
        "20hr_farmer_stage9_4_instruction": "Can you help me remove all four piles of dirt? Hint: use a repeat block if you can.",
        "20hr_farmer_stage9_5_instruction": "Help me fill in all these holes with 5 shovelfuls of dirt. Hint: you can put a \"repeat\" block inside the \"while\" block.",
        "20hr_farmer_stage9_6_instruction": "Remove all the piles of dirt, using as few blocks as possible. The new options in the dropdown menu on the \"while\" block tell me if I'm standing on a pile or a hole.",
        "20hr_farmer_stage9_7_instruction": "Wow, I found a really deep hole! I don't know how many shovelfuls of dirt it needs. Can you write a program that fills it until the ground is even?",
        "20hr_farmer_stage9_8_instruction": "Help me fill in the hole at the end of the field, using as few blocks as possible.",
        "20hr_farmer_stage9_9_instruction": "Make me remove all these piles of dirt. Try to use as few blocks as possible. Hint: try using a \"while\" block.",
        "20hr_maze_stage2_1_instruction": "Can you help me to catch the naughty pig? Stack a couple of \"move forward\" blocks together and press \"Run\" to help me get there.",
        "20hr_maze_stage2_10_instruction": "Ok, try the new \"repeat until\" block - it will repeat until I reach the annoying pig.",
        "20hr_maze_stage2_11_instruction": "Ok, one last time for practice - can you solve this one using only 4 blocks?",
        "20hr_maze_stage2_12_instruction": "Dear person. Me zombie. Me hungry. Must... get... to sunflower... Can you get me there with only 5 blocks?",
        "20hr_maze_stage2_13_instruction": "Ok, this is similar, but slightly different. Can you do it in only 5 blocks?",
        "20hr_maze_stage2_14_instruction": "Use the new \"if\" block to let me decide when to turn. Hint: you only need one more block, but learn how we set it up so you can do it on your own next time.",
        "20hr_maze_stage2_15_instruction": "Ok, this is just like the last puzzle, but you need to remember how you used the \"if\" block and the \"repeat\" block together.",
        "20hr_maze_stage2_16_instruction": "Me want sunflower! Use an \"if\" block to get me there with the fewest number of blocks.",
        "20hr_maze_stage2_17_instruction": "Ok, let's do that again for practice - this isn't very different, but watch out for the chompers!",
        "20hr_maze_stage2_18_instruction": "The \"If-else\" blocks checks a condition, and then does one thing OR another. To get me to the sunflower try to use this new block.",
        "20hr_maze_stage2_19_instruction": "One more practice of the \"if-else\" block, can you get it right on your first try?",
        "20hr_maze_stage2_2_instruction": "This pig is ruffling my feathers. Help me to find him!",
        "20hr_maze_stage2_20_instruction": "Can you add just 3 blocks to help me solve a more complex maze? If you do it right, I can walk any curvy path no matter the length.",
        "20hr_maze_stage2_3_instruction": "Trace the path and lead me to the silly pig. Avoid TNT or the feathers will fly!",
        "20hr_maze_stage2_4_instruction": "Guide me to the green evilness! (Watch out for TNT)",
        "20hr_maze_stage2_5_instruction": "Keep calm and help me to find the bad pig. Otherwise I might get angry!",
        "20hr_maze_stage2_6_instruction": "There's a way I can get to the silly pig using only 2 blocks. Can you figure it out?",
        "20hr_maze_stage2_7_instruction": "Try to get me to the green intruder using only three blocks.",
        "20hr_maze_stage2_8_instruction": "Help me banish this bad piggy using the fewest number of blocks. Try using more than one \"repeat times\" block.",
        "20hr_maze_stage2_9_instruction": "When a block is grey, that means you can't delete it. Solve this puzzle using the \"repeat\" block that repeats 3 times. Try putting these 3 blocks inside the grey \"repeat\" block: move, move, turn.",
        "4-5 Artist 1_instruction": "Help me finish drawing my box. (Each line is 300 pixels long) ",
        "4-5 Artist 10_instruction": "Press \"Run\" to try the code. Then, repeat it enough times to complete the drawing. The colors will be different every time.",
        "4-5 Artist 11_instruction": "Complete the green lines. The lines are 300 pixels long and 15 pixels apart.",
        "4-5 Artist 2_instruction": "Loop this code using the `repeat` block to complete the square.",
        "4-5 Artist 3.5_instruction": "Try to figure out what happens if you run this code (or just press \"Run\" and try it). Next, repeat the code enough times to complete the drawing!",
        "4-5 Artist 3_instruction": "This rectangular flower bed has a perimeter of 600. The long side has a length of 200. Draw the rectangle using as few blocks as possible.",
        "4-5 Artist 4_instruction": "How many degrees are in a circle?  Loop the blocks to create a circle of colors.",
        "4-5 Artist 5_instruction": "What can we replace \"???\" with to make sure that the zombie completes this drawing using the loop provided?",
        "4-5 Artist 6_instruction": "This equilateral triangle has angles of 60, 60, and 60 degrees. Each side is 200 pixels. Complete the drawing.",
        "4-5 Artist 7_instruction": "This right triangle has angles of 30, 60, and 90 degrees. The slanted side's length (length of the hypotenuse) is 200 pixels. Complete the drawing.",
        "4-5 Artist 8_instruction": "The halfway line on a soccer field is perpendicular to the sidelines.   \nThis rectangle has a perimeter of 800 pixels total, and it is 240 pixels long. How tall is it?   \n\nDraw the bounds and the halfway line.",
        "4-5 Artist 9_instruction": "Draw the right half of this image so that the design is symmetrical. The triangles are equilateral and have sides that are 50 pixels long.",
        "4-5 Artist Assessment 1_instruction": "Assessment: Use a loop to draw the equilateral triangle. Each side is 300 pixels.",
        "4-5 Artist For Loops 1_instruction": "Put the numbers 1 through 10 into the width blocks and run the code.",
        "4-5 Artist For Loops 11_instruction": "Complete the \"for\" block so that it counts 0, 20, 40, 60, 80... 200.",
        "4-5 Artist For Loops 12_instruction": "What happens if you reverse the \"from\" and \"to\" numbers? Complete the \"for\" block so that it counts 200, 180, 160, 140, 120...0. ",
        "4-5 Artist For Loops 13_instruction": "This design got started without a \"for\" loop and is taking too many blocks!  Use a \"for\" block to complete the spiral.  Hint: the last line length is 250 pixels.",
        "4-5 Artist For Loops 14_instruction": "Someone started the code, but then realized there must be a quicker way! Use a \"for\" block to replace the blocks and complete the triangular spiral. (Hint: the last line length is 300 pixels.)",
        "4-5 Artist For Loops 15_instruction": "Someone started the code, but then realized there must be a quicker way! Use a \"for\" block to replace the blocks and complete the hexagonal spiral. (Hint: the last line length is 200 pixels.)",
        "4-5 Artist For Loops 2_instruction": "This is a \"for\" block. Instead of typing 1,2,3... 10, the \"for\" block can repeat the blocks inside it and count the numbers for you. Place the number 10 into the \"to\" section of the \"for\" block.",
        "4-5 Artist For Loops 3_instruction": "How can we count from 1 to 50? Edit the \"for\" block.",
        "4-5 Artist For Loops 4_instruction": "Complete the \"for\" block so that it counts from 1 to 10 by 1.",
        "4-5 Artist For Loops 6_instruction": "Draw squares with sides of 50, 60, 70, 80, and 90 pixels. You'll need to use the \"draw a square\" function five times.",
        "4-5 Artist For Loops 7_instruction": "Draw the same squares but use a \"count with\" block to change the sizes. Place the \"counter\" block in the \"draw a square\" function. Hint: It's in the Variables category.",
        "4-5 Artist For Loops 8_instruction": "Can you complete the program by placing the blocks inside a \"for\" block that counts from 10 to 200 by 10? You can find the \"for\" block in the Loops category.",
        "4-5 Artist For Loops 9_instruction": "These circles are size 5, 10, 15, 20, 25, 30, and 35. Draw the circles using a \"for\" block.",
        "4-5 Artist Free Draw 1_instruction": "Free Draw!  Draw whatever you are inspired to create.",
        "4-5 Artist Functions 1_instruction": "Use a repeat loop to draw this triangle.",
        "4-5 Artist Functions 10a_instruction": "Put this code into the 'draw a snowflake' function and replace the 50 with the parameter 'size'. The function is already called on to make a snowflake that is 100 pixels.",
        "4-5 Artist Functions 10b_instruction": "Use the 'draw a snowflake' function to create different size flakes.  Hint: the first snowflake is 25 in length and each snowflake is twice the size of the one before.",
        "4-5 Artist Functions 11_instruction": "This \"draw a hexagon\" function uses the \"draw a triangle\" function. Complete the hexagon function. (Hint: A hexagon has 6 sides, each 100 pixels long)",
        "4-5 Artist Functions 12_instruction": "Complete the 'draw waves' function.  Each wave is made up of one Upper wave and one Lower wave.   Hint: Draw 5 blue waves.",
        "4-5 Artist Functions 13 Free play_instruction": "Here are some functions to draw planets, stars, rockets, and robots. Use them any way you like to make pictures that you can share with your friends.",
        "4-5 Artist Functions 14 Free play_instruction": "Here, we've provided you with several functions.  Use them any way you like inside of one or more loops to make pictures that you can share with your friends. Click 'Run' to see an example.",
        "4-5 Artist Functions 15 Assessment_instruction": "Assessment:  Use the \"draw a square\" function to create the squares.  The squares are 50, 100, and 150 pixels.",
        "4-5 Artist Functions 2a_instruction": "Now put these blocks into a new function called \"draw a small triangle\" and call on it.",
        "4-5 Artist Functions 2b_instruction": "Now create a function called \"draw a small triangle\" using the provided blocks.",
        "4-5 Artist Functions 3_instruction": "Now create the functions \"draw a medium triangle\" and \"draw a large triangle\". The \"draw a small triangle\" function is done for you. The triangles have side lengths of 50 (small), 100 (medium), and 150 (large). ",
        "4-5 Artist Functions 4_instruction": "This new \"draw a triangle\" function has a parameter and can do the work of all three functions before. Draw the same triangles using this new function.",
        "4-5 Artist Functions 5_instruction": "Can you modify the \"draw a triangle\" function into a \"draw a square\" function to change the drawing?",
        "4-5 Artist Functions 6_instruction": "Use the \"draw a square\" and \"draw a triangle functions\" to draw a house. (Hint: The square's sides are 200 pixels)",
        "4-5 Artist Functions 6b_instruction": "Use the draw a square and triangle functions along with other blocks to create a house by adding them to the 'draw a house\" function and calling it.",
        "4-5 Artist Functions 7_instruction": "Use the \"draw a house\" function to draw houses that are 100 pixels and 50 pixels. The two houses are separated by 50 pixels.",
        "4-5 Artist Functions 8_instruction": "The \"draw a flower\" function has a parameter that allows you to set the stem height.  Set it to 200 and see what happens.",
        "4-5 Artist Functions 9_instruction": "Draw these 3 flowers. The first one's height is 100 and the next flower is always 50 pixels more than the height of the previous one. The flowers are also 100 pixels apart.",
        "4-5 Artist Patterns 1_instruction": "Draw this square using a loop.\n\nEach side is 20 pixels long.",
        "4-5 Artist Patterns 10_instruction": "This code draws two rows of hexagons - loop the whole thing 4 times to draw the whole honeycomb. \n\nYou'll need to jump back 120 pixels in your outermost loop to make sure the artist doesn't draw off the screen.\n",
        "4-5 Artist Patterns 11_instruction": "How many times do you need to loop this to draw a half circle? ",
        "4-5 Artist Patterns 12_instruction": "If you create another loop like this one, but turn left instead of right, what happens? \n\nCan you repeat all of that to draw this wave?",
        "4-5 Artist Patterns 13_instruction": "Now let's loop that whole thing four times to create this picture frame. Watch out for the corners - you can't just turn 90 degrees! \n\nIf looping a 3 degree turn 60 times makes a half circle, which of these blocks of code will make an additional quarter circle for the corners?",
        "4-5 Artist Patterns 2_instruction": "If you place your square loop inside another loop, we call that a nested loop. What do you need to add as an outer loop to make sure all 15 squares line up next to each other?",
        "4-5 Artist Patterns 3_instruction": "Now let's go one level deeper! We've nested that whole block of code into another loop, but you need to get the artist back in place to draw the next line. Which of these code blocks can you place at the end of the outermost loop to draw the whole grid?",
        "4-5 Artist Patterns 4_instruction": "This diamond has 50 pixel sides and angles of 120 and 60 degrees. Use a loop to draw it.",
        "4-5 Artist Patterns 5.5_instruction": "How many times do you need to repeat this block to draw the full grid of diamonds?",
        "4-5 Artist Patterns 5_instruction": "Repeat this code to make a row of 6 diamonds. \n\nNotice that we changed our diamond code to repeat 3 times instead of 2 - why do you think that is?\n",
        "4-5 Artist Patterns 6_instruction": "How many times do you need to repeat this block to draw the full grid of diamonds?",
        "4-5 Artist Patterns 7_instruction": "Let's modify the code from the last puzzle to make this more complex pattern. Notice how the diamonds overlap now, try changing the first \"jump backwards\" from 100 to 50 (half as far) - now how far should the artist go in the second \"jump backwards\"?",
        "4-5 Artist Patterns 8_instruction": "Use a loop to draw this hexagon with 40 pixel sides and 60 degree angles.",
        "4-5 Artist Patterns 9.5_instruction": "Let's loop this code to draw two rows of hexagons. Notice how our second row is shifted to the right.",
        "4-5 Artist Patterns 9_instruction": "Now repeat this code 3 times and draw the whole row. \n\nEach hexagon is 80 pixels wide from the furthest points left to right.",
        "4-5 Artist Patterns Free Play_instruction": "Free play - try your hand at making a pattern of your own!",
        "4-5 Bee Conditionals - FC Test_instruction": "The bee only wants nectar right now. Not all objects are flowers, so check underneath EVERY CLOUD to see if it is hiding a flower. If it is, then you can gather nectar.",
        "4-5 Bee Conditionals 1 (copy 1)_instruction": "The bee can't tell if this is a flower or a honeycomb. Gather nectar only from flowers, but first check if it is a flower or a honeycomb.",
        "4-5 Bee Conditionals 1_instruction": "This cloud is blocking my view! Check to see if there's a flower under the cloud, and only get nectar if there's a flower. Be careful, it can change!",
        "4-5 Bee Conditionals 2 (copy 1)_instruction": "The bee only wants nectar right now. Remember, not all objects are flowers, so check to gather nectar only at flowers.",
        "4-5 Bee Conditionals 2_instruction": "More clouds! \n\nCheck underneath every cloud to see if it is hiding a flower before you get nectar.  \n\nRemember: Not all clouds hide the same thing!",
        "4-5 Bee Conditionals 3_instruction": "Now I just want to make honey. Some of these clouds might have honeycombs under them. Be sure to check each cloud!",
        "4-5 Bee Conditionals 4 (copy 1)_instruction": "The unknown object is either a flower or a honeycomb. Use the if/else block to collect nectar if it is a flower, else to make honey (because it is a honeycomb).",
        "4-5 Bee Conditionals 4_instruction": "Sometimes this cloud covers a flower, and sometimes it covers a honeycomb! Use the if/else block to collect nectar if it is a flower, else to make honey (because it is a honeycomb).",
        "4-5 Bee Conditionals 5_instruction": "There will be either a flower or a honeycomb under each of those clouds!\n\nUse the `if/else` block to collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "4-5 Bee Conditionals 6 (copy 1)_instruction": "This purple flower may have either 3, 2, or 1 nectar. Here an if-else block is combined with another if-else block to create an if, else-if, else block. Complete the solution to collect the unknown amount of nectar.",
        "4-5 Bee Conditionals 6_instruction": "I am not sure how much nectar this flower has, but I know it has either 1, 2, or 3 nectar. \n\nCombine the conditional blocks (`if` and/or `if/else`) to only get as much nectar as the flower has. \n\nRemember, the amount of nectar can change each time you run the puzzle!",
        "4-5 Bee Conditionals 7_instruction": "These flowers can have 3, 2, or 1 nectar. \n\nComplete the `check purple flower` function and use it to collect all of the nectar at the flowers.",
        "4-5 Bee Conditionals 8_instruction": "Write the function for `check flower make honey`. \n\nYour function should check if the purple flower has 3, 2, or 1 nectar and get all of the nectar. \nThen, move forward and make honey.",
        "4-5 Bee Conditionals Assessment 1_instruction": "**Assessment:** This cloud is either hiding a flower with one nectar or a honeycomb that needs one honey.  \n\nComplete the `get nectar or make honey` function, then call it to collect the nectar or honey. \n",
        "4-5 Bee Debugging 1_instruction": "These blocks are really bugging me. \n\nCan you fix them?",
        "4-5 Bee Debugging 10_instruction": "Find the errors and fix them.",
        "4-5 Bee Debugging 11_instruction": "Does this count correctly?",
        "4-5 Bee Debugging 2_instruction": "Help the bee get the nectar and make honey.",
        "4-5 Bee Debugging 3_instruction": "Find the errors and fix them.",
        "4-5 Bee Debugging 4_instruction": "These blocks don't work. What's the pattern?",
        "4-5 Bee Debugging 5_instruction": "Something isn't right here...",
        "4-5 Bee Debugging 6_instruction": "The purple flower has a different amount of nectar each time you run the puzzle. \n\nFix the blocks to get all of the nectar from the flower each time.",
        "4-5 Bee Debugging 7_instruction": "The function is missing something...",
        "4-5 Bee Debugging 8_instruction": "This function is fine, but it isn't used properly.",
        "4-5 Bee Debugging 9_instruction": "Why isn't the bee making enough honey?",
        "4-5 Bee Debugging Assessment 1_instruction": "Assessment: Fix the code.",
        "4-5 Bee Nested Loops 1_instruction": "Use a loop to collect all of the nectar.",
        "4-5 Bee Nested Loops 2_instruction": "Collect all of the nectar from each flower. Use a nested loop. ",
        "4-5 Bee Nested Loops 3_instruction": "Collect all of the nectar by putting the starter code inside another loop.",
        "4-5 Bee Nested Loops 4_instruction": "Collect all of the nectar from each flower and make honey at the honeycomb. \n\nUse a nested loop. ",
        "4-5 Bee Nested Loops 5_instruction": "Collect all of the nectar by creating a nested loop.",
        "4-5 Bee Nested Loops 6_instruction": "Collect all the nectar.",
        "4-5 Bee Nested Loops 7_instruction": "Put this loop inside another loop to create a nested loop and collect all of the nectar from the flowers.",
        "4-5 Bee Nested Loops 8_instruction": "Collect all of the nectar from these flowers by nesting a while loop. Replace the inner repeat times block with a while block. ",
        "4-5 Bee Nested Loops 9_instruction": "Collect all of the nectar from these flowers by nesting a while loop inside a repeat.",
        "4-5 Bee Nested Loops Assessment 1_instruction": "**Assessment:** Collect all of the nectar and make all of the honey using loops.",
        "4-5 Bee Nested Loops Rows_instruction": "Gather nectar from the rows of flowers! Use a nested loop.",
        "4-5 Maze 1 (copy 1)_instruction": "Dear person. Me zombie. Must... get... to sunflower.",
        "4-5 Maze 1_instruction": "Dear person. Me zombie. Must... get... to sunflower.",
        "4-5 Maze 10_instruction": "Can you get to the sunflower using only four blocks?",
        "4-5 Maze 11_instruction": "Can you get to the sunflower using only six blocks?",
        "4-5 Maze 12_instruction": "Ok, this is slightly different. Can you do it in only six blocks?",
        "4-5 Maze 13_instruction": "Get me to the pig!",
        "4-5 Maze 14_instruction": "Get me to the pig! Use the Repeat until block.",
        "4-5 Maze 2 (copy 1)_instruction": "Get the zombie to the sunflower, but avoid the chomper!",
        "4-5 Maze 2_instruction": "Get the zombie to the sunflower, but avoid the chomper!",
        "4-5 Maze 3 (copy 1)_instruction": "Must... get... to sunflower.",
        "4-5 Maze 3_instruction": "Must... get... to sunflower.",
        "4-5 Maze 4 (copy 1)_instruction": "Try the \"repeat\" block to use fewer blocks...",
        "4-5 Maze 4_instruction": "Use the \"repeat\" block to solve the puzzle quickly...",
        "4-5 Maze 5 (copy 1)_instruction": "Can you solve this puzzle using the fewest number of blocks possible?",
        "4-5 Maze 5_instruction": "Can you solve this puzzle using the fewest number of blocks possible?",
        "4-5 Maze 6 (copy 1)_instruction": "Can you solve this puzzle using the fewest number of blocks possible?",
        "4-5 Maze 6_instruction": "Get me to the sunflower using the fewest number of blocks possible!",
        "4-5 Maze 7_instruction": "Get the zombie to the sunflower quickly!  Can you solve the puzzle in fewer than 11 blocks?",
        "4-5 Maze 8_instruction": "Get the zombie to the sunflower using as few blocks as you can.  \n(Avoid the chompers!)",
        "4-5 Maze 9_instruction": "Now we have a new block called `repeat until`.  \nThis will let us keep looping commands until the zombie gets the sunflower.  \n\nUse the new `repeat until` block to solve this puzzle in as few commands as possible.",
        "4-5 Maze Assessment 1_instruction": "Assessment: Get to the sunflower using as few blocks as possible.",
        "4-5 Maze Conditionals 1_instruction": "Use the `repeat until` block to get the zombie to the sunflower.",
        "4-5 Maze Conditionals 10_instruction": "Can you add just 3 blocks to help the zombie solve a more complex maze? \n\nIf you do it right, he can walk any curvy path no matter the length!",
        "4-5 Maze Conditionals 2_instruction": "Use the `repeat until` block to get the zombie to the sunflower.",
        "4-5 Maze Conditionals 3_instruction": "Use the `if` block to help me decide when to turn. \n",
        "4-5 Maze Conditionals 4_instruction": "Ok, solve this one just like the last puzzle, but you need to remember how you used the `if` and `repeat until` blocks together.",
        "4-5 Maze Conditionals 5_instruction": "\"Me want sunflower!\"  \n\nUse an `if` statement to get the zombie to the sunflower with the fewest number of blocks.",
        "4-5 Maze Conditionals 6_instruction": "\"Eat sunflower!\"\n\nUse an `if` statement to get the zombie to the sunflower with the fewest number of blocks.",
        "4-5 Maze Conditionals 7_instruction": "The solution to this puzzle isn't very different, but watch out for the chompers!",
        "4-5 Maze Conditionals 8_instruction": "The `if/else` block checks a condition, and then does one thing OR another. \n\nUse this new block to get me to the sunflower.",
        "4-5 Maze Conditionals 9_instruction": "One more practice puzzle with the `if/else` block!\n\nTrace it with your finger to see if you can figure it out on your first try.",
        "4-5 Maze Conditionals Assessment 1_instruction": "**Assessment:** Use a `repeat until` and an `if/else` block to get me to the sunflower in as few blocks as possible.",
        "4-5 Nested Loops 1_instruction": "Complete the code to draw these triangles.  The first one is done for you.  Hint:  3 triangles in a 360 degree rotation.",
        "4-5 Nested Loops 10_instruction": "Draw the last row of stars on this flag by looping the provided blocks. The stars are 50 pixels apart, but remember that the stars themselves are 30 pixels wide.",
        "4-5 Nested Loops 11_instruction": "Can you draw these 10 squares of this sidewalk using a nested loop? Each square is 30 pixels.",
        "4-5 Nested Loops 12_instruction": "Can you draw these 36 triangles using a nested loop?",
        "4-5 Nested Loops 2_instruction": "Now nest this loop inside another loop to draw 10 triangles.  This is called a \"nested\" loop.  ",
        "4-5 Nested Loops 3_instruction": "Create a sun by nesting the starter code in another loop.\n\nTo get this cool design with a hollow center, you'll need to jump forward by the length of the triangle before turning.",
        "4-5 Nested Loops 5_instruction": "Loop the given code to create a windmill.",
        "4-5 Nested Loops 6_instruction": "Can you draw a hexagon by looping the triangle code?",
        "4-5 Nested Loops 7_instruction": "Loop this design 10 times. \n\nHow much do you have to turn each time you loop?",
        "4-5 Nested Loops 8_instruction": "Loop this shape 6 times. \n\nHow much do you have to turn each time you loop? ",
        "4-5 Nested Loops 9_instruction": "Draw the teeth in the alligator's mouth!",
        "4-5 Nested Loops Assessment 1_instruction": "Assessment: Use a nested loop to complete the design.",
        "4-5 While Loops 1_instruction": "Move me to the hole and fill it with two shovelfuls of dirt, using the `fill` block.",
        "4-5 While Loops 2_instruction": "Move me to the pile of dirt and remove it with 5 shovel scoops, using the `remove 1` block.",
        "4-5 While Loops 3_instruction": "Use as few blocks as possible to complete this puzzle!  \n\nMove me to the pile and remove all the dirt, then move to the hole and fill it completely.",
        "4-5 While Loops 4_instruction": "Wow, look at that! \n\nI don't know how many shovelfuls of dirt this hole needs.  \nCan you write a program that keeps using the `fill` block until the ground is even?  ",
        "4-5 While Loops 5_instruction": "Wow, now there are two deep holes! Can you write a program that fills them both until the ground is even?",
        "4-5 While Loops 6_instruction": "Wow, now there is a large pile of dirt! Can you write a program that removes all of it so the ground is even?",
        "4-5 While Loops 7_instruction": "Wow, now there are three piles of dirt! Can you write a program that removes each of them until the ground is even?",
        "4-5 While Loops 8_instruction": " There is a really deep hole and a really large pile of dirt.  How many shovelfuls of dirt need to be moved around to make the ground flat?",
        "4-5 While Loops Assessment 1_instruction": "There are a lot of holes and piles.  Help me to fill and remove them to make the ground flat.",
        "AB_Debug_PlayLab2_instruction": "Why doesn't this game do anything?\n\nCan you find any \"hidden\" bugs?  Some are easier than others.",
        "AlgPD DR Free Play_instruction": "Create a function based on your own word problem.",
        "Alien Defender_instruction": "Project Idea: Make a defender game in Play Lab!",
        "Alien Defender_2018_instruction": "Project Idea: Make a defender game in Play Lab!",
        "AllTheThings Applab - Turtle move with button_instruction": "Add a button that moves the turtle when clicked.  (Click to see full instructions)",
        "AllTheThings: Pixelation - Lesson 14 - Make the Letter A_instruction": "Make a 3x5 letter 'A'. The widget is setup with the incorrect dimensions. Your first task is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then start entering pixel data.",
        "AllTheThings: Pixelation - Lesson 15 - Color Shades 4x4_instruction": "We start you out with the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4 - shades of gray.",
        "AllTheThings: Pixelation - Lesson 15 - Complete 3-bit color_instruction": "We start you with the 4x2 image Maddie was creating, but we've left out the last two squares. Finish off the image by figuring out which two colors are missing and encode them.",
        "App Lab test_instruction": "test",
        "AppLab_test02_instruction": "One sentence summary of the activity. Click to view full instructions.",
        "Applab AllTheThings ResourcesTab AllResources_instruction": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
        "Applab AllTheThings ResourcesTab MapReference_instruction": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
        "Applab AllTheThings ResourcesTab ReferenceLinks_instruction": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
        "Applab allthethings onRecordEvent_instruction": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
        "Applab test_instruction": "This level is submittable. For testing only!",
        "Artist - Nested Loops 1_instruction": "Complete the code to draw these triangles.  The first one is done for you.  Hint:  3 triangles in a 360 degree rotation.",
        "Artist - Nested Loops 10_instruction": "Draw the last row of stars on this flag by looping the provided blocks. The stars are 50 pixels apart, but remember that the stars themselves are 30 pixels wide.",
        "Artist - Nested Loops 11_instruction": "Can you draw these 10 squares of this sidewalk using a nested loop? Each square is 30 pixels.",
        "Artist - Nested Loops 12_instruction": "Can you draw these 36 triangles using a nested loop?",
        "Artist - Nested Loops 2_instruction": "Now nest this loop inside another loop to draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles complete a 360 degree rotation.  ",
        "Artist - Nested Loops 3_instruction": "Create a sun by nesting the starter code in another loop. This is called a nested loop.\n",
        "Artist - Nested Loops 5_instruction": "Loop the given code to create a windmill.",
        "Artist - Nested Loops 6_instruction": "Can you draw a hexagon by looping the triangle code?",
        "Artist - Nested Loops 7_instruction": "Loop this design 10 times. How much do you have to turn each time you loop? (Hint: What is 360 divided by 10?)",
        "Artist - Nested Loops 8_instruction": "Loop this design 6 times. How much do you have to turn each time you loop? (Hint: What is 360 divided by 6?)",
        "Artist - Nested Loops 9_instruction": "Draw the teeth in the alligator's mouth!",
        "Artist - Nested Loops Assessment 1_instruction": "Use a nested loop to complete the design.",
        "Artist Inspiration_instruction": "Free Play Inspiration: You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own.\n \nWant to know how our inspiration pattern was made? ",
        "Auto Open Function Editor_instruction": "You can call functions from inside other functions! Using your \"shape\" function as a base, create 3 house shapes each 20 pixels larger than the last starting at 50 pixels in length. Using a counter loop might be helpful. ",
        "Bee Recommended Blocks test_instruction": "Purple flowers may have either 1 or 0 nectar, but you don't know which one! Be careful not to collect nectar from a purple flower if it doesn't have any. Check if the nectar is equal to 1 by using the if block.",
        "Bergeron Robot Maze1_instruction": "Can you help me catch the naughty pig? Stack a couple of `move forward` blocks below the `when run` block and press \"Run\". ",
        "Big Game Animation 1 (copy 1)_instruction": "Now that you've learned to write simple linear functions, let's work on using them to add some movement to our game. Click play to see what your game can currently do (not much!), update any variables you like, and then click finish to move on.",
        "Big Game Animation 1_instruction": "Now that you've learned to write simple linear functions, let's work on using them to add some movement to our game. Click \"Run\" to see what your game can currently do (not much!), update any variables you like, and then click finish to move on.",
        "Big Game Animation 2 (copy 1)_instruction": "The function 'update-target' function takes the target's current x value, and returns an updated value. Complete the 'update-target' function so that it adds to the x value each time it is called. The more you add to x, the faster the target will go.",
        "Big Game Animation 2_instruction": "The update-target function takes the target's current x value, and returns an updated value. Complete the update-target function so that it adds to the x value each time it is called. The more you add to x, the faster the target will go.",
        "Big Game Animation 3_instruction": "The update-danger function should work just like update-target, except that the danger should move from the right side over towards the left. Complete update-danger to make the danger fly across the screen.",
        "Big Game Animation 4_instruction": "At this point in your game, your danger should run across the screen from right to left, and your target should run across from left to right. They don't ever come back on screen once they've left, but we'll take care of that later. Take a minute to make sure your game is working like you want it to, and then click \"Finish\" to move on.",
        "Big Game Booleans 1_instruction": "When you last worked on your game we got our target and danger sprites to fly across the screen, but they never come back. Click \"Run\" to see how your game is currently working, and then click finish and we'll work on making those sprites reappear on screen after they've left.",
        "Big Game Booleans 2_instruction": "Go to the Functions section of the toolbox and complete the safe-left? function so that it returns true if the sprite's x coordinate is greater than -50. If you're successful you should see the Danger go off the left side and then return on the right side.",
        "Big Game Booleans 3_instruction": "Now that you've got safe-left?, let's fill in safe-right? - it should take in a sprite's x coordinate and return true if that coordinate is less than 450. Once your safe-right? is complete you should see the Target go off the right side of the screen and return on the left.",
        "Big Game Booleans 4_instruction": "Complete the onscreen? function so that it checks whether both safe-left? and safe-right? are true.",
        "Big Game Booleans 5_instruction": "At this point your Danger should run across the screen from right to left, your Target should run across from left to right, and they should both return to the opposite side, repeatedly. Take a minute to make sure your game is working like you want it to, and then click \"Finish\" to move on.",
        "Big Game Collision 1 (copy 1)_instruction": "When you last worked on your game we got our target and danger sprites to fly across the screen, but they never come back. Click run to see how your game is currently working, and then click finish and we'll work on making those sprites reappear on screen after they've left.",
        "Big Game Collision 1_instruction": "At this point you've programmed a video game with a moving Target and Danger, both of which return to the screen once they've left, and a Player that responds to keyboard input. Click \"Run\" to see how your game is currently working, and then we'll dig into the final missing piece - collision detection!",
        "Big Game Collision 2_instruction": "To move the player up and down, we'll need to use a conditional block to figure out which key is pressed and respond accordingly. Computers read keypresses as numeric key codes - the up arrow is 38 and the down arrow is 40. You can lookup other key codes in your student workbook. Edit the 'update-player' function so that if moves the player up when the up arrow is pressed, or down when the down arrow is pressed.",
        "Big Game Collision 3_instruction": "Use the Distance Formula, so the distance function returns the distance between the player's center coordinates (px, py) and another sprite's center coordinates (cx, cy).",
        "Big Game Collision 4_instruction": "Complete the collide? function so that it returns true if the distance between two points is less than 100 pixels apart.",
        "Big Game Complete_instruction": "A demo of the completed CS in Algebra Big Game project",
        "Big Game Final_instruction": "You made it! At this point your game should be fully functioning, take some time to enjoy your new game and make any final tweaks to it. When you're happy with the final product, click Finish and you'll have an opportunity to share a link to your game. Good work!",
        "Big Game Player 1_instruction": "We're getting really close to a finished game! Last time you worked on your game, you used booleans to make your Target and Danger return to the screen once they've left. Click Run to see how your game looks right now, and then we'll get to making your Player move up and down.",
        "Big Game Player 2_instruction": "Edit the update-player function so the player moves up when the up arrow (keycode 38) is pressed, and moves down (keycode 40) when the down arrow is pressed.",
        "Big Game Testing_instruction": "A demo of the completed CS in Algebra Big Game project",
        "Big Game Vars 1 (copy 1)_instruction": "Let's get started on your Big Game! Here you'll see a whole bunch of placeholder code that you'll eventually replace with your own, but for now we're only going to worry about defining variables. Click \"Run\" to see what the game looks like with the default values.",
        "Big Game Vars 1_instruction": "Let's get started on your Big Game! Here you'll see a whole bunch of placeholder code that you'll eventually replace with your own, but for now we're only going to worry about defining variables. Click \"Run\" to see what the game looks like with the default values.",
        "Big Game Vars 2 (copy 1)_instruction": "The first step to making this game your own is to give it a good Title. Click edit on the 'title' and 'subtitle' variables and change them to something new.",
        "Big Game Vars 2_instruction": "The first step to making this game your own is to give it a good Title. Click edit on the title and subtitle variables and change them to something new.",
        "Big Game Vars 3 (copy 1)_instruction": "Now let's set the background for your new game. Edit the 'bg' variable and select a new background Image from the dropdown.",
        "Big Game Vars 3_instruction": "Now let's set the background for your new game. Edit the bg variable and select a new background Image from the dropdown.",
        "Big Game Vars 4 (copy 1)_instruction": "Awesome, now you can update the variables for your Player, Target, and Danger. Feel free to play with all of the variables at this point to make your game look like you'd like it to. Click 'finish' when you're done.",
        "Big Game Vars 4_instruction": "Awesome! Now you can update the variables for your Player, Target, and Danger. Feel free to play with all of the variables at this point to make your game look like you'd like it to. Click \"Finish\" when you're done.",
        "Brad Spooky House Copy_instruction": "Freeplay: Here are the functions you've written, and some more for you to play with. Draw something awesome! Play with the pen width to see how different your drawings look!",
        "Brad Spooky House_instruction": "Freeplay: Here are the functions you've written, and some more for you to play with. Draw something awesome! Play with the pen width to see how different your drawings look!",
        "Building a Foundation Assessment_instruction": "Build a three level pyramid, there are no other directions, so just play with the pieces until you get it!",
        "Busy Bee 2_instruction": "This bee has a lot of work to do! Do you notice any patterns that you can use to simplify your code?",
        "Busy Bee_instruction": "This bee has a lot of work to do! Do you notice any patterns that you can use to simplify your code?",
        "C3-Farmer While Loops 1_instruction": "Move me to the hole and fill it with two shovelfuls of dirt, using the \"fill\" block.",
        "C3-Farmer While Loops 2_instruction": "Move me to the pile of dirt and remove it with 5 shovel scoops, using the 'remove' block.",
        "C3-Farmer While Loops 3_instruction": "Move me to the pile and remove all of it, then move to the hole and fill it completely.  Hint:  Use as few blocks as possible.",
        "C3-Farmer While Loops 4_instruction": "Wow, I found a really deep hole! I don't know how many shovelfuls of dirt it needs.  Can you write a program that fills it until the ground is even?  Hint:  Try using the while loop this time.",
        "C3-Farmer While Loops 5_instruction": "Wow, now there are two deep holes! Can you write a program that fills them both until the ground is even?",
        "C3-Farmer While Loops 6_instruction": "Wow, now there is a large pile of dirt! Can you write a program that removes all of it so the ground is even?",
        "C3-Farmer While Loops 7_instruction": "Wow, now there are three piles of dirt! Can you write a program that removes each of them until the ground is even?",
        "C3-Farmer While Loops 8_instruction": " There is a really deep hole and a really large pile of dirt.  How many shovelfuls of dirt need to be moved around to make the ground flat?  Hint: Use the while loop for both.",
        "C3-Farmer While Loops Assessment 1_instruction": "There are a lot of holes and piles.  Help me to fill and remove them to make the ground flat.",
        "CDEF_debugging_flappy2_instruction": "Why doesn't this game work?",
        "CSD Hackathon Pt 1_instruction": "(Click to see full instructions)",
        "CSD Hackathon Pt 2_instruction": "(Click to see full instructions)",
        "CSD Hackathon Week 1_instruction": "(Click to see full instructions)",
        "CSD Hackathon Week 2_instruction": "(Click to see full instructions)",
        "CSD U3 Background Discuss_instruction": "Here's a program that looks pretty similar to what you've been writing, but may behave quite differently. You'll want to stop and discuss with the class before moving on.",
        "CSD U3 Background Experiment_instruction": "Here's a program that looks pretty similar to what you've been writing, but may behave quite differently. You'll want to stop and discuss with the class before moving on.",
        "CSD U3 Boolean Modify_instruction": "Modify the code so that all of the console.log commands print true",
        "CSD U3 Boolean Modify_2018_instruction": "Modify the code so that all of the console.log commands print true",
        "CSD U3 Boolean Predict_instruction": "What do you think this code will do when it is run? Predict what each console.log() command will print, then run the program to check your predictions.",
        "CSD U3 Boolean Predict_2018_instruction": "What do you think this code will do when it is run? Predict what each console.log() command will print, then run the program to check your predictions.",
        "CSD U3 Draw Loop Discuss_instruction": "Here's a program that looks pretty similar to what you've been writing, but may behave quite differently. You'll want to stop and discuss with the class before moving on.",
        "CSD U3 Draw Loop Experiment_instruction": "Try using some of the other shape functions you've learned in the draw loop. What happens when you use randomNumber() to generate some of the inputs?You'll want to stop and discuss with the class before moving on.",
        "CSD U3 Expressions calculator_instruction": "Add the numbers 1 through 10. Multiply the numbers 1 through 10. Check your answers with a neighbor.",
        "CSD U3 Frame Rate_instruction": "Slow down Gamelab Gary's animation with frameRate()",
        "CSD U3 Keypress Boolean-2018_instruction": "Modify the code so that all of the console.log commands print true",
        "CSD U3 Keypress Boolean_instruction": "Modify the code so that all of the console.log commands print true",
        "CSD U3 Keypress Boolean_2018_instruction": "Modify the code so that all of the console.log commands print true",
        "CSD U3 Keypress Watchers_instruction": "Modify the code so that all of the console.log commands print true",
        "CSD U3 Keypress Watchers_2018_instruction": "Modify the code so that all of the console.log commands print true",
        "CSD U3 L5 Freeplay_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "CSD U3 L5 Freeplay_2018_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "CSD U3 Mouse Input Bee 2_instruction": "Do this",
        "CSD U3 Mouse Input Bee 2_2018_instruction": "Do this",
        "CSD U3 Random Animation_instruction": "Use randomNumber() to animate Gary's mouth.",
        "CSD U3 Random Choice_instruction": "Use the randomNumber() block to generate either 0 or 1",
        "CSD U3 Random Color_instruction": "Could you use randomNumber() to pick random colors as well? Try setting one or more of the channels in the rgb block with a random number. What should the maximum value be?",
        "CSD U3 Random Intro_instruction": "What do you think this code will do when it is run? Make a prediction, then run this code 5 - 10 times, recording the output each time. Share your results with your neighbor.",
        "CSD U3 Random Min Max_instruction": "Using console.log() write a program that randomly returns a number in a range you define.",
        "CSD U3 Random Width Height_instruction": "Pick a shape block and use calls to randomNumber() in place of one or more of the parameters. Maker sure you run it a few times so you can see the effect of randomization.",
        "CSD U3 Simple Drawing - Animation 2_instruction": "Use randomNumber() on the x position and width of your cloud ellipses to introduce a bit of animation.",
        "CSD U3 Simple Drawing - Animation_instruction": "Use randomNumber() on the x position and width of your cloud ellipses to introduce a bit of animation.",
        "CSD U3 Simple Drawing - Background_instruction": "Put all of your code into a draw() loop and then add set the background to blue with the background() block.",
        "CSD U3 Simple Drawing - Personal Animation_instruction": "DO This",
        "CSD U3 Sprites intro sprites_instruction": "Do This",
        "CSD U3 Sprites intro sprites_2018 - Validation Test_instruction": "Do This",
        "CSD U3 Sprites intro sprites_2018_instruction": "Do This",
        "CSD U3 Variable Arithmetic pt2_instruction": "Predict: What two numbers will be displayed in the console?",
        "CSD U3 Variable Arithmetic_instruction": "Change the value \"size\" initialized to make a larger square.",
        "CSD U3 Variable Incrementation pt2_instruction": "Predict: What two numbers will be displayed in the console?",
        "CSD U3 Variable Incrementation_instruction": "Predict: What two numbers will be displayed in the console?",
        "CSD U3 Variables CHALLENGE gamelab gary_instruction": "Use variables to animate Game Lab Gary",
        "CSD U3 Variables Initialize_instruction": "Predict: What will get displayed in the console?",
        "CSD U3 Variables Intro_instruction": "Create your own variable ",
        "CSD U3 Variables Random_instruction": "Predict: What will get displayed in the console?",
        "CSD U3 Variables Reassign pt2_instruction": "Create and assign a new variable in a single line.",
        "CSD U3 Variables Reassign_instruction": "Predict: What will get displayed in the console?",
        "CSD U3 Variables Square Random Loop_instruction": "Test your predictions from the last level.",
        "CSD U3 Variables Square Random_instruction": "Change the value \"size\" initialized to make a larger square.",
        "CSD U3 Variables Square_instruction": "Change the value \"size\" initialized to make a larger square.",
        "CSD U3 Variables TEMPLATE square_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "CSD U3 Variables change circle size_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "CSD U3 Variables change circle size_2018_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "CSD U3 Variables create and assign_instruction": "Create and assign size in a single line of code.",
        "CSD U3 Variables draw loop newVars_instruction": "Extend this project to create your own random art visualization with variables.",
        "CSD U3 Variables draw loop rgb_instruction": "Assign the variables x1 and y1 random values inside the draw loop and use them to control where the square is drawn.",
        "CSD U3 Variables draw loop xy_instruction": "Assign the variables x1 and y1 random values inside the draw loop and use them to control where the square is drawn.",
        "CSD U3 Variables eyeBrows_instruction": "Predict what will happen when you move the assignment of eyeSize inside the draw loop. Then try it out",
        "CSD U3 Variables make a big square_instruction": "Change the value of size multiple times. How does it change your drawing?",
        "CSD U3 Variables make a square_instruction": "Change the value of size multiple times. How does it change your drawing?",
        "CSD U3 Variables multiple assignments_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "CSD U3 Variables naming rules v2-2018_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "CSD U3 Variables naming rules v2_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "CSD U3 Variables naming rules v2_2018_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "CSD U3 Variables naming rules_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "CSD U3 Variables random assignment_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "CSD U3 Variables random draw loop_instruction": "Predict what will happen when you move the assignment of eyeSize inside the draw loop. Then try it out",
        "CSD U3 Variables random drawing exemplar_instruction": "Check out this example randomized drawing.",
        "CSD U3 Variables random with assignment_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "CSD U3 Variables random with assignment_2018_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "CSD U3 Variables use value rect_instruction": "Predict: What will get displayed in the console?",
        "CSD U3 Variables write_instruction": "Use the write block to display the value of size",
        "CSD U3 Variables2 expressions in commands_instruction": "Use expressions inside a drawing command",
        "CSD U3 Variables2 expressions in variables_instruction": "Assign the value of each expression to a variable and console.log that variable.",
        "CSD U3 Variables2 expressions_instruction": "Use console.log to display the results of each expression. Then create your own.",
        "CSD U4 - Events Template_instruction": "Add a large red button to your screen using Design Mode. (Click for full instructions.)",
        "CSD U5 black white images pixelation 2_instruction": "Draw a smiley face (click here to see image)",
        "CSD U5 black white images pixelation 2_2018_instruction": "Draw a smiley face (click here to see image)",
        "CSD U5 black white images pixelation 3_instruction": "Change the width and height sliders to find the image (click here to see more)",
        "CSD U5 black white images pixelation 3_2018_instruction": "Change the width and height sliders to find the image (click here to see more)",
        "CSD U5 black white images pixelation 4_instruction": "Add eyebrows to the smiley face (click here to see the image)",
        "CSD U5 black white images pixelation 4_2018_instruction": "Add eyebrows to the smiley face (click here to see the image)",
        "CSD U5 black white images pixelation 5_instruction": "Draw anything you like",
        "CSD U5 black white images pixelation 5_2018_instruction": "Draw anything you like",
        "CSD U5 black white images pixelation_instruction": "Complete the X shape by typing 0s and 1s",
        "CSD U5 black white images pixelation_2018_instruction": "Complete the X shape by typing 0s and 1s",
        "CSD U6 params modify planes_instruction": "# Multi-plane Controller\n\nThis program moves the three planes using the board accelerometer and the on-screen check boxes.  Right now, only the red plane works.\n\n# Do This\n* Create a new `movePlane(name)` function that can move any plane.\n* Call the `movePlane(name)` function inside the event block, such that it only moves when its checkbox is checked.\n\n_Challenge: Right now the planes move way too fast.  Can you figure out how to change the code so they move more slowly?_",
        "CSD U6 params modify planes_2018_instruction": "# Multi-plane Controller\n\nThis program moves the three planes using the board accelerometer and the on-screen check boxes.  Right now, only the red plane works.\n\n# Do This\n* Create a new `movePlane(name)` function that can move any plane.\n* Call the `movePlane(name)` function inside the event block, such that it only moves when its checkbox is checked.\n\n_Challenge: Right now the planes move way too fast.  Can you figure out how to change the code so they move more slowly?_",
        "CSDU4 - AppLab - 1_instruction": "Read the documentation for penColor() and penWidth() before using them to draw the blue square.",
        "CSDU4 - AppLab - 2_instruction": "Write a program that acts as a simple calculator. (click to see full instructions)",
        "CSDU4 - AppLab - 3_instruction": "Use console to check the ending value of num. (Click to see full instructions)",
        "CSDU4 - AppLab - 4_instruction": " Use the Debug Commands to make a list of all the values rolled before a 6. (Click to see full instructions)",
        "CSDU4 - Design Mode - 1_instruction": "Add a button that moves the turtle when clicked.  (Click to see full instructions)",
        "CSDU4 - Design Mode - 10_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "CSDU4 - Design Mode - 11_instruction": "Experiment with different event types and select the one that you think is best. (Click to see full instructions)",
        "CSDU4 - Design Mode - 12_instruction": "Use the textLabel command to replace the button in your program with a text label. (Click to see full instructions)",
        "CSDU4 - Design Mode - 16_instruction": "Add an event handler for the button using the \"Insert and show\" link in the Design Mode Events tab. (Click to see full instructions).",
        "CSDU4 - Design Mode - 17_instruction": "Update the ID names and `console.log` messages to match the correct button. (Click to see full instructions.)",
        "CSDU4 - Design Mode - 18_instruction": "Fix the layout of the bullseye game. (Click to see full instructions)",
        "CSDU4 - Design Mode - 2_instruction": "Run a program with two buttons that have the same id to see the warning message in the console. Change the ids to make the program run without getting a warning message.",
        "CSDU4 - Design Mode - 24_instruction": "Add an Text Input box for the name and age. (Click to see full instructions)",
        "CSDU4 - Design Mode - 25_instruction": "Add an event handler to the Submit button so that when the button is clicked it will display the name entered in the text box to the console.  Use getText to get the value out of the text box. (Click to see full instructions)",
        "CSDU4 - Design Mode - 26_instruction": "Save the age and name of the user in variables (Click to see full instructions)",
        "CSDU4 - Design Mode - 27_instruction": "Output a message to the 'textArea' (Click to see full instructions)",
        "CSDU4 - Design Mode - 28_instruction": "Write a greeting to the user when they hit 'enter' in the text input, using the 'change' event. (Click to see full instructions)",
        "CSDU4 - Design Mode - 29_instruction": "Add a dropdown for their guess instead of promptNum (Click to see full instructions)",
        "CSDU4 - Design Mode - 30_instruction": "Show different die images for the random number generated. (Click to see full instructions)",
        "CSDU4 - Design Mode - 31_instruction": "Set up an event handler to respond to keypress events, and display event.key in the console. Hit keys on the keyboard to see what happens. (Click to see full instructions)",
        "CSDU4 - Design Mode - 32_instruction": "Try out the keyup and keydown events to see how they are different from keypress. (Click to see full instructions)",
        "CSDU4 - Design Mode - 33_instruction": "Change the code so the sound will only play when the up arrow is pressed. (Click to see full instructions)",
        "CSDU4 - Design Mode - 4_instruction": "Improve the button by choosing a descriptive and meaningful ID. (Click to see full instructions)",
        "CSDU4 - Design Mode - 5_instruction": "Debug the program by verifying your IDs are being referenced properly. (Click to see full instructions)",
        "CSDU4 - Design Mode - 6_instruction": "Debug the program by properly ordering your button commands and event handlers. (Click to see full instructions)",
        "CSDU4 - Design Mode - 7_instruction": "Debug the program by fixing the logical error within the program. (Click to see full instructions)",
        "CSDU4 - Design Mode - 8_instruction": "Move the button to the middle of the screen. (Click to see full instructions)",
        "CSDU4 nameAgeTemplate_instruction": "Add an Text Input box for the name and age. (Click to see full instructions)",
        "CSDU6 - Arrays - expressionsAsIndexes_instruction": "Write a program that displays a randomly chosen color from the array. (Click to see full instructions)",
        "CSDU6 - Arrays - indexPractice_instruction": "Write the contents of the array to the screen in numerical order. (Click to see full instructions)",
        "CSDU6 - Arrays - length_instruction": "Use list.length to determine the length of each array. (Click to see full instructions)",
        "CSDU6 - Arrays - lengthMinus1_instruction": "Use list.length - 1 to log the last item in the array to the console. (Click to see full instructions)",
        "CSDU6 - for loop - color buttons with for_instruction": "Write the contents of the array to the screen in numerical order. (Click to see full instructions)",
        "CSDU6 - for loop - color buttons_instruction": "Write the contents of the array to the screen in numerical order. (Click to see full instructions)",
        "CSDU6 - for loop - why for_instruction": "Write the contents of the array to the screen in numerical order. (Click to see full instructions)",
        "CSDU6 arrays rainbow_instruction": "Write the contents of the array to the screen in numerical order. (Click to see full instructions)",
        "CSDU6 arrays random_instruction": "Write a program that displays a randomly chosen color from the array. (Click to see full instructions)",
        "CSDU6 arrays select icons_instruction": "Write a program that displays a randomly chosen color from the array. (Click to see full instructions)",
        "CSDU6 arrays select rainbow_instruction": "Write the contents of the array to the screen in numerical order. (Click to see full instructions)",
        "CSDU6 arrays select rainbow_2018_instruction": "Write the contents of the array to the screen in numerical order. (Click to see full instructions)",
        "CSDU6 arrays select random_instruction": "Write a program that displays a randomly chosen color from the array. (Click to see full instructions)",
        "CSDU6 arrays select random_2018_instruction": "Write a program that displays a randomly chosen color from the array. (Click to see full instructions)",
        "CSDU6 arrays select variable_instruction": "Write a program that displays a randomly chosen color from the array. (Click to see full instructions)",
        "CSDU6 arrays select variable_2018_instruction": "Write a program that displays a randomly chosen color from the array. (Click to see full instructions)",
        "CSDU6 arrays variable_instruction": "Write a program that displays a randomly chosen color from the array. (Click to see full instructions)",
        "CSP Data Unit - Counting Multiple Things_instruction": "If you can count one thing you can count multiple things\n\nFind out how many people like something other than dogs and cats\n\nCount dogs\nCount cats\nCount total\nDo the math\n\nblank/ blank toal\n\nCan also use this to find percents from this\n\nx% are dog lovers",
        "CSP Data Unit -Counting Records - Easy Way_instruction": "ReadRecords with specific criteria \nfind the length of an array\n",
        "CSP Data Unit -Counting Records - Hard Way_instruction": "\n1. ReadRecords for all records\n2. Way to loop through and count\n",
        "CSP U4 - JSON Object Intro - Bad Way_instruction": "Trigger both the keyboard and mouse event and examine the event objects displayed in the console. Why might an object be the best way to store this information? (Click to see full instructions)",
        "CSP U4 - JSON Object Intro - Good Way_instruction": "Create an object with at least 5 values including at least one string and one number. (Click to see full instructions) ",
        "CSP U4 - Objects - createObject_instruction": "Create an object with at least 5 values including at least one string and one number. (Click to see full instructions) ",
        "CSP student contact info_instruction": "Please enter your email address.",
        "CSPU5 Add Screens to Chaser Game_instruction": "Recreate the game from the \"Chaser Game\" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)",
        "CSPU5 Add a 2nd Screen_instruction": "Make a 2 screen app with a black screen and a white screen. (Click to see detailed instructions)",
        "CSPU5 Add a 2nd Screen_2018_instruction": "Make a 2 screen app with a black screen and a white screen. (Click to see detailed instructions)",
        "CSPU5 Add full screen image to bg of chaser game_instruction": "Recreate the game from the \"Chaser Game\" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)",
        "CSPU5 Add full screen image to bg of chaser game_2018_instruction": "Recreate the game from the \"Chaser Game\" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)",
        "CSPU5 Add game over screen_instruction": "Recreate the game from the \"Chaser Game\" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)",
        "CSPU5 Add game over screen_2018_instruction": "Recreate the game from the \"Chaser Game\" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)",
        "CSPU5 Add onEvent from Design Mode_instruction": "Add an event handler for the button using the \"Insert and show\" link in the Design Mode Events tab. (Click to see full instructions).",
        "CSPU5 Add onEvent from Design Mode_2018_instruction": "Add an event handler for the button using the \"Insert and show\" link in the Design Mode Events tab. (Click to see full instructions).",
        "CSPU5 Add welcome screen to chaser game_instruction": "Recreate the game from the \"Chaser Game\" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)",
        "CSPU5 Add welcome screen to chaser game_2018_instruction": "Recreate the game from the \"Chaser Game\" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)",
        "CSPU5 Adding Screens Template_instruction": "Make a 2 screen app with a black screen and a white screen. (Click to see detailed instructions)",
        "CSPU5 Adding Screens Template_2018_instruction": "Make a 2 screen app with a black screen and a white screen. (Click to see detailed instructions)",
        "CSPU5 Debugging Overlapping Objects and Screen Events_instruction": "Recreate the \"Chaser Game\" from the last lesson using Design Mode. (Click to see full instructions.)",
        "CSPU5 Debugging Overlapping Objects and Screen Events_2018_instruction": "Recreate the \"Chaser Game\" from the last lesson using Design Mode. (Click to see full instructions.)",
        "CSPU5 First Time Console.log_instruction": "Add a 3 console.log messages and test them out. (Click to see full instructions.)",
        "CSPU5 First Time Console.log_2018_instruction": "Add a 3 console.log messages and test them out. (Click to see full instructions.)",
        "CSPU5 Layering and Deleting in Design Mode_instruction": "Fix the layout of the bullseye game. (Click to see full instructions)",
        "CSPU5 Layering and Deleting in Design Mode_2018_instruction": "Fix the layout of the bullseye game. (Click to see full instructions)",
        "CSPU5 Project - Multi Screen App_instruction": "Create your multi-screen app. (Click to see full instructions.)",
        "CSPU5 Use Console.log to update IDs_instruction": "Update the ID names and `console.log` messages to match the correct button. (Click to see full instructions.)",
        "CSPU5 Use setScreen for first time_instruction": "Make a 2 screen app which can switch back and forth between a black screen and a white screen using buttons. (Click to see detailed instructions.)",
        "CSPU5 Use setScreen for first time_2018_instruction": "Make a 2 screen app which can switch back and forth between a black screen and a white screen using buttons. (Click to see detailed instructions.)",
        "CSPU5_AddImageToChaserGame_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "CSPU5_AddImage_andMakeChaserGame_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "CSPU5_AddLabelToChaserGame_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "CSPU5_AddLabelToChaserGame_2018_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "CSPU5_Debugging predict unexpected behavior - two onEvents to one ID_instruction": "Predict what will happen. Once you've made a prediction, run the code to see what happens. (Click to see full instructions)",
        "CSPU5_Debugging predict unexpected behavior - two onEvents to one_2018_instruction": "Predict what will happen. Once you've made a prediction, run the code to see what happens. (Click to see full instructions)",
        "CSPU5_FinalizeChaserGame_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "CSPU5_Project - Multi Screen App_instruction": "Create your multi-screen app. (Click to see full instructions.)",
        "CSPU5_U3 - Arrays - Demo App_instruction": "Use the \"My Favorite Things\" app. How might this app be making use of an array? (Click to see full instructions)",
        "CSPU5_U3 - Arrays - Demo App_2018_instruction": "Use the \"My Favorite Things\" app. How might this app be making use of an array? (Click to see full instructions)",
        "CSPU5_U3 - Arrays - appendItem_instruction": "Create an array of odd numbers 1-11 by using appendItem. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - appendItem_2018_instruction": "Create an array of odd numbers 1-11 by using appendItem. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - assignment_instruction": "Use indexes to change the values in this array from 1 to 0. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - assignment2_instruction": "Calculate the sum of three values stored in an array. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - assignment2_2018_instruction": "Calculate the sum of three values stored in an array. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - assignment3_instruction": "Increase the value of each value in the randomly generated array by 1. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - assignment3_2018_instruction": "Increase the value of each value in the randomly generated array by 1. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - assignment_2018_instruction": "Use indexes to change the values in this array from 1 to 0. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - createFirstArray_instruction": "Create an array of the even numbers from 0 to 10 and display its contents with console.log. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - createFirstArray_2018_instruction": "Create an array of the even numbers from 0 to 10 and display its contents with console.log. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - expressionsAsIndexes_instruction": "Write a program that displays a randomly chosen color from the array. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - expressionsAsIndexes_2018_instruction": "Write a program that displays a randomly chosen color from the array. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings Counting Variable_instruction": "Create a global variable for the current index and use it to display the first item in the array. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings Counting Variable_2018_instruction": "Create a global variable for the current index and use it to display the first item in the array. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings Next_instruction": "Write code that allows the user to move forward through your list by clicking the \"Next\" button. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings Next_2018_instruction": "Write code that allows the user to move forward through your list by clicking the \"Next\" button. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings Prev_instruction": "Write code that allows the user to move backward through your list by clicking the \"Last\" button. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings Prev_2018_instruction": "Write code that allows the user to move backward through your list by clicking the \"Last\" button. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings addItem_instruction": "Write code that allows a user to add their own favorite things to the list. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings addItem_2018_instruction": "Write code that allows a user to add their own favorite things to the list. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings bounds_instruction": "Add if statements to your event handlers that prevent the global index from going out of bounds. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings bounds_2018_instruction": "Add if statements to your event handlers that prevent the global index from going out of bounds. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings createArray_instruction": "Create an array of words describing your favorite things. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings createArray_2018_instruction": "Create an array of words describing your favorite things. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings firstOutput_instruction": "Use setText to display the first item in the array. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings firstOutput_2018_instruction": "Use setText to display the first item in the array. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings giveIDs_instruction": "Give your UI elements descriptive and meaningful IDs. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings giveIDs_2018_instruction": "Give your UI elements descriptive and meaningful IDs. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings keepPlaying_instruction": "Make any other improvements you want! (Click to see full instructions)",
        "CSPU5_U3 - Arrays - favThings keepPlaying_2018_instruction": "Make any other improvements you want! (Click to see full instructions)",
        "CSPU5_U3 - Arrays - indexPractice_instruction": "Write the contents of the array to the screen in numerical order. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - indexPractice_2018_instruction": "Write the contents of the array to the screen in numerical order. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - insertingItems_instruction": "Insert items into an array to form a complete sentence. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - insertingItems_2018_instruction": "Insert items into an array to form a complete sentence. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - insertionErrors_instruction": "Run each command that references indexes that are out of bounds and observe the results. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - insertionErrors_2018_instruction": "Run each command that references indexes that are out of bounds and observe the results. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - introIndex_instruction": "Display the first and last element in the array. Display the number 5 from the array. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - introIndex_2018_instruction": "Display the first and last element in the array. Display the number 5 from the array. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - length_instruction": "Use list.length to determine the length of each array. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - lengthMinus1_instruction": "Use list.length - 1 to log the last item in the array to the console. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - lengthMinus1_2018_instruction": "Use list.length - 1 to log the last item in the array to the console. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - length_2018_instruction": "Use list.length to determine the length of each array. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - remove_instruction": "Remove items from an array to form a complete sentence. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - remove_2018_instruction": "Remove items from an array to form a complete sentence. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - stringsInArrays_instruction": "Write a sentence word by word by adding strings to an array. (Click to see full instructions)",
        "CSPU5_U3 - Arrays - stringsInArrays_2018_instruction": "Write a sentence word by word by adding strings to an array. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - 200dots_instruction": "Add a loop to your program that draws 200 dots on your canvas. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - 200dots_2018_instruction": "Add a loop to your program that draws 200 dots on your canvas. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - One Dot sprayPaint_instruction": "Write code that redraws your image using a dot whose x and y locations use offsetX and offsetY with a small random value added. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - One Dot sprayPaint_2018_instruction": "Write code that redraws your image using a dot whose x and y locations use offsetX and offsetY with a small random value added. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - appendToArray_instruction": "Create an array to store each event parameter. Append each event parameter to this array within your event handler. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - appendToArray_2018_instruction": "Create an array to store each event parameter. Append each event parameter to this array within your event handler. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - changeToMouseMove_instruction": "Change your program so that dots are drawn at the location of the mouse as the user moves the mouse on the canvas. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - changeToMouseMove_2018_instruction": "Change your program so that dots are drawn at the location of the mouse as the user moves the mouse on the canvas. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - clickToAdd_instruction": "Change your program so that dots are added to the canvas when the user clicks on it. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - clickToAdd_2018_instruction": "Change your program so that dots are added to the canvas when the user clicks on it. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - delete_instruction": "Create a button that deletes the drawing by clearing the canvas and removing all stored values. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - delete_2018_instruction": "Create a button that deletes the drawing by clearing the canvas and removing all stored values. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - draw at click point_instruction": "Change your program so that dots are drawn at the location of the mouse click. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - draw at click point_2018_instruction": "Change your program so that dots are drawn at the location of the mouse click. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - freePlay_instruction": "Extend the functionality of one of the effects, or create an entirely new one of your own. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - freePlay_2018_instruction": "Extend the functionality of one of the effects, or create an entirely new one of your own. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - introCanvas_instruction": "Add a canvas to your app and set it to be the active canvas. Then add a large dot to your canvas. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - introCanvas_2018_instruction": "Add a canvas to your app and set it to be the active canvas. Then add a large dot to your canvas. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - movementFunction fix Orig_instruction": "Modify the \"Original\" button event handler so that it takes the movement of the mouse into account. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - movementFunction fix Orig_2018_instruction": "Modify the \"Original\" button event handler so that it takes the movement of the mouse into account. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - movementFunction_instruction": "Write a function that takes the movement of the mouse as input and generates a line width as output. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - movementFunction_2018_instruction": "Write a function that takes the movement of the mouse as input and generates a line width as output. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - redrawOriginal_instruction": "Write a function that processes your array, redrawing the dots as they originally appeared. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - redrawOriginal_2018_instruction": "Write a function that processes your array, redrawing the dots as they originally appeared. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - redrawRandom_instruction": "Set up a button and event handler for the random function. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - redrawRandom2_instruction": "Write a function that processes your array, redrawing every dot with a random size. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - redrawRandom2_2018_instruction": "Write a function that processes your array, redrawing every dot with a random size. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - redrawRandom_2018_instruction": "Set up a button and event handler for the random function. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - shiftKey_instruction": "Add an if statement to your event handler so dots are only drawn when the shift key is pressed. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - shiftKey_2018_instruction": "Add an if statement to your event handler so dots are only drawn when the shift key is pressed. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - sketch_instruction": "Write code that redraws your image using a sketch effect. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - sketch_2018_instruction": "Write code that redraws your image using a sketch effect. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - sprayPaint_instruction": "Update the spray paint code so that it redraws your image using multiple random dots instead of using a nested for loop. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - sprayPaint_2018_instruction": "Update the spray paint code so that it redraws your image using multiple random dots instead of using a nested for loop. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - transparentDots_instruction": "Change the colors of your dots so they have a fully transparent stroke and partially transparent fill. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - transparentDots_2018_instruction": "Change the colors of your dots so they have a fully transparent stroke and partially transparent fill. (Click to see full instructions)",
        "CSPU5_U3 - Canvas - usingOffsetXY_instruction": "Add a console.log command inside the function of your event handler. Use it to display the event parameter. Click on the screen to see the contents of the event parameter (Click to see full instructions)",
        "CSPU5_U3 - Canvas - usingOffsetXY_2018_instruction": "Add a console.log command inside the function of your event handler. Use it to display the event parameter. Click on the screen to see the contents of the event parameter (Click to see full instructions)",
        "CSPU5_U3 - Conditional Basics - 6_instruction": "Add a setText after the if statement to \"Nope. Guess again.\" (Click to see full instructions)",
        "CSPU5_U3 - Conditionals - Combine AND OR Simple_instruction": "Write an if statement that uses AND and OR to display \"Sleep in!\" if it's the weekend and the user is a teenager. (Click to see full instructions.",
        "CSPU5_U3 - Conditionals - Combine AND OR Simple_2018_instruction": "Write an if statement that uses AND and OR to display \"Sleep in!\" if it's the weekend and the user is a teenager. (Click to see full instructions.",
        "CSPU5_U3 - Conditionals - Combine AND OR and NOT_instruction": "Write an if statement that uses AND and OR to display \"Time to go to school!\" if it's not the weekend and the user is under 18. (Click to see full instructions.)",
        "CSPU5_U3 - Conditionals - Combine AND OR and NOT_2018_instruction": "Write an if statement that uses AND and OR to display \"Time to go to school!\" if it's not the weekend and the user is under 18. (Click to see full instructions.)",
        "CSPU5_U3 - Conditionals - Simple AND_instruction": "Write an if statement that uses AND to display \"You are a teenager.\" if the user enters an age between 13 and 19. (Click to see full instructions)",
        "CSPU5_U3 - Conditionals - Simple AND_2018_instruction": "Write an if statement that uses AND to display \"You are a teenager.\" if the user enters an age between 13 and 19. (Click to see full instructions)",
        "CSPU5_U3 - Conditionals - Simple OR_instruction": "Write an if statement that uses OR to display \"It's the weekend!\" if the user enters a weekend day at the prompt. (Click to see full instructions)",
        "CSPU5_U3 - Conditionals - Simple OR_2018_instruction": "Write an if statement that uses OR to display \"It's the weekend!\" if the user enters a weekend day at the prompt. (Click to see full instructions)",
        "CSPU5_U3 - Design Mode - Console Log_instruction": "Update the ID names and `console.log` messages to match the correct button. (Click to see full instructions.)",
        "CSPU5_U3 - Design Mode - Layers and Delete_instruction": "Fix the layout of the bullseye game. (Click to see full instructions)",
        "CSPU5_U3 - Design Mode - Multi Screens 2_instruction": "Make a 2 screen app which can switch back and forth between a black screen and a white screen using buttons. (Click to see detailed instructions.)",
        "CSPU5_U3 - Design Mode - Multi Screens_instruction": "Make a 2 screen app with a black screen and a white screen. (Click to see detailed instructions)",
        "CSPU5_U3 - Design Mode - WTF Console Log_instruction": "Add a 3 console.log messages and test them out. (Click to see full instructions.)",
        "CSPU5_U3 - Design Mode -Recreate Beyond Buttons_instruction": "Recreate the game from the \"Chaser Game\" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)",
        "CSPU5_U3 - Design Mode 1_instruction": "Add a large red button to your screen using Design Mode. (Click for full instructions.)",
        "CSPU5_U3 - Design Mode 1_2018_instruction": "Add a large red button to your screen using Design Mode. (Click for full instructions.)",
        "CSPU5_U3 - Dice - Dropdown and Score_instruction": "Add guess and score to the Dice Game (Click to see full instructions)",
        "CSPU5_U3 - Dice - Dropdown with Strings_instruction": "Add a dropdown for difficulty level that prints the difficulty level in the console. (Click to see full instructions)",
        "CSPU5_U3 - Dice - If_instruction": "Show different die images for the random number generated. (Click to see full instructions)",
        "CSPU5_U3 - Dice - Nested_instruction": "Use nested if statements to make the scoring different for the different game levels. (Click to see full instructions)",
        "CSPU5_U3 - High Low - Debug_instruction": "Debug the order of the conditionals so that it will actually tell the user when their guess is close. (Click to see full instructions)",
        "CSPU5_U3 - High Low - Debug_2018_instruction": "Debug the order of the conditionals so that it will actually tell the user when their guess is close. (Click to see full instructions)",
        "CSPU5_U3 - High Low - Dropdown_instruction": "Add a dropdown for their guess instead of promptNum (Click to see full instructions)",
        "CSPU5_U3 - High Low - Else if_instruction": "Add an else-if statement in order to tell the user if their guess is high or low instead of just wrong. (Click to see full instructions)",
        "CSPU5_U3 - High Low - Else if_2018_instruction": "Add an else-if statement in order to tell the user if their guess is high or low instead of just wrong. (Click to see full instructions)",
        "CSPU5_U3 - High Low - Else_instruction": "Add an else statement so that the program will tell the user when they are right and when they are wrong. (Click to see full instructions)\n",
        "CSPU5_U3 - High Low - If_instruction": "Add code to the if statement that indicates the user guessed the secret number. (Click to see full instructions)",
        "CSPU5_U3 - Keys - Add Image URLs_instruction": "Add image URLs to your array. Replace the text area with an image and setText with setImageURL. Then test your app! (Click to see full instructions)",
        "CSPU5_U3 - Keys - Add Image URLs_2018_instruction": "Add image URLs to your array. Replace the text area with an image and setText with setImageURL. Then test your app! (Click to see full instructions)",
        "CSPU5_U3 - Keys - Buttons and Keys_instruction": "Have the program respond the same way for both clicking images on the screen and hitting the up and down keys on the keyboard. (Click to see full instructions)",
        "CSPU5_U3 - Keys - Buttons and Keys_2018_instruction": "Have the program respond the same way for both clicking images on the screen and hitting the up and down keys on the keyboard. (Click to see full instructions)",
        "CSPU5_U3 - Keys - Demo App_instruction": "Play with the image scroller. Press the left and right arrows to progress through the images.",
        "CSPU5_U3 - Keys - Demo App_2018_instruction": "Play with the image scroller. Press the left and right arrows to progress through the images.",
        "CSPU5_U3 - Keys - Final Image Scroller_instruction": "Update the image scroller to respond to buttons and key presses. (Click to see full instructions)",
        "CSPU5_U3 - Keys - Functions_instruction": "Write doUpArrow and doDownArrow functions and call the functions instead of duplicating the code. (Click to see full instructions)",
        "CSPU5_U3 - Keys - Functions_2018_instruction": "Write doUpArrow and doDownArrow functions and call the functions instead of duplicating the code. (Click to see full instructions)",
        "CSPU5_U3 - Keys - Key Up and Down_instruction": "Try out the keyup and keydown events to see how they are different from keypress. (Click to see full instructions)",
        "CSPU5_U3 - Keys - Key Up and Down_2018_instruction": "Try out the keyup and keydown events to see how they are different from keypress. (Click to see full instructions)",
        "CSPU5_U3 - Keys - Multiple Keys_instruction": "Play a different sound when the down arrow is pressed. (Click to see full instructions)",
        "CSPU5_U3 - Keys - Multiple Keys_2018_instruction": "Play a different sound when the down arrow is pressed. (Click to see full instructions)",
        "CSPU5_U3 - Loops -  Complex Condition_instruction": "Change the boolean expression for the while loop so that it will stop when both dice are greater than or equal to 5. (Click to see full instructions)",
        "CSPU5_U3 - Loops -  Complex Condition_2018_instruction": "Change the boolean expression for the while loop so that it will stop when both dice are greater than or equal to 5. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 1_instruction": "Change the condition for the while loop to check if the variable num is less than 90. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 10_instruction": "Write a program that simulates the rolling of two dice. Roll the dice repeatedly until the sum of the dice is either 7 or 11.",
        "CSPU5_U3 - Loops - 10_2018_instruction": "Write a program that simulates the rolling of two dice. Roll the dice repeatedly until the sum of the dice is either 7 or 11.",
        "CSPU5_U3 - Loops - 11_instruction": "Fix the condition so that it keeps rolling the die as long as the value is not a 2 or a 3 instead of rolling infinitely. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 11_2018_instruction": "Fix the condition so that it keeps rolling the die as long as the value is not a 2 or a 3 instead of rolling infinitely. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 12_instruction": "Change the code so that it prints the string \"Hi\" 5 times. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 12_2018_instruction": "Change the code so that it prints the string \"Hi\" 5 times. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 14_instruction": "Change the loop condition to prevent the infinite loop and stop counting once the count is past 30. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 14_2018_instruction": "Change the loop condition to prevent the infinite loop and stop counting once the count is past 30. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 15_instruction": "Count the number of times the sum of the dice is 12. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 15_2018_instruction": "Count the number of times the sum of the dice is 12. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 1_2018_instruction": "Change the condition for the while loop to check if the variable num is less than 90. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 2_instruction": "Try creating an infinite loop using !=, > and <. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 2_2018_instruction": "Try creating an infinite loop using !=, > and <. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 3_instruction": "Change the if statement to a while loop so the program will run until it rolls a 6. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 3_2018_instruction": "Change the if statement to a while loop so the program will run until it rolls a 6. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 4_instruction": "Use the Debug Commands to make a list of all the values rolled before a 6. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 4_2018_instruction": "Use the Debug Commands to make a list of all the values rolled before a 6. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 5_instruction": "Add code inside the while loop which will update the variable num so that the condition will eventually become false. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 5_2018_instruction": "Add code inside the while loop which will update the variable num so that the condition will eventually become false. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 6_instruction": "Fix the problem so the loop will run at least once. Change the initial value of num to a dummy value such as -1. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 6_2018_instruction": "Fix the problem so the loop will run at least once. Change the initial value of num to a dummy value such as -1. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 7_instruction": "Without adding any lines of code, reorder the code so that it prints all the values of num. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 7_2018_instruction": "Without adding any lines of code, reorder the code so that it prints all the values of num. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 8_instruction": "Debug which number is not getting printed and add a write statement to display that value. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 8_2018_instruction": "Debug which number is not getting printed and add a write statement to display that value. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 9_instruction": " Modify the condition so that it keeps rolling as long as both are less than 3. (Click to see full instructions)",
        "CSPU5_U3 - Loops - 9_2018_instruction": " Modify the condition so that it keeps rolling as long as both are less than 3. (Click to see full instructions)",
        "CSPU5_U3 - Loops - Minus Minus_instruction": "Change the code to count down from 10 to 1. (Click to see full instructions)",
        "CSPU5_U3 - Loops - Minus Minus_2018_instruction": "Change the code to count down from 10 to 1. (Click to see full instructions)",
        "CSPU5_U3 - Loops - Plus Plus_instruction": "Change the code to use count++ instead of count = count + 1.  (Click to see full instructions)",
        "CSPU5_U3 - Loops - Plus Plus_2018_instruction": "Change the code to use count++ instead of count = count + 1.  (Click to see full instructions)",
        "CSPU5_U3 - Loops - Typing in Console_instruction": "Use console to check the ending value of num. (Click to see full instructions)",
        "CSPU5_U3 - Loops - Typing in Console_2018_instruction": "Use console to check the ending value of num. (Click to see full instructions)",
        "CSPU5_U3 - Loops - minus = operator_instruction": "Update the code to use the -= operator to count from 30 down to 0 by 3's. (Click to see full instructions)",
        "CSPU5_U3 - Loops - minus = operator_2018_instruction": "Update the code to use the -= operator to count from 30 down to 0 by 3's. (Click to see full instructions)",
        "CSPU5_U3 - Loops - plus and minus = operator_instruction": "Update the code to use the += operator. (Click to see full instructions)",
        "CSPU5_U3 - Loops - plus and minus = operator_2018_instruction": "Update the code to use the += operator. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Add 5_instruction": "Add 5 to all the values in an array (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Add 5_2018_instruction": "Add 5 to all the values in an array (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Counting Times_instruction": "Count the number of times 5 appears in an array. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Counting Times_2018_instruction": "Count the number of times 5 appears in an array. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Divid by 2_instruction": "Divide every value in the array by 2. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Divid by 2_2018_instruction": "Divide every value in the array by 2. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Find Min_instruction": "Complete the findMinVal function to find and display the smallest value in an array  (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Find Min_2018_instruction": "Complete the findMinVal function to find and display the smallest value in an array  (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - General Search Param_instruction": "Add a second parameter to the search function for the value to search for.  (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - General Search Param_2018_instruction": "Add a second parameter to the search function for the value to search for.  (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Intro For Loop_instruction": "Add a for loop with a console.log inside and test out the 3 pieces of the for loop. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Intro For Loop_2018_instruction": "Add a for loop with a console.log inside and test out the 3 pieces of the for loop. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Linear Search_instruction": "Visit every element in the array and display \"true\" if the value is a 5, and \"false\" otherwise. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Linear Search_2018_instruction": "Visit every element in the array and display \"true\" if the value is a 5, and \"false\" otherwise. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Loop Array If_instruction": "Use an if statement to only display the values in the array that are greater than 5. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Loop Array If_2018_instruction": "Use an if statement to only display the values in the array that are greater than 5. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Make it a Function - add list param_2018_instruction": "Create a function that takes a list parameter and prints if the list contains a 5. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Make it a Function - add list parameter_instruction": "Create a function that takes a list parameter and prints if the list contains a 5. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Make it a Function_instruction": "Move the code that searches the list for a 5 into a function called \"search\". (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Make it a Function_2018_instruction": "Move the code that searches the list for a 5 into a function called \"search\". (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Print Array_instruction": "Use a for loop to print out all the values in an array. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Print Array_2018_instruction": "Use a for loop to print out all the values in an array. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Printing Single True_instruction": "Process the array and display a single \"true\" if the array contains a 5 or a single \"false\" if it does not.  (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Printing Single True_2018_instruction": "Process the array and display a single \"true\" if the array contains a 5 or a single \"false\" if it does not.  (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Search with Boolean Var_instruction": "Make a boolean variable to use as a flag to keep track of whether there is a 5 in the array. (Click to see full instructions)",
        "CSPU5_U3 - Loops And Arrays - Search with Boolean Var_2018_instruction": "Make a boolean variable to use as a flag to keep track of whether there is a 5 in the array. (Click to see full instructions)",
        "CSPU5_U3 - Movie Bot - Multiple If Sequences_instruction": "Add another set of if, else if, and else statements inside the question if statement to check for keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)",
        "CSPU5_U3 - Movie Bot - Nested Motivation_instruction": "Add a separate set of if statements to check for a \"?\" in the input. (Click to see full instructions)",
        "CSPU5_U3 - Movie Bot - When Multiple If Statements_instruction": "Add an if and else-if statement that checks for please and thank you. (Click to see full instructions)",
        "CSPU5_U3 - Movie Bot - toLowerCase_instruction": "Use the toLowerCase command to change all user input into lowercase letters after they enter it. (Click to see full instructions)",
        "CSPU5_U3 - Practice Create Performance Task_instruction": "Design and implement your practice Create Performance Task. (Click to see full instructions)",
        "CSPU5_U3 - Return Values - constrainTurtle_instruction": "Use constrain in this simple app to keep the turtle from driving off the screen.  (Click to see full instructions)",
        "CSPU5_U3 - Return Values - constrainTurtle_2018_instruction": "Use constrain in this simple app to keep the turtle from driving off the screen.  (Click to see full instructions)",
        "CSPU5_U3 - Return Values - debuggingConstrain_instruction": "Correct the error in constrain so that it returns the appropriate value.  (Click to see full instructions)",
        "CSPU5_U3 - Return Values - debuggingConstrain_2018_instruction": "Correct the error in constrain so that it returns the appropriate value.  (Click to see full instructions)",
        "CSPU5_U3 - Return Values - debuggingMaxVal_instruction": "Correct the error in maxVal so that it correctly reports the maximum value.  (Click to see full instructions)",
        "CSPU5_U3 - Return Values - debuggingMaxVal_2018_instruction": "Correct the error in maxVal so that it correctly reports the maximum value.  (Click to see full instructions)",
        "CSPU5_U3 - Return Values - useMinVal_instruction": "Call minVal within the console.log statement to calculate the minimum of two values.  (Click to see full instructions)",
        "CSPU5_U3 - Return Values - useMinVal_2018_instruction": "Call minVal within the console.log statement to calculate the minimum of two values.  (Click to see full instructions)",
        "CSPU5_U3 - Return Values - wrapTurtle_instruction": "Write wrap in this simple app to let the turtle \"wrap\" to the other side of the screen when it goes off.  (Click to see full instructions)",
        "CSPU5_U3 - Return Values - wrapTurtle_2018_instruction": "Write wrap in this simple app to let the turtle \"wrap\" to the other side of the screen when it goes off.  (Click to see full instructions)",
        "CSPU5_U3 - Return Values - writeMaxVal_instruction": "Write the function maxVal and then use it within the console.log statement to calculate the maximum of two values.  (Click to see full instructions)",
        "CSPU5_U3 - Return Values - writeMaxVal_2018_instruction": "Write the function maxVal and then use it within the console.log statement to calculate the maximum of two values.  (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 1_instruction": "Use a while loop to \"flip a coin 10 times\" and write the values to the screen. (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 1_2018_instruction": "Use a while loop to \"flip a coin 10 times\" and write the values to the screen. (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 2.1_instruction": "Change your looping condition so the simulation runs until there are 5 heads flipped. (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 2.1_2018_instruction": "Change your looping condition so the simulation runs until there are 5 heads flipped. (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 2.5_instruction": "Run your simulation to get the full 10,000 heads! How long did it take? (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 2.5_2018_instruction": "Run your simulation to get the full 10,000 heads! How long did it take? (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 2_instruction": "Keep track of how many heads (1's) your program generates and print the results to the screen. (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 2_2018_instruction": "Keep track of how many heads (1's) your program generates and print the results to the screen. (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 3_instruction": "Add functionality that counts how many heads in a row are flipped. (Click to see full instructions)\n",
        "CSPU5_U3 - Simulation - 3_2018_instruction": "Add functionality that counts how many heads in a row are flipped. (Click to see full instructions)\n",
        "CSPU5_U3 - Simulation - 4_instruction": "Update your while loop's condition so the the coin flips until there are three heads in a row. (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 4_2018_instruction": "Update your while loop's condition so the the coin flips until there are three heads in a row. (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 5_instruction": "Change your while loop to run until you get a streak of 12 heads. How many flips did it take? (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 5_2018_instruction": "Change your while loop to run until you get a streak of 12 heads. How many flips did it take? (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 6_instruction": "Keep adding to your simulation. What do you want to explore next? (Click to see full instructions)",
        "CSPU5_U3 - Simulation - 6_2018_instruction": "Keep adding to your simulation. What do you want to explore next? (Click to see full instructions)",
        "CSPU5_U3 - User Input - Save getText To Variable_instruction": "Save the age and name of the user in variables (Click to see full instructions)",
        "CSPU5_U3 - User Input - Save getText To Variable_2018_instruction": "Save the age and name of the user in variables (Click to see full instructions)",
        "CSPU5_U3 - Variables - Set to Expression with Other Variables_instruction": "Write an expression that calculates the player's total score and stores it in the totalScore variable. The calculation is: the player's points times lives divided by the total time. (click to see full instructions)",
        "CSPU5_U3 - Variables - Set to Expression with Other Variables_2018_instruction": "Write an expression that calculates the player's total score and stores it in the totalScore variable. The calculation is: the player's points times lives divided by the total time. (click to see full instructions)",
        "CSPU5_U3 - Variables - Set to Expression_instruction": "Test out the new expressions. (Click to see full instructions)",
        "CSPU5_U3 - Variables - Set to Expression_2018_instruction": "Test out the new expressions. (Click to see full instructions)",
        "CSPU5_U3 Digital Assistant Design_instruction": "Pick a topic for your Digital Assistant and create the basic layout with a text input and text area. (Click to show full instructions)",
        "CSPU5_U3 Digital Assistant Set Text_instruction": "Have your digital assistant repeat back what the user types and include a canned response. (Click to see full instructions)",
        "CSPU5_U3 Digital Assistant Target_instruction": "Try out a demo of the Digital Assistant!",
        "CSPU5_U3 full clicker demo_instruction": "Clicker game - Try it out!",
        "CSPU5_U3 full clicker demo_2018_instruction": "Clicker game - Try it out!",
        "CSPU5_U3- Variables - Create And Assign_instruction": "On one line add a variable called \"lives\" and assign it the value 3. Print it to the console. (Click to see full instructions)",
        "CSPU5_U3- Variables - Create And Assign_2018_instruction": "On one line add a variable called \"lives\" and assign it the value 3. Print it to the console. (Click to see full instructions)",
        "CSPU5_U3- Variables - Text Mode_instruction": "1. Switch to text mode and type instructions; 2. drag blocks out into text mode; 3. experiment with code completion",
        "CSPU5_U3- Variables - Text Mode_2018_instruction": "1. Switch to text mode and type instructions; 2. drag blocks out into text mode; 3. experiment with code completion",
        "CSPU5_U3-Design Mode-ID and Event Handler_instruction": "Add an event handler for the button using the \"Insert and show\" link in the Design Mode Events tab. (Click to see full instructions).",
        "CSPU5_U3-Design Mode-Image_instruction": "Recreate the \"Chaser Game\" from the last lesson using Design Mode. (Click to see full instructions.)",
        "CSPU5_U313 Two Buttons with Ids_instruction": "Predict what will happen. Once you've made a prediction, run the code to see what happens. (Click to see full instructions)",
        "CSPU5_U313 drag Two Buttons_instruction": "Run a program with two buttons that have the same id to see the warning message in the console. Change the ids to make the program run without getting a warning message.",
        "CSPU5_U3L13 - Debug Id Problem_instruction": "Improve the button by choosing a descriptive and meaningful ID. (Click to see full instructions)",
        "CSPU5_U3L13 - Debugging 1_instruction": "Debug the program by verifying your IDs are being referenced properly. (Click to see full instructions)",
        "CSPU5_U3L13 - Debugging 2_instruction": "Debug the program by properly ordering your button commands and event handlers. (Click to see full instructions)",
        "CSPU5_U3L13 - Debugging 3_instruction": "Debug the program by fixing the logical error within the program. (Click to see full instructions)",
        "CSPU5_U3L13 - Debugging 3_2018_instruction": "Debug the program by fixing the logical error within the program. (Click to see full instructions)",
        "CSPU5_U3L13 - Debugging IDs case sensitive_instruction": "Debug the program by verifying your IDs are being referenced properly. (Click to see full instructions)",
        "CSPU5_U3L13 - Debugging IDs case sensitive_2018_instruction": "Debug the program by verifying your IDs are being referenced properly. (Click to see full instructions)",
        "CSPU5_U3L13 - Project_instruction": "Create your multi-screen app. (Click to see full instructions.)",
        "CSPU5_U3L13 - Turtle Driver Project_instruction": "Create a \"turtle driver\" that includes buttons to move the turtle forward and turn it left and right. (Click to see full instructions)",
        "CSPU5_U3L13 - Turtle move with button_instruction": "Add a button that moves the turtle when clicked.  (Click to see full instructions)",
        "CSPU5_U3L13 eventsDetails_instruction": "Add an event handler to the button to move the turtle forward. (Click to see full instructions)",
        "CSPU5_U3L14 - Assigning Random Value_instruction": "Write a program that simulates the rolling of two dice and reports their individual values as well as the sum. (click to see full instructions)",
        "CSPU5_U3L14 - Assigning Random Value_2018_instruction": "Write a program that simulates the rolling of two dice and reports their individual values as well as the sum. (click to see full instructions)",
        "CSPU5_U3L14 - Mini Calculator embed_instruction": "You will be prompted for two numbers, one right after the other.  See what happens.  Enter different numbers until you get the idea.",
        "CSPU5_U3L14 - Mini Calculator embed_2018_instruction": "You will be prompted for two numbers, one right after the other.  See what happens.  Enter different numbers until you get the idea.",
        "CSPU5_U3L14 - User Input Division calculator_instruction": "Write a program that acts as a simple calculator. (click to see full instructions)",
        "CSPU5_U3L14 - User Input Division calculator_2018_instruction": "Write a program that acts as a simple calculator. (click to see full instructions)",
        "CSPU5_U3L14 - Variable ReAssignment pt2_instruction": "Trace the code and predict what you think will be printed to the console. Then add a console.log statement at the end of the program to see the last value of someNum to see if your full prediction is correct. (click to see full Instructions)",
        "CSPU5_U3L14 - Variable ReAssignment pt2_2018_instruction": "Trace the code and predict what you think will be printed to the console. Then add a console.log statement at the end of the program to see the last value of someNum to see if your full prediction is correct. (click to see full Instructions)",
        "CSPU5_U3L14 - concatenate simple_instruction": "Modify the write statement on line 3 to combine text and variables together to make the app display a single line of text that shows the player's lives and score. (click to see full instructions)",
        "CSPU5_U3L14 - concatenate simple_2018_instruction": "Modify the write statement on line 3 to combine text and variables together to make the app display a single line of text that shows the player's lives and score. (click to see full instructions)",
        "CSPU5_U3L14 - moving memory challenge1_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "CSPU5_U3L14 - moving memory challenge1_2018_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "CSPU5_U3L14 - moving memory challenge2_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "CSPU5_U3L14 - moving memory challenge2_2018_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "CSPU5_U3L14 - moving memory challenge3_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "CSPU5_U3L14 - moving memory challenge3_2018_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "CSPU5_U3L14 - moving memory challenge4_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "CSPU5_U3L14 - moving memory challenge4_2018_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "CSPU5_U3L14 - moving memory challenge5_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "CSPU5_U3L14 - moving memory challenge5_2018_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "CSPU5_U3L14 - moving memory challenge6_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "CSPU5_U3L14 - moving memory challenge6_2018_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "CSPU5_U3L15 - Add reset button to UpDown app_instruction": "Add code so that clicking the start over button will reset the game and send you back to the main screen. (Click to see full instructions)",
        "CSPU5_U3L15 - Add reset button to UpDown app_2018_instruction": "Add code so that clicking the start over button will reset the game and send you back to the main screen. (Click to see full instructions)",
        "CSPU5_U3L15 - DEMO up down count practice app_instruction": "Try out the demo app (Click to see full instructions)",
        "CSPU5_U3L15 - DEMO up down count practice app_2018_instruction": "Try out the demo app (Click to see full instructions)",
        "CSPU5_U3L15 - Debug forget to update var on reset in UpDown app_instruction": "Run the app, and click the up or down button until you get to the gameOverScreen. Click 'Start Over' and try the app again. Find and fix the issue in the code. (Click to see full instructions)",
        "CSPU5_U3L15 - Debug forget to update var on reset in UpDown app_2018_instruction": "Run the app, and click the up or down button until you get to the gameOverScreen. Click 'Start Over' and try the app again. Find and fix the issue in the code. (Click to see full instructions)",
        "CSPU5_U3L15 - Debug if never triggers in UpDown app_instruction": "Run the app and use the up and down arrows to try to hit the gameOverScreen. You can't! Find and fix the issue in the code. (Click to see full instructions)",
        "CSPU5_U3L15 - Debug if never triggers in UpDown app_2018_instruction": "Run the app and use the up and down arrows to try to hit the gameOverScreen. You can't! Find and fix the issue in the code. (Click to see full instructions)",
        "CSPU5_U3L15 - Debugging Simple If-statements =v==_instruction": "Run the app, and click the up button. Then restart and run it again, and click the down button. Find and fix the issue in the code. (Click to see full instructions)",
        "CSPU5_U3L15 - Debugging Simple If-statements =v==_2018_instruction": "Run the app, and click the up button. Then restart and run it again, and click the down button. Find and fix the issue in the code. (Click to see full instructions)",
        "CSPU5_U3L15 - Simple If-statements in UpDown App_instruction": "Add an if statement so that the app changes screens when the count reaches -5. (Click to see full instructions)",
        "CSPU5_U3L15 - Simple If-statements in UpDown App_2018_instruction": "Add an if statement so that the app changes screens when the count reaches -5. (Click to see full instructions)",
        "CSPU5_U3L15 - add code to make count down work_instruction": "Write code to make the down arrow work as expected. (Click to see full instructions)",
        "CSPU5_U3L15 - add code to make count down work_2018_instruction": "Write code to make the down arrow work as expected. (Click to see full instructions)",
        "CSPU5_U3L15 - count upDown bug forget to set text_instruction": "Find the bug in the program and fix it. (Click to see full instructions)",
        "CSPU5_U3L15 - count upDown bug forget to set text_2018_instruction": "Find the bug in the program and fix it. (Click to see full instructions)",
        "CSPU5_U3L15 - count upDown bug logic error wrong update_instruction": "Find the bug in the program and fix it. (Click to see full instructions)",
        "CSPU5_U3L15 - count upDown bug logic error wrong update_2018_instruction": "Find the bug in the program and fix it. (Click to see full instructions)",
        "CSPU5_U3L15 - count upDown bug var not created globally_instruction": "Find the bug in the program and fix it. (Click to see full instructions)",
        "CSPU5_U3L15 - count upDown bug var not created globally_2018_instruction": "Find the bug in the program and fix it. (Click to see full instructions)",
        "CSPU5_U3L15 - global var example count up_instruction": "Look at the code for this app and see how the code works to update the count variable when the up arrow is clicked. (Click to see full instructions).",
        "CSPU5_U3L15 - global var example count up_2018_instruction": "Look at the code for this app and see how the code works to update the count variable when the up arrow is clicked. (Click to see full instructions).",
        "CSPU5_U3L15 - mini clicker update score_instruction": "Add code to update the score when the apple is clicked. (Click to see full instructions)",
        "CSPU5_U3L15 - mini clicker update score_2018_instruction": "Add code to update the score when the apple is clicked. (Click to see full instructions)",
        "CSPU5_U3L15 - practice with setText_instruction": "Use setText to complete the click event handler for the down arrow. (Click to see full instructions)",
        "CSPU5_U3L15 - practice with setText_2018_instruction": "Use setText to complete the click event handler for the down arrow. (Click to see full instructions)",
        "CSPU5_U3L15 - variable scoping problem debugging_instruction": "See if you can figure out why the code is no longer working. (Click to see full instructions)",
        "CSPU5_U3L15 - variable scoping problem debugging_2018_instruction": "See if you can figure out why the code is no longer working. (Click to see full instructions)",
        "CSPU5_U3L15 click add lives_instruction": "Add lives to the clicker game that decrement by 1 when the background image is clicked (Click to see full instructions)",
        "CSPU5_U3L15 click add lives_2018_instruction": "Add lives to the clicker game that decrement by 1 when the background image is clicked (Click to see full instructions)",
        "CSPU5_U3L15 full clicker app_instruction": "Complete your clicker game! (Click to see full instructions)",
        "CSPU5_U3L15 full clicker app_2018_instruction": "Complete your clicker game! (Click to see full instructions)",
        "CSPU5_U3L16 - challenge say hi app_instruction": "Write a greeting to the user when they hit 'enter' in the text input, using the 'change' event. (Click to see full instructions)",
        "CSPU5_U3L16 - chaserApp_instruction": "Create your own \"Chaser Game.\" (Click to see full instructions)",
        "CSPU5_U3L16 - chooseImages_instruction": "Replace the image in your application with one of your own. (Click to see full instructions)",
        "CSPU5_U3L16 - doubleQuotes_instruction": "Save a string inside a variable and log it to the console. (Click to see full instructions)",
        "CSPU5_U3L16 - doubleQuotes_2018_instruction": "Save a string inside a variable and log it to the console. (Click to see full instructions)",
        "CSPU5_U3L16 - intro getText_instruction": "Add an event handler to the Submit button so that when the button is clicked it will display the name entered in the text box to the console.  Use getText to get the value out of the text box. (Click to see full instructions)",
        "CSPU5_U3L16 - intro getText_2018_instruction": "Add an event handler to the Submit button so that when the button is clicked it will display the name entered in the text box to the console.  Use getText to get the value out of the text box. (Click to see full instructions)",
        "CSPU5_U3L16 - introSetPosition_instruction": "Move the buttons to the bottom of the screen. (Click to see full instructions)",
        "CSPU5_U3L16 - introStrings_instruction": "Save a string inside a variable and log it to the console. (Click to see full instructions)",
        "CSPU5_U3L16 - introStrings_2018_instruction": "Save a string inside a variable and log it to the console. (Click to see full instructions)",
        "CSPU5_U3L16 - newEventTypes_instruction": "Experiment with different event types and select the one that you think is best. (Click to see full instructions)",
        "CSPU5_U3L16 - outputWithTextArea_instruction": "Output a message to the 'textArea' (Click to see full instructions)",
        "CSPU5_U3L16 - outputWithTextArea_2018_instruction": "Output a message to the 'textArea' (Click to see full instructions)",
        "CSPU5_U3L16 - setPosition to fixed location_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "CSPU5_U3L16 - setPosition to move button_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "CSPU5_U3L16 - setPosition to move button_2018_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "CSPU5_U3L16 - singleSetPosition_instruction": "Move the button to the middle of the screen. (Click to see full instructions)",
        "CSPU5_U3L16 - text labels_instruction": "Use the textLabel command to replace the button in your program with a text label. (Click to see full instructions)",
        "CSPU5_U3L16 - textInput getText write_instruction": "Add an Text Input box for the name and age. (Click to see full instructions)",
        "CSPU5_U3L16 - textInput getText write_2018_instruction": "Add an Text Input box for the name and age. (Click to see full instructions)",
        "CSPU5_U3L16 - toUpper_instruction": "Make the name of the user appear in uppercase (Click to see full instructions)",
        "CSPU5_U3L16 - toUpper_2018_instruction": "Make the name of the user appear in uppercase (Click to see full instructions)",
        "CSPU5_U3L16 - use images_instruction": "Use the image command to replace the text label in your program with an image. (Click to see full instructions)",
        "CSPU5_U3L16 Mad Lib Clear Input_instruction": "Clear the user's previous text when the Play Again button is clicked (Click to see full instructions) ",
        "CSPU5_U3L16 Mad Lib Clear Input_2018_instruction": "Clear the user's previous text when the Play Again button is clicked (Click to see full instructions) ",
        "CSPU5_U3L16 Mad Lib Demo_instruction": "Mad Libs Demo - Try it out!",
        "CSPU5_U3L16 Mad Lib Demo_2018_instruction": "Mad Libs Demo - Try it out!",
        "CSPU5_U3L16 Mad Lib Student Setup_instruction": "Back to Mad Libs: To get started, set up the two screens for your Mad Libs app (Click to show full instructions)",
        "CSPU5_U3L16 Mad Lib Student Setup_2018_instruction": "Back to Mad Libs: To get started, set up the two screens for your Mad Libs app (Click to show full instructions)",
        "CSPU5_U3L16 Mad Lib getText_instruction": "Before setting the text area with your Mad Libs outline, get the user's text and incorporate their responses. (Click to see full instructions) ",
        "CSPU5_U3L16 Mad Lib getText_2018_instruction": "Before setting the text area with your Mad Libs outline, get the user's text and incorporate their responses. (Click to see full instructions) ",
        "CSPU5_U3L16 Mad Lib setText_instruction": "When the Next button is clicked, set the text area to have the main outline of your How-to Mad Libs (without the user's input). (Click to see full instructions) ",
        "CSPU5_U3L16 Mad Lib setText_2018_instruction": "When the Next button is clicked, set the text area to have the main outline of your How-to Mad Libs (without the user's input). (Click to see full instructions) ",
        "CSPU5_U3L16 Mad Lib toUpper_instruction": "Apply the toUpperCase and toLowerCase string functions to the user's text. (Click to see full instructions) ",
        "CSPU5_U3L16 Mad Lib toUpper_2018_instruction": "Apply the toUpperCase and toLowerCase string functions to the user's text. (Click to see full instructions) ",
        "CSPU5_U3L18 comparison operators_instruction": "Use console.log to print out the different boolean expressions below to see what information they return. (Click to see full instructions)",
        "CSPU5_U3L18 comparison operators_2018_instruction": "Use console.log to print out the different boolean expressions below to see what information they return. (Click to see full instructions)",
        "CSPU5_U3L19 - fix the var name syntax error v2_instruction": "Fix the error and get it to print the value of both variables (Click to see full instructions)",
        "CSPU5_U3L19 - fix the var name syntax error v2_2018_instruction": "Fix the error and get it to print the value of both variables (Click to see full instructions)",
        "CSPU5_U3L19 - test reassignment of two vars_instruction": "Predict the value of a and b. Add console.log statements to find out the actual value of a and b. (Click for full instructions)",
        "CSPU5_U3L19 - test reassignment of two vars_2018_instruction": "Predict the value of a and b. Add console.log statements to find out the actual value of a and b. (Click for full instructions)",
        "CSPU5_U3L19 - three basic ops of variables_instruction": "Add another variable called \"lives\" and set the value to 3. Print the value of the variable to the console. (Click to see full instructions)",
        "CSPU5_U3L19 - three basic ops of variables_2018_instruction": "Add another variable called \"lives\" and set the value to 3. Print the value of the variable to the console. (Click to see full instructions)",
        "CSPU5_U3L19 - variable reassignment challenge pt2_instruction": "Make a prediction about the ending values of a, b, and c. Then use console.log to check your understanding (Click to see full instructions)",
        "CSPU5_U3L19 - variable reassignment challenge pt2_2018_instruction": "Make a prediction about the ending values of a, b, and c. Then use console.log to check your understanding (Click to see full instructions)",
        "CSPU5_U3L19 - write var and string with same name v2_instruction": "Fix the code so that the values of both variables print to the console. (Click to see full instructions)",
        "CSPU5_U3L19 - write var and string with same name v2_2018_instruction": "Fix the code so that the values of both variables print to the console. (Click to see full instructions)",
        "CSPU5_U3L23 Chatbot Conditionals 1_instruction": "Add if, else if, and else statements to detect the movie genres Comedy, Romance, Action, and Horror. (Click to see full instructions)",
        "CSPU5_U3L24 Chatbot Basic Conditionals_instruction": "Check out the project description for instructions. (Click to see full instructions.)",
        "CSPU5_U3L24 Nested Conditionals 1_instruction": "Change all of the boolean expressions to use includes instead of ==. (Click to see full instructions)",
        "CSPU5_U3L24 Nested Conditionals 2_instruction": "Nest your movie genre if statements inside the if statements to check for a ? in the input. ",
        "CSPU5_U3L24 introIncludes_instruction": "Practice using the includes command. (Click to see full instructions)",
        "CSPU5_U3L25 - drag out key event_instruction": "Set up an event handler to respond to keypress events, and display event.key in the console. Hit keys on the keyboard to see what happens. (Click to see full instructions)",
        "CSPU5_U3L25 - drag out key event_2018_instruction": "Set up an event handler to respond to keypress events, and display event.key in the console. Hit keys on the keyboard to see what happens. (Click to see full instructions)",
        "CSPU5_U3L25 - play sound when up key_instruction": "Change the code so the sound will only play when the up arrow is pressed. (Click to see full instructions)",
        "CSPU5_U3L25 - play sound when up key_2018_instruction": "Change the code so the sound will only play when the up arrow is pressed. (Click to see full instructions)",
        "CSPU5_U3L26 AND operator_instruction": "Update the genre and rating if statements to give only one movie suggestion at a time. (Click to see full instructions)",
        "CSPU5_U3L26 OR operator_instruction": "Update the if statement to use an OR to check for a \"?\" as well as who, what, where, when, why, how in the user input. (Click to see full instructions)",
        "CSPU5_addDescriptiveIDsToTurtleDriver_instruction": "Improve the button by choosing a descriptive and meaningful ID. (Click to see full instructions)",
        "CSPU5_addDescriptiveIDsToTurtleDriver_2018_instruction": "Improve the button by choosing a descriptive and meaningful ID. (Click to see full instructions)",
        "CSPU5_basic if - DIY secret number_instruction": "Use console.log to print out the different boolean expressions below to see what information they return. (Click to see full instructions)",
        "CSPU5_basic if - DIY secret number_2018_instruction": "Use console.log to print out the different boolean expressions below to see what information they return. (Click to see full instructions)",
        "CSPU5_basic if - check driving age_instruction": "Use console.log to print out the different boolean expressions below to see what information they return. (Click to see full instructions)",
        "CSPU5_basic if - check driving age_2018_instruction": "Use console.log to print out the different boolean expressions below to see what information they return. (Click to see full instructions)",
        "CSPU5_basic if - voting examle_instruction": "Use console.log to print out the different boolean expressions below to see what information they return. (Click to see full instructions)",
        "CSPU5_basic if-else - driving age_instruction": "Use console.log to print out the different boolean expressions below to see what information they return. (Click to see full instructions)",
        "CSPU5_basic if-else - driving age_2018_instruction": "Use console.log to print out the different boolean expressions below to see what information they return. (Click to see full instructions)",
        "CSPU5_clickerGame_v1_template_instruction": "Create your own \"Chaser App\". (Click to see full instructions)",
        "CSPU5_clickerGame_v1_template_2018_instruction": "Create your own \"Chaser App\". (Click to see full instructions)",
        "CSPU5_moveTurtleOnButtonClick_instruction": "Add an event handler to the button to move the turtle forward. (Click to see full instructions)",
        "CSPU5_moveTurtleOnButtonClick_2018_instruction": "Add an event handler to the button to move the turtle forward. (Click to see full instructions)",
        "CSPU5_playWithEventTypes_instruction": "Debug the program by fixing the logical error within the program. (Click to see full instructions)",
        "CSPU5_playWithEventTypes_2018_instruction": "Debug the program by fixing the logical error within the program. (Click to see full instructions)",
        "CSPU5_setPosition to fixed location_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "CSPU5_setPosition to fixed location_2018_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "CSPU5_turtleDriver_add2ndButton_instruction": "Debug the program by verifying your IDs are being referenced properly. (Click to see full instructions)",
        "CSPU5_turtleDriver_add2ndButton_2018_instruction": "Debug the program by verifying your IDs are being referenced properly. (Click to see full instructions)",
        "Calc Circles of Eval .1_instruction": "You’ll be writing a kind of code called Evaluation Blocks, because each block of code evaluates to a single value. Change the ??? in this code so that the block evaluates to 5.",
        "Calc Circles of Eval .2_instruction": "This Evaluation Block is a multiplication function which takes two numbers and returns the product of those numbers. Edit this block so that it multiplies 2 * 5",
        "Calc Circles of Eval .3_instruction": "Here's a function for addition which takes two numbers and returns their sum. Use this Addition Block to add 3 + 6.",
        "Calc Circles of Eval .4_instruction": "Here we've nested an Addition Block inside a Multiplication Block. Complete this code so it multiplies 3 by (4 + 1)",
        "Calc Circles of Eval 1_instruction": "Every mathematical operator (+, -, *, /, and so on) can be represented by an Evaluation Block in code. Change the Evaluation Block to match the expression.",
        "Calc Circles of Eval 2_instruction": "Use a Multiplication Block to complete this code.",
        "Calc Circles of Eval 3_instruction": "Complete the Evaluation Blocks to match this statement.",
        "Calc Circles of Eval 4_instruction": "This code is missing a couple of Evaluation Blocks - make sure you put everything in the right order.",
        "Calc Circles of Eval 5_instruction": "Complete the Evaluation Blocks to match this statement.",
        "Calc Circles of Eval 6_instruction": "Complete the Evaluation Blocks to match this expression.",
        "Calc Circles of Eval 7_instruction": "Complete the Evaluation Blocks to match this statement.",
        "Calc Circles of Eval 8_instruction": "Complete the Evaluation Blocks to match this statement.",
        "Calc Circles of Eval 9_instruction": "Complete the Evaluation Blocks to match this statement.",
        "Calc Circles of Eval Free Play_instruction": "Free Play: Try using the Evaluation Blocks to write some equations of your own. How does nesting the blocks in different ways impact their evaluation?",
        "Calc Define Funcs 1 (copy 1)_instruction": "Let's look at some more algebraic functions now. Here's a function translated from the simple algebraic function f(x) = x + 1. What would you expect this function to output if provided an input of 15?",
        "Calc Define Funcs 1_instruction": "Let's look at some more traditional algebraic functions now. Here's a function translated from the simple algebraic function f(x) = x + 1. What would you expect this function to output if provided an input of 15?",
        "Calc Define Funcs 2_instruction": "Write a function f that takes a parameter x and returns x - 10. Test your function using f(15).",
        "Calc Define Funcs 3_instruction": "We don't have to call our function f every time; create a function called times-ten that should take a parameter x and return x * 10. Once you've created the function, run times-ten(50).",
        "Calc Define Funcs 4_instruction": "Write a function called half that takes a number x and returns half that number. Once you've written the function, use it to calculate half(21)",
        "Calc Define Funcs 5 - multiply 1_instruction": "Oh no! We lost our multiply block! We'll have to create a function to multiply for us. To start off, write a function \"f\" that takes a parameter \"x\" and returns x*5. Test your function using f(3).",
        "Calc Design Recipe 1_instruction": "Let's use the Design Recipe to create a function called cube - this function should take in a Number and return that number to the power of 3. Make sure to write two example cases! When you're done, use your new function to calculate cube(7).",
        "Calc Design Recipe 2_instruction": "Your school is holding a bake sale, and you need to track the cost of making each cookie, the money paid, and the total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\n\nWrite the function cost, which takes in the number of cookies you intend to sell, and returns the cost of making those cookies.\n\nTest your function by calculating the cost of 42 cookies",
        "Calc Design Recipe 3_instruction": "Write the function sales which takes in the number of cookies sold, and produces the amount of money customers spent to buy those cookies (each cookie is sold at $1.50).\n\nTest your function by calculating the sales for 135 cookies",
        "Calc Design Recipe 4_instruction": "Using the two functions we just wrote, write the function profit, which takes in the number of cookies you sold, and gives you back the total profit you make from selling your cookies, accounting for the cost of baking them.\n\nTest your function by calculating the total profit for 15 cookies.",
        "Calc Free Play_instruction": "Free Play: Write functions and algorithms of your own design!",
        "Calc Rocket 1 (copy 1)_instruction": "In the last puzzle you wrote a contract for the function \"rocket-height\" that states it has a range of Number, domain of Number, and should return the height of the rocket traveling at 15 m/s after a given number of seconds. Let's write an example case now for the height of the rocket at 3 seconds.\n\n\n\n  \n\n",
        "Calc Rocket 1_instruction": "In the last puzzle you wrote a contract for the function rocket-height that states it has a range of Number, domain of Number, and should return the height of the rocket traveling at 15 m/s after a given number of seconds. Let's write an example case now for the height of the rocket at 3 seconds.",
        "Calc Rocket 2_instruction": "Great, let's do one more example before writing the function - what should the rocket height be after 30 seconds?",
        "Calc Vars 1.1_instruction": "Here we've set the age variable to 17 years. Can you write an expression that calculates age in days?",
        "Calc Vars 1_instruction": "Variables allow us to name values so that we can easily refer to them repeatedly throughout our programs. Here's a variable called age. Set its value to your age and click run.",
        "Calc Vars 2 (copy 1)_instruction": "Here we've set the \"age\" variable to 17 - can you write an expression that calculates \"age\" in months?",
        "Calc Vars 2.1_instruction": "Here's a new variable called age-in-months. Use the variable age to set age-in-months.",
        "Calc Vars 2_instruction": "Can you write an expression that calculates age in months?",
        "Calc Vars 3 (copy 1)_instruction": "Can you add to this code so that it calculates how many hours there are in \"age\" years?",
        "Calc Vars 3_instruction": "Can you add to this code so that it uses the \"age\" variable to calculate age in hours?",
        "Calc Vars 4_instruction": "We can also set variables by using other variables. Let's say you have a brother who is two years younger than you - can you set a new variable \"brother-age\" using your \"age\" variable?",
        "Choose Your Own Adventure_instruction": "You can do whatever you want in play lab! Here's an example of choose your own adventure story in play lab.",
        "Choose Your Own Adventure_2018_instruction": "You can do whatever you want in play lab! Here's an example of choose your own adventure story in play lab.",
        "Code Studio Puzzle Challenge 1 - Artist_instruction": "Draw the line. It is 200 pixels long. ",
        "Code Studio Puzzle Challenge 1 Artist1_instruction": "Draw the line. It is 200 pixels long. ",
        "Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction": "Move the Bee to the flower and get all of the nectar.",
        "Code Studio Puzzle Challenge 10 - Bee_instruction": "Move the Bee to the flower and get all of the nectar.",
        "Code Studio Puzzle Challenge 10b - Bee_instruction": "Move the Bee to the flowers and get all of the nectar at each.",
        "Code Studio Puzzle Challenge 11 - Artist_instruction": "Draw this line by using the variable \"length\". Each line segment is 75 pixels long.",
        "Code Studio Puzzle Challenge 11b - Artist_instruction": "Draw a square by using the variable length provided.",
        "Code Studio Puzzle Challenge 12 - Artist_instruction": "The code provided draws one triangle. Add to it to draw triangles in a hexagon pattern.",
        "Code Studio Puzzle Challenge 12a - Artist_instruction": "The code provided draws one triangle. Add to it to draw triangles in a hexagon pattern.",
        "Code Studio Puzzle Challenge 13 - Artist_instruction": "This is just like a \"for\" loop. Complete the code to draw six lines that grow from 50, 60, 70, 80, 90, to 100 pixels long. ",
        "Code Studio Puzzle Challenge 14 - Artist_instruction": "This is just like a \"for\" loop. Complete the loop to draw 4 squares that grow from 80, 100, 120, to 140 pixels. ",
        "Code Studio Puzzle Challenge 2 - Artist_instruction": "Now add a turn and another line. The lines are 200 pixels long.",
        "Code Studio Puzzle Challenge 3 - Artist_instruction": "Draw the square. Each side is 100 pixels long.",
        "Code Studio Puzzle Challenge 4 - Artist_instruction": "Draw the octagon. Each side is 100 pixels long.",
        "Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction": "Move the Bee to the flower and get the nectar.",
        "Code Studio Puzzle Challenge 5 - Bee_instruction": "Flowers contain a specific amount of nectar. Move the Bee to the flower and collect nectar with the get nectar block.",
        "Code Studio Puzzle Challenge 6 - Bee_instruction": "Honeycombs can hold a specific amount of honey. Get the nectar from the flower and make some honey.",
        "Code Studio Puzzle Challenge 7 - Bee_instruction": "Move the Bee to the flower and get the nectar.",
        "Code Studio Puzzle Challenge 8 - Bee_instruction": "The cloud could be hiding a flower or a honeycomb. Only get nectar from flowers. Only make honey at honeycombs.",
        "Code Studio Puzzle Challenge 9 - Bee_instruction": "The cloud could be hiding a flower or a honeycomb. Only get nectar from flowers. Only make honey at honeycombs.",
        "Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction": "Draw the line. Each segment is 100 pixels long. ",
        "Code Studio Puzzle Challenge Artist Screencast 2_instruction": "Complete the code to draw the line. Each segment is 100 pixels long. ",
        "Code Studio Puzzle Challenge Artist Screencast_instruction": "Draw the line. Each segment is 100 pixels long. ",
        "Code Studio Puzzle Challenge Bee Screencast_instruction": "Move the Bee to the flowers and get all of the nectar.",
        "Code Studio Puzzle Challenge Square - Artist_instruction": "Draw a square by using the variable length provided.",
        "Code Studio Puzzle Challenge Var - Artist_instruction": "Draw a line by using a variable \"length\" set to 180.",
        "Collector Demo_instruction": "Look at all this loot! Help me get as many coins as I can so I can improve my farm. I can only use 9 blocks though!",
        "Course 2 Bee Loops 1_instruction": "Hi, I'm a bee. Can you help me collect the nectar from these flowers? ",
        "Course 2 Bee Loops 13_instruction": "Assessment: Use the repeat block to collect all of the nectar.",
        "Course 2 Bee Loops 2_instruction": "Can you do the same task more easily with a loop?",
        "Course 2 Bee Loops 3_instruction": "Now use the new repeat block to collect all of the nectar and make all of the honey.",
        "Course 2 Bee Loops 3__instruction": "Can you use a loop to collect all that nectar?",
        "Course 2 Bee Loops 4_instruction": "What happens if you loop this sequence 3 times? Don't forget to make the honey at the end!",
        "Course 2 Maze Loops 1_instruction": "Can you get me to the pig using 5 blocks?",
        "Course 4 2_instruction": "The bee only wants nectar right now. Remember, not all objects are flowers, so check to gather nectar only at flowers.",
        "Course 4 Artist 1_instruction": "Help me draw a box. (Each line is 200 pixels long) ",
        "Course 4 Artist 10_instruction": "Click here to see the full instructions again!\n\nHere is the code for an interesting shape.  What happens when you repeat it multiple times, turning between each iteration?   Notice that the turns in this shape add up to 420 degrees, which means that when your artist is done drawing, it will be facing a different direction than when you started.  That new direction is exactly 60 degrees to the right of where you began.",
        "Course 4 Artist 11_instruction": "Now for a challenge!  Feel free to use trial and error. You are not expected to get the image perfect the first time.   Want to see more hints?  Click here!",
        "Course 4 Artist 12_instruction": "Want a second peek at the inspiration design or the hints?  Click here!\n\nOtherwise, make a design all your own!",
        "Course 4 Artist 13_instruction": "Still playing?  Here is a blank canvas where you can design anything you want!",
        "Course 4 Artist 2_instruction": "Can you use a loop to draw the greyed out square?  (Each side is 300px long)",
        "Course 4 Artist 20_instruction": "Still playing?  Here is a blank canvas where you can create whatever you want!",
        "Course 4 Artist 3_instruction": "Try to figure out what happens if you run this code (or press \"Run\" to test it). Then, repeat it enough times to complete the drawing.",
        "Course 4 Artist 4_instruction": "How many degrees are in a circle?  Fill in the repeat block with that number to create a circle of colors.",
        "Course 4 Artist 5_instruction": "Draw the other half of this design so it's symmetrical. The triangles are equilateral and are 50 pixels long. Hint: You may have to run the code several times to figure out all of the blocks that need to be added.",
        "Course 4 Artist 6_instruction": "Complete the code to draw these three, equilateral triangles.",
        "Course 4 Artist 7_instruction": "Now nest this loop inside another loop to draw 10 triangles. This is called a nested loop. Hint: All 10 triangles complete a 360 degree rotation.  ",
        "Course 4 Artist 8_instruction": "Draw this sun by looping this whole block of code multiple times.",
        "Course 4 Artist 8a_instruction": "Remember this shape?  Now we're going to let you build it without giving you any blocks to start!",
        "Course 4 Artist 9_instruction": "Loop this design 10 times and make sure to turn between each shape that's drawn. \n",
        "Course 4 Artist Binary 1_instruction": "Here's a function that takes a binary string of 1's and 0's and instructs the artist to follow them from left to right, top to bottom.  The artist will fill-in the squares when it sees a 1 and ignore the square when it sees a 0. \n\nRun this code to see how the artist uses binary to draw this pattern.",
        "Course 4 Artist Binary 1a_instruction": "Here's a function that takes a binary string of 1's and 0's and instructs the artist to follow them from left to right, top to bottom.  The artist will fill-in the squares when it sees a 1 and ignore the square when it sees a 0. \n\nRun this code to see how the artist uses binary to draw this pattern.",
        "Course 4 Artist Binary 2_instruction": "Which of these binary strings could you loop 8 times to draw this image?",
        "Course 4 Artist Binary 3_instruction": "Can you draw this pattern by looping just three binary digits (0s and 1s)?",
        "Course 4 Artist Binary 4_instruction": "Each binary string represents one row of this picture. Can you rearrange them so it draws a smiley face instead of a frowny face?",
        "Course 4 Artist Binary 5_instruction": "Which 6 digit binary string, repeated 11 times, will draw this image?",
        "Course 4 Artist Binary 6_instruction": "What is the shortest binary string that you can repeat to draw this image?",
        "Course 4 Artist Binary 7_instruction": "Finish this drawing.",
        "Course 4 Artist Binary Free Play 2_instruction": "Free Play: Here's a blank canvas for you to draw on.  Have fun!",
        "Course 4 Artist Binary Free Play 2a_instruction": "Here's a higher resolution canvas to draw on - 16 pixels by 16 pixels!\n\nSee what happens when we start to get creative with the bits?",
        "Course 4 Artist Binary Free Play 2b_instruction": "Click here to see hints.",
        "Course 4 Artist Binary Free Play_instruction": "Free Play: Draw whatever you like with binary!",
        "Course 4 Artist Binary pre1_instruction": "Use the blocks below to have the artist draw \"01010101\" in binary in the first row.",
        "Course 4 Artist Binary ryan_instruction": "Binary is a way of representing information using only two options.  Here, we're going to use the options \"off\" (represented by the number 0) and \"on\" (represented by the number 1).  \n\nWe've provided you with a grid of \"pixels\" that you can walk through and make designs by turning on only certain squares.  Can you have the artist draw \"01010101\" in binary in the first row?",
        "Course 4 Artist For  Functions 10_instruction": "Let's Step it up a little, can you draw a Star shape using the \"Draw a Square Line\" function? Good luck!",
        "Course 4 Artist For  Functions 11_instruction": "Let's Step it up a little, can you draw a Star shape using the \"Draw a Square Line\" function? Good luck!",
        "Course 4 Artist For Loops 1_instruction": "Use a repeat block to draw this triangle that is 50 pixels wide.",
        "Course 4 Artist For Loops 10_instruction": "Free Play Time! Have fun drawing whatever you like with the blocks you have learned how to use",
        "Course 4 Artist For Loops 11_instruction": "Remember back in a previous stage when we used a variable to control the number of sides in a shape? We are going to do the same thing with the `counter` variable now. This pattern starts with a triangle and adds one side at a time until it draws a decagon (10 sides). Each side should be 100 pixels long. ",
        "Course 4 Artist For Loops 11a_instruction": "Let's put it all together!  Using your knowledge of `for` loops and the `counter` variable, create this drawing where each shape has two more sides than the last.  Make sure that each side is 10 times as long as the number of sides in the polygon.\n\nVery little of the code has been provided for you.",
        "Course 4 Artist For Loops 12_instruction": "That looked pretty cool, but now I'd like to draw each shape next to the last one. This time each side is 20 pixels. Use a jump block to jump forward 40 pixels after each shape. ",
        "Course 4 Artist For Loops 13_instruction": "Hmmm, those shapes are getting bigger every time! Didn't we already solve this problem with variables? How can we use the counter variable to make the sides smaller as there are more of them? Instead of moving forward by a set amount, try moving forward (100 / counter) pixels.",
        "Course 4 Artist For Loops 14_instruction": "If you turn a little bit more or less than you normally would for a shape, it creates a neat effect. Try using some of the code from the last level, but turning 89 degrees to create this twisted square spiral.",
        "Course 4 Artist For Loops 15_instruction": "Free Play: Try making some drawings of your own using \"for loops\". We've added a few useful variables for you as well.",
        "Course 4 Artist For Loops 2_instruction": "I've put the code for drawing a triangle inside a for loop that counts from 50 to 100 by 10.  NOTE: Make sure you look at the code before you hit \"Run\".",
        "Course 4 Artist For Loops 3_instruction": "Use the last puzzle as a reference to complete this one.  The smallest triangle has 20 pixel sides, the largest has 200 pixel sides, and each triangle is 20 pixels larger than the last. ",
        "Course 4 Artist For Loops 4_instruction": "How would you modify what you've learned to draw these squares? They start at 15 pixels long, the largest is 300 pixels long, and each square is 15 pixels larger than the last. ",
        "Course 4 Artist For Loops 5_instruction": "Good job on the last puzzle! Let's use that \"counter\" variable block again to draw this cool picture. ",
        "Course 4 Artist For Loops 6_instruction": "Free Play! Try using a for loop to draw a growing shape pattern of your own design.",
        "Course 4 Artist For Loops 6a_instruction": "Make three small changes to the code from the last level to get this!",
        "Course 4 Artist For Loops 7_instruction": "What happens if you remove the \"Repeat 3\" from this algorithm, keeping the \"move\" and \"turn\" blocks in the for loop? In this spiraling triangle, each side is 20 pixels longer than the last.",
        "Course 4 Artist For Loops 8_instruction": "Just one little change to the code from the last image can create this drawing. Can you figure out what that change is?\n\nHint:  You need to remove something!",
        "Course 4 Artist For Loops 8a_instruction": "Just one little change to the code from the last image can create this image. Can you figure out what that change is?",
        "Course 4 Artist For Loops 9_instruction": "Can you make a spiral? Move forward from 1 to 75 pixels, increasing by 1 pixel each time.",
        "Course 4 Artist For Loops Challenge_instruction": "**Challenge:** Can you figure out how to use all of the things you've learned to create this image of polygons, all with 40 pixel sides?",
        "Course 4 Artist For Loops Challenge_a_instruction": "Can you figure out how to use all of the things you've learned to create this image?\n\nNeed a hint? Click here.",
        "Course 4 Artist For Loops inspire_instruction": "Free-Play Inspiration: You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own.\n\nNeed a hint? Click here.",
        "Course 4 Artist Functions 1_instruction": "Can you draw a square that is 100 pixels in length, using a loop?",
        "Course 4 Artist Functions 10_instruction": "Which block do you need to add to get the triangle to sit on top of the square?",
        "Course 4 Artist Functions 11_instruction": "Check out this code that draws a cube - can you move it into a function called \"Draw a Cube\"",
        "Course 4 Artist Functions 12.1_instruction": "Let's create a function called \"draw an octagon 20\" that draws an octagon where each side is 20 pixels long.",
        "Course 4 Artist Functions 12_instruction": "Loop square function to draw a line",
        "Course 4 Artist Functions 13.1_instruction": "Now, let's make a function called \"jump to upper right\" that moves the artist to the upper-right of the octagon that you just drew so we can finish this pattern.\n\nHint:  To get yourself to the upper-right corner, try jumping in a pattern that makes just 3/8 of the octagon.",
        "Course 4 Artist Functions 13_instruction": "Check it out we have a new function called \"draw a line of squares\". Feel free to take a look inside the function block to see how we built it. Click on \"Run\" when your are ready for the next puzzle.",
        "Course 4 Artist Functions 14.1_instruction": "Now, let's make a function called \"jump to upper right\" that moves the artist to the top-right of the octagon that you just drew so we can finish this pattern.",
        "Course 4 Artist Functions 14_instruction": "You're doing great! Let's use your new \"Draw a line of squares\" function to draw a Square shape. Remember each square is 40 pixels in length.",
        "Course 4 Artist Functions 15_instruction": "Let's Step it up a little, can you draw a star shape using the \"draw a line of squares\" function? Good luck! Hint: you may have to turn 144 degrees",
        "Course 4 Artist Functions 2_instruction": "Can you draw 3 squares 20 pixels apart from one another? Hint: each square is 100 pixels in size",
        "Course 4 Artist Functions 3_instruction": "Using the \"draw a square\" function block, can you draw this picture? Hint: each square is 120 pixels apart.\n",
        "Course 4 Artist Functions 4_instruction": "Are you ready to create your own \"Function Block\"? Click on the \"Functions\" block in the tool box, name it \"draw a triangle\", then create a triangle as you have done before with the Action and Loops blocks. Then click on the Save and Close in the upper right hand corner. Hint: Create a triangle that is 100 pixels in length. Good luck!",
        "Course 4 Artist Functions 5 OLD_instruction": "Let's try to use our two functions to draw a house - what needs to be fixed in this code to draw the house properly?",
        "Course 4 Artist Functions 5_instruction": "Using the \"draw a square\" function block, can you draw this picture? Hint: each square is 120 pixels apart.\n",
        "Course 4 Artist Functions 6_instruction": "Which block do you need to add to get the triangle to sit on top of the square?",
        "Course 4 Artist Functions 7_instruction": "Can you draw a line of squares using a Square function? Each square is 40 pixel's in length.",
        "Course 4 Artist Functions 8_instruction": "Are you getting the hang of how to use function blocks? Let's modify this square so that it is 200 pixels in size. Hint: click on \"edit\" to change the size of the \"draw a square\" function editor. Remember to click on \"save and close\" to get out of the function editor. ",
        "Course 4 Artist Functions 9_instruction": "We have given you most of the code to create a function. However there seems to be something missing. Can you make this function block complete?",
        "Course 4 Artist Functions Inspiration_instruction": "Click here to see the hints again.",
        "Course 4 Artist Functions challenge_instruction": "Click here to see the hints again.",
        "Course 4 Artist Functions inspire_instruction": "Click here to see the inspiration picture again.",
        "Course 4 Artist Inspire_instruction": "Want a second peek at the inspiration design or the hints?  Click here!\n\nOtherwise, make a design all your own!",
        "Course 4 Artist Params 1_instruction": "Let's edit a function that draws a square with 50 pixel sides",
        "Course 4 Artist Params 10_instruction": "You can call functions from inside other functions! Using your \"shape\" function as a base, create 3 house shapes each 20 pixels larger than the last starting at 50 pixels in length. Using a counter loop might be helpful. ",
        "Course 4 Artist Params 11_instruction": "How about a function called \"pinwheel\" that takes three parameters - \"sides,\" \"length\" and \"repeat.\" You can calculate how much to turn after each shape using the same math you used to figure out the turns for a shape of \"sides\". Can you recreate this picture? Here's a tip each shape is 100 pixel's in length.",
        "Course 4 Artist Params 12_instruction": "Use your \"pinwheel\" function to draw each of these shapes. The side length for each image is 50.",
        "Course 4 Artist Params 13_instruction": "Freeplay: Here are the functions you've written, and some more for you to play with. Draw something awesome!",
        "Course 4 Artist Params 2_instruction": "That triangle function would be a whole lot more useful if it could draw triangles of different sizes. I've added a parameter for line length, but it doesn't do anything yet. Can you update the function so it uses the \"length\" parameter when it draws each side? The triangle sizes are 150 pixels, 75 pixels and 25 pixels.",
        "Course 4 Artist Params 3_instruction": "Awesome, can you draw each of these triangles with that new function? The first is 25 pixels long, the second is 50, and the third is 75. ",
        "Course 4 Artist Params 4_instruction": "Can you add a new function called square? It should also take a length parameter, just like the triangle. This time draw 3 squares 25, 50 and 75 pixels in length,100 pixels apart.",
        "Course 4 Artist Params 5_instruction": "Use both of your new functions to draw this picture. To make this easier you use a loop with a \"counter\" parameter. ",
        "Course 4 Artist Params 6_instruction": "Let's edit this \"draw a shape\" function. It already has a \"length\" parameter. Now, let's edit the function to also add a \"sides\" parameter. Remember the angle to turn for a given shape is 360 divided by the sides it has. Hint: lengths for each shape are the triangle is 100 pixels, the hexagon is 25 pixels and the square is 50 pixels. ",
        "Course 4 Artist Params 7_instruction": "Can you draw these shapes by filling in the \"???\" The square and triangle are 100 pixels in size while the hexagon is 75 pixels in size. ",
        "Course 4 Artist Params 8_instruction": "Can you figure out how to draw this shape? Here's a hint create a new function with 6 sides called a hexagon. ",
        "Course 4 Artist Params 9_instruction": "Do you remember when we used the counter loop but removed a loop within? Let's have some fun and use the \"draw a shape\" function with \"sides\" and \"length\" parameters. Can you re create these shapes? The square counter should be 5/100/5, the triangle counter should be 10/100/10 and the hexagon is 2/100/2.",
        "Course 4 Artist Var 9_instruction": "Here's the algorithm to draw a triangle, modify it so it uses the \"sides\" variable instead. Replace the number 3 with the \"sides\" variable. Hint: remember to use the \"set sides to\" block.",
        "Course 4 Artist Vars 1_instruction": "Let's draw an equilateral triangle. \n\nIt has to be exactly 100 pixels long on each side.",
        "Course 4 Artist Vars 10_instruction": "Here's an algorithm that draws a triangle out of smaller triangles. Can you modify it so that it uses the \"sides\" variable to draw each triangle? Look through the code, and every time you see the number 3, replace it with your \"sides\" variable. Remember to use the \"set sides\" block.",
        "Course 4 Artist Vars 11_instruction": "Here’s more complicated code using the same concepts from the last puzzle - what should you set the \"sides\" variable to in order to draw this picture made of squares?",
        "Course 4 Artist Vars 12_instruction": "Let's set the \"sides\" variable to 5. The more sides we add to this algorithm, the bigger this whole pattern gets! Notice that there is another variable called \"length\". We can now use that wherever we have a \"move forward.\" Set the \"length\" variable to 75 for this shape.",
        "Course 4 Artist Vars 13_instruction": "When a shape has lots of sides, each side needs to be shorter if you want the whole pattern to fit on the screen. \nLet's recreate the algorithm for this amazing pattern, but instead of manually setting the `length` variable, let's use a math block with the `sides` variable inside to make sure that each shape fits correctly. The perimeter of each polygon is 300 pixels.\nNeed some hints?  Click here.",
        "Course 4 Artist Vars 14_instruction": "Free Play: Check it out! Now your algorithm is nested within one more loop. Experiment with changing the values of your two variables to draw cool patterns.\n\nFor even more effect, try playing with color!  Use random colors inside loops to see how it changes your design.",
        "Course 4 Artist Vars 2_instruction": "Instead of using \"move forward by 150,\" the \"move\" block is now referencing a variable called \"length.\" Can you set \"length\" to 150 to draw this new triangle?",
        "Course 4 Artist Vars 3_instruction": "Here's a loop that draws a square, but something's missing. Can you fix it so that it uses the variable \"length\" to figure out how long each side should be? ",
        "Course 4 Artist Vars 4_instruction": "Now I want to make a rectangle that is twice as tall as it is wide. We've got a variable called \"width\" that needs to be set to 100. Can you use the math blocks to complete the code?",
        "Course 4 Artist Vars 5_instruction": "Use the variable \"sides\" to control how many times this loop gets run.",
        "Course 4 Artist Vars 6_instruction": "Here’s some code that can draw any regular polygon. There’s a new variable called sides that is set to 4. Can you use the sides variable (along with the math block) to turn the right amount regardless of how many sides there are in the polygon?\n\nClick here to go back to the hint!",
        "Course 4 Artist Vars 7_instruction": "Use what you learned in the last puzzle to create this hexagon using the \"sides\" variable.\n\nSee how you could change just one value to draw a triangle,  square, pentagon, or octagon?",
        "Course 4 Artist Vars 8_instruction": "Free Play: Experiment with the number of sides this shape has. Can you change the algorithm so that the overall size of the shape stays the same, no matter how many sides it has? Hint: If you divide your starting length by the number of sides, the length of each side will get shorter as the number of sides gets higher.",
        "Course 4 Artist Vars 9_instruction": "Modify this algorithm so it uses the \"sides\" variable instead of a fixed number to draw a triangle. Don't forget to use the \"set sides to\" block.",
        "Course 4 Bee 1_instruction": "The bee can't tell what's under the cloud! \n\nUse the `if` block to check whether there is a flower under the cloud. \n\nGet nectar one time, ONLY if there is a flower.",
        "Course 4 Bee 2_instruction": "Use the \"if/else\" block to check each object to see if it's a flower or a honeycomb . If it's a flower, collect one nectar...otherwise, make one honey!",
        "Course 4 Bee 3_instruction": "The unknown object is either a flower or a honeycomb. This time, use the if/else block to collect one nectar if it is a flower, else make one honey (because then it would be a honeycomb).",
        "Course 4 Bee 4_instruction": "This purple flower may have either 3, 2, or 1 nectar. Here an if/else block is combined with another if/else block to create an \"if/else-if/else\" statement. Complete the solution to collect the unknown amount of nectar.",
        "Course 4 Bee 5_instruction": "This purple flower may have either 3, 2, or 1 nectar. Add an if-else block to create an if, else-if, else block. Complete the solution to collect the unknown amount of nectar.",
        "Course 4 Bee 6_instruction": "This purple flower may have either 3, 2, or 1 nectar. Create an if, else-if, else block to collect the unknown amount of nectar.",
        "Course 4 Bee 7_instruction": "Use everything you have learned so far to collect all the nectar. The purple flower may have either 3, 2, or 1 nectar.",
        "Course 4 Bee For Loops 1_instruction": "Use a loop to collect the nectar from each flower.",
        "Course 4 Bee For Loops 10_instruction": "If your loop is counting down, the increment is subtracted from your counter variable each loop. What should your increment be to collect 9, then 6, and then 3 nectar?",
        "Course 4 Bee For Loops 11_instruction": "What's wrong with this loop? See if you can fix it and make the bee collect all the nectar.",
        "Course 4 Bee For Loops 2_instruction": "Here's a new kind of loop, called the \"for\" loop. This particular for loop will count from 1 to 5 by 1, and run the contents of the loop each time it counts. Help the Bee get the nectar.",
        "Course 4 Bee For Loops 3_instruction": "You can solve this puzzle by using a for loop to count from 1 to 3 by 1. Now let's go get some nectar!",
        "Course 4 Bee For Loops 4_instruction": "Collect all of the nectar from these flowers. I wonder if there's an easier way to do this...",
        "Course 4 Bee For Loops 5_instruction": "Ah, the for loop makes this much easier! Using the \"counter\" variable from the for loop to loop the \"get nectar\" block the same number of times as the loop. Whew! That's a lot of loops. All the code you need it there, take a look at how it is put together then click on Run and see how it works. ",
        "Course 4 Bee For Loops 6_instruction": "You can also use a for loop to count down. Try gathering this nectar by counting down from 5 to 1 by 1.",
        "Course 4 Bee For Loops 7_instruction": "Use your for loop \"counter\" variable to control how far to move horizontally.",
        "Course 4 Bee For Loops 8_instruction": "Can you use the loop variable to control movement and nectar collection?",
        "Course 4 Bee For Loops 9_instruction": "The last number in your for loop is called the \"increment,\"  and each time the loop is run the counter variable changes by the increment. Try collecting these flowers using an increment of 2.",
        "Course 4 Bee Loops 5 NEW_instruction": "Here are three flowers. Can you find the pattern of instructions that you need to repeat 3 times to collect the nectar with the fewest number of blocks?",
        "Course 4 Bee Loops 5a NEW_instruction": "Now, use loops to help the bee collect all the nectar on its way to the honeycomb with as few blocks as possible.  When you get there, don't forget to make honey!",
        "Course 4 Bee Params 1_instruction": "Write a sequence to collect all of the nectar using `get 3 nectar` which turns, moves to collect the nectar, and then returns to the original location.",
        "Course 4 Bee Params 2_instruction": "Modify the \"get 3 nectar\" function so it makes me turn right instead of left to the flowers.",
        "Course 4 Bee Params 3 (copy 1)_instruction": "Now there are flowers on both sides! Maybe you can use a parameter so that the same function works for flowers on either side. I've added a parameter called \"direction\" to the function. If the \"direction\" parameter equals 0 I should turn left, if it's 1 I should turn right.",
        "Course 4 Bee Params 3_instruction": "Now there are flowers on both sides! We've added variables called \"left\" and \"right\" for you to use, and added a parameter called \"direction\" to \"get 3 nectar\". Edit \"get 3 nectar\" so that the bee turns the correct direction when the variables \"left\" or \"right\" are passed into the function.  ",
        "Course 4 Bee Params 4 (copy 1)_instruction": "Try using your new function to collect all of the flowers. Remember, 0 = left and 1 = right.",
        "Course 4 Bee Params 4 - Two WhenRun_instruction": "Try using your new function to collect all of the flowers. Remember to use the left and right variables.",
        "Course 4 Bee Params 4 backup_instruction": "Wouldn't it be nice if we could collect all of these nectars with the a single function? Try adding a new parameter to your function called \"nectars\" to control the amount of nectar to collect. You'll probably want to rename the function too!",
        "Course 4 Bee Params 4_instruction": "Try using your new function to collect nectar from all of the flowers. Remember to use the left and right variables.",
        "Course 4 Bee Params 5_instruction": "Let's start from scratch - can you create a new function called \"get 5 nectar\" with a direction parameter?",
        "Course 4 Bee Params 6 (copy 1)_instruction": "Try using your new function to collect all of this nectar.",
        "Course 4 Bee Params 6_instruction": "Wouldn't it be nice if we could collect all of these nectars with a single function? Try adding a new parameter to your function called \"nectar units\" to control the amount of nectar to collect. You'll probably want to rename the function too!",
        "Course 4 Bee Params 7 (copy 1)_instruction": "Try using your new function to collect all of this nectar.",
        "Course 4 Bee Params 7_instruction": "Try using your new function to collect all of this nectar.",
        "Course 4 Bee Params 8 Clone 2_instruction": "Oooh, now there's honey to deal with too! How could you update your function to either get nectar or make honey.",
        "Course 4 Bee Params 8 Clone_instruction": "Oooh, now there's honey to deal with too! How could you update your function to either get nectar or make honey.",
        "Course 4 Bee Params 8 clone 3_instruction": "Oooh, now there's honey to deal with too! How could you update your function to either get nectar or make honey.",
        "Course 4 Bee Params 8 new_instruction": "Oooh, now there's honey to deal with too! How could you update your function to either get nectar or make honey.",
        "Course 4 Bee Params 8_instruction": "Challenge: Now there's honey to deal with too! Rewrite your function to use both the number of honey units and the number of nectar units.  How would you use those numbers to decide what you should do?",
        "Course 4 Bee Params Ex_instruction": "Try using your new function to collect all of this nectar.",
        "Course 4 Binary 1_instruction": "Here's a function that takes a binary string of 1's and 0's and instructs the farmer to turn on the go from left to right, top to bottom, turning on the squares where the number has a zero. Run the code provided to see how the farmers uses binary to draw an image.",
        "Course 4 Binary 2_instruction": "What binary string could you loop 8 times to draw this image? Hint: the number \"1\" fills a hole.",
        "Course 4 Binary 3_instruction": "Can you draw this pattern by looping a single binary string?",
        "Course 4 Binary 5 (copy 1)_instruction": "Which binary string, repeated 10 times, will draw this image?",
        "Course 4 Binary 5_instruction": "Which binary string, repeated 10 times, will draw this image?",
        "Course 4 Binary 6 (copy 1)_instruction": "Which binary string, repeated 10 times, will draw this image?",
        "Course 4 Binary 6_instruction": "Which binary string, repeated 10 times, will draw this image?",
        "Course 4 Binary 7_instruction": "Which binary string, repeated 10 times, will draw this image?",
        "Course 4 Binary 8_instruction": "You can complete the most of this image by looping a 5 bit binary number - then you'll need one more 4 bit number to get the bottom right-hand corner.",
        "Course 4 EC 1a_instruction": "No rules. No clues. Just the challenge!",
        "Course 4 EC 1b_instruction": "No rules. No clues. Just the challenge!",
        "Course 4 EC 2a_instruction": "No rules. No clues. Just the challenge!",
        "Course 4 EC 2b_instruction": "No rules. No clues. Just the challenge!",
        "Course 4 EC 2c_instruction": "No rules. No clues. Just the challenge!",
        "Course 4 EC 2d_instruction": "No rules. No clues. Just the challenge!",
        "Course 4 EC 3_instruction": "Use what you learned in the previous level to draw an image like this. Note: The code becomes more simple if you incorporate parameters. ",
        "Course 4 EC 3a_instruction": "Extreme Challenge: No rules. No clues. Just the challenge!",
        "Course 4 Maze 1_instruction": "Get the angry bird to the pig!",
        "Course 4 Maze 2_instruction": "Avoid the TNT!",
        "Course 4 Maze 3_instruction": "Program the angry bird to get to the pig. ",
        "Course 4 Maze 4_instruction": "Try the \"repeat\" block to use fewer blocks when solving this puzzle...",
        "Course 4 Maze 5_instruction": "Can you solve this puzzle using the fewest number of blocks possible?",
        "Course 4 Maze 6_instruction": "Can you solve this puzzle using the fewest number of blocks possible?",
        "Course 4 Play Lab For Loops 2_instruction": "This time, let's try counting the odd numbers from 1 to 100.",
        "Course 4 Play Lab Params 1_instruction": "Here's a function called `jump` that causes your main character to jump up 100 pixels. Run the program and use the jump function to collect all of the flags by moving the dog with the arrow keys.",
        "Course 4 Play Lab Params 2_instruction": "Now we've got flags that are too high for our current jump! Let's use both the \"up\" and \"down\" arrows so that we can have multiple jump heights.  \n\nWe need to add a parameter to our jump function called \"height\".  The up arrow should cause the dog to jump 200 pixels and the down arrow should make it jump only 100 pixels. ",
        "Course 4 Play Lab Params 3_instruction": "We have added another parameter to the jump function so that we can use it with other actors. Each actor is represented by a number, starting from one. Edit the \"jump\" function so that it uses the \"actor\" parameter to make the correct character jump. ",
        "Course 4 Play Lab Params 4_instruction": "Here's a function called `patrol`. \n\nEdit `patrol` to move Cat up 400 pixels and then down 400 pixels.",
        "Course 4 Play Lab Params 5_instruction": "Edit the the \"patrol\" function to add an \"actor\" parameter, so that we can call it for each of the actors on the screen. Remember, the actors correspond to numbers 1, 2, and 3.",
        "Course 4 Play Lab Params 6_instruction": "Add another parameter called \"speed\" to the \"patrol\" function. Try using a \"set speed\" block with the new \"speed\" parameter to help Penguin get both flags before the other sprites even get one.",
        "Course 4 Play Lab Params 7_instruction": "Let's have some fun! Look at the code provided to see if you can figure out what each block does.  \nWhen you're done, use the arrow keys to control Dog and collect all of the flags.\nNOTE: You don't need to make any changes to the program",
        "Course 4 Play Lab Params 8_instruction": "Use the `when actor touches` block to send Dog back to the top-left ONLY if Dog touches any of the other actors.",
        "Course 4 Play Lab Params 9_instruction": "Here's our game from an earlier stage, but most of the code is hidden. There’s a new function `score_points.`\n\nEdit the function so that a new parameter called `points` can be added to `player_score`. \n\nThe variable `player_score` should increase each time Dog tags Cat with pie, and decrease each time that Cat tags Dog with a sandwich.\n\nNote: When you're done, click \"Run\" to play.  When Dog scores 6 points, you will move on to the next puzzle. ",
        "Course 4 Play Lab Vars 1_instruction": "This time you don't have to write any code, just hit \"Run\" to play the game! In this game, you're the dog who is trying to collect more flags than the cat. Use the down arrow to control the dog. Press \"Finish\" when you're done playing.",
        "Course 4 Play Lab Vars 2_instruction": "The race in that last puzzle wasn't very fair! Change the `dog_speed` variable to make sure you can collect more flags than Cat. The first to collect 10 flags wins!",
        "Course 4 Play Lab Vars 3_instruction": "Use the left and right arrows to move, and the up arrow to jump. See if you can collect all of the flags.",
        "Course 4 Play Lab Vars 4_instruction": "Now we're using a variable called \"height\" to control how high the dog can jump. Update the \"height\" variable so that the dog can jump high enough to reach all the flags.",
        "Course 4 Play Lab Vars 5_instruction": "Let's build a game! First we'll need a score. Rebuild the code that you saw in the last level to set the score to 10. ",
        "Course 4 Play Lab Vars 6 (copy 1)_instruction": "Cool, now we've got our score variable, but how are we going to make it useful? How about adding to your score variable each time you hit the enemy with a fireball? Use the \"when actor 2 touches anything\" event to trigger an update to your score when your fireballs hit the cat. You can increment the score by setting score = score + 1. Get your score up to 10 (going one at a time!) to pass the level.",
        "Course 4 Play Lab Vars 6_instruction": "Use the right arrow to throw pie.\n\nIn our game, how should we score points? Add 1 to your \"points\" variable each time Dog hits Cat with a piece of pie. Use the \"when actor 2 touches anything\" event to trigger an update to your score. You can increment your variable by setting \"points = points + 1.\" Get your score up to 10 (going one at a time!) to pass the level.",
        "Course 4 Play Lab Vars 7_instruction": "Nice, now let's make sure this game isn't too easy to play. Any time Dog (actor 1) gets hit by a sandwich from Cat (actor 2), you should lose a point. Start with 10 points so it's not too hard. Let your score drop down from 10 to 0 to pass the level.",
        "Course 4 Play Lab Vars 8 (copy 1)_instruction": "Alright, one last thing for this game - let's set it up so the player can win (or lose). Use a forever loop to check the value of score - if score is ever greater that 20, make the enemy vanish. If the score is every less than 0, make the player vanish. Click \"Finish\" when the game works like you'd like it to.",
        "Course 4 Play Lab Vars 8_instruction": "Let's set up this game so the Dog can win (or lose). Use a forever loop to check the value of score - if score is ever greater that 20, make the enemy (the Cat) vanish. If the score is ever less than 0, make the player (the Dog) vanish. Click \"Finish\" when the game works like you'd like it to.",
        "Course 4 Play Lab Vars 9_instruction": "Free Play time! Here are all of the variables we've played with so far in this stage, as well as a few more in case you want them. \n\nNotice that there are now so many blocks in our toolbox that they need to be organized!  Here, we've put each piece into an appropriate category.  Take some time to explore everything that is available. When you're done browsing, make a game or story using repeats, variables, and events.  \n\nHint: scroll down to see all the commands in the workspace.",
        "Course 4 Play Lab Vars_instruction": "Alright, one last thing for this game - let's set it up so the player can win (or lose). Use a forever loop to check the value of score - if score is ever greater that 20, make the emeny vanish. If the score is every less than 0, make the player vanish.",
        "Course 4 Play Labs For Loops 1_instruction": "Let's make the dog speak every number from 1 to 100. Use a `for` loop and the counter block to speak the counter variable each time the loop is run.",
        "Course 4 Play Labs For Loops 2_instruction": "This time, help Olive the Cat count only the odd numbers from 1 to 101.",
        "Course 4 Play Labs For Loops 3_instruction": "If we count by larger numbers, we count even higher in the same amount of time. Try making Pirate Pegleg count from 10 up to 1000, adding 10 at a time.",
        "Course 4 Play Labs For Loops 4_instruction": "Changing the increment can be helpful, but we're still counting linearly (each number is the same distance from the last) What if I wanted to count exponentially? Without changing the settings in this for loop, can you count 1, 4, 9 , 16, 25... (counter squared)?",
        "Course 4 Play Labs For Loops 4a_instruction": "Now, let's blend the variables from Stage 7 together with your \"counter\" variable to make some magic happen.   \n\nIn this puzzle, Dog will count from 0 to 1000 by \"increment\".  Set the \"increment\" variable to 10 at the beginning of your code to see what happens.",
        "Course 4 Play Labs For Loops 5_instruction": "In the last stage we counted the square of each number. Try changing \"counter ^ 2\" to \"counter ^ 3\" to count the cube of each number (1, 8, 27, 64, 125, 216, 343…)",
        "Course 4 Play Labs For Loops 5a_instruction": "In this puzzle, Dog will be your time keeper.\n\nDog will count from 0 to 30 by \"increment\".  The \"increment\" variable will begin with a value of 1.\n\nCan you make it so that each time you click Dog, the increment increases by 2?  Click the forward arrow to run the for loop.\n\nRun the loop a couple of times, clicking Dog before each one.",
        "Course 4 Play Labs For Loops 6_instruction": "You may recall that a prime number is any whole number that is only divisible by itself and 1. Use the \"is_prime\" function to speak out only the prime numbers from 1 to 100.",
        "Course 4 Play Labs For Loops 6a_instruction": "Dog will still keep time by counting with our \"for loop\" by \"increment\", but this time, we will add The Wizard into the mix.  Can you change the code so that \"increment\" goes up by two each time The Wizard is clicked?\n\nWatch out!  The Wizard moves quickly!",
        "Course 4 Play Labs For Loops 7_instruction": "Could you use a for loop to help me speak the sequence 1, 4, 7, 10, 13, 16, 19, 22, 25?",
        "Course 4 Play Labs For Loops 7a_instruction": "Now we're getting somewhere!  What if we start counting how many times we can click The Wizard before Dog gets to 30?  \n\nFinish adding blocks to The Wizard so that every time he's clicked the variable \"clicked\" increases by one. You can ignore \"increment\" for now.\n\nDog will start counting when you click \"Run\".",
        "Course 4 Play Labs For Loops 8_instruction": "Now, help the actors move as they count.  \n\nDog should move and count by adding 2 (counter + 2) each time.  Cat will move and count by multiplying by 2 (counter * 2)  each time. Penguin will move and count to the power of 2 (counter ^ 2) each time.  Who will reach their flag first?",
        "Course 4 Playlab For Loop Freeplay_instruction": "Freeplay: Use everything you've learned so far to make a game that includes a `for` loop!",
        "Course 4 Playlab For Loops 4b_instruction": "Can you change the **increment** in one of the loops so that the race is a tie?",
        "Course 4 Playlab For Loops 5b_instruction": "Adjust the interval on these `for` loops so that the two characters end in the exact same place.",
        "Course 4 Playlab For Loops 6b_instruction": "Edit this `for` loop to create a game that's fun for you to play! \nPress \"Run\" and click Madame Unicorn as many times as you can.  Can you beat our score of 24? ",
        "Course 4 SCF 1_instruction": "Use the suggested functions to draw four rows of hexagons. Notice how our even numbered rows are shifted to the right?",
        "Course 4 SCF 1a_instruction": "Can you figure out how to collect all of this nectar with the fewest blocks possible?",
        "Course 4 SCF 1b_instruction": "Can you figure out how to collect all of this honey with the fewest blocks possible?",
        "Course 4 SCF 2_instruction": "Use what you learned in the previous level to draw an image like this. Note: The code becomes more simple if you incorporate parameters. ",
        "Course 4 SCF 3 Fail 1_instruction": "Can you figure out how to...",
        "Course 4 SCF 3 Fail 2_instruction": "Can you figure out how to...",
        "Course 4 SCF 3_instruction": "Use what you learned in the previous level to draw an image like this. Note: The code becomes more simple if you incorporate parameters. ",
        "Course 4 SCFL 1_instruction": "Solve this puzzle using the fewest number of blocks possible.",
        "Course 4 SCFL 1a_instruction": "Can you get Scrat to his acorn using as few blocks as possible?",
        "Course 4 SCFL 1b_instruction": "Can you get Scrat to his acorn using as few blocks as possible?",
        "Course 4 SCFL 2_instruction": "Solve this puzzle using the fewest number of blocks possible.",
        "Course 4 SCFL 3_instruction": "Can you figure out how to re-create this drawing?",
        "Course 4 SCFL 4_instruction": "Can you figure out how to re-create this drawing?",
        "Course 4 SCFL 5_instruction": "Can you figure out how to re-create this drawing?",
        "Course 4 SCFL 6_instruction": "Can you figure out how to re-create this drawing with a single loop?",
        "Course 4 SCFL 7_instruction": "The artist wants to catch some waves! Can you figure out how to re-create this drawing?",
        "Course 4 SCFP 1_instruction": "Create a function with parameters that allows the artist to jump backward and forward by x pixels, and also up and down by y pixels (using positive and negative numbers).",
        "Course 4 SCV 1_instruction": "Click here to view the instructions again.",
        "Course 4 SCV 2_instruction": "Click here to view the instructions again.",
        "Course 4 SCV 3_instruction": "Now for a game of tag!  Tag Cat to get 2 points. Tag Penguin to get 3 points.  Get exactly 10 points to win!\nBut be careful, when Cat and Penguin tag each other, they take points away.\n\nAdd the blocks necessary to make this game work the way it's been explained.  How will you get Dog to move in all directions using the arrow keys?  How will you add points when Dog tags Cat or Penguin?  How will you subtract points when Cat and Penguin touch?",
        "Course 4 SCV 4_instruction": "Solve this puzzle with the fewest number of blocks possible.",
        "Course 4 SCV 5_instruction": "Solve this puzzle with the fewest number of blocks possible.",
        "Course 4 SCV 6_instruction": "Click here to view the instructions again.",
        "Course 4 SCVP 1_instruction": "Create a function with parameters that allows the artist to jump backward and forward by x pixels, and also up and down by y pixels (using positive and negative numbers).",
        "Course 4 Variables Assessment_instruction": "Can you create this image using a variable for sides? Each line should be 50 pixels long.",
        "Course1BeePuzzle12_instruction": "Get three nectars and then make two honey",
        "Course1MazeAssessment1_instruction": "This is a test!\nMove one way, then another to get me to the pig",
        "Course1MazeAssessment2_instruction": "This is a test!\nMove one way, then another to get me to the pig.",
        "CourseF_PlayLab_vars1_instruction": "To play this game, you don't have to write any code, just hit \"Run\"! ",
        "CourseF_PlayLab_vars10_instruction": "Free Play time! Here are all of the variables we've played with so far in this stage, as well as a few more in case you want them. \n\nNotice that there are now so many blocks in our toolbox that they need to be organized!  Here, we've put each piece into an appropriate category.  Take some time to explore everything that is available. When you're done browsing, make a game or story using repeats, variables, and events.  \n\nHint: scroll down to see all the commands in the workspace.",
        "CourseF_PlayLab_vars2_instruction": "The race in that last puzzle wasn't very fair! Change the `dog_speed` variable to make sure you can collect more flags than Cat. The first to collect 10 flags wins!",
        "CourseF_PlayLab_vars3_instruction": "Use the left and right arrows to move, and the up arrow to jump. See if you can collect all of the flags.",
        "CourseF_PlayLab_vars4_instruction": "Now we're using a variable called \"height\" to control how high the dog can jump. Update the \"height\" variable so that the dog can jump high enough to reach all the flags.",
        "CourseF_PlayLab_vars5_instruction": "Let's build a game! First we'll need a score. Rebuild the code that you saw in the last level to set the score to 10. ",
        "CourseF_PlayLab_vars6_instruction": "Use the right arrow to throw pie.\n\nIn our game, how should we score points? Add 1 to your \"points\" variable each time Dog hits Cat with a piece of pie. Use the \"when actor 2 touches anything\" event to trigger an update to your score. You can increment your variable by setting \"points = points + 1.\" Get your score up to 10 (going one at a time!) to pass the level.",
        "CourseF_PlayLab_vars7_instruction": "Use the right arrow to throw pie.\n\nIn our game, how should we score points? Add 1 to your \"points\" variable each time Dog hits Cat with a piece of pie. Use the \"when actor 2 touches anything\" event to trigger an update to your score. You can increment your variable by setting \"points = points + 1.\" Get your score up to 10 (going one at a time!) to pass the level.",
        "CourseF_PlayLab_vars8_instruction": "Use the right arrow to throw pie.\n\nIn our game, how should we score points? Add 1 to your \"points\" variable each time Dog hits Cat with a piece of pie. Use the \"when actor 2 touches anything\" event to trigger an update to your score. You can increment your variable by setting \"points = points + 1.\" Get your score up to 10 (going one at a time!) to pass the level.",
        "CourseF_PlayLab_vars9_instruction": "Nice, now let's make sure this game isn't too easy to play. Any time Dog (actor 1) gets hit by a sandwich from Cat (actor 2), you should lose a point. Start with 10 points so it's not too hard. Let your score drop down from 10 to 0 to pass the level.",
        "Crack Random Substitution_instruction": "Instructions",
        "Crack Random Substitution_2018_instruction": "Instructions",
        "Crack a Caesar Cipher_instruction": "Instructions",
        "Crack a Caesar Cipher_2018_instruction": "Instructions",
        "D_Frozen_nested3_instruction": "Let's spin that line of shapes around!",
        "D_Frozen_nested4_instruction": "Time to layer those shapes!",
        "D_Frozen_nested5_instruction": "Play with the snowflakes!",
        "D_Frozen_nested6_instruction": "Draw a stair-step pattern that uses turns between 75 and 105 degrees.",
        "D_Frozen_nested7_instruction": "Now, turn around 180 degrees and draw the stair pattern again!",
        "D_Frozen_nested8_instruction": "Spin that shape around 5 or 6 times in a circle.",
        "D_Frozen_nested9_instruction": "Try playing around with what you've created. Draw whatever you like!\n- What happens if you use two different angles in your stair step pattern?\n- What happens if you make your diamond pattern longer or shorter?\n- What does it look like to draw two snowflakes on top of one another?",
        "Dance Party 1-validated_instruction": "What do you think will happen when you click on the alien?  ",
        "Dance Party 1-validated_simple_instruction": "What do you think will happen when you click on the alien?  ",
        "Dance Party 2_instruction": "Change the behavior inside the `___ begins ___` block to make the alien start spinning around.",
        "Dance Party 2_simple_instruction": "Change the behavior inside the `___ begins ___` block to make the alien start spinning around.",
        "Dance Party 3 - Validated_instruction": "Create a new sprite called `alien2`, then make it do a different dance move when it's clicked.  ",
        "Dance Party 3 Ram_instruction": "Make the sprite do something different when you press the up arrow.",
        "Dance Party 3_instruction": "Create a new sprite called `alien2`, then make it do a different dance move when it's clicked.  ",
        "Dance Party 3_simple_instruction": "Create a new sprite called `alien2`, then make it do a different dance move when it's clicked.  ",
        "Dance Party 4 Validated_instruction": "Create a third sprite called `alien3` and get all of your aliens to stand in a line. ",
        "Dance Party 4_instruction": "Create a third sprite called `alien3` and get all of your aliens to stand in a line. ",
        "Dance Party 4_simple_instruction": "Create a third sprite called `alien3` and get all of your aliens to stand in a line. ",
        "Dance Party 5 - Validated_instruction": "Add code to change the color of each alien when it gets clicked.",
        "Dance Party 5_instruction": "Add code to change the color of each alien when it gets clicked.",
        "Dance Party 5_simple_instruction": "Add code to change the color of each alien when it gets clicked.",
        "Dance Party 6 - Validated_instruction": "Use the `stops everything` block to make each alien stop moving when it is clicked.",
        "Dance Party 6_instruction": "Use the `stops everything` block to make each alien stop moving when it is clicked.",
        "Dance Party 6_simple_instruction": "Use the `stops everything` block to make each alien stop moving when it is clicked.",
        "Dance Party 7 - Validated_instruction": "Add a new bell sprite called `myBell` that makes all the aliens start doing the same dance move when it's clicked.",
        "Dance Party 7_instruction": "Add a new bell sprite called `myBell` that makes all the aliens start doing the same dance move when it's clicked.",
        "Dance Party 7_simple_instruction": "Add a new bell sprite called `myBell` that makes all the aliens start doing the same dance move when it's clicked.",
        "Dance Party Freeplay_instruction": "Now create your own alien disco!",
        "Dance Party Freeplay_simple_instruction": "Now create your own alien disco!",
        "Dance Party Predict_instruction": "What do you think will happen when you click on the alien?  ",
        "Dance Party Predict_simple_instruction": "What do you think will happen when you click on the alien?  ",
        "ECSPD Binary Odometer_instruction": "This is another resource you could use with your students.",
        "Eval Booleans 1_instruction": "Boolean operators (like >, <, =) allow us to compare different values, returning either true or false. Click \"Run\" to see how this expression evaluates.",
        "Eval Booleans 2_instruction": "Can you set the values so that this expression evaluates as true?",
        "Eval Booleans 3_instruction": "The string-length function returns the number of characters in a string (including spaces!) - make this code evaluate to true.",
        "Eval Booleans 4_instruction": "Here's an Evaluation Block called AND - it returns true if both of its parameters are true, otherwise it returns false. Edit the x variable so that this expression returns true.",
        "Eval Booleans 5_instruction": "This OR block returns true if either of its parameters is true. Otherwise, if both parameters are false it will return false. Set the y variable to a value that will cause this expression to return false.",
        "Eval Booleans 6_instruction": "Here's one more boolean block called NOT. This block flips true to false, or false to true. If you wrap this block of code in a NOT block, it should return true (because we are asking if the two expressions do NOT produce equal values).",
        "Eval Booleans Free Play_instruction": "Free Play: Try out some creations of your own using Booleans.",
        "Eval Booleans_instruction": "Booleans allow us to compare different values, returning \"true\" if the are equal, or \"false\" if they are not. What do you think this code will evaluate to?",
        "Eval Cond 1_instruction": "The cond block checks the boolean expressions in the left column, and as soon as it finds one that returns \"true\" it runs the corresponding code on the right. If none of the expressions evaluate to \"true,\" it runs the bottom block. Update the \"temperature\" variable so that this block returns \"It's just right.\"",
        "Eval Cond 2 (copy 1)_instruction": "This condition returns a different shape based on the value of the \"sides\" variable - change the value of \"sides\" so that the conditional returns a triangle.",
        "Eval Cond 2_instruction": "This condition returns a different shape based on the value of the \"sides\" variable - change the value of \"sides\" so that the conditional returns a triangle.",
        "Eval Cond 3 (copy 1)_instruction": "Can you write a conditional that checks the variable \"age\" and returns \"Old enough to vote and drive\" if age > 17, \"Old enough to drive\" if age is > 15, and \"Can't drive or vote\" if neither conditions is true. Hint: The first condition to return \"true\" wins - make sure you put your conditions in the right order.",
        "Eval Cond 3_instruction": "Can you write a conditional that checks the variable \"age\" and returns \"Old enough to vote and drive\" if age > 17, \"Old enough to drive\" if age is > 15, and \"Can't drive or vote\" if neither conditions is true. Hint: The first condition to return \"true\" wins - make sure you put your conditions in the right order.",
        "Eval Cond 4_instruction": "We can use the string=? function to make conditionals that respond to text input. Here's a function called green shape that takes a string for the type of shape. Complete the conditions so that the correct solid green shape is returned when the function is run with \"circle\", \"triangle\", \"square\", or \"rectangle\".",
        "Eval Cond 5_instruction": "Here's a similar function red shape with an additional variable for size. Complete the conditionals so the correct solid red image of a given size is drawn for \"circle\", \"triangle\", and \"star\".",
        "Eval Cond 6_instruction": "Write a function called food-critic, which takes in the name of a food and produces a String that says how you feel about that food. For example, (food-critic “pizza”) might evaluate to “delicious”, but (food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two foods to review, but you can you write more if you like!  Don’t forget to add an “else” clause!\nOne example - and part of the definition -  has already been done for you!",
        "Eval Cond 7_instruction": "Free Play: Write a function called green-shape, which takes in the name of a shape and produces a solid green shape. Your function should work with at least “circle”, “star” and “rectangle”, but you can add other shapes if you like. You can choose the size of each shape. Don’t forget to add an “else” clause!\nOne example - and part of the definition -  has already been done for you!\n",
        "Eval Cond 8_instruction": "Free Play: Suppose you want to own a car at 21, or have your own business by 30. Write a function called life-goals, which takes in an age and produces a string that describes your life goals by then. Don’t forget to add an “else” clause!\n",
        "Eval Contracts 1_instruction": "Use the \"star\" function to produce a red star with a 60 pixel radius",
        "Eval Contracts 10A_instruction": "Alright let's complete this puzzle with a Green Square that is 175 pixels in size.",
        "Eval Contracts 11A_instruction": "Can you complete this puzzle to read \"Hello World\" in the banner?",
        "Eval Contracts 2_instruction": "Check out the \"rotate\" function - can you use it to rotate this 90 pixel green square by 45 degrees?",
        "Eval Contracts 3_instruction": "Try using the \"text\" function to write this teal text at size 40.",
        "Eval Contracts 4 A_instruction": "The \"scale\" function returns an image that is scaled either larger or smaller than the input image. Try scaling this circle by a factor of 10 - how is the resulting image different than if you'd just made a circle of that size in the first place?",
        "Eval Contracts 4_instruction": "The scale function returns an image that is either larger or smaller than the input image. Try scaling this circle by a factor of 10. How is the returned image different than if you'd just made a circle of that size in the first place?",
        "Eval Contracts 8A_instruction": "Can you complete this puzzle? The big-triangle is 200 pixels in size and purple?",
        "Eval Contracts A_instruction": "Use the star function to produce a solid red star with a 60 pixel radius",
        "Eval Contracts C_instruction": "Check out the rotate function - can you use it to rotate this 90 pixel green square by 45 degrees?",
        "Eval Contracts E_instruction": "Try using the text function to write \"Hello, world!\" in teal at size 40.",
        "Eval Contracts shrink_instruction": "Can you complete this image using the \"shrink\" function block? The radius is 20. ",
        "Eval Define Funcs 1_instruction": "Here's a new function called green-triangle that takes a single Number for size and produces a green triangle. Use the new function to create a 125 pixel green triangle.",
        "Eval Define Funcs 2_instruction": "Let's look inside that green-triangle function to see how it works. Can you modify it so that the green-triangle function always draws outlined green triangles?",
        "Eval Define Funcs 3_instruction": "Here's the start of another new function called purple-circle with a domain of one Number (the radius) and a range of Image. The body of the function is broken though - fix it and then make a purple circle with 150 pixel radius",
        "Eval Define Funcs 4_instruction": "Create a new function called aqua-star that has a Domain of a single Number for radius and returns an aqua star of the given radius. Run your new function with a radius of 75.",
        "Eval Define Funcs 5_instruction": "Let's use that aqua-star function to make a row of different sized stars. From left to right, the stars should have radii of 25, 50, and 75.",
        "Eval Define Funcs Test_instruction": "Here's the start of another new function called purple-circle with a domain of one Number (the radius) and a range of Image. The body of the function is broken though - fix it and then make a purple circle with 150 pixel radius",
        "Eval Defining Vars Free Play 1_instruction": "Free Play: We've provided a function that fills your screen with my-image. Change my-image to see what patterns you can make.",
        "Eval Design Recipe .1_instruction": "Here's a Design Recipe for a function called square-circle with domain Number String and range Image. Click Edit to write the function definition (you will see two examples provided).",
        "Eval Design Recipe 1 (copy 1)_instruction": "We're going to write a function that draws a solid rectangle of any color that is twice wide as it is high. Start with an example - draw a solid green rectangle that has a height on 100 pixels.",
        "Eval Design Recipe 1_instruction": "Alright, now given the Contract wide-rect: Number String -> Image, write an example - draw a solid green rectangle that has a height of 100 pixels.",
        "Eval Design Recipe 2 (copy 1)_instruction": "Let's do one more example before writing the function definition - this time draw a solid red rectangle with a height of 75 pixels.",
        "Eval Design Recipe 2_instruction": "Let's do one more example before writing the function definition - this time draw a solid red rectangle with a height of 75 pixels.",
        "Eval Design Recipe 3_instruction": "The Design Recipe for wide-rect already has a contract and one example. Can you write a second example and then complete the definition? The wide-rect function should produce a rectangle of given color that is twice as wide as it is high.",
        "Eval Design Recipe 4_instruction": "Use the Design Recipe to create a function starburst. When given a number of points and an outer radius, starburst returns a yellow radial star with given points, and an inner radius that is half the outer radius.",
        "Eval Design Recipe 5_instruction": "Using the Design Recipe, write a function striped-flag that takes two colors and produces a flag that is 250 pixels wide, 150 pixels tall, with three even horizontal stripes of given colors, in the order color2, color1, color2.",
        "Eval Design Recipe 6_instruction": "Write a function large-polygon that should output a solid polygon of given sides and color that takes up most of the window, regardless of the number of sides. To make sure that the polygon doesn't get too large as you increase the number of sides, side length should be inversely proportional to side number, with a length of (800/sides).",
        "Eval Design Recipe Free Play_instruction": "Free Play: Use the Design Recipe to create some functions of your own design",
        "Eval Free Play_instruction": "Free Play: Make art with code!",
        "Eval Strings Images .1_instruction": "So far we've only dealt with a single type of data, Numbers. Another type of data is a String, which is any combination of letters, numbers, or other characters wrapped in quotation marks. Run the String \"Hello, world!\" and see what happens.",
        "Eval Strings Images .2_instruction": "The string-append function takes two Strings and returns a single combined String. Add a String \"Universe\" to the second argument of string-append.",
        "Eval Strings Images 1_instruction": "The third type of data we're going to use is an Image. This star function takes in a Number and two Strings, and it evaluates to an Image. Use this function to make a solid red star with radius of 100.",
        "Eval Strings Images 2_instruction": "Free Play: Every Evaluation Block is color-coded to let you know which data type it returns and which types it needs for its parameters. The last parameter of the triangle function takes a String that controls its color - try some different colors to see what works.",
        "Eval Strings Images 3_instruction": "Some functions can only take a specific set of Strings, such as the second argument of this circle function, which controls its style. Draw this orange outline circle using the special String block with a dropdown to make sure you only use valid styles.",
        "Eval Strings Images 4_instruction": "Try using the rectangle block to draw this solid, red rectangle - it is 175 pixels wide and 100 pixels tall.",
        "Eval Strings Images 5_instruction": "Try using this new Evaluation Block called overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.",
        "Eval Strings Images 6_instruction": "Use the overlay block to place a 75 pixel radius yellow star on top of a 150 pixel long blue square.",
        "Eval Strings Images 7_instruction": "The offset block lets you move an image relative to where it would normally be placed. Use this block to offset the square by 100 pixels on the y-axis.",
        "Eval Strings Images 8_instruction": "Here's a different kind of star block - it's called radial-star and it allows you to draw stars with any number of points! Use it to create a 7 point solid orange star with an inner radius of 75 pixels and an outer radius of 175 pixels.",
        "Eval Strings Images Free Play_instruction": "Free Play: Explore the blocks available to create something interesting. Make sure to share your favorite creations.",
        "Farmer for Authored Hint testing_instruction": "Wow, I found a really deep hole! I don't know how many shovelfuls of dirt it needs.  Can you write a program that fills it until the ground is even?  Hint:  Try using the while loop this time.",
        "Farmer for TTS testing_instruction": "Wow, I found a really deep hole! I don't know how many shovelfuls of dirt it needs.  Can you write a program that fills it until the ground is even?  Hint:  Try using the while loop this time.",
        "Finalize Your Chaser Game v.1_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "Finalize Your Chaser Game v.1_2018_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "Find the Wizard_instruction": "Build whatever you want. This is an example of a number-guessing game!",
        "Find the Wizard_2018_instruction": "Build whatever you want. This is an example of a number-guessing game!",
        "Fish Tank 2-validated_instruction": "Change Dusty (the tumbleweed) to a fish.",
        "Fish Tank 2-validated_simple_instruction": "Change Dusty (the tumbleweed) to a fish.",
        "Fish Tank 3-validated Ram_instruction": "Change the fish's behavior so that it swims around the tank.",
        "Fish Tank 3-validated_instruction": "Change the fish's behavior so that it swims around the tank.",
        "Fish Tank 3-validated_simple_instruction": "Change the fish's behavior so that it swims around the tank.",
        "Fish Tank 4-validated_instruction": "Use the `set background color` block to make the background blue.",
        "Fish Tank 4-validated_simple_instruction": "Use the `set background color` block to make the background blue.",
        "Fish Tank 5-validated_instruction": "Our fish is getting a little lonely. Add another sprite to the fish tank.",
        "Fish Tank 5-validated_simple_instruction": "The fish wants a friend.   Add a new sprite.",
        "Fish Tank 6-validated_instruction": "Add a behavior to the fish's new friend.",
        "Fish Tank 6-validated_simple_instruction": "Add a behavior to the fish's new friend.",
        "Fish Tank 7-validated_instruction": "Use some new blocks from the toolbox to make your fish tank special!",
        "Fish Tank 7-validated_simple_instruction": "Use some new blocks from the toolbox to make your fish tank special!",
        "Food Fight_instruction": "You can make whatever you want in play lab! This is an example of a game you can make in play lab.",
        "FoodFight_instruction": "This is an example of a game you can make in play lab.",
        "FoodFight_2018_instruction": "This is an example of a game you can make in play lab.",
        "Frequency Analysis_instruction": "Test",
        "Function intro Ryan_instruction": "Use the `build bridge` function twice to make a path to the Redstone Torch.",
        "GLJ Drag and fall_instruction": "This Corgi has been a good boy! Drag this carrot to him as a special treat.",
        "GLJ Dragity_instruction": "This Corgi has been a good boy! Drag this carrot to him as a special treat.",
        "GLJ Flappy2_instruction": "Click to flap - don't touch the ground!",
        "GLJr_Behavior_1_instruction": "On your worksheet, write what you think the dog will do when you click \"Run.\"",
        "GLJr_Behavior_2_instruction": "Now you have some new blocks! Try them out and see how they work. On your worksheet, write down which ones you tried, and what they do.",
        "GLJr_Behavior_5_instruction": "Now we have two sprites! Use behaviors to make the dog jittery and make the cat wander",
        "GLJr_Behavior_6_instruction": "Let's try some more behaviors - make the dog run up and make the cat run right.",
        "GLJr_Forever_1_instruction": "On your worksheet, write what you think the dog will do when you click \"Run.\"",
        "GLJr_Forever_2_instruction": "Now you have some new blocks! Try them out and see how they work. On your worksheet, write down which ones you tried, and what they do.",
        "GLJr_Forever_5_instruction": "Now we have two sprites! Use a loop to make the dog jittery and make the cat wander",
        "Game Lab Workshop: Random_instruction": "Pick a shape block and use calls to randomNumber() in place of one or more of the parameters. Maker sure you run it a few times so you can see the effect of randomization.",
        "Geometric Pattern_instruction": "Project Idea: Create a pattern using geometric ideas like shapes. This requires persistence and planning!",
        "Geometric Sun_instruction": "Project Idea: Create a pattern using geometric ideas like shapes. This requires persistence and planning!",
        "Geometric Sun_2018_instruction": "Project Idea: Create a pattern using geometric ideas like shapes. This requires persistence and planning!",
        "Get To The Goal_instruction": "Build whatever you want. This is an example of a number-guessing game!",
        "Grade 4 Example PlayLab Project #1_instruction": "Take a look at this project.  Do you see how it was made?",
        "Grade 4 Example PlayLab Project #2_instruction": "Take a look at this project.  Do you see how it was made?",
        "Guess The Number 2_instruction": "Build whatever you want. This is an example of a number-guessing game!",
        "Guess The Number_instruction": "Build whatever you want. This is an example of a number-guessing game!",
        "Guess The Number_2018_instruction": "Build whatever you want. This is an example of a number-guessing game!",
        "Harvester Test_instruction": "It's harvest time! But I forgot what crop I planted at which tile. Please help me harvest all my crops, no matter how they were originally planted!",
        "Harvesting_instruction": "Uh oh, I lost my map and can't remember what I planted. Every sprout could grow up to be corn, beans, or pumpkins. Can you write some code to pick all the crops, no matter what they are?",
        "HoCAB_labyrinth1_instruction": "Use the arrow blocks to solve this maze!",
        "Infinity_catch_instruction": "Can you make Elsa (\"actor 2\") catch up with Anna by using the arrow keys?",
        "Infinity_finale_instruction": "Create anything you like and share it!",
        "Infinity_move_collide_instruction": "Hiro is \"actor 1\".  Move him right to Baymax, and play a sound when they touch.",
        "Infinity_move_directions_instruction": "Baymax is \"actor 2\".  Add Move blocks and then move Baymax using the arrows.  Make him touch the two other characters.",
        "Infinity_move_right_instruction": "Hiro is \"actor 1\".  Use the Move block to move Hiro right to touch Baymax.",
        "Infinity_repeat_instruction": "Use a \"repeat forever\" block to make Anna move up and down 400 pixels.",
        "Infinity_say_instruction": "Make Anna say \"Hi there.\" by using the Say block.",
        "Infinity_shoot_instruction": "Baymax is \"actor 2\".  Make Baymax throw a rocket at Hiro.",
        "Infinity_shoot_directions_instruction": "Hiro is \"actor 3\".  Make Hiro throw a projectile to each of the four characters.  Wait one second between each throw.",
        "Infinity_test_instruction": "This is a test Infinity level.",
        "Infinity_touch_faster_instruction": "Touch even more snowflakes!",
        "Infinity_touch_four_instruction": "Move Anna up, down left, and right to touch each of the four snowflakes.",
        "Infinity_touch_score_instruction": "Make Anna score a point when she touches a snowflake.  Then click \"Run\" and steer her to touch each snowflake once.",
        "Inspirational Artwork_instruction": "Free Play Inspiration: You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own.\n \nWant to know how our inspiration pattern was made? ",
        "InspirationalArtwork_instruction": "If this picture inspires you, try to make something similar. Otherwise, create something all your own.",
        "InspirationalArtwork_2018_instruction": "If this picture inspires you, try to make something similar. Otherwise, create something all your own.",
        "Internet Simulator: Broadcast Mode_instruction": "Now use the Internet Simulator to send the battleship moves. For setup, join a Room with your group, and add ships to your paper board for each opponent. When playing, all communication must be done through the tool, so no talking, but have fun!\n",
        "Internet Simulator: Broadcast_instruction": "Now use the Internet Simulator to send the battleship moves. For setup, join a Room with your group, and add ships to your paper board for each opponent. When playing, all communication must be done through the tool, so no talking, but have fun!\n",
        "Internet Simulator: Broadcast_2018_instruction": "Now use the Internet Simulator to send the battleship moves. For setup, join a Room with your group, and add ships to your paper board for each opponent. When playing, all communication must be done through the tool, so no talking, but have fun!\n",
        "Internet Simulator: DNS Mode_instruction": "In this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. Send a message in the form GET [hostname] to the DNS service at address <yourRouterNumber>.15 to get a student's address.",
        "Internet Simulator: DNS_instruction": "In this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. Send a message in the form GET [hostname] to the DNS service at address <yourRouterNumber>.15 to get a student's address.",
        "Internet Simulator: DNS_2018_instruction": "In this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. Send a message in the form GET [hostname] to the DNS service at address <yourRouterNumber>.15 to get a student's address.",
        "Internet Simulator: Packets_instruction": "Develop a Protocol for Reliably Sending a Message.\n\nConstraints:\n- Packets may contain only 8 characters\n- Packets may drop with small probability\n- Packets may not arrive in order",
        "Internet Simulator: Packets_2018_instruction": "Develop a Protocol for Reliably Sending a Message.\n\nConstraints:\n- Packets may contain only 8 characters\n- Packets may drop with small probability\n- Packets may not arrive in order",
        "Internet Simulator: Routers_instruction": "Send messages with your classmates (Click to see full instructions)",
        "Internet Simulator: Routers_2018_instruction": "Send messages with your classmates (Click to see full instructions)",
        "Internet Simulator: Sending Binary Messages 1_instruction": "Develop, document, and test a protocol that allows you to use Internet Simulator to relay a message. See the worksheet for more detailed instructions.  ",
        "Internet Simulator: Sending Binary Messages_instruction": "Develop, document, and test a protocol that allows you to use Internet Simulator to relay a message. See the worksheet for more detailed instructions.  ",
        "Internet Simulator: Sending Binary Messages_2018_instruction": "Develop, document, and test a protocol that allows you to use Internet Simulator to relay a message. See the worksheet for more detailed instructions.  ",
        "Internet Simulator: Sending Numbers_instruction": "With your partner, develop a protocol or set of rules for communicating a drawing using only bits. See the worksheet handed out by your teacher for more detailed instructions!",
        "Internet Simulator: Sending Numbers_2018_instruction": "With your partner, develop a protocol or set of rules for communicating a drawing using only bits. See the worksheet handed out by your teacher for more detailed instructions!",
        "Internet Simulator: Sending Text_instruction": "Work with a partner or in a small team to develop a protocol that allows you to send formatted text. See the worksheet handed out by your teacher for more detailed instructions!",
        "Internet Simulator: Sending Text_2018_instruction": "Work with a partner or in a small team to develop a protocol that allows you to send formatted text. See the worksheet handed out by your teacher for more detailed instructions!",
        "Just for Testing_instruction": "Test instructions",
        "K-1 Artist 1 Assessment 1_instruction": "Draw a short line up and a long one to the right!",
        "K-1 Artist Loops 1_instruction": "Draw this line by moving East 4 times.",
        "K-1 Artist Loops 2_instruction": "Now, draw the same line using a loop.",
        "K-1 Artist Loops 3_instruction": "Can you loop these blocks to draw 6 lines?",
        "K-1 Artist Loops 4_instruction": "Could a loop help us draw the top of this castle?",
        "K-1 Artist Loops 5_instruction": "What can you loop 4 times to draw these stairs?",
        "K-1 Artist Loops 6_instruction": "This one needs two loops: one to go up the stairs and one to go down.",
        "K-1 Artist Loops 7_instruction": "Loops can help you finish this pattern.",
        "K-1 Artist Loops 8_instruction": "This staircase has longer steps.",
        "K-1 Artist Loops 9_instruction": "What is the easiest way to draw these stairs?",
        "K-1 Artist Loops Free Play_instruction": "Free play, draw something fun!",
        "K-1 Artist1 1_instruction": "Draw the foot of the man with one line",
        "K-1 Artist1 10_instruction": "Draw and Jump to make the dashed path to the treasure X",
        "K-1 Artist1 2_instruction": "Draw the whisker on the cat with two lines!",
        "K-1 Artist1 3_instruction": "Draw two lines east and two lines north to finish the house!",
        "K-1 Artist1 4_instruction": "Draw lines up, over, and down to complete the castle!",
        "K-1 Artist1 5.5_instruction": "Complete the third tower of the castle using short lines",
        "K-1 Artist1 5_instruction": "Draw the stem of this flower with two lines!",
        "K-1 Artist1 6_instruction": "Finish the picture by using a jump block!",
        "K-1 Artist1 7_instruction": "Use the jump block to move without drawing. Jump up and draw a line.",
        "K-1 Artist1 8_instruction": "Draw the dashed line by using both the jump and draw blocks",
        "K-1 Artist1 9_instruction": "Draw and Jump to make the dashed line",
        "K-1 Artist1 Assessment 1_instruction": "Draw the short and long lines!",
        "K-1 Artist1 Assessment 2_instruction": "Draw the short dashed lines!",
        "K-1 Artist2 1_instruction": "Draw a square below the triangle.",
        "K-1 Artist2 2_instruction": "Jump and draw a square next to the house.",
        "K-1 Artist2 3_instruction": "Draw a square above the other square",
        "K-1 Artist2 4_instruction": "Draw a rectangle to complete the bridge.",
        "K-1 Artist2 5_instruction": "Draw a rectangle to complete the bridge supports",
        "K-1 Artist2 6_instruction": "Draw two squares to make a rectangle!",
        "K-1 Artist2 Assessment1_instruction": "Assessment: Draw a square next to the other square.",
        "K-1 Artist2 Free Draw_instruction": "Draw anything!",
        "K-1 Artist2_7_instruction": "Draw a rectangle to give the dresser a top drawer!",
        "K-1 Bee 1_instruction": "Move me to the flower, get the nectar, then move me to the honeycomb, and make honey",
        "K-1 Bee 10_instruction": "Get four nectar and then make two honey!",
        "K-1 Bee 11.5_instruction": "Get four nectar to make four honey!",
        "K-1 Bee 11_instruction": "Get three nectar and then make one honey",
        "K-1 Bee 12_instruction": "Get three nectar and then make two honey!",
        "K-1 Bee 13_instruction": "Get three nectar and then make one honey!",
        "K-1 Bee 14_instruction": "Get me to the nectar, pick it up, get me to the honey, and make honey!",
        "K-1 Bee 15_instruction": "Get two nectar to make two honey!",
        "K-1 Bee 2_instruction": "Move me to the flower, get the nectar, then move me to the honeycomb, and make honey",
        "K-1 Bee 3_instruction": "Move me to the flower, get the nectar, then move me to the honeycomb, and make honey",
        "K-1 Bee 4_instruction": "Get two nectar and then make two honey!",
        "K-1 Bee 5_instruction": "Get three nectar and then make three honey!",
        "K-1 Bee 6_instruction": "Get two nectar and then make two honey!",
        "K-1 Bee 7_instruction": "Get three nectar and then make two honey!",
        "K-1 Bee 8_instruction": "Get two nectar and then make two honey!",
        "K-1 Bee 9_instruction": "Get two nectar and then make two honey!",
        "K-1 Bee Assessment 1_instruction": "Get nectar to make honey!",
        "K-1 Bee Assessment 2_instruction": "Get nectar to make honey!",
        "K-1 Bee Loops 1_instruction": "Get the nectar to make honey!",
        "K-1 Bee Loops 10_instruction": "Get all of the nectar and make all of the honey.",
        "K-1 Bee Loops 11_instruction": "Get all of the nectar and honey!",
        "K-1 Bee Loops 12_instruction": "Get all of the nectar and all of the honey.",
        "K-1 Bee Loops 2_instruction": "Use a `repeat` loop to move and then get the nectar and make honey!",
        "K-1 Bee Loops 3_instruction": "Use three `repeat` loops to get the nectar and make honey!",
        "K-1 Bee Loops 4_instruction": "Use `repeat` loops to get the nectar, make honey, and to move!",
        "K-1 Bee Loops 5_instruction": "Use `repeat` loops to get the nectar and honey!",
        "K-1 Bee Loops 6_instruction": "Use a `repeat` loop to get the nectar, get honey, and to move!",
        "K-1 Bee Loops 7_instruction": "Get the nectar and make honey!",
        "K-1 Bee Loops 8_instruction": "Get the nectar and make honey!",
        "K-1 Bee Loops 9_instruction": "Get the all the nectar and make all of the honey.",
        "K-1 Bee Loops Assessment 1_instruction": "Get nectar to make honey and use loops to move!",
        "K-1 Bee Loops Assessment 2_instruction": "Get nectar to make honey using loops!",
        "K-1 Bee Puzzle 12_instruction": "Get three nectars and then make two honey",
        "K-1 Building a Foundation Assessment_instruction": "Build a three level pyramid, there are no other directions, so just play with the pieces until you get it!",
        "K-1 Maze 10_instruction": "Go around the TNT to get me to the pig! ",
        "K-1 Maze 11_instruction": "Trace the path and lead me to the silly pig. Avoid TNT or the feathers will fly! Hint: He's South of me.",
        "K-1 Maze 2_instruction": "Move me East to get me to the pig!",
        "K-1 Maze 3_instruction": "Move me South to get me to the pig!",
        "K-1 Maze 4_instruction": "Move me North to get me to the pig!",
        "K-1 Maze 5_instruction": "Move me East to get me to the pig!",
        "K-1 Maze 6_instruction": "Move one way, then another to get me to the pig!",
        "K-1 Maze 7_instruction": "Move one way, then another to get me to the pig!",
        "K-1 Maze 8_instruction": "Move one way, then another to get me to the pig!",
        "K-1 Maze 9_instruction": "Move one way, then another to get me to the pig!",
        "K-1 Maze Assessment 1_instruction": "Assessment -- Get me to the pig!",
        "K-1 Maze Assessment 12_instruction": "Assessment Level",
        "K-1 Maze Assessment 13_instruction": "Assessment Level",
        "K-1 Maze Assessment 2_instruction": "Assessment -- Get me to the pig!",
        "K-1 Maze Loops 1_instruction": "Get me to the pig!",
        "K-1 Maze Loops 10_instruction": "Get me to the pig! Using the `repeat` loop will make it much easier.",
        "K-1 Maze Loops 11_instruction": "Get me to the pig!  \nThe `repeat` loop will make this easier.",
        "K-1 Maze Loops 12_instruction": "Get me to the pig! The `repeat` loop will make this easier.",
        "K-1 Maze Loops 2_instruction": "Use the `repeat` block to get me to the pig!",
        "K-1 Maze Loops 3_instruction": "Get me to the pig! Be sure to use `repeat` loops.",
        "K-1 Maze Loops 4_instruction": "Get me to the pig!",
        "K-1 Maze Loops 5_instruction": "Get me to the pig! Be sure to use `repeat` loops.",
        "K-1 Maze Loops 6_instruction": "Get me to the pig! Be sure to use `repeat` loops.",
        "K-1 Maze Loops 7_instruction": "Get me to the pig! Be sure to use `repeat` loops.",
        "K-1 Maze Loops 8_instruction": "Use `repeat` loops to get me to the pig.",
        "K-1 Maze Loops 9_instruction": "Get me to the pig!",
        "K-1 Maze Loops Assessment 1_instruction": "Look at all we've learned! Use a `repeat` loop to get me to the pig!",
        "K-1 Maze Loops Assessment 2_instruction": "Use `repeat` loops to get me to the pig!",
        "K-1 Maze Multi 14_instruction": "Assessment Level",
        "K-1 Maze Multi 15_instruction": "Assessment Level",
        "K-1 Maze Sequence Assessment 1_instruction": "Let's see what you've learned!\nMove one way, then another to get me to the pig.",
        "K-1 Maze Sequence Assessment 2_instruction": "Move one way, then another to get me to the pig.",
        "K-1 Maze debug Assessment 1_instruction": "Assessment -- Debug this level by rearranging and adding blocks to get me to the pig!",
        "K-1 artist 1 level 10_instruction": "Draw the dashed line by using both the jump and draw blocks",
        "K-1 artist 1 level 9_instruction": "Draw this using three lines",
        "K-1 maze debug 1_instruction": "Change the code to get me to the pig!",
        "K-1 maze debug 10_instruction": "Debug this level by rearranging and changing blocks to get me to the pig!",
        "K-1 maze debug 11_instruction": "This is a test!\nDebug this level by rearranging and changing blocks to get me to the pig",
        "K-1 maze debug 2_instruction": "Figure out what is missing and then add blocks to get me to the pig!",
        "K-1 maze debug 3_instruction": "Something is not quite right. REMOVE blocks to get me to the pig!",
        "K-1 maze debug 4_instruction": "Run through these blocks and fix them! I think I might be going in the wrong direction.",
        "K-1 maze debug 5_instruction": "Debug this level by rearranging and changing blocks to get me to the pig!",
        "K-1 maze debug 6_instruction": "Debug this level by rearranging and changing blocks to get me to the pig!",
        "K-1 maze debug 7_instruction": "Debug this level by rearranging and changing blocks to get me to the pig!",
        "K-1 maze debug 8_instruction": "Debug this level by rearranging and adding blocks to get me to the pig!",
        "K-1 maze debug 9_instruction": "Debug this level by rearranging and changing blocks to get me to the pig!",
        "K2.0 sequence 1_instruction": "A bug! Fix the code to get me to the pig.",
        "K2.0 sequence 10_instruction": "Challenge: Move me around the TNT to get to the pig.",
        "K2.0 sequence 12_instruction": "Let's get that pig! ",
        "K2.0 sequence 2_instruction": "Fix the code to get me to the pig!",
        "K2.0 sequence 3_instruction": "Something is not quite right. REMOVE a block to get me to the pig!",
        "K2.0 sequence 4_instruction": "Time for a shorter puzzle!  Move one way, then another to get me to the pig.",
        "K2.0 sequence 4a_instruction": "Try this puzzle again from the start!",
        "K2.0 sequence 5_instruction": "Move one way, then another to get me to the pig!",
        "K2.0 sequence 6_instruction": "Figure out what is missing and then add blocks to get me to the pig!",
        "K2.0 sequence 7_instruction": "Solve this level and get me to the pig!",
        "K2.0 sequence 8_instruction": "Debug this level by adding blocks to get me to the pig!",
        "K2.0 sequence 9_instruction": "Challenge: Go around the TNT to get me to the pig! ",
        "K2.0 sequence FP_instruction": "Now figure out how to get the pig any way you can!",
        "K2.0 sequence pre_instruction": "Play with these blocks to see if you can get me to the pig!",
        "KIKI GLJ Test Response_instruction": "Look carefully at the code below.  What do you think the plane will do when you click \"Run\"?\n",
        "KTest1_instruction": "Can you make me move South once more to get to the pig?",
        "KTest2_instruction": "Trace the path and lead me to the silly pig. Avoid TNT or the feathers will fly!",
        "Kiki_StarWars_Test_3_instruction": "Text",
        "Kiki_StarWars_Test_4_instruction": "Text",
        "Kiki_StarWars_Test_5_instruction": "Text",
        "Kiki_StarWars_Test_5_Example_instruction": "Text",
        "LaurelDebugging4Video1_instruction": "Move Laurel around and get as much gold as you can!",
        "Limited Quantity of Blocks Test_instruction": "Get me to the pig by adding only one block",
        "Luigi's Pizza 1_instruction": "Welcome to Luigi's Pizza! To order a pizza, type the name of a topping into the cost function, and we'll return the price of that pizza. Try ordering a pepperoni pizza to start.",
        "Luigi's Pizza 2 (copy 1)_instruction": "Right now there are only four choices available at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional block in the \"cost\" function. Once you've added your toppings, test out the function to make sure it works.",
        "Luigi's Pizza 2_instruction": "Right now there are only four choices available at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional block in the cost function. Once you've added your toppings, test out the function to make sure it works.",
        "Luigi's Pizza 3 (copy 1)_instruction": "That's better, everyone loves more variety in their pizza toppings! But you still can't please everyone, and folks are coming in to order toppings that Luigi doesn't have. Instead of saying no to those people, could you update the \"else\" clause so that we charge them a premium for toppings that we don't normally offer?",
        "Luigi's Pizza 3_instruction": "That's better, everyone loves more variety in their pizza toppings! But you still can't please everyone, and folks are coming in to order toppings that Luigi doesn't have. Instead of saying no to those people, could you update the else clause so that we charge them a premium for toppings that we don't normally offer? Let's charge $10,000 for a topping we don't carry.",
        "Luigi's Pizza 4_instruction": "Free Play: What can you do to make Luigi's cost function even more useful?",
        "MC Agent Freeplay_instruction": "**Freeplay:**  Time to explore on your own!",
        "MC HOC 2016 Level 10_instruction": "It's time to make your own Minecraft! Spawn creatures and then make them do whatever you want. Have fun!",
        "MC HOC 2016 Level 2-2_instruction": "The chicken is frozen. Place `move` and `turn` blocks in the `when spawned` slot to get it to move.",
        "MC HOC 2016 Level 3_instruction": "Great, the chicken moved! But then she stopped. In games, chickens walk forever. Use a `forever do` loop to keep these chickens moving.\n",
        "MC HOC 2016 Level 4_instruction": "Now the chickens look weird moving the same way. Games use random moves to make things look real. Make the chickens `turn random`.",
        "MC HOC 2016 Level 5_instruction": "These cows are lost! Lead them to the grass with the `move a step toward` block in a `forever do` loop.",
        "MC HOC 2016 Level 6_instruction": "Now you make the zombies. Use the `spawn` block to make 3 zombies when night falls. Get them to move towards you. Survive until morning.",
        "MC HOC 2016 Level 8_instruction": "The path to your sheep is blocked by a stone wall. Luckily there is a Creeper here. Creepers explode after you touch them. Get the Creeper to explode the wall so you can reach your sheep!",
        "MC HOC 2016 New Drop_instruction": "In Minecraft, sheep drop wool. Place the `drop` block in `when used`, then walk over and use the sheep to drop an item.",
        "MC HOC 2016 New Spawn_instruction": "Now you can fill the world with what you want! Place`spawn` blocks under `when run` to spawn things when the game starts.",
        "MC HOC 2016 New Walk_instruction": "Let's explore our world! Move with the arrows, and press the space bar or tap the game board to use items. Use the door to get inside the house.",
        "MC HOC 2016 SCORE LEVEL_instruction": "Some games let you keep score. Play tag with these Iron Golems and use the `add 1 to score` block to give yourself a point when you tag them. Reach five points to win!",
        "MC HOC 2016 Village Test_instruction": "Oh no! Zombies have trapped you inside! Code the Iron Golem to chase and attack the zombies!",
        "MC_2017_Ryan_02_instruction": "Help the player get out by using loops to get the Agent to the pressure plate.",
        "MC_HOC_2017 Agent Test_instruction": "Click \"Run\" to move the player to the orange square inside of the house.",
        "MC_HOC_2017_01_instruction": "Click \"Run\" to move the player to the orange square inside of the house.",
        "MC_HOC_2017_01_Cole_instruction": "You need to collect all the tools on this journey. Move around using the **arrow keys**, and get to the chest on the path to win",
        "MC_HOC_2017_01_Kiki_instruction": "Click \"Run\" to move the player to the orange square inside of the house.",
        "MC_HOC_2017_01_RETRY_instruction": "Write code to get the Agent to the pressure plate, then press \"Run\" and use the arrow keys to move the player out of the house to collect the chest. ",
        "MC_HOC_2017_02_instruction": "Get the Agent to the pressure plate.",
        "MC_HOC_2017_02_Cole_instruction": "Move the Agent to the pressure plate so that {currentPlayerName} can get to the map. ",
        "MC_HOC_2017_02_Kiki_instruction": "Get the Agent to the pressure plate, then get the player to the orange square.",
        "MC_HOC_2017_02_Will_instruction": "Get the Agent to the pressure plate.",
        "MC_HOC_2017_03_Cole_instruction": "Code the Agent to open the gate. ",
        "MC_HOC_2017_03_Kiki_instruction": "Get the Agent to the pressure plate.",
        "MC_HOC_2017_04_instruction": "Change the loop from the last puzzle to help the Agent make a path over the wider part of this river.",
        "MC_HOC_2017_04POINT5_Cole_instruction": "Get the Agent to the pressure plate.",
        "MC_HOC_2017_04POINT5_RYAN_instruction": "Get the Agent to the pressure plate.",
        "MC_HOC_2017_04_Cole_instruction": "Get the Agent to the pressure plate.",
        "MC_HOC_2017_04_Kiki_instruction": "Get the Agent to the pressure plate.",
        "MC_HOC_2017_05_instruction": "Use a function to help the Agent get to the pressure plate.",
        "MC_HOC_2017_05_Cole_instruction": "Get the player to the shovel.",
        "MC_HOC_2017_05_Josh_instruction": "Get the player to the shovel.",
        "MC_HOC_2017_05_Kiki_instruction": "Get the player to the orange square.",
        "MC_HOC_2017_06_Cole_instruction": "Fix this code to get the Agent to build a bridge across this river.",
        "MC_HOC_2017_06_Josh_instruction": "Fix this code to help the Agent build a bridge across this river.",
        "MC_HOC_2017_06_Kiki_instruction": "Fix this code to help the Agent build a bridge across this river.",
        "MC_HOC_2017_07_Cole_instruction": "Destroy the ice and get {currentPlayerName} to the Minecart.",
        "MC_HOC_2017_07_Kiki_instruction": "Use a function to clear the path to the orange square.",
        "MC_HOC_2017_07a_Kiki_instruction": "Clear the path to the orange square.",
        "MC_HOC_2017_08_Cole_instruction": "Change the provided function to work for this biome.",
        "MC_HOC_2017_08_Kiki_instruction": "Change the function to work for this puzzle.",
        "MC_HOC_2017_08_RY_instruction": "Use the functions to find a way across the lava.",
        "MC_HOC_2017_08_Will_instruction": "Use the functions to find a way across the lava.",
        "MC_HOC_2017_09_Cole_instruction": "Program the Agent to clear the player's path.",
        "MC_HOC_2017_09_Kiki_instruction": "Program the Agent to clear the player's path and get to the pressure plate.",
        "MC_HOC_2017_10_Cole_instruction": "Create a function to help you finish this minecart.",
        "MC_HOC_2017_10_Cole_old_instruction": "Create a function to help you finish this minecart.",
        "MC_HOC_2017_10_Kiki_instruction": "Create a function to help you finish this minecart.",
        "MC_HOC_2017_10_RETRY_instruction": "Use the functions to finish this minecart track.",
        "MC_HOC_2017_10_RYAN_instruction": "Create a function to help you finish this minecart.",
        "MC_HOC_2017_10_RYAN2_instruction": "Create a function to help you finish this minecart.",
        "MC_HOC_2017_13_Cole_instruction": "**Freeplay:**  Time to explore on your own!",
        "MC_HOC_2017_4.5v2_instruction": "Get the Agent to the pressure plate.",
        "MC_HOC_2017_Ali_instruction": "Use the functions to find a way across the lava.",
        "MC_HOC_2017_FP10x10_instruction": "**Freeplay:** Can you challenge yourself to collect all of the diamonds in this level? ",
        "MC_HOC_2017_FP10x10_RE_instruction": "**Freeplay:** Can you challenge yourself to collect all of the diamonds in this level? ",
        "MC_HOC_2017_FP20x20_instruction": "**Freeplay:**  Time to explore on your own!",
        "MC_HOC_2017_Ryan_03_instruction": "Now use loops to help The Agent build a bridge over the river by placing blocks in the water.",
        "MC_HOC_2017_Ryan_05_instruction": "Destroy these cacti so that the player can get to the goal.",
        "MC_HOC_Kiki_02_instruction": "Get The Agent to the pressure plate.",
        "MSM Big Game Empty_instruction": "All variables and functions are currently empty stubs. Each puzzle progression will be focused on defining and handful of them, and therefore adding functionality.",
        "MSM Big Game Vars 1 (copy 1)_instruction": "In the Variables toolbox you'll see several variables that define how your game characters look, move, and interact",
        "MSM Big Game Vars 1_instruction": "In the Variables toolbox you'll see several variables that define how your game characters look, move, and interact",
        "MSM Big Game Vars Backup_instruction": "In the Variables toolbox you'll see several variables that define how your game characters look, move, and interact",
        "MSM Defining Vars 1 (copy 1)_instruction": "Write a program that produces a 50 pixel solid green triangle.",
        "MSM Defining Vars 1_instruction": "Write a program that produces a 50 pixel solid green triangle.",
        "MSM Defining Vars 2 (copy 1)_instruction": "If we wanted to make fifty green triangles, it would be a pain to repeat that block of code 50 times. Let's create a variable called \"my-shape\" and put the code for a 50 pixel solid green triangle inside.",
        "MSM Defining Vars 2_instruction": "If we wanted to make fifty green triangles, it would be a pain to repeat that block of code 50 times. Let's create a variable called my-shape and put the code for a 50 pixel solid green triangle inside.",
        "MSM Defining Vars 3 (copy 1)_instruction": "Take your \"my-shape\" variable and use it with this provided code to draw two identical green triangles.",
        "MSM Defining Vars 3_instruction": "Take your my-shape variable and use it with this provided code to draw two identical green triangles that are 50 pixels in size.",
        "MSM Defining Vars 4_instruction": "Edit your my-shape variable so that it draws 75 pixel solid red stars.",
        "MSM Play Lab Butterfly 1_instruction": "Help Sam stay on the screen so that you can always see at least a little piece of him. Using the arrow keys, see how far Sam can go to the left while still staying onscreen. You’ll find that Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill in the code to make Sam stay on the screen.",
        "MSM Play Lab Butterfly 2_instruction": "Now make Sam stay on the right side of the screen. You'll have to experiment to see how far he can go and still be partially visible on the screen.",
        "MSM Play Lab Butterfly 3_instruction": "Now, combine your work to make Sam stay on both sides of the screen.",
        "MSM Play Lab Game 2_instruction": "Variables can also be used to control the speed of players in a game. Set the player speed and the enemy speed and see how the movement changes. Speed can be between 2 and 12.",
        "Middle School Hackathon Pt 1_instruction": "(Click to see full instructions)",
        "Middle School Hackathon Pt 2_instruction": "(Click to see full instructions)",
        "Mike Pair Programming_instruction": "Here are the instructions",
        "Mike Test Bee Conditionals 1_instruction": "This cloud is blocking my view! Check to see if there's a flower under the cloud, and only get nectar if there's a flower. Be careful, it can change!",
        "Mike Test Bee Conditionals 2_instruction": "Collect all of the nectar. You can only collect nectar from flowers, but you can check any space to see if there is a flower.",
        "MikeAssessment1_instruction": "Now do it right!",
        "MikeStar_instruction": "Draw this.",
        "MikeStarHard_instruction": "Draw this.",
        "MikeStarNested_instruction": "Draw this.",
        "MikeTest1_instruction": "Who knows what you should do?!?!",
        "MikeTest2_instruction": "Draw something!",
        "MikeTest3_instruction": "Build Something",
        "NEW Course 4 Artist Functions 1_instruction": "Can you draw a square that is 100 pixels in length, using a repeat loop?",
        "NEW Course 4 Artist Functions 10.1_instruction": "Use the functions from the previous puzzles to draw this pattern.",
        "NEW Course 4 Artist Functions 10_instruction": "Click \"edit\" to fill out the blocks in the function definition to make a 40 pixel square.",
        "NEW Course 4 Artist Functions 11_instruction": "Now we want to create a new function called `draw a line of squares` that draws six squares all in a row.  Can you build this function using this `draw a square 20` function that we created for you?",
        "NEW Course 4 Artist Functions 12_instruction": "Use the `draw a line of squares` function from the last puzzle to draw this pattern.",
        "NEW Course 4 Artist Functions 13_instruction": "Can you draw a star shape using the `draw a line of squares` function?  ",
        "NEW Course 4 Artist Functions 14_instruction": "Free-play time! ",
        "NEW Course 4 Artist Functions 2_instruction": "Can you draw 3 squares 20 pixels apart from one another? Each square is 100 pixels in size.",
        "NEW Course 4 Artist Functions 3_instruction": "Here is a new type of Block. It is called a `function` block. Click \"edit\" then fill it with the code for drawing a square with 100 pixel sides. \n\nWhen you're done editing the function, click \"Close\" to go back to your program.",
        "NEW Course 4 Artist Functions 4_instruction": "Use the `draw a square` function to draw this pattern.",
        "NEW Course 4 Artist Functions 5_instruction": "How did the \"draw a square\" block know what commands to run? Click on \"edit\" in the \"draw a square\" function block. The blocks in the function editor are the definition that make up \"draw a square.\" When you're done looking around, click \"Save and Close\" and then \"Run.\"",
        "NEW Course 4 Artist Functions 6_instruction": "Using the \"draw a square\" function block, can you draw this picture? Hint: each square is 20 pixels apart.\n",
        "NEW Course 4 Artist Functions 7_instruction": "Are you getting the hang of how to use function blocks? Let's modify this square so that it is 200 pixels in size. Click on \"edit\" to enter the `draw a square` function editor. Remember to click on \"Close\" to get out of the function editor. ",
        "NEW Course 4 Artist Functions 8_instruction": "We have created a new function for you called \"draw a triangle\".  Can you edit the function definition to draw a triangle with 100 pixel sides?",
        "NEW Course 4 Artist Functions 9_instruction": "Can you solve this by adding only one block?",
        "NEW Course 4 Artist Functions inspire_instruction": "Click here to see the inspiration picture again.",
        "NEW Course 4 Artist Params 1_instruction": "Let's define this function to draw a square with 50 pixel sides. Click \"edit\" to get started.",
        "NEW Course 4 Artist Params 10_instruction": "Create a `draw a hexagon` function block with a length parameter. This hexagon has sides that are 100 pixels in length. ",
        "NEW Course 4 Artist Params 11_instruction": "Can you figure out how to draw this shape? Edit the function to use the \"sides\" parameter.",
        "NEW Course 4 Artist Params 12_instruction": "Can you complete this drawing? The sides of all the shapes are 100 pixels long.",
        "NEW Course 4 Artist Params 12a_instruction": "This image is similar to the last. Can you use a `for` loop with your function to make this design?",
        "NEW Course 4 Artist Params 13_instruction": "Let's edit this \"draw a polygon\" function. It already has a \"sides\" parameter. Now, let's add a \"length\" parameter. \nThe perimeter of each shape is 200 pixels long. Do you remember the equation to make shapes the same size when they have a different number of sides?",
        "NEW Course 4 Artist Params 14_instruction": "Edit \"draw a spiral edge\" to use \"length\" and \"sides\" parameters, then recreate these shapes.",
        "NEW Course 4 Artist Params 15_instruction": "Freeplay: Here are the functions you've written, and some more for you to play with. Draw something awesome! Play with the pen width to see how different your drawings look!",
        "NEW Course 4 Artist Params 2_instruction": "Create a `draw triangle` function from scratch that makes a triangle with  50 pixel sides.",
        "NEW Course 4 Artist Params 3_instruction": "Now let's use the function to draw 5 triangles in a row. Each triangle is 30 pixels apart.\n",
        "NEW Course 4 Artist Params 4_instruction": "Do you notice anything different about these function blocks? Click “Run” to see what happens.",
        "NEW Course 4 Artist Params 5_instruction": "Replace the `???` in the `length` parameter input block. The pentagon has 100 pixel sides. ",
        "NEW Course 4 Artist Params 6_instruction": "Fill in the \"length\" parameter to draw these shapes by replacing the \"???\" with the right numbers. The square and triangle have 100 pixels sides while each side of the hexagon is 75 pixels long.",
        "NEW Course 4 Artist Params 7_instruction": "Can you complete this drawing? The sides of each triangle are 25 pixels larger than the last.  The first triangle has 25 pixel sides.",
        "NEW Course 4 Artist Params 8_instruction": "The code for this triangle function is broken. Can you edit the function to fix it, and then make triangles of length 25, 50, and 75?",
        "NEW Course 4 Artist Params 9_instruction": "Click \"edit\" to fill in the function definition of \"draw a square\" and add a parameter. It should take a length parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75 pixels in length, each 100 pixels apart.",
        "NEW Course 4 Artist Params inspire_instruction": "Free Play Inspiration: You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own.\n \nWant to know how our inspiration pattern was made? ",
        "NEW Course 4 Artist Vars 1.5_instruction": "Take a look at the code, can you see how the \"set length\" block and \"length\" block works together? Click on \"Run\" to see it in action. ",
        "NEW Course 4 Artist Vars 12_instruction": "Now, recreate the algorithm from the last level and create a pentagon with sides of length 150.",
        "NEW Course 4 Artist Vars 2.5_instruction": "Take a look at the code, can you see how the \"set length\" block and \"length\" block works together? Click on \"Run\" to see it in action. ",
        "NEW Course 4 Artist Vars 2_instruction": "Drag a number block to both the `set length` block and the `repeat _ times` block to draw a set of 50 pixel triangles. ",
        "NEW Course 4 Artist Vars 4 5_instruction": "Awesome job on the last puzzle, let's try it again this time let's make this cool design with with 60 pixel hexagon's.",
        "NEW Course 4 Artist Vars 4_instruction": "Let's try it again! \n\nCan you set the `length` variable to 60 to make this cool design with hexagons?",
        "NEW Course 4 Artist Vars 6_instruction": "Draw this pattern of pentagons with 100 pixel sides by setting the right value for `length` and dropping the `length` variable into all of the the correct places. \n\nSee how you only have to set the value for `length` once, and the code uses the right value everywhere?",
        "NEW Course 4 Bee For Loops 1_instruction": "Use a loop to collect the nectar from each flower.",
        "NEW Course 4 Bee For Loops 10_instruction": "Use your for loop \"counter\" variable to control how far to move horizontally.",
        "NEW Course 4 Bee For Loops 10a_instruction": "Ready for a challenge?  Take what you've learned about loops and try to solve this problem. Remember: You may have to run through solutions multiple times before you figure out all of the steps.",
        "NEW Course 4 Bee For Loops 11_instruction": "Can you use the loop variable to control movement and nectar collection?",
        "NEW Course 4 Bee For Loops 2_instruction": "Add the code necessary to make sure the bee collects all the nectar. Look at how much code you need for this puzzle! (We'll learn a simpler way in the next puzzle.)",
        "NEW Course 4 Bee For Loops 3_instruction": "Ah, the \"for loop\" makes this much easier! All the code you need is here, take a look at how it is put together then click \"Run\" to see how it works. ",
        "NEW Course 4 Bee For Loops 4 4_instruction": "Now we need to move forward \"counter\" times, then get nectar \"counter\" times.  Can you use two \"repeat\" loops to solve this challenge?",
        "NEW Course 4 Bee For Loops 4_instruction": "Replace the ??? in the \"for loop\" with the largest amount of nectar the bee has to collect. ",
        "NEW Course 4 Bee For Loops 5 5_instruction": "Are you getting the hang of using the \"for loop\"? Let's help the bee get the rest of the nectar.",
        "NEW Course 4 Bee For Loops 5_instruction": "You can also use a \"for loop\" to count down. Try gathering this nectar by counting down from 5 to 1 by 1.",
        "NEW Course 4 Bee For Loops 6_instruction": "The last number in your for loop is called the \"increment\". Each time the loop is run, the counter variable changes by the value of the increment. Try collecting these flowers using an increment of 2.",
        "NEW Course 4 Bee For Loops 7_instruction": "Now, let's combine the \"counter\" variable with a math block! How can you use the \"counter\" variable to navigate this garden with the fewest number of blocks possible? What do you need to do to collect 3, 6, 9, 12, 15 nectar this time? The secret is in the \"counter\" variable!\n\nRemember: If your loop is counting up, the increment is added to your \"counter\" variable each time through.",
        "NEW Course 4 Bee For Loops 8_instruction": "You've got this! What should your increment be to collect 3, 6, 9, 12, 15 nectar?",
        "NEW Course 4 Bee For Loops 9_instruction": "If your loop is counting down, the increment is subtracted from your counter variable each loop. What should your increment be to collect 15, then 12, then 9, 6, 3 nectar?",
        "NEW Course 4 Bee For Loops 95_instruction": "Take a look at each piece of the \"for loop\" that you have just created.  Can you figure out which numbers you need to double to solve this puzzle? Why does it work?",
        "NEW Course 4 Play Lab Params 11_instruction": "It's free play time! Have fun with all the blocks in your tool box. ",
        "NEW Course 4 Play Lab Params 5 5_instruction": "Let's try that again, but with less help. What do you need to edit this time to make the actors patrol?",
        "NEW Course 4 Play Lab Vars 4 5_instruction": "“What do you think this code will do? Press “Run” to see what happens.”",
        "NEW Course 4 Play Labs For Loops 7a_instruction": "Using what you learned so far, can you have Dinosaur take a step forward every time Penguin counts?",
        "NEW Course 4 Play Labs For Loops 8 Free Play_instruction": "It's Free Play time, have fun with all the blocks in your tool box. ",
        "NEW Course 4 Play Labs For Loops 8a_instruction": "Challenge: How would you use the \"for loop\" to get every actor to go around and say their actor number, then vanish from the screen? ",
        "NetSim Standalone Automatic DNS_instruction": "In this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. Send a message in the form GET [hostname] to the DNS service at address <yourRouterNumber>.15 to get a student's address.",
        "NetSim Standalone Broadcast_instruction": "In this version of the Internet Simulator, you can connect to up to 5 other people in a room. When you send messages in the room, everyone receives them. What are some of the challenges of this system, and how might you solve them?\n",
        "NetSim Standalone Classroom Routers_instruction": "In this version of the Internet Simulator, everyone connects to a router and has a specific address. To send messages, you have to address your message to the specific address of the recipient, and the router will take care of delivering it to the right computer. If there are other routers created in your class, ask for the address of one of your classmates and send them a message! View the Log Router to see the path the messages have taken through the network.",
        "NetSim Standalone Freeplay_instruction": "In this configuration, most of the options are turned on, and you can play with them. Have fun!",
        "NetSim Standalone Manual DNS_instruction": "In this version of the simulator you can't see the other students' addresses.  Instead, one of you must act as a name service, to help share addresses with each other.",
        "NetSim Standalone Packets TCP_instruction": "Messages on the Internet can take many paths to get to their destination, and sometimes along the way the message gets dropped. In this version of the Internet Simulator, there is a 10% chance of a packet being dropped, multiple packets may take different paths to the destination, and the default max packet size is set to 6 additional characters. ",
        "NetSim Standalone Routers Addresses_instruction": "For this activity, connect to a router with the others in your group. Important note: The router will only properly route messages where the first 4 bits are the To: address and the second 4 bits are the From: address.\n\n[TODO: NetSim needs to support hierarchical addresses. For now, level is set up for 4 bit to and from addresses]",
        "NetSim Standalone SendAB_instruction": "You and your partner share a single wire that can only be in state A or state B. You can set the wire to either state at any time, and you can read the state of the wire at any time. Can you figure out a way to effectively communicate with just this system?",
        "NetSim Standalone Sending Numbers Ascii_instruction": "Now that you've transmitted information represented as decimal numbers, you can map those numbers to text characters to send text-based information back and forth. With a text-based protocol, you can easily represent and communicate all kinds of information. ",
        "NetSim Standalone Sending Numbers_instruction": "You and your partner can now reliably send messages back and forth without extra coordination! While you're always sending bits back and forth, you can also represent those bits as decimal numbers. What kinds of information can you represent with this system? ",
        "NetSim_AddressingMessages_instruction": "In this version of the simulator, you will connect to a Router instead of directly to another student. Enter an address in the \"To\" box to send a message to another student.",
        "NetSim_AutomaticDNS_instruction": "In this version of the simulator a DNS service is provided for you. Send a message in the form GET [hostname] to the DNS service at address 15 to get a student's address.",
        "NetSim_ManualDNS_instruction": "In this version of the simulator you can't see the other students' addresses.  Instead, one of you must act as a name service, to help share addresses with each other.",
        "NetSim_SendAB_instruction": "Connect to another student.  Each of you can set the value of the wire between you to \"A\" or \"B\".  See if you can send a complete message!",
        "NetSim_SendAscii_instruction": "In this version of the simulator, you can send numbers or ASCII characters to one another, one bit at a time.",
        "NetSim_SendBits_instruction": "Connect to another student.  You can now set your wire to \"0\" or \"1\".  Send a message to your partner!",
        "NetSim_SendNumbers_instruction": "In this version of the simulator, you can view the decimal representations of the binary you are sending.",
        "NetSim_SendingABTest_instruction": "This is Sarah's test of making a netsim level",
        "NetSim_Superuser_instruction": "You have loaded NetSim in superuser mode.",
        "NetSim_Variant1_instruction": "NetSim: Variant 1 allows students to manually work out the timing of sending bits back and forth.",
        "NetSim_Variant2_instruction": "NetSim: Variant 2: Students connect directly to one another and send entire packets back and forth, exploring systems of encoding data.",
        "NetSim_Variant3_instruction": "NetSim: Variant 3: Connects groups of 2-6 students with a router, and explores issues in routing and DNS",
        "New Artist Project_instruction": "Draw something awesome! Your code is saved as a project that you can return to at any time.",
        "New Basketball Project_instruction": "Create your own Basketball game. You can change all the rules. When you're done, click Finish to let friends try your game on their phones.",
        "New Bounce Project_instruction": "Create your own Bounce game. You can change all the visuals and the rules. When you're done, click Finish to let friends try your game on their phones.",
        "New Course 4 Artist Functions Level 4_instruction": "Use the \"draw a square\" function to draw this pattern.",
        "New Gumball Project_instruction": "Create anything you like and share it!",
        "New Ice Age Project_instruction": "Create anything you like and share it!",
        "New Infinity Project_instruction": "Create anything you like and share it!",
        "New Minecraft Hero Project_instruction": "**Freeplay:**  Time to explore on your own!",
        "New Sports Project_instruction": "Create your own game! You're in charge here: you can change all the rules, mix and match sports, get creative! When you're done, click Finish to let friends try your game on their phones.",
        "Ninjacat Demo B (copy 1)_instruction": "\nLet’s begin by exploring a simple videogame, and then figuring out how it works. You can use the arrow keys to move the ninja left, right and jump - try to catch the unicorn and avoid the dragon!\n\n\n\n  \n\n",
        "Ninjacat Demo B_instruction": "Let’s begin by exploring a simple videogame, and then figuring out how it works. You can use the arrow keys to move the ninja up and down - try to catch the unicorn and avoid the dragon! When you think you've figured out how the game works, click \"Finish\"",
        "Ninjacat Demo No Animate_instruction": "Let’s begin by exploring a simple videogame, and then figuring out how it works. You can use the arrow keys to move the ninja up and down - try to catch the unicorn and avoid the dragon! When you think you've figured out how the game works, click \"Finish\"",
        "October15 JoL 1_instruction": "Program the artist to design a face for your jack-o-lantern!",
        "October15 bat_instruction": "Freeplay: Here are some functions to play with.  Can you draw a bat?\n",
        "October15 ghost 1_instruction": "Give the ghost eyes, using the \"draw a circle\" function.",
        "October15 pumpkin 1_instruction": "Finish this jack-o-lantern by drawing the eyes and nose in any style you would like.",
        "October15 stars 1_instruction": "Use loops and the \"random integer\" block to fill the night sky with stars of different shapes and sizes.",
        "Overworld Avoid Monsters_instruction": "Running into a Creeper is a bad idea. Carefully move past the Creepers and reach the safety of your home.",
        "Overworld Avoid Monsters_2018_instruction": "Running into a Creeper is a bad idea. Carefully move past the Creepers and reach the safety of your home.",
        "Overworld Chop Tree - allthethings_instruction": "Wood is a very important resource. Many things are made from it. Walk to the tree and use the “destroy block” command to chop it down.",
        "Overworld Chop Tree_instruction": "Wood is a very important resource. Many things are made from it. Walk to the tree and use the “destroy block” command to chop it down.",
        "Overworld Chop Tree_2018_instruction": "Wood is a very important resource. Many things are made from it. Walk to the tree and use the “destroy block” command to chop it down.",
        "Overworld Chop Trees_instruction": "We need to build a house before the sun goes down. Houses require a lot of wood. Cut down all 3 trees.",
        "Overworld Chop Trees_2018_instruction": "We need to build a house before the sun goes down. Houses require a lot of wood. Cut down all 3 trees.",
        "Overworld Free Play 20x20_instruction": "Congratulations! You've completed all our puzzles! Now mine, build, and create something unique by using everything you've learned so far.",
        "Overworld Free Play 20x20_2018_instruction": "Congratulations! You've completed all our puzzles! Now mine, build, and create something unique by using everything you've learned so far.",
        "Overworld House Frame Chosen_instruction": "Build the rest of your house from any material you'd like. The \"repeat\" command will come in handy.",
        "Overworld House Frame Chosen_2018_instruction": "Build the rest of your house from any material you'd like. The \"repeat\" command will come in handy.",
        "Overworld Move to Sheep_instruction": "Add a second `move forward` block to reach the sheep.",
        "Overworld Move to Sheep_2018_instruction": "Add a second `move forward` block to reach the sheep.",
        "Overworld Place Wall_instruction": "Every house starts with a wall. Build the first part of your house by putting the \"place\" and \"move forward\" commands inside the repeat loop.",
        "Overworld Place Wall_2018_instruction": "Every house starts with a wall. Build the first part of your house by putting the \"place\" and \"move forward\" commands inside the repeat loop.",
        "Overworld Plant Crops_instruction": "It’s good to plan ahead. Plant crops on both sides of the water so you don’t get hungry later on.",
        "Overworld Plant Crops_2018_instruction": "It’s good to plan ahead. Plant crops on both sides of the water so you don’t get hungry later on.",
        "Overworld Powered Minecart_instruction": "Great job! You’ve gathered lots of resources and built a modest home. Now lay rail from the edge of the map to the door of your house.",
        "Overworld Powered Minecart_2018_instruction": "Great job! You’ve gathered lots of resources and built a modest home. Now lay rail from the edge of the map to the door of your house.",
        "Overworld Shear Sheep_instruction": "Sheep-shearing time! Use the “shear” command to gather wool from both sheep.",
        "Overworld Shear Sheep_2018_instruction": "Sheep-shearing time! Use the “shear” command to gather wool from both sheep.",
        "PDAlg 13-16 Sam Extension Puzzle_instruction": "Add a second parameter to \"onscreen?\" for Sam's y coordinate and update the function so it keeps him safe on all four sides.",
        "PDAlg 17-20 Luigi Extension Puzzle_instruction": "Without modifying your existing \"cost\" function, create a new \"coupon\" function that takes a pizza topping and coupon code and returns the cost of a pizza with that topping. If the coupon code is correct (you get to decide what it is), apply a 30% discount to the pizza.",
        "PDAlg 8-12 Rocket Height Puzzle_instruction": "Let's write a \"rocket-height\" function with simple acceleration. Write a function that ensures the rocket is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.",
        "PDAlg 8-12 ex dr 1_instruction": "The definition in this Design Recipe doesn't match both examples. Test each example to see which is failing, and then fix the definition to match.",
        "PDAlg 8-12 ex dr 2_instruction": "This student has created two examples for the function \"apples\" but something's not quite right. How would you direct this student to correct their mistake?",
        "PDAlg Big Game History_instruction": "Now that you've played through a Big Game level you should see a new entry in your history. Click the Version History button and you should see at least one version. Each time you go back to a Big Game level you'll get a new record in your version history that you can revert back to.",
        "PDAlg Big Game Remix_instruction": "Here's your Big Game as you last left it. Try clicking the Remix button to spin off a new remix of your project.\n\nAny changes you make after you click Remix will be saved on your new remix and not on your main Big Game.",
        "PDAlg Design Recipe Delete_instruction": "Click the delete button to get rid of this function, then try creating and deleting a few of your own.",
        "PDAlg Design Recipe Examples_instruction": "The definition in this Design Recipe doesn't match both examples. Test each example to see which is failing, and then fix the definition to match.",
        "PDAlg Design Recipe Required_instruction": "Complete the Design Recipe for the \"eggs\" function, making sure to create and test your examples.",
        "PDAlg Updates Cond_instruction": "When you went to PD in the summer, the Conditional block that you were introduced to was black and allowed any data type to be used. This proved to be confusing, given that every other function we've seen always produces the same type of data. To help make conditionals clearer and more consistent we've replaced the single black block with a separate block for each data type.",
        "PDAlg Updates Errors_instruction": "Run the provided program and use the error messages to try and track down the bugs.",
        "PDAlg Updates Space_instruction": "Making use of limited programming space (especially on small screens) is challenging with a block based language. To help with this we've added a few features. Experiment with this provided code to see how the space can be manipulated to deal with larger programs.",
        "PDK5 Conditionals 1_instruction": "Purple flowers may have either 1 or 0 nectar, but you don't know which one! Be careful not to collect nectar from a purple flower if it doesn't have any. Check if the nectar is equal to 1 by using the if block.",
        "PDK5 Conditionals 2_instruction": "Try this puzzle that uses conditionals and loops together. Use the \"if\" block to decide when to turn. Hint: you only need one more block to complete this puzzle. ",
        "PDK5 Events 1_instruction": "So far all of the programs we've written are executed in order from top to bottom. In this puzzle, we'll use \"Events\" to respond to an action on demand. Make the octopus say \"Hello\" only when you click on the Octopus. ",
        "PDK5 Functions 1_instruction": "Hello. Me zombie artist. Me love drawing! Help me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels shorter than the square length.",
        "PDK5 Functions 2_instruction": "Functions let you define new blocks! We've moved the blocks to draw a square into a function called \"draw a square\". Can you use the \"draw a square\" function to create the glasses? The squares are 75 pixels apart.",
        "PDK5 Loops 1_instruction": "Instead of using 5 \"move forward\" blocks, use the \"repeat\" block with a \"move forward\" block inside of it. In computer science, this is called a \"loop.\" ",
        "PDK5 Loops 3_instruction": "Here's another puzzle to practice loops. What happens if you use the repeat block to run the code already provided on the workspace 4 times?",
        "PS - test - pixelation_instruction": "Complete the X shape by typing 0s and 1s",
        "PS FR test 7-25_instruction": "Here are your instructions for this free response.  ",
        "PS Log test - Define and use turnAround_instruction": "Define a function called turnAround. Call the function and then move the turtle forward. (Click to see full instructions)",
        "PS copy 2-3 Bee Conditionals 5_instruction": "Be careful not to collect nectar from a purple flower if it doesn't have any. \nYou must first check if the nectar is equal to 1 using the `if nectar` block.",
        "PS predictive Applab level test_instruction": "Here are some instructions. ",
        "Pattern Bee 1_instruction": "What a strange field of goodies! I wonder if there's a pattern here...",
        "Pixelation - AllTheThings 4_instruction": "This pixelation level demonstrates the use of the `hide_encoding_controls` option.  Notice that the level displays the image data in hexadecimal and does not let you change it back to binary.",
        "Pixelation - AllTheThings 5_instruction": "This pixelation level demonstrates the use of the \"Hide sliders\" option.  Notice that the width and height sliders are not available, and the width and height fields are not editable.",
        "Pixelation - Lesson 14 - Fix bit offset v.2_instruction": "Something happened to the bits in this image! Find the error and fix it! Hint: a few extra bits were added. You should only need to remove some bits.",
        "Pixelation - Lesson 14 - Fix bit offset_instruction": "A single extra bit was inserted into the stream of bits that make up the C of the Code.org logo. That extra bit bumps all of the other bits down the line which makes the logo look messed up. Hunt down the extra bit and remove it to fix the Code.org logo.",
        "Pixelation - Lesson 14 - Fix bit offset_2018_instruction": "A single extra bit was inserted into the stream of bits that make up the C of the Code.org logo. That extra bit bumps all of the other bits down the line which makes the logo look messed up. Hunt down the extra bit and remove it to fix the Code.org logo.",
        "Pixelation - Lesson 14 - Fix the error_instruction": "Something happened to the bits in this image!  Find error and fix it!  Hint: a few extra bits were added.  You should only need to remove some bits.",
        "Pixelation - Lesson 14 - Make the Letter A_instruction": "Make a 3x5 letter 'A'. The widget is setup with the incorrect dimensions. Your first task is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then start entering pixel data.",
        "Pixelation - Lesson 14 - Make the Letter A_2018_instruction": "Make a 3x5 letter 'A'. The widget is setup with the incorrect dimensions. Your first task is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then start entering pixel data.",
        "Pixelation - Lesson 14 - Make your own B and W Image_instruction": "Now make your own image! We've started you off with a 10x10 canvas but you can make it whatever size you want. Happy pixeling!",
        "Pixelation - Lesson 14 - Make your own B&W Image_instruction": "Now make your own image! We've started you off with a 10x10 canvas but you can make it whatever size you want.  Happy pixeling!",
        "Pixelation - Lesson 15 - Color Free Play_instruction": "Requirements: The icon must be 16x16 pixels. You must use the Pixelation Widget to encode the bits of color information. The image must be encoded with at least 12 bits per pixel.",
        "Pixelation - Lesson 15 - Color Shades 4x4_instruction": "We start you out with the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4 - shades of gray.",
        "Pixelation - Lesson 15 - Color Shades 4x4_2018_instruction": "We start you out with the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4 - shades of gray.",
        "Pixelation - Lesson 15 - Color Shades_instruction": "We start you out with the row of shades of red that Maddie created in the video. Experiment with 6-bit color by filling in the bottom row of the image with shades of a different color. Here is an example with some shades of blue. Try your own color!",
        "Pixelation - Lesson 15 - Color Shades_2018_instruction": "We start you out with the row of shades of red that Maddie created in the video. Experiment with 6-bit color by filling in the bottom row of the image with shades of a different color. Here is an example with some shades of blue. Try your own color!",
        "Pixelation - Lesson 15 - Complete 3-bit color_instruction": "We start you with the 4x2 image Maddie was creating, but we've left out the last two squares. Finish off the image by figuring out which two colors are missing and encode them.",
        "Pixelation - Lesson 15 - Complete 3-bit color_2018_instruction": "We start you with the 4x2 image Maddie was creating, but we've left out the last two squares. Finish off the image by figuring out which two colors are missing and encode them.",
        "Pixelation 2_instruction": "Something happened to the bits in this image!  Find error and fix it!",
        "Pixelation 4x4 Empty_instruction": "The width and height are now encoded in the pixel data. Can you figure out how to adjust the dimensions?",
        "Pixelation Bee_instruction": "This larger image of a bee encodes color with 12 bits per pixel, but viewing in hex makes it easier to see the color of each pixel. If you switch to binary mode - hold on to your hat - it's a lot of bits. Here's another mind-blowing thing to try: slide the bits per pixel up to 24 bits per pixel. What happens? Can you explain this behavior?",
        "Pixelation Bee_2018_instruction": "This larger image of a bee encodes color with 12 bits per pixel, but viewing in hex makes it easier to see the color of each pixel. If you switch to binary mode - hold on to your hat - it's a lot of bits. Here's another mind-blowing thing to try: slide the bits per pixel up to 24 bits per pixel. What happens? Can you explain this behavior?",
        "Pixelation Flappy_instruction": "Here is a bigger image at 9 bits per pixel. With 9 bits per pixel you can express 512 different colors. Click through to see the next image which is even more sophisticated, but easier to understand.",
        "Pixelation Flappy_2018_instruction": "Here is a bigger image at 9 bits per pixel. With 9 bits per pixel you can express 512 different colors. Click through to see the next image which is even more sophisticated, but easier to understand.",
        "Pizza on a Plate_instruction": "Project Idea: Create a picture of something familiar from the real world. This requires persistence and planning!",
        "Planning Farmer_instruction": "What a strange field of goodies! I wonder if there's a pattern here...",
        "Planter Test_instruction": "Help me plant my fields!",
        "Play Lab Rocket 1_instruction": "A rocket blasts off, traveling at 15 meters per second... press \"Run\" to see how this word problem looks as an animation.",
        "Play Lab Rocket 2_instruction": "We've started the Design Recipe for rocket-height using the contract and examples you just wrote. Complete the function definition for rocket-height and run your animation.",
        "Play Lab Rocket 3_instruction": "Awesome, now can you update that function so that our rocket moves more quickly? Make sure to update the purpose statement, examples, and function definition to launch a rocket at 40 meters per second.",
        "Play Lab Rocket 4 (copy 1)_instruction": "Real rockets start off slowly and gain speed over time - let's make ours do the same! Write an exponential function that describes a rocket that travels at \"seconds\" squared meters per second.",
        "Play Lab Rocket 4_instruction": "Real rockets start off slowly and gain speed over time - so let's add some simple acceleration to ours! Can you write a function that describes a rocket that is at 10 meters at 1 second, 40 meters at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?",
        "Play Lab Rocket 5_instruction": "Much better, but let's write one more function with simple acceleration. This time the rocket should be 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.",
        "Play Lab Rocket Free Play_instruction": "Free Play: Experiment with your rocket-height function to make the rocket fly in different ways. Click \"Finish\" when you are done.",
        "Poorva copy U3L2 Using Simple Commands_instruction": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
        "Poorva-test_instruction": "Here are regular instructions for a level. There is nothing fancy going on here.",
        "Practice Create Performance Task_instruction": "Design and implement your practice Create Performance Task. (Click to see full instructions)",
        "Practice Create Performance Task_2018_instruction": "Design and implement your practice Create Performance Task. (Click to see full instructions)",
        "Project - Final Image Scroller_instruction": "Update the image scroller to respond to buttons and key presses. (Click to see full instructions)",
        "Project - Final Image Scroller_2018_instruction": "Update the image scroller to respond to buttons and key presses. (Click to see full instructions)",
        "Project - Finish your canvas app_instruction": "Extend the functionality of one of the effects, or create an entirely new one of your own. (Click to see full instructions)",
        "Project - Make Your Own Clicker Game_instruction": "Complete your clicker game! (Click to see full instructions)",
        "Project - Your Own Multi Screen App_instruction": "Create your multi-screen app. (Click to see full instructions.)",
        "Project - Your Own Multi Screen App_2018_instruction": "Create your multi-screen app. (Click to see full instructions.)",
        "Prompt Test_instruction": "Build whatever you want. This is an example of a number-guessing game!",
        "Quantum Bee - Ryan_instruction": "These clouds are bugging me! Some of the clouds have flowers inside, and some don't. I should check each cloud, and only get nectar from the flowers.",
        "Quantum Bee_instruction": "Purple flowers may have either 1 or 0 nectar, but you don't know which one! Be careful not to collect nectar from a purple flower if it doesn't have any. Check if the nectar is equal to 1 by using the if block.",
        "Ram Spritelab Validation Test_instruction": "Press the up arrow",
        "Robot Doodle_instruction": "Project Idea: Create a picture of something familiar from the real world. This requires persistence and planning!",
        "Robot Doodle_2018_instruction": "Project Idea: Create a picture of something familiar from the real world. This requires persistence and planning!",
        "Robot Drawing_instruction": "Project Idea: Create a picture of something familiar from the real world. This requires persistence and planning!",
        "Robot_instruction": "Project Idea: Create a picture of something familiar from the real world. This requires persistence and planning!",
        "Rocket Height Course A_instruction": "Follow the Design Recipe to create a function rocket-height.",
        "Ryan - 4-5 Bee Conditionals 2_instruction": "The bee only wants nectar right now. Not all objects are flowers, so check underneath EVERY CLOUD to see if it is hiding a flower. If it is, then you can gather nectar.",
        "Ryan - Bee Conditionals_instruction": "The bee only wants nectar right now. Not all objects are flowers, so check underneath EVERY CLOUD to see if it is hiding a flower. If it is, then you can gather nectar.",
        "Ryan Doily Step 1_instruction": "Now we're going to draw a doily step by step. First, draw a square.",
        "Ryan Doily Step 2_instruction": "Now you need to turn and repeat it 20 times! How many degrees do you turn to get 360 after 20 iterations?",
        "Ryan Doily Step 3_instruction": "Now you need to turn and repeat it 20 times! How many degrees do you turn to get 360 after 20 iterations?",
        "Ryan Test Locked Blocks_instruction": "Here's a function called \"patrol.\" Edit it to move Cat up 400 pixels and then down 400 pixels.",
        "RyanTest3_instruction": "This level has shape-shifting turned on! Refresh to see different variants.",
        "SG Add Subgoals practice_instruction": "Draw a 3x3 grid to the front and right of the turtle as efficiently as possible. The turtle should end at its original location, facing its original direction. (Click to see full instructions)",
        "SG U3L03 - draw rect function_instruction": "Write a function called drawRectangle().\n(Click to see full instructions)",
        "SG U3L03 - draw step_instruction": "Write the drawStep function. (Click to see full instructions)",
        "SG U3L03 Define and use turnAround_instruction": "Define a function called turnAround. Call the function and then move the turtle forward. (Click to see full instructions)",
        "SG U3L03 Draw a T using turnAround_instruction": "Draw a plus sign using the provided version of turnAround().  (Click to see full instructions)",
        "SG U3L03 Three Steps_instruction": "Define a function called drawSide() which draws three steps and moves the turtle to prepare for the next side (Click to see full instructions)",
        "SG U3L03 define turnRight and draw a rectangle_instruction": "Define a function called right() that turns the turtle to the right. Then use this function to draw a rectangle, as shown below. (Click to see full instructions)",
        "SG U3L03 draw diamond_instruction": "Create a function called drawDiamond() that makes use of your previous work to draw the complete diamond. (Click to see full instructions)",
        "SG U3L04 - 3 by 3 with functions_instruction": "Make the 3x3 square as efficiently as you can. (Click to see full instructions)",
        "SG U3L04 - snowflake_instruction": "Create the design by breaking it down into layers of functions. (Click to see full instructions)",
        "SG U3L06 - moveForwardwithParams_instruction": "Use a single command to move the turtle to the edge of the screen. (Click to see full instructions)",
        "SG U3L06 Challenge 1 triangle_instruction": "Use the parameterized versions of the turtle commands to create a triangle with sides 100 pixels long. (Click to see full instructions)",
        "SG U3L06 Challenge 2 purple square_instruction": "Read the documentation for penColor() and penWidth() before using them to draw the blue square.",
        "SG U3L06 Challenge 3 fill pink_instruction": "Fill in the background of the screen with your favorite color. (Click to see full instructions)",
        "SG U3L06 Challenge 4 bullseye_instruction": "Create the bullseye using hexadecimal colors and dot(). (Click to see full instructions)",
        "SG U3L06 Challenge 5 overlapping circles_instruction": "This image is created just using dot() and penColor() but, how are we going to get those circles to be transparent?  If you haven't gotten the hint yet: check out the documentation!",
        "SG U3L06 Challenge 6 squiggles_instruction": "Read the documentation for the \"arcLeft\" and \"arcRight\" commands and then draw the squiggles as shown. ",
        "SG U3L06 Challenge 7 smiley face_instruction": "Use turnTo() and moveTo() to help draw a smiley face. (Click to see full instructions)",
        "SG U3L06 Challenge 8 make your own_instruction": "Create a drawing of your own. (Click to see full instructions)",
        "SG U3L07 - Free Play Loops and Random_instruction": "Free Play! Use what you learned from loops and random to make your own little scene. Have fun.",
        "SG U3L07 - allSeaGrass_instruction": "Add 50 pieces of seagrass to the image by writing drawAllSeagrass with a loop. (Click to see full instructions)",
        "SG U3L07 - bubbles_instruction": "Add 200 bubbles to the image by writing drawAllBubbles with a loop. (Click to see full instructions)",
        "SG U3L07 - createTriangleParam_instruction": "Define a function that accepts a parameter to match the function calls and complete the image. (Click to see full instructions)",
        "SG U3L07 - fish_instruction": "Add 15 fish to the image by writing drawAllFish with a loop. (Click to see full instructions)",
        "SG U3L07 - introSquare_instruction": "Use a loop to draw a square. Then add another loop to draw many squares each one rotated some amount. (Click to see full instructions)",
        "SG U3L07 - loopsWithRandom_instruction": "Increase the number of iterations to fill the screen with white. (Click to see full instructions)",
        "SG U3L07 - randomDots1_instruction": "Increase the number of iterations to fully fill the screen with random dots. (Click to see full instructions)",
        "SG U3L07 - randomSquare_instruction": "Draw the figure using a loop. (Click to see full instructions)",
        "SG U3L07 - seaGrass_instruction": "Add a parameter to drawSeagrass that controls the number of waves in the grass. (Click to see full instructions)",
        "SG U3L07 - seaStar_instruction": "Add 5 sea stars to the image by writing drawAllSeaStars with a loop. (Click to see full instructions)",
        "SG U3L07 - sunBeams_instruction": "Add 100 sunbeams to the image by writing drawAllSunbeams with a loop. (Click to see full instructions)",
        "SG U3L07 - topDownDesign_instruction": "Get comfortable with the structure of this program, then move on to the next exercise. (Click to see full instructions)",
        "SG U3L07 More Subgoals_instruction": "Read the documentation for penColor() and penWidth() before using them to draw the blue square.",
        "SG U3L08 - createTwoParamTriangle_instruction": "Define a function called drawTriangle() that accepts two parameters to set the size and width of the triangle. (Click to see full instructions)",
        "SG U3L08 - digitalScene_instruction": "Create the functions you were assigned as part of your digital scene. (Click to see full instructions)",
        "SG U3L08 - drawSquareWithParam_instruction": "Use drawSquare() to recreate the image of both squares, this time using parameters. (Click to see full instructions)",
        "SG U3L08 - fish_instruction": "Add a parameter to drawFish that changes the size of the fish drawn. (Click to see full instructions)",
        "SG U3L08 - freePlay_instruction": "Keep adding to your image by making more calls to your new functions with parameters. (Click to see full instructions)",
        "SG U3L08 - individualCode_instruction": "Create the functions you were assigned as part of your digital scene. (Click to see full instructions)",
        "SG U3L08 - introUnderTheSea - recovery_instruction": "Add an extra fish, starfish, and piece of seagrass to the image. Look at, but don't change, the functions that create them. (Click to see full instructions)",
        "SG U3L08 - introUnderTheSea_instruction": "Add an extra fish, starfish, and piece of seagrass to the image. Look at, but don't change, the functions that create them. (Click to see full instructions)",
        "SG U3L08 - multiParamFish_instruction": "Add three parameters to your drawFish function to accept red, green and blue values to make your fish different colors. (Click to see full instructions)",
        "SG U3L08 - paramsToStarfish_instruction": "Add a parameter to drawStarfish that changes the size of the starfish drawn. (Click to see full instructions)",
        "SG U3L08 - randomInput_instruction": "Use the randomNumber() blocks to test the functions you designed with random input. (Click to see full instructions)",
        "SG U3L08 - seaGrass_instruction": "Add a parameter to drawSeagrass that changes the size of the piece of seagrass drawn. (Click to see full instructions)",
        "SG U3L08 - squareTwoParams_instruction": "Call drawSquare() to complete the drawing of two squares. (Click to see full instructions)",
        "SG U3L08 comments_instruction": "Use the randomNumber() blocks to test the functions you designed with random input. (Click to see full instructions)",
        "SG U3L08 how to add comments_instruction": "Use the randomNumber() blocks to test the functions you designed with random input. (Click to see full instructions)",
        "SG U3L2 Using Simple Commands part 1_instruction": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
        "SG U3L2 Using Simple Commands_instruction": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
        "SG U3L2_Add-subgoals_instruction": "Draw a 3x3 grid to the front and right of the turtle as efficiently as possible. The turtle should end at its original location, facing its original direction. (Click to see full instructions)",
        "SG U3L2_Turtle3by3Grid_instruction": "Draw a 3x3 grid to the front and right of the turtle as efficiently as possible. The turtle should end at its original location, facing its original direction. (Click to see full instructions)",
        "SG U3L2_TurtleSquare_right_instruction": "Draw a square to the front and to the right of the starting location. (Click to show full instructions)",
        "SGU3L07 - randomDots1_instruction": "Increase the number of iterations to fully fill the screen with random dots. (Click to see full instructions)",
        "Sam the Butterfly 1 (copy 1)_instruction": "This butterfly is named Sam, and the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can see, Sam is free to walk around the yard, and the coordinates at the top of the screen update to tell you his location. Use the arrow keys to move sam around his yard. Help Sam collect all of the flags to move on.",
        "Sam the Butterfly 1_instruction": "This bat is named Sam, and the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can see, Sam is free to walk around the yard, and the coordinates at the top of the screen update to tell you his location. Click \"Run\" and then use the arrow keys to move Sam around his yard, making note of Sam's coordinates at different locations. Click \"Finish\" when you're ready to move on.",
        "Sam the Butterfly 2_instruction": "Sam's mom wants to make sure that she can always see at least a bit of him, so lets write some functions that help make sure he doesn't go too far out of the yard. Here's a function called safe-left? - it should take a Number for its domain that represents Sam's x-coordinates and return true if he's completely visible on screen. If your function works, Sam shouldn't be able to leave the yard from the left side.",
        "Sam the Butterfly 3_instruction": "In the last puzzle we kept Sam from leaving on the left, now let's do the same thing on the right. Complete the safe-right? function to make sure Sam can't go off the right side of the screen.",
        "Sam the Butterfly 4_instruction": "Huh, we can keep Sam from leaving on the left, or we can keep him from leaving on the right, but how can we keep him safe from leaving both directions? Try using the and block to program the function on-screen? to check if Sam is safe-left? and safe-right?",
        "Sam the Butterfly 5_instruction": "Free Play: Awesome, we've kept Sam safe on the left and right! Use this free play stage to experiment with your functions and further improve onscreen?",
        "Sam the Butterfly 6_instruction": "We've added a new parameter \"y\" to the \"on-screen?\" function. Update the function so that it checks that \"safe-left?\" AND \"safe-right?\" AND \"safe-up?\" are all true. When you've fixed the function, try going out of the yard from the left, right, and top sides.",
        "Sam the Butterfly 7_instruction": "Only one last direction to worry about! Create a \"safe-down?\" function and update the \"on-screen?\" function so that it checks up, down, left, and right.",
        "Sam the Butterfly Complete_instruction": "Only one last direction to worry about! Create a \"safe-down?\" function and update the \"on-screen?\" function so that it checks up, down, left, and right.",
        "SpecialFrozenLevel_instruction": "You've officially become a master artist! Create a winter wonderland.",
        "Standalone_Artist_1_instruction": "Welcome to Artist! First off, let's try to make a simple square using the turn right block and move forward block. Each side should be 100 pixels long.",
        "Standalone_Artist_2_instruction": "Draw this diamond with 120 and 60 degree angles and 150 pixel long sides.",
        "Standalone_Artist_3_instruction": "Can you draw this hexagon with 100 pixel sides and 60 degree turns?",
        "Standalone_Artist_4_instruction": "Now you've got a new block to play with, the loop. This will repeat a set of commands. What happens if you loop these commands 6 times?",
        "Standalone_Artist_5.5_instruction": "Notice how we simplified the diamond code by turning it into a loop. You can loop that whole sequence 12 times to draw the flower. Hint: You'll need to turn 30 degrees after your diamond loop so you don't keep drawing over the same diamond.",
        "Standalone_Artist_5_instruction": "How many times do you need to loop this diamond to draw the flower?",
        "Standalone_Artist_6_instruction": "Loop this hexagon code 6 times to create the design. How many degrees will you need to turn each time? Hint: divide the number of degrees in a circle by the number of times you are looping.",
        "Standalone_Artist_7_instruction": "A function is another programming tool to help you avoid repeating yourself. This function draws a flower, so you can use it any time you want to draw a flower. Use this and the new jump block to draw these flowers. Hint: The flowers are 150 pixels apart",
        "Standalone_Artist_8_instruction": "Here's a function called \"Draw a shape\" that we've programmed to draw hexagons. Run the code to see what it does and then experiment with the function to see what happens. Can you make it draw a pattern of squares, triangles, or octagons?",
        "Standalone_Artist_9_instruction": "Now go ahead and make whatever picture you'd like! You've even got an empty function that you can make do whatever you want!",
        "Standalone_Artist_v2_instruction": "Welcome to Artist! First off, let's try to make a simple square using the turn right block and move forward block. Each side should be 100 pixels long.",
        "StepIntro_instruction": "Here's how to use the \"Step\" button.",
        "Test Play Lab_instruction": "This is a test play lab level.",
        "Test embedded Blockly in instructions_instruction": "As a block element, we should be able to include XML representing a valid Blockly block or blocks.\n\n<xml>\n  <block type=\"draw_move_by_constant\">\n    <title name=\"DIR\">moveForward</title>\n    <title name=\"VALUE\">100</title>\n  </block>\n</xml>\n\nWe also support Blockly XML as an inline element like so: <xml><block type=\"draw_move_by_constant\"><title name=\"DIR\">moveForward</title><title name=\"VALUE\">100</title></block></xml>. The difference in input format being that this one is embedded within a paragraph, whereas the previous one is in a text block of its own. The difference in output is comparable.",
        "Test embedded K1 Blockly in instructions_instruction": "Use three `move west` blocks and one `pick corn` block to solve this puzzle.",
        "Test of comment block_instruction": "Drag out the subgoal label block you want.",
        "Testing Quantum Farmer_instruction": "Wow, look at that! \n\nI don't know how many shovelfuls of dirt this hole needs.  \nCan you write a program that keeps using the `fill` block until the ground is even?  ",
        "Text Compression 1_instruction": "Look for patterns (repeated words or phrases) in the text. Enter the patterns you see into the dictionary on the right. As you type entries into the dictionary, the symbol for the entry is inserted into the text in place of the pattern.\n\n",
        "The Vigenere Cipher Widget_instruction": "Instructions",
        "The Vigenere Cipher Widget_2018_instruction": "Instructions",
        "The Vigenere Cipher_instruction": "Instructions",
        "Total Artist Clone Me_instruction": "Freeplay: Here are the functions you've written, and some more for you to play with. Draw something awesome! Play with the pen width to see how different your drawings look!",
        "U1L10 NetSim numbers with decimal_instruction": "Invent and test a protocol for encoding and sending text messages. Your protocol must include the letters a-z, spaces, and common punctuation marks. You may add additional characters if you wish. See the worksheet handed out by your teacher for more detailed instructions!",
        "U1L11 NetSim numbers with Ascii_instruction": "Work with a partner or in a small team to develop a protocol that allows you to send formatted text. See the worksheet handed out by your teacher for more detailed instructions!",
        "U1L13 Text Compression_instruction": "Look for patterns (repeated words or phrases) in the text. Enter the patterns you see into the dictionary on the right. As you type entries into the dictionary, the symbol for the entry is inserted into the text in place of the pattern.",
        "U1L4 NetSim SendAB_instruction": "Develop, document, and test a protocol that allows you to use Internet Simulator to relay a message. See the worksheet for more detailed instructions.  ",
        "U1L8 NetSim numbers no decimal_instruction": "Default instructions",
        "U1L8 NetSim numbers with decimal_instruction": "With your partner, develop a protocol or set of rules for communicating a drawing using only bits. See the worksheet handed out by your teacher for more detailed instructions!",
        "U2 Vigenere_instruction": "Test",
        "U2 frequency caesar_instruction": "Instructions",
        "U2 frequency random sub_instruction": "Instructions",
        "U2 vigenere cipher_instruction": "Instructions",
        "U2L04 - NetSim Routers with Addresses_instruction": "Send messages with your classmates (Click to see full instructions)",
        "U2L05 - NetSim - Packets and Building TCP_instruction": "Develop a Protocol for Reliably Sending a Message.\n\nConstraints:\n- Packets may contain only 6 characters\n- Packets may drop with small probability\n- Packets may not arrive in order",
        "U2L10 NetSim Automatic DNS_instruction": "In this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. Send a message in the form GET [hostname] to the DNS service at address <yourRouterNumber>.15 to get a student's address.",
        "U2L10 NetSim Manual DNS_instruction": "In this version of the simulator you can't see the other students' addresses.  Instead, one of you must act as a name service, to help share addresses with each other.",
        "U2L14 frequency random_instruction": "Test",
        "U2L2 NetSim Hub Mode_instruction": "Now use the Internet Simulator to send the battleship moves. For setup, join a Room with your group, and add ships to your paper board for each opponent. When playing, all communication must be done through the tool, so no talking, but have fun!\n",
        "U2L3 NetSim Hub Mode_instruction": "Use the Internet Simulator to test out your group's binary communication protocol for battleship. How short can you make the message and response?",
        "U2L4 NetSim Routers Addresses_instruction": "For this activity, connect to a router with the others in your group. Important note: The router will only properly route messages where the first 4 bits are the To: address and the second 4 bits are the From: address.\n\n[TODO: NetSim needs to support hierarchical addresses. For now, level is set up for 4 bit to and from addresses]",
        "U2L5 NetSim Classroom Internet_instruction": "For this activity, connect to a router with the others in your group. The Internet Simulator now provides a place for you to put the To and From addresses, so you don't have to type out the bits manually.\n\n",
        "U2L7 NetSim Need for Packets_instruction": "Transfer your favicon to a partner across a network in which the larger a packet grows, the more likely it is to be dropped.",
        "U3 - Arrays - Demo App_instruction": "Use the \"My Favorite Things\" app. How might this app be making use of an array? (Click to see full instructions)",
        "U3 - Arrays - appendItem_instruction": "Create an array of odd numbers 1-11 by using appendItem. (Click to see full instructions)",
        "U3 - Arrays - assignment_instruction": "Use indexes to change the values in this array from 1 to 0. (Click to see full instructions)",
        "U3 - Arrays - assignment2_instruction": "Calculate the sum of three values stored in an array. (Click to see full instructions)",
        "U3 - Arrays - assignment3_instruction": "Increase the value of each value in the randomly generated array by 1. (Click to see full instructions)",
        "U3 - Arrays - createFirstArray_instruction": "Create an array of the even numbers from 0 to 10 and display its contents with console.log. (Click to see full instructions)",
        "U3 - Arrays - expressionsAsIndexes_instruction": "Write a program that displays a randomly chosen color from the array. (Click to see full instructions)",
        "U3 - Arrays - favThings Counting Variable_instruction": "Create a global variable for the current index and use it to display the first item in the array. (Click to see full instructions)",
        "U3 - Arrays - favThings Next_instruction": "Write code that allows the user to move forward through your list by clicking the \"Next\" button. (Click to see full instructions)",
        "U3 - Arrays - favThings Prev_instruction": "Write code that allows the user to move backward through your list by clicking the \"Last\" button. (Click to see full instructions)",
        "U3 - Arrays - favThings addItem_instruction": "Write code that allows a user to add their own favorite things to the list. (Click to see full instructions)",
        "U3 - Arrays - favThings bounds_instruction": "Add if statements to your event handlers that prevent the global index from going out of bounds. (Click to see full instructions)",
        "U3 - Arrays - favThings createArray_instruction": "Create an array of words describing your favorite things. (Click to see full instructions)",
        "U3 - Arrays - favThings firstOutput_instruction": "Use setText to display the first item in the array. (Click to see full instructions)",
        "U3 - Arrays - favThings giveIDs_instruction": "Give your UI elements descriptive and meaningful IDs. (Click to see full instructions)",
        "U3 - Arrays - favThings keepPlaying_instruction": "Make any other improvements you want! (Click to see full instructions)",
        "U3 - Arrays - favThings template_instruction": "Give your UI elements descriptive and meaningful IDs. (Click to see full instructions)",
        "U3 - Arrays - favThings template_2018_instruction": "Give your UI elements descriptive and meaningful IDs. (Click to see full instructions)",
        "U3 - Arrays - globalVariableIndex_instruction": "Give your UI elements descriptive and meaningful IDs. (Click to see full instructions)",
        "U3 - Arrays - indexPractice_instruction": "Write the contents of the array to the screen in numerical order. (Click to see full instructions)",
        "U3 - Arrays - insertingItems_instruction": "Insert items into an array to form a complete sentence. (Click to see full instructions)",
        "U3 - Arrays - insertionErrors_instruction": "Run each command that references indexes that are out of bounds and observe the results. (Click to see full instructions)",
        "U3 - Arrays - introIndex_instruction": "Display the first and last element in the array. Display the number 5 from the array. (Click to see full instructions)",
        "U3 - Arrays - length_instruction": "Use list.length to determine the length of each array. (Click to see full instructions)",
        "U3 - Arrays - lengthMinus1_instruction": "Use list.length - 1 to log the last item in the array to the console. (Click to see full instructions)",
        "U3 - Arrays - remove_instruction": "Remove items from an array to form a complete sentence. (Click to see full instructions)",
        "U3 - Arrays - stringsInArrays_instruction": "Write a sentence word by word by adding strings to an array. (Click to see full instructions)",
        "U3 - Canvas - 200dots_instruction": "Add a loop to your program that draws 200 dots on your canvas. (Click to see full instructions)",
        "U3 - Canvas - One Dot sprayPaint_instruction": "Write code that redraws your image using a dot whose x and y locations use offsetX and offsetY with a small random value added. (Click to see full instructions)",
        "U3 - Canvas - appendToArray_instruction": "Create an array to store each event parameter. Append each event parameter to this array within your event handler. (Click to see full instructions)",
        "U3 - Canvas - changeToMouseMove_instruction": "Change your program so that dots are drawn at the location of the mouse as the user moves the mouse on the canvas. (Click to see full instructions)",
        "U3 - Canvas - clickToAdd_instruction": "Change your program so that dots are added to the canvas when the user clicks on it. (Click to see full instructions)",
        "U3 - Canvas - delete_instruction": "Create a button that deletes the drawing by clearing the canvas and removing all stored values. (Click to see full instructions)",
        "U3 - Canvas - draw at click point_instruction": "Change your program so that dots are drawn at the location of the mouse click. (Click to see full instructions)",
        "U3 - Canvas - freePlay_instruction": "Extend the functionality of one of the effects, or create an entirely new one of your own. (Click to see full instructions)",
        "U3 - Canvas - introCanvas_instruction": "Add a canvas to your app and set it to be the active canvas. Then add a large dot to your canvas. (Click to see full instructions)",
        "U3 - Canvas - movementFunction fix Orig_instruction": "Modify the \"Original\" button event handler so that it takes the movement of the mouse into account. (Click to see full instructions)",
        "U3 - Canvas - movementFunction_instruction": "Write a function that takes the movement of the mouse as input and generates a line width as output. (Click to see full instructions)",
        "U3 - Canvas - redrawOriginal_instruction": "Write a function that processes your array, redrawing the dots as they originally appeared. (Click to see full instructions)",
        "U3 - Canvas - redrawRandom_instruction": "Set up a button and event handler for the random function. (Click to see full instructions)",
        "U3 - Canvas - redrawRandom2_instruction": "Write a function that processes your array, redrawing every dot with a random size. (Click to see full instructions)",
        "U3 - Canvas - shiftKey_instruction": "Add an if statement to your event handler so dots are only drawn when the shift key is pressed. (Click to see full instructions)",
        "U3 - Canvas - sketch_instruction": "Write code that redraws your image using a sketch effect. (Click to see full instructions)",
        "U3 - Canvas - sprayPaint_instruction": "Update the spray paint code so that it redraws your image using multiple random dots instead of using a nested for loop. (Click to see full instructions)",
        "U3 - Canvas - transparentDots_instruction": "Change the colors of your dots so they have a fully transparent stroke and partially transparent fill. (Click to see full instructions)",
        "U3 - Canvas - usingOffsetXY_instruction": "Add a console.log command inside the function of your event handler. Use it to display the event parameter. Click on the screen to see the contents of the event parameter (Click to see full instructions)",
        "U3 - Conditional Basics - 6_instruction": "Add a setText after the if statement to \"Nope. Guess again.\" (Click to see full instructions)",
        "U3 - Conditionals - Combine AND OR Simple_instruction": "Write an if statement that uses AND and OR to display \"Sleep in!\" if it's the weekend and the user is a teenager. (Click to see full instructions.",
        "U3 - Conditionals - Combine AND OR and NOT_instruction": "Write an if statement that uses AND and OR to display \"Time to go to school!\" if it's not the weekend and the user is under 18. (Click to see full instructions.)",
        "U3 - Conditionals - Combine AND and OR_instruction": "Write an if statement that uses AND and OR to display \"Time to go to school!\" if it's not the weekend and the user is under 18. (Click to see full instrucitons.",
        "U3 - Conditionals - Simple AND_instruction": "Write an if statement that uses AND to display \"You are a teenager.\" if the user enters an age between 13 and 19. (Click to see full instructions)",
        "U3 - Conditionals - Simple OR_instruction": "Write an if statement that uses OR to display \"It's the weekend!\" if the user enters a weekend day at the prompt. (Click to see full instructions)",
        "U3 - Conditionals - intoOr_instruction": "Add 2 if statements that use the OR operator. (Click to see full instructions)",
        "U3 - Conditionals - introAND_instruction": "Add 2 if statements that use the OR operator. (Click to see full instructions)",
        "U3 - Design Mode - Console Log_instruction": "Update the ID names and `console.log` messages to match the correct button. (Click to see full instructions.)",
        "U3 - Design Mode - Layers and Delete_instruction": "Fix the layout of the bullseye game. (Click to see full instructions)",
        "U3 - Design Mode - Multi Screens 2_instruction": "Make a 2 screen app which can switch back and forth between a black screen and a white screen using buttons. (Click to see detailed instructions.)",
        "U3 - Design Mode - Multi Screens_instruction": "Make a 2 screen app with a black screen and a white screen. (Click to see detailed instructions)",
        "U3 - Design Mode - Other Events_instruction": "Delete the button and make the image move to a random location when you click on it. (click to see detailed instructions)",
        "U3 - Design Mode - WTF Console Log_instruction": "Add a 3 console.log messages and test them out. (Click to see full instructions.)",
        "U3 - Design Mode -Recreate Beyond Buttons_instruction": "Recreate the game from the \"Chaser Game\" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)",
        "U3 - Design Mode 1_instruction": "Add a large red button to your screen using Design Mode. (Click for full instructions.)",
        "U3 - Dice - Dropdown and Score_instruction": "Add guess and score to the Dice Game (Click to see full instructions)",
        "U3 - Dice - Dropdown with Strings_instruction": "Add a dropdown for difficulty level that prints the difficulty level in the console. (Click to see full instructions)",
        "U3 - Dice - If_instruction": "Show different die images for the random number generated. (Click to see full instructions)",
        "U3 - Dice - Nested_instruction": "Use nested if statements to make the scoring different for the different game levels. (Click to see full instructions)",
        "U3 - High Low - Debug_instruction": "Debug the order of the conditionals so that it will actually tell the user when their guess is close. (Click to see full instructions)",
        "U3 - High Low - Dropdown_instruction": "Add a dropdown for their guess instead of promptNum (Click to see full instructions)",
        "U3 - High Low - Else if_instruction": "Add an else-if statement in order to tell the user if their guess is high or low instead of just wrong. (Click to see full instructions)",
        "U3 - High Low - Else_instruction": "Add an else statement so that the program will tell the user when they are right and when they are wrong. (Click to see full instructions)\n",
        "U3 - High Low - If_instruction": "Add code to the if statement that indicates the user guessed the secret number. (Click to see full instructions)",
        "U3 - Keys - Add Image URLs_instruction": "Add image URLs to your array. Replace the text area with an image and setText with setImageURL. Then test your app! (Click to see full instructions)",
        "U3 - Keys - Buttons and Keys_instruction": "Have the program respond the same way for both clicking images on the screen and hitting the up and down keys on the keyboard. (Click to see full instructions)",
        "U3 - Keys - Demo App_instruction": "Play with the image scroller. Press the left and right arrows to progress through the images.",
        "U3 - Keys - Final Image Scroller_instruction": "Update the image scroller to respond to buttons and key presses. (Click to see full instructions)",
        "U3 - Keys - Functions_instruction": "Write doUpArrow and doDownArrow functions and call the functions instead of duplicating the code. (Click to see full instructions)",
        "U3 - Keys - Key Up and Down_instruction": "Try out the keyup and keydown events to see how they are different from keypress. (Click to see full instructions)",
        "U3 - Keys - Multiple Keys_instruction": "Play a different sound when the down arrow is pressed. (Click to see full instructions)",
        "U3 - Keys - Practice Adding Images with URL_instruction": "Add image URLs to your image array. Test out the add button. Style your image scroller. (Click to see full instructions)",
        "U3 - Keys - Words to Images_instruction": "Add image URLs to your image array. Test out the add button. Style your image scroller. (Click to see full instructions)",
        "U3 - Loops -  9 Part 2_instruction": "Change the boolean expression for the while loop so that it will roll until both dice are greater than 3. (Click to see full instructions)",
        "U3 - Loops -  Complex Condition_instruction": "Change the boolean expression for the while loop so that it will stop when both dice are greater than or equal to 5. (Click to see full instructions)",
        "U3 - Loops - 1_instruction": "Change the condition for the while loop to check if the variable num is less than 90. (Click to see full instructions)",
        "U3 - Loops - 10_instruction": "Write a program that simulates the rolling of two dice. Roll the dice repeatedly until the sum of the dice is either 7 or 11.",
        "U3 - Loops - 11_instruction": "Fix the condition so that it keeps rolling the die as long as the value is not a 2 or a 3 instead of rolling infinitely. (Click to see full instructions)",
        "U3 - Loops - 12_instruction": "Change the code so that it prints the string \"Hi\" 5 times. (Click to see full instructions)",
        "U3 - Loops - 13_instruction": "Update the code to count up by 3 instead of 1. (Click to see full instructions)",
        "U3 - Loops - 14_instruction": "Change the loop condition to prevent the infinite loop and stop counting once the count is past 30. (Click to see full instructions)",
        "U3 - Loops - 15_instruction": "Count the number of times the sum of the dice is 12. (Click to see full instructions)",
        "U3 - Loops - 16_instruction": "Find out how many times you have to roll to get the sum of 7 100 times (Click to see full instructions)",
        "U3 - Loops - 2_instruction": "Try creating an infinite loop using !=, > and <. (Click to see full instructions)",
        "U3 - Loops - 3_instruction": "Change the if statement to a while loop so the program will run until it rolls a 6. (Click to see full instructions)",
        "U3 - Loops - 4_instruction": " Use the Debug Commands to make a list of all the values rolled before a 6. (Click to see full instructions)",
        "U3 - Loops - 5_instruction": "Add code inside the while loop which will update the variable num so that the condition will eventually become false. (Click to see full instructions)",
        "U3 - Loops - 6_instruction": "Fix the problem so the loop will run at least once. Change the initial value of num to a dummy value such as -1. (Click to see full instructions)",
        "U3 - Loops - 7_instruction": "Without adding any lines of code, reorder the code so that it prints all the values of num. (Click to see full instructions)",
        "U3 - Loops - 8_instruction": "Debug which number is not getting printed and add a write statement to display that value. (Click to see full instructions)",
        "U3 - Loops - 9_instruction": " Modify the condition so that it keeps rolling as long as both are less than 3. (Click to see full instructions)",
        "U3 - Loops - Continue_instruction": " Use the Debug Commands to to make a list of all the values rolled before a 6. (Click to see full instructions)",
        "U3 - Loops - Minus Minus_instruction": "Change the code to count down from 10 to 1. (Click to see full instructions)",
        "U3 - Loops - Plus Plus_instruction": "Change the code to use count++ instead of count = count + 1.  (Click to see full instructions)",
        "U3 - Loops - Typing in Console_instruction": "Use console to check the ending value of num. (Click to see full instructions)",
        "U3 - Loops - minus = operator_instruction": "Update the code to use the -= operator to count from 30 down to 0 by 3's. (Click to see full instructions)",
        "U3 - Loops - plus and minus = operator_instruction": "Update the code to use the += operator. (Click to see full instructions)",
        "U3 - Loops And Arrays - Add 5_instruction": "Add 5 to all the values in an array (Click to see full instructions)",
        "U3 - Loops And Arrays - Challenge 1_instruction": "Write a function that finds and returns the minimum value in an array.   (Click to see full instructions)",
        "U3 - Loops And Arrays - Challenge 2_instruction": "Write a function that finds and returns the minimum value in an array.   (Click to see full instructions)",
        "U3 - Loops And Arrays - Counting Times_instruction": "Count the number of times 5 appears in an array. (Click to see full instructions)",
        "U3 - Loops And Arrays - Divid by 2_instruction": "Divide every value in the array by 2. (Click to see full instructions)",
        "U3 - Loops And Arrays - Find Max_instruction": "Design a function that displays the smallest number in an array  (Click to see full instructions)",
        "U3 - Loops And Arrays - Find Min_instruction": "Complete the findMinVal function to find and display the smallest value in an array  (Click to see full instructions)",
        "U3 - Loops And Arrays - Functions that Return Value_instruction": "Call findMin within the console.log statement to calculate the minimum of two values.  (Click to see full instructions)",
        "U3 - Loops And Arrays - General Search Param_instruction": "Add a second parameter to the search function for the value to search for.  (Click to see full instructions)",
        "U3 - Loops And Arrays - Intro For Loop_instruction": "Add a for loop with a console.log inside and test out the 3 pieces of the for loop. (Click to see full instructions)",
        "U3 - Loops And Arrays - Linear Search_instruction": "Visit every element in the array and display \"true\" if the value is a 5, and \"false\" otherwise. (Click to see full instructions)",
        "U3 - Loops And Arrays - Loop Array If_instruction": "Use an if statement to only display the values in the array that are greater than 5. (Click to see full instructions)",
        "U3 - Loops And Arrays - Make it a Function - add list parameter_instruction": "Create a function that takes a list parameter and prints if the list contains a 5. (Click to see full instructions)",
        "U3 - Loops And Arrays - Make it a Function_instruction": "Move the code that searches the list for a 5 into a function called \"search\". (Click to see full instructions)",
        "U3 - Loops And Arrays - Multiple Returns_instruction": "Test out the return values of the findMax function.  (Click to see full instructions)",
        "U3 - Loops And Arrays - Print Array_instruction": "Use a for loop to print out all the values in an array. (Click to see full instructions)",
        "U3 - Loops And Arrays - Printing Single True_instruction": "Process the array and display a single \"true\" if the array contains a 5 or a single \"false\" if it does not.  (Click to see full instructions)",
        "U3 - Loops And Arrays - Return Index_instruction": "Make the search function return the index of the search value in the array. (Click to see full instructions)",
        "U3 - Loops And Arrays - Return Value_instruction": "Use constrain in this simple app to keep the turtle from driving off the screen.  (Click to see full instructions)",
        "U3 - Loops And Arrays - Search and Remove_instruction": "Search for 5 in the array and remove it from the array. (Click to see full instructions)",
        "U3 - Loops And Arrays - Search with Boolean Var_instruction": "Make a boolean variable to use as a flag to keep track of whether there is a 5 in the array. (Click to see full instructions)",
        "U3 - Loops And Arrays - useFindMin_instruction": "Call findMin within the console.log statement to calculate the minimum of two values.  (Click to see full instructions)",
        "U3 - Movie Bot - Multiple If Sequences_instruction": "Add another set of if, else if, and else statements inside the question if statement to check for keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)",
        "U3 - Movie Bot - Nested Motivation_instruction": "Add a separate set of if statements to check for a \"?\" in the input. (Click to see full instructions)",
        "U3 - Movie Bot - When Multiple If Statements_instruction": "Add an if and else-if statement that checks for please and thank you. (Click to see full instructions)",
        "U3 - Movie Bot - toLowerCase_instruction": "Use the toLowerCase command to change all user input into lowercase letters after they enter it. (Click to see full instructions)",
        "U3 - Practice Create Performance Task_instruction": "Design and implement your practice Create Performance Task. (Click to see full instructions)",
        "U3 - Read Record - 1.2_instruction": "Console.log the records returned by a call to readRecords. (Click to see full instructions)\n",
        "U3 - Read Record - 1.5_instruction": "Console.log the records returned by a call to readRecords. (Click to see full instructions)\n",
        "U3 - Read Record - 1.6_instruction": "Console.log the records returned by a call to readRecords. (Click to see full instructions)\n",
        "U3 - Read Record - 1_instruction": "Console.log the records returned by a call to readRecords. (Click to see full instructions)\n",
        "U3 - Read Record - 2_instruction": "Change the table name so that the records are read from the new table.(Click to see full instructions)\n",
        "U3 - Read Record - 3_instruction": "Change the name of the table in a readRecords command to read from a table that does not exist. (Click to see full instructions)\n",
        "U3 - Read Record - 4.1_instruction": "Print out each record return from the readRecords call individually. (Click to see full instructions)\n",
        "U3 - Read Record - 4_instruction": "Print out each record return from the readRecords call individually. (Click to see full instructions)\n",
        "U3 - Read Record - 5 and half_instruction": "Print out the name of each movie in the records return from the readRecords call. (Click to see full instructions)\n",
        "U3 - Read Record - 5_instruction": "Print out the name of each movie in the records return from the readRecords call. (Click to see full instructions)\n",
        "U3 - Return Values - constrainTurtle_instruction": "Use constrain in this simple app to keep the turtle from driving off the screen.  (Click to see full instructions)",
        "U3 - Return Values - debuggingConstrain_instruction": "Correct the error in constrain so that it returns the appropriate value.  (Click to see full instructions)",
        "U3 - Return Values - debuggingMaxVal_instruction": "Correct the error in maxVal so that it correctly reports the maximum value.  (Click to see full instructions)",
        "U3 - Return Values - debuggingReturns_instruction": "Correct the error in maxVal so that it correctly reports the maximum value.  (Click to see full instructions)",
        "U3 - Return Values - increase1_instruction": "Call the increase function within moveForward, write, and console.log.  (Click to see full instructions)",
        "U3 - Return Values - increase2_instruction": "Change the increase function to return 3 times the input value. (Click to see full instructions)",
        "U3 - Return Values - min1_instruction": "Test out the return values of the findMax function.  (Click to see full instructions)",
        "U3 - Return Values - useFindMin_instruction": "Call findMin within the console.log statement to calculate the minimum of two values.  (Click to see full instructions)",
        "U3 - Return Values - useMinVal_instruction": "Call minVal within the console.log statement to calculate the minimum of two values.  (Click to see full instructions)",
        "U3 - Return Values - wrapTurtle_instruction": "Write wrap in this simple app to let the turtle \"wrap\" to the other side of the screen when it goes off.  (Click to see full instructions)",
        "U3 - Return Values - writeMaxVal_instruction": "Write the function maxVal and then use it within the console.log statement to calculate the maximum of two values.  (Click to see full instructions)",
        "U3 - Search Terms - 1_instruction": "Create an array of all the movies made in 2008 and print it out. (Click to see full instructions)\n",
        "U3 - Search Terms - 2_instruction": "Print out all the movies with year 2008 using the readRecords search terms. (Click to see full instructions)\n",
        "U3 - Search Terms - 3_instruction": "Print whether or not there are movies matching the search criteria (Click to see full instructions)\n",
        "U3 - Search Terms - 4_instruction": "Print whether or not there are movies matching the search criteria (Click to see full instructions)\n",
        "U3 - Search Terms - 5_instruction": "Print out the cities that are in California or have a population of 2,000,000. (Click to see full instructions)\n",
        "U3 - Search Terms - 6_instruction": "Print out the cities that are in California or have a population of 2,000,000. (Click to see full instructions)\n",
        "U3 - Simple Drawing - Comments_instruction": "Do this",
        "U3 - Simple Drawing - Ellipse and No Fill_instruction": "Do this",
        "U3 - Simple Drawing - Fill_instruction": "Do This",
        "U3 - Simple Drawing - No Fill_instruction": "Do this",
        "U3 - Simple Drawing - Order of Blocks_instruction": "Do this",
        "U3 - Simple Drawing - Oval_instruction": "Do This",
        "U3 - Simple Drawing - Personal Drawing_instruction": "DO This",
        "U3 - Simple Drawing - Rectangle Width and Height_instruction": "Do This",
        "U3 - Simple Drawing - Rectangle_instruction": "Do This",
        "U3 - Simple Drawing - Road Ellipse_instruction": "Do This",
        "U3 - Simple Drawing - Road Rects and Color_instruction": "Do This",
        "U3 - Simple Drawing - Simple Shape Drawing_instruction": "Do This",
        "U3 - Simple Drawing - Stroke and Stroke Weight_instruction": "Do this",
        "U3 - Simple Drawing - X and Y values_instruction": "Do This",
        "U3 - Simple Drawing - regular polygon_instruction": "Do this",
        "U3 - Simple Drawing - text_instruction": "Do This",
        "U3 - Simulation - 1_instruction": "Use a while loop to \"flip a coin 10 times\" and write the values to the screen. (Click to see full instructions)",
        "U3 - Simulation - 2.1_instruction": "Change your looping condition so the simulation runs until there are 5 heads flipped. (Click to see full instructions)",
        "U3 - Simulation - 2.5_instruction": "Run your simulation to get the full 10,000 heads! How long did it take? (Click to see full instructions)",
        "U3 - Simulation - 2_instruction": "Keep track of how many heads (1's) your program generates and print the results to the screen. (Click to see full instructions)",
        "U3 - Simulation - 3_instruction": "Add functionality that counts how many heads in a row are flipped. (Click to see full instructions)\n",
        "U3 - Simulation - 4_instruction": "Update your while loop's condition so the the coin flips until there are three heads in a row. (Click to see full instructions)",
        "U3 - Simulation - 5_instruction": "Change your while loop to run until you get a streak of 12 heads. How many flips did it take? (Click to see full instructions)",
        "U3 - Simulation - 6_instruction": "Keep adding to your simulation. What do you want to explore next? (Click to see full instructions)",
        "U3 - Simulation - App_instruction": "Change your code to run the full simulation with 10,000 coins. What was your longest streak of heads? (Click to see full instructions)",
        "U3 - Simulation - Template_instruction": "Use a while loop to \"flip 10 coins\" and write them to the screen. (Click to see full instructions)",
        "U3 - Simulation - Template_2018_instruction": "Use a while loop to \"flip 10 coins\" and write them to the screen. (Click to see full instructions)",
        "U3 - Sprites - Intro Sprites_instruction": "Do This",
        "U3 - Sprites and Mod - Create  and Draw Sprite_instruction": "Do This",
        "U3 - Sprites and Mod - Mouse Width and Height_instruction": "Do this",
        "U3 - Sprites and Mod - Mouse X and Y_instruction": "Do this",
        "U3 - Sprites and Mod - Rand Around Mouse_instruction": "Do this",
        "U3 - Sprites and Mod - Rand Shape Color_instruction": "Do This",
        "U3 - Sprites and Mod - Shape Color_instruction": "Do This",
        "U3 - Sprites and Mod - Wrap Many Squares_instruction": "Do This",
        "U3 - Sprites and Mod - X and Y Prop_instruction": "Do This",
        "U3 - Sprites and Mod - two sprites_instruction": "Do This",
        "U3 - User Input - Save getText To Variable_instruction": "Save the age and name of the user in variables (Click to see full instructions)",
        "U3 - User Input - Saving After Input_instruction": "Save the age of the user in a variable using getText() (Click to see full instructions)",
        "U3 - User Input and String -  Concat_instruction": "Output a message about age in a Text Area (Click to see full instructions)",
        "U3 - Variables - Clicker Game_instruction": "Create your improved Chaser-Game here. (Click to see full instructions)",
        "U3 - Variables - Debug Scope_instruction": "Why isn't the value of foo changing correctly? Make a guess. (Click to see full instructions)",
        "U3 - Variables - Debugging with Turtle_instruction": "Use your new debugging techniques to get the code to run correctly (Click to see full instructions)",
        "U3 - Variables - Decrement_instruction": "Decrement the value of the variable. (Click to see full instructions)",
        "U3 - Variables - Identify Variables_instruction": "Identify the values printing in the terminal with console.log statements. (Click to see full instructions)",
        "U3 - Variables - Increment_instruction": "Use the console.log debugging technique to see what is happening in this example. Add another variable and increment its value. (Click to see full instructions)",
        "U3 - Variables - Incrementing Variables_instruction": "Create a repeat loop for the repeated code and use increment to recreate the original program with less lines of code! (Click to see full instructions)",
        "U3 - Variables - Read Using Turtle_instruction": "Create a second set of variables for x and y position. Move turtle to that new location. (Click to see full instructions)",
        "U3 - Variables - Reassigning Variables with Console.log_instruction": "Add another reassignment statement at the end of the code to change the value of the variable at second time. (Click to see full instructions)",
        "U3 - Variables - Set to Expression with Other Variables and Turtle_instruction": "(click to see full instructions)",
        "U3 - Variables - Set to Expression with Other Variables_instruction": "Write an expression that calculates the player's total score and stores it in the totalScore variable. The calculation is: the player's points times lives divided by the total time. (click to see full instructions)",
        "U3 - Variables - Set to Expression with Turtle_instruction": "(click to see full)",
        "U3 - Variables - Set to Expression_instruction": "Test out the new expressions. (Click to see full instructions)",
        "U3 - images - bee free play_instruction": "Do this",
        "U3 Digital Assistant Design_instruction": "Pick a topic for your Digital Assistant and create the basic layout with a text input and text area. (Click to show full instructions)",
        "U3 Digital Assistant Set Text_instruction": "Have your digital assistant repeat back what the user types and include a canned response. (Click to see full instructions)",
        "U3 Digital Assistant Target - Mehal_instruction": "Try out a demo of the Digital Assistant!",
        "U3 Digital Assistant Target_instruction": "Try out a demo of the Digital Assistant!",
        "U3 Digital Assistant Template_instruction": "This is a project template!",
        "U3 Digital_instruction": "Choose a specialization topic for your digital assistant. Create a basic digital assistant that takes the user's input and displays back a default response.",
        "U3 Variables consolelog_instruction": "Use the write block to display the value of size",
        "U3 Variables flower example_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "U3 Variables gray square_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "U3 Variables make a square_instruction": "Change the value of size multiple times. How does it change your drawing?",
        "U3 Variables misconceptions try it_instruction": "Test out your predictions from the previous level.",
        "U3 Variables randomize your square_instruction": "Change the value of petalSize multiple times. How does it change your drawing?",
        "U3 Variables write_instruction": "Use the write block to display the value of size",
        "U3 full clicker demo_instruction": "Clicker game - Try it out!",
        "U3 mehal's clone_instruction": "Try out a demo of the Digital Assistant!",
        "U3- Variables - Assign Random For Turtle Draw_instruction": "Try writing the same code in text mode.",
        "U3- Variables - Changing the Value_instruction": "Update the value of 'turnAmount' before each moveForward so the turtle turns a different amount each time. (Click to see full instructions)",
        "U3- Variables - Create And Assign_instruction": "On one line add a variable called \"lives\" and assign it the value 3. Print it to the console. (Click to see full instructions)",
        "U3- Variables - Text Mode_instruction": "1. Switch to text mode and type instructions; 2. drag blocks out into text mode; 3. experiment with code completion",
        "U3-Design Mode-ID and Event Handler_instruction": "Add an event handler for the button using the \"Insert and show\" link in the Design Mode Events tab. (Click to see full instructions).",
        "U3-Design Mode-ID_instruction": "Using the Design Mode Events change the button ID and update the code to match. (Click to see detail instructions).",
        "U3-Design Mode-Image_instruction": "Recreate the \"Chaser Game\" from the last lesson using Design Mode. (Click to see full instructions.)",
        "U313 Two Buttons with Ids_instruction": "Predict what will happen. Once you've made a prediction, run the code to see what happens. (Click to see full instructions)",
        "U313 drag Two Buttons_instruction": "Run a program with two buttons that have the same id to see the warning message in the console. Change the ids to make the program run without getting a warning message.",
        "U313 eventsDetails_instruction": "Run a program with two buttons that have the same id to see the warning message in the console. Change the ids to make the program run without getting a warning message.",
        "U3L03 - draw rect function_instruction": "Write a function called drawRectangle().\n(Click to see full instructions)",
        "U3L03 - draw rect function_2018_instruction": "Write a function called drawRectangle().\n(Click to see full instructions)",
        "U3L03 - draw step_instruction": "Write the drawStep function. (Click to see full instructions)",
        "U3L03 - draw step_2018_instruction": "Write the drawStep function. (Click to see full instructions)",
        "U3L03 Creating Procedures 1_instruction": "Write the turnAround() function and use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif",
        "U3L03 Define and use turnAround_instruction": "Define a function called turnAround. Call the function and then move the turtle forward. (Click to see full instructions)",
        "U3L03 Define and use turnAround_2018_instruction": "Define a function called turnAround. Call the function and then move the turtle forward. (Click to see full instructions)",
        "U3L03 Draw a T using turnAround_instruction": "Draw a plus sign using the provided version of turnAround().  (Click to see full instructions)",
        "U3L03 Draw a T using turnAround_2018_instruction": "Draw a plus sign using the provided version of turnAround().  (Click to see full instructions)",
        "U3L03 Three Steps_instruction": "Define a function called drawSide() which draws three steps and moves the turtle to prepare for the next side (Click to see full instructions)",
        "U3L03 Three Steps_2018_instruction": "Define a function called drawSide() which draws three steps and moves the turtle to prepare for the next side (Click to see full instructions)",
        "U3L03 choose your own drawing_instruction": "Now choose your own!  Pick one of the three drawings shown here and attempt to create it on your own, making smart decisions about how to break the problem down into re-usable functions.  You will review your work with a peer using \"procedures peer review rubric.\"  Check it for the requirements.  GIF: U3L3-ProceduresChooseOne.png",
        "U3L03 define turnRight and draw a rectangle_instruction": "Define a function called right() that turns the turtle to the right. Then use this function to draw a rectangle, as shown below. (Click to see full instructions)",
        "U3L03 define turnRight and draw a rectangle_2018_instruction": "Define a function called right() that turns the turtle to the right. Then use this function to draw a rectangle, as shown below. (Click to see full instructions)",
        "U3L03 draw diamond_instruction": "Create a function called drawDiamond() that makes use of your previous work to draw the complete diamond. (Click to see full instructions)",
        "U3L03 draw diamond_2018_instruction": "Create a function called drawDiamond() that makes use of your previous work to draw the complete diamond. (Click to see full instructions)",
        "U3L04 - 3 by 3 with functions_instruction": "Make the 3x3 square as efficiently as you can. (Click to see full instructions)",
        "U3L04 - 3 by 3 with functions_2018_instruction": "Make the 3x3 square as efficiently as you can. (Click to see full instructions)",
        "U3L04 - snowflake_instruction": "Create the design by breaking it down into layers of functions. (Click to see full instructions)",
        "U3L04 - snowflake_2018_instruction": "Create the design by breaking it down into layers of functions. (Click to see full instructions)",
        "U3L04 choose your own drawing_instruction": "Now choose your own!  Pick one of the three drawings shown here and attempt to create it on your own, making smart decisions about how to break the problem down into re-usable functions.  You will review your work with a peer using \"procedures peer review rubric.\"  Check it for the requirements.",
        "U3L04 diamond solution_instruction": "Study this solution to the drawDiamond problem.  Notice that the whole program starts by calling drawDiamond() at the top.  The program then follows a chain of function calls.  You can trace what's happening in the code to see the functions reused.  It's also easy to read because the function names describe the expected behavior.",
        "U3L05_3x3GridEfficiencyChallenge_instruction": "Let's revisit the 3x3 grid problem you did a few lessons ago.  This time the challenge is to program the solution \"as efficiently as possible.\"  Now that you know how to write functions, it should be easier to break the problem down, and your code should be easier to read and debug.  See the rubric for more details about requirements and expectations.",
        "U3L05_draw3x3GridEfficiently_instruction": "Draw a 3x3 grid above and to the right of the turtle. Try to do so with the fewest number of commands possible. NOTE: This is a very challenging problem.  You may need to play with it for a while and tweak it.  You might also consider using pencil and paper to sketch your ideas.",
        "U3L06 - moveForwardwithParams_instruction": "Use a single command to move the turtle to the edge of the screen. (Click to see full instructions)",
        "U3L06 - moveForwardwithParams_2018_instruction": "Use a single command to move the turtle to the edge of the screen. (Click to see full instructions)",
        "U3L06 Challenge 1 triangle_instruction": "Use the parameterized versions of the turtle commands to create a triangle with sides 100 pixels long. (Click to see full instructions)",
        "U3L06 Challenge 1 triangle_2018_instruction": "Use the parameterized versions of the turtle commands to create a triangle with sides 100 pixels long. (Click to see full instructions)",
        "U3L06 Challenge 2 purple square_instruction": "Read the documentation for penColor() and penWidth() before using them to draw the blue square.",
        "U3L06 Challenge 2 purple square_2018_instruction": "Read the documentation for penColor() and penWidth() before using them to draw the blue square.",
        "U3L06 Challenge 3 fill pink_instruction": "Fill in the background of the screen with your favorite color. (Click to see full instructions)",
        "U3L06 Challenge 3 fill pink_2018_instruction": "Fill in the background of the screen with your favorite color. (Click to see full instructions)",
        "U3L06 Challenge 4 bullseye_instruction": "Create the bullseye using hexadecimal colors and dot(). (Click to see full instructions)",
        "U3L06 Challenge 4 bullseye_2018_instruction": "Create the bullseye using hexadecimal colors and dot(). (Click to see full instructions)",
        "U3L06 Challenge 5 overlapping circles_instruction": "This image is created just using dot() and penColor() but, how are we going to get those circles to be transparent?  If you haven't gotten the hint yet: check out the documentation!",
        "U3L06 Challenge 5 overlapping circles_2018_instruction": "This image is created just using dot() and penColor() but, how are we going to get those circles to be transparent?  If you haven't gotten the hint yet: check out the documentation!",
        "U3L06 Challenge 6 squiggles_instruction": "Read the documentation for the \"arcLeft\" and \"arcRight\" commands and then draw the squiggles as shown. ",
        "U3L06 Challenge 6 squiggles_2018_instruction": "Read the documentation for the \"arcLeft\" and \"arcRight\" commands and then draw the squiggles as shown. ",
        "U3L06 Challenge 7 smiley face_instruction": "Use turnTo() and moveTo() to help draw a smiley face. (Click to see full instructions)",
        "U3L06 Challenge 7 smiley face_2018_instruction": "Use turnTo() and moveTo() to help draw a smiley face. (Click to see full instructions)",
        "U3L06 Challenge 8 make your own_instruction": "Create a drawing of your own. (Click to see full instructions)",
        "U3L06 Challenge 8 make your own_2018_instruction": "Create a drawing of your own. (Click to see full instructions)",
        "U3L07 - Free Play Loops and Random_instruction": "Free Play! Use what you learned from loops and random to make your own little scene. Have fun.",
        "U3L07 - Free Play Loops and Random_2018_instruction": "Free Play! Use what you learned from loops and random to make your own little scene. Have fun.",
        "U3L07 - Starry Night Starter Code_instruction": "You are going to use loops and random numbers to generate an image of starry night sky similar to one shown here.  We have given you some starter code to generate the ground and sky (just two giant dots), you will add code to this project to make the stars, grass, and moon.  All of the effects are clever applications of turtle dots, lines, and colors.  To get started, follow the series of steps suggested in the accompanying worksheet. ",
        "U3L07 - allSeaGrass_instruction": "Add 50 pieces of seagrass to the image by writing drawAllSeagrass with a loop. (Click to see full instructions)",
        "U3L07 - allSeaGrass_2018_instruction": "Add 50 pieces of seagrass to the image by writing drawAllSeagrass with a loop. (Click to see full instructions)",
        "U3L07 - bubbles_instruction": "Add 200 bubbles to the image by writing drawAllBubbles with a loop. (Click to see full instructions)",
        "U3L07 - bubbles_2018_instruction": "Add 200 bubbles to the image by writing drawAllBubbles with a loop. (Click to see full instructions)",
        "U3L07 - callingFunctionsInLoops_instruction": "Call the function within the loop to complete the figure. (Click to see full instructions)",
        "U3L07 - createTriangleParam_instruction": "Define a function that accepts a parameter to match the function calls and complete the image. (Click to see full instructions)",
        "U3L07 - createTriangleParam_2018_instruction": "Define a function that accepts a parameter to match the function calls and complete the image. (Click to see full instructions)",
        "U3L07 - fish_instruction": "Add 15 fish to the image by writing drawAllFish with a loop. (Click to see full instructions)",
        "U3L07 - fish_2018_instruction": "Add 15 fish to the image by writing drawAllFish with a loop. (Click to see full instructions)",
        "U3L07 - introSquare_instruction": "Use a loop to draw a square. Then add another loop to draw many squares each one rotated some amount. (Click to see full instructions)",
        "U3L07 - introSquare_2018_instruction": "Use a loop to draw a square. Then add another loop to draw many squares each one rotated some amount. (Click to see full instructions)",
        "U3L07 - loopsWithRandom_instruction": "Increase the number of iterations to fill the screen with white. (Click to see full instructions)",
        "U3L07 - loopsWithRandom_2018_instruction": "Increase the number of iterations to fill the screen with white. (Click to see full instructions)",
        "U3L07 - randomDots1_instruction": "Increase the number of iterations to fully fill the screen with random dots. (Click to see full instructions)",
        "U3L07 - randomDots1_2018_instruction": "Increase the number of iterations to fully fill the screen with random dots. (Click to see full instructions)",
        "U3L07 - randomSquare_instruction": "Draw the figure using a loop. (Click to see full instructions)",
        "U3L07 - randomSquare_2018_instruction": "Draw the figure using a loop. (Click to see full instructions)",
        "U3L07 - seaGrass_instruction": "Add a parameter to drawSeagrass that controls the number of waves in the grass. (Click to see full instructions)",
        "U3L07 - seaGrass_2018_instruction": "Add a parameter to drawSeagrass that controls the number of waves in the grass. (Click to see full instructions)",
        "U3L07 - seaStar_instruction": "Add 5 sea stars to the image by writing drawAllSeaStars with a loop. (Click to see full instructions)",
        "U3L07 - seaStar_2018_instruction": "Add 5 sea stars to the image by writing drawAllSeaStars with a loop. (Click to see full instructions)",
        "U3L07 - sunBeams_instruction": "Add 100 sunbeams to the image by writing drawAllSunbeams with a loop. (Click to see full instructions)",
        "U3L07 - sunBeams_2018_instruction": "Add 100 sunbeams to the image by writing drawAllSunbeams with a loop. (Click to see full instructions)",
        "U3L07 - topDownDesign_instruction": "Get comfortable with the structure of this program, then move on to the next exercise. (Click to see full instructions)",
        "U3L07 - topDownDesign_2018_instruction": "Get comfortable with the structure of this program, then move on to the next exercise. (Click to see full instructions)",
        "U3L08 - Enchantment Under the Sea_instruction": "You have been provided with starter code for an “Under the Sea” scene which includes three functions, one each for the starfish, seagrass, and fish. Create versions of these functions which accept parameters to allow you to add more variation to your scene.  The student worksheet provides more details and guidance.",
        "U3L08 - createTwoParamTriangle_instruction": "Define a function called drawTriangle() that accepts two parameters to set the size and width of the triangle. (Click to see full instructions)",
        "U3L08 - createTwoParamTriangle_2018_instruction": "Define a function called drawTriangle() that accepts two parameters to set the size and width of the triangle. (Click to see full instructions)",
        "U3L08 - digitalScene_instruction": "Create the functions you were assigned as part of your digital scene. (Click to see full instructions)",
        "U3L08 - digitalScene_2018_instruction": "Create the functions you were assigned as part of your digital scene. (Click to see full instructions)",
        "U3L08 - drawSquareWithParam - for video_instruction": "Use drawSquare() to recreate the image of both squares, this time using parameters. (Click to see full instructions)",
        "U3L08 - drawSquareWithParam_instruction": "Use drawSquare() to recreate the image of both squares, this time using parameters. (Click to see full instructions)",
        "U3L08 - drawSquareWithParam_2018_instruction": "Use drawSquare() to recreate the image of both squares, this time using parameters. (Click to see full instructions)",
        "U3L08 - drawSquaresWithParams_instruction": "Write drawSmallSquare() to draw a 25px square. (Click to see full instructions)",
        "U3L08 - fish_instruction": "Add a parameter to drawFish that changes the size of the fish drawn. (Click to see full instructions)",
        "U3L08 - fish_2018_instruction": "Add a parameter to drawFish that changes the size of the fish drawn. (Click to see full instructions)",
        "U3L08 - freePlay_instruction": "Keep adding to your image by making more calls to your new functions with parameters. (Click to see full instructions)",
        "U3L08 - freePlay_2018_instruction": "Keep adding to your image by making more calls to your new functions with parameters. (Click to see full instructions)",
        "U3L08 - individualCode_instruction": "Create the functions you were assigned as part of your digital scene. (Click to see full instructions)",
        "U3L08 - individualCode_2018_instruction": "Create the functions you were assigned as part of your digital scene. (Click to see full instructions)",
        "U3L08 - introUnderTheSea with comments_instruction": "Add an extra fish, starfish, and piece of seagrass to the image. Look at, but don't change, the functions that create them. (Click to see full instructions)",
        "U3L08 - introUnderTheSea_instruction": "Add an extra fish, starfish, and piece of seagrass to the image. Look at, but don't change, the functions that create them. (Click to see full instructions)",
        "U3L08 - introUnderTheSea_2018_instruction": "Add an extra fish, starfish, and piece of seagrass to the image. Look at, but don't change, the functions that create them. (Click to see full instructions)",
        "U3L08 - multiParamFish_instruction": "Add three parameters to your drawFish function to accept red, green and blue values to make your fish different colors. (Click to see full instructions)",
        "U3L08 - multiParamFish_2018_instruction": "Add three parameters to your drawFish function to accept red, green and blue values to make your fish different colors. (Click to see full instructions)",
        "U3L08 - multipleLayersofParams_instruction": "Call drawPlusSign() to complete the image. (Click to see full instructions)",
        "U3L08 - paramsToStarfish_instruction": "Add a parameter to drawStarfish that changes the size of the starfish drawn. (Click to see full instructions)",
        "U3L08 - paramsToStarfish_2018_instruction": "Add a parameter to drawStarfish that changes the size of the starfish drawn. (Click to see full instructions)",
        "U3L08 - randomInput_instruction": "Use the randomNumber() blocks to test the functions you designed with random input. (Click to see full instructions)",
        "U3L08 - randomInput_2018_instruction": "Use the randomNumber() blocks to test the functions you designed with random input. (Click to see full instructions)",
        "U3L08 - seaGrass_instruction": "Add a parameter to drawSeagrass that changes the size of the piece of seagrass drawn. (Click to see full instructions)",
        "U3L08 - seaGrass_2018_instruction": "Add a parameter to drawSeagrass that changes the size of the piece of seagrass drawn. (Click to see full instructions)",
        "U3L08 - squareTwoParams_instruction": "Call drawSquare() to complete the drawing of two squares. (Click to see full instructions)",
        "U3L08 - squareTwoParams_2018_instruction": "Call drawSquare() to complete the drawing of two squares. (Click to see full instructions)",
        "U3L08 - starFish_instruction": "Add an extra fish, starfish, and piece of seagrass to the image. Look at, but don't change, the functions that create them. (Click to see full instructions)",
        "U3L08 - triangleTwoParams_instruction": "Call drawSquare() to complete the drawing of two squares. (Click to see full instructions)",
        "U3L08 how to add comments_instruction": "Use the randomNumber() blocks to test the functions you designed with random input. (Click to see full instructions)",
        "U3L08 how to add comments_2018_instruction": "Use the randomNumber() blocks to test the functions you designed with random input. (Click to see full instructions)",
        "U3L1 - Simulation - Template_instruction": "Use a while loop to \"flip 10 coins\" and write them to the screen. (Click to see full instructions)",
        "U3L12 Chaser Template_instruction": "This is a project template!",
        "U3L13 - Button with ID_instruction": "Drag a button out onto the screen and set its text to \"Go forth!\".  Run the program to make sure you can see the button.",
        "U3L13 - Debug Id Problem_instruction": "Improve the button by choosing a descriptive and meaningful ID. (Click to see full instructions)",
        "U3L13 - Debug Id plus logic problem_instruction": "The last problem was an example of syntax error.  App Lab did not understand which object it should be listening to for a \"click\" event so it showed an error message in the console to let you know.  Another kind of error is a logical error - the program is valid, but it's not doing what you want it to do.\n\nThis program has 2 errors. A (tricky) syntax error and logical error.  Find them, fix them, and make the program work as expected.",
        "U3L13 - Debugging 1_instruction": "Debug the program by verifying your IDs are being referenced properly. (Click to see full instructions)",
        "U3L13 - Debugging 2_instruction": "Debug the program by properly ordering your button commands and event handlers. (Click to see full instructions)",
        "U3L13 - Debugging 3_instruction": "Debug the program by fixing the logical error within the program. (Click to see full instructions)",
        "U3L13 - Project_instruction": "Create your multi-screen app. (Click to see full instructions.)",
        "U3L13 - Turtle Driver Project_instruction": "Create a \"turtle driver\" that includes buttons to move the turtle forward and turn it left and right. (Click to see full instructions)",
        "U3L13 - Turtle move with button_instruction": "Add a button that moves the turtle when clicked.  (Click to see full instructions)",
        "U3L13 eventsDetails_instruction": "Add an event handler to the button to move the turtle forward. (Click to see full instructions)",
        "U3L14 - Assigning Random Value_instruction": "Write a program that simulates the rolling of two dice and reports their individual values as well as the sum. (click to see full instructions)",
        "U3L14 - Mini Calculator embed_instruction": "You will be prompted for two numbers, one right after the other.  See what happens.  Enter different numbers until you get the idea.",
        "U3L14 - Unfortunate Events Free Play_instruction": "Follow the \"Unfortunate Events\" Worksheet and enter your code here to experiment.  We've pre-loaded the code you need to start.",
        "U3L14 - User Input Division calculator_instruction": "Write a program that acts as a simple calculator. (click to see full instructions)",
        "U3L14 - Variable ReAssignment pt2_instruction": "Trace the code and predict what you think will be printed to the console. Then add a console.log statement at the end of the program to see the last value of someNum to see if your full prediction is correct. (click to see full Instructions)",
        "U3L14 - concatenate simple_instruction": "Modify the write statement on line 3 to combine text and variables together to make the app display a single line of text that shows the player's lives and score. (click to see full instructions)",
        "U3L14 - moving memory challenge1_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "U3L14 - moving memory challenge2_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "U3L14 - moving memory challenge3_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "U3L14 - moving memory challenge4_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "U3L14 - moving memory challenge5_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "U3L14 - moving memory challenge6_instruction": "Using only the variables provided, assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log statement display the correct value(s).  (Click to see full instructions)",
        "U3L15 - Add reset button to UpDown app_instruction": "Add code so that clicking the start over button will reset the game and send you back to the main screen. (Click to see full instructions)",
        "U3L15 - DEMO up down count practice app_instruction": "Try out the demo app (Click to see full instructions)",
        "U3L15 - Debug forget to update var on reset in UpDown app_instruction": "Run the app, and click the up or down button until you get to the gameOverScreen. Click 'Start Over' and try the app again. Find and fix the issue in the code. (Click to see full instructions)",
        "U3L15 - Debug if never triggers in UpDown app_instruction": "Run the app and use the up and down arrows to try to hit the gameOverScreen. You can't! Find and fix the issue in the code. (Click to see full instructions)",
        "U3L15 - Debugging Simple If-statements =v==_instruction": "Run the app, and click the up button. Then restart and run it again, and click the down button. Find and fix the issue in the code. (Click to see full instructions)",
        "U3L15 - Simple If-statements in UpDown App_instruction": "Add an if statement so that the app changes screens when the count reaches -5. (Click to see full instructions)",
        "U3L15 - add code to make count down work_instruction": "Write code to make the down arrow work as expected. (Click to see full instructions)",
        "U3L15 - clicker update score_instruction": "Add code to update the score when the apple is clicked. (Click to see full instructions)",
        "U3L15 - count upDown bug forget to set text_instruction": "Find the bug in the program and fix it. (Click to see full instructions)",
        "U3L15 - count upDown bug logic error wrong update_instruction": "Find the bug in the program and fix it. (Click to see full instructions)",
        "U3L15 - count upDown bug var not created globally_instruction": "Find the bug in the program and fix it. (Click to see full instructions)",
        "U3L15 - global var example count up_instruction": "Look at the code for this app and see how the code works to update the count variable when the up arrow is clicked. (Click to see full instructions).",
        "U3L15 - mini clicker update score_instruction": "Add code to update the score when the apple is clicked. (Click to see full instructions)",
        "U3L15 - practice with setText_instruction": "Use setText to complete the click event handler for the down arrow. (Click to see full instructions)",
        "U3L15 - variable scoping problem debugging_instruction": "See if you can figure out why the code is no longer working. (Click to see full instructions)",
        "U3L15 click add lives_instruction": "Add lives to the clicker game that decrement by 1 when the background image is clicked (Click to see full instructions)",
        "U3L15 full clicker app_instruction": "Complete your clicker game! (Click to see full instructions)",
        "U3L16 - challenge say hi app_instruction": "Write a greeting to the user when they hit 'enter' in the text input, using the 'change' event. (Click to see full instructions)",
        "U3L16 - chaserApp_instruction": "Create your own \"Chaser Game.\" (Click to see full instructions)",
        "U3L16 - chooseImages_instruction": "Replace the image in your application with one of your own. (Click to see full instructions)",
        "U3L16 - doubleQuotes_instruction": "Save a string inside a variable and log it to the console. (Click to see full instructions)",
        "U3L16 - hideAndShow_instruction": "Introducing textInput, getText and write.  First run the starter code several times.  Try to change what's written to the screen when the button is clicked. Then use getText to write to the screen what the user entered in the text box. GIF: U3L16 - useGetText.gif",
        "U3L16 - hideAndShowPractice_instruction": "You are given some starting code that puts an image and two buttons on the screen.  The image is initially hidden. Add two new event handlers: one for each button, that when clicked hide and show the image.",
        "U3L16 - image and text labels_instruction": "Introducing the setPosition command!  Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "U3L16 - images and text labels_instruction": "Introducing objects other than buttons! - textLabels and images.  First try replacing your button with a textLabel.  Will the text respond to events just like the button?  Try connecting an event handler to it.  We've started you out with code similar to the result of the last level, you can copy your code from that level into here if you prefer. ",
        "U3L16 - images_instruction": "Introducing Images.  Try replacing the textLabel with an image..  Will the image respond to events just like the button?  Try connecting an event handler to it.  We've started you out with code similar to the result of the last level, you can copy your code from that level into here if you prefer. ",
        "U3L16 - intro getText_instruction": "Add an event handler to the Submit button so that when the button is clicked it will display the name entered in the text box to the console.  Use getText to get the value out of the text box. (Click to see full instructions)",
        "U3L16 - introSetPosition_instruction": "Move the buttons to the bottom of the screen. (Click to see full instructions)",
        "U3L16 - introStrings_instruction": "Save a string inside a variable and log it to the console. (Click to see full instructions)",
        "U3L16 - nameAgeTemplate_instruction": "Add an Text Input box for the name and age. (Click to see full instructions)",
        "U3L16 - nameAgeTemplate_2018_instruction": "Add an Text Input box for the name and age. (Click to see full instructions)",
        "U3L16 - newEventTypes_instruction": "Experiment with different event types and select the one that you think is best. (Click to see full instructions)",
        "U3L16 - outputWithTextArea_instruction": "Output a message to the 'textArea' (Click to see full instructions)",
        "U3L16 - projectTemplate_instruction": "Create your own \"Chaser App\". (Click to see full instructions)",
        "U3L16 - quick double click_instruction": "Mini-Project.  The Quick Double-Click game.  In this simple game an object (an image) moves around, or pops up randomly on the screen, as the user clicks it.  The goal of our game will be to try to double-click the object before it moves.  Part of the challenge (and fun) here is creating this app from scratch.  You can look back at your previous work for examples, but it's fun to create something from scratch, too.  Try it!  For more details see the Activity guide for this lesson.",
        "U3L16 - setPosition to move button_instruction": "Introducing the setPosition command! Replace the moveTo in the button-click event handler to use setPosition to move the button itself to a random location when it's clicked.",
        "U3L16 - setPositionMoveButton_instruction": "Use setPositon to moveButton",
        "U3L16 - setupMoveToRandom_instruction": "Modify the code so that the turtle moves to a random screen location when the button is clicked. (Click to see full instructions)",
        "U3L16 - singleSetPosition_instruction": "Move the button to the middle of the screen. (Click to see full instructions)",
        "U3L16 - stringsVsNumbers_instruction": "Run the program to see how strings and numbers behave with different arithmetic operators. (Click to see full instructions)",
        "U3L16 - text labels_instruction": "Use the textLabel command to replace the button in your program with a text label. (Click to see full instructions)",
        "U3L16 - textInput getText write_instruction": "Add an Text Input box for the name and age. (Click to see full instructions)",
        "U3L16 - toUpper_instruction": "Make the name of the user appear in uppercase (Click to see full instructions)",
        "U3L16 - use images_instruction": "Use the image command to replace the text label in your program with an image. (Click to see full instructions)",
        "U3L16 Mad Lib Clear Input_instruction": "Clear the user's previous text when the Play Again button is clicked (Click to see full instructions) ",
        "U3L16 Mad Lib Demo_instruction": "Mad Libs Demo - Try it out!",
        "U3L16 Mad Lib Student Setup_instruction": "Back to Mad Libs: To get started, set up the two screens for your Mad Libs app (Click to show full instructions)",
        "U3L16 Mad Lib getText_instruction": "Before setting the text area with your Mad Libs outline, get the user's text and incorporate their responses. (Click to see full instructions) ",
        "U3L16 Mad Lib setText_instruction": "When the Next button is clicked, set the text area to have the main outline of your How-to Mad Libs (without the user's input). (Click to see full instructions) ",
        "U3L16 Mad Lib toUpper_instruction": "Apply the toUpperCase and toLowerCase string functions to the user's text. (Click to see full instructions) ",
        "U3L17 - getAndSetKeyValue_instruction": "Create an image like app. (Click to see full instructions)",
        "U3L17 - getKeyValue_instruction": "Run the program several times to observe how the setKeyValue commands now always arrive in order. (Click to see full instructions)",
        "U3L17 - introCallbacks_instruction": "Run the program several times to observe how the setKeyValue commands now always arrive in order. (Click to see full instructions)",
        "U3L17 - introKeyValue_instruction": "Explore your key value pairs with the Data Viewer. (Click to see full instructions)",
        "U3L17 - readKeyValue_instruction": "Explore your key value pairs with the Data Viewer. (Click to see full instructions)",
        "U3L17 - setKeyValue_instruction": "Create and update your key value pairs using setKeyValue. (Click to see full instructions)",
        "U3L17 - twoSetKeyValue_instruction": "Run the program several times to observe how often setKeyValue commands arrive out of order. (Click to see full instructions)",
        "U3L18 comparison operators_instruction": "Use console.log to print out the different boolean expressions below to see what information they return. (Click to see full instructions)",
        "U3L18 comparison operators_for_video_instruction": "Use `console.log` to print out the different boolean expressions below to see what information they return. (Click to see full instructions)",
        "U3L19 - Clicker Game Freeplay Area_instruction": "Use this App Lab area to improve your clicker game.  You should start by copy/pasting the code from your old game here.  We're showing a more full set of blocks in the toolbox - some of the things you might not have used yet.  Feel free to explore then and experiment if you want to.  Everything else you need should be shown.  Have fun!",
        "U3L19 - DEMO up down count practice app_instruction": "Try out the demo app (Click to see full instructions)",
        "U3L19 - Debugging with consoleLog_instruction": "Add console.log() statements to find out the value of a and b after the first reassignment statement a = b; (Click to see full instructions)",
        "U3L19 - Simple If-statements in UpDown App_instruction": "Add an if statement so that the app changes screens when the count reaches -5. (Click to see full instructions)",
        "U3L19 - Target Clicker App_instruction": "Investigate the new elements of the 'chaser-game'",
        "U3L19 - do concatenate string with var_instruction": "We've given you a piece of code from the previous screen.  Try changing the value assigned to foo to see the string change. \nDo this: \n1. Try changing the value assigned to foo to see the string change. \n2. By only modifying the lines of code that were given to you, try to get the output to say: “The value of foo is: 9.  And isn’t that fine.” \n",
        "U3L19 - fix the var name syntax error v2_instruction": "Fix the error and get it to print the value of both variables (Click to see full instructions)",
        "U3L19 - fix the var name syntax error_instruction": "Fix the error and get it to print the value of both variables (Click to see full instructions)",
        "U3L19 - global var example count up_instruction": "Look at the code for this app and see how the code works to update the count variable when the up arrow is clicked. (Click to see full instructions).",
        "U3L19 - practice with setText_instruction": "Add another button that changes the text to the value of a new variable. (Click to see full instructions)",
        "U3L19 - test reassignment of two vars_instruction": "Predict the value of a and b. Add console.log statements to find out the actual value of a and b. (Click for full instructions)",
        "U3L19 - three basic ops of variables_instruction": "Add another variable called \"lives\" and set the value to 3. Print the value of the variable to the console. (Click to see full instructions)",
        "U3L19 - try out console log_instruction": "Try out console.log.  Do this: replace the statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).  Run the program and you should see the output show up in the console area below the workspace.  Then try adding a few more console.log statements.  Display some text.  Make another variable and display that.  \nThe app screen will be blank -- that's the point.  With console.log you can test output behind the scenes in a way the user cannot see.  \n\n\nGIF: U3L19-useconsolelog.gif",
        "U3L19 - up down count practice app_instruction": "Set up the down button to decrease the value of count by 1 each time it is clicked. (Click to see full instructions)",
        "U3L19 - updating variables pt1_instruction": "This app is only SLIGHTLY different from the previous one, but much more dynamic.  See if you can figure out how and why the count is going up.  Once you've figured it out then you should be able to DO THIS: add a button to the app that when clicked makes the count go down, and updates the label.  When you're done the app should work as shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif",
        "U3L19 - variable reassignment challenge pt2_instruction": "Make a prediction about the ending values of a, b, and c. Then use console.log to check your understanding (Click to see full instructions)",
        "U3L19 - variable reassignment part 1_instruction": "Predict the value of a and b. Add console.log statements to find out the actual value of a and b. (Click for full instructions)",
        "U3L19 - variable scope problem 2_instruction": "What is happening with foo? Play with the level to try to figure it out. (Click to see full instructions)",
        "U3L19 - variable scoping problem debugging_instruction": "See if you can figure out why the code is no longer work. (Click to see full instructions)",
        "U3L19 - write var and string with same name v2_instruction": "Fix the code so that the values of both variables print to the console. (Click to see full instructions)",
        "U3L19 - write var and string with same name_instruction": "Fix the code so that the value of both variables prints to the console. (Click to see full instructions)",
        "U3L2 Using Simple Commands (no tooltips)_instruction": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
        "U3L2 Using Simple Commands_instruction": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
        "U3L2 Using Simple Commands_2018_instruction": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
        "U3L23 Chatbot Conditionals 1_instruction": "Add if, else if, and else statements to detect the movie genres Comedy, Romance, Action, and Horror. (Click to see full instructions)",
        "U3L23 Chatbot Intro 1a_instruction": "Store the user's input inside a variable and log it to the console.",
        "U3L23 Chatbot Intro 2_instruction": "Use string concatenation to store the user's input and assistant's answer into the conversation variable using the format \"User: <input><bot name>: <default response>\" . Log the conversation to the console.",
        "U3L23 Chatbot Intro 2a_instruction": "Display the conversation onto the \"text_area\" element. Optional: clear the user's input after every \"change\" event.",
        "U3L23 Chatbot Intro 3_instruction": "Add newline characters \"\\n\" to separate the user's input and the computer's response.",
        "U3L23 Chatbot Intro 4_instruction": "Use this level to make your chatbot look and work better!",
        "U3L23 Chatbot Intro_instruction": "Choose a specialization topic for your digital assistant. Create a basic digital assistant that takes the user's input and displays back a default response.",
        "U3L23 Digital Assistant 2_instruction": "Add the response \"I don't know.\" after each of the user's inputs.",
        "U3L23 Digital Assistant 3_instruction": "Add the response \"I don't know.\" after each of the user's inputs.",
        "U3L23 Digital Assistant 4_instruction": "Display the user's input and the digital assistant's response on different lines.",
        "U3L23 Digital Assistant 5_instruction": "Start the user's command with the phrase \"User:\" and the digital assistant's response with the phrase \"Bot:\"",
        "U3L23 Digital Assistant 6_instruction": "When the user hits Run, display the text \"I'm a generic digital assistant. Ask me anything!\"",
        "U3L24 Basic String Parsing 1_instruction": "Use the function \"userInput.indexOf(<food>)\" to check if the strings \"pizza\" or \"soup\" are anywhere in the user's response.",
        "U3L24 Chatbot Basic Conditionals_instruction": "Check out the project description for instructions. (Click to see full instructions.)",
        "U3L24 Chatbot Conditionals 2_instruction": "Adjust the \"if\" block to make the bot respond \"I don't know that color.\" if the user types anything besides \"blue\"",
        "U3L24 Chatbot Conditionals 3_instruction": "Adjust the \"if/else\" block to make the bot respond to the colors blue, red, and green, and to two additional colors.",
        "U3L24 Chatbot Keyword Record_instruction": "Use the next level to record your digital assistant's keywords/phrases.",
        "U3L24 Chatbot Nested Conditionals_instruction": "Add a chained conditional with at least 3 \"else if\" statements to your personal assistant.",
        "U3L24 Nested Conditionals 1_instruction": "Change all of the boolean expressions to use includes instead of ==. (Click to see full instructions)",
        "U3L24 Nested Conditionals 2_instruction": "Nest your movie genre if statements inside the if statements to check for a ? in the input. ",
        "U3L24 Nested Conditionals Bugs 2_instruction": "Fix the problem with the code so that all the conditions can be reached. (Click to see full instructions)",
        "U3L24 Nested Conditionals Bugs 3_instruction": "Fix the bugs that still exist in this program. Prove that the program works correctly.",
        "U3L24 Nested Conditionals Bugs_instruction": "Expose the bugs in this problem by typing inputs into the user-input box. Track which inputs cause unexpected outputs.",
        "U3L24 introIncludes_instruction": "Practice using the includes command. (Click to see full instructions)",
        "U3L25 - drag out key event_instruction": "Set up an event handler to respond to keypress events, and display event.key in the console. Hit keys on the keyboard to see what happens. (Click to see full instructions)",
        "U3L25 - play sound when up key_instruction": "Change the code so the sound will only play when the up arrow is pressed. (Click to see full instructions)",
        "U3L25 Chatbot Strings_instruction": "1. Adjust your digital assistant to evaluate inputs the same way whether the inputs are capitalized or lowercase. 2. If a user asks \"What is <phrase>?\", where <phrase> is an input your digital assistant does not recognize, make your digital assistant respond \"I don't know what <phrase> is.\"",
        "U3L25 String Parsing 1_instruction": "Given the string \"Wisdom begins with wonder.\" what is the index of the following characters W, t, w, ., d, and k? Confirm your expectation using the string.indexOf() function.",
        "U3L25 String Parsing 2_instruction": "Use str.length to find the length of the strings “Hello World”, “Computer science rocks!\", and “I promise to do my homework every day.”",
        "U3L25 String Parsing 3_instruction": "Write a password length checker that writes “yes” to the console if a string has a length greater than 10, or “no” if it is less than or equal to 10.  Test your function using two strings, one that will satisfy each conditional option.",
        "U3L25 String Parsing 4_instruction": "You are given the string \"Wisdom begins with wonder.\" Use the string.substring(begin, end) function to print \"begin\" and \"nder\" to the console.",
        "U3L25 String Parsing 5_instruction": "Fill in the function, findBeginNder() to get the strings \"begin\" and \"nder\" from a sentence no matter where in the sentence they exist.\nPrint the strings and their index to the console. ",
        "U3L25 String Parsing 6_instruction": "Write a function that takes a name (first last) and reorders it (last, first).",
        "U3L25 String Parsing 7_instruction": "You are given the string “The earth has music for those who listen.” Manipulate it using the functions str.toUpperCase() and str.toLowerCase().",
        "U3L26 AND operator_instruction": "Update the genre and rating if statements to give only one movie suggestion at a time. (Click to see full instructions)",
        "U3L26 Chatbot Compound Conditionals_instruction": "Update your digital assistant to include at least one each of AND, OR, and NOT",
        "U3L26 Chatbot Final_instruction": "Update your digital assistant to include at least one each of AND, OR, and NOT",
        "U3L26 Compound Logic_instruction": "Write a conditional statement that detects if a command contains all the phrases \"2000\" \"animated\" and \"G-rated.\" If all these phrases are detected, make Movie Bot respond \"The top grossing animated and G-rated film in the 2000 decade was Finding Nemo.\"",
        "U3L26 NOT operator_instruction": "Write a conditional statement that detects if a command does not contain the phrase \"bad.\" If \"bad\" is not detected, make Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry, I don't know about bad movies.\" ",
        "U3L26 OR operator_instruction": "Update the if statement to use an OR to check for a \"?\" as well as who, what, where, when, why, how in the user input. (Click to see full instructions)",
        "U3L27 Chatbot Final_instruction": "Make your digital assistant awesome and when you are finished, ask one of your classmates to test it for you using the activity guide. As you add features to your digital assistant, track them on the next level.",
        "U3L2_Turtle3by3Grid_instruction": "Draw a 3x3 grid to the front and right of the turtle as efficiently as possible. The turtle should end at its original location, facing its original direction. (Click to see full instructions)",
        "U3L2_Turtle3by3Grid_2018_instruction": "Draw a 3x3 grid to the front and right of the turtle as efficiently as possible. The turtle should end at its original location, facing its original direction. (Click to see full instructions)",
        "U3L2_TurtleSquare_right_instruction": "Draw a square to the front and to the right of the starting location. (Click to show full instructions)",
        "U3L2_TurtleSquare_right_2018_instruction": "Draw a square to the front and to the right of the starting location. (Click to show full instructions)",
        "U4 - Add Row By Hand_instruction": "Add a new record to your table in the Data Viewer. (Click to see full instructions)",
        "U4 - Add Row By Hand_2018_instruction": "Add a new record to your table in the Data Viewer. (Click to see full instructions)",
        "U4 - Charts - Export Data_instruction": "Export the data from the “ages” table as a CSV file, then remix this app and import the CSV file. (Click to see full instructions)",
        "U4 - Charts - Export Data_2018_instruction": "Export the data from the “ages” table as a CSV file, then remix this app and import the CSV file. (Click to see full instructions)",
        "U4 - Charts - Import Data 1_instruction": "Download the CSV file we’ve provided, and then use the data viewer to import the data from the file into the “mytable” table. (Click to see full instructions)",
        "U4 - Charts - Import Data 1_2018_instruction": "Download the CSV file we’ve provided, and then use the data viewer to import the data from the file into the “mytable” table. (Click to see full instructions)",
        "U4 - Charts - Import Data 2_instruction": "Call readRecords on “mytable” and print each record to the console. (Click to see full instructions)",
        "U4 - Charts - Import Data 2_2018_instruction": "Call readRecords on “mytable” and print each record to the console. (Click to see full instructions)",
        "U4 - Charts - Line Chart 1_instruction": "Create a line chart showing the change in popularity of “#tbt” over time. (Click to see full instructions)",
        "U4 - Charts - Line Chart 1_2018_instruction": "Create a line chart showing the change in popularity of “#tbt” over time. (Click to see full instructions)",
        "U4 - Charts - Line Chart 2_instruction": "Add a second line to your chart to show the change in popularity of both “#tbt” and “#nofilter” at the same time. (Click to see full instructions)",
        "U4 - Charts - Line Chart 2_2018_instruction": "Add a second line to your chart to show the change in popularity of both “#tbt” and “#nofilter” at the same time. (Click to see full instructions)",
        "U4 - Charts - Line Chart Template_instruction": "This is a template.",
        "U4 - Charts - Line Chart Template_2018_instruction": "This is a template.",
        "U4 - Charts - Remixing Apps with Data_instruction": "Run this app and see what it prints to the console. Then remix the app and run the remixed version to see what happened to the data. (Click to see full instructions)",
        "U4 - Charts - Remixing Apps with Data_2018_instruction": "Run this app and see what it prints to the console. Then remix the app and run the remixed version to see what happened to the data. (Click to see full instructions)",
        "U4 - Charts - Scatter Chart_instruction": "Create a scatter plot of the “rottenTomatoes” table, using the new table and column names. (Click to see full instructions)",
        "U4 - Charts - Scatter Chart_2018_instruction": "Create a scatter plot of the “rottenTomatoes” table, using the new table and column names. (Click to see full instructions)",
        "U4 - Charts - drawChartFromRecords 1_instruction": "Use the drawChartFromRecords block to create a scatter plot from the table in the database. (Click to see full instructions)",
        "U4 - Charts - drawChartFromRecords 1_2018_instruction": "Use the drawChartFromRecords block to create a scatter plot from the table in the database. (Click to see full instructions)",
        "U4 - Charts - drawChartFromRecords Options 1_instruction": "Add a title to your chart and change the colors of your lines using the options parameter of drawChartFromRecords. (Click to see full instructions)",
        "U4 - Charts - drawChartFromRecords Options 1_2018_instruction": "Add a title to your chart and change the colors of your lines using the options parameter of drawChartFromRecords. (Click to see full instructions)",
        "U4 - Charts - drawChartFromRecords Options 2_instruction": "Look through the drawChartFromRecords API and choose some more options to customize. (Click to see full instructions)",
        "U4 - Charts - drawChartFromRecords Options 2_2018_instruction": "Look through the drawChartFromRecords API and choose some more options to customize. (Click to see full instructions)",
        "U4 - Charts - drawChartsFromRecords 1_instruction": "Add screen element, pull out drawCharts block, run the program!",
        "U4 - CreateRecord - 1_instruction": "Add a createRecord command and run the program. (Click to see full instructions)",
        "U4 - CreateRecord - 1_2018_instruction": "Add a createRecord command and run the program. (Click to see full instructions)",
        "U4 - CreateRecord - 2.5_instruction": "Change the table name in createRecord then check the Data Viewer to see the new table. (Click to see  full instructions)",
        "U4 - CreateRecord - 2.5_2018_instruction": "Change the table name in createRecord then check the Data Viewer to see the new table. (Click to see  full instructions)",
        "U4 - CreateRecord - 2_instruction": "Change the name from \"Alice\" to something else in the createRecord command.  Run the program and use the Data Viewer to see the changes to your table. (Click to see full instructions)",
        "U4 - CreateRecord - 2_2018_instruction": "Change the name from \"Alice\" to something else in the createRecord command.  Run the program and use the Data Viewer to see the changes to your table. (Click to see full instructions)",
        "U4 - CreateRecord - 3_instruction": "Use createRecord to add the song object as a record to a table. (Click to see full instructions)",
        "U4 - CreateRecord - 3_2018_instruction": "Use createRecord to add the song object as a record to a table. (Click to see full instructions)",
        "U4 - CreateRecord - 4_instruction": "Run the program. Verify the song object was added to the database. Note the callback function now displays the copy of the record sent back back by the database. (Click to see full instructions)",
        "U4 - CreateRecord - 4_2018_instruction": "Run the program. Verify the song object was added to the database. Note the callback function now displays the copy of the record sent back back by the database. (Click to see full instructions)",
        "U4 - CreateRecord - 5_instruction": "Add a property to the JavaScript object, then run the program.  View the data table and see how changing the object affects the data table. (Click to see full instructions)",
        "U4 - CreateRecord - 5_2018_instruction": "Add a property to the JavaScript object, then run the program.  View the data table and see how changing the object affects the data table. (Click to see full instructions)",
        "U4 - Edit Data Table by Hand_instruction": "View the data table and click edit next to each row.  Add the artists names for each song by hand. (Click to see full instructions)",
        "U4 - Edit Data Table by Hand_2018_instruction": "View the data table and click edit next to each row.  Add the artists names for each song by hand. (Click to see full instructions)",
        "U4 - Exploring Data Tools - Template_instruction": "Use createRecord to add the song object as a record to a table. (Click to see full instructions)",
        "U4 - Exploring Data Tools - Template_2018_instruction": "Use createRecord to add the song object as a record to a table. (Click to see full instructions)",
        "U4 - Objects - accessingPropertiesInArray_instruction": "Access the properties of the objects stored in an array. (Click to see full instructions)",
        "U4 - Objects - accessingPropertiesInArray_2018_instruction": "Access the properties of the objects stored in an array. (Click to see full instructions)",
        "U4 - Objects - arraysOfObjects_instruction": "Create an array called \"students\" and add all 5 student objects to the array. (Click to see full instructions)",
        "U4 - Objects - arraysOfObjects_2018_instruction": "Create an array called \"students\" and add all 5 student objects to the array. (Click to see full instructions)",
        "U4 - Objects - createContactObject_instruction": "Construct a new object from the user inputs, and append it to your array. (Click to see full instructions)",
        "U4 - Objects - createContactObject_2018_instruction": "Construct a new object from the user inputs, and append it to your array. (Click to see full instructions)",
        "U4 - Objects - createContactsData_instruction": "Add values to the three contact objects provided in the starter code. (Click to see full instructions)",
        "U4 - Objects - createContactsData_2018_instruction": "Add values to the three contact objects provided in the starter code. (Click to see full instructions)",
        "U4 - Objects - createDotNotation_instruction": "Create a student Object yourself. Add properties to your object one at a time using dot notation. (Click to see full instructions)",
        "U4 - Objects - createDotNotation_2018_instruction": "Create a student Object yourself. Add properties to your object one at a time using dot notation. (Click to see full instructions)",
        "U4 - Objects - createObject_instruction": "Create an object with at least 3 properties and display it in the Debug Console. (Click to see full instructions) ",
        "U4 - Objects - dotNotation_instruction": "Use dot notation to display individual properties of the object. (Click to see full instructions)",
        "U4 - Objects - dotNotation_2018_instruction": "Use dot notation to display individual properties of the object. (Click to see full instructions)",
        "U4 - Objects - eventHandlersToSwitchScreen_instruction": "Attach event handlers to the \"Add Contact\" and \"Go Back\" buttons that allow the user to switch screens. (Click to see full instructions)",
        "U4 - Objects - eventParameter_instruction": "Trigger both the keyboard and mouse event and examine the event objects displayed in the console. Why might an object be the best way to store this information? (Click to see full instructions)",
        "U4 - Objects - eventParameter_2018_instruction": "Trigger both the keyboard and mouse event and examine the event objects displayed in the console. Why might an object be the best way to store this information? (Click to see full instructions)",
        "U4 - Objects - exemplarContactsApp_instruction": "Use the Contacts app and then add a contact of your own. (Click to see full instructions)",
        "U4 - Objects - exemplarContactsApp_2018_instruction": "Use the Contacts app and then add a contact of your own. (Click to see full instructions)",
        "U4 - Objects - loopingArray_instruction": "Loop over your array of students and print the name of every students. (Click to see full instructions)",
        "U4 - Objects - loopingArray2_instruction": "Loop over your array of students and print the name and grade of every student. (Click to see full instructions)",
        "U4 - Objects - loopingCompoundConditions_instruction": "Loop over the array of students and display the information of students who are present and in the 11th grade. (Click to see full instructions)",
        "U4 - Objects - loopingConditions_instruction": "Loop over your array of student objects and display the names of every student who is present in class. (Click to see full instructions)",
        "U4 - Objects - pullValues_instruction": "Create an event handler for the \"Save Contact\" button that displays the contents of the 4 text input fields in the console. (Click to see full instructions)",
        "U4 - Objects - pullValues_2018_instruction": "Create an event handler for the \"Save Contact\" button that displays the contents of the 4 text input fields in the console. (Click to see full instructions)",
        "U4 - Objects - readStarterCode_instruction": "Familiarize yourself with the starter code and UI elements provided. (Click to see full instructions)",
        "U4 - Objects - readStarterCode_2018_instruction": "Familiarize yourself with the starter code and UI elements provided. (Click to see full instructions)",
        "U4 - Objects - resetIndexAndShow_instruction": "Add code to your event handler for the \"Save Contact\" button so that when a new contact is added, the inputs are cleared, the screen is switched, and the correct contact is shown. (Click to see full instructions)",
        "U4 - Objects - resetIndexAndShow_2018_instruction": "Add code to your event handler for the \"Save Contact\" button so that when a new contact is added, the inputs are cleared, the screen is switched, and the correct contact is shown. (Click to see full instructions)",
        "U4 - Objects - showContact1_instruction": "Add code to the showCurrentContact function to show the name of the contact stored at the currentIndex of your array. (Click to see full instructions)",
        "U4 - Objects - showContact1_2018_instruction": "Add code to the showCurrentContact function to show the name of the contact stored at the currentIndex of your array. (Click to see full instructions)",
        "U4 - Objects - showContact2_instruction": "Add the phone number and birthday text to your text area. (Click to see full instructions)",
        "U4 - Objects - showContact2_2018_instruction": "Add the phone number and birthday text to your text area. (Click to see full instructions)",
        "U4 - Objects - showContact3_instruction": "Display the image information for each contact. (Click to see full instructions)",
        "U4 - Objects - showContact3_2018_instruction": "Display the image information for each contact. (Click to see full instructions)",
        "U4 - Objects - showSampleImage_instruction": "Attach an event handler to the image URL text input so that the user can confirm their image will work as expected. (Click to see full instructions)",
        "U4 - Objects - showSampleImage_2018_instruction": "Attach an event handler to the image URL text input so that the user can confirm their image will work as expected. (Click to see full instructions)",
        "U4 - Objects - writeWrap_instruction": "Use the wrap function to prevent currentIndex from leaving the bounds of your array. (Click to see full instructions)",
        "U4 - Read Record - 1.2_instruction": "Place a console.log command below the readRecords command. (Click to see full instructions)\n",
        "U4 - Read Record - 1.2_2018_instruction": "Place a console.log command below the readRecords command. (Click to see full instructions)\n",
        "U4 - Read Record - 1.3_instruction": "Add a console.log command inside the callback function. (Click to see full instructions)\n",
        "U4 - Read Record - 1.3_2018_instruction": "Add a console.log command inside the callback function. (Click to see full instructions)\n",
        "U4 - Read Record - 1_instruction": "Use console.log to display the records returned by a call to readRecords. (Click to see full instructions)\n",
        "U4 - Read Record - 1_2018_instruction": "Use console.log to display the records returned by a call to readRecords. (Click to see full instructions)\n",
        "U4 - Read Record - 2_instruction": "Change the table name so that the records are read from the new table. (Click to see full instructions)\n",
        "U4 - Read Record - 2_2018_instruction": "Change the table name so that the records are read from the new table. (Click to see full instructions)\n",
        "U4 - Read Record - 3_instruction": "Change the name of the table in a readRecords command to read from a table that does not exist. (Click to see full instructions)\n",
        "U4 - Read Record - 3_2018_instruction": "Change the name of the table in a readRecords command to read from a table that does not exist. (Click to see full instructions)\n",
        "U4 - Read Record - 4.1_instruction": "Use indexes and dot notation to reference values in the response from the database. (Click to see full instructions)\n",
        "U4 - Read Record - 4.1_2018_instruction": "Use indexes and dot notation to reference values in the response from the database. (Click to see full instructions)\n",
        "U4 - Read Record - 4_instruction": "Print out each record return from the readRecords call individually. (Click to see full instructions)\n",
        "U4 - Read Record - 5_instruction": "Using a for loop, display the title of each movie in your database. (Click to see full instructions)\n",
        "U4 - Read Record - 5_2018_instruction": "Using a for loop, display the title of each movie in your database. (Click to see full instructions)\n",
        "U4 - Read Record - part 1 - template_instruction": "Use console.log to display the records returned by a call to readRecords. (Click to see full instructions)\n",
        "U4 - Read Record - part 1 - template_2018_instruction": "Use console.log to display the records returned by a call to readRecords. (Click to see full instructions)\n",
        "U4 - ReadRecords - Contacts App 1_instruction": "Use readRecords to copy the data in your database into your \"contacts\" global variable and call showCurrentContact. (Click to see full instructions)",
        "U4 - ReadRecords - Contacts App 1_2018_instruction": "Use readRecords to copy the data in your database into your \"contacts\" global variable and call showCurrentContact. (Click to see full instructions)",
        "U4 - ReadRecords - Contacts App 2_instruction": "Create a function called refreshLocalData. (Click to see full instructions)",
        "U4 - ReadRecords - Contacts App 2_2018_instruction": "Create a function called refreshLocalData. (Click to see full instructions)",
        "U4 - ReadRecords - Contacts App 3_instruction": "Add a call to \"refreshLocalData\" to the callback function of the createRecord you use to add a new contact to your database. (Click to see full instructions)",
        "U4 - ReadRecords - Contacts App 3_2018_instruction": "Add a call to \"refreshLocalData\" to the callback function of the createRecord you use to add a new contact to your database. (Click to see full instructions)",
        "U4 - ReadRecords - Contacts App 4_instruction": "Create a \"Delete\" button. (Click to see full instructions)",
        "U4 - ReadRecords - Contacts App 4_2018_instruction": "Create a \"Delete\" button. (Click to see full instructions)",
        "U4 - ReadRecords - Contacts App 5 make delete work_instruction": "Create an event handler for the \"Delete\" button you created. (Click to see full instructions)",
        "U4 - ReadRecords - Contacts App 5 make delete work_2018_instruction": "Create an event handler for the \"Delete\" button you created. (Click to see full instructions)",
        "U4 - add createRecord to contacts App_instruction": "Add code to your contacts app so that newly-added contacts are saved in a table. (Click to see full instructions)",
        "U4 - add createRecord to contacts App_2018_instruction": "Add code to your contacts app so that newly-added contacts are saved in a table. (Click to see full instructions)",
        "U4 - debug column names are case sensitive_instruction": "Change song.title to song.Title (capital T).  And run the program.  Check the data table  (Click to see full instructions)",
        "U4 - debug column names are case sensitive_2018_instruction": "Change song.title to song.Title (capital T).  And run the program.  Check the data table  (Click to see full instructions)",
        "U4 - deleteRecords 0_instruction": "Use the deleteRecord command with default values. Verify the record was deleted. (Click for full instructions).",
        "U4 - deleteRecords 0_2018_instruction": "Use the deleteRecord command with default values. Verify the record was deleted. (Click for full instructions).",
        "U4 - deleteRecords 1_instruction": "Find the id of \"Little Bunny Foo Foo\" in the data table \"mySongs\".  Use the deleteRecord command to delete it.  See what happens when you try to delete an ID a second time. (Click for full Instructions).",
        "U4 - deleteRecords 1_2018_instruction": "Find the id of \"Little Bunny Foo Foo\" in the data table \"mySongs\".  Use the deleteRecord command to delete it.  See what happens when you try to delete an ID a second time. (Click for full Instructions).",
        "U4 - deleteRecords 2 delete object_instruction": "Use the song object to delete multiple objects in the database by changing only the \"id\" property. (Click for full Instructions).",
        "U4 - deleteRecords 2 delete object_2018_instruction": "Use the song object to delete multiple objects in the database by changing only the \"id\" property. (Click for full Instructions).",
        "U4 - deleteRecords 2_instruction": "Using the data viewer, find the id of a a record you want to delete. Use the deleteRecord command to delete it. (Click for full instructions).",
        "U4 - fix contacts by hand in data table_instruction": "Use the data viewer to add rows to the data table.  Add the original hard-coded contacts from your app to the database. (Click to see full instructions)",
        "U4 - fix contacts by hand in data table_2018_instruction": "Use the data viewer to add rows to the data table.  Add the original hard-coded contacts from your app to the database. (Click to see full instructions)",
        "U4 - last stage test adding contcts_instruction": "Confirm that new contacts you add are saved to the database.  Verify that after restarting your app, the contacts you added no longer show in the app, but still exist in the database. (Click to see full instructions)",
        "U4 - last stage test adding contcts_2018_instruction": "Confirm that new contacts you add are saved to the database.  Verify that after restarting your app, the contacts you added no longer show in the app, but still exist in the database. (Click to see full instructions)",
        "U4 Model App_instruction": "Add a large red button to your screen using Design Mode. (Click for full instructions.)",
        "U4 Model App_2018_instruction": "Add a large red button to your screen using Design Mode. (Click for full instructions.)",
        "U4 Model Design 1_instruction": "Add a large red button to your screen using Design Mode. (Click for full instructions.)",
        "U4 Model Design 1_2018_instruction": "Add a large red button to your screen using Design Mode. (Click for full instructions.)",
        "U4 vigenere cipher 2_instruction": "Instructions",
        "U4L02 - Objects - Template1_instruction": "Template",
        "U4L02 - Objects - Template1_2018_instruction": "Template",
        "U4L02 - Objects - createObject_instruction": "Create an object with at least 5 values including at least one string and one number. (Click to see full instructions) ",
        "U4L02 - Objects - eventParameter_instruction": "Trigger both the keyboard and mouse event and examine the event objects displayed in the console. Why might an object be the best way to store this information? (Click to see full instructions)",
        "U4L06 Data Storage 1_instruction": "Fill in your name instead of \"Enter Your Name\", run the app and click the button. Run it multiple times with different names! Watch the console and use the ‘View Data” button to see how the table is updated. As you play around make sure you can explain the purpose of each of the circled parts of the diagram.\n\n",
        "U4L06 Data Storage 2_instruction": "The app is a continuation of the previous one we started. Add a text label to collect the users name and use that as the data input for the record.\n\nRun the app and click the button multiple times and see what happens. Is there a problem you notice? ",
        "U4L06 Data Storage 3_instruction": "We want to improve the user experience. Once they have submitted their data for storage, it would be nice to clear the textbox.  Update your app to clear the textbox after the data is stored.",
        "U4L06 Data Storage 4_instruction": "Add a label and drop down box, to your app and save the data to your JSON object and add it to your table. Make sure to reset the dropdown after the data is stored.",
        "U4L06 Data Storage 5_instruction": "Add a couple radio buttons or checkboxes to our app. Then find a way to collect the data from those. ",
        "U4L06 Data Storage 6_instruction": " Use one of the getTime() and getUserId() blocks to collect additional data. ",
        "U4L06 Data Storage 7_instruction": "Add a second screen to the sample app we have been building to capture an image from a user. Return to screen 1 after the JSON object has been stored in the table.",
        "U4L15 Read Data 1_instruction": "Run the level and see what happens. Then edit the code to make it print a different column of information.",
        "U4L15 Read Data 2_instruction": "Student should create a sentence which puts together all the pieces from a record.\n\n<<Name>> is <<Age>> years old and like <<Food>>",
        "U4L15 Read Data 3_instruction": "Print the sentence using the first JSON object in the array\n\n",
        "U4L15 Read Data 4_instruction": "\nUse a random record from the list of records to display your sentence.",
        "U5 if-else-if movie example_instruction": "Add an else-if statement in order to tell the user if their guess is high or low instead of just wrong. (Click to see full instructions)",
        "U5 if-else-if movie example_2018_instruction": "Add an else-if statement in order to tell the user if their guess is high or low instead of just wrong. (Click to see full instructions)",
        "U6 - Final Project - Project Level_instruction": "Build your final project here. (Click to see full instructions)",
        "U6 - Final Project - Project Level_2018_instruction": "Build your final project here. (Click to see full instructions)",
        "U6 - updateRecord - Callback Success Parameter_instruction": "Add an if-else block inside the callback function for updateRecord. (Click to see full instructions)",
        "U6 - updateRecord - Callback Success Parameter_2018_instruction": "Add an if-else block inside the callback function for updateRecord. (Click to see full instructions)",
        "U6 - updateRecord - Contacts - Edit UI_instruction": "Set up the UI elements needed to edit contacts. (Click to see full instructions)",
        "U6 - updateRecord - Contacts - Edit UI_2018_instruction": "Set up the UI elements needed to edit contacts. (Click to see full instructions)",
        "U6 - updateRecord - Contacts - Edit event handler_instruction": "Write event handlers for the Edit Contacts UI elements. (Click to see full instructions)",
        "U6 - updateRecord - Contacts - Edit event handler_2018_instruction": "Write event handlers for the Edit Contacts UI elements. (Click to see full instructions)",
        "U6 - updateRecord - Contacts - Save edited contact_instruction": "Use updateRecord to store the user's edits in the database. (Click to see full instructions)",
        "U6 - updateRecord - Contacts - Save edited contact_2018_instruction": "Use updateRecord to store the user's edits in the database. (Click to see full instructions)",
        "U6 - updateRecord - Default Block_instruction": "Use updateRecord to change the record for \"Eye of the Tiger.\" (Click to see full instructions)",
        "U6 - updateRecord - Default Block_2018_instruction": "Use updateRecord to change the record for \"Eye of the Tiger.\" (Click to see full instructions)",
        "U6 - updateRecord - Update Nonexistent Record_instruction": "Force updateRecord to fail by changing the ID of songToUpdate. (Click to see full instructions)",
        "U6 - updateRecord - Update Nonexistent Record_2018_instruction": "Force updateRecord to fail by changing the ID of songToUpdate. (Click to see full instructions)",
        "Underground Avoiding Lava_instruction": "Lava is hiding beneath some of these blocks, which you'll need to cover up before moving forward. An \"if\" command will come in handy here. Add a \"move forward\" command in the correct place to mine these blocks.",
        "Underground Avoiding Lava_2018_instruction": "Lava is hiding beneath some of these blocks, which you'll need to cover up before moving forward. An \"if\" command will come in handy here. Add a \"move forward\" command in the correct place to mine these blocks.",
        "Underground If Statements_instruction": "Now things are getting tricky. Mine 3 redstone, but don’t fall in the lava. Use an \"If\" command to place cobblestone over any lava you uncover.",
        "Underground If Statements_2018_instruction": "Now things are getting tricky. Mine 3 redstone, but don’t fall in the lava. Use an \"If\" command to place cobblestone over any lava you uncover.",
        "Underground Iron_instruction": "Walking into molten lava is a bad idea. Place cobblestone to create a bridge, then mine at least two of the iron blocks.",
        "Underground Iron_2018_instruction": "Walking into molten lava is a bad idea. Place cobblestone to create a bridge, then mine at least two of the iron blocks.",
        "Underground Mining Coal_instruction": "You’ll find the most valuable resources underground, but it can get dark. Place at least 2 torches and mine at least 2 coal.",
        "Underground Mining Coal_2018_instruction": "You’ll find the most valuable resources underground, but it can get dark. Place at least 2 torches and mine at least 2 coal.",
        "Unicorn Tag_instruction": "Take a look at this project.  Do you see how it was made?",
        "Valentine_artist2_01_instruction": "Program the artist to draw some grass for the Love Bug.",
        "Valentine_artist_01_instruction": "Help the artist finish his llama heart.",
        "Valentine_playlab_01_instruction": "Program Kiki (Actor 1) to move left and right when the left and right arrows are pressed. When Kiki is clicked, she should throw hearts towards her friends. ",
        "Vigenere_instruction": "Test",
        "Virtual Pet 1 Predict_instruction": "What do you think will happen when you click on the alien?  ",
        "Virtual Pet 1 Predict_simple_instruction": "What do you think will happen when you click on the alien?  ",
        "Virtual Pet 1_instruction": "What do you think will happen if you press \"Run\" and then click on her?",
        "Virtual Pet 1_simple_instruction": "What do you think will happen if you press \"Run\" and then click on her?",
        "Virtual Pet 2 - Validated (Ram)_instruction": "Create an **event** so that when Geraldine touches the puddle, her color changes to brown.",
        "Virtual Pet 2 - Validated_instruction": "Create an **event** so that when Geraldine touches the puddle, her color changes to brown.",
        "Virtual Pet 2_instruction": "Create an **event** so that when Geraldine touches the puddle, her color changes to brown.",
        "Virtual Pet 2_simple_instruction": "Create an **event** so that when Geraldine touches the dirt, her color changes to brown.",
        "Virtual Pet 2_simple_clone_instruction": "Create an **event** so that when Geraldine touches the dirt, her color changes to brown.",
        "Virtual Pet 3_instruction": "Add a new soap sprite to the screen.  Can you make it so that when the giraffe and the soap touch, the giraffe goes back to its normal color?",
        "Virtual Pet 3_simple_instruction": "Add a new soap sprite to the screen.  Can you make it so that when the giraffe and the soap touch, the giraffe goes back to its normal color?",
        "Virtual Pet 4_instruction": "Add a behavior to your soap to make it draggable, then drag it over to clean the giraffe!",
        "Virtual Pet 4_simple_instruction": "Add a behavior to your soap to make it draggable, then drag it over to clean the giraffe!",
        "Virtual Pet 5 - Validated_instruction": "Add actions to each event so that when the giraffe collides with each sprite, it shrinks by 5.",
        "Virtual Pet 5_instruction": "Add actions to each event so that when the giraffe collides with each sprite, it shrinks by 5.",
        "Virtual Pet 5_simple_instruction": "Add actions to each event so that when the giraffe collides with each sprite, it shrinks by 5.",
        "Virtual Pet 6_instruction": "Add an apple that returns the giraffe back to regular size when they touch.",
        "Virtual Pet 6_simple_instruction": "Add an apple that returns the giraffe back to regular size when they touch.",
        "Virtual Pet Freeplay_instruction": "Freeplay: What more can you make your giraffe do? ",
        "Virtual Pet Freeplay_simple_instruction": "Freeplay: What more can you make your giraffe do? ",
        "WhileAdventure_instruction": "Our adventurer wants to collect coins. Can you help her grab as many as she can using only one remove 1 block?",
        "Widget: Black and White Pixelation_instruction": "Now make your own image! We've started you off with a 10x10 canvas but you can make it whatever size you want. Happy pixeling!",
        "Widget: Black and White Pixelation_2018_instruction": "Now make your own image! We've started you off with a 10x10 canvas but you can make it whatever size you want. Happy pixeling!",
        "Widget: Color Pixelation_instruction": "Requirements: The icon must be 16x16 pixels. You must use the Pixelation Widget to encode the bits of color information. The image must be encoded with at least 12 bits per pixel.",
        "Widget: Color Pixelation_2018_instruction": "Requirements: The icon must be 16x16 pixels. You must use the Pixelation Widget to encode the bits of color information. The image must be encoded with at least 12 bits per pixel.",
        "Widget: Text Compression_instruction": "Look for patterns (repeated words or phrases) in the text. Enter the patterns you see into the dictionary on the right. As you type entries into the dictionary, the symbol for the entry is inserted into the text in place of the pattern.",
        "Widget: Text Compression_2018_instruction": "Look for patterns (repeated words or phrases) in the text. Enter the patterns you see into the dictionary on the right. As you type entries into the dictionary, the symbol for the entry is inserted into the text in place of the pattern.",
        "XML Scratchpad_instruction": "Using this test level to grab xml for unit tests",
        "aE1_instruction": "You chose to make a square napkin! \n\nTo finish, draw a square with 20 pixel sides. ",
        "aE2_instruction": "If you place your square loop inside another loop, we call that a nested loop. What do you need to add as an outer loop to make sure all 14 napkins line up next to each other?",
        "aE3_instruction": "We've got to have a tablecloth!  \n\nTake your row of 14 napkins and sew 14 of those together with another **outer loop** to make a cover for our table.",
        "aE3alternate_instruction": "Alternate",
        "aE3alternateB_instruction": "Alternate",
        "aE4_instruction": "Alternate",
        "aE5_instruction": "Example of puzzle using highest difficulty level shape.",
        "aE6_instruction": "How many times do you need to loop this to draw half  of a circle? ",
        "aE7_instruction": "If you create another loop like this one, but turn left instead of right, what happens? \n\nCan you repeat all of that to draw this wave?",
        "aE8_instruction": "Now let's loop that whole thing four times to create this picture frame. Watch out for the corners - you can't just turn 90 degrees! \n\nIf looping a 3 degree turn 60 times makes a half circle, which of these blocks of code will make an additional quarter circle for the corners?",
        "aEfreeplay_instruction": "Free Play!",
        "allHallows2017_instruction": "Trap the Code.org employees in the crayon box by drawing a square with 320 pixel sides!",
        "allthethings data blocks test_instruction": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
        "allthethings design mode elements_instruction": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
        "allthethings level dataTables_instruction": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
        "allthethings_U3 - Simple Drawing - Rectangle Width and Height_instruction": "Do This",
        "allthethings_moviebot_instruction": "This level cloned from \"U3 Digital Assistant Target\"",
        "allthethings_template_backed1_instruction": "Backed by a template #1. Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script). ",
        "allthethings_template_backed2_instruction": "Backed by a template #2. Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
        "allthethings_ttscsp_instruction": "Debug the program by fixing the logical error within the program. (Click to see full instructions)",
        "artistDebugVideo1_instruction": "Use the `repeat` loop to add waves to the water.",
        "artistFunctionsVideo1_instruction": "Follow the instructions to make your own function.",
        "artistLoopsK1_instruction": "This is a new type of puzzle called \"Artist\". Play with the level and draw something fun.",
        "artistLoopsK2_instruction": "Now, use a `repeat` loop to draw this line five times!",
        "artistLoopsK2gradek_artist_loops3_instruction": "Now, use a `repeat` loop to draw this line five times!",
        "artistLoopsK3_instruction": "Draw a line eight steps long. This will become the land for our kingdom!",
        "artistLoopsK4_instruction": "Now we need a castle with a draw bridge.  Fix the code so that the bridge lays straight instead of falling down.",
        "artistLoopsK5_instruction": "Now we need to fix the top of the castle. Can you loop the code three times?",
        "artistLoopsK6_instruction": "Someone is stuck in the tower!  Fix the stairs to set them free. ",
        "artistLoopsK7_instruction": "This tower is lovely, what is downstairs? Build another staircase to find out! ",
        "artistLoopsK8_instruction": "Wow! There's a garden over there!  Help fix these stairs so I can get to it.",
        "artistLoopsK9_instruction": "**Challenge:**  Lovely! Let's take a walk around the garden.",
        "artistLoopsKA_instruction": "These stones are in the wrong place.  Help me move them so I don't fall in!",
        "artistLoopsKB_instruction": "Look!  It's a theater.  Help me set up the chairs so we can all see the stage. ",
        "artistLoopsKFP_instruction": "Picture time!  Use what you have learned to draw a picture of what you think the Artist saw on stage.",
        "asteroids_instruction": "This Corgi has been a good boy! Drag this carrot to him as a special treat.",
        "beeDebugVideo1_instruction": "Use a `repeat` loop to collect all of the nectar.",
        "behavior bash mary_instruction": "Clone this level and make your own blocks!",
        "behaviors clone me 2_instruction": "Clone this level and make your own blocks!",
        "behaviors clone me Ram_instruction": "Clone this level and make your own blocks!",
        "behaviors clone me joshl_instruction": "Clone this level and make your own blocks!",
        "behaviors clone me nk_instruction": "Clone this level and make your own blocks!",
        "behaviors clone me tanya_instruction": "Clone this level and make your own blocks!",
        "behaviors clone me_instruction": "Clone this level and make your own blocks!",
        "behaviors pet test 123 copy_instruction": "When Daisy gets a carrot, she gets excited. Use the **\"when touches\"** event and the \"add behavior\" block to make Daisy do something fun when she gets the carrot.",
        "behaviors pet test 123_instruction": "When Daisy gets a carrot, she gets excited. Use the **\"when touches\"** event and the \"add behavior\" block to make Daisy do something fun when she gets the carrot.",
        "behaviors pet test 2_instruction": "When Daisy gets a carrot, she gets excited. Use the **\"when touches\"** event and the \"add behavior\" block to make Daisy do something fun when she gets the carrot.",
        "behaviors pet test 3_instruction": "**It's time to make your own virtual pet!** You can change whatever code you want to to make your own pet. Here are some ideas:\n* Can you make your pet start a new behavior when you click on it?\n* Can you make your pet run away when you drag the vacuum to it?\n* Can you add other animal friends to your pet's area? ",
        "behaviors pet test_instruction": "Last time, you practiced using \"behaviors\" to make a sprite do something forever. This time, we will use behaviors to make a virtual pet. \n\nThis dog's name is Daisy. Daisy LOVES to snack on carrots. Add the \"drag and drop\" behavior to the carrot so you can move it to her.",
        "behaviors_caley_instruction": "Clone this level and make your own blocks!",
        "ben's first level_instruction": "Clone this level and make your own blocks!",
        "birdsDebugVideo1_instruction": "Trace the path and lead me to the silly pig. Avoid TNT or feathers will fly!",
        "bounce_1_instruction": "Attach a block to the \"when left arrow\" block and press \"Run\". Move the paddle using the left arrow to reach the finish target.",
        "bounce_10_instruction": "There is now a goal at the top. Attach the \"score point\" and \"score opponent point\" blocks to the \"when ball in goal\" and \"when ball misses paddle\" blocks to make a game. See how many points you can score before your opponent scores twice.",
        "bounce_10_2018_instruction": "There is now a goal at the top. Attach the \"score point\" and \"score opponent point\" blocks to the \"when ball in goal\" and \"when ball misses paddle\" blocks to make a game. See how many points you can score before your opponent scores twice.",
        "bounce_10_basketball_instruction": "Now there is a goal at the top! Attach the \"score point\" and \"score opponent point\" blocks to the \"when ball in goal\" and \"when ball misses hand\" blocks to make a game. See how many points you can score before your opponent scores twice.",
        "bounce_10_sports_instruction": "Now there is a goal at the top! Attach the \"score point\" and \"score opponent point\" blocks to the \"when ball in goal\" and \"when ball misses hand\" blocks to make a game. See how many points you can score before your opponent scores twice!",
        "bounce_11_instruction": "You can now attach blocks to the \"when run\" block. You have to attach the new \"launch new ball\" block in more than one place. Also, try changing the scene or the speed of the paddle and the ball and see how many points you can score before your opponent scores twice.",
        "bounce_11_2018_instruction": "You can now attach blocks to the \"when run\" block. You have to attach the new \"launch new ball\" block in more than one place. Also, try changing the scene or the speed of the paddle and the ball and see how many points you can score before your opponent scores twice.",
        "bounce_11_basketball_instruction": "You can now attach blocks to the \"when run\" block. You have to attach the new \"throw new ball\" block in more than one place. Also, try changing the scene or the speed of the hand and the ball and see how many points you can score before your opponent scores twice!",
        "bounce_11_sports_instruction": "You can now attach blocks to the \"when run\" block. You have to attach the new \"throw new ball\" block in more than one place. Also, try changing the scene or the speed of the hand and the ball and see how many points you can score before your opponent scores twice!",
        "bounce_12_instruction": "Create your own Bounce game. You can change all the visuals and the rules. When you're done, click Finish to let friends try your game on their phones.",
        "bounce_12_2018_instruction": "Create your own Bounce game. You can change all the visuals and the rules. When you're done, click Finish to let friends try your game on their phones.",
        "bounce_12_basketball_instruction": "Create your own Basketball game. You can change all the rules. When you're done, click Finish to let friends try your game on their phones.",
        "bounce_12_sports_instruction": "Create your own game! You're in charge here: you can change all the rules, mix and match sports, get creative! When you're done, click Finish to let friends try your game on their phones.",
        "bounce_1_2018_instruction": "Attach a block to the \"when left arrow\" block and press \"Run\". Move the paddle using the left arrow to reach the finish target.",
        "bounce_1_basketball_instruction": "Attach a block to the \"when left arrow\" block and press \"Run\". Move the hand using the left arrow to reach the finish target.",
        "bounce_1_sports_instruction": "Get to the flag! Attach a block to the \"when left arrow\" block and press \"Run\" to move the player to the flag.",
        "bounce_2_instruction": "Attach a block to the \"when right arrow\" and \"when left arrow\" blocks. Move the paddle to reach both finish targets.",
        "bounce_2_2018_instruction": "Attach a block to the \"when right arrow\" and \"when left arrow\" blocks. Move the paddle to reach both finish targets.",
        "bounce_2_basketball_instruction": "Attach a block to the \"when right arrow\" and \"when left arrow\" blocks. Move the hand to reach both finish targets.",
        "bounce_2_sports_instruction": "There are two flags now! Attach a block to the \"when left arrow\" and \"when right arrow\" blocks to make your player move in two directions.",
        "bounce_3_instruction": "Now try something similar with the \"when up arrow\" block. Move the paddle to the finish target at the top.",
        "bounce_3_2018_instruction": "Now try something similar with the \"when up arrow\" block. Move the paddle to the finish target at the top.",
        "bounce_4_instruction": "This time you need to add four blocks. Move the paddle to all four finish targets to complete this puzzle.",
        "bounce_4_2018_instruction": "This time you need to add four blocks. Move the paddle to all four finish targets to complete this puzzle.",
        "bounce_5_instruction": "We're going to send a ball flying down towards the paddle. Attach a block to the \"when ball hits paddle\" block to ensure the ball reaches the finish target.",
        "bounce_5_2018_instruction": "We're going to send a ball flying down towards the paddle. Attach a block to the \"when ball hits paddle\" block to ensure the ball reaches the finish target.",
        "bounce_5_basketball_instruction": "We're going to send a ball flying down towards the hand. Attach a block to the \"when ball hits hand\" block to ensure the ball reaches the flag.",
        "bounce_5_sports_instruction": "The hockey puck is going to fly down toward the player! Attach a block to the \"when ball hits player\" block to hit the flag.",
        "bounce_6_instruction": "Now the finish target is on the top. You need to attach blocks to both of the \"when ball hits\" blocks to solve this puzzle.",
        "bounce_6_2018_instruction": "Now the finish target is on the top. You need to attach blocks to both of the \"when ball hits\" blocks to solve this puzzle.",
        "bounce_6_basketball_instruction": "Now the flag is on the top. You need to attach blocks to both of the \"when ball hits\" blocks to solve this puzzle.",
        "bounce_6_sports_instruction": "Now the flag is on the top. You need to attach blocks to both of the \"when ball hits\" blocks to solve this puzzle.",
        "bounce_7_instruction": "Attach blocks to each of the \"when\" blocks. Bounce the ball until it hits the finish target.",
        "bounce_7_2018_instruction": "Attach blocks to each of the \"when\" blocks. Bounce the ball until it hits the finish target.",
        "bounce_7_basketball_instruction": "Attach blocks to each of the \"when\" blocks. Bounce the ball until it hits the flag.",
        "bounce_7_sports_instruction": "Attach blocks to each of the \"when\" blocks. Bounce the ball until it hits the flag.",
        "brendan behaviors clone_instruction": "Clone this level and make your own blocks!",
        "brendan hackathon level_instruction": "these are the instructions for my level.  you should do this level and have a good time.",
        "clone me mary_instruction": "Clone this level and make your own blocks!",
        "collector example_instruction": "Put these blocks in order to collect all of the gold and solve the puzzle.",
        "collectorDebugVideo2_instruction": "Put these blocks in order to collect all of the gold and solve the puzzle.",
        "collectorSkinVideo1_instruction": "Collect all four piles to pass this level.",
        "collectorSkinVideo2_instruction": "Collect one pile of gold to pass this level.",
        "comment_intro_maze_2018_instruction": "Use the new `comment` block to leave yourself quick reminders.",
        "conditionals_forvideo_harvester_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "conditionals_forvideo_playlab_instruction": "Score as many points as you can!",
        "course1_artist_loops_challenge1_instruction": "You can use a loop to draw many lines in a row.\n\nCan you draw a house? Make it look just the way you like it!  Try looking for patterns that repeat!",
        "course1_artist_loops_challenge2_instruction": "Let's play a game! Draw as many X's as you can! Can you get 3 in a row?",
        "course1_artist_loops_challenge3_instruction": "\"Can you help me make two bird houses?\"",
        "course1_artist_loops_challenge4_instruction": "\"It's time to toss the dice! Can you help me draw these?\"",
        "course1_collector_loops_challenge1_instruction": "\"Can you help me spot some bugs? I know which way I want to go, but I'm not sure how many steps to take.\"",
        "course1_collector_loops_challenge2_instruction": "This time you can only use one of each arrow block. Get all of the treasure! ",
        "course1_collector_loops_challenge3_instruction": "This time you can only use one of each arrow block. Get all of the treasure! ",
        "course1_collector_loops_challenge4_instruction": "Let's get the treasure! Help me across each row then come back to start the next row. Can you find a pattern?",
        "course1_maze_debugging_challenge1_instruction": "Debug this level. Remove the extra blocks and add the missing blocks. Get the bird to the pig!",
        "course1_maze_debugging_challenge2_instruction": "Debug this level. These are the right blocks, but they're in the wrong order!",
        "course1_maze_seq_challenge1_instruction": "\"Trace the path and lead me to the silly pig. Avoid TNT or the feathers will fly!\"",
        "course1_maze_seq_challenge2_instruction": "You can only move up to four times in each direction. Can you find a path before you run out of blocks?",
        "course1_playlab_events_challenge1_instruction": "\"Where are my friends hiding? Can you write code to show the rest of my friends?\"",
        "course1_playlab_events_challenge2_instruction": "\"Let's have a party! Give my friends something to do when you click or tap them.\"",
        "course2_artist_nestedLoops_challenge1_instruction": "Can you figure out how to make a picture like this?",
        "course2_artist_nestedLoops_challenge2_instruction": "Can you figure out how to make a picture like this?",
        "course2_artist_prog_challenge1_instruction": "Draw rooms for each of the animals. There are many different ways to solve this puzzle, so have some fun. The shortest possible solution is 6 blocks, but use as many as you like!",
        "course2_artist_prog_challenge2_instruction": "*Help me paint the yellow lines on this road!*",
        "course2_bee_conditionals_challenge1_instruction": "Collect all of the nectar or make all the honey.",
        "course2_bee_conditionals_challenge2_instruction": "Collect all of the nectar or make all the honey.",
        "course2_collector_loops_challenge2_instruction": "Get all of the treasure!",
        "course2_collector_prog_challenge1_instruction": "Look carefully! Can you collect all *10* pieces of treasure?",
        "course2_collector_prog_challenge2_instruction": "There are 20 pieces of treasure to be found. Collect at least half to finish this challenge!",
        "course2_harvester_loops_challenge1_instruction": "Collect all of the corn.",
        "course2_harvester_loops_challenge2_instruction": "Collect all of the lettuce. Avoid the trees and fields!",
        "course2_maze_loops_challenge1_instruction": "Now Scrat wants to try using loops to find his acorn! ",
        "course2_maze_programming_challenge1_instruction": "*\"The pig is hiding! Can you help me find a way around?\"*",
        "course2_maze_programming_challenge2_instruction": "Sometimes there is more than one way to solve the same problem. Sometimes it's faster to go backwards than it is to go forwards!",
        "course2_maze_seq_challenge1_instruction": "Trace the path and lead me to the silly pig. Avoid TNT or the feathers will fly!",
        "course2_maze_seq_challenge2_instruction": "You can only move up to four times in each direction. Can you find a path before you run out of blocks?",
        "course2_playlab_stage17_1_instruction": "Can you make Jorge the Dog (actor 1) say \"Hi\"?",
        "course2_playlab_stage17_10_instruction": "Add blocks to the `when run` event to change the background and the speed of Waddles.\n\nPlay the game and move Waddles with the arrows until you score.",
        "course2_playlab_stage17_11_instruction": "Create your own story. When you're done, click Finish to let friends try your story on their phones.",
        "course2_playlab_stage17_2_instruction": "Can you make Jorge (actor 1) say something, then have Olive the Cat (actor 2) say something?",
        "course2_playlab_stage17_3_instruction": "Can you write a program to make Jorge (actor 1) move toward Olive the Cat?",
        "course2_playlab_stage17_4_instruction": "Can you write a program that makes Jorge (actor 1) move to Olive the Cat, and have Olive say \"Hello\" when Jorge reaches her?",
        "course2_playlab_stage17_5_instruction": "Can you write a program to make Octavia say \"Hi\" when she is clicked?",
        "course2_playlab_stage17_6_instruction": "Now, write a program to make Waddles move around using the up / down / left /right keys to hit all of the targets!",
        "course2_playlab_stage17_7_instruction": "The `repeat forever` block allows you to run code over and over forever. Can you attach blocks to move Chomp the Dino (actor 2) up and down forever?",
        "course2_playlab_stage17_8_instruction": "Can you have Waddles (actor 1) say \"Ouch!\" and play a \"hit\" sound if he runs into Chomp? \n\nWhen you're done, play the game to make that happen.",
        "course2_playlab_stage17_9_instruction": "Can you add a block to score a point when Waddles runs into Octavia (actor 3)? \nPlay the game and move Waddles with the arrows until you score!",
        "course3_artist_concept_challenge1_instruction": "Feel free to use trial and error. You are not expected to get the image perfect the first time.   Want to see more hints?  Click here!",
        "course3_artist_functions_challenge1_instruction": "Once you define a function, you can call it over and over again - whenever and wherever you want! Try this code to see how it works, then change it to make your own impressive design!",
        "course3_artist_functions_challenge2_instruction": "Try this code to see how it works, then make the program your own!",
        "course3_bee_debugging_challenge1_instruction": "Watch how the bee gets the nectar. Can you use the same kind of pattern to help the bee make all of the honey?",
        "course3_bee_functions_challenge1_instruction": "You are on your own for this challenge. This could \"bee\" harder than it looks!",
        "course3_bee_functions_challenge2_instruction": "You are on your own for this challenge!",
        "course3_bee_functions_challenge3_instruction": "Create a new function to collect all the nectar and honey while there is a path ahead. Use it to complete the puzzle!",
        "course3_bee_functions_challenge4_instruction": "Use everything you have learned to complete this puzzle!",
        "course3_collector_debugging_challenge2_instruction": "Are you an expert of nested loops? Use what you have learned so far to collect all of the treasure!",
        "course3_farmer_condLoops_challenge1_instruction": "Turn right at the pumpkins. Collect everything to complete the level. Each hidden crop has only one corn or lettuce.",
        "course3_farmer_condLoops_challenge2_instruction": "Collect everything to complete the level.",
        "course3_farmer_until_challenge2_instruction": "Use If/Else blocks to follow the curvy path. At each corner, use the `remove 1` command in a loop to clear the piles.",
        "course3_maze_debugging_challenge1_instruction": "*\"Am I just going around in circles?\"*",
        "course3_maze_debugging_challenge2_instruction": "*\"If I turn too often, I might get dizzy! Help me reach the acorn with only four `turn` commands.\"*",
        "course3_maze_until_challenge1_instruction": "No hints, just challenge. Get the zombie to the sunflower.",
        "course3_playLab_challenge1_instruction": "Something should happen when you get enough points or when you run out of points. Add some code to the `win game` and `lose game` functions to make the game work the way it should. \nClick the hints for ideas!",
        "course3_playlab_challenge2_instruction": "Can you figure out how this \"Fortune Teller\" app works? Click `MORE` to see your challenges.",
        "course3_playlab_stage16_1_instruction": "Can you make this dog say \"hello world\"?",
        "course3_playlab_stage16_2_instruction": "Can you make the dog say something and then have the cat say something afterwards?",
        "course3_playlab_stage16_3_instruction": "Can you write a program to make this dog move to the cat?",
        "course3_playlab_stage16_4_instruction": "Can you write a program that makes the dog move to the cat, and have the cat say \"hello\" when the dog reaches him?",
        "course3_playlab_stage16_5_instruction": "Can you add a block to make the octopus happy?",
        "course3_playlab_stage16_6_instruction": "Create your own story. When you're done, click Finish to let friends try your story on their phones.",
        "course3_playlab_stage17_1_instruction": "Can you write a program to make the octopus say \"hello\" when it is clicked?",
        "course3_playlab_stage17_2_instruction": "Can you write a program to make Waddles move around using the up / down / left /right keys to hit all of the targets?",
        "course3_playlab_stage17_3_instruction": "The \"repeat forever\" block allows you to run code continuously. Can you attach blocks to move this dinosaur up and down repeatedly?",
        "course3_playlab_stage17_4_instruction": "Can you have Waddles say \"Ouch!\" and play a \"hit\" sound if he runs into the dinosaur, and then move him with the arrows to make that happen?",
        "course3_playlab_stage17_5_instruction": "Can you add a block to score a point when Waddles runs into the octopus, and then move him with the arrows until you score?",
        "course3_playlab_stage17_6_instruction": "Can you add blocks to change the background and the speed of Waddles, and then move him with the arrows until you score?",
        "course3_playlab_stage17_7_instruction": "Create your own story. When you're done, click Finish to let friends try your story on their phones.",
        "course4_artist_binary_challenge1_instruction": "You can only use each binary value (0 or 1) once each in this puzzle. Try using nested loops to complete this drawing.",
        "course4_artist_binary_challenge2_instruction": "Are you persistent enough to restore this logo back to normal?",
        "course4_artist_concept_challenge2_instruction": "Create five pinwheel designs using the code below.",
        "course4_artist_functions_challenge2_instruction": "Try this code to see how it works, then make the program your own!",
        "course4_artist_fwp_challenge1_instruction": "Try running this program, and make changes to see what happens. Can you figure out how it works? (Or delete it and replace it with something totally different)",
        "course4_artist_variables_challenge1_instruction": "You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?",
        "course4_artist_variables_challenge2_instruction": "You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?",
        "course4_bee_for_challenge1_instruction": "Use this for loop to collect all of the nectar. There are a few actions that you will want to repeat 'counter' times.",
        "course4_bee_fwp_challenge1_instruction": "Use one `for loop` in a function to collect all of the corn. The same `for loop` can count to different maximum values by using the `length` parameter.",
        "course4_bee_fwp_challenge2_instruction": "Use one `for loop` in a function to collect all of the vegetables in the row. Make the `for loop` can count to different maximum values by using the `length` parameter. Make your program as short as possible by using a second `for loop` outside the function.",
        "course4_collector_nested_loops_challenge2_instruction": "Help the collector reach at least two piles of treasure using only the blocks in your toolbox. It is possible to collect all 4.",
        "course4_harvester_nested_loops_challenge1_instruction": "\"I need some help on the farm! Help me harvest this corn using only the blocks in your toolbox.\"",
        "course4_playlab_variables_challenge1_instruction": "Use these blocks to make the actors share a knock-knock joke. Change the setup and punchline to tell your own joke!",
        "course4_playlab_variables_challenge3_instruction": "Can you figure out how this \"Fortune Teller\" app works? Click `MORE` to see your challenges.",
        "courseA_artist_loops1_instruction": "This is a new type of puzzle called \"Artist\". Play with the level and draw something fun.",
        "courseA_artist_loops10_instruction": "Help me put down stones so I don't fall in!",
        "courseA_artist_loops10_2018_instruction": "Help me put down stones so I don't fall in!",
        "courseA_artist_loops11_instruction": "Help me build steps to watch the ship sail away.",
        "courseA_artist_loops11_2018_instruction": "Help me build steps to watch the ship sail away.",
        "courseA_artist_loops12_instruction": "The artist saw something funny in the distance.  Draw what you think he saw.",
        "courseA_artist_loops12_2018_instruction": "The artist saw something funny in the distance.  Draw what you think he saw.",
        "courseA_artist_loops1_2018_instruction": "This is a new type of puzzle called \"Artist\". Play with the level and draw something fun.",
        "courseA_artist_loops2_instruction": "Help the artist draw this line two times forward.",
        "courseA_artist_loops2_2018_instruction": "Help the artist draw this line two times forward.",
        "courseA_artist_loops3_instruction": "Draw a line forward five times.",
        "courseA_artist_loops3_2018_instruction": "Draw a line forward five times.",
        "courseA_artist_loops4_instruction": "Now, use a `repeat` loop to draw this line five times!",
        "courseA_artist_loops4_2018_instruction": "Now, use a `repeat` loop to draw this line five times!",
        "courseA_artist_loops5_instruction": "Draw a line seven steps long. This will become our horizon.",
        "courseA_artist_loops5_2018_instruction": "Draw a line seven steps long. This will become our horizon.",
        "courseA_artist_loops6_instruction": "Let's put a nice hill in the back.",
        "courseA_artist_loops6_2018_instruction": "Let's put a nice hill in the back.",
        "courseA_artist_loops7_instruction": "Use the `repeat` loop to add waves to the water.",
        "courseA_artist_loops7_2018_instruction": "Use the `repeat` loop to add waves to the water.",
        "courseA_artist_loops7_forVideo_instruction": "Use the `repeat` loop to add waves to the water.",
        "courseA_artist_loops8_instruction": "We need a ladder up to the boat.",
        "courseA_artist_loops8_2018_instruction": "We need a ladder up to the boat.",
        "courseA_artist_loops9_instruction": "Challenge: Fix the stairs.",
        "courseA_artist_loops9_2018_instruction": "Challenge: Fix the stairs.",
        "courseA_artist_loops_challenge1_instruction": "Can you draw a house? Make it look just the way you like it!",
        "courseA_artist_loops_challenge1_2018_instruction": "Can you draw a house? Make it look just the way you like it!",
        "courseA_artist_loops_challenge2_instruction": "\"Can you help me make two bird houses?\"",
        "courseA_artist_loops_challenge2a_instruction": "*\"Help me get these three tents set up!\"*",
        "courseA_artist_loops_challenge2a_2018_instruction": "*\"Help me get these three tents set up!\"*",
        "courseA_artist_loops_challenge3_instruction": "Let's play a game! Draw as many X's as you can! Can you get 3 in a row?",
        "courseA_bee_seq1_instruction": "Play with these blocks to help the bee get *one* nectar.",
        "courseA_bee_seq10_instruction": "Try it by yourself! Get all the nectar.",
        "courseA_bee_seq11_instruction": "Get all the nectar.",
        "courseA_bee_seq12_instruction": "Play with these blocks to help the bee get *one* nectar.",
        "courseA_bee_seq13_instruction": "Use three `Move West` blocks and one `Get Nectar` block.",
        "courseA_bee_seq14_instruction": "Use three `Move North` blocks and one `Get Nectar` block.",
        "courseA_bee_seq2_instruction": "Help the bee get the nectar!",
        "courseA_bee_seq3_instruction": "Find the bug and fix it!",
        "courseA_bee_seq4_instruction": "Try it yourself!",
        "courseA_bee_seq5_instruction": "Try it yourself!",
        "courseA_bee_seq6_instruction": "Now the bee needs to get nectar from two flowers!",
        "courseA_bee_seq7_instruction": "Add two blocks to finish this puzzle!",
        "courseA_bee_seq8_instruction": "Make sure to get nectar from every flower!",
        "courseA_bee_seq9_instruction": "Make sure to get nectar from every flower!",
        "courseA_collector_loops1_instruction": "Move Laurel around and get as much treasure as you can!",
        "courseA_collector_loops10_instruction": "Help Laurel get all of the treasure along this path.",
        "courseA_collector_loops10_2018_instruction": "Help Laurel get all of the treasure along this path.",
        "courseA_collector_loops11_instruction": "Help Laurel get all of the treasure from this cave.",
        "courseA_collector_loops11_2018_instruction": "Help Laurel get all of the treasure from this cave.",
        "courseA_collector_loops12_instruction": "*\"Eureka!  Get as much treasure as you can!\"*",
        "courseA_collector_loops12_2018_instruction": "*\"Eureka!  Get as much treasure as you can!\"*",
        "courseA_collector_loops1_2018_instruction": "Move Laurel around and get as much treasure as you can!",
        "courseA_collector_loops2_instruction": "Get all three piles to pass this level.",
        "courseA_collector_loops2_2018_instruction": "Get all three piles to pass this level.",
        "courseA_collector_loops4_instruction": "Fix Laurel's path to get all of this treasure.",
        "courseA_collector_loops4_2018_instruction": "Fix Laurel's path to get all of this treasure.",
        "courseA_collector_loops5_instruction": "Use what you learned to get all of the treasure.",
        "courseA_collector_loops5_2018_instruction": "Use what you learned to get all of the treasure.",
        "courseA_collector_loops6_instruction": "Add blocks to this code to get all of the treasure.",
        "courseA_collector_loops6_2018_instruction": "Add blocks to this code to get all of the treasure.",
        "courseA_collector_loops7_instruction": "What should you add to this code to get all of the treasure?",
        "courseA_collector_loops7_2018_instruction": "What should you add to this code to get all of the treasure?",
        "courseA_collector_loops8_instruction": "Write code to get all of this treasure.",
        "courseA_collector_loops8_2018_instruction": "Write code to get all of this treasure.",
        "courseA_collector_loops9_instruction": "**Challenge:** The treasure goes all the way up these stairs!  Write the code to help Laurel get it all.",
        "courseA_collector_loops9_2018_instruction": "**Challenge:** The treasure goes all the way up these stairs!  Write the code to help Laurel get it all.",
        "courseA_collector_loops_challenge1_instruction": "*\"Can you help me spot some bugs?\"*",
        "courseA_collector_loops_challenge1_2018_instruction": "*\"Can you help me spot some bugs?\"*",
        "courseA_collector_loops_challenge2_instruction": "Get all of the treasure! ",
        "courseA_collector_loops_challenge2kp_instruction": "Collect at least **3** pieces of treasure to pass this level.",
        "courseA_collector_loops_challenge2kp_2018_instruction": "Collect at least **3** pieces of treasure to pass this level.",
        "courseA_collector_preLoops1_instruction": "This is Laurel the Adventurer! \n\nPress \"Run\" to see her walk up to the treasure and grab it.",
        "courseA_collector_preLoops2_instruction": "Great!  Now you get to add code yourself!  \n\nSnap a `get treasure` block to the bottom of the program and click \"Run\".",
        "courseA_collector_preLoops3_instruction": "Snap two `E -->` blocks and one `get treasure` block to the bottom of the program, then click \"Run\".",
        "courseA_collector_preLoops4_instruction": "Can you figure out how to solve this puzzle?",
        "courseA_collector_preLoops5_instruction": "Get 1 of these 2 gems to solve this puzzle.",
        "courseA_collector_preLoops6_instruction": "Get both pieces of treasure to solve this puzzle.",
        "courseA_collector_preLoops7_instruction": "Get all three piles to pass this level.",
        "courseA_forVideoTest_artist_instruction": "Use the `repeat` loop to add waves to the water.",
        "courseA_harvester_forVideo_instruction": "Can you pick all the corn using only **one** move block?",
        "courseA_harvester_loops1_instruction": "Help the harvester pick all the corn!",
        "courseA_harvester_loops10_instruction": "Help the harvester pick all five ears of corn!",
        "courseA_harvester_loops11_instruction": "Try one more on your own! ",
        "courseA_harvester_loops2_instruction": "Make sure to pick all the corn!",
        "courseA_harvester_loops3_instruction": "Can you pick all the corn using only **one** move block?",
        "courseA_harvester_loops4_instruction": "Can you help the harvester find the bug in her code?",
        "courseA_harvester_loops5_instruction": "Try it yourself! Can you pick the corn at the end too?",
        "courseA_harvester_loops5a_instruction": "Look at all this corn! Can you pick it all by yourself?",
        "courseA_harvester_loops5b_instruction": "Can you change your code to make the harvester pick all the corn?",
        "courseA_harvester_loops6_instruction": "You will need **one** `Move South` block and **one** `Move West` block.",
        "courseA_harvester_loops7_instruction": "Try it on your own! ",
        "courseA_harvester_loops8_instruction": "This is the same puzzle, but now you have to repeat **three** times!",
        "courseA_harvester_loops9_instruction": "Can you figure out how to pick all the corn?",
        "courseA_harvester_seq1_instruction": "Play with these blocks to help the harvester pick the piece of corn.",
        "courseA_harvester_seq10_instruction": "Make sure to pick all the corn!",
        "courseA_harvester_seq11_instruction": "Try it by yourself! Pick all the corn.",
        "courseA_harvester_seq12_instruction": "Pick all the corn.",
        "courseA_harvester_seq13_instruction": "Play with these blocks to help the harvester pick corn.",
        "courseA_harvester_seq2_instruction": "Use three `move west` blocks and one `pick corn` block to solve this puzzle.",
        "courseA_harvester_seq3_instruction": "Use three `Move North` blocks and one `Pick Corn` block.",
        "courseA_harvester_seq4_instruction": "Add one block to help the harvester pick the corn.",
        "courseA_harvester_seq5_instruction": "Find the bug and fix it!",
        "courseA_harvester_seq6_instruction": "Try it yourself!",
        "courseA_harvester_seq7_instruction": "Try it yourself!",
        "courseA_harvester_seq8_instruction": "Now the harvester needs to pick corn two times!",
        "courseA_harvester_seq9_instruction": "Add two blocks to finish this puzzle!",
        "courseA_maze_ramp2_2018_instruction": "Snap all blocks together to finish your code, then click \"Run\".",
        "courseA_maze_ramp2a_2018_instruction": "Snap all blocks together to finish your code, then click \"Run\".",
        "courseA_maze_ramp3_2018_instruction": "There is one extra block that is going to cause the bird to crash. Throw it away by dragging it back to the toolbox.",
        "courseA_maze_ramp3a_2018_instruction": "Add a `North` block to the bottom of the other blocks to finish this code, then click \"▶ Run\".",
        "courseA_maze_ramp3b_2018_instruction": "Add a `North` block to the bottom of the other blocks to finish this code, then click \"Run\".",
        "courseA_maze_ramp4_2018_instruction": "Avoid TNT or feathers will fly!",
        "courseA_maze_ramp4a_2018_instruction": "Can you figure out which block you need to add to the bottom of the other blocks to finish this code?",
        "courseA_maze_ramp5_2018_instruction": "Avoid the TNT.",
        "courseA_maze_ramp5a_2018_instruction": "Get the bird to the pig!",
        "courseA_maze_seq1_instruction": "Get the bird to the bad pig!",
        "courseA_maze_seq10_instruction": "Challenge: Go around the TNT to get the bird to the pig! ",
        "courseA_maze_seq10_2018_instruction": "Challenge: Avoid the TNT to get the bird to the pig! ",
        "courseA_maze_seq11_instruction": "Move one way, then another to get the bird to the pig.",
        "courseA_maze_seq11_2018_instruction": "Move one way, then another to get the bird to the pig.",
        "courseA_maze_seq12_instruction": "Get that pig! ",
        "courseA_maze_seq12_2018_instruction": "Get that pig! ",
        "courseA_maze_seq13_instruction": "Get the pig any way you can!",
        "courseA_maze_seq13_2018_instruction": "Get the pig any way you can!",
        "courseA_maze_seq1_2018_instruction": "Get the bird to the bad pig!",
        "courseA_maze_seq2_instruction": "Fix the code to get the bird to the pig.",
        "courseA_maze_seq2_2018_instruction": "Fix the code to get the bird to the pig.",
        "courseA_maze_seq3_instruction": "Fix the code to get the bird to the pig!",
        "courseA_maze_seq3_2018_instruction": "Fix the code to get the bird to the pig!",
        "courseA_maze_seq4_instruction": "REMOVE a block to get the bird to the pig!",
        "courseA_maze_seq4_2018_instruction": "REMOVE a block to get the bird to the pig!",
        "courseA_maze_seq4a_instruction": "Get the bird to the pig using the fewest possible blocks.",
        "courseA_maze_seq5_instruction": "Try this one yourself from the beginning.",
        "courseA_maze_seq5_2018_instruction": "Give this one a try.",
        "courseA_maze_seq5a_2018_instruction": "What can you add to the end of this code to get the bird to the pig?",
        "courseA_maze_seq6_instruction": "Move one way, then another to get the bird to the pig!",
        "courseA_maze_seq6_2018_instruction": "Move one way, then another to get the bird to the pig!",
        "courseA_maze_seq7_instruction": "Figure out what is missing and then add blocks to get the bird to the pig!",
        "courseA_maze_seq7_2018_instruction": "Figure out what is missing and then add blocks to get the bird to the pig!",
        "courseA_maze_seq8_instruction": "Solve this level and get the bird to the pig!",
        "courseA_maze_seq8_2018_instruction": "Solve this level and get the bird to the pig!",
        "courseA_maze_seq9_instruction": "Debug this level by adding blocks to get the bird to the pig!",
        "courseA_maze_seq9_2018_instruction": "Debug this level by adding blocks to get the bird to the pig!",
        "courseA_maze_seq_challenge1_instruction": "Something is wrong here. Help fix the code to get the bird to the pig!",
        "courseA_maze_seq_challenge1_2018_instruction": "Something is wrong here. Help fix the code to get the bird to the pig!",
        "courseA_maze_seq_challenge2_instruction": "Trace the path to lead the bird to the pig. Avoid TNT or feathers will fly!",
        "courseA_maze_seq_challenge2_2018_instruction": "Trace the path to lead the bird to the pig. Avoid TNT or feathers will fly!",
        "courseA_playLab_events1_instruction": "This is a Play Lab level.  Move blocks to the workspace and see what happens!",
        "courseA_playLab_events1_2018_instruction": "This is a Play Lab level.  Move blocks to the workspace and see what happens!",
        "courseA_playLab_events2_instruction": "Jorge the Dog wants to say \"Hi there.\"  Can you help him?",
        "courseA_playLab_events2_2018_instruction": "Jorge the Dog wants to say \"Hi there.\"  Can you help him?",
        "courseA_playLab_events3_instruction": "Connect the `move left` block to the `when left` event block that is already in the workspace.",
        "courseA_playLab_events3_2018_instruction": "Connect the `move left` block to the `when left` event block that is already in the workspace.",
        "courseA_playLab_events4_instruction": "Add blocks for moving right when the `right` button is clicked.",
        "courseA_playLab_events4_2018_instruction": "Add another event block to get Jorge to move right when the `right` button is clicked.",
        "courseA_playLab_events5_instruction": "Add events to have Jorge move up and down when the `up` and `down` buttons are pressed.",
        "courseA_playLab_events5_2018_instruction": "Add events to have Jorge move up and down when the `up` and `down` buttons are pressed.",
        "courseA_playLab_events6_instruction": "Make this more interesting by changing the background and playing a random sound when Jorge is clicked.",
        "courseA_playLab_events6_2018_instruction": "Make this more interesting by changing the background and playing a random sound when Jorge is clicked.",
        "courseA_playLab_events7_instruction": "Add anything you want to this game.  Can you make the dinosaur disappear when Jorge runs into him?",
        "courseA_playLab_events7_2018_instruction": "*Freeplay:* Add anything you want to this game.",
        "courseA_playlab_events_challenge1_instruction": "Can you write code to show the rest of my friends? The hints will help you do this project step-by-step.",
        "courseA_playlab_events_challenge1_2018_instruction": "Can you write code to show the rest of my friends? The hints will help you do this project step-by-step.",
        "courseA_playlab_events_challenge2_instruction": "Give everyone something to do when you click on them.",
        "courseA_playlab_events_challenge2_2018_instruction": "Give everyone something to do when you click on them.",
        "courseA_playlab_events_challengeClone_instruction": "Where are my friends hiding? Can you write code to show the rest of my friends?",
        "courseA_toMakeLoopsVideo_Collector_instruction": "Loops let you do whatever is inside over and over again!",
        "courseA_video_events_instruction": "Need a better playlab/events combo",
        "courseA_video_events_2018_instruction": "Need a better playlab/events combo",
        "courseB_Scrat_ramp1_2018_instruction": "For this puzzle, snap the blocks together and press \"▶ Run\"!",
        "courseB_Scrat_ramp2_2018_instruction": "Snap all blocks together to finish your code, then click \"▶ Run\".",
        "courseB_Scrat_ramp3a_2018_instruction": "Add a `North` block to the bottom of the other blocks to finish this code, then click \"▶ Run\".",
        "courseB_Scrat_ramp3b_2018_instruction": "Drag the extra block back to the toolbox to throw it away.\n\n",
        "courseB_Scrat_ramp4a_2018_instruction": "Can you figure out which block you need to add to the bottom of the other blocks to finish this code?",
        "courseB_Scrat_ramp5a_2018_instruction": "Get the bird to the pig!",
        "courseB_artist_loops1_instruction": "This is a new type of puzzle called \"Artist\". Play with the level and draw something fun.",
        "courseB_artist_loops10_instruction": "Use what you have learned to draw a picture of what you think the artist saw when he got home.",
        "courseB_artist_loops10_2018_instruction": "Use what you have learned to draw a picture of what you think the artist saw when he got home.",
        "courseB_artist_loops1_2018_instruction": "This is a new type of puzzle called \"Artist\". Play with the level and draw something fun.",
        "courseB_artist_loops2_instruction": "The Artist is trying to draw a line **6** times, but can't get it right.  Can you help?",
        "courseB_artist_loops2_2018_instruction": "The Artist is trying to draw a line **6** times, but can't get it right.  Can you help?",
        "courseB_artist_loops3_instruction": "Help the artist draw a line 7 times to make a garden wall.",
        "courseB_artist_loops3_2018_instruction": "Help the artist draw a line 7 times to make a garden wall.",
        "courseB_artist_loops4_instruction": "Now we need to get the soil ready to plant. Find the bugs in the code and help the artist prepare the ground. ",
        "courseB_artist_loops4_2018_instruction": "Now we need to get the soil ready to plant. Find the bugs in the code and help the artist prepare the ground. ",
        "courseB_artist_loops5_instruction": "Time to fix the stairs!  Repeat this pattern **5** times so the artist can reach the top of the bushes.",
        "courseB_artist_loops5_2018_instruction": "Time to fix the stairs!  Repeat this pattern **5** times so the artist can reach the top of the bushes.",
        "courseB_artist_loops6_instruction": "Climb the vine and see where it goes?",
        "courseB_artist_loops6_2018_instruction": "Climb the vine and see where it goes?",
        "courseB_artist_loops7_instruction": "**Challenge:**  It's a hidden garden! Let's walk around.",
        "courseB_artist_loops7_2018_instruction": "**Challenge:**  It's a hidden garden! Let's walk around.",
        "courseB_artist_loops8_instruction": "Time to head home. Can you fix this ladder using only one block to help the artist get down?",
        "courseB_artist_loops8_2018_instruction": "Time to head home. Can you fix this ladder using only one block to help the artist get down?",
        "courseB_artist_loops9_instruction": "Let's take the short way home, over the pond. Can you help the artist stay on the stones?",
        "courseB_artist_loops9_2018_instruction": "Let's take the short way home, over the pond. Can you help the artist stay on the stones?",
        "courseB_artist_loops_challenge1_instruction": "\"It's time to toss the dice! Can you help me draw these?\"",
        "courseB_artist_loops_challenge1_2018_instruction": "\"It's time to toss the dice! Can you help me draw these?\"",
        "courseB_artist_loops_challenge2_instruction": "Draw as many X's as you can. Can you get 3 in a row?",
        "courseB_artist_loops_challenge2_2018_instruction": "Draw as many X's as you can. Can you get 3 in a row?",
        "courseB_collector_loops1_instruction": "This is Laurel the Adventurer!  Can you move her around and get treasure?",
        "courseB_collector_loops10_instruction": "Help Laurel get all of the treasure from this cave.",
        "courseB_collector_loops10_2018_instruction": "Help Laurel get all of the treasure from this cave.",
        "courseB_collector_loops11_instruction": "Eureka!  Get as much treasure as you can!",
        "courseB_collector_loops11_2018_instruction": "Eureka!  Get as much treasure as you can!",
        "courseB_collector_loops1_2018_instruction": "Get at least one piece of treasure without mistakes to pass!",
        "courseB_collector_loops2_instruction": "Get all four piles to pass this level.",
        "courseB_collector_loops2_2018_instruction": "Get all four piles to pass this level.",
        "courseB_collector_loops3_instruction": "How can Laurel get all five piles of treasure using only one `E -->` block?",
        "courseB_collector_loops3_2018_instruction": "How can Laurel get all five piles of treasure using only one `E -->` block?",
        "courseB_collector_loops3_predict1_instruction": "How can Laurel collect all five piles of gold using only one `E -->` block?",
        "courseB_collector_loops4_instruction": "Fix Laurel's path to get all of this treasure!",
        "courseB_collector_loops4_2018_instruction": "Fix Laurel's path to get all of this treasure!",
        "courseB_collector_loops5_instruction": "Add to the code from the last puzzle to get all of the treasure. ",
        "courseB_collector_loops5_2018_instruction": "Add to the code from the last puzzle to get all of the treasure. ",
        "courseB_collector_loops6_instruction": "Figure out the code to help Laurel get all of the treasure!",
        "courseB_collector_loops6_2018_instruction": "Figure out the code to help Laurel get all of the treasure!",
        "courseB_collector_loops7_instruction": "Write the code to get all of this treasure.",
        "courseB_collector_loops7_2018_instruction": "Write the code to get all of this treasure.",
        "courseB_collector_loops8_instruction": "**Challenge:** The treasure goes all the way down these stairs!  Write the code to help Laurel get it all.",
        "courseB_collector_loops8_2018_instruction": "**Challenge:** The treasure goes all the way down these stairs!  Write the code to help Laurel get it all.",
        "courseB_collector_loops9_instruction": "*\"Help me get the treasure from this deep valley.\"*",
        "courseB_collector_loops9_2018_instruction": "*\"Help me get the treasure from this deep valley.\"*",
        "courseB_collector_loops_challenge1_instruction": "This time you have limited blocks. Get all of the treasure! ",
        "courseB_collector_loops_challenge1_2018_instruction": "This time you have limited blocks. Get all of the treasure! ",
        "courseB_collector_loops_challenge2_instruction": "Let's get the treasure! Help me across each row then come back to start the next row. Can you find a pattern?",
        "courseB_collector_loops_challenge2_2018_instruction": "Let's get the treasure! Help me across each row then come back to start the next row. Can you find a pattern?",
        "courseB_collector_loops_challenge2a_instruction": "Help Laurel get at least **5** pieces of treasure to finish this puzzle.",
        "courseB_collector_loops_challenge2a_2018_instruction": "Help Laurel get at least **5** pieces of treasure to finish this puzzle.",
        "courseB_collector_loops_challenge`_instruction": "This time you can only use one of each arrow block. Get all of the treasure! ",
        "courseB_collector_prog1_instruction": "This is Laurel the Adventurer!  Can you move her around and get gold?",
        "courseB_collector_prog2_instruction": "Four piles of gold!  Collect all four.",
        "courseB_collector_prog3_instruction": "How can Laurel collect all five piles of gold using only one `E -->` block?",
        "courseB_iceage_loops1_instruction": "Help Scrat across the ice to get to the acorn!",
        "courseB_iceage_loops10_instruction": "Help Scrat get all the way over to the acorn!",
        "courseB_iceage_loops11_instruction": "Help Scrat get to the acorn!",
        "courseB_iceage_loops11_forVideo_instruction": "Help Scrat get to the acorn!",
        "courseB_iceage_loops12_instruction": "Get to the acorn any way you can!",
        "courseB_iceage_loops2_instruction": "Use two different move blocks to get to the acorn!",
        "courseB_iceage_loops3_instruction": "Can you get to the acorn with just one `W` block?",
        "courseB_iceage_loops4_instruction": "Add one more block to get Scrat all the way to the acorn!",
        "courseB_iceage_loops5_instruction": "Can you add one more loop to get to the acorn?",
        "courseB_iceage_loops6_instruction": "Can you add a loop to get to the acorn?",
        "courseB_iceage_loops7_instruction": "Scrat really wants that acorn! ",
        "courseB_iceage_loops8_instruction": "Can you fix this code? ",
        "courseB_iceage_loops9_instruction": "The acorn is so far away! Can you use loops to help Scrat get there?",
        "courseB_maze_seq1_instruction": "Play with these blocks to see what they make the bird do! \n\nGet the bird to the pig to complete the level.",
        "courseB_maze_seq10_instruction": "Fix the bugs to get the bird to the pig.",
        "courseB_maze_seq10_2018_instruction": "Fix the bugs to get Scrat to the acorn.",
        "courseB_maze_seq11_instruction": "It's all you!  Get the bird to the pig.",
        "courseB_maze_seq11_2018_instruction": "It's all you!  Get Scrat to the acorn.",
        "courseB_maze_seq12_instruction": "Now get that pig any way you can!",
        "courseB_maze_seq12_2018_instruction": "Now get that acorn any way you can!",
        "courseB_maze_seq1_2018_instruction": "Play with these blocks to see what they make Scrat do! \n\nGet Scrat to the acorn to complete the level.",
        "courseB_maze_seq2_instruction": "*\"A bug! Fix the code to get me to the pig.\"*",
        "courseB_maze_seq2_2018_instruction": "A bug! Fix the code to get Scrat to the acorn!",
        "courseB_maze_seq3_instruction": "\"Fix the code to get me to the pig!\"",
        "courseB_maze_seq4_instruction": "Add 2 blocks to get the bird to the pig.",
        "courseB_maze_seq4_2018_instruction": "Use **2** movement blocks to get the Scrat to the acorn.",
        "courseB_maze_seq5_instruction": "Now try this puzzle from the start!",
        "courseB_maze_seq5_2018_instruction": "This puzzle is a little tricky!",
        "courseB_maze_seq6_instruction": "Move one way, then another to get the bird to the pig!",
        "courseB_maze_seq6_2018_instruction": "Move one way, then another to get Scrat to the acorn!",
        "courseB_maze_seq7_instruction": "Figure out what is missing and then add blocks to get the bird to the pig!",
        "courseB_maze_seq7_2018_instruction": "Figure out what is missing and then add blocks to get Scrat to the acorn!",
        "courseB_maze_seq8_instruction": "Your turn!  What do you need to do to get the bird to the pig?",
        "courseB_maze_seq8_2018_instruction": "Your turn!  What do you need to do to get Scrat to the acorn?",
        "courseB_maze_seq9_instruction": "Challenge: Move around the TNT to get the bird to the pig.",
        "courseB_maze_seq9_2018_instruction": "Challenge: Move around the broken ice to get Scrat to the acorn.",
        "courseB_maze_seq9_challenge1_instruction": "*Where's that pig hiding now?*",
        "courseB_maze_seqCold_instruction": "Challenge: Debug this level by adding blocks to get the bird to the pig!",
        "courseB_maze_seqOld_instruction": "Go around the TNT to get the bird to the pig! ",
        "courseB_maze_seq_challenge1_instruction": "Can you find a path before you run out of blocks?",
        "courseB_maze_seq_challenge1_2018_instruction": "Can you find a path before you run out of blocks?",
        "courseB_maze_seq_challenge2_instruction": "Debug this level. These are the right blocks, but they're in the wrong order!",
        "courseB_maze_seq_challenge2_2018_instruction": "Debug this level. These are the right blocks, but they're in the wrong order!",
        "courseB_playLab_events1_instruction": "See if you can figure out what each block does.",
        "courseB_playLab_events1_2018_instruction": "See if you can figure out what each block does.",
        "courseB_playlab_events2_instruction": "Have Daisy the Dragon say something when you click \"Run\".",
        "courseB_playlab_events2_2018_instruction": "Have Daisy the Dragon say something when you click \"Run\".",
        "courseB_playlab_events3_instruction": "Use an event to make Daisy the Dragon switch to a random mood when you click on her.",
        "courseB_playlab_events3_2018_instruction": "Use an event to make Daisy the Dragon switch to a random mood when you click on her.",
        "courseB_playlab_events4_instruction": "Knight time!  Add an event so that the knight moves toward the dragon when the left arrow is clicked.",
        "courseB_playlab_events4_2018_instruction": "Get the dragon to finish this level!",
        "courseB_playlab_events5_instruction": "Now add an event so that the knight runs away from the dragon when you press the right arrow.",
        "courseB_playlab_events5_2018_instruction": "Add an event so that the knight runs away from the dragon when you press the right arrow.",
        "courseB_playlab_events6_instruction": "Help your knight get all of the flags!\n\nTo do this, you'll need to add events to help the knight move up, down, left, and right.",
        "courseB_playlab_events6_2018_instruction": "Help your knight get all of the flags!\n\nTo do this, you'll need to add events to help the knight move up, down, left, and right.",
        "courseB_playlab_events7_instruction": "Make this game fun by setting the knight to vanish when he runs into the dragon on his way to get the flags!  Play a sound when they collide to make it feel more real.",
        "courseB_playlab_events8_instruction": "Use your imagination. What can you do to make this game more fun?",
        "courseB_playlab_eventsFP_instruction": "Use your imagination. What can you do to make this game more fun?",
        "courseB_playlab_eventsFP_2018_instruction": "**Free play:** Use your imagination. What can you do to make this game more fun?",
        "courseB_playlab_eventsToolbox_instruction": "Finish by playing a sound and making the knight vanish when he runs into the dragon!",
        "courseB_playlab_events_challenge1_instruction": "Make the animals move down when you press ▼. ",
        "courseB_playlab_events_challenge1_2018_instruction": "Make the animals move down when you press ▼. ",
        "courseB_playlab_events_challenge2_instruction": "Make the animals disappear when you click on them.",
        "courseB_playlab_events_challenge2_2018_instruction": "Make the animals disappear when you click on them.",
        "courseB_playlab_events_challenge2_embed_instruction": "Here is your finished game!",
        "courseB_playlab_events_challenge2_template_instruction": "Let's make the animals disappear when you click on them! You can also add sounds and score points to create a fun game of Animal Tag!",
        "courseB_playlab_events_challenge2_template_2018_instruction": "Let's make the animals disappear when you click on them! You can also add sounds and score points to create a fun game of Animal Tag!",
        "courseB_scrat_forVideo_instruction": "Get the acorn!",
        "courseB_starWars_prog1_instruction": "\"Go get the scrap metal, BB-8!\"",
        "courseB_starWars_prog10_instruction": "Help BB-8 gather the glowing scrap metal",
        "courseB_starWars_prog10_2018_instruction": "Help BB-8 gather the glowing scrap metal",
        "courseB_starWars_prog11_instruction": "Help BB-8 gather the glowing scrap metal",
        "courseB_starWars_prog11_2018_instruction": "Help BB-8 gather the glowing scrap metal",
        "courseB_starWars_prog1_2018_instruction": "\"Go get the scrap metal, BB-8!\"",
        "courseB_starWars_prog2_instruction": "Get all the metal.",
        "courseB_starWars_prog2_2018_instruction": "Get all the metal.",
        "courseB_starWars_prog3_instruction": "Get all the scrap metal",
        "courseB_starWars_prog3_2018_instruction": "Get all the scrap metal",
        "courseB_starWars_prog4_instruction": "Get all the scrap metal",
        "courseB_starWars_prog4_2018_instruction": "Get all the scrap metal",
        "courseB_starWars_prog5_instruction": "Get the scrap metal",
        "courseB_starWars_prog5_2018_instruction": "Get the scrap metal",
        "courseB_starWars_prog6_instruction": "Get all the scrap metal",
        "courseB_starWars_prog6_2018_instruction": "Get all the scrap metal",
        "courseB_starWars_prog7_instruction": "Go get it!",
        "courseB_starWars_prog7_2018_instruction": "Go get it!",
        "courseB_starWars_prog8_instruction": "**Challenge:** Help BB-8 gather the glowing scrap metal",
        "courseB_starWars_prog8_2018_instruction": "**Challenge:** Help BB-8 gather the glowing scrap metal",
        "courseB_starWars_prog9_instruction": "Help BB-8 gather the glowing scrap metal",
        "courseB_starWars_prog9_2018_instruction": "Help BB-8 gather the glowing scrap metal",
        "courseC_PlayLab_events1_instruction": "Make Jorge the Dog (actor 1) say \"Hi there.\"",
        "courseC_PlayLab_events1_2018_instruction": "Make Jorge the Dog (actor 1) say \"Hi there.\"",
        "courseC_PlayLab_events2_instruction": "Can you make Jorge the Dog (actor 1) say something, then have Olive the Cat (actor 2) say something afterward?",
        "courseC_PlayLab_events2_2018_instruction": "Can you make Jorge the Dog (actor 1) say something, then have Olive the Cat (actor 2) say something afterward?",
        "courseC_PlayLab_events3_instruction": "Can you write a program to make Jorge (actor 1) move toward Olive the Cat?",
        "courseC_PlayLab_events3_2018_instruction": "Can you write a program to make Jorge (actor 1) move toward Olive the Cat?",
        "courseC_PlayLab_events4_instruction": "Can you write a program that makes Jorge (actor 1) move to Olive the Cat, and have Olive say \"Hi there.\" when Jorge reaches her?",
        "courseC_PlayLab_events4_2018_instruction": "Can you write a program that makes Jorge (actor 1) move to Olive the Cat, and have Olive say \"Hi there.\" when Jorge reaches her?",
        "courseC_PlayLab_events5_instruction": "Can you write a program to make Octavia the Octopus say \"What's new?\" when she is clicked?",
        "courseC_PlayLab_events5_2018_instruction": "Can you write a program to make Octavia the Octopus say \"What's new?\" when she is clicked?",
        "courseC_PlayLab_events6_instruction": "Now, write a program to make Waddles the Penguin move around using the up / down / left / right keys to hit all of the targets!",
        "courseC_PlayLab_events6_2018_instruction": "Now, write a program to make Waddles the Penguin move around using the up / down / left / right keys to hit all of the targets!",
        "courseC_PlayLab_events7_instruction": "The `repeat forever` block allows you to run code over and over forever.  Use this block to move Chomp the Dino (actor 2) up and down by 400 pixels forever.",
        "courseC_PlayLab_events7_2018_instruction": "The `repeat forever` block allows you to run code over and over forever.  Use this block to move Chomp the Dino (actor 2) up and down by 400 pixels forever.",
        "courseC_PlayLab_events8_instruction": "Can you have Waddles (actor 1) play a \"hit\" sound and say \"Ouch!\" if he runs into Chomp? \nWhen you're done, play the game to make that happen.",
        "courseC_PlayLab_events8_2018_instruction": "Can you have Waddles (actor 1) play a \"hit\" sound and say \"Ouch!\" if he runs into Chomp? \nWhen you're done, play the game to make that happen.",
        "courseC_PlayLab_events9_instruction": "Can you add a block to score a point when Waddles the Penguin (actor1) runs into Octavia the Octopus (actor 3)? \nPlay the game and move Waddles with the arrows until you score!",
        "courseC_PlayLab_events9_2018_instruction": "Can you add a block to score a point when Waddles the Penguin (actor1) runs into Octavia the Octopus (actor 3)? \nPlay the game and move Waddles with the arrows until you score!",
        "courseC_PlayLab_eventsA_instruction": "Add blocks to the `when run` event to change the background scene and the speed of Waddles the Penguin.\n\nPlay the game and move Waddles with the arrows until you score.",
        "courseC_PlayLab_eventsA_2018_instruction": "Add blocks to the `when run` event to change the background scene and the speed of Waddles the Penguin.\n\nPlay the game and move Waddles with the arrows until you score.",
        "courseC_PlayLab_eventsFP_instruction": "Create your own story. When you're done, click \"Finish\" to share with friends. See story ideas in the hints.",
        "courseC_PlayLab_eventsFP_2018_instruction": "Create your own story. When you're done, click \"Finish\" to share with friends. See story ideas in the hints.",
        "courseC_PlayLab_events_challenge1_instruction": "Use a new block to make Waddles automatically move back to the start when he runs into the Dinosaur and when he scores a point. \nPlay the game and move Waddles with the arrows until you score enough points.",
        "courseC_PlayLab_events_challenge1_2018_instruction": "Use a new block to make Waddles automatically move back to the start when he runs into the Dinosaur and when he scores a point. \nPlay the game and move Waddles with the arrows until you score enough points.",
        "courseC_PlayLab_events_challenge1_xy_blocks_instruction": "Here is a new block that is somewhat complicated. Use it to move Waddles back to the start when he runs into the Dinosaur and when he scores a point. This will make your game more challenging and fun!\n\nPlay the game and move Waddles with the arrows until you score enough points.",
        "courseC_artist_loop1_instruction": "Let's add some pizazz!",
        "courseC_artist_loop1_2018_instruction": "Let's add some pizazz with a `set pattern` block.",
        "courseC_artist_loops1_instruction": "*\"Zombie.  Draw!\"*\n\nThe zombie wants to draw a line from where he is to the garden of sunflowers.  Can you help him?  \n*(The garden is 250 pixels away)*  ",
        "courseC_artist_loops1a_instruction": "Get the artist to the center of the play area, then draw a bird using a sticker. ",
        "courseC_artist_loops1a_2018_instruction": "Get the artist to the center of the play area, then draw a bird using a sticker. ",
        "courseC_artist_loops2_instruction": "Now that the zombie knows his way, help him dig holes along the path to plant more flowers!",
        "courseC_artist_loops2a_instruction": "Now, use a loop to spin your bird around 12 times with a 30 degree turn.",
        "courseC_artist_loops2a_2018_instruction": "Now, use a loop to spin your bird around 12 times with a 30 degree turn.",
        "courseC_artist_loops3_instruction": "Excellent!  Now that the flowers have sprouted, help the zombie place a friend every 50 pixels to guard over them until they are grown.",
        "courseC_artist_loops3a_instruction": "Now add a bat!",
        "courseC_artist_loops3a_2018_instruction": "Now add a bat!",
        "courseC_artist_loops4_instruction": "The zombie has found an empty farm!  Can you help him bring it to life by stamping animal stickers every 100 pixels around the border?",
        "courseC_artist_loops4a_instruction": "Try jumping forward by 75 pixels.",
        "courseC_artist_loops4a_2018_instruction": "Try jumping forward by 75 pixels.",
        "courseC_artist_loops5_instruction": "Great!  Now it's time to make a fence inside to keep the animals out.   \n\n",
        "courseC_artist_loops5a_instruction": "Try new stickers!",
        "courseC_artist_loops5a_2018_instruction": "Try new stickers!",
        "courseC_artist_loops5b_instruction": "Try adding lines!",
        "courseC_artist_loops5b_2018_instruction": "Try adding lines!",
        "courseC_artist_loops6_instruction": "What should the zombie put inside of the garden?  \n\n\n",
        "courseC_artist_loops6a_instruction": "Add another sticker!",
        "courseC_artist_loops6a_2018_instruction": "Add another sticker!",
        "courseC_artist_loops7a_instruction": "Play with the loops and angles.",
        "courseC_artist_loops7a_2018_instruction": "Play with the loops and angles.",
        "courseC_artist_loops8a_instruction": "Now try something on your own!",
        "courseC_artist_loops8a_2018_instruction": "Now try something on your own!",
        "courseC_artist_loopsPre1a_instruction": "Time to spin that line around!",
        "courseC_artist_loopsPre1a_2018_instruction": "Time to spin that line around!",
        "courseC_artist_loopsPrePre1a_instruction": "Get the artist to the center of the play area, then draw a line. ",
        "courseC_artist_loopsPrePre1a_2018_instruction": "Get the artist to the center of the play area, then draw a line. ",
        "courseC_artist_loopsTemplate_instruction": "Excellent!  Now that the flowers have sprouted, help the zombie place a friend every 50 pixels to guard over them until they are grown.",
        "courseC_artist_loopsTemplateA_instruction": "Get the artist to the center of the play area, then draw a bird using a sticker. ",
        "courseC_artist_loopsTemplateA_2018_instruction": "Get the artist to the center of the play area, then draw a bird using a sticker. ",
        "courseC_artist_prog1_instruction": "Play with the blocks in the toolbox to see what they do!",
        "courseC_artist_prog1_2018_instruction": "Play with the blocks in the toolbox to see what they do!",
        "courseC_artist_prog2_instruction": "Drag blocks onto the screen to have the artist draw over the grey lines in the picture. (Each line is 100 pixels long)",
        "courseC_artist_prog2_2018_instruction": "Drag blocks onto the screen to have the artist draw over the grey lines in the picture. (Each line is 100 pixels long)",
        "courseC_artist_prog3_instruction": "Each side of the inner square is 100 pixels and all of the angles are 90 degrees.",
        "courseC_artist_prog3_2018_instruction": "Each side of the inner square is 100 pixels and all of the angles are 90 degrees.",
        "courseC_artist_prog4_instruction": "Finish Starla's rocket so she can chase her pet.",
        "courseC_artist_prog4_2018_instruction": "Finish Starla's rocket so she can chase her pet.",
        "courseC_artist_prog5_instruction": "Finish this tag by drawing a rectangle around the outside.\n(The long sides are 200 pixels each and the short sides are each 100 pixels)",
        "courseC_artist_prog5_2018_instruction": "Finish this tag by drawing a rectangle around the outside.\n(The long sides are 200 pixels each and the short sides are each 100 pixels)",
        "courseC_artist_prog6_instruction": "Draw this diamond with 200 pixel sides.",
        "courseC_artist_prog6_2018_instruction": "Draw this diamond with 200 pixel sides.",
        "courseC_artist_prog7_instruction": "**Challenge:** This tag is a special one!  Can you figure out how to draw the outline?",
        "courseC_artist_prog7_2018_instruction": "**Challenge:** This tag is a special one!  Can you figure out how to draw the outline?",
        "courseC_artist_prog8_instruction": "One more tag.  This is a triangle for Pi.\n(Each side is 150 pixels)",
        "courseC_artist_prog8_2018_instruction": "One more tag.  This is a triangle for Pi.\n(Each side is 150 pixels)",
        "courseC_artist_prog_challenge1-doghouse_instruction": "Let's build a dog house for Jorge!",
        "courseC_artist_prog_challenge1_instruction": "Draw rooms for each of the animals. ",
        "courseC_artist_prog_challenge1_2018_instruction": "Draw rooms for each of the animals. ",
        "courseC_artist_prog_challenge2_instruction": "*Help me paint the yellow lines on this road!*",
        "courseC_artist_prog_challenge2a_instruction": "*\"Help me paint the yellow lines on this road!\"*",
        "courseC_artist_prog_challenge2a_2018_instruction": "*\"Help me paint the yellow lines on this road!\"*",
        "courseC_collector_loops_challenge2_instruction": "Get at least **5** pieces of treasure!",
        "courseC_collector_loops_challenge2_2018_instruction": "Get at least **5** pieces of treasure!",
        "courseC_collector_prog1_instruction": "Play around with the blocks to see if you can help Laurel collect some treasure.",
        "courseC_collector_prog1_2018_instruction": "Play around with the blocks to see if you can help Laurel collect some treasure.",
        "courseC_collector_prog2_instruction": "Move Laurel to the treasure, then use `collect` to pick it up.",
        "courseC_collector_prog2_2018_instruction": "Move Laurel to the treasure, then use `collect` to pick it up.",
        "courseC_collector_prog3_instruction": "Order these blocks to collect the treasure and solve the puzzle.",
        "courseC_collector_prog3_2018_instruction": "Order these blocks to collect the treasure and solve the puzzle.",
        "courseC_collector_prog4_instruction": "Put these blocks in order to collect all of the treasure and solve the puzzle.",
        "courseC_collector_prog4_2018_instruction": "Put these blocks in order to collect all of the treasure and solve the puzzle.",
        "courseC_collector_prog5_instruction": "These blocks are in the wrong order. Can you fix them?",
        "courseC_collector_prog5_2018_instruction": "These blocks are in the wrong order. Can you fix them?",
        "courseC_collector_prog6_instruction": "Reorder the blocks to collect all of the treasure.",
        "courseC_collector_prog6_2018_instruction": "Reorder the blocks to collect all of the treasure.",
        "courseC_collector_prog7_instruction": "Use blocks from the toolbox to collect all of the treasure.",
        "courseC_collector_prog7_2018_instruction": "Use blocks from the toolbox to collect all of the treasure.",
        "courseC_collector_prog8_instruction": "*\"Keep up the good work! Help me collect all of the treasure.\"*",
        "courseC_collector_prog8_2018_instruction": "*\"Keep up the good work! Help me collect all of the treasure.\"*",
        "courseC_collector_prog9_instruction": "*\"Let's get all of the treasure!\"*",
        "courseC_collector_prog9_2018_instruction": "*\"Let's get all of the treasure!\"*",
        "courseC_collector_progA_instruction": "Help Laurel collect all of the treasure.",
        "courseC_collector_progB_instruction": "Collect as many coins as you can to finish the stage!",
        "courseC_collector_prog_challenge1_instruction": "Look carefully! Can you collect all **10** pieces of treasure?",
        "courseC_collector_prog_challenge1_2018_instruction": "Look carefully! Can you collect all **10** pieces of treasure?",
        "courseC_collector_prog_challenge2_instruction": "Collect at least **10** pieces of treasure to finish this challenge!",
        "courseC_collector_prog_challenge2_2018_instruction": "Collect at least **10** pieces of treasure to finish this challenge!",
        "courseC_flappy_embed_events_instruction": "Here's an example of a game that you're about to create yourself! Play through it one or two times to get an idea of what you are about to make.",
        "courseC_flappy_events1_instruction": "Attach the `flap normal amount` block to the `when click` event, then press \"Run\".    Click or tap on the play space to move Flappy to the target.",
        "courseC_flappy_events10_instruction": "Create your own Flappy game! ",
        "courseC_flappy_events10_2018_instruction": "Create your own Flappy game! ",
        "courseC_flappy_events1_2018_instruction": "Attach the `flap normal amount` block to the `when click` event, then press \"Run\".    Click or tap on the play space to move Flappy to the target.",
        "courseC_flappy_events2_instruction": "Try adding a block that sets the level speed when the \"Run\" button is pressed.  Play the game and flap to the target to continue.",
        "courseC_flappy_events2_2018_instruction": "Try adding a block that sets the level speed when the \"Run\" button is pressed.  Play the game and flap to the target to continue.",
        "courseC_flappy_events3_instruction": "Attach the `end game` block to the `when hit the ground` event.   Play the game and crash the bird into the ground to continue.",
        "courseC_flappy_events3_2018_instruction": "Attach the `end game` block to the `when hit the ground` event.   Play the game and crash the bird into the ground to continue.",
        "courseC_flappy_events4_instruction": "Attach a block to the `when hit an obstacle` event so that the game ends when Flappy crashes into the first set of pipes.",
        "courseC_flappy_events4_2018_instruction": "Attach a block to the `when hit an obstacle` event so that the game ends when Flappy crashes into the first set of pipes.",
        "courseC_flappy_events5_instruction": "Add a block to the `when pass an obstacle` event, then press \"Run\" to score a point by flying Flappy through the first set of pipes.",
        "courseC_flappy_events5_2018_instruction": "Add a block to the `when pass an obstacle` event, then press \"Run\" to score a point by flying Flappy through the first set of pipes.",
        "courseC_flappy_events6_instruction": "See if you can still score a point after making Flappy flap either a smaller or larger amount each time you click.",
        "courseC_flappy_events6_2018_instruction": "See if you can still score a point after making Flappy flap either a smaller or larger amount each time you click.",
        "courseC_flappy_events7_instruction": "Next, try changing the scene by attaching a block to the `when run` event.",
        "courseC_flappy_events7_2018_instruction": "Next, try changing the scene by attaching a block to the `when run` event.",
        "courseC_flappy_events8_instruction": "Try setting a **random** scene when other events happen...for example, when passing an obstacle.",
        "courseC_flappy_events8_2018_instruction": "Try setting a **random** scene when other events happen...for example, when passing an obstacle.",
        "courseC_flappy_events9_instruction": "To mix things up, instead of ending the game when Flappy hits an obstacle, try setting the score back to 0.",
        "courseC_flappy_events9_2018_instruction": "To mix things up, instead of ending the game when Flappy hits an obstacle, try setting the score back to 0.",
        "courseC_harvester_loops1_instruction": "Use loops to pick all of the pumpkins.",
        "courseC_harvester_loops10_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops10_2018_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops11_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops11_2018_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops1_2018_instruction": "Use loops to pick all of the pumpkins.",
        "courseC_harvester_loops2_instruction": "Can you combine two different loops to move toward the pumpkins, then collect them all?",
        "courseC_harvester_loops2_2018_instruction": "Can you combine two different loops to move toward the pumpkins, then collect them all?",
        "courseC_harvester_loops3_instruction": "Collect all of the pumpkins.",
        "courseC_harvester_loops3_2018_instruction": "Collect all of the pumpkins.",
        "courseC_harvester_loops4_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops4_2018_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops5_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops5_2018_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops6_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops6_2018_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops7_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops7_2018_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops8_instruction": "**Challenge:** Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops8_2018_instruction": "**Challenge:** Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops9_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops9_2018_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops_challenge1_instruction": "Collect all of the corn.",
        "courseC_harvester_loops_challenge1a_instruction": "Collect all of the corn.",
        "courseC_harvester_loops_challenge1a_2018_instruction": "Collect all of the corn.",
        "courseC_harvester_loops_challenge2_instruction": "Collect all of the lettuce. Avoid the trees and fields!",
        "courseC_harvester_loops_challenge2_2018_instruction": "Collect all of the lettuce. Avoid the trees and fields!",
        "courseC_harvester_loops_forVid_instruction": "Collect all of the corn, all of the lettuce, and all of the pumpkins.",
        "courseC_maze_debugging1_instruction": "Fix the code to help get Scrat get to the acorn.",
        "courseC_maze_debugging10_instruction": "Debug this level by rearranging and changing blocks to get me to the pig!",
        "courseC_maze_debugging1_2018_instruction": "Fix the code to help get Scrat get to the acorn.",
        "courseC_maze_debugging2_instruction": "Use your debugging skills to get Scrat to the acorn.",
        "courseC_maze_debugging2_2018_instruction": "Use your debugging skills to get Scrat to the acorn.",
        "courseC_maze_debugging3_instruction": "Remove blocks to get Scrat to the acorn!",
        "courseC_maze_debugging3_2018_instruction": "Remove blocks to get Scrat to the acorn!",
        "courseC_maze_debugging4_instruction": "Someone has their directions mixed up! Can you help?",
        "courseC_maze_debugging4_2018_instruction": "Someone has their directions mixed up! Can you help?",
        "courseC_maze_debugging5_instruction": "Debug this level by rearranging and changing blocks.",
        "courseC_maze_debugging5_2018_instruction": "Debug this level by rearranging and changing blocks.",
        "courseC_maze_debugging6_instruction": "Figure out what is wrong and get Scrat to the acorn.",
        "courseC_maze_debugging6_2018_instruction": "Figure out what is wrong and get Scrat to the acorn.",
        "courseC_maze_debugging7_instruction": "**Challenge:** Debug this level by rearranging, adding, and deleting blocks.",
        "courseC_maze_debugging7_2018_instruction": "**Challenge:** Debug this level by rearranging, adding, and deleting blocks.",
        "courseC_maze_debugging8_instruction": "Debug this level to get Scrat to the acorn.",
        "courseC_maze_debugging9_instruction": "Debug this level to get Scrat to the acorn.",
        "courseC_maze_debugging9_2018_instruction": "Debug this level to get Scrat to the acorn.",
        "courseC_maze_debugging_challenge1_instruction": "Help Scrat decide which way to turn to get to the acorn.",
        "courseC_maze_debugging_challenge1_2018_instruction": "Help Scrat decide which way to turn to get to the acorn.",
        "courseC_maze_debugging_challenge2_instruction": "Help Scrat reach the acorn with only four `turn` commands.",
        "courseC_maze_debugging_challenge2_2018_instruction": "Help Scrat reach the acorn with only four `turn` commands.",
        "courseC_maze_loops1_instruction": "Can you get the bird to the pig?",
        "courseC_maze_loops10_instruction": "You are doing great! Keep it up!",
        "courseC_maze_loops11_instruction": "You are almost there! This time, choose any path you like!",
        "courseC_maze_loops2_instruction": "Can you get the bird to the pig by creating a loop that uses only one `move forward` block inside of a `repeat`?",
        "courseC_maze_loops3_instruction": "Solve this puzzle by creating a loop!",
        "courseC_maze_loops4_instruction": "In this puzzle, two `repeat` loops will help you get the bird to the pig with the fewest number of blocks!",
        "courseC_maze_loops5_instruction": "*\"Get me to the pig as quickly as possible!\"*",
        "courseC_maze_loops6_instruction": "Loops even work with more than one block inside!  Can you loop this sequence?",
        "courseC_maze_loops7_instruction": "Use what you learned in other puzzles!",
        "courseC_maze_loops8_instruction": "Challenge: Combine ideas from the last few puzzles to complete this level.",
        "courseC_maze_loops9_instruction": "You are doing great! Keep it up!",
        "courseC_maze_loops_challenge1_instruction": "Now Scrat wants to try using loops to find his acorn! ",
        "courseC_maze_loops_challenge1a_instruction": "Now Scrat wants to try using loops to find his acorn! ",
        "courseC_maze_loops_challenge1a_2018_instruction": "Now Scrat wants to try using loops to find his acorn! ",
        "courseC_maze_loops_challenge2_instruction": "Let's hunt for treasure - using loops! Help the collector by debugging this code. Get all of the treasure!",
        "courseC_maze_programming1_instruction": "For this puzzle, drag all of the blocks together and click \"Run\" to watch it go!",
        "courseC_maze_programming1_2018_instruction": "For this puzzle, drag all of the blocks together and click \"Run\" to watch it go!",
        "courseC_maze_programming2_instruction": "Drag an extra `move forward` block out of the toolbox to finish your code.",
        "courseC_maze_programming2_2018_instruction": "Drag an extra `move forward` block out of the toolbox to finish your code.",
        "courseC_maze_programming3_instruction": "There is one extra block that is going to cause the bird to crash. Throw it away by dragging it back to the toolbox.",
        "courseC_maze_programming3_2018_instruction": "There is one extra block that is going to cause the bird to crash. Throw it away by dragging it back to the toolbox.",
        "courseC_maze_programming4_instruction": "Avoid TNT or feathers will fly!",
        "courseC_maze_programming4_2018_instruction": "Avoid TNT or feathers will fly!",
        "courseC_maze_programming5_instruction": "Avoid the TNT.",
        "courseC_maze_programming5_2018_instruction": "Avoid the TNT.",
        "courseC_maze_programming6_instruction": "\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"",
        "courseC_maze_programming6_2018_instruction": "\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"",
        "courseC_maze_programming7_instruction": "**Challenge:** This code has a lot of bugs. You'll need to remove some blocks and add others.",
        "courseC_maze_programming7_2018_instruction": "**Challenge:** This code has a lot of bugs. You'll need to remove some blocks and add others.",
        "courseC_maze_programming8_instruction": "*\"Keep calm and help me find the bad pig.\"*",
        "courseC_maze_programming8_2018_instruction": "*\"Keep calm and help me find the bad pig.\"*",
        "courseC_maze_programming8_predict1_instruction": "*\"Keep calm and help me find the bad pig.\"*",
        "courseC_maze_programming8_predict1_2018_instruction": "*\"Keep calm and help me find the bad pig.\"*",
        "courseC_maze_programming9_instruction": "*\"Now, help me sneak up on the pig any way you want to!\"*",
        "courseC_maze_programming9_2018_instruction": "*\"Now, help me sneak up on the pig any way you want to!\"*",
        "courseC_maze_programming_challenge1_instruction": "The pig is hiding, and the goal is to find it. ",
        "courseC_maze_programming_challenge1_2018_instruction": "The pig is hiding, and the goal is to find it. ",
        "courseC_maze_programming_challenge2_instruction": "Sometimes there is more than one way to solve the same problem. Sometimes it's faster to go backwards than it is to go forwards!",
        "courseC_maze_programming_challenge2_2018_instruction": "Sometimes there is more than one way to solve the same problem. Sometimes it's faster to go backwards than it is to go forwards!",
        "courseC_playLab_embedded_instruction": "Here's a game for you to play! To win, use your arrow keys to get the penguin to run into the octopus.\n\nOnce you are done, you will learn how to make this game!",
        "courseC_puppy_loops10_instruction": "You are doing great! Keep it up!",
        "courseC_puppy_loops11_instruction": "You are almost there! This time, choose any path you like!",
        "courseC_puppy_loops8_instruction": "Challenge: Combine ideas from the last few puzzles to complete this level.",
        "courseC_puppy_loops8courseC_maze_loops8_instruction": "Challenge: Combine ideas from the last few puzzles to complete this level.",
        "courseC_puppy_loops9_instruction": "You are doing great! Keep it up!",
        "courseC_starWars_loops1_instruction": "BB-8 will pick up any metal scraps along the path where he moves. Use 5 of the same block to get BB-8 to pick up all of the scrap metal in the play area.",
        "courseC_starWars_loops10_instruction": "You are doing great! Keep it up!",
        "courseC_starWars_loops10_2018_instruction": "You are doing great! Keep it up!",
        "courseC_starWars_loops10_predict2_instruction": "You are doing great! Keep it up!",
        "courseC_starWars_loops10_predict2_2018_instruction": "You are doing great! Keep it up!",
        "courseC_starWars_loops11_instruction": "You are almost there! This time, choose any path you like!",
        "courseC_starWars_loops11_2018_instruction": "You are almost there! This time, choose any path you like!",
        "courseC_starWars_loops1_2018_instruction": "BB-8 will pick up any metal scraps along the path where he moves. Use 5 of the same block to get BB-8 to pick up all of the scrap metal in the play area.",
        "courseC_starWars_loops1_predict1_instruction": "BB-8 will pick up any metal scraps along the path where he moves. Use 5 of the same block to get BB-8 to pick up all of the scrap metal in the play area.",
        "courseC_starWars_loops1_predict1_2018_instruction": "BB-8 will pick up any metal scraps along the path where he moves. Use 5 of the same block to get BB-8 to pick up all of the scrap metal in the play area.",
        "courseC_starWars_loops2_instruction": "To get all the scrap metal, try creating a loop that uses only one block inside of a `repeat` block.",
        "courseC_starWars_loops2_2018_instruction": "To get all the scrap metal, try creating a loop that uses only one block inside of a `repeat` block.",
        "courseC_starWars_loops4_instruction": "In this puzzle, two `repeat` loops will help you get BB-8 to all of the scrap metal with the fewest number of blocks!",
        "courseC_starWars_loops4_2018_instruction": "In this puzzle, two `repeat` loops will help you get BB-8 to all of the scrap metal with the fewest number of blocks!",
        "courseC_starWars_loops5_instruction": "Get BB-8 to pick up all the scrap metal as quickly as possible!",
        "courseC_starWars_loops5_2018_instruction": "Get BB-8 to pick up all the scrap metal as quickly as possible!",
        "courseC_starWars_loops6_instruction": "Loops even work with more than one block inside!  Can you loop this sequence?",
        "courseC_starWars_loops6_2018_instruction": "Loops even work with more than one block inside!  Can you loop this sequence?",
        "courseC_starWars_loops7_instruction": "Can you try to get all the scrap metal using just one loop? Try programming it all out then finding the repeating code to put in a loop.",
        "courseC_starWars_loops7_2018_instruction": "Can you try to get all the scrap metal using just one loop? Try programming it all out then finding the repeating code to put in a loop.",
        "courseC_starWars_loops9_instruction": "Use what you have learned to pick up all of the scrap metal!",
        "courseC_starWars_loops9_2018_instruction": "Use what you have learned to pick up all of the scrap metal!",
        "courseD_Frozen_nested1_instruction": "Draw a small shape, between **20 and 50** pixels wide.  It can be any shape that you like.  ",
        "courseD_Frozen_nested2_instruction": "Now take your shape and draw two or three in a row!",
        "courseD_Frozen_nested3_instruction": "Let's spin that line of shapes around!",
        "courseD_Frozen_nested4_instruction": "Time to layer those shapes!",
        "courseD_Frozen_nested5_instruction": "Play with the snowflakes!",
        "courseD_Frozen_nested6_instruction": "Draw a stair-step pattern that uses turns between 75 and 105 degrees.",
        "courseD_Frozen_nested7_instruction": "Now, turn around 180 degrees and draw the stair pattern again!",
        "courseD_Frozen_nested8_instruction": "Spin that shape around 5 or 6 times in a circle.",
        "courseD_Frozen_nested9_instruction": "Try playing around with what you've created. Draw whatever you like!\n- What happens if you use two different angles in your stair step pattern?\n- What happens if you make your diamond pattern longer or shorter?\n- What does it look like to draw two snowflakes on top of one another?",
        "courseD_artist_1_2018_instruction": "Draw a hexagon with **50** pixel long sides.  \n",
        "courseD_artist_2_2018_instruction": "Now, turn right by **60** degrees, then draw a straight line **150** pixels long and jump back to the center of the play area.\n",
        "courseD_artist_3_2018_instruction": "Nest all of the code inside of another `repeat` loop and run it a total of **6** times. ",
        "courseD_artist_4_2018_instruction": "Add a tiny shape to the end of your line!",
        "courseD_artist_5_2018_instruction": "Play with the snowflakes!",
        "courseD_artist_6_2018_instruction": "Try changing your long 150 pixel line into 6 short lines of **25** pixels, with little turns at the end.\n",
        "courseD_artist_7_2018_instruction": "Now, turn around 180 degrees and draw the stair pattern again!",
        "courseD_artist_8_2018_instruction": "Spin that shape around 5 or 6 times in a circle.",
        "courseD_artist_9_2018_instruction": "Try playing around with what you've created. Draw whatever you like!\n- What happens if you use two different angles in your stair step pattern?\n- What happens if you make your diamond pattern longer or shorter?\n- What does it look like to draw two snowflakes on top of one another?",
        "courseD_artist_binary1_instruction": "Use the blocks below to have the artist draw \"01010101\" in binary in the first row.",
        "courseD_artist_binary1_2018_instruction": "Use the blocks below to have the artist draw \"01010101\" in binary in the first row.",
        "courseD_artist_binary2_instruction": "Run this code to see how the artist uses binary to draw this pattern.",
        "courseD_artist_binary2_2018_instruction": "Run this code to see how the artist uses binary to draw this pattern.",
        "courseD_artist_binary3_instruction": "Which of the binary strings below could you loop 8 times to draw this image?",
        "courseD_artist_binary3_2018_instruction": "Which of the binary strings below could you loop 8 times to draw this image?",
        "courseD_artist_binary4_instruction": "Can you draw this pattern by looping just three binary digits (0s and 1s)?",
        "courseD_artist_binary4_2018_instruction": "Can you draw this pattern by looping just three binary digits (0s and 1s)?",
        "courseD_artist_binary5_instruction": "Each binary string below represents one row of this picture. \n\nCan you rearrange them so it draws a smiley face instead of a frown?",
        "courseD_artist_binary5_2018_instruction": "Each binary string below represents one row of this picture. \n\nCan you rearrange them so it draws a smiley face instead of a frown?",
        "courseD_artist_binary6_instruction": "Which 6 digit binary string, repeated 11 times, will draw this image?",
        "courseD_artist_binary6_2018_instruction": "Which 6 digit binary string, repeated 11 times, will draw this image?",
        "courseD_artist_binary7_instruction": "What is the shortest binary string that you can repeat to draw this image?",
        "courseD_artist_binary7_2018_instruction": "What is the shortest binary string that you can repeat to draw this image?",
        "courseD_artist_binary8_instruction": "Finish the code to create this drawing.",
        "courseD_artist_binary8_2018_instruction": "Finish the code to create this drawing.",
        "courseD_artist_binary8_predict1_instruction": "Finish the code to create this drawing.",
        "courseD_artist_binary8_predict1_2018_instruction": "Finish the code to create this drawing.",
        "courseD_artist_binaryFP_instruction": "Here's a higher resolution canvas to draw on - 16 pixels by 16 pixels!\n\nSee what happens when we start to get creative with the bits!",
        "courseD_artist_binaryFP8_instruction": "**Free Play:**  Draw whatever you want in binary! ",
        "courseD_artist_binaryFP_2018_instruction": "Here's a higher resolution canvas to draw on - 16 pixels by 16 pixels!\n\nSee what happens when we start to get creative with the bits!",
        "courseD_artist_binary_challenge0_instruction": "Try using nested loops to complete this drawing.",
        "courseD_artist_binary_challenge1_instruction": "You can only use each binary value (0 or 1) once each in this puzzle. Try using nested loops to complete this drawing.",
        "courseD_artist_binary_challenge1_2018_instruction": "You can only use each binary value (0 or 1) once each in this puzzle. Try using nested loops to complete this drawing.",
        "courseD_artist_binary_challenge2_instruction": "Are you persistent enough to restore this logo back to normal?",
        "courseD_artist_binary_challenge2_2018_instruction": "Are you persistent enough to restore this logo back to normal?",
        "courseD_artist_binary_challenge3_instruction": "Are you persistent enough to restore this logo back to normal?",
        "courseD_artist_embed_frozen_instruction": "Press Run to see a snowflake design!",
        "courseD_artist_embed_frozen2_instruction": "Press Run to see a snowflake design.",
        "courseD_artist_functions10_instruction": "This time, use lines of 8 hexagons with 25 pixel sides.",
        "courseD_artist_functions2_instruction": "This time, use the `draw a square` function to create the glasses. \n",
        "courseD_artist_functions3_instruction": "You can make this drawing by adding a repeat block.",
        "courseD_artist_functions4_instruction": "Now that you can draw a star, try drawing four stars!",
        "courseD_artist_functions5_instruction": "Draw only those three stars to finish this puzzle.",
        "courseD_artist_functions6_instruction": "Make this window by drawing a square, then turning 90 degrees before drawing another, and so on.",
        "courseD_artist_functions7_instruction": "Try solving this puzzle by creating `draw a window` and calling it five times. Watch out for the door!",
        "courseD_artist_functions8_instruction": "Challenge: Create as many functions as you think you need to make this drawing of 50 pixel squares.",
        "courseD_artist_functions9_instruction": "Create this image using only the blocks provided.",
        "courseD_artist_nestedLoops1_instruction": "Draw a triangle to kickstart this stage.  \n(Each side is 100 pixels long and you'll need to turn 120 degrees for each exterior angle.)",
        "courseD_artist_nestedLoops10_instruction": "Take the squares from before, but this time only make 7 of them, and lay them out in a row.",
        "courseD_artist_nestedLoops10_2018_instruction": "Take the squares from before, but this time only make 7 of them, and lay them out in a row.",
        "courseD_artist_nestedLoops1_2018_instruction": "Draw a triangle to kickstart this stage.  \n(Each side is 100 pixels long and you'll need to turn 120 degrees for each exterior angle.)",
        "courseD_artist_nestedLoops1a_instruction": "Now loop the triangle 6 times. ",
        "courseD_artist_nestedLoops1a_2018_instruction": "Now loop the triangle 6 times. ",
        "courseD_artist_nestedLoops2_instruction": "This time, complete the puzzle with the fewest number of blocks possible.",
        "courseD_artist_nestedLoops2_2018_instruction": "This time, complete the puzzle with the fewest number of blocks possible.",
        "courseD_artist_nestedLoops3_instruction": "Use your new skills to quickly draw the last row of windows for this building.\n\nThe windows are 20 pixel squares, each 20 pixels apart.",
        "courseD_artist_nestedLoops3_2018_instruction": "Use your new skills to quickly draw the last row of windows for this building.\n\nThe windows are 20 pixel squares, each 20 pixels apart.",
        "courseD_artist_nestedLoops4_instruction": "Great!  Do the same thing with these circles.",
        "courseD_artist_nestedLoops4_2018_instruction": "Great!  Do the same thing with these circles.",
        "courseD_artist_nestedLoops5_instruction": "What happens if you also turn 90 degrees between circles?",
        "courseD_artist_nestedLoops5_2018_instruction": "What happens if you also turn 90 degrees between circles?",
        "courseD_artist_nestedLoops6_instruction": "Edit blocks within your existing code to make this image.",
        "courseD_artist_nestedLoops7_instruction": "Use what you've learned to make this drawing.",
        "courseD_artist_nestedLoops7_2018_instruction": "Use what you've learned to make this drawing.",
        "courseD_artist_nestedLoops8_instruction": "Using what you have learned in the last couple of puzzles, build this image from the beginning.",
        "courseD_artist_nestedLoops8_2018_instruction": "Using what you have learned in the last couple of puzzles, build this image from the beginning.",
        "courseD_artist_nestedLoops9_instruction": "**Challenge:** Can you figure out how to make a picture like this?",
        "courseD_artist_nestedLoops9_2018_instruction": "**Challenge:** Can you figure out how to make a picture like this?",
        "courseD_artist_nestedLoops9_predict1_instruction": "**Challenge:** Can you figure out how to make a picture like this?",
        "courseD_artist_nestedLoops9_predict1_2018_instruction": "**Challenge:** Can you figure out how to make a picture like this?",
        "courseD_artist_nestedLoopsFP_instruction": "Now it's your turn.  Take the skills you have learned and make something that you love!",
        "courseD_artist_nestedLoopsFP_2018_instruction": "Now it's your turn.  Take the skills you have learned and make something that you love!",
        "courseD_artist_nestedLoopsPre1_instruction": "Create a triangle to kickstart this stage.",
        "courseD_artist_nestedLoops_challenge1_instruction": "Can you figure out how to make a picture like this?",
        "courseD_artist_nestedLoops_challenge1_2018_instruction": "Can you figure out how to make a picture like this?",
        "courseD_artist_nestedLoops_challenge2_instruction": "Fix the code to make this picture!",
        "courseD_artist_nestedLoops_challenge2_2018_instruction": "Fix the code to make this picture!",
        "courseD_artist_project1_instruction": "Draw a small shape, between **20 and 50** pixels wide.  It can be any shape that you like.  ",
        "courseD_artist_project1_2018_instruction": "Draw a small shape, between **20 and 50** pixels wide.  It can be any shape that you like.  ",
        "courseD_artist_project1a_instruction": "Draw a stair-step pattern that uses turns between 75 and 105 degrees.",
        "courseD_artist_project1a_2018_instruction": "Draw a stair-step pattern that uses turns between 75 and 105 degrees.",
        "courseD_artist_project2_instruction": "Now take your shape and draw two or three in a row!",
        "courseD_artist_project2_2018_instruction": "Now take your shape and draw two or three in a row!",
        "courseD_artist_project2a_instruction": "Now, turn around 180 degrees and draw the stair pattern again!",
        "courseD_artist_project2a_2018_instruction": "Now, turn around 180 degrees and draw the stair pattern again!",
        "courseD_artist_project3_instruction": "Let's spin that line of shapes around!",
        "courseD_artist_project3_2018_instruction": "Let's spin that line of shapes around!",
        "courseD_artist_project3a_instruction": "Spin that shape around 5 or 6 times in a circle.",
        "courseD_artist_project3a_2018_instruction": "Spin that shape around 5 or 6 times in a circle.",
        "courseD_artist_project4_instruction": "Time to layer those shapes!",
        "courseD_artist_project4_2018_instruction": "Time to layer those shapes!",
        "courseD_artist_project4a_instruction": "Try playing around with what you've created. Draw whatever you like!\n- What happens if you use two different angles in your stair step pattern?\n- What happens if you make your diamond pattern longer or shorter?\n- What does it look like to draw two snowflakes on top of one another?",
        "courseD_artist_project4a_2018_instruction": "Try playing around with what you've created. Draw whatever you like!\n- What happens if you use two different angles in your stair step pattern?\n- What happens if you make your diamond pattern longer or shorter?\n- What does it look like to draw two snowflakes on top of one another?",
        "courseD_artist_project5_instruction": "Play with the snowflakes!",
        "courseD_artist_project5_2018_instruction": "Play with the snowflakes!",
        "courseD_artist_project_embedded_instruction": "Here's what you will soon be making!",
        "courseD_artist_ramp11_instruction": "Now make a square using Artist!",
        "courseD_artist_ramp12_instruction": "Use what you've learned to draw this triangle inside of a square.",
        "courseD_bee_conditionals1_instruction": "Check to see if there's a flower under the cloud. If there's a flower, get nectar.",
        "courseD_bee_conditionals10_instruction": "Collect all of the nectar and make all of the honey.",
        "courseD_bee_conditionals10_2018_instruction": "Collect all of the nectar and make all of the honey.",
        "courseD_bee_conditionals1_predict1_instruction": "Check to see if there's a flower under the cloud. If there's a flower, get nectar.",
        "courseD_bee_conditionals1_predict1_2018_instruction": "Check to see if there's a flower under the cloud. If there's a flower, get nectar.",
        "courseD_bee_conditionals2_instruction": "Check underneath every cloud to see if it is hiding a flower before you get nectar.  ",
        "courseD_bee_conditionals2_2018_instruction": "Check underneath every cloud to see if it is hiding a flower before you get nectar.  ",
        "courseD_bee_conditionals2_test_instruction": "Check underneath every cloud to see if it is hiding a flower before you get nectar.  ",
        "courseD_bee_conditionals3_instruction": "Help the bee collect all of the nectar. \n\nYou can only collect nectar from flowers, but you can check any space to see if there is a flower.",
        "courseD_bee_conditionals3_2018_instruction": "Help the bee collect all of the nectar. \n\nYou can only collect nectar from flowers, but you can check any space to see if there is a flower.",
        "courseD_bee_conditionals4_instruction": "Get all of the nectar using as few blocks as possible.",
        "courseD_bee_conditionals4_2018_instruction": "Get all of the nectar using as few blocks as possible.",
        "courseD_bee_conditionals5_instruction": "Collect all of the nectar using as few blocks as possible",
        "courseD_bee_conditionals5_2018_instruction": "Collect all of the nectar using as few blocks as possible",
        "courseD_bee_conditionals6_instruction": "Some of these clouds might have honeycombs under them.  Be sure to check if a honeycomb is hiding behind each cloud!",
        "courseD_bee_conditionals6_2018_instruction": "Some of these clouds might have honeycombs under them.  Be sure to check if a honeycomb is hiding behind each cloud!",
        "courseD_bee_conditionals7_instruction": "Use the `if/else` block to collect nectar at flowers and make honey at honeycomb.",
        "courseD_bee_conditionals7_2018_instruction": "Use the `if/else` block to collect nectar at flowers and make honey at honeycomb.",
        "courseD_bee_conditionals7_predict2_instruction": "Use the `if/else` block to collect nectar at flowers and make honey at honeycomb.",
        "courseD_bee_conditionals7_predict2_2018_instruction": "Use the `if/else` block to collect nectar at flowers and make honey at honeycomb.",
        "courseD_bee_conditionals8_instruction": "Collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "courseD_bee_conditionals8_2018_instruction": "Collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "courseD_bee_conditionals9_instruction": "Collect all of the nectar or make all the honey.",
        "courseD_bee_conditionals9_2018_instruction": "Collect all of the nectar or make all the honey.",
        "courseD_bee_conditionals_challenge1_instruction": "Collect all the nectar and make all the honey.",
        "courseD_bee_conditionals_challenge1_2018_instruction": "Collect all the nectar and make all the honey.",
        "courseD_bee_conditionals_challenge2_instruction": "Collect all of the nectar and make all the honey.",
        "courseD_bee_conditionals_challenge2_2018_instruction": "Collect all of the nectar and make all the honey.",
        "courseD_bee_conditionals_challenge3_instruction": "Collect all of the nectar or make all the honey.",
        "courseD_bee_debugging1_instruction": "Fix the error(s) to collect all of the nectar.",
        "courseD_bee_debugging2_instruction": "Fix the error(s) to collect all of the nectar.",
        "courseD_bee_debugging3_instruction": "Fix the error(s) to collect all of the nectar and make all of the honey.",
        "courseD_bee_debugging4_instruction": "Fix the error(s) to make all of the honey.",
        "courseD_bee_debugging5_instruction": "Challenge: All of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_bee_debugging6_instruction": "Challenge:  Fix the errors to collect all of the nectar and make all of the honey.",
        "courseD_bee_debugging9_instruction": "Help the bee fix the code to get all the nectar.",
        "courseD_bee_debugging_challenge1_instruction": "Watch how the bees gets the nectar. Can you use the same kind of pattern to help the bee make all of the honey?",
        "courseD_bee_debugging_challenge1_2018_instruction": "Watch how the bees gets the nectar. Can you use the same kind of pattern to help the bee make all of the honey?",
        "courseD_bee_debugging_challenge1a_instruction": "Watch how the bee gets the nectar. Use the same pattern to help the bee make all the honey.",
        "courseD_bee_debugging_challenge2_instruction": "Watch how the bees gets the nectar. Can you use the same kind of pattern to help the bee make all of honey?",
        "courseD_bee_nestedLoops1_instruction": "Help the bee collect all of the nectar.",
        "courseD_bee_nestedLoops1_2018_instruction": "Help the bee collect all of the nectar.",
        "courseD_bee_nestedLoops1a_instruction": "Help the bee collect all of the nectar.",
        "courseD_bee_nestedLoops1a_2018_instruction": "Help the bee collect all of the nectar.",
        "courseD_bee_nestedLoops2_instruction": "This time, help the bee collect all of the nectar using as few blocks as possible.",
        "courseD_bee_nestedLoops2_2018_instruction": "This time, help the bee collect all of the nectar using as few blocks as possible.",
        "courseD_bee_nestedLoops2_predict1_instruction": "This time, help the bee collect all of the nectar using as few blocks as possible.",
        "courseD_bee_nestedLoops2_predict1_2018_instruction": "This time, help the bee collect all of the nectar using as few blocks as possible.",
        "courseD_bee_nestedLoops3_instruction": "Collect all of the nectar from each flower.",
        "courseD_bee_nestedLoops5_instruction": "Collect all of the nectar from each flower and make honey at the honeycomb. ",
        "courseD_bee_nestedLoops6_instruction": "Make all of the nectar.",
        "courseD_bee_nestedLoops6_2018_instruction": "Get the zombie to the sunflower using only the blocks available.",
        "courseD_bee_nestedLoops7_instruction": "Challenge: Figure out how to get all of the nectar using only the blocks available.",
        "courseD_bee_nestedLoops7_2018_instruction": "Challenge: Figure out how to get all of the nectar using only the blocks available.",
        "courseD_bee_nestedLoops8_instruction": "Collect all of the nectar from each flower and make honey at the honeycomb. ",
        "courseD_bee_nestedLoops8_2018_instruction": "Collect all of the nectar from each flower and make honey at the honeycomb. ",
        "courseD_bee_nestedLoops9_instruction": "Make all of the honey.",
        "courseD_bee_nestedLoops9_2018_instruction": "Make all of the honey.",
        "courseD_bee_nestedLoops9_predict2_instruction": "Make all of the honey.",
        "courseD_bee_nestedLoops9_predict2_2018_instruction": "Make all of the honey.",
        "courseD_bee_nested_loops_challenge1_instruction": "Let's hunt for treasure - using loops! Help the collector reach at least two piles of treasure using only the blocks in your toolbox.",
        "courseD_bee_nested_loops_challenge2_instruction": "Let's hunt for treasure - using loops! Help the collector reach at least two piles of treasure using only the blocks in your toolbox.",
        "courseD_bounce_embed_endgame_instruction": "Use the left and right arrows to move the paddle. See how many points you can get before your opponent scores twice!",
        "courseD_bounce_embedded_instruction": "Write Instructions Here",
        "courseD_bounce_events1_instruction": "Attach a block to the \"when left arrow\" block and press \"Run\" to move the player to the flag.",
        "courseD_bounce_events10_instruction": "There is now a goal at the top. Attach the \"score point\" and \"score opponent point\" blocks to the \"when ball in goal\" and \"when ball misses paddle\" blocks to make a game. See how many points you can score before your opponent scores twice.",
        "courseD_bounce_events10s_instruction": "Attach the `score point` block to the `when ball in goal` event and the `score opponent point` block to the `when ball misses hand` event to make a game. ",
        "courseD_bounce_events10s_2018_instruction": "Attach the `score point` block to the `when ball in goal` event and the `score opponent point` block to the `when ball misses hand` event to make a game. ",
        "courseD_bounce_events11_instruction": "You can now attach blocks to the \"when run\" block. You have to attach the new \"launch new ball\" block in more than one place. Also, try changing the scene or the speed of the paddle and the ball and see how many points you can score before your opponent scores twice.",
        "courseD_bounce_events11s_instruction": "Attach the `throw new ball` block in all of the places where the game needs a new ball. ",
        "courseD_bounce_events11s_2018_instruction": "Attach the `throw new ball` block in all of the places where the game needs a new ball. ",
        "courseD_bounce_events12_instruction": "Create your own Bounce game. You can change all the visuals and the rules. When you're done, click Finish to let friends try your game on their phones.",
        "courseD_bounce_events12s_instruction": "Make this game your own. You can change all the visuals and the rules. When you're done, click \"Finish\" to let friends try your game on their phones.",
        "courseD_bounce_events12s_2018_instruction": "Make this game your own. You can change all the visuals and the rules. When you're done, click \"Finish\" to let friends try your game on their phones.",
        "courseD_bounce_events1s_instruction": "Attach a block to the \"when left arrow\" block and press \"Run\" to move the player to the net.",
        "courseD_bounce_events1s_2018_instruction": "Attach a block to the \"when left arrow\" block and press \"Run\" to move the player to the net.",
        "courseD_bounce_events2_instruction": "Attach a block to the \"when right arrow\" and \"when left arrow\" blocks. Move the paddle to reach both finish targets.",
        "courseD_bounce_events2s_instruction": "Now, attach a block to the `when right event` so that the hand can get to both baskets.",
        "courseD_bounce_events2s_2018_instruction": "Now, attach a block to the `when right event` so that the hand can get to both baskets.",
        "courseD_bounce_events3_instruction": "Now try something similar with the \"when up arrow\" block. Move the paddle to the finish target at the top.",
        "courseD_bounce_events3s_instruction": "Now try something similar with the \"when up arrow\" block. Move the paddle to the finish target at the top.",
        "courseD_bounce_events4_instruction": "This time you need to add four blocks. Move the paddle to all four finish targets to complete this puzzle.",
        "courseD_bounce_events4s_instruction": "This time you need to add four blocks. Move the paddle to all four finish targets to complete this puzzle.",
        "courseD_bounce_events5_instruction": "We're going to send a ball flying down towards the paddle. Attach a block to the \"when ball hits paddle\" block to ensure the ball reaches the finish target.",
        "courseD_bounce_events5s_instruction": "Attach a block to the `when ball hits hand` event to ensure the ball reaches the basket.",
        "courseD_bounce_events5s_2018_instruction": "Attach a block to the `when ball hits hand` event to ensure the ball reaches the basket.",
        "courseD_bounce_events6_instruction": "Now the finish target is on the top. You need to attach blocks to both of the \"when ball hits\" blocks to solve this puzzle.",
        "courseD_bounce_events6s_instruction": "Attach code to make the ball bounce when it hits the wall so you can solve this puzzle.",
        "courseD_bounce_events6s_2018_instruction": "Attach code to make the ball bounce when it hits the wall so you can solve this puzzle.",
        "courseD_bounce_events7_instruction": "Attach blocks to each of the \"when\" blocks. Bounce the ball until it hits the finish target.",
        "courseD_bounce_events7s_instruction": "Attach sound blocks to make the net swish when you hit the basket and have the whistle blow when the ball misses your hand. Bounce the ball until it hits the finish target.",
        "courseD_bounce_events7s_2018_instruction": "Attach sound blocks to make the net swish when you hit the basket and have the whistle blow when the ball misses your hand. Bounce the ball until it hits the finish target.",
        "courseD_collector_debugging1_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging1_2018_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging1a_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging1a_2018_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging2_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging2_2018_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging2a_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging2a_2018_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging3_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging3_2018_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging3a_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging3a_2018_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging4_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging4_2018_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging4a_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging4a_2018_instruction": "Fix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging5_instruction": "All of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_collector_debugging5_2018_instruction": "All of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_collector_debugging5a_instruction": "All of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_collector_debugging5a_2018_instruction": "All of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_collector_debugging6_instruction": "Challenge: Use your debugging skills to fix the errors and collect all of the treasure.",
        "courseD_collector_debugging6_2018_instruction": "Challenge: Use your debugging skills to fix the errors and collect all of the treasure.",
        "courseD_collector_debugging6a_instruction": "Challenge: Use the code in the work area to get at least **6** pieces of treasure!",
        "courseD_collector_debugging6a_2018_instruction": "Challenge: Use the code in the work area to get at least **6** pieces of treasure!",
        "courseD_collector_debugging7_instruction": "Challenge: All of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_collector_debugging_challenge2_instruction": "Are you an expert at nested loops? Use what you have learned so far to collect all the treasure!",
        "courseD_collector_debugging_challenge2_2018_instruction": "Are you an expert at nested loops? Use what you have learned so far to collect all the treasure!",
        "courseD_collector_nested_loops_challenge2_instruction": "Help the collector reach at least two piles of treasure using only the blocks in your toolbox. It is possible to collect all 4.",
        "courseD_collector_nested_loops_challenge2_2018_instruction": "Help the collector reach at least two piles of treasure using only the blocks in your toolbox. It is possible to collect all 4.",
        "courseD_collector_nested_loops_challenge2a_instruction": "Help Laurel collect at least two piles of treasure.",
        "courseD_collector_ramp10_instruction": "Help Laurel collect all of the treasure.",
        "courseD_collector_ramp8_instruction": "Help Laurel collect all of the treasure.",
        "courseD_collector_ramp9_instruction": "Help Laurel collect all of the treasure.",
        "courseD_collector_until_challenge1_instruction": "Are you an expert of nested loops? Use what you have learned so far to collect all of the treasure!",
        "courseD_debugging_1_instruction": "Fix the error(s) to collect all of the nectar.",
        "courseD_debugging_2_instruction": "Fix the error(s) to collect all of the nectar.",
        "courseD_debugging_3_instruction": "Fix the error(s) to collect all of the nectar and make all of the honey.",
        "courseD_debugging_4_instruction": "Fix the error(s) to make all of the honey.",
        "courseD_debugging_5_instruction": "Challenge: All of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_debugging_6_instruction": "Challenge:  Fix the errors to collect all of the nectar and make all of the honey.",
        "courseD_farmer_condLoops1_instruction": "Use conditionals to make sure that you pick corn only when it's there.",
        "courseD_farmer_condLoops1_2018_instruction": "Use conditionals to make sure that you pick corn only when it's there.",
        "courseD_farmer_condLoops2_instruction": "Help the harvester collect both corn and lettuce from the field.",
        "courseD_farmer_condLoops2_2018_instruction": "Help the harvester collect both corn and lettuce from the field.",
        "courseD_farmer_condLoops3_instruction": "*\"Corn, lettuce, AND pumpkins! Help me harvest them all.\"*",
        "courseD_farmer_condLoops3_2018_instruction": "*\"Corn, lettuce, AND pumpkins! Help me harvest them all.\"*",
        "courseD_farmer_condLoops4_instruction": "Help the harvester pick all of the lettuce in each cluster before moving on to the next bunch.",
        "courseD_farmer_condLoops4_2018_instruction": "Help the harvester pick all of the lettuce in each cluster before moving on to the next bunch.",
        "courseD_farmer_condLoops4a_instruction": "Help the farmer pick all of the lettuce in each cluster before moving on to the next bunch.",
        "courseD_farmer_condLoops5_instruction": "Collect all of the corn and lettuce, then grab the pumpkin at the end.",
        "courseD_farmer_condLoops5_2018_instruction": "Collect all of the corn and lettuce, then grab the pumpkin at the end.",
        "courseD_farmer_condLoops6_instruction": "Can you figure out how to pick the pumpkin?  Make sure to collect all of the corn along the way!",
        "courseD_farmer_condLoops6_2018_instruction": "Can you figure out how to pick the pumpkin?  Make sure to collect all of the corn along the way!",
        "courseD_farmer_condLoops7_instruction": "Challenge: Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops7_2018_instruction": "Challenge: Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops8_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops8_2018_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops9_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops9_2018_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops9_predict1_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops9_predict1_2018_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops_challenge1_instruction": "Collect everything to complete the level. Each hidden crop has only one corn or lettuce.",
        "courseD_farmer_condLoops_challenge1_2018_instruction": "Collect everything to complete the level. Each hidden crop has only one corn or lettuce.",
        "courseD_farmer_condLoops_challenge2_instruction": "Collect everything to complete the level.",
        "courseD_farmer_condLoops_challenge2_2018_instruction": "Collect everything to complete the level.",
        "courseD_farmer_condLoops_challenge2_clone_instruction": "Collect everything to complete the level.",
        "courseD_farmer_conditionals1_instruction": "Move to the pile of dirt and use the `remove` block to remove it.",
        "courseD_farmer_conditionals10_instruction": "Flatten all of these piles using as few blocks as possible. ",
        "courseD_farmer_conditionals2_instruction": "Move to the hole and fill it with six shovelfuls of dirt, using the `fill` block.",
        "courseD_farmer_conditionals3_instruction": "Use as few blocks as possible to solve this puzzle.",
        "courseD_farmer_conditionals4_instruction": "Help the farmer remove this entire pile using a `while` loop.",
        "courseD_farmer_conditionals5_instruction": "Help me remove all of this dirt. ",
        "courseD_farmer_conditionals6_instruction": "Use the `while` loop to easily fill all of the holes.",
        "courseD_farmer_conditionals7_instruction": "Fill in the hole at the end of each of these paths.",
        "courseD_farmer_conditionals8_instruction": "Challenge: Fill all of these holes using as few blocks as possible. ",
        "courseD_farmer_conditionals9_instruction": "Flatten all of these piles using as few blocks as possible. ",
        "courseD_farmer_until_challenge2_instruction": "Use If/Else blocks to follow the curvy path. At each corner, use the `remove 1` command in a loop to clear the piles.",
        "courseD_farmer_until_challenge2_2018_instruction": "Use If/Else blocks to follow the curvy path. At each corner, use the `remove 1` command in a loop to clear the piles.",
        "courseD_farmer_while1_instruction": "Move to the pile of dirt and use the `remove` block to remove it.",
        "courseD_farmer_while10_instruction": "Flatten all of these piles using as few blocks as possible. ",
        "courseD_farmer_while10_2018_instruction": "Flatten all of these piles using as few blocks as possible. ",
        "courseD_farmer_while10_predict2_instruction": "Flatten all of these piles using as few blocks as possible. ",
        "courseD_farmer_while10_predict2_2018_instruction": "Flatten all of these piles using as few blocks as possible. ",
        "courseD_farmer_while1_2018_instruction": "Move to the pile of dirt and use the `remove` block to remove it.",
        "courseD_farmer_while2_instruction": "Move to the hole and fill it with six shovelfuls of dirt, using the `fill` block.",
        "courseD_farmer_while2_2018_instruction": "Move to the hole and fill it with six shovelfuls of dirt, using the `fill` block.",
        "courseD_farmer_while3_instruction": "Use as few blocks as possible to solve this puzzle.",
        "courseD_farmer_while3_2018_instruction": "Use as few blocks as possible to solve this puzzle.",
        "courseD_farmer_while4_instruction": "Help the farmer remove this entire pile using a `while` loop.",
        "courseD_farmer_while4_2018_instruction": "Help the farmer remove this entire pile using a `while` loop.",
        "courseD_farmer_while4_predict1_instruction": "Help the farmer remove this entire pile using a `while` loop.",
        "courseD_farmer_while4_predict1_2018_instruction": "Help the farmer remove this entire pile using a `while` loop.",
        "courseD_farmer_while5_instruction": "Help me remove all of this dirt. ",
        "courseD_farmer_while5_2018_instruction": "Help me remove all of this dirt. ",
        "courseD_farmer_while6_instruction": "Use the `while` loop to easily fill all of the holes.",
        "courseD_farmer_while6_2018_instruction": "Use the `while` loop to easily fill all of the holes.",
        "courseD_farmer_while7_instruction": "Fill in the hole at the end of each of these paths.",
        "courseD_farmer_while7_2018_instruction": "Fill in the hole at the end of each of these paths.",
        "courseD_farmer_while8_instruction": "Challenge: Fill all of these holes using as few blocks as possible. ",
        "courseD_farmer_while8_2018_instruction": "Challenge: Fill all of these holes using as few blocks as possible. ",
        "courseD_farmer_while9_instruction": "Flatten all of these piles using as few blocks as possible. ",
        "courseD_farmer_while9_2018_instruction": "Flatten all of these piles using as few blocks as possible. ",
        "courseD_farmer_while_challenge1_instruction": "Fill all of the holes and remove all of the piles.",
        "courseD_farmer_while_challenge1_2018_instruction": "Fill all of the holes and remove all of the piles.",
        "courseD_farmer_while_challenge2_instruction": "Fill all of the holes and remove all of the piles.",
        "courseD_farmer_while_challenge2_2018_instruction": "Fill all of the holes and remove all of the piles.",
        "courseD_harvester_nested_loops_challenge1-broken_instruction": "\"I need some help on the farm! Help me harvest this corn using only the blocks in your toolbox.\"",
        "courseD_harvester_nested_loops_challenge1_instruction": "\"I need some help on the farm! Help me harvest this corn using only the blocks in your toolbox.\"",
        "courseD_harvester_nested_loops_challenge1_2018_instruction": "\"I need some help on the farm! Help me harvest this corn using only the blocks in your toolbox.\"",
        "courseD_iceage_loops1_instruction": "Help Scrat across the ice to get to the acorn!",
        "courseD_iceage_loops10_instruction": "Help Scrat get all the way over to the acorn!",
        "courseD_iceage_loops11_instruction": "Help Scrat get to the acorn!",
        "courseD_iceage_loops12_instruction": "Get to the acorn any way you can!",
        "courseD_iceage_loops2_instruction": "Use a `turn left` block to get to the acorn!",
        "courseD_iceage_loops3_instruction": "Can you get to the acorn with just one `move forward` block?",
        "courseD_iceage_loops4_instruction": "Add one more block to get Scrat all the way to the acorn!",
        "courseD_iceage_loops6_instruction": "Can you add a loop to get to the acorn?",
        "courseD_iceage_loops7_instruction": "Scrat really wants that acorn! ",
        "courseD_iceage_loops8_instruction": "Can you fix this code? ",
        "courseD_iceage_loops9_instruction": "The acorn is so far away! Can you use loops to help Scrat get there?",
        "courseD_maze_loops_challenge1_instruction": "Let's hunt for treasure - using loops! Help the collector reach at least two piles of treasure using only the blocks in your toolbox.",
        "courseD_maze_nestedLoops3_instruction": "Get the zombie to the sunflower using the fewest number of blocks possible.",
        "courseD_maze_nestedLoops3_2018_instruction": "Get the zombie to the sunflower using the fewest number of blocks possible.",
        "courseD_maze_nestedLoops4_instruction": "Get the zombie to the sunflower using the fewest blocks possible!  ",
        "courseD_maze_nestedLoops4_2018_instruction": "Get the zombie to the sunflower using the fewest blocks possible!  ",
        "courseD_maze_nestedLoops5_instruction": "Get the zombie to the sunflower using the fewest number of blocks possible!",
        "courseD_maze_nestedLoops5_2018_instruction": "Get the zombie to the sunflower using the fewest number of blocks possible!",
        "courseD_maze_nestedLoops6_instruction": "Get the zombie to the sunflower using only the blocks available.",
        "courseD_maze_nestedLoops6_2018_instruction": "Get the zombie to the sunflower using only the blocks available.",
        "courseD_maze_ramp1_instruction": "For this puzzle, snap all of the blocks together and click \"Run\" to watch it go!",
        "courseD_maze_ramp1_2018_instruction": "For this puzzle, snap all of the blocks together and click \"Run\" to watch it go!",
        "courseD_maze_ramp2_instruction": "Drag an extra `move forward` block out of the toolbox, then attach all blocks to `when run` to finish your code.",
        "courseD_maze_ramp2_2018_instruction": "Drag an extra `move forward` block out of the toolbox, then attach all blocks to `when run` to finish your code.",
        "courseD_maze_ramp3_instruction": "There is one extra block that is going to cause the bird to crash. Throw it away by dragging it back to the toolbox.",
        "courseD_maze_ramp3_2018_instruction": "There is one extra block that is going to cause the bird to crash. Throw it away by dragging it back to the toolbox.",
        "courseD_maze_ramp4_instruction": "Avoid TNT or feathers will fly!",
        "courseD_maze_ramp4_2018_instruction": "Avoid TNT or feathers will fly!",
        "courseD_maze_ramp5_instruction": "Avoid the TNT.",
        "courseD_maze_ramp5_2018_instruction": "Avoid the TNT.",
        "courseD_maze_ramp5a_instruction": "Pay attention to the sequence and see if you can figure out how to get to that pig!",
        "courseD_maze_ramp5a_2018_instruction": "Pay attention to the sequence and see if you can figure out how to get to that pig!",
        "courseD_maze_ramp5b_instruction": "Navigate this maze to help the bird find the pig!",
        "courseD_maze_ramp5b_2018_instruction": "Navigate this maze to help the bird find the pig!",
        "courseD_maze_ramp5c_instruction": "Help the bird get to the pig.",
        "courseD_maze_ramp5c_2018_instruction": "Help the bird get to the pig.",
        "courseD_maze_ramp5d_instruction": "Get the bird to the pig.",
        "courseD_maze_ramp5d_2018_instruction": "Get the bird to the pig.",
        "courseD_maze_ramp6_instruction": "\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"",
        "courseD_maze_ramp6a_instruction": "\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"",
        "courseD_maze_ramp7_instruction": "Get the bird to the pig!",
        "courseD_maze_until1_instruction": "Get the angry bird to the pig.",
        "courseD_maze_until10_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until10_2018_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until10_predict2_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until10_predict2_2018_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until1_2018_instruction": "Get the angry bird to the pig.",
        "courseD_maze_until2_instruction": "Now, use the `repeat until` loop to do the same thing without specifying how many times to move forward and turn.",
        "courseD_maze_until3_instruction": "Get the bird to the pig.",
        "courseD_maze_until3_2018_instruction": "Get the bird to the pig.",
        "courseD_maze_until4_instruction": "Can you get the zombie to the sunflower using only the blocks that are available?",
        "courseD_maze_until4_2018_instruction": "Can you get the zombie to the sunflower using only the blocks that are available?",
        "courseD_maze_until5_instruction": "Use the `if` block to help the zombie decide when to turn, then get the zombie to the sunflower.",
        "courseD_maze_until5_2018_instruction": "Use the `if` block to help the zombie decide when to turn, then get the zombie to the sunflower.",
        "courseD_maze_until6_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until6_2018_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until7_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until7_2018_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until8_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until8_2018_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until9_instruction": "**Challenge:** Avoid the chompers and help the zombie get to the sunflower.",
        "courseD_maze_until9_2018_instruction": "**Challenge:** Avoid the chompers and help the zombie get to the sunflower.",
        "courseD_maze_until_challenge_instruction": "No hints, just challenge. Get the zombie to the sunflower.",
        "courseD_maze_until_challenge1-delete-this-copy_instruction": "No hints, just challenge. Get the zombie to the sunflower.",
        "courseD_maze_until_challenge1_instruction": "No hints, just challenge. Get the zombie to the sunflower.",
        "courseD_maze_until_challenge1_2018_instruction": "No hints, just challenge. Get the zombie to the sunflower.",
        "courseD_maze_until_challenge2_instruction": "No hints, just challenge. Get the zombie to the sunflower.",
        "courseD_pixelation_instruction": "Encode an image of anything you like using binary. The binary language will be represented with '0' and '1' only.",
        "courseD_playLab_cond1_instruction": "Get Pegleg to the flags to solve this puzzle.",
        "courseD_playLab_cond1_2018_instruction": "Get Pegleg to the flags to solve this puzzle.",
        "courseD_playLab_cond2_instruction": "Give Pegleg a point every time he makes it to the dragon. ",
        "courseD_playLab_cond2_2018_instruction": "Give Pegleg a point every time he makes it to the dragon. ",
        "courseD_playLab_cond3_instruction": "Make the dragon change between random emotions every second.  ",
        "courseD_playLab_cond3_2018_instruction": "Make the dragon change between random emotions every second.  ",
        "courseD_playLab_cond3a_instruction": "Make it so when Pegleg gets to the dragon, he gets 2 points if the dragon is happy and 1 otherwise.",
        "courseD_playLab_cond3a_2018_instruction": "Make it so when Pegleg gets to the dragon, he gets 2 points if the dragon is happy and 1 otherwise.",
        "courseD_playLab_cond4_instruction": "Add some code so that the ninja (actor 3) starts chasing Pegleg as soon as the game begins.  End the game as a loss if the ninja catches him.",
        "courseD_playLab_cond4_2018_instruction": "Add some code so that the ninja (actor 3) starts chasing Pegleg as soon as the game begins.  End the game as a loss if the ninja catches him.",
        "courseD_playLab_cond5_instruction": "Add a `repeat forever` loop that continuously checks if the score is greater than 5, then ends the game as a win when it is.",
        "courseD_playLab_cond5_2018_instruction": "Add a `repeat forever` loop that continuously checks if the score is greater than 5, then ends the game as a win when it is.",
        "courseD_playLab_cond6a_instruction": "If the pirate (actor 1) is in the safe zone, wait one second, then deduct a point as long as he stays beneath the octopus line.",
        "courseD_playLab_cond6a_2018_instruction": "If the pirate (actor 1) is in the safe zone, wait one second, then deduct a point as long as he stays beneath the octopus line.",
        "courseD_playLab_cond6cloneForTest_instruction": "Testing",
        "courseD_playLab_condFP_instruction": "Now, build your own game to show off to your friends!",
        "courseD_playLab_condFP_2018_instruction": "Now, build your own game to show off to your friends!",
        "courseD_playLab_condFP_a_instruction": "Now, build your own game to show off to your friends!",
        "courseD_playLab_condForVideo_instruction": "Now, build your own game to show off to your friends!",
        "courseD_playLab_embedded_instruction": "Move Pegleg the Pirate with the arrow keys. Get to the dragon to score points, but avoid the ninja! Standing below the line of octopuses will make the ninja stop chasing you, but beware! The longer you stay there, the more points you lose. \n\nGet 5 points to win!",
        "courseD_scrat_ramp1_instruction": "For this puzzle, snap all of the blocks together and click \"Run\" to watch it go!",
        "courseD_scrat_ramp1_2018_instruction": "For this puzzle, snap all of the blocks together and click \"Run\" to watch it go!",
        "courseD_scrat_ramp2_instruction": "Drag an extra `move forward` block out of the toolbox, then attach all blocks to `when run` to finish your code.",
        "courseD_scrat_ramp2_2018_instruction": "Drag an extra `move forward` block out of the toolbox, then attach all blocks to `when run` to finish your code.",
        "courseD_scrat_ramp3_instruction": "There is one extra block that is going to cause Scrat to crash. Throw it away by dragging it back to the toolbox.",
        "courseD_scrat_ramp3_2018_instruction": "There is one extra block that is going to cause Scrat to crash. Throw it away by dragging it back to the toolbox.",
        "courseD_scrat_ramp4_instruction": "Avoid the cracked ice to keep Scrat safe!",
        "courseD_scrat_ramp4_2018_instruction": "Avoid the cracked ice to keep Scrat safe!",
        "courseD_scrat_ramp5_instruction": "Avoid the cracked ice.",
        "courseD_scrat_ramp5_2018_instruction": "Avoid the cracked ice.",
        "courseD_scrat_ramp6_instruction": "Help Scrat get to the acorn using a loop!",
        "courseD_scrat_ramp6_2018_instruction": "Help Scrat get to the acorn using a loop!",
        "courseD_scrat_ramp7_instruction": "Help Scrat get to the acorn!",
        "courseD_scrat_ramp7_2018_instruction": "Help Scrat get to the acorn!",
        "courseD_scrat_ramp8_instruction": "Use what you've learned to get Scrat to the acorn!",
        "courseD_scrat_ramp8_2018_instruction": "Use what you've learned to get Scrat to the acorn!",
        "courseE_artist_concept1_instruction": "Recreate this image. ",
        "courseE_artist_concept1_2018_instruction": "Recreate this image. ",
        "courseE_artist_concept4_instruction": "Recreate this drawing.",
        "courseE_artist_concept4_2018_instruction": "Recreate this drawing.",
        "courseE_artist_concept_challenge1_instruction": "Help the artist draw this unique shape. ",
        "courseE_artist_concept_challenge1_2018_instruction": "Help the artist draw this unique shape. ",
        "courseE_artist_concept_challenge2_instruction": "Create five pinwheel designs using the code below.",
        "courseE_artist_concept_challenge2_2018_instruction": "Create five pinwheel designs using the code below.",
        "courseE_artist_embed_functions8_instruction": "Look at this level carefully. What kind of functions do you see a program needing in order to create a design like this. You'll soon make this on your own, so come back here if you need help.",
        "courseE_artist_functions1_instruction": "Help the zombie draw glasses using squares with sides of 100 pixels.  \nThe bridge between the glasses is 75 pixels long.",
        "courseE_artist_functions10_instruction": "This time, use lines of 8 hexagons with 25 pixel sides.",
        "courseE_artist_functions10_2018_instruction": "This time, use lines of 8 hexagons with 25 pixel sides.",
        "courseE_artist_functions1_2018_instruction": "Help the zombie draw glasses using squares with sides of 100 pixels.  \nThe bridge between the glasses is 75 pixels long.",
        "courseE_artist_functions2_instruction": "This time, use the `draw a square` function to create the glasses. ",
        "courseE_artist_functions2_2018_instruction": "Use the `draw a square` function to create the glasses. ",
        "courseE_artist_functions3_instruction": "You can make this drawing by adding a repeat block.",
        "courseE_artist_functions3_2018_instruction": "Build a function that will create this star.",
        "courseE_artist_functions4_instruction": "Now that you can draw a star, try drawing four stars!",
        "courseE_artist_functions4_2018_instruction": "Now that you can draw a star, try drawing four stars!",
        "courseE_artist_functions5_instruction": "Draw only those three stars to finish this puzzle.",
        "courseE_artist_functions5_2018_instruction": "Draw only those three stars to finish this puzzle.",
        "courseE_artist_functions6_instruction": "Make this window by drawing a square, then turning 90 degrees before drawing another, and so on.",
        "courseE_artist_functions6_2018_instruction": "Make this window by drawing a square, then turning 90 degrees before drawing another, and so on.",
        "courseE_artist_functions7_instruction": "Try solving this puzzle by creating `draw a window` and calling it five times. Watch out for the door!",
        "courseE_artist_functions7_2018_instruction": "Try solving this puzzle by creating `draw a window` and calling it five times. Watch out for the door!",
        "courseE_artist_functions8_instruction": "Challenge: Create as many functions as you think you need to make this drawing of 50 pixel squares.",
        "courseE_artist_functions8_2018_instruction": "Use everything you've learned so far to recreate this design.",
        "courseE_artist_functions8a_2018_instruction": "Create a function for a single square.",
        "courseE_artist_functions8b_2018_instruction": "Call the `draw a square` function from inside your `draw a line of squares` function to make this even easier!",
        "courseE_artist_functions8c_2018_instruction": "Add one more function that creates this stack of staggered squares.",
        "courseE_artist_functions9_instruction": "Create this image using only the blocks provided.",
        "courseE_artist_functions9_2018_instruction": "**Challenge:** Create this image using only the blocks provided.",
        "courseE_artist_functionsProj_2018_instruction": "**Inspiration:** Use what you've learned to make whatever you want!",
        "courseE_artist_functions_challenge_instruction": "Once you define a function, you can call it over and over again - whenever and wherever you want! Try this code to see how it works, then change it to make your own impressive design!",
        "courseE_artist_functions_challenge1_instruction": "Once you define a function, you can call it over and over again - whenever and wherever you want! Try this code to see how it works, then change it to make your own impressive design!",
        "courseE_artist_functions_challenge1_2018_instruction": "Once you define a function, you can call it over and over again - whenever and wherever you want! Try this code to see how it works, then change it to make your own impressive design!",
        "courseE_artist_functions_challenge2_instruction": "Try this code to see how it works, then make the program your own!",
        "courseE_artist_functions_challenge2_2018_instruction": "Try this code to see how it works, then make the program your own!",
        "courseE_artist_ramp10_instruction": "Now, drag the code for the last triangle into a new loop to spin it around and make a snowflake!",
        "courseE_artist_ramp11_instruction": "Now make a square using Artist!",
        "courseE_artist_ramp12_instruction": "Use what you've learned to draw this triangle inside of a square.",
        "courseE_artist_ramp8_instruction": "Now make a square using Artist!",
        "courseE_artist_ramp8_2_instruction": "Now make a square using Artist!",
        "courseE_artist_ramp8_2018_instruction": "Now make a square using Artist!",
        "courseE_artist_ramp8_2_2018_instruction": "Now make a square using Artist!",
        "courseE_artist_ramp9_instruction": "Use what you've learned to draw this triangle.",
        "courseE_artist_ramp9_2_instruction": "Use what you've learned to draw this triangle.",
        "courseE_artist_ramp9_2018_instruction": "Use what you've learned to draw this triangle.",
        "courseE_artist_ramp9_2_2018_instruction": "Use what you've learned to draw this triangle.",
        "courseE_bee_concept1_instruction": "Collect all of the nectar from each flower.",
        "courseE_bee_concept1_2018_instruction": "Collect all of the nectar from each flower.",
        "courseE_bee_concept2_instruction": "Help the bee make all of the honey. ",
        "courseE_bee_concept2_2018_instruction": "Help the bee make all of the honey. ",
        "courseE_bee_concept3_instruction": "Collect all of the nectar using  as few blocks as possible.",
        "courseE_bee_concept3_2018_instruction": "Collect all of the nectar using  as few blocks as possible.",
        "courseE_bee_concept4_instruction": "Uh oh! The bee is not sure if he should collect nectar or make honey. Can you help him out?",
        "courseE_bee_concept4_2018_instruction": "Uh oh! The bee is not sure if he should collect nectar or make honey. Can you help him out?",
        "courseE_bee_concept5_instruction": "Help the bee collect the nectar from the flowers?",
        "courseE_bee_concept5_2018_instruction": "Help the bee collect the nectar from the flowers?",
        "courseE_bee_functions1_instruction": "Collect all the nectar from each flower.",
        "courseE_bee_functions10_instruction": "Solve this puzzle by creating a function that helps the bee go get all of the honey before returning back to the main path.",
        "courseE_bee_functions10_2018_instruction": "Solve this puzzle by creating a function that helps the bee go get all of the honey before returning back to the main path.",
        "courseE_bee_functions1_2018_instruction": "Collect all the nectar from each flower.",
        "courseE_bee_functions2_instruction": "Use the `get 2 nectar` function to collect the nectar from each flower.",
        "courseE_bee_functions2_2018_instruction": "Use the `get 2 nectar` function to collect the nectar from each flower.",
        "courseE_bee_functions3_instruction": "Build the `get 5` function to use in this puzzle.",
        "courseE_bee_functions3_2018_instruction": "Build the `get 5` function to use in this puzzle.",
        "courseE_bee_functions4_instruction": "Use the `move and get nectar` function to collect all of the nectar.",
        "courseE_bee_functions4_2018_instruction": "Use the `move and get nectar` function to collect all of the nectar.",
        "courseE_bee_functions5_instruction": "Now write the function to collect nectar from the flowers.",
        "courseE_bee_functions5_2018_instruction": "Now write the function to collect nectar from the flowers.",
        "courseE_bee_functions6_instruction": "Create a function and call it to collect nectar at each flower and make honey at each honeycomb.",
        "courseE_bee_functions6_2018_instruction": "Create a function and call it to collect nectar at each flower and make honey at each honeycomb.",
        "courseE_bee_functions6test_instruction": "Create a function and call it to collect nectar at each flower and make honey at each honeycomb.",
        "courseE_bee_functions7_instruction": "Create your own function that goes down a path, gets nectar, makes honey, and then returns the bee to the top of the path. Collect all the nectar and make all the honey!",
        "courseE_bee_functions7_2018_instruction": "Create your own function that goes down a path, gets nectar, makes honey, and then returns the bee to the top of the path. Collect all the nectar and make all the honey!",
        "courseE_bee_functions8_instruction": "Create a function that collects all of the nectar from each flower.",
        "courseE_bee_functions8_2018_instruction": "Create a function that collects all of the nectar from each flower.",
        "courseE_bee_functions9_instruction": "Create a function to collect all of the nectar from each flower.",
        "courseE_bee_functions9_2018_instruction": "Create a function to collect all of the nectar from each flower.",
        "courseE_bee_functions9b_instruction": "Now try it in Bee!",
        "courseE_bee_functions_challenge1_instruction": "You are on your own for this challenge. This could \"bee\" harder than it looks!",
        "courseE_bee_functions_challenge1_2018_instruction": "You are on your own for this challenge. This could \"bee\" harder than it looks!",
        "courseE_bee_functions_challenge2_instruction": "You are on your own for this challenge. Sweet!",
        "courseE_bee_functions_challenge2_2018_instruction": "You are on your own for this challenge. Sweet!",
        "courseE_bee_ramp14_instruction": "Help the bee follow the path to gather all of the honey and all of the nectar.",
        "courseE_bee_ramp14_2018_instruction": "Help the bee follow the path to gather all of the honey and all of the nectar.",
        "courseE_bee_ramp17_instruction": "Use what you have learned to solve this puzzle.",
        "courseE_collector_ramp10_instruction": "Help Laurel collect all of the treasure.",
        "courseE_collector_ramp8_instruction": "Help Laurel collect all of the treasure.",
        "courseE_collector_ramp9_instruction": "Help Laurel collect all of the treasure.",
        "courseE_farmer_concept1_instruction": "Can you write a program that fills these holes until the ground is even?",
        "courseE_farmer_concept1_2018_instruction": "Can you write a program that fills these holes until the ground is even?",
        "courseE_farmer_concept2_instruction": "Collect all of the pumpkins.",
        "courseE_farmer_concept2_2018_instruction": "Collect all of the pumpkins.",
        "courseE_farmer_concept3_instruction": "Fill in the hole at the end of each of these paths.",
        "courseE_farmer_concept3_2018_instruction": "Fill in the hole at the end of each of these paths.",
        "courseE_farmer_concept4_instruction": "Now let's go one level deeper! We've nested that whole block of code into another loop, but you need to get the artist back in place to draw the next line. Which of these code blocks can you place at the end of the outermost loop to draw the whole grid?",
        "courseE_farmer_elseif_test_instruction": "Fill in the hole at the end of each of these paths.",
        "courseE_farmer_functions1_instruction": "Help the harvester get to the pumpkin and pick it.",
        "courseE_farmer_functions10_instruction": "No one knows what these sprouts will become.  Use `if` statements to write the code to check and harvest each one.   ",
        "courseE_farmer_functions10a1_2018_instruction": "Use everything that you've learned so far to solve this puzzle!",
        "courseE_farmer_functions10b_instruction": "Use your new function twice to solve this puzzle.",
        "courseE_farmer_functions10b_2018_instruction": "Use your new function twice to solve this puzzle.",
        "courseE_farmer_functions13_2018_instruction": "Solve this puzzle in 23 blocks or less.",
        "courseE_farmer_functions1_2018_instruction": "Help the harvester get to the pumpkin and pick it.",
        "courseE_farmer_functions1a_instruction": "Now help the harvester pick the corn, lettuce, **and** pumpkin.",
        "courseE_farmer_functions1a_2018_instruction": "Help the harvester pick all of the corn, then the pumpkin.",
        "courseE_farmer_functions2_instruction": "Now, there will be a different number of pumpkins each time you run the program.   \n\nUse the `while` block to pick only as many pumpkins as you need.",
        "courseE_farmer_functions2a_instruction": "We're going to check lots of squares for crops in the next few puzzles.  Let's move everything into a function to make it easier.",
        "courseE_farmer_functions2aALT_instruction": "We're going to check lots of squares for crops in the next few puzzles.  Let's move everything into a function to make it easier.",
        "courseE_farmer_functions2b_instruction": "Help the harvester pick the corn and pumpkins.",
        "courseE_farmer_functions2b_2018_instruction": "Help the harvester pick the corn and pumpkins.",
        "courseE_farmer_functions2ba_instruction": "Help the farmer pick the corn and pumpkins using the `corn and pumpkin` function.",
        "courseE_farmer_functions2ba_2018_instruction": "Help the farmer pick the corn and pumpkins using the `corn and pumpkin` function.",
        "courseE_farmer_functions3_instruction": "What happens when the paths to the pumpkins are all different lengths?   \n\nGet them all with as few blocks as possible.",
        "courseE_farmer_functions3b_instruction": "Now help the farmer pick the corn, lettuce, **and** pumpkin.",
        "courseE_farmer_functions3c_instruction": "Now, fill-in the function yourself by pulling the blocks from the code and dropping them into the **function definition**.",
        "courseE_farmer_functions3c1_2018_instruction": "This function calls other functions!",
        "courseE_farmer_functions3c_2018_instruction": "Try on a longer path.",
        "courseE_farmer_functions4_instruction": "Great!  Now you have code that will work to get pumpkins from any size path.\n\nLet's drag that code into a function so we can use it in lots of ways...but first use it to solve this puzzle again.",
        "courseE_farmer_functions4b_instruction": "Use your new function to solve this puzzle.",
        "courseE_farmer_functions4b_2018_instruction": "Use your new function to solve this puzzle.",
        "courseE_farmer_functions5_instruction": "How can you change your program to get this function to work for each of these paths?",
        "courseE_farmer_functions5a_instruction": "How can you change your program to get this function to work for each of these paths?",
        "courseE_farmer_functions5b_instruction": "The crops are now growing in clusters.  Add some new `while` loops to your function to make sure you get all of the produce.",
        "courseE_farmer_functions5c_instruction": "Your function will come in handy here.",
        "courseE_farmer_functions5c_2018_instruction": "Your function will come in handy here.",
        "courseE_farmer_functions6_instruction": "*\"Lettuce try something new!\"*\n\nHere's some code to collect all of the lettuce.  Move it into a function so we can use it later.",
        "courseE_farmer_functions6b_instruction": "Pick all of the produce.",
        "courseE_farmer_functions6c_instruction": "What do you need to add this program to check whether a sprout is corn or lettuce?",
        "courseE_farmer_functions6c_2018_instruction": "What do you need to add this program to check whether a sprout is corn or lettuce?",
        "courseE_farmer_functions7_instruction": "Use your functions to solve this puzzle.",
        "courseE_farmer_functions7a1_2018_instruction": "Create a function that sends the harvester down a square path to pick a single head of lettuce from the middle of each row.",
        "courseE_farmer_functions7b_instruction": "Help the harvester find her way down this confusing path and to the pumpkin by turning left at the corn and right at the lettuce.",
        "courseE_farmer_functions7b_2018_instruction": "Help the harvester find her way down this confusing path and to the pumpkin by turning left at the corn and right at the lettuce.",
        "courseE_farmer_functions8_instruction": "**Challenge:**  Solve this puzzle with as few blocks as possible.",
        "courseE_farmer_functions8a1_2018_instruction": "Is your function still helpful?",
        "courseE_farmer_functions8b_instruction": "**Challenge:** Collect all of the pumpkins using the method from the last puzzle. ",
        "courseE_farmer_functions8b_2018_instruction": "**Challenge:** Collect all of the pumpkins using the method from the last puzzle. ",
        "courseE_farmer_functions9_instruction": "Use conditionals to simplify your program.",
        "courseE_farmer_functions9a1_2018_instruction": "Is your function still helpful?",
        "courseE_farmer_functions9b_instruction": "Can you figure out the pattern that you need to solve this puzzle?",
        "courseE_farmer_functions9b_2018_instruction": "Can you figure out the pattern that you need to solve this puzzle?",
        "courseE_farmer_functions9b_clone_instruction": "Can you figure out the pattern that you need to solve this puzzle?",
        "courseE_farmer_predict1_instruction": "Pick all of the lettuce (only while there is some to pick.)",
        "courseE_farmer_predict1_2018_instruction": "Pick all of the lettuce (only while there is some to pick.)",
        "courseE_farmer_ramp11_instruction": "This puzzle also uses nested loops.  Can you figure out how?",
        "courseE_farmer_ramp11a_instruction": "While there is a pile, remove dirt.",
        "courseE_farmer_ramp11a_2018_instruction": "While there is a pile, remove dirt.",
        "courseE_farmer_ramp11b_instruction": "While there is a pile, remove dirt.",
        "courseE_farmer_ramp11b_2018_instruction": "While there is a pile, remove dirt.",
        "courseE_farmer_ramp12_instruction": "Now use nested loops to solve this puzzle.",
        "courseE_farmer_ramp12_2018_instruction": "Now use nested loops to solve this puzzle.",
        "courseE_farmer_ramp12_forswap_instruction": "Now use nested loops to solve this puzzle.",
        "courseE_farmer_ramp12_forswap_2018_instruction": "Now use nested loops to solve this puzzle.",
        "courseE_farmer_ramp12a_instruction": "Help the farmer correctly travel the path to gather all of the lettuce.",
        "courseE_farmer_ramp12a_2018_instruction": "Help the farmer correctly travel the path to gather all of the lettuce.",
        "courseE_farmer_ramp12b_instruction": "While there is lettuce, pick lettuce!",
        "courseE_farmer_ramp12b_2018_instruction": "While there is lettuce, pick lettuce!",
        "courseE_farmer_ramp12c_instruction": "Move forward until you reach the lettuce, then pick it all using a `while` loop.",
        "courseE_farmer_ramp12c_2018_instruction": "Move forward until you reach the lettuce, then pick it all using a `while` loop.",
        "courseE_farmer_ramp12d_instruction": "Move forward until you reach the lettuce, then pick it all using a `while` loop.",
        "courseE_farmer_ramp12d_2018_instruction": "Move forward until you reach the lettuce, then pick it all using a `while` loop.",
        "courseE_farmer_ramp12e_instruction": "Move forward until you reach the lettuce, then pick it all using a `while` loop.",
        "courseE_farmer_ramp12e_2018_instruction": "Move forward until you reach the lettuce, then pick it all using a `while` loop.",
        "courseE_farmer_ramp12f_instruction": "Move forward until you reach the lettuce, then turn left **if** there is a path to the left.  Otherwise, turn right.",
        "courseE_farmer_ramp12f_2018_instruction": "Move forward until you reach the lettuce, then turn left **if** there is a path to the left.  Otherwise, turn right.",
        "courseE_farmer_ramp12g_instruction": "Move forward until you reach the lettuce, then turn left **if** there is a path to the left.  Otherwise, turn right.",
        "courseE_farmer_ramp12g_2018_instruction": "Move forward until you reach the lettuce, then turn left **if** there is a path to the left.  Otherwise, turn right.",
        "courseE_farmer_ramp13_instruction": "Pick corn if there is corn, and pick lettuce while there is lettuce.",
        "courseE_farmer_ramp13_2018_instruction": "Pick corn if there is corn, and pick lettuce while there is lettuce.",
        "courseE_farmer_ramp15_instruction": "Solve this puzzle using only the blocks available.",
        "courseE_farmer_ramp15_2018_instruction": "Solve this puzzle using only the blocks available.",
        "courseE_farmer_ramp16_instruction": "**Challenge:** Solve this puzzle with the fewest number of blocks.",
        "courseE_maze_predict1_instruction": "This code includes a new block. What do you think would happen if you press the \"Run\" block?",
        "courseE_maze_predict1_2018_instruction": "This code includes a new block. What do you think would happen if you press the \"Run\" block?",
        "courseE_maze_ramp1_instruction": "For this puzzle, drag all of the blocks together and click \"Run\" to watch it go!",
        "courseE_maze_ramp13_instruction": "Time for one last puzzle to pull it all together!",
        "courseE_maze_ramp1_2018_instruction": "For this puzzle, drag all of the blocks together and click \"Run\" to watch it go!",
        "courseE_maze_ramp2_instruction": "Drag an extra `move forward` block out of the toolbox, then attach all blocks to `when run` to finish your code.",
        "courseE_maze_ramp2_2018_instruction": "Drag an extra `move forward` block out of the toolbox, then attach all blocks to `when run` to finish your code.",
        "courseE_maze_ramp3_instruction": "There is one extra block that is going to cause the bird to crash. Throw it away by dragging it back to the toolbox.",
        "courseE_maze_ramp3_2018_instruction": "There is one extra block that is going to cause the bird to crash. Throw it away by dragging it back to the toolbox.",
        "courseE_maze_ramp4_instruction": "Avoid TNT or feathers will fly!",
        "courseE_maze_ramp4_2018_instruction": "Avoid TNT or feathers will fly!",
        "courseE_maze_ramp5_instruction": "Avoid the TNT.",
        "courseE_maze_ramp5_2018_instruction": "Avoid the TNT.",
        "courseE_maze_ramp6_instruction": "\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"",
        "courseE_maze_ramp6_2018_instruction": "\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"",
        "courseE_maze_ramp7_instruction": "Use what you've learned to get the bird to the pig!",
        "courseE_maze_ramp7_2018_instruction": "Use what you've learned to get the bird to the pig!",
        "courseE_maze_ramp_predict1_instruction": "This code includes a new block. What do you think would happen if you press the \"Run\" block?",
        "courseE_multi_maze_ramp5_instruction": "Avoid the TNT.",
        "courseE_playLab_challenge1_instruction": "Something should happen when you get enough points or when you run out of points. Add some code to the `win game` and `lose game` functions to make the game work the way it should. \nClick the hints for ideas!",
        "courseE_playLab_challenge1_2018_instruction": "Something should happen when you get enough points or when you run out of points. Add some code to the `win game` and `lose game` functions to make the game work the way it should. \nClick the hints for ideas!",
        "courseE_playLab_embedded_instruction": "This is an example game you can play around with. Move the dog with your arrow keys. When the dog touches one of the cats, he scores a point! Score 5 points to win!",
        "courseE_playLab_exampleProject2_instruction": "Here's all of your code to choose a card - try adding some other fun features!",
        "courseE_playLab_scaffold1_instruction": "Choose a background and map, and pick an actor to be your game's hero.",
        "courseE_playLab_scaffold1_2018_instruction": "Choose a background and map, and pick an actor to be your game's hero.",
        "courseE_playLab_scaffold2_instruction": "Use event handlers and actions to make your hero move.",
        "courseE_playLab_scaffold2_2018_instruction": "Use event handlers and actions to make your hero move.",
        "courseE_playLab_scaffold3_instruction": "Add two or more additional actors to your game and make them move.",
        "courseE_playLab_scaffold3_2018_instruction": "Add two or more additional actors to your game and make them move.",
        "courseE_playLab_scaffold4_instruction": "Find some interesting ways to change the score in your game. Get the score to show something other than 0 to continue.",
        "courseE_playLab_scaffold4_2018_instruction": "Find some interesting ways to change the score in your game. Get the score to show something other than 0 to continue.",
        "courseE_playLab_scaffold5_instruction": "Now spend some time making sure the game works the way you want. Include a way to win or lose your game, then play until you meet one of those conditions.",
        "courseE_playLab_scaffold5_2018_instruction": "Now spend some time making sure the game works the way you want. Include a way to win or lose your game, then play until you meet one of those conditions.",
        "courseE_playLab_scaffold6_instruction": "You've finished! Now you can play your game or share it with your friends and classmates!",
        "courseE_playLab_scaffold6_2018_instruction": "You've finished! Now you can play your game or share it with your friends and classmates!",
        "courseE_playlab_challenge2_instruction": "Can you figure out how this \"Fortune Teller\" app works? Click `MORE` to see your challenges.",
        "courseE_playlab_variables_challenge2_instruction": "Can you figure out how this \"Fortune Teller\" app works? Click `MORE` to see your challenges.",
        "courseE_video_createFunctions_instruction": "We don't have a video for creating functions, yet. This is a placeholder.",
        "courseE_video_createFunctions2_instruction": "We don't have a video for creating functions, yet. This is a placeholder.",
        "courseE_video_createFunctions2_2018_instruction": "We don't have a video for creating functions, yet. This is a placeholder.",
        "courseE_video_createFunctions_2018_instruction": "We don't have a video for creating functions, yet. This is a placeholder.",
        "courseF_IceAge_1_instruction": "Help Sid say \"Hello!\" by dragging the `actor 1 say` block out and connecting it to the bottom of the `when run` event.",
        "courseF_IceAge_10_instruction": "Use the `actor __ throw` command to have Sid (actor 1) throw hearts at Granny (actor 2) and set Granny's mood to happy when she gets hit with them.",
        "courseF_IceAge_11_instruction": "Time to create your own game or story! ",
        "courseF_IceAge_2_instruction": "Help Manny and Sid greet each other by using the the `actor ___ say` block twice.",
        "courseF_IceAge_3_instruction": "Scrat is looking for his acorn! Can you help him move the last 200 pixels?",
        "courseF_IceAge_4_instruction": "Connect a block to the `when actor touches` event to play a sound when Diego finds Manny.",
        "courseF_IceAge_5_instruction": "Help Granny get some exercise by moving left and right repeatedly.",
        "courseF_IceAge_6_instruction": "Can you help Sid call for his friends when you click on him? ",
        "courseF_IceAge_7_instruction": "Write the code to help Scrat get all of the acorns!",
        "courseF_IceAge_8_instruction": "Can you finish this program to make it so that you both **play a sound** and **score a point** when Sid and Granny collide? ",
        "courseF_IceAge_9_instruction": "Change the scene to an icy background and set Sid’s (actor 1) speed to fast.",
        "courseF_IceAge_template_instruction": "Write the code to help Scrat get all of the acorns!",
        "courseF_artist_embed_for7_instruction": "Press Run to see a program in action! This one uses for loops.",
        "courseF_artist_embed_variables9_instruction": "Press Run to see this program in action!",
        "courseF_artist_for1_instruction": "Experiment with the `for` loop and play with the `counter` variable.",
        "courseF_artist_for10_instruction": "Free Play: Try using the `counter` variable with other drawing elements to make magical images like this one.",
        "courseF_artist_for10_2018_instruction": "Free Play: Try using the `counter` variable with other drawing elements to make magical images like this one.",
        "courseF_artist_for1_2018_instruction": "Experiment with the `for` loop and play with the `counter` variable.",
        "courseF_artist_for2_instruction": "Create this stack of triangles that goes from 50 pixel to 100 pixel sides.",
        "courseF_artist_for2_2018_instruction": "Create this stack of triangles that goes from 50 pixel to 100 pixel sides.",
        "courseF_artist_for3_instruction": "These triangles go from 20 pixel sides to 200 pixel sides, and each triangle is 20 pixels larger than the last. ",
        "courseF_artist_for3_2018_instruction": "These triangles go from 20 pixel sides to 200 pixel sides, and each triangle is 20 pixels larger than the last. ",
        "courseF_artist_for4_instruction": "These squares start at 15 pixels long. The largest is 300 pixels long, and each square is 15 pixels larger than the last. ",
        "courseF_artist_for4_2018_instruction": "These squares start at 15 pixels long. The largest is 300 pixels long, and each square is 15 pixels larger than the last. ",
        "courseF_artist_for5_instruction": "Just one little change to the code from the last image can create this drawing. Can you figure out what that change is?",
        "courseF_artist_for5_2018_instruction": "Just one little change to the code from the last image can create this drawing. Can you figure out what that change is?",
        "courseF_artist_for6_instruction": "Recreate your code from the last level, but turn 89 degrees to create this twisted square spiral.",
        "courseF_artist_for6_2018_instruction": "Recreate your code from the last level, but turn 89 degrees to create this twisted square spiral.",
        "courseF_artist_for7_instruction": "Make three small changes to the code from the last level to get this!",
        "courseF_artist_for7_2018_instruction": "Make three small changes to the code from the last level to get this!",
        "courseF_artist_for8_instruction": "Take the angle down to 72 degrees to get a spiraled pentagon.",
        "courseF_artist_for8_2018_instruction": "Take the angle down to 72 degrees to get a spiraled pentagon.",
        "courseF_artist_for9_instruction": "**Inspiration:**  Use the counter inside the `set alpha` block to get this faded center.",
        "courseF_artist_for9_2018_instruction": "**Inspiration:**  Use the counter inside the `set alpha` block to get this faded center.",
        "courseF_artist_for_Template_instruction": "Try using some of the code from the last level, but turning 89 degrees to create this twisted square spiral.",
        "courseF_artist_for_Template_2018_instruction": "Try using some of the code from the last level, but turning 89 degrees to create this twisted square spiral.",
        "courseF_artist_for_challenge1_instruction": "Can you figure out how to re-create this drawing?",
        "courseF_artist_for_challenge1_2018_instruction": "Can you figure out how to re-create this drawing?",
        "courseF_artist_for_challenge2_instruction": "Can you figure out how to re-create this drawing with a single loop?",
        "courseF_artist_for_challenge2_2018_instruction": "Can you figure out how to re-create this drawing with a single loop?",
        "courseF_artist_fwp1_instruction": "Edit the function 'draw a square' to find bugs.",
        "courseF_artist_fwp1_2018_instruction": "Edit the function 'draw a square' to find bugs.",
        "courseF_artist_fwp2_instruction": "Edit the function to accept a parameter called `length`.",
        "courseF_artist_fwp2_2018_instruction": "Edit the function to accept a parameter called `length`.",
        "courseF_artist_fwp2_predict1_instruction": "Edit the function to accept a parameter called `length`.",
        "courseF_artist_fwp2_predict1_2018_instruction": "Edit the function to accept a parameter called `length`.",
        "courseF_artist_fwp3_instruction": "Create a function called 'draw a square' and use it to outline these four boxes using parameters.",
        "courseF_artist_fwp3_2018_instruction": "Create a function called 'draw a square' and use it to outline these four boxes using parameters.",
        "courseF_artist_fwp4_instruction": "Edit this function to add a parameter for the number of sides in your polygon.",
        "courseF_artist_fwp4_2018_instruction": "Edit this function to add a parameter for the number of sides in your polygon.",
        "courseF_artist_fwp5_instruction": "Use the function from the last puzzle to draw this series of shapes.  ",
        "courseF_artist_fwp5_2018_instruction": "Use the function from the last puzzle to draw this series of shapes.  ",
        "courseF_artist_fwp6_instruction": "Challenge: Edit `draw a spiral edge` to use `length` and `sides` parameters, then recreate these shapes.",
        "courseF_artist_fwp6_2018_instruction": "Challenge: Edit `draw a spiral edge` to use `length` and `sides` parameters, then recreate these shapes.",
        "courseF_artist_fwp7_instruction": "Finish off the `draw a spiral edge` function to also ask for a minimum length for the center of the spiral.",
        "courseF_artist_fwp7_2018_instruction": "Finish off the `draw a spiral edge` function to also ask for a minimum length for the center of the spiral.",
        "courseF_artist_fwp8_instruction": "Can you figure out how to make this drawing using the function that you just created?",
        "courseF_artist_fwp8_2018_instruction": "Can you figure out how to make this drawing using the function that you just created?",
        "courseF_artist_fwp9_instruction": "Freeplay: Draw something awesome! Play with the pen width to see how different your drawings look!",
        "courseF_artist_fwp9_2018_instruction": "Freeplay: Draw something awesome! Play with the pen width to see how different your drawings look!",
        "courseF_artist_fwp_challenge1_instruction": "Can you figure out how this program works?",
        "courseF_artist_fwp_challenge1_2018_instruction": "Can you figure out how this program works?",
        "courseF_artist_fwp_challenge2_instruction": "Use what you learned in the previous level to draw an image like this.",
        "courseF_artist_fwp_challenge2_2018_instruction": "Use what you learned in the previous level to draw an image like this.",
        "courseF_artist_ramp10_instruction": "Now, drag the code for the last triangle into a new loop to spin it around and make a snowflake!",
        "courseF_artist_ramp10_2018_instruction": "Now, drag the code for the last triangle into a new loop to spin it around and make a snowflake!",
        "courseF_artist_ramp8_instruction": "Now make a square using Artist!",
        "courseF_artist_ramp8_2018_instruction": "Now make a square using Artist!",
        "courseF_artist_ramp9_instruction": "Use what you've learned to draw this triangle.",
        "courseF_artist_ramp9_2018_instruction": "Use what you've learned to draw this triangle.",
        "courseF_artist_variables1_instruction": "Let's draw an equilateral triangle that is exactly 50 pixels long on each side.",
        "courseF_artist_variables10_instruction": "Here's your code from the last puzzle.  Try editing the variable in other ways.  ",
        "courseF_artist_variables10_2018_instruction": "Here's your code from the last puzzle.  Try editing the variable in other ways.  ",
        "courseF_artist_variables2_instruction": "Now draw three of those triangles right next to each other.   ",
        "courseF_artist_variables2_2018_instruction": "Now draw three of those triangles right next to each other.   ",
        "courseF_artist_variables3_instruction": "Move the length of 50 into a variable so we can use it in the next few puzzles.",
        "courseF_artist_variables3_2018_instruction": "Move the length of 50 into a variable so we can use it in the next few puzzles.",
        "courseF_artist_variables4_instruction": "Now, use the `length` variable to have the artist jump forward and down by `length` pixels between triangles.",
        "courseF_artist_variables4_2018_instruction": "Now, use the `length` variable to have the artist jump forward and down by `length` pixels between triangles.",
        "courseF_artist_variables5_instruction": "Add another set of loops at the end of your code to add three more triangles. This time, move forward and up!",
        "courseF_artist_variables5_2018_instruction": "Add another set of loops at the end of your code to add three more triangles. This time, move forward and up!",
        "courseF_artist_variables6_instruction": "Now make the triangles to be 60 pixels wide, with 60 pixel jumps.  ",
        "courseF_artist_variables6_2018_instruction": "Now make the triangles to be 60 pixels wide, with 60 pixel jumps.  ",
        "courseF_artist_variables6a_instruction": "Build this design where the squares have 80 pixel sides and the artist jumps 80 pixels over and down between each one.",
        "courseF_artist_variables6a_2018_instruction": "Build this design where the squares have 80 pixel sides and the artist jumps 80 pixels over and down between each one.",
        "courseF_artist_variables7_instruction": "Draw a triangle with 150 pixels sides. ",
        "courseF_artist_variables7_2018_instruction": "Draw a triangle with 150 pixels sides. ",
        "courseF_artist_variables8_instruction": "Rebuild the triangle code from the last puzzle, but this time use the `set length to` block to reset the `length` variable to `length`+10 at the end of each loop iteration.",
        "courseF_artist_variables8_2018_instruction": "Rebuild the triangle code from the last puzzle, but this time use the `set length to` block to reset the `length` variable to `length`+10 at the end of each loop iteration.",
        "courseF_artist_variables9_instruction": "See what happens when you repeat the code from the last puzzle 30 times instead of only 3!  Feel free to make your lines any color or pattern for some extra zest.",
        "courseF_artist_variables9_2018_instruction": "See what happens when you repeat the code from the last puzzle 30 times instead of only 3!  Feel free to make your lines any color or pattern for some extra zest.",
        "courseF_artist_variablesFP_instruction": "**Freeplay:** Take what you've learned and make your own drawing. ",
        "courseF_artist_variablesFP_2018_instruction": "**Freeplay:** Take what you've learned and make your own drawing. ",
        "courseF_artist_variables_10_instruction": "Here's your code from the last puzzle.  Try editing the variable in other ways.  ",
        "courseF_artist_variables_2_instruction": "Now use another loop to draw three of those triangles right next to each other.   \nYou can nest the code from your last puzzle inside.\n",
        "courseF_artist_variables_5_instruction": "Add another set of loops at the end of your code to add three more triangles. This time, move forward and up!",
        "courseF_artist_variables_6_instruction": "OOPS! We actually need the triangles to be 60 pixels wide, with 60 pixel jumps.  \nAren't you glad you're using a variable?",
        "courseF_artist_variables_6a_instruction": "Build this design where the squares have 80 pixel sides and the artist jumps 80 pixels over and down between each one.",
        "courseF_artist_variables_9_instruction": "See what happens when you repeat the code from the last puzzle 30 times instead of only 3!\n\nFeel free to make your lines any color or pattern for some extra zest.",
        "courseF_artist_variables_FP_instruction": "**Freeplay:** Take what you've learned and make your own drawing. \n\nHow can you use variables with squares, pentagons, or hexagons?",
        "courseF_artist_variables_challenge1_instruction": "Can you create a `length` variable and use it to create this pattern?",
        "courseF_artist_variables_challenge1_2018_instruction": "Can you create a `length` variable and use it to create this pattern?",
        "courseF_artist_variables_challenge1a_instruction": "You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?",
        "courseF_artist_variables_challenge2_instruction": "You've now learned everything you need to know to make a pattern like this!",
        "courseF_artist_variables_challenge2_2018_instruction": "You've now learned everything you need to know to make a pattern like this!",
        "courseF_artistembed_variables9_instruction": "See what happens when you repeat the code from the last puzzle 30 times instead of only 3!  Feel free to make your lines any color or pattern for some extra zest.",
        "courseF_bee_conditionals10_instruction": "Collect all of the nectar and make all of the honey.",
        "courseF_bee_conditionals10_2018_instruction": "Collect all of the nectar and make all of the honey.",
        "courseF_bee_conditionals1_predict1_instruction": "Check to see if there's a flower under the cloud. If there's a flower, get nectar.",
        "courseF_bee_conditionals1_predict1_2018_instruction": "Check to see if there's a flower under the cloud. If there's a flower, get nectar.",
        "courseF_bee_conditionals2_instruction": "Check underneath each cloud to see if it is hiding a flower before you get nectar.  ",
        "courseF_bee_conditionals2_2018_instruction": "Check underneath each cloud to see if it is hiding a flower before you get nectar.  ",
        "courseF_bee_conditionals3_instruction": "Help the bee collect all of the nectar. ",
        "courseF_bee_conditionals3_2018_instruction": "Help the bee collect all of the nectar. ",
        "courseF_bee_conditionals4_instruction": "Get all of the nectar using as few blocks as possible.",
        "courseF_bee_conditionals4_2018_instruction": "Get all of the nectar using as few blocks as possible.",
        "courseF_bee_conditionals5_instruction": "Collect all of the nectar using as few blocks as possible",
        "courseF_bee_conditionals5_2018_instruction": "Collect all of the nectar using as few blocks as possible",
        "courseF_bee_conditionals7_predict2_instruction": "Use the `if/else` block to collect nectar at flowers and make honey at honeycomb.",
        "courseF_bee_conditionals7_predict2_2018_instruction": "Use the `if/else` block to collect nectar at flowers and make honey at honeycomb.",
        "courseF_bee_conditionals8_instruction": "Collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "courseF_bee_conditionals8_2018_instruction": "Collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "courseF_bee_for1_instruction": "Collect the nectar from each flower using the fewest blocks possible.",
        "courseF_bee_for10_instruction": "**Challenge:** Take what you've learned about `for` loops and try to solve this problem. ",
        "courseF_bee_for10_2018_instruction": "**Challenge:** Take what you've learned about `for` loops and try to solve this problem. ",
        "courseF_bee_for11_instruction": "What should your increment be to collect 15, then 12, then 9, 6, 3 nectar?",
        "courseF_bee_for11_2018_instruction": "What should your increment be to collect 15, then 12, then 9, 6, 3 nectar?",
        "courseF_bee_for1_2018_instruction": "Collect the nectar from each flower using the fewest blocks possible.",
        "courseF_bee_for2_instruction": "Write the code to help the bee collect all of the nectar.",
        "courseF_bee_for2_2018_instruction": "Write the code to help the bee collect all of the nectar.",
        "courseF_bee_for3_instruction": "Try this puzzle using the `for` loop and the `counter` variable to see how much shorter your code becomes.",
        "courseF_bee_for4_instruction": "Help the bee collect all of the nectar.",
        "courseF_bee_for4_2018_instruction": "Help the bee collect all of the nectar.",
        "courseF_bee_for5_instruction": "Use the `counter` variable twice to solve this puzzle.",
        "courseF_bee_for5_2018_instruction": "Use the `counter` variable twice to solve this puzzle.",
        "courseF_bee_for6_instruction": "Try gathering this nectar by counting down from 5 to 1 by 1.",
        "courseF_bee_for6_2018_instruction": "Try gathering this nectar by counting down from 5 to 1 by 1.",
        "courseF_bee_for7_instruction": "Try collecting these flowers using an increment of 2.",
        "courseF_bee_for7_2018_instruction": "Try collecting these flowers using an increment of 2.",
        "courseF_bee_for8_instruction": "You've got this! What should your increment be to collect 3, 6, 9, 12, 15 nectar?",
        "courseF_bee_for8_2018_instruction": "You've got this! What should your increment be to collect 3, 6, 9, 12, 15 nectar?",
        "courseF_bee_for9_instruction": "Use the `counter` variable to navigate this garden with the fewest number of blocks possible.",
        "courseF_bee_for9_2018_instruction": "Use the `counter` variable to navigate this garden with the fewest number of blocks possible.",
        "courseF_bee_for_challenge1_instruction": "Use this `for loop` to collect all of the nectar. ",
        "courseF_bee_for_challenge1_2018_instruction": "Use this `for loop` to collect all of the nectar. ",
        "courseF_bee_for_challenge2_instruction": "Solve this puzzle using the fewest number of blocks possible.",
        "courseF_bee_for_challenge2_2018_instruction": "Solve this puzzle using the fewest number of blocks possible.",
        "courseF_bee_for_challenge3_instruction": "Solve this puzzle using the fewest number of blocks possible.",
        "courseF_bee_functions2_instruction": "Use the `get only nectar` function to collect the nectar from each flower.",
        "courseF_bee_functions2_2018_instruction": "Use the `get only nectar` function to collect the nectar from each flower.",
        "courseF_bee_functions3_instruction": "Click \"edit\" to put code inside the `only make honey` function, then use it to solve this puzzle.",
        "courseF_bee_functions3_2018_instruction": "Click \"edit\" to put code inside the `only make honey` function, then use it to solve this puzzle.",
        "courseF_bee_functions3a_instruction": "Write a function that gets nectar if the bee is at a flower, otherwise it gets honey.  Use your function to solve the puzzle!",
        "courseF_bee_functions3a_2018_instruction": "Write a function that gets nectar if the bee is at a flower, otherwise it gets honey.  Use your function to solve the puzzle!",
        "courseF_bee_functions4_instruction": "Create a new `move and check` function to collect all of the nectar.",
        "courseF_bee_functions4_2018_instruction": "Create a new `move and check` function to collect all of the nectar.",
        "courseF_bee_functions5_instruction": "Now write the function to collect nectar from the flowers.",
        "courseF_bee_functions5a_instruction": "Use the `move and check` function to collect all of the nectar.",
        "courseF_bee_functions5a_2018_instruction": "Use the `move and check` function to collect all of the nectar.",
        "courseF_bee_functions6_instruction": "Help the bee through the maze by turning left at flowers and right at honeycomb.",
        "courseF_bee_functions6_2018_instruction": "Help the bee through the maze by turning left at flowers and right at honeycomb.",
        "courseF_bee_functions7_instruction": "Rebuild your function from the last puzzle to solve this maze.",
        "courseF_bee_functions7_2018_instruction": "Rebuild your function from the last puzzle to solve this maze.",
        "courseF_bee_functions8a_instruction": "Collect all the nectar or make all of the honey!",
        "courseF_bee_functions8a_2018_instruction": "Collect all the nectar or make all of the honey!",
        "courseF_bee_functionsPre7_instruction": "Now try building a function to solve this maze.  How is it different from last time?",
        "courseF_bee_functionsPre7_2018_instruction": "Now try building a function to solve this maze.  How is it different from last time?",
        "courseF_bee_functions_1_2018_instruction": "Finish this code so that the bee can collect all of the honey and nectar.",
        "courseF_bee_functions_2_2018_instruction": "Edit your solution in one place so that the bee can collect all of the honey and nectar.",
        "courseF_bee_functions_3_2018_instruction": "Subtract one from the variable each time through the loop if you want to use the same function to solve this level.",
        "courseF_bee_functions_challenge1_instruction": "Create a new function to collect all the nectar and honey while there is a path ahead.",
        "courseF_bee_functions_challenge1_2018_instruction": "Create a new function to collect all the nectar and honey while there is a path ahead.",
        "courseF_bee_functions_challenge2_instruction": "Use everything you have learned to complete this puzzle!",
        "courseF_bee_functions_challenge2_2018_instruction": "Use everything you have learned to complete this puzzle!",
        "courseF_bee_functions_challenge2_recursion_instruction": "Collect all the nectar or make all of the honey!",
        "courseF_bee_fwp2_instruction": "Pull this code into a function, then call the function to check this row for nectar.",
        "courseF_bee_fwp2_2018_instruction": "Pull this code into a function, then call the function to check this row for nectar.",
        "courseF_bee_fwp3_instruction": "Let's see if the function makes collecting these three rows of nectar any easier.",
        "courseF_bee_fwp3_2018_instruction": "Let's see if the function makes collecting these three rows of nectar any easier.",
        "courseF_bee_fwp4_instruction": "Add a `length` parameter to the function so that it will still work when the row is a different length.",
        "courseF_bee_fwp4_2018_instruction": "Add a `length` parameter to the function so that it will still work when the row is a different length.",
        "courseF_bee_fwp5_instruction": "Use this function to collect the nectar.",
        "courseF_bee_fwp5_2018_instruction": "Use this function to collect the nectar.",
        "courseF_bee_fwp6_instruction": "Build a short and sweet solution to this puzzle.",
        "courseF_bee_fwp6_2018_instruction": "Build a short and sweet solution to this puzzle.",
        "courseF_bee_fwp7_instruction": "**Challenge:** Modify your function to make honey as well.",
        "courseF_bee_fwp7_2018_instruction": "**Challenge:** Modify your function to make honey as well.",
        "courseF_bee_fwp8_instruction": "Use your new function to solve this spiral.",
        "courseF_bee_fwp8_2018_instruction": "Use your new function to solve this spiral.",
        "courseF_bee_fwp9_instruction": "Use your new function to solve this puzzle.",
        "courseF_bee_fwp9_predict1_instruction": "Use your new function to solve this puzzle.",
        "courseF_bee_fwp9_predict1_2018_instruction": "Use your new function to solve this puzzle.",
        "courseF_bee_fwp_challenge1_instruction": "Use one `for loop` in a function with a `length` parameter to collect all of the corn.",
        "courseF_bee_fwp_challenge1_2018_instruction": "Use one `for loop` in a function with a `length` parameter to collect all of the corn.",
        "courseF_bee_fwp_challenge2_instruction": "Use one `for loop` in a function with a `length` parameter to collect all of the vegetables in each row. ",
        "courseF_bee_fwp_challenge2_2018_instruction": "Use one `for loop` in a function with a `length` parameter to collect all of the vegetables in each row. ",
        "courseF_bee_variables_1_2018_instruction": "Finish this code so that the bee can collect all of the honey and nectar.",
        "courseF_bee_variables_2_2018_instruction": "Edit your solution in one place so that the bee can collect all of the honey and nectar.",
        "courseF_bee_variables_3_2018_instruction": "Subtract one from the variable each time through the loop if you want to use the same function to solve this level.",
        "courseF_bee_variables_4_2018_instruction": "Edit the code to work for this puzzle.",
        "courseF_bee_variables_5_2018_instruction": "Create your own code to solve this puzzle",
        "courseF_bee_variables_6_2018_instruction": "**Challenge** Now give this puzzle a try!",
        "courseF_bee_variables_7_2018_instruction": "This puzzle is a little different.  What do you need to do to solve it?",
        "courseF_bee_variables_8_2018_instruction": "How many nectar will the bee collect from this flower?",
        "courseF_farmer_ramp11_instruction": "This puzzle also uses nested loops.  Can you figure out how?",
        "courseF_farmer_ramp11_2018_instruction": "This puzzle also uses nested loops.  Can you figure out how?",
        "courseF_maze_predict1_instruction": "This code includes a new block. What do you think would happen if you press the \"Run\" block?",
        "courseF_maze_ramp13_instruction": "Time for another Angry Birds puzzle to pull it all together!",
        "courseF_maze_ramp15_instruction": "Use what you've learned to get the bird to the pig!",
        "courseF_maze_ramp4_instruction": "Avoid TNT or feathers will fly!",
        "courseF_maze_ramp4_2018_instruction": "Avoid TNT or feathers will fly!",
        "courseF_maze_ramp5_instruction": "Avoid the TNT.",
        "courseF_maze_ramp5_2018_instruction": "Avoid the TNT.",
        "courseF_maze_ramp6_instruction": "\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"",
        "courseF_maze_ramp6_2018_instruction": "\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"",
        "courseF_maze_ramp7_instruction": "Use what you've learned to get the bird to the pig!",
        "courseF_playlab_brokenText_instruction": "In the rest of this stage, we're going to build a game that you control!",
        "courseF_playlab_embed_vars_instruction": "Answer Pegleg the Pirate's questions. What happens if you enter the codename \"password\"? What about some other code name?",
        "courseF_playlab_variables0_instruction": "This is Pirate Pegleg.  He's awfully hard to understand these days!",
        "courseF_playlab_variables1_instruction": "This is Pirate Pegleg.  He's awfully hard to understand these days!",
        "courseF_playlab_variables1a_instruction": "Variables can be used to store text that you want to use later.  Have Kiki, the soccer player,  scream \"Goal!\" by assigning that text to the `shout` variable.",
        "courseF_playlab_variables1a_2018_instruction": "Variables can be used to store text that you want to use later.  Have Kiki, the soccer player,  scream \"Goal!\" by assigning that text to the `shout` variable.",
        "courseF_playlab_variables2_instruction": "Now, decode Pirate Pegleg's speech by changing the value of the variables in just two places! \n",
        "courseF_playlab_variables2a_instruction": "Now, decode Pirate Pegleg's speech by changing the value of the variables in just two places! \n",
        "courseF_playlab_variables2b RYAN CLONE_instruction": "Insert the variable `color` into the middle of a sentence by putting it into the empty slot in the `join` block.",
        "courseF_playlab_variables2b_instruction": "Insert the variable `color` into the middle of a sentence by putting it into the empty slot in the `join` block.",
        "courseF_playlab_variables2b_2018_instruction": "Insert the variable `color` into the middle of a sentence by putting it into the empty slot in the `join` block.",
        "courseF_playlab_variables3_instruction": "The `ask` block will automatically store whatever the user answers into the variable of your choice.",
        "courseF_playlab_variables3b_instruction": "Help Kiki have a conversation with Brian by using the variable `age` in all of the places where age `12` should be used. ",
        "courseF_playlab_variables3bEdit_instruction": "Help Kiki have a conversation with Brian by using the variable `A1` in all of the places where age `12` should be used. ",
        "courseF_playlab_variables3b_josh_instruction": "Help Kiki have a conversation with Brian by using the variable `age` in all of the places where age `12` should be used. ",
        "courseF_playlab_variables3b_josh_2018_instruction": "Help Kiki have a conversation with Brian by using the variable `age` in all of the places where age `12` should be used. ",
        "courseF_playlab_variables4_instruction": "Can you find the correct variable in the toolbox to fill in the slot?",
        "courseF_playlab_variables4b_instruction": "Put the variables in the correct places to create this conversation.",
        "courseF_playlab_variables4b_2018_instruction": "Put the variables in the correct places to create this conversation.",
        "courseF_playlab_variables5_instruction": "Can you find the correct variable in the toolbox to fill in the slot?",
        "courseF_playlab_variables5b_instruction": "Put all of the variables in the correct place so that Pegleg's story makes sense.",
        "courseF_playlab_variables5c RYAN Copy_instruction": "Let's combine the `ask` block with an `if/else` statement to make a game!",
        "courseF_playlab_variables5c_instruction": "Let's combine the `ask` block with an `if/else` statement to have some fun!",
        "courseF_playlab_variables5c_2018_instruction": "Let's combine the `ask` block with an `if/else` statement to have some fun!",
        "courseF_playlab_variables6b_instruction": "Join the variables together to make a fun story that takes more than one speech bubble to tell.",
        "courseF_playlab_variables6c_instruction": "In the rest of this stage, we're going to build a game that you control!",
        "courseF_playlab_variables6c_2018_instruction": "In the rest of this stage, we're going to build a game that you control!",
        "courseF_playlab_variables7b_instruction": "Create some questions and weave the answers together into your very own story.",
        "courseF_playlab_variables7b_2018_instruction": "Create some questions and weave the answers together into your very own story.",
        "courseF_playlab_variables7c_instruction": "Make the game do something by asking the user to guess a color.",
        "courseF_playlab_variables7c_2018_instruction": "Make the game do something by asking the user to guess a color.",
        "courseF_playlab_variables8b_instruction": "Use what you've learned to create an improv scene between the actors.",
        "courseF_playlab_variables8c_instruction": "Use the variables to make the game more personal.",
        "courseF_playlab_variables8c_2018_instruction": "Use the variables to make the game more personal.",
        "courseF_playlab_variables_challenge1_instruction": "Use these blocks to make the actors share a knock-knock joke. ",
        "courseF_playlab_variables_challenge1_2018_instruction": "Use these blocks to make the actors share a knock-knock joke. ",
        "courseF_playlab_variables_challenge2_instruction": "This game will use variables to keep track of points.  Tag Cat to get 2 points. Tag Penguin to get 3 points.  When Cat and Penguin touch, take points away. Get exactly 10 points to win!",
        "courseF_playlab_variables_challenge2_2018_instruction": "This game will use variables to keep track of points.  Tag Cat to get 2 points. Tag Penguin to get 3 points.  When Cat and Penguin touch, take points away. Get exactly 10 points to win!",
        "courseF_playlab_variables_challenge3_instruction": "Can you figure out how this \"Fortune Teller\" app works? Click `MORE` to see your challenges.",
        "courseF_video_createFunctions_instruction": "We don't have a video for creating functions, yet. This is a placeholder.",
        "courseF_video_createFunctions_2018_instruction": "We don't have a video for creating functions, yet. This is a placeholder.",
        "course_playlab_variables1_instruction": "This is Pirate Pegleg.  He's awfully hard to understand these days!",
        "course_playlab_variables2_instruction": "Now, decode Pirate Pegleg's speech by changing the value of the variables in just two places! \n",
        "course_playlab_variables3_instruction": "Now, decode Pirate Pegleg's speech by changing the value of the variables in just two places! \n",
        "coursea_maze_ramp1_2018_instruction": "For this puzzle, snap the blocks together and click \"▶ Run\"!",
        "coursef_explore_CYOA_Witch_instruction": "You can do whatever you want in play lab! Here's an example of choose your own adventure story in play lab.",
        "coursef_explore_playlab2_instruction": "You can do whatever you want in play lab! Here's an example of story in play lab.",
        "coursef_explore_playlab_cat_game_instruction": "You can do whatever you want in play lab! Here's an example of game you can make.",
        "coursef_maze_ramp3_instruction": "There is one extra block that is going to cause the bird to crash. Throw it away by dragging it back to the toolbox.",
        "coursef_maze_ramp3_2018_instruction": "There is one extra block that is going to cause the bird to crash. Throw it away by dragging it back to the toolbox.",
        "drawings!_instruction": "Draw the equilateral triangle - all the sides are the same!",
        "eventsIntro_instruction": "Need a better playlab/events combo",
        "flappy_1_instruction": "Attach a block to the \"when click\" block, then press \"Run\". Click or tap the screen to move Flappy to the target.",
        "flappy_11_instruction": "Create your own Flappy game. You can change all the visuals and all the rules, even the gravity. When you're done, click Finish to let friends try your game on their phones.",
        "flappy_11_2018_instruction": "Create your own Flappy game. You can change all the visuals and all the rules, even the gravity. When you're done, click Finish to let friends try your game on their phones.",
        "flappy_1_2018_instruction": "Attach a block to the \"when click\" block, then press \"Run\". Click or tap the screen to move Flappy to the target.",
        "flappy_2_instruction": "Now we've added some ground.  Attach a block to the \"when hit the ground\" block.  Your code needs to 'END GAME' when Flappy crashes.",
        "flappy_2_2018_instruction": "Now we've added some ground.  Attach a block to the \"when hit the ground\" block.  Your code needs to 'END GAME' when Flappy crashes.",
        "flappy_3_instruction": "The \"when run\" block allows you to run code when your game starts.  Try setting the level speed and flapping to the target.",
        "flappy_3_2018_instruction": "The \"when run\" block allows you to run code when your game starts.  Try setting the level speed and flapping to the target.",
        "flappy_4_instruction": "Flappy will fly through obstacles unless you write code to make him crash. Attach a block to the \"when hit an obstacle\" block. Your code needs to 'END GAME' when Flappy crashes into the first set of pipes.",
        "flappy_4_2018_instruction": "Flappy will fly through obstacles unless you write code to make him crash. Attach a block to the \"when hit an obstacle\" block. Your code needs to 'END GAME' when Flappy crashes into the first set of pipes.",
        "flappy_5_instruction": "Let's add a scoreboard, and count points when Flappy makes it past obstacles. Add to the \"when pass an obstacle\" block, and then score a point by flying Flappy through the first set of pipes.",
        "flappy_5_2018_instruction": "Let's add a scoreboard, and count points when Flappy makes it past obstacles. Add to the \"when pass an obstacle\" block, and then score a point by flying Flappy through the first set of pipes.",
        "flappy_6_instruction": "See if you can still score a point after making Flappy flap either a smaller or larger amount.",
        "flappy_6_2018_instruction": "See if you can still score a point after making Flappy flap either a smaller or larger amount.",
        "flappy_7_instruction": "Next, try changing the scene by attaching another block to the \"when run\" block.",
        "flappy_7_2018_instruction": "Next, try changing the scene by attaching another block to the \"when run\" block.",
        "flappy_8_instruction": "You can set visuals anytime, not just when the game starts. Try setting a RANDOM scene when other events happen, for example, when passing an obstacle.",
        "flappy_8_2018_instruction": "You can set visuals anytime, not just when the game starts. Try setting a RANDOM scene when other events happen, for example, when passing an obstacle.",
        "flappy_9_instruction": "To mix things up, when hitting an obstacle, instead of ending the game try setting the score back to 0.",
        "flappy_9_2018_instruction": "To mix things up, when hitting an obstacle, instead of ending the game try setting the score back to 0.",
        "frozen circle function in circle_instruction": "Now let's create 20 overlapping circles, turning 18 degrees between each circle.",
        "frozen circle function with parameter_instruction": "Here's a ”Create circle” block that can make circles of different sizes. Can you use this to create a small circle of size 5 and a larger circle of size 10?",
        "frozen circle function_instruction": "Use the new “Create a circle” block to create 10 overlapping circles. Don't forget to jump forward between circles.",
        "frozen circle_instruction": "A circle is a special shape. Can you figure out what number to replace the question marks with to draw a circle?",
        "frozen cross rotate dense_instruction": "Let's repeat it 90 times! How many times does 90 go into 360? Hint: It's a really small number.",
        "frozen cross rotate_instruction": "Now try repeating it 10 times. How many degrees do you need to turn between each line?",
        "frozen cross_instruction": "Wrap a “Repeat” block around these commands to create a plus sign. Did you notice Elsa can move forward and backward?",
        "frozen diamond mini snowflake_instruction": "Did you know every snowflake is a different shape? Let's create a new snowflake by using another “Repeat\" block to repeat a parallelogram 4 times, turning right by 90 degrees between each parallelogram.",
        "frozen diamond snowflake_instruction": "Now, let's create a new snowflake by using the repeat block to repeat a parallelogram 10 times, turning right by 36 degrees between each one.",
        "frozen diamond_instruction": "Use a repeat around these blocks to create a parallelogram. It's just like a rectangle but has different angles. This one has 60 degree and 120 degree angles instead of all 90 degree angles.",
        "frozen freeplay_instruction": "You've officially become a master artist! Create a winter wonderland.",
        "frozen line_instruction": "Hi! I'm Elsa of Arendelle. Help me create a single line.",
        "frozen perpendicular_instruction": "Now let's see if we can create two lines that are at a 90 degree angle to each other. You will need to use the \"Turn\" block as well as the \"Move\" block.",
        "frozen snowflake branch_instruction": "Try using the ”Create a snowflake branch” block to create three branches, which starts to look like a snowflake.",
        "frozen snowflake full_instruction": "Now let's repeat it 8 times to make a beautiful snowflake!",
        "frozen snowflower_instruction": "Intricate snow patterns can be created with very simple shapes. Can you make a pattern by repeating 5 circles of size 5 and 5 circles of size 10?",
        "frozen square iterative_instruction": "It seems like we're halfway to making a square. Let's put 4 lines together to create a square.",
        "frozen square loop 3x_instruction": "Let's create three squares, turning after each square. Be sure to turn by 120 degrees before each new square.",
        "frozen square loop_instruction": "Hi, I’m Anna of Arendelle! Let’s make a square with the “Repeat” block, which uses fewer blocks. How many times (???) should the “Repeat” block loop the blocks inside it to make a square?",
        "frozen square snowflake_instruction": "Can you create a snowflake using the “Repeat” block to make a square 10 times, and the “Turn” block to turn 36 degrees between each square?",
        "grade1_adventurer_loops1_instruction": "Four piles of gold!  Collect all four.",
        "grade1_adventurer_loops10_instruction": "Help me get all of the gold from this cave.",
        "grade1_adventurer_loops2_instruction": "How can Laurel collect all five piles of gold using only one `E -->` block?",
        "grade1_adventurer_loops3_instruction": "Can you fix Laurel's path to get all of this gold?",
        "grade1_adventurer_loops4_instruction": "Add to the code from the last puzzle to get all of the gold. ",
        "grade1_adventurer_loops5_instruction": "What should you add to this code to get all of the gold?",
        "grade1_adventurer_loops6_instruction": "Write the code to get all of this gold.",
        "grade1_adventurer_loops7_challenge_instruction": "**Challenge:** The gold goes all the way down these stairs!  Write the code to help me get it all.",
        "grade1_adventurer_loops8_challenge_instruction": "Challenge: Try this staircase now! It has an extra spike at the end you'll have to climb.",
        "grade1_adventurer_loops9_instruction": "Help me get the gold from this deep valley.",
        "grade1_adventurer_loopsFP_instruction": "Eureka!  Collect as much gold as you can!",
        "grade1_adventurer_loopsPre_instruction": "This is Laurel the Adventurer!  Can you move her around and get gold?",
        "grade1_artist_loops1_instruction": "The Artist is trying to draw a line six times, but can't get it right.  Can you help?",
        "grade1_artist_loops2_instruction": "Help the artist draw a line 7 times to make a garden wall.",
        "grade1_artist_loops3_instruction": "Now we need to get the soil ready to plant. Find the bugs in the code and help the artist prepare the ground. ",
        "grade1_artist_loops4_instruction": "Time to fix the stairs!  Repeat this pattern five times so the artist can reach the top of the bushes.",
        "grade1_artist_loops5_instruction": "Behind the bushes there is a beautiful vine full of flowers.  Can you climb the vine and see where it goes?",
        "grade1_artist_loops6_instruction": "**Challenge:**  It's a hidden garden! Let's walk around.",
        "grade1_artist_loops7_instruction": "The flowers down here are so pretty.  Let's take a closer look.",
        "grade1_artist_loops7a_instruction": "**Challenge:**  Lovely! Let's take a walk around the garden.",
        "grade1_artist_loops7b_instruction": "Time to head home. Can you fix this ladder to help the artist get down?",
        "grade1_artist_loops8_instruction": "Let's take the short way home, over the pond. Can you help the artist stay on the stones?",
        "grade1_artist_loops9_instruction": "I still need a story for this puzzle",
        "grade1_artist_loopsFP_instruction": "Use what you have learned to draw a picture of what you think the artist saw when he got home.",
        "grade1_maze_sequence1_instruction": "A bug! Fix the code to get me to the pig.",
        "grade1_maze_sequence10_instruction": "Move me around the TNT to get to the pig.",
        "grade1_maze_sequence2_instruction": "Fix the code to get me to the pig!",
        "grade1_maze_sequence3_instruction": "Add 2 blocks to get the bird to the pig.",
        "grade1_maze_sequence4_instruction": "Now try this puzzle from the start!",
        "grade1_maze_sequence5_instruction": "Move one way, then another to get me to the pig!",
        "grade1_maze_sequence6_instruction": "Figure out what is missing and then add blocks to get me to the pig!",
        "grade1_maze_sequence7_instruction": "Your turn!  What do you need to do to get the bird to the pig?",
        "grade1_maze_sequence8_instruction": "Debug this level by adding blocks to get me to the pig!",
        "grade1_maze_sequence9_instruction": "Go around the TNT to get me to the pig! ",
        "grade1_maze_sequenceA_instruction": "Challenge: Move me around the TNT to get to the pig.",
        "grade1_maze_sequenceB_instruction": "Fix the bugs to get the bird to the pig.",
        "grade1_maze_sequenceC_instruction": "It's all you!  Get the bird to the pig.",
        "grade1_maze_sequenceD_instruction": "Now head any which way to get that pig!",
        "grade1_playlab_events1_instruction": "This game is called \"Play Lab\".  See if you can figure out what each block does.",
        "grade1_playlab_events1a_instruction": "Make your robot say \"Hello!\" when the button is clicked.",
        "grade1_playlab_events2_instruction": "This program makes Robin fly.  Can you get her to vanish when you click her?",
        "grade1_playlab_events2a_instruction": "Edit the code so that when the second bird is clicked, your program plays a sound!",
        "grade1_playlab_events3_instruction": "This program makes Robin fly.  Can you make the robot jump when you press the up button?\n",
        "grade1_playlab_events3a_instruction": "When the third bird is clicked, the background should change to a city. Can you add code to make this happen?",
        "grade1_playlab_events4_instruction": "Add a block to make Robin vanish when she collides with the robot.",
        "grade1_playlab_events4a_instruction": "Add code to make something happen when the fourth bird is clicked. Be creative!",
        "grade1_playlab_events5_instruction": "Add a block to the 'when run' event that starts the dragon flying.",
        "grade1_playlab_events5a_instruction": "About My Robot Project! Write code so that clicking on each bird shows a new fact about your robot.",
        "grade1_playlab_events6_instruction": "Add a block to the 'when actor 1 clicked' event that makes the dragon return to the middle of the screen.",
        "grade1_playlab_events7_instruction": "Add a block so that when you push the left arrow button, the knight surges toward the dragon.",
        "grade1_playlab_events8_instruction": "Add a block so that when the knight collides with the dragon, it plays a sound.",
        "grade1_playlab_events9 RYAN COPY_instruction": "Now, have Robin wait a second, then come back after she vanishes.",
        "grade1_playlab_events9_instruction": "Now, add a block to keep score each time the knight hits the dragon.",
        "grade1_playlab_eventsFP_instruction": "Use your imagination. What can you do to make this game more fun?",
        "grade1_sequence_pre_instruction": "Play with these blocks to see what they make the bird do!",
        "grade1_video_frustrationRainbow_instruction": "This video describes the rainbow of frustration and introduces persistence.",
        "grade2_CaringForNewPet_0_instruction": "For this puzzle, drag all of the blocks together and click \"Run\" to watch it go!",
        "grade2_CaringForNewPet_1_instruction": "Drag an extra `move forward` block out of the toolbox to finish your code.",
        "grade2_CaringForNewPet_10_instruction": "Get me to the pig!",
        "grade2_CaringForNewPet_11_instruction": "\"Keep calm and help me find the bad pig.\"",
        "grade2_CaringForNewPet_2_instruction": "\"This pig is ruffling my feathers.\"\n\nThere is one extra block that is going to cause the bird to crash. Throw it away by dragging it back to the toolbox.",
        "grade2_CaringForNewPet_2courseC_maze_programming3_instruction": "There is one extra block that is going to cause the bird to crash. Throw it away by dragging it back to the toolbox.",
        "grade2_CaringForNewPet_3_instruction": "\"Trace the path and lead me to the silly pig. Avoid TNT or feathers will fly!\"",
        "grade2_CaringForNewPet_3D_instruction": "\"Follow this path to get me to the pig!\"",
        "grade2_CaringForNewPet_4_instruction": "\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"",
        "grade2_CaringForNewPet_5_instruction": "Get me to the pig!",
        "grade2_CaringForNewPet_6_instruction": "Challenge: Guide me to the green evilness! (Watch out for TNT)",
        "grade2_CaringForNewPet_7D_instruction": "Challenge: This code has a lot of bugs. You'll need to remove blocks and add blocks.",
        "grade2_MakeDogTag_1_instruction": "Drag blocks onto the screen to have the artist draw over the grey lines in the picture. (Each line is 100 pixels long)",
        "grade2_MakeDogTag_10_instruction": "Now, draw anything you like!",
        "grade2_MakeDogTag_2_instruction": "This spaceship needs a window!\n\nEach side of the inner square is 100 pixels and all of the angles are 90 degrees.",
        "grade2_MakeDogTag_3_instruction": "\"Oh no!  Starla's pet alien just flew away! Let's help the spacewoman!\"\n\nFinish Starla's rocket so she can chase her pet.",
        "grade2_MakeDogTag_4_instruction": "Finish this tag by drawing a rectangle around the outside.\n(The long sides are 200 pixels each and the short sides are each 100 pixels)",
        "grade2_MakeDogTag_5_instruction": "\"Now a tag for Belle!\"\n\nDraw this diamond with 200 pixel sides.",
        "grade2_MakeDogTag_6_instruction": "Challenge: This tag is a special one!  Can you figure out how to draw the outline?",
        "grade2_MakeDogTag_7_instruction": "One more tag.  This is a triangle for Pi.\n(Each side is 150 pixels)",
        "grade2_MakeDogTag_8_instruction": "Now let's connect a bunch of V's together in a loop.",
        "grade2_MakeDogTag_9_instruction": "Rebuild the code from the last puzzle, but this time, add a left turn of 30 degrees inside the loop. Now, repeat it 24 times instead of 8.",
        "grade2_MakeDogTag_BFP_instruction": "\"Hi, I'm an artist. You can write code to make me draw almost anything.\"\n\nPlay with the blocks in the toolbox to see what they do!",
        "grade2_MakeDogTag_FP_instruction": "Freeplay: What shape will you make the tag for your pet?",
        "grade2_PuppyLoops_1_instruction": "Can you get me to the pig using 5 of the same kind of blocks?",
        "grade2_PuppyLoops_10_instruction": "My teacher says that I should finish what I start!\n\nHelp me finish my pinwheel. Can you figure out what's wrong?",
        "grade2_PuppyLoops_2_instruction": "Can you get to the pig by creating a loop that uses only one `move forward` block inside of a `repeat`?",
        "grade2_PuppyLoops_3_instruction": "Get me to the pig! Solve this puzzle by creating a loop!",
        "grade2_PuppyLoops_4_instruction": "In this puzzle, two `repeat` loops will help you get to the pig with the fewest number of blocks!",
        "grade2_PuppyLoops_5_instruction": "Can you figure out the fastest way to get me to the pig?",
        "grade2_PuppyLoops_6_instruction": "Loops even work with more than one block inside!  Can you loop this sequence to get me to the pig?",
        "grade2_PuppyLoops_7_instruction": "Use what you learned to get me to the sunflower!",
        "grade2_PuppyLoops_8_instruction": "This code for the cat's whiskers is wrong. \n\nFix this code to draw whiskers that are all the same length.",
        "grade2_PuppyLoops_9_instruction": "Looks like the C in code is drawn backwards!\n\nCan you make it look like a C again?",
        "grade2_collector_10_instruction": "You're almost done! Collect as many pieces of treasure as you can to finish the stage!",
        "grade2_collector_10_2018_instruction": "You're almost done! Collect as many pieces of treasure as you can to finish the stage!",
        "grade2_collector_2_instruction": "Move Laurel to the gold, then use `collect` to pick it up.",
        "grade2_collector_3_instruction": "Put these blocks in order to collect all of the gold and solve the puzzle.",
        "grade2_collector_4_instruction": "Sequence matters! The blocks you need are already in the workspace, but not connected.  Order these blocks to solve the puzzle.",
        "grade2_collector_5_instruction": "These blocks are in the wrong order. Can you fix them?",
        "grade2_collector_6_instruction": "Reorder the blocks to collect all of the treasure.",
        "grade2_collector_7_instruction": "Challenge puzzle! Use blocks from the toolbox to collect all of the treasure.",
        "grade2_collector_8_instruction": "\"Keep up the good work! Help me collect all of the coins.\"",
        "grade2_collector_9_instruction": "*\"Let's get all of the coins!\"*",
        "grade2_collector_9a_instruction": "**Challenge:** Grab all of the coins.",
        "grade2_collector_A_instruction": "Help Laurel collect all of the treasure.",
        "grade2_collector_A_2018_instruction": "Help Laurel collect all of the treasure.",
        "grade2_collector_pre1_instruction": "\"Hi, I'm Laurel. Today I'm searching for treasure at the dog park!\" \n\nPlay around with the blocks to see if you can help Laurel collect some gold.",
        "grade2_maze_debuggingFP_instruction": "\"Now, help me sneak up on the pig any way you want to!\"",
        "grade2_maze_debuggingPre_instruction": "Play with these blocks to see what they make the bird do!",
        "grade2_maze_intro10_instruction": "Solve this puzzle.",
        "grade2_maze_intro2_instruction": "Welcome to Code Studio! Here you will learn to use blocks to build programs. Press `Run` to run a program now!",
        "grade2_maze_intro3_instruction": "The `workspace` is where you will create all of your programs. Can you guess what this program does? Press the “Run” button to find out.",
        "grade2_maze_intro4_instruction": "Drag a block from the toolbox into the workspace. Connect it to the other blocks.",
        "grade2_maze_intro6_instruction": "That’s it!  Now we’re ready to try to solve a few puzzles. ",
        "grade2_maze_intro7_instruction": "This time, try something a bit more challenging.",
        "grade2_maze_intro8_instruction": "This is a challenge puzzle.  It is meant to be hard and will probably take you a couple of tries to solve.  If you don’t solve it after several tries, don’t worry!  It will be in the Play Zone at the end of the stage and you can try it again when you’ve had more practice.",
        "grade2_maze_intro9_instruction": "Solve this puzzle.",
        "grade2_playlab_project_1_instruction": "Now, write a program to make Waddles move around using the up / down / left /right keys to hit all of the targets!",
        "grade2_playlab_project_2_instruction": "The `repeat forever` block allows you to run code over and over forever. Can you attach blocks to move Chomp the Dino (actor 2) up and down forever?",
        "grade2_playlab_project_3_instruction": "Can you have Waddles (actor 1) say \"Ouch!\" and play a \"hit\" sound if he runs into Chomp? \n\nWhen you're done, play the game to make that happen.",
        "grade2_playlab_project_4_instruction": "Can you add a block to score a point when Waddles runs into Octavia (actor 3)? \nPlay the game and move Waddles with the arrows until you score!",
        "grade2_playlab_project_5_instruction": "Add blocks to the `when run` event to change the background and the speed of Waddles.\n\nPlay the game and move Waddles with the arrows until you score.",
        "grade2_playlab_project_6_instruction": "Create your own story. When you're done, click \"Finish\" to share with friends.",
        "grade2_puppy_loops2_instruction": "Can you get to the pig by creating a loop that uses only one `move forward` block inside of a `repeat`?",
        "grade2_puppy_loops3_instruction": "\"Get me to the pig!\"\n\n Solve this puzzle by creating a loop!",
        "grade2_puppy_loops4_instruction": "In this puzzle, two `repeat` loops will help you get to the pig with the fewest number of blocks!",
        "grade2_puppy_loops5_instruction": "\"Get me to the pig as quickly as possible!\"",
        "grade2_puppy_loops6_instruction": "\"This pig is ruffling my feathers!\"\n\nLoops even work with more than one block inside!  Can you loop this sequence?",
        "grade2_puppy_loops7_instruction": "\"Get me to the pig!\"\n\nUse what you learned in other puzzles!",
        "grade3_AboutMyRobot_1_instruction": "Make your robot say \"Hello!\" when the button is clicked.",
        "grade3_AboutMyRobot_2_instruction": "Edit the code so that when the second bird is clicked, your program plays a sound!",
        "grade3_AboutMyRobot_3_instruction": "When the third bird is clicked, the background should change to a city. Can you add code to make this happen?",
        "grade3_AboutMyRobot_4_instruction": "Add code to make something happen when the fourth bird is clicked. Be creative!",
        "grade3_AboutMyRobot_5_instruction": "About My Robot Project! Write code so that clicking on each bird shows a new fact about your robot.",
        "grade3_AboutMyRobot_TeacherIDo_instruction": "Run this puzzle and click on the robot to see what happens!",
        "grade3_ConditionalsElse_1_instruction": "This cloud is blocking my view! Check to see if there's a flower under the cloud, and only get nectar if there's a flower. Be careful, it can change!",
        "grade3_ConditionalsElse_2_instruction": "More clouds! \n\nCheck underneath every cloud to see if it is hiding a flower before you get nectar.  \n\nRemember: Not all clouds hide the same thing!",
        "grade3_ConditionalsElse_3_instruction": "Now I just want to make honey. Some of these clouds might have honeycombs under them. Be sure to check each cloud!",
        "grade3_ConditionalsElse_4_instruction": "Sometimes this cloud covers a flower, and sometimes it covers a honeycomb! Use the if/else block to collect nectar if it is a flower, else to make honey (because it is a honeycomb).",
        "grade3_ConditionalsElse_5_instruction": "There will be either a flower or a honeycomb under each of those clouds!\n\nUse the `if/else` block to collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "grade3_ConditionalsElse_6_instruction": "I am not sure how much nectar this flower has, but I know it has either 1, 2, or 3 nectar. \n\nCombine the conditional blocks (`if` and/or `if/else`) to only get as much nectar as the flower has. \n\nRemember, the amount of nectar can change each time you run the puzzle!",
        "grade3_ConditionalsElse_7_instruction": "These flowers can have 3, 2, or 1 nectar. \n\nComplete the `check purple flower` function and use it to collect all of the nectar at the flowers.",
        "grade3_ConditionalsElse_8_instruction": "Write the function for `check flower make honey`. \n\nYour function should check if the purple flower has 3, 2, or 1 nectar and get all of the nectar. \nThen, move forward and make honey.",
        "grade3_ConditionalsElse_9_instruction": "**Assessment:** This cloud is either hiding a flower with one nectar or a honeycomb that needs one honey.  \n\nComplete the `get nectar or make honey` function, then call it to collect the nectar or honey. \n",
        "grade3_ConditionalsElse_TeacherIDo_instruction": "There will be either a flower or a honeycomb under each of those clouds!\n\nUse the `if/else` block to collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "grade3_Conditionals_1 BAD_instruction": "Use a loop to collect all of the nectar.",
        "grade3_Conditionals_1_instruction": "I'm a hungry bee! \nHelp me collect all of the nectar from the flowers using the fewest number of blocks.",
        "grade3_Conditionals_10 BAD_instruction": "Gather nectar from the rows of flowers! Use a nested loop.",
        "grade3_Conditionals_10_instruction": "There's a lot happening here!\n\nUse what you've learned to collect all of the nectar and then make the honey.",
        "grade3_Conditionals_11 BAD_instruction": "Assessment: Use a `while` loop to collect all of the nectar from these flowers.",
        "grade3_Conditionals_11_instruction": "Let's put everything together!\n\nUse what you've learned to help me collect nectar only from flowers that have it, using as few blocks as possible.  Don't forget to make honey at the end.",
        "grade3_Conditionals_12_instruction": "This stair step pattern should look familiar.  \n\nCan you collect nectar only from the flowers that have some, using as few blocks as possible?",
        "grade3_Conditionals_13_instruction": "Assessment: Collect all of the nectar. Be careful not to try to collect nectar from a purple flower if it doesn't have any.",
        "grade3_Conditionals_2_instruction": "Look at all of that nectar!\n\nHelp me collect the nectar and make the honey using as few blocks as you can.  ",
        "grade3_Conditionals_3_instruction": "Be careful not to collect nectar from a purple flower if it doesn't have any. \nYou must first check if the nectar is equal to 1 using the `if nectar` block.",
        "grade3_Conditionals_4_instruction": "Check this flower with an \"if\" block to see if there is any nectar available.",
        "grade3_Conditionals_5_instruction": "Collect nectar from each flower only if it has any.",
        "grade3_Conditionals_6_instruction": "This field has red and purple flowers. Red flowers have a known nectar amount, but purple flower nectar is unknown. Collect all the nectar.",
        "grade3_Conditionals_7_instruction": "Collect all the nectar from each flower.",
        "grade3_Conditionals_8_instruction": "I wonder what's out there!\n\nHelp me fly around the yard and collect nectar only from the flowers that have some. ",
        "grade3_Conditionals_9_instruction": "Help me find all of the nectar using as few blocks as possible!",
        "grade3_Conditionals_TeacherIDo_instruction": "Check this flower with an \"if\" block to see if there is any nectar available.",
        "grade3_Debugging_1_instruction": "These blocks are really bugging me. Fix the error(s) to collect all of the nectar.",
        "grade3_Debugging_5_instruction": "That flower looks tasty! \n\nFix the error(s) to collect all of the nectar.  You can now use both run and step.",
        "grade3_Debugging_6_instruction": "What a sweet challenge!\n\nFix the error(s) to collect all of the nectar.",
        "grade3_Debugging_7_instruction": "Fix the error(s) to collect all of the nectar and make all of the honey.",
        "grade3_Debugging_9_instruction": "\"Bee\" patient with this one!\n\nYou will need to fix a couple of things in this program to collect all of the nectar and make all of the honey.",
        "grade3_Debugging_TeacherIDo_instruction": "These blocks are really bugging me. Fix the error(s) to collect all of the nectar and make all of the honey.",
        "grade3_Loops_1_instruction": "Can you help me collect the nectar from these flowers? ",
        "grade3_Loops_10_instruction": "Such a busy bee!\n\nHelp bee collect all of the nectar and make all of the honey with the fewest blocks possible.",
        "grade3_Loops_11_instruction": "The shape of this path is different than the others. \n\nCan you collect all of the nectar using as few blocks as possible?",
        "grade3_Loops_12_instruction": "Can you find the quickest way for the bee to collect all of the nectar and make all of the honey?",
        "grade3_Loops_2_instruction": "This time, use a loop to gather all of the nectar.",
        "grade3_Loops_3_instruction": "Use a `repeat` loop to collect all of the nectar.",
        "grade3_Loops_4_instruction": "Now use the `repeat` block to collect all of the nectar and make all of the honey.",
        "grade3_Loops_5_instruction": "What a beautiful field of flowers!   Help the bee visit each one.  Can you find a way to do it with fewer than 7 blocks?",
        "grade3_Loops_6_instruction": "How many times can loops help you in this puzzle?  \n\nLoops are your friend! Use a few of them to complete this puzzle with the fewest blocks possible.",
        "grade3_Loops_7_instruction": "Those flowers look tasty!\n\nCollect nectar from each of the flowers using the fewest blocks possible.",
        "grade3_Loops_8_instruction": "Collect all the nectar and make all of the honey using the fewest blocks possible.",
        "grade3_Loops_9_instruction": "Collect nectar from each flower and make honey at each honeycomb using the fewest blocks possible.",
        "grade3_Loops_TeacherIDo_instruction": "Those flowers look tasty!\n\nCollect nectar from each of the flowers using the fewest blocks possible.",
        "grade3_RunningFarm_1_instruction": "Use conditionals to make sure that you pick all of the corn, but don't disturb the stalks where nothing is growing yet.",
        "grade3_RunningFarm_10_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "grade3_RunningFarm_11a_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "grade3_RunningFarm_2_instruction": "Help the farmer collect both corn and lettuce from the field.",
        "grade3_RunningFarm_3_instruction": "*\"Corn, lettuce, AND pumpkins! Help me harvest them all.\"*",
        "grade3_RunningFarm_4_instruction": "Help the farmer pick all of the lettuce in each cluster before moving on to the next bunch.",
        "grade3_RunningFarm_5_instruction": "This field has clusters of corn, lettuce, and pumpkins all growing together.  Can you collect them all?",
        "grade3_RunningFarm_6_instruction": "Can you figure out how to pick the pumpkin?  Make sure to collect all of the corn along the way!",
        "grade3_RunningFarm_7_instruction": "**Challenge:** Collect all of the corn and lettuce, then pick the pumpkin.",
        "grade3_RunningFarm_8_instruction": "Have wheat and potatoes planted randomly at various growth stages. Now we introduce multiple while loops (stacked) nested inside a loop. The two while loops in the solution represent different while loops (while there is potato and while there is wheat)",
        "grade3_RunningFarm_9_instruction": "Add Weeds element. Weeds start out in random spots in the field and spread more and more rapidly as time goes on.. This puzzle is the culminating game-like puzzle. Students should have the event blocks (up, down, left, right, spacebar) available in the toolbox to use if they want. The entire field should be planted randomly with mostly wheat, potatoes, and a few weeds.",
        "grade3_RunningFarm_TeacherIDo_instruction": "Teacher I Do: Show students how they can use loops and conditionals to plant and harvest 2 rows of crops.",
        "grade3_RunningFarm_TeacherIDo2_instruction": "Teacher I Do: Show students how to use loops to harvest many crops.",
        "grade3_bee_Conditionals_new4_instruction": "Now try checking all of these flowers with \"if\" blocks to see if there is any nectar available.",
        "grade3_bee_conditionals_new1a_instruction": "Help the bee collect all of the nectar. \n\nYou can only collect nectar from flowers, but you can check any space to see if there is a flower.",
        "grade3_bee_conditionals_new1b_instruction": "Help the bee collect all of the nectar. You can only collect nectar from flowers, but you can check any space to see if there is a flower.",
        "grade3_bee_conditionals_new2_instruction": "Collect all of the nectar using as few blocks as possible",
        "grade3_bee_conditionals_new2a_instruction": "Get all of the nectar using as few blocks as possible.",
        "grade3_bee_conditionals_new2b_instruction": "Collect all of the nectar. You can only collect nectar from flowers, but you can check any space to see if there is a flower.",
        "grade3_bee_conditionals_new3a_instruction": "Collect all of the nectar or make all the honey. You can only collect nectar from flowers and make honey from honeycombs. Check any space to see if there is a flower or honeycomb.",
        "grade3_bee_conditionals_new3b_instruction": "Collect all of the nectar and make all of the honey.",
        "grade3_bee_conditionals_new3c_instruction": "Help the bee collect all of the nectar and make all of the honey! Hint: Try using one loop inside of another loop.",
        "grade3_bee_conditionals_quantum1_instruction": "Check to see if there's a flower under the cloud. If there's a flower, get nectar.",
        "grade3_bee_conditionals_quantum2_instruction": "Check underneath every cloud to see if it is hiding a flower before you get nectar.  \n",
        "grade3_bee_conditionals_quantum3_instruction": "Some of these clouds might have honeycombs under them.  Be sure to check if a honeycomb is hiding behind each cloud!",
        "grade3_bee_conditionals_quantum4_instruction": "Use the `if/else` block to collect nectar at flowers and make honey at honeycomb.",
        "grade3_bee_conditionals_quantum5_instruction": "Use the `if/else` block to collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "grade3_maze_Loop1_instruction": "Assessment:  Get me to the sunflower using only 5 blocks! ",
        "grade3_maze_loops1_instruction": "Get the zombie to the sunflower.",
        "grade3_maze_loops2_instruction": "Get the zombie to the sunflower using the fewest blocks possible!  ",
        "grade3_maze_loops2a_instruction": "Get the zombie to the sunflower using the fewest number of blocks possible.",
        "grade3_maze_loops3_instruction": "Get the zombie to the sunflower using only the blocks available.",
        "grade3_maze_loops4_instruction": "Get the zombe to the sunflower using the fewest number of blocks possible!",
        "grade3_maze_loops5_instruction": "Get me to the sunflower using the fewest blocks possible!",
        "grade3_maze_nestedLoops1_instruction": "Can you get me to the pig using 5 of the same kind of blocks?",
        "grade3_maze_nestedLoops2_instruction": "Can you get to the pig by creating a loop that uses only one `move forward` block inside of a `repeat`?",
        "grade3_maze_nestedLoops3_instruction": "Get me to the pig! You can only use one move forward block this time",
        "grade3_maze_nestedLoops4_instruction": "In this puzzle, two `repeat` loops will help you get to the pig with the fewest number of blocks!",
        "grade3_playLab_buildGame_1_instruction": "There is a new block in this lesson, the `random integer` block. It is used to choose a random number. Write a program where the robot says a random number between 1 and 100!",
        "grade3_playLab_buildGame_2_instruction": "We have already created a random integer, \"j\", which is either 1 or 0. Now, we need to use it to decide whether our card is red or black. Add a second if statement to the code under `when run` to complete this code.",
        "grade3_playLab_buildGame_3_instruction": "There are 13 different card values in a deck of cards, so we'll need to have 13 options. Under the empty `when run` block, add a line that sets the placeholder \"i\" to a random integer between 1 and 13.",
        "grade3_playLab_buildGame_4_instruction": "In a deck of cards, a card with value 1 isn't actually called a \"1\", there's a special name. Write an if statement that checks if the random number is a 1, then tell the computer that the value of that card is \"Ace\".",
        "grade3_playLab_buildGame_5_instruction": "We can just call the cards from 2 to 10 by their numbers, so add an if statement that checks whether the number generated is within those numbers, then sets the card value to the number generated.",
        "grade3_playLab_buildGame_6_instruction": "There are three more cards with special names in the deck. Add to your code so that a card number 11 is called a \"Jack\", a 12 is a \"Queen\" and a 13 is a \"King\"",
        "grade3_playLab_buildGame_7_instruction": "You already know what color your card is, but what suit is it? Add code to the conditional statement \"if card is Red\" to choose hearts or diamonds.",
        "grade3_playLab_buildGame_8_instruction": "Add the second part of the code to choose a suit, copying what you made for a Red card.",
        "grade3_playLab_buildGame_final_instruction": "Final stage for playlab conditionals level (could hide entire function so that students just work with point scoring)",
        "grade3_playLab_buildGame_final2_instruction": "Here's all of your code to choose a card - try adding some other fun features!",
        "grade3_robotFarmer_ConditionalsIntro4_instruction": "Help the farmer remove this entire pile using a `while` loop.",
        "grade3_robotFarmer_ConditionalsIntro_1_instruction": "*\"Hi, I'm a farmer. I need your help to flatten the field on my farm so it's ready for planting!\"*  \n\nMove to the pile of dirt and use the `remove` block to remove it.",
        "grade3_robotFarmer_ConditionalsIntro_10_instruction": "I'm working late, so it's dark out, and I can't tell how large the piles are. Now I don't have all the options I used to have on the while block. Move me along the field, and if there is a pile, remove it",
        "grade3_robotFarmer_ConditionalsIntro_10a_instruction": "Flatten all of these piles using as few blocks as possible. ",
        "grade3_robotFarmer_ConditionalsIntro_11_instruction": "It's still dark outside. Move me along the field. If there is a pile, remove it, and if there is a hole, fill it in. Hint: use the dropdown menu of options on the \"if\" block.",
        "grade3_robotFarmer_ConditionalsIntro_11a_instruction": "Flatten all of these piles using as few blocks as possible. ",
        "grade3_robotFarmer_ConditionalsIntro_2_instruction": "Next, move to the hole and fill it with six shovelfuls of dirt, using the `fill` block.",
        "grade3_robotFarmer_ConditionalsIntro_3_instruction": "*\"Move to the pile of dirt and tell me how many shovelfuls to remove using as few blocks as possible.\"*",
        "grade3_robotFarmer_ConditionalsIntro_4_instruction": "*\"I don't know how much dirt is in this pile!\"*\n\nHelp the farmer remove this entire pile using a `while` loop.",
        "grade3_robotFarmer_ConditionalsIntro_5_instruction": "Help me remove all of this dirt. ",
        "grade3_robotFarmer_ConditionalsIntro_6_instruction": "Remove all the piles of dirt, using as few blocks as possible. The new options in the dropdown menu on the \"while\" block tell me if I'm standing on a pile or a hole.",
        "grade3_robotFarmer_ConditionalsIntro_7_instruction": "Look at all of those holes!  Each one needs a different amount of dirt.   \n\nYou can use the `while` loop to easily fill them all!",
        "grade3_robotFarmer_ConditionalsIntro_8_instruction": "Fill in the hole at the end of each of these paths.",
        "grade3_robotFarmer_ConditionalsIntro_9_instruction": "**Challenge:** Fill all of these holes using as few blocks as possible. ",
        "grade3_robotFarmer_ConditionalsIntro_TeacherIDo1_instruction": "Help me fill in all these holes with 5 shovelfuls of dirt. Hint: you can put a \"repeat\" block inside the \"while\" block.",
        "grade3_robotFarmer_ConditionalsIntro_TeacherIDo2_instruction": "I'm working late, so it's dark out, and I can't tell how large the piles are. Now I don't have all the options I used to have on the while block. Move me along the field, and if there is a pile, remove it",
        "grade4_arist_functions_star0_instruction": "Have you drawn something like this star before? Practice making it one more time by adding a turn and a repeat block.",
        "grade4_arist_nested_loop_circles1_instruction": "Assessment: Use a nested loop to complete the design.",
        "grade4_arist_nested_loop_flags1_instruction": "Loop the given code to create a windmill.",
        "grade4_arist_nested_loop_polygons1_instruction": "Loop this design 10 times. \n\nHow much do you have to turn each time you loop?",
        "grade4_arist_nested_loop_polygons2_instruction": "Loop this shape 6 times. \n\nHow much do you have to turn each time you loop? ",
        "grade4_arist_nested_loop_squares1_instruction": "Can you draw these 10 squares of this sidewalk using a nested loop? Each square is 30 pixels.",
        "grade4_arist_nested_loop_triangles2_instruction": "Now nest this loop inside another loop to draw 10 triangles.  This is called a \"nested\" loop.  ",
        "grade4_arist_nested_loop_triangles3_instruction": "Can you draw a hexagon by looping the triangle code?",
        "grade4_arist_nested_loop_triangles4_instruction": "Draw the teeth in the alligator's mouth!",
        "grade4_arist_nested_loop_triangles5_instruction": "Create a sun by nesting the starter code in another loop.\n\nTo get this cool design with a hollow center, you'll need to jump forward by the length of the triangle before turning.",
        "grade4_arist_nested_loop_triangles6_instruction": "Can you draw these 36 triangles using a nested loop?",
        "grade4_artist_freeplay_instruction": "You are on your own now! Try out any of the functions you used in this stage or try this new function that will automatically give your image a beautiful background color! This creation will be saved to your Projects dashboard so that you can easily edit it any time!",
        "grade4_artist_functions1_instruction": "Help the zombie draw glasses using squares with sides of 100 pixels.  \nThe bridge between the glasses is 75 pixels long.",
        "grade4_artist_functions2_instruction": "Functions let you define new blocks! \n\nWe've moved the blocks needed for drawing a square into a function called `draw a square`. This time, use the `draw a square` function to create the glasses. \n\nThe squares are 75 pixels apart.",
        "grade4_artist_functions2a_instruction": "Create this image using only the blocks provided.",
        "grade4_artist_functions3a_instruction": "Create this image using only the blocks provided.",
        "grade4_artist_functions3b_instruction": "This time, use lines of 8 hexagons with 25 pixel sides.",
        "grade4_artist_functionsChallenge0_instruction": "**Challenge:** Create as many functions as you think you need to make this drawing of 50 pixel squares.",
        "grade4_artist_functions_challenge_instruction": "Use the suggested functions to draw four rows of hexagons. Notice how our even numbered rows are shifted to the right?",
        "grade4_artist_functions_challenge2_instruction": "Use the suggested functions to draw four rows of hexagons. Notice how our even numbered rows are shifted to the right?",
        "grade4_artist_functions_freeplay_instruction": "You are on your own now! Try out any of the functions you used in this stage or try this new function that will automatically give your image a beautiful background color! This creation will be saved to your Projects dashboard so that you can easily edit it any time!",
        "grade4_artist_functions_stars0_instruction": "You can make this drawing by adding a repeat block.",
        "grade4_artist_functions_stars1_instruction": "Now that you can draw a star, try drawing four stars!",
        "grade4_artist_functions_stars2_instruction": "Draw only those three stars to finish this puzzle.",
        "grade4_artist_functions_stars3_instruction": "That last one is tough if you only use loops. Let's try drawing the same picture using this new 'function' that will help to **draw a star**.",
        "grade4_artist_functions_windows0_instruction": "Make this window by drawing a square, then turning 90 degrees before drawing another, and so on.",
        "grade4_artist_functions_windows1_instruction": "If you can draw one window, you can draw three! Try using your choice of a nested loop or a function here. Don't forget the jump block!",
        "grade4_artist_functions_windows2_instruction": "Try solving this puzzle by creating `draw a window` and calling it five times. Watch out for the door!\n\n- The top windows are 50 pixels away from each other.  \n- The bottom windows are 100 pixels below the top set.",
        "grade4_artist_nestedLoops_challenge_instruction": "Click here to see the full instructions again!\n\nHere is the code for an interesting shape.  What happens when you repeat it multiple times, turning between each iteration?   Notice that the turns in this shape add up to 420 degrees, which means that when your artist is done drawing, it will be facing a different direction than when you started.  That new direction is exactly 60 degrees to the right of where you began.",
        "grade4_artist_nestedLoops_challenge2_instruction": "Now for a challenge!  Feel free to use trial and error. You are not expected to get the image perfect the first time.   Want to see more hints?  Click here!",
        "grade4_artist_nested_loop_circles1_instruction": "Assessment: Use a nested loop to complete the design.",
        "grade4_artist_nested_loop_flags1_instruction": "Loop the given code to create a windmill.",
        "grade4_artist_nested_loop_polygons1_instruction": "Loop this design 10 times. \n\nHow much do you have to turn each time you loop?",
        "grade4_artist_nested_loop_polygons2_instruction": "Hi, I'm the Artist! Let's create some drawings together! For starters, try repeating this shape 6 times. \n\nHow much do you have to turn each time you loop? ",
        "grade4_artist_nested_loop_squares1_instruction": "Can you draw these 10 squares of this sidewalk using a nested loop? Each square is 30 pixels.",
        "grade4_artist_nested_loop_triangles1_instruction": "Complete the code to draw these triangles.  The first one is done for you.  Hint:  3 triangles in a 360 degree rotation.",
        "grade4_artist_nested_loop_triangles2_instruction": "Let's make a quick adjustment to get completely different image!  \nHint: ? × 10 = 360",
        "grade4_artist_nested_loop_triangles3_instruction": "Can you draw a hexagon by looping the triangle code?\nHint: 6 × ? = 360",
        "grade4_artist_nested_loop_triangles4_instruction": "Hi! I'm the Artist. Let's try some different types of drawings together. Can you help me draw the bottom teeth in the alligator's mouth?",
        "grade4_artist_nested_loop_triangles5_instruction": "Create a sun by nesting the starter code in another loop.\n\nTo get this cool design with a hollow center, you'll need to jump forward by the length of the triangle before turning.",
        "grade4_artist_nested_loop_triangles6_instruction": "Can you draw these 36 triangles using a nested loop?",
        "grade4_artist_parameters_squares1_instruction": "Click \"edit\" to fill in the function definition of \"draw a square\" and add a parameter. It should take a length parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75 pixels in length, each 100 pixels apart.",
        "grade4_artist_parameters_triangles1_instruction": "Today, we're going to try out a different, more powerful function editor. See if you can figure out how to edit the function 'draw a triangle' to find the bugs.",
        "grade4_artist_parameters_triangles2_instruction": "Do you notice anything different about these function blocks? Click “Run” to see what happens.",
        "grade4_artist_parameters_triangles2b_instruction": "Can you complete this drawing? The sides of each triangle are 25 pixels larger than the last.  The first triangle has 25 pixel sides.",
        "grade4_artist_parameters_triangles3_instruction": "Can you complete this drawing? The sides of each triangle are 25 pixels larger than the last.  The first triangle has 25 pixel sides.",
        "grade4_artist_parameters_triangles4_instruction": "The code for this triangle function is broken. Can you edit the function to fix it, and then make triangles of length 25, 50, and 75?",
        "grade4_artist_parameters_trianglesx_instruction": "Can you complete this drawing? The sides of each triangle are 25 pixels larger than the last.  The first triangle has 25 pixel sides.",
        "grade4_bee_conditionals_nested_loops_instruction": "Collect all of the nectar. You can only collect nectar from flowers, but you can check any space to see if there is a flower.",
        "grade4_bee_conditionals_new1_instruction": "Collect all of the nectar. You can only collect nectar from flowers, but you can check any space to see if there is a flower.",
        "grade4_bee_conditionals_new1a_instruction": "Help the bee make all of the honey. You can only make honey at a honeycomb, but you can check any space to see if there is a honeycomb.",
        "grade4_bee_conditionals_new2_instruction": "Can you help the bee collect the nectar from the flowers? You can only collect nectar from flowers, but you can check any space to see if there is a flower.",
        "grade4_bee_conditionals_new2a_instruction": "Make all of the honey. It's actually more efficient to check each space for a honey comb, even when you know some are empty.",
        "grade4_bee_conditionals_new3a_instruction": "Collect all of the nectar or make all the honey. You can only collect nectar from flowers and make honey from honeycombs. Check any space to see if there is a flower or honeycomb.",
        "grade4_bee_conditionals_new3b_instruction": "Uh oh! The bee is not sure if he should collect nectar or make honey. Can you help him out?",
        "grade4_bee_conditionals_new3c_instruction": "Help the bee collect all of the nectar and make all of the honey! Hint: Try using one loop inside of another loop.",
        "grade4_bee_conditionals_quantum1_instruction": "This cloud is blocking my view! Check to see if there's a flower under the cloud, and only get nectar if there's a flower. Be careful, it can change!",
        "grade4_bee_conditionals_quantum2_instruction": "More clouds! \n\nCheck underneath every cloud to see if it is hiding a flower before you get nectar.  \n\nRemember: Not all clouds hide the same thing!",
        "grade4_bee_conditionals_quantum3_instruction": "Now I just want to make honey. Some of these clouds might have honeycombs under them. The way we've been going about things won't work here. Be sure to check if a honeycomb is hiding behind each cloud!",
        "grade4_bee_conditionals_quantum4_instruction": "Sometimes this cloud covers a flower, and sometimes it covers a honeycomb! Use the if/else block to collect nectar if it is a flower, else to make honey (because it is a honeycomb).",
        "grade4_bee_conditionals_quantum5_instruction": "There will be either a flower or a honeycomb under each of those clouds!\n\nUse the `if/else` block to collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "grade4_bee_functions_instruction": "Have we met before? I'm the farmer! Please help me remove this pile of dirt and fill this hole.",
        "grade4_bee_functions1_instruction": "Collect all the nectar from each flower.",
        "grade4_bee_functions10_instruction": "Create a function to collect all of the nectar from each flower.",
        "grade4_bee_functions11_instruction": "Solve this function by creating a function to turn, move forward and make all of the honey, then return the bee to where it started and turn back.",
        "grade4_bee_functions2_instruction": "Functions are blocks of code that perform a task. Use the \"get 2 nectar\" function to collect the nectar from each flower.",
        "grade4_bee_functions3_instruction": "Build the `get 5` function to use in this puzzle.",
        "grade4_bee_functions4_instruction": "Use the `move and get nectar` function to collect all of the nectar.",
        "grade4_bee_functions5_instruction": "This puzzle will be deleted!",
        "grade4_bee_functions6_instruction": "Now write the function to collect nectar from the flowers.",
        "grade4_bee_functions7_instruction": "Create a function and call it to collect nectar at each flower and make honey at each honeycomb.",
        "grade4_bee_functions8_instruction": "Create your own function that goes down a path, gets nectar, makes honey, and then returns the bee to the top of the path. Then collect all the nectar and make all the honey!",
        "grade4_bee_functions9_instruction": "Create a function that collects all of the nectar from each flower.",
        "grade4_bee_nestedLoops0_instruction": "Use a loop to collect all of the nectar.",
        "grade4_bee_nestedLoops1_instruction": "Collect all of the nectar from each flower.",
        "grade4_bee_nestedLoops2_instruction": "**Challenge:** Figure out how to get all of the nectar using only the blocks available.",
        "grade4_bee_nestedLoops2a_instruction": "Collect all of the nectar using  as few blocks as possible.",
        "grade4_bee_nestedLoops3_instruction": "Collect all of the nectar by creating a nested loop.",
        "grade4_bee_nestedLoops4_instruction": "Collect all of the nectar from each flower and make honey at the honeycomb. ",
        "grade4_bee_nestedLoops_assess_instruction": "**Assessment:** Collect all of the nectar and make all of the honey using loops.\n\nHint: There are several possible solutions!",
        "grade4_designProcess_vid_instruction": "Prepare to build a project within some given parameters.",
        "grade4_farmer_functions1_instruction": "*\"Have we met before? I'm the farmer!\"*\n\nHelp the farmer get to the pumpkins and pick them.",
        "grade4_farmer_functions2_instruction": "Take the code you just wrote it and use it to define a new function. Call the function twice to complete the puzzle.",
        "grade4_farmer_functions3_instruction": "Try using a couple of repeat blocks within your function definition.",
        "grade4_farmer_functions4_instruction": "Swap out your repeat loops for more versatile while loops.",
        "grade4_farmer_functions5_instruction": "Things are going to start getting trickier, but don't give up! You can use the same while loops to check both spaces in each pass.",
        "grade4_farmer_functions6_instruction": "The paths are a different length. You can use a different type of while loop to keep the pattern going as long as you need to.",
        "grade4_frozen_freeplay_instruction": "You've officially become a master artist! Create a winter wonderland.",
        "grade4_frozen_functions0_instruction": "Can you figure out what number to replace the question marks with to draw a circle?",
        "grade4_frozen_functions1_instruction": "Use the new “draw a circle” function to create 10 overlapping circles. Don't forget to jump forward between circles.",
        "grade4_frozen_functions1a_instruction": "Use the new “Create a circle” block to create 10 overlapping circles. Don't forget to jump forward between circles.",
        "grade4_frozen_functions2_instruction": "Now let's create 20 overlapping circles, turning 18 degrees between each circle.",
        "grade4_frozen_functions3_instruction": "Here's a ”Create circle” block that can make circles of different sizes. Can you use this to create a small circle of size 5 and a larger circle of size 10?",
        "grade4_frozen_functions4_instruction": "Intricate snow patterns can be created with very simple shapes. Can you make a pattern by repeating 5 circles of size 5 and 5 circles of size 10?",
        "grade4_frozen_nested_loop_diamonds1_instruction": "Let’s use a repeat block to create a rhombus. Like a square, all sides are equal length, but the angles are different. This one has 60 degree and 120 degree angles instead of all 90 degree angles.",
        "grade4_frozen_nested_loop_diamonds2_instruction": "Did you know every snowflake is a different shape? Let's create a new snowflake by using another “Repeat\" block to repeat a parallelogram 4 times, turning right by 90 degrees between each parallelogram.",
        "grade4_frozen_nested_loop_diamonds3_instruction": "Now, let's create a new snowflake by using the repeat block to repeat a parallelogram 10 times, turning right by 36 degrees between each one.",
        "grade4_frozen_nested_loop_rectangle1_instruction": "Hi, I’m Anna of Arendelle! Let’s use a repeat block to create a rectangle. This one is  200 pixels long and 100 pixels tall. All of the corners are 90 degree angles.",
        "grade4_frozen_square_instruction": "Hi, I’m Anna of Arendelle! Let’s make a square with the “Repeat” block, which uses fewer blocks. How many times (???) should the “Repeat” block loop the blocks inside it to make a square?",
        "grade4_frozen_square_loop1_instruction": "Hi, I’m Anna of Arendelle! Let’s make a square with the “Repeat” block, which uses fewer blocks. How many times (???) should the “Repeat” block loop the blocks inside it to make a square?",
        "grade4_frozen_square_loop2_instruction": "Let's create three squares, turning after each square. Be sure to turn by 120 degrees before each new square.",
        "grade4_frozen_square_loop3_instruction": "Can you create a snowflake using the “Repeat” block to make a square 10 times, and the “Turn” block to turn 36 degrees between each square?",
        "grade4_playLab_proj_example1_instruction": "instructions",
        "grade4_playLab_proj_example1a_instruction": "Take a look at this project.  Do you see how it was made?",
        "grade4_playLab_proj_example2a_instruction": "Take a look at this project.  Do you see how it was made?",
        "grade4_playlab_freeplay_instruction": "It's free play time! Have fun with all the blocks in your tool box. ",
        "grade4_playlab_test_instruction": "Use the right arrow to throw pie.\n\nIn our game, how should we score points? Add 1 to your \"points\" variable each time Dog hits Cat with a piece of pie. Use the \"when actor 2 touches anything\" event to trigger an update to your score. You can increment your variable by setting \"points = points + 1.\" Get your score up to 10 (going one at a time!) to pass the level.",
        "grade4_playlab_test2_instruction": "Here's a function called `jump` that causes your main character to jump up 100 pixels. Run the program and use the jump function to collect all of the flags by moving the dog with the arrow keys.",
        "grade4_prompt_test_instruction": "This is a test play lab level.",
        "grade4_review_artist1_instruction": "Hi, I'm an artist. You can write code to make me draw almost anything. Use a few blocks to make me draw over the grey lines in the picture. (Each line is 100 pixels long)",
        "grade4_review_artist2_instruction": "This house needs a roof! Draw the triangle.  Hint: all three sides are the same length.",
        "grade4_review_artist3_instruction": "The jump block moves the artist without drawing. Draw the dashed line using both the `jump forward` and `move forward` blocks. Each line is 50 pixels long.",
        "grade4_review_bee1_instruction": "Now use the `repeat` block to collect all of the nectar and make all of the honey.",
        "grade4_review_bee2_instruction": "Collect nectar from each flower and make honey at each honeycomb using the fewest blocks possible.",
        "grade4_review_bee3_instruction": "Such a busy bee!\n\nHelp bee collect all of the nectar and make all of the honey with the fewest blocks possible.",
        "grade4_scaffolded_project1_instruction": "It is amazing how much you have learned! Let's put them together to make a game, step by step.",
        "grade4_scaffolded_project2_instruction": "Now let's get things moving! Use event handlers and actions to make your hero move.\n\nWe've added these blocks to your tool box to help you.\n",
        "grade4_scaffolded_project3_instruction": "Now that your game has a hero, it's time to start adding other actors and assigning them behaviors. \n\nAdd two or more additional actors to your game and make them move. Do you want to have an actor patrol back and forth? Try using a these new blocks to bring these other components of your game to life!",
        "grade4_scaffolded_project4_instruction": "Just getting the actors moving is a great step, but we need to program some interactions to make this really feel like a game. A simple way to do this is to add or remove points when actors collide with projectiles or each other. Find some interesting ways to change the score in your game.",
        "grade4_scaffolded_project4a_instruction": "Just getting the actors moving is a great step, but we need to program some interactions to make this really feel like a game. A simple way to do this is to add or remove points when actors collide with projectiles or each other. Find some interesting ways to change the score in your game.",
        "grade4_scaffolded_project5_instruction": "Now spend some time making sure the game works the way you want. Try including a way to win or lose your game.",
        "grade4_scaffolded_project6_instruction": "You've finished! Now you can play your game or share it with your friends and classmates!",
        "grade5_artist_binary1_instruction": "Binary is a way of representing information using only two options.  Here, we're going to use the options \"off\" (represented by the number 0) and \"on\" (represented by the number 1).  \n\nWe've provided you with a grid of \"pixels\" that you can walk through and make designs by turning on only certain squares.  Can you have the artist draw \"01010101\" in binary in the first row?",
        "grade5_artist_binary10_instruction": "Click here to see hints.",
        "grade5_artist_binary11_instruction": "Free Play: Here's a blank canvas for you to draw on.  Have fun!",
        "grade5_artist_binary2_instruction": "Here's a function that takes a binary string of 1's and 0's and instructs the artist to follow them from left to right, top to bottom.  The artist will fill-in the squares when it sees a 1 and ignore the square when it sees a 0. \n\nRun this code to see how the artist uses binary to draw this pattern.",
        "grade5_artist_binary3_instruction": "Which of these binary strings could you loop 8 times to draw this image?",
        "grade5_artist_binary4_instruction": "Can you draw this pattern by looping just three binary digits (0s and 1s)?",
        "grade5_artist_binary5_instruction": "Each binary string represents one row of this picture. Can you rearrange them so it draws a smiley face instead of a frowny face?",
        "grade5_artist_binary6_instruction": "Which 6 digit binary string, repeated 11 times, will draw this image?",
        "grade5_artist_binary7_instruction": "What is the shortest binary string that you can repeat to draw this image?",
        "grade5_artist_binary8_instruction": "Finish this drawing.",
        "grade5_artist_binary9_instruction": "Here's a higher resolution canvas to draw on - 16 pixels by 16 pixels!\n\nSee what happens when we start to get creative with the bits?",
        "grade5_artist_for_loops1_instruction": "Use a `for` loop to draw this triangle that is 50 pixels wide. If you count from 1 to 3 by 1s, you can use this just like a `repeat` loop.",
        "grade5_artist_for_loops10_instruction": "Can you figure out how to use all of the things you've learned to create this image?\n\nNeed a hint? Click here.",
        "grade5_artist_for_loops1a_instruction": "Try using a `for loop`to create this triangular design. Don't worry that the numbers are different than the last puzzle. As long as you turn by the right number of degrees, the artist will make the correct shape!",
        "grade5_artist_for_loops1b_instruction": "Experiment with the `for` loop and play with the `counter` variable.",
        "grade5_artist_for_loops2_instruction": "Use a `repeat` inside of a `for` loop to create this stack of triangles that goes from 50 pixels to 100 pixels.",
        "grade5_artist_for_loops3_instruction": "These triangles go from 20 pixel sides to 200 pixel sides, and each triangle is 20 pixels larger than the last. ",
        "grade5_artist_for_loops4_instruction": "These squares start at 15 pixels long, the largest is 300 pixels long, and each square is 15 pixels larger than the last. ",
        "grade5_artist_for_loops5_instruction": "Just one little change to the code from the last image can create this drawing. Can you figure out what that change is?\n\nHint:  You need to remove something!",
        "grade5_artist_for_loops6_instruction": "If you turn a little bit more or less than you normally would for a shape, it creates a neat effect. Try using some of the code from the last level, but turning 89 degrees to create this twisted square spiral.",
        "grade5_artist_for_loops7_instruction": "Make three small changes to the code from the last level to get this!",
        "grade5_artist_for_loops7a_instruction": "Take the angle down to 72 degrees to get a spiraled pentagon.",
        "grade5_artist_for_loops7b_instruction": "Use the counter inside the `set alpha` block to get this faded center.\n(This hexagon pattern was made using a 60 degree turn.)",
        "grade5_artist_for_loops8_instruction": "Remember back in a previous stage when we used a variable to control the number of sides in a shape? We are going to do the same thing with the `counter` variable now. This pattern starts with a triangle and adds one side at a time until it draws a decagon (10 sides). Each side should be 100 pixels long. ",
        "grade5_artist_for_loops9_instruction": "Let's put it all together!  Using your knowledge of `for` loops and the `counter` variable, create this drawing where each shape has two more sides than the last.  Make sure that each side is 10 times as long as the number of sides in the polygon.\n\nVery little of the code has been provided for you.",
        "grade5_artist_for_loopsfreeplay11_instruction": "Free-Play Inspiration: You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own.\n\nNeed a hint? Click here.",
        "grade5_artist_for_loopsfreeplay12_instruction": "Free Play: Try using the `counter` variable with other drawing elements to make magical images like this one.",
        "grade5_artist_freeplay_instruction": "Create your own project! This creation will be saved to your Projects dashboard so that you can easily edit it any time!",
        "grade5_artist_functionparameters10_instruction": "Free Play Inspiration: You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own.\n \nWant to know how our inspiration pattern was made? ",
        "grade5_artist_functionparameters11_instruction": "Freeplay: Below there are functions you've written, and more for you to play with. Draw something awesome! Play with the pen width to see how different your drawings look!",
        "grade5_artist_functionparameters7_instruction": "This image is similar to the last. Can you use a `for` loop with your function to make this design?",
        "grade5_artist_functionparameters8_instruction": "The triangle has 21 pixel sides, and the sides in each following shape are 7 pixels longer than the last.  Use the `multiplication` block to make this all happen with just one function call. Be sure to jump 100 pixels between polygons.",
        "grade5_artist_functionparameters9_instruction": "Challenge: Edit `draw a spiral edge` to use `length` and `sides` parameters, then recreate these shapes.",
        "grade5_artist_functionparameters9a_instruction": "Finish off the `draw a spiral edge` function to also ask for a minimum length for the center of the spiral.",
        "grade5_artist_functionparameters9b_instruction": "Can you figure out how to make this drawing using the function that you just created?",
        "grade5_artist_functionparameters_6_instruction": "Edit this function to add a parameter for the number of sides in your polygon.\n\nThe sides of all the shapes are 100 pixels long.",
        "grade5_artist_parameters_squares1_instruction": "Click \"edit\" to fill in the function definition of \"draw a square\" and add a parameter. It should take a length parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75 pixels in length, each 100 pixels apart.",
        "grade5_artist_parameters_squares1a_instruction": "This program looks okay from here, but something isn't working right. See if you can figure out how to edit the function 'draw a square' to find the bug.",
        "grade5_artist_parameters_squares2_instruction": "Create a function called 'draw a square' and use it to outline these four boxes. Make sure to add a parameter for 'length'! Starting from the upper right, the box widths are 50, 100, 150, and 200.",
        "grade5_artist_parameters_squares2a_instruction": "Edit the function to accept a parameter called `length`.",
        "grade5_artist_parameters_stars1_instruction": "That last one is tough if you only use loops. Let's try drawing the same picture using this new 'function' that will help to **draw a star**.",
        "grade5_artist_parameters_triangles1_instruction": "This program looks okay from here, but something isn't working right. See if you can figure out how to edit the function 'draw a square' to find the bug.",
        "grade5_artist_parameters_triangles1a_instruction": "Today, we're going to try out a different, more powerful function editor. See if you can figure out how to edit the function 'draw a triangle' to find the bugs.",
        "grade5_artist_parameters_triangles1aa_instruction": "Click \"edit\" to fill in the function definition of \"draw a triangle\" and add a parameter. It should take a length parameter, just like the triangle. This time, draw 3 triangles: 25, 50 and 75 pixels in length, each 100 pixels apart.",
        "grade5_artist_parameters_triangles2_instruction": "This drawing can be easily created using a new type of function that includes a parameter. The sides of each triangle are 25 pixels larger than the last.  The first triangle has 25 pixel sides. Replace the '???' with the correct values to draw the picture.",
        "grade5_artist_parameters_triangles2a_instruction": "Do you notice anything different about these function blocks? Click “Run” to see what happens.",
        "grade5_artist_parameters_triangles3_instruction": "The code for this triangle function is broken.\n\nCan you edit the function to fix it, and then make triangles of length 150, 75, 25?",
        "grade5_artist_parameters_triangles4_instruction": "The code for this triangle function is broken. Can you edit the function to fix it, and then make triangles of length 25, 50, and 75?",
        "grade5_artist_parameters_trianglesy_instruction": "The code for this triangle function is broken.\n\nCan you edit the function to fix it, and then make triangles of length 150, 75, 25?",
        "grade5_artist_variables_freeplay10_instruction": "Free Play: Experiment with the number of sides this shape has. Can you change the algorithm so that the overall size of the shape stays the same, no matter how many sides it has? Hint: If you divide your starting length by the number of sides, the length of each side will get shorter as the number of sides gets higher.",
        "grade5_artist_variables_freeplay14_instruction": "Free Play: Check it out! Now your algorithm is nested within one more loop. Experiment with changing the values of your two variables to draw cool patterns.\n\nFor even more effect, try playing with color!  Use random colors inside loops to see how it changes your design.",
        "grade5_artist_variables_freeplay15_instruction": "Want a second peek at the inspiration design or the hints?  Click here!\n\nOtherwise, make a design all your own!",
        "grade5_artist_variables_freeplay16_instruction": "Still playing?  Here is a blank canvas where you can create whatever you want!",
        "grade5_artist_variables_hexagons1_instruction": "Let's try it again! \n\nCan you set the `length` variable to 60 to make this cool design with hexagons?",
        "grade5_artist_variables_letterT11_instruction": "Here’s more complicated code using the same concepts from the last puzzle - what should you set the \"sides\" variable to in order to draw this picture made of squares?",
        "grade5_artist_variables_new1_instruction": "Here is a program that will create an image. There are a few things that are wrong with it.",
        "grade5_artist_variables_octagons13_instruction": "When a shape has lots of sides, each side needs to be shorter if you want the whole pattern to fit on the screen. \nLet's recreate the algorithm for this amazing pattern, but instead of manually setting the `length` variable, let's use a math block with the `sides` variable inside to make sure that each shape fits correctly. The perimeter of each polygon is 300 pixels.\nNeed some hints?  Click here.",
        "grade5_artist_variables_pentagon8_instruction": "Use what you learned in the last puzzle to create this hexagon using the \"sides\" variable.\n\nSee how you could change just one value to draw a triangle,  square, pentagon, or octagon?",
        "grade5_artist_variables_pentagon9_instruction": "Now, recreate the algorithm from the last level and create a pentagon with sides of length 150.",
        "grade5_artist_variables_pentagons1_instruction": "Draw this pattern of pentagons with 100 pixel sides by setting the right value for `length` and dropping the `length` variable into all of the the correct places. \n\nSee how you only have to set the value for `length` once, and the code uses the right value everywhere?",
        "grade5_artist_variables_pentagons12_instruction": "Let's set the \"sides\" variable to 5. The more sides we add to this algorithm, the bigger this whole pattern gets! Notice that there is another variable called \"length\". We can now use that wherever we have a \"move forward.\" Set the \"length\" variable to 75 for this shape.",
        "grade5_artist_variables_rectangle6_instruction": "Now I want to make a rectangle that is twice as tall as it is wide. We've got a variable called \"width\" that needs to be set to 100. Can you use the math blocks to complete the code?",
        "grade5_artist_variables_square7_instruction": "Here’s some code that can draw any regular polygon. There’s a new variable called sides that is set to 4. Can you use the sides variable (along with the math block) to turn the right amount regardless of how many sides there are in the polygon?\n\nClick here to go back to the hint!",
        "grade5_artist_variables_triangles2_instruction": "Instead of using \"move forward by 150,\" the \"move\" block is now referencing a variable called \"length.\" Can you set \"length\" to 150 to draw this new triangle?",
        "grade5_artist_variables_triangles3_instruction": "Drag a number block to both the `set length` block and the `repeat _ times` block to draw a set of 50 pixel triangles. ",
        "grade5_bee_for_loops1_instruction": "Use a loop to collect the nectar from each flower.",
        "grade5_bee_for_loops10_instruction": "What should your increment be to collect 15, then 12, then 9, 6, 3 nectar?",
        "grade5_bee_for_loops11_instruction": "**Challenge:** Take what you've learned about `for` loops and try to solve this problem. ",
        "grade5_bee_for_loops2_instruction": "Add the code necessary to make sure the bee collects all the nectar. Look at how much code you need for this puzzle! (We'll learn a simpler way in the next puzzle.)",
        "grade5_bee_for_loops3_instruction": "Try this puzzle using the `for` loop with `counter` variable and see how much shorter your code becomes.",
        "grade5_bee_for_loops4_instruction": "Help the bee collect all of the nectar.",
        "grade5_bee_for_loops6_instruction": "You can also use a \"for loop\" to count down. Try gathering this nectar by counting down from 5 to 1 by 1.",
        "grade5_bee_for_loops7_instruction": "Try collecting these flowers using an increment of 2.",
        "grade5_bee_for_loops8_instruction": "You've got this! What should your increment be to collect 3, 6, 9, 12, 15 nectar?",
        "grade5_bee_for_loops9_instruction": "Use the `counter` variable to navigate this garden with the fewest number of blocks possible.",
        "grade5_bee_parameters_new8_instruction": "That's a great function you've created! You are officially on your own now. Collect all the nectar. Make all the honey.",
        "grade5_bee_parameters_new9_instruction": "Bonus Challenge! If you are feeling ambitious, try this puzzle. It is possible to collect all of the nectar and make all of the honey using only a For loop, a Repeat loop, a function call, and a turn. Try it all on your own, or view the hints to build it step-by-step. Great job with this stage!",
        "grade5_pixelation_instruction": "Encode an image of anything you like using binary. The binary language will be represented with '0' and '1' only.",
        "grade5_playlab_freeplay_instruction": "It's free play time! Have fun with all the blocks in your tool box. ",
        "grade5_playlab_parameters_points1_instruction": "Here's the same game but most of the code is hidden. We've added a new function called `score_points.`\n\nAdd a new parameter called `points` to the `player_score` function. \n\nThe `score_points` function should be able to both add and remove points from `player_score` depending on which actor is hit.\nChanging the score by 1 will add a point, while changing the score by -1 will subtract a point.\n\nWhen you're done, click \"Run\" to play.  When Dog scores 6 points, you will move on to the next puzzle. ",
        "grade5_playlab_variables1_instruction": "This time you don't have to write any code, just hit \"Run\" to play the game! In this game, you're the dog who is trying to collect more flags than the cat. Use the down arrow to control the dog. Press \"Finish\" when you're done playing.",
        "grade5_playlab_variables10_instruction": "Edit the the \"patrol\" function to add an \"actor\" parameter, so that we can call it for each of the actors on the screen. Remember, the actors correspond to numbers 1, 2, and 3.",
        "grade5_playlab_variables11_instruction": "Add another parameter called \"speed\" to the \"patrol\" function. Try using a \"set speed\" block with the new \"speed\" parameter to help Penguin get both flags before the other sprites even get one.",
        "grade5_playlab_variables12_instruction": "Let's have some fun! Look at the code provided to see if you can figure out what each block does.  \nWhen you're done, use the arrow keys to control Dog and collect all of the flags.\nNOTE: You don't need to make any changes to the program",
        "grade5_playlab_variables13_instruction": "Use the `when actor touches` block to send Dog back to the top-left ONLY if Dog touches any of the other actors.",
        "grade5_playlab_variables14_instruction": "It's free play time! Have fun with all the blocks in your tool box. ",
        "grade5_playlab_variables1ask_instruction": "This time, when you press 'run', you will see a 'prompt' asking you for a number. This number will be stored in a variable used to set the dog's speed.\n\n\nPay attention to how this program is written!",
        "grade5_playlab_variables2_instruction": "The race in that last puzzle wasn't very fair! Change the `dog_speed` variable to make sure you can collect more flags than Cat. The first to collect 10 flags wins!",
        "grade5_playlab_variables3_instruction": "Use the left and right arrows to move, and the up arrow to jump. See if you can collect all of the flags.",
        "grade5_playlab_variables4_instruction": "Now we're using a variable called \"height\" to control how high the dog can jump. Update the \"height\" variable so that the dog can jump high enough to reach all the flags.",
        "grade5_playlab_variables5_instruction": "You've seen now how a variable can be used to set the height of an actor's jump. How else could  you use a variable?\n\nLet's build a game! First we'll need a score. Try setting the 'points' variable to give yourself 10 free points!",
        "grade5_playlab_variables6_instruction": "Use the right arrow to throw pie.\n\nIn our game, how should we score points? Add 1 to your \"points\" variable each time Dog hits Cat with a piece of pie. Use the \"when actor 2 touches anything\" event to trigger an update to your score. You can increment your variable by setting \"points = points + 1.\" Get your score up to 10 (going one at a time!) to pass the level.",
        "grade5_playlab_variables6ask_instruction": "This time, you need 100 points to win!  Don't worry though, you can choose how many points you earn each time you score a hit!\nTry adding the `ask` block and changing the number 1 out for the variable `value`.",
        "grade5_playlab_variables7_instruction": "Nice, now let's make sure this game isn't too easy to play. Any time Dog (actor 1) gets hit by a sandwich from Cat (actor 2), you should lose a point. Start with 10 points so it's not too hard. Let your score drop down from 10 to 0 to pass the level.",
        "grade5_playlab_variables71_instruction": "Here's our game from an earlier stage, but most of the code is hidden. There’s a new function `score_points.`\n\nEdit the function so that a new parameter called `points` can be added to `player_score`. \n\nThe variable `player_score` should increase each time Dog tags Cat with pie, and decrease each time that Cat tags Dog with a sandwich.\n\nNote: When you're done, click \"Run\" to play.  When Dog scores 6 points, you will move on to the next puzzle. ",
        "grade5_playlab_variables9_instruction": "Here's a function called `patrol`. \n\nEdit `patrol` to move Cat up 400 pixels and then down 400 pixels.",
        "grade5_playlab_variables_freeplay_instruction": "Free Play time! Here are all of the variables we've played with so far in this stage, as well as a few more in case you want them. \n\nNotice that there are now so many blocks in our toolbox that they need to be organized!  Here, we've put each piece into an appropriate category.  Take some time to explore everything that is available. When you're done browsing, make a game or story using repeats, variables, and events.  \n\nHint: scroll down to see all the commands in the workspace.",
        "grade5_playlab_variables_jump1_instruction": "This puzzle uses a hidden function that makes the dog jump when the 'up' arrow is pressed. The height of the jumps can be set at the start of the game using the 'jumpPower' variable. Try to touch all of the flags!",
        "grade5_prompt_test_instruction": "Variables aren't always numbers. What if you wanted to store a word or text? Experiment with the new `ask` block.",
        "gradeK_sequence_4_instruction": "Try this one yourself from the beginning.",
        "gradek_adventurer_loops1_instruction": "Three piles of gold!  Collect all three.",
        "gradek_adventurer_loops10_instruction": "Help me get all of the gold from this cave.",
        "gradek_adventurer_loops2_instruction": "How can Laurel collect all five piles of gold using only one `[E-->]` block?",
        "gradek_adventurer_loops3_instruction": "Can you fix Laurel's path to get all of this gold?",
        "gradek_adventurer_loops4_instruction": "Use what you learned to get all of the coins.",
        "gradek_adventurer_loops4a_instruction": "Add to this code to collect all of the coins.",
        "gradek_adventurer_loops5_instruction": "What should you add to this code to get all of the gold?",
        "gradek_adventurer_loops6_instruction": "Write the code to get all of this gold.",
        "gradek_adventurer_loops7_instruction": "Write the code to get all of this gold.",
        "gradek_adventurer_loops7_challenge_instruction": "**Challenge:** The gold goes all the way up these stairs!  Write the code to help me get it all.",
        "gradek_adventurer_loops8_instruction": "Help me get all of the gold from this deep valley.",
        "gradek_adventurer_loops9_instruction": "Help me get all of the gold from this cave.",
        "gradek_adventurer_loopsFP_instruction": "Eureka!  Collect as much gold as you can!",
        "gradek_adventurer_loopsPre_instruction": "This is Laurel the Adventurer.  Mover her around and get as much gold as you can!",
        "gradek_artist_loops1_instruction": "Help the artist draw this line two times forward.",
        "gradek_artist_loops2_instruction": "Our artist is trying to draw a line five times, but can't get it right.  Can you help?",
        "gradek_artist_loops3_instruction": "Now, use a `repeat` loop to draw this line five times!",
        "gradek_artist_loops4_instruction": "Draw a line seven steps long. This will become our horizon.",
        "gradek_artist_loops5_instruction": "Let's put a nice hill in the back.",
        "gradek_artist_loops6_instruction": "Use the `repeat` loop to add waves to the water.",
        "gradek_artist_loops7_instruction": "We need a ladder up to the boat.",
        "gradek_artist_loops8_instruction": "Challenge: The stairs down to the dock are broken.  Help me fix them.",
        "gradek_artist_loops9_instruction": "Time to head back to land. Help me put down stones so I don't fall in!",
        "gradek_artist_loopsA_instruction": "Help me build steps to watch the ship sail away.",
        "gradek_artist_loopsFP_instruction": "The artist saw something funny in the distance.  Draw what you think he saw.",
        "gradek_artist_loopsPre_instruction": "This is a new type of puzzle called \"Artist\". Play with the level and draw something fun.",
        "gradek_playlab_events1_instruction": "Make your robot say \"Hello!\" when the button is clicked.",
        "gradek_playlab_events1a_instruction": "Add a block so that when you click the \"up\" button, Olive the Cat walks up.",
        "gradek_playlab_events1c_instruction": "Jorge the Dog wants to say \"Hi there.\"  Can you help him?",
        "gradek_playlab_events2_instruction": "Edit the code so that when the second bird is clicked, your program plays a sound!",
        "gradek_playlab_events2a_instruction": "Add a block so that when you click \"down\" Olive the Cat walks down.",
        "gradek_playlab_events2c_instruction": "Help Jorge the Dog get moving by connecting the `move left` block to the `when left` event block that is already in the workspace.",
        "gradek_playlab_events3_instruction": "When the third bird is clicked, the background should change to a city. Can you add code to make this happen?",
        "gradek_playlab_events3a_instruction": "When the third bird is clicked, the background should change to a city. Can you add code to make this happen?",
        "gradek_playlab_events3b_instruction": "Add a button so that Olive the Cat moves right when you click the \"right\" button.",
        "gradek_playlab_events3c_instruction": "Now, get Jorge to move right when the `right` button is clicked.",
        "gradek_playlab_events4_instruction": "Add code to make something happen when the fourth bird is clicked. Be creative!",
        "gradek_playlab_events4a_instruction": "Add a block so that Olive the Cat moves left when you click the \"left\" button.",
        "gradek_playlab_events4c_instruction": "Add events to have Jorge move up and down when the `up` and `down` buttons are pressed.",
        "gradek_playlab_events5_instruction": "About My Robot Project! Write code so that clicking on each bird shows a new fact about your robot.",
        "gradek_playlab_events5a_instruction": "About My Robot Project! Write code so that clicking on each bird shows a new fact about your robot.",
        "gradek_playlab_events5c_instruction": "Make this more interesting by changing the background and playing a random sound when Jorge is clicked.",
        "gradek_playlab_eventsA_instruction": "Now, have the cat change to a random size AND have it play a random sound when you click the center button.",
        "gradek_playlab_eventsFP_instruction": "Add anything you want to this game.  Can you make the dinosaur disappear when Jorge runs into him?",
        "gradek_playlab_eventsPre_instruction": "This is a Play Lab level.  Move blocks to the workspace and see what happens!",
        "group test_instruction": "Make a game",
        "harvester_Kahoot_instruction": "Now help the farmer pick the corn, lettuce, **and** pumpkin.",
        "harvey_pixelation_instruction": "Encode an image of anything you like using binary. The binary language will be represented with '0' and '1' only.",
        "harvey_snowflake_artist1_instruction": "Get your snowflake ready for 3d printing!",
        "harvey_snowflake_artist2_instruction": "Get your snowflake ready for 3d printing!",
        "harvey_tictactoe_instruction": "Let's play a game! Draw as many X's as you can! Can you get 3 in a row?",
        "iceAgeLoopsforVideo_instruction": "Can you get to the acorn with just one `move forward` block?",
        "iceage_click_hello_instruction": "Can you help Sid call for his friends when you click on him? ",
        "iceage_click_hello_2018_instruction": "Can you help Sid call for his friends when you click on him? ",
        "iceage_free_play_instruction": "Time to create your own game or story! ",
        "iceage_free_play_2018_instruction": "Time to create your own game or story! ",
        "iceage_free_playcourseF_IceAge_11_instruction": "Time to create your own game or story! ",
        "iceage_hello1_instruction": "Help Sid say \"Hello!\" by dragging the `say` block out and connecting it to the bottom of the `when run` event.",
        "iceage_hello1_2018_instruction": "Help Sid say \"Hello!\" by dragging the `say` block out and connecting it to the bottom of the `when run` event.",
        "iceage_hello2_instruction": "Help Manny and Sid greet each other by using the the `actor ___ say` block twice.",
        "iceage_hello2_2018_instruction": "Help Manny and Sid greet each other by using the the `actor ___ say` block twice.",
        "iceage_move_events_instruction": "Write the code to help Scrat get all of the acorns!",
        "iceage_move_events_2018_instruction": "Write the code to help Scrat get all of the acorns!",
        "iceage_move_to_actor_instruction": "Connect a block to the `when actor touches` event to play a sound when Diego finds Manny.",
        "iceage_move_to_actor_2018_instruction": "Connect a block to the `when actor touches` event to play a sound when Diego finds Manny.",
        "iceage_move_to_flag_instruction": "Scrat is looking for his acorn! Can you help him move the last 200 pixels?",
        "iceage_move_to_flag_2018_instruction": "Scrat is looking for his acorn! Can you help him move the last 200 pixels?",
        "iceage_repeat_instruction": "Help Granny get some exercise by moving left and right repeatedly.",
        "iceage_repeat_2018_instruction": "Help Granny get some exercise by moving left and right repeatedly.",
        "iceage_sound_and_points_instruction": "Can you finish this program to make it so that you both **play a sound** and **score a point** when Sid and Granny collide? ",
        "iceage_sound_and_points_2018_instruction": "Can you finish this program to make it so that you both **play a sound** and **score a point** when Sid and Granny collide? ",
        "iceage_throw_hearts_instruction": "Use the `actor __ throw` command to have Sid (actor 1) throw hearts at Granny (actor 2) and set Granny's mood to happy when she gets hit with them.",
        "iceage_throw_hearts_2018_instruction": "Use the `actor __ throw` command to have Sid (actor 1) throw hearts at Granny (actor 2) and set Granny's mood to happy when she gets hit with them.",
        "iceage_warn_ice_age_instruction": "Change the scene to an icy background and set Sid’s (actor 1) speed to fast.",
        "iceage_warn_ice_age_2018_instruction": "Change the scene to an icy background and set Sid’s (actor 1) speed to fast.",
        "jessie-test_instruction": "Lots of instructions",
        "k-1 maze 1_instruction": "Can you make me move West to get to the pig?",
        "k1stickerfreeplay_instruction": "The artist saw something funny in the distance.  Draw what you think he saw.",
        "kikiTesta_instruction": "Our adventurer wants to collect coins.  But she can only use 4 blocks to get them.\n\nCan you help her grab as many as she can using just 4 blocks?",
        "kikiTesting_instruction": "See all angles of Stevie and Jorge",
        "level 'grade3_Loops_10_instruction": "Such a busy bee!\n\nHelp bee collect all of the nectar and make all of the honey with the fewest blocks possible.",
        "level 'grade3_Loops_11_instruction": "The shape of this path is different than the others. \n\nCan you collect all of the nectar using as few blocks as possible?",
        "level 'grade3_Loops_12_instruction": "Can you find the quickest way for the bee to collect all of the nectar and make all of the honey?",
        "level 'grade3_Loops_2_instruction": "This time, use a loop to gather all of the nectar.",
        "level 'grade3_Loops_3_instruction": "Use a `repeat` loop to collect all of the nectar.",
        "level 'grade3_Loops_4_instruction": "Now use the `repeat` block to collect all of the nectar and make all of the honey.",
        "level 'grade3_Loops_5_instruction": "What a beautiful field of flowers!   Help the bee visit each one.  Can you find a way to do it with fewer than 7 blocks?",
        "level 'grade3_Loops_6_instruction": "How many times can loops help you in this puzzle?  \n\nLoops are your friend! Use a few of them to complete this puzzle with the fewest blocks possible.",
        "level 'grade3_Loops_7_instruction": "Those flowers look tasty!\n\nCollect nectar from each of the flowers using the fewest blocks possible.",
        "level 'grade3_Loops_8_instruction": "Collect all the nectar and make all of the honey using the fewest blocks possible.",
        "level 'grade3_Loops_9_instruction": "Collect nectar from each flower and make honey at each honeycomb using the fewest blocks possible.",
        "level grade3_Loops_2_instruction": "This time, use a loop to gather all of the nectar.",
        "loop pet test_instruction": "Last time, you practiced using the \"repeat forever\" loop to make a sprite do something forever. This time, we will use it to make a virtual pet. \n\nThis dog's name is Daisy. Daisy LOVES to snack on carrots. Use the \"drag and drop\" block to move the carrot to Daisy.",
        "loops_forvideo_angrybirds_ab_instruction": "Use loops to get the bird to the pig!",
        "loops_forvideo_angrybirds_cf_instruction": "Use loops to get the bird to the pig!",
        "loops_forvideo_bee_cf_instruction": "Use loops to help the bee get nectar from all the flowers!",
        "loops_forvideo_collector_ab_instruction": "Use loops to help the collector get all the gems!",
        "loops_forvideo_collector_cf_instruction": "Use loops to help Laurel collect gems!",
        "loops_forvideo_harvester_ab_instruction": "Use loops to help the harvester pick the corn!",
        "loops_forvideo_harvester_cf_instruction": "Use loops to help the harvester pick her crops!",
        "loops_forvideo_iceage_ab_instruction": "Use loops to get Scrat to the acorn!",
        "loops_forvideo_iceage_cf_instruction": "Use loops to get Scrat to the acorn!",
        "love_spring_1_instruction": "Let's celebrate Spring!  We have put some seeds in the ground to prepare for the season's flowers.  Can you cover them up so that the birds don't eat them?",
        "love_spring_2_instruction": "Our flowers are in full bloom!  Now we need the bee to grab nectar from each one so he can make plenty of honey back at his hive!",
        "love_spring_3_instruction": "Figure out how to change this code so that Robin chooses a number between 1 and 20.  \n\nWhen you're ready, press \"Run\" and play until you guess Robin's number!",
        "marina_gameLab_play_instruction": "Clone this level and make your own blocks!",
        "mike3bit_instruction": "We start you with the 4x2 image Maddie was creating, but we've left out the last few pixels. Finish off the image by figuring out which colors are missing and encoding them.",
        "mike3bitbird_instruction": "Here's an example of an image made with 3-bit color. Try changing it to understand how it works. If you want to reset the image, press \"Start Over\".",
        "mike3bitfreeplay_instruction": "Make something awesome and share it with your classmates! You can copy and paste the value of a pixel to use it repeatedly.",
        "mike3bitmario_instruction": "A careless binary coder typed in ONE extra 0 or 1 somewhere within this image's data. The extra bit that is causing Mario to glitch out! \n\nDelete the extra bit to restore Mario back to normal!",
        "pet game 1_instruction": "Use the \"make a new sprite\" block to make yourself a pet!",
        "pet game 2_instruction": "Your pet needs some exercise! Use the \"add behavior\" block to get them moving.",
        "pet game 3_instruction": "Pets love toys! Use a second \"make sprite\" block to give your pet a toy, then use the \"move towards\" behavior to make your pet run to their new toy.",
        "pet game 4_instruction": "When your pet gets to their toy, they get excited! Use the \"when touches\" block to detect when your pet gets to their toy.\n\nWhen that happens, use the \"remove behavior\" block to make them stop walking, and the \"add behavior\" block to make them have a dance party!",
        "pet game 5_instruction": "You can add lots more things for your pet to interact with! Play around with the \"set sprite\" block and make more stuff anywhere you want it!",
        "pet game 6_instruction": "It's important for pets to learn to follow commands. Use the \"when clicked\" block to teach your pet to only start wandering after you click on them.",
        "pet game 7_instruction": "Pets need to learn to stop, too! Use the \"when clicked\" block to teach your pet to stop wandering after you click on them.",
        "pet game 8_instruction": "Your pet now has two toys! Use the \"when clicked\" block to get them to move to the toy you click on",
        "pet game 9_instruction": "Your pet has been so good, they deserve a treat. Use the \"add behavior\" block to make the bone draggable, then drag it to your pet.",
        "playEventsK1_instruction": "This game is called \"Play Lab\".  See if you can figure out what each block does.",
        "playEventsK2_instruction": "Jorge wants to say \"Hi there.\"\n\nCan you help?",
        "playEventsK3_instruction": "Jorge wants to be scratched behind the ears!  Can you make it so that when you click Jorge he is happy?",
        "playEventsK4_instruction": "Can you make it so that Jorge the dog chases Robin the bird when you click the up arrow?",
        "playEventsK5_instruction": "Now add code so that Robin flies away when you click the forward arrow.",
        "playEventsK6_instruction": "Have Robin talk back to Jorge when you click on her.",
        "playEventsK7_instruction": "What else can you do in this fun scene?",
        "playLabDebugVideo1_instruction": "Jorge the Dog wants to say \"Hi there.\"  Can you help him?",
        "ramp_artist_loops1_instruction": "Move forward by 60 pixels to complete this puzzle.",
        "ramp_artist_loops1_2018_instruction": "Move forward by 60 pixels to complete this puzzle.",
        "ramp_artist_loops2_instruction": "Move forward five times and make this colored line.",
        "ramp_artist_loops2_2018_instruction": "Move forward five times and make this colored line.",
        "ramp_artist_loops3_instruction": "Use a `repeat` loop to draw five colored dashes.",
        "ramp_artist_loops3_2018_instruction": "Use a `repeat` loop to draw five colored dashes.",
        "ramp_artist_loops4_instruction": "What happens when you add a 72 degree right turn after everything else inside your loop?",
        "ramp_artist_loops4_2018_instruction": "What happens when you add a 72 degree right turn after everything else inside your loop?",
        "ramp_artist_loops5_instruction": "Use loops to draw this staircase.",
        "ramp_artist_loops5_2018_instruction": "Use loops to draw this staircase.",
        "ramp_artist_loops6_instruction": "Edit your loop to draw this staircase.",
        "ramp_artist_loops6_2018_instruction": "Edit your loop to draw this staircase.",
        "ramp_artist_loops7_instruction": "Look for a pattern and make this code shorter using loops!",
        "ramp_artist_loops7_2018_instruction": "Look for a pattern and make this code shorter using loops!",
        "ramp_artist_loops8_instruction": "Look for a pattern and make this code shorter using loops.",
        "ramp_artist_loops8_2018_instruction": "Look for a pattern and make this code shorter using loops.",
        "ramp_artist_loops8_clone_instruction": "Look for a pattern and make this code shorter using loops.",
        "ramp_artist_loops9_instruction": "Solve this puzzle by drawing a square.",
        "ramp_artist_loops9_2018_instruction": "Solve this puzzle by drawing a square.",
        "sample1_instruction": "Our adventurer wants to collect coins.  But she can only use 4 blocks to get them.\n\nCan you help her grab as many as she can using just 4 blocks?",
        "sample10_instruction": "Now you can use loops to draw whatever you like!",
        "sample10a_instruction": "You have helped the adventurer and her bee!  As a reward, please stay and play around in my magical village. \n\nYou should have everything you need to create a game of your own.",
        "sample2_instruction": "Use what you've learned to help bee gather all of this honey using only the blocks that you have here.",
        "sample2a_instruction": "Use what you've learned to help bee gather all of this honey using only 4 blocks.",
        "sample3_instruction": "Now you can help bee make all of the honey using just the blocks in the toolbox.",
        "sample3assessment_instruction": "Can you figure out how to gather all of this nectar in just one try?",
        "sample4_instruction": "Our adventurer has found a stash of coins in this cave.\n\nCan you help her grab as many as she can using just 7 blocks?",
        "sample5_instruction": "Help bee make all of the honey.",
        "sample6_instruction": "Challenge: Help bee get all of the nectar.",
        "sample7assessment_instruction": "Can you help bee make all of the honey in just one try?",
        "sample8_instruction": "Look at this trove of coins! How many can you get the adventurer to grab?",
        "sample9_instruction": "Use loops to help the artist connect all of the dots. ",
        "sample9a_instruction": "The wizard has found his potions!  Use everything you have learned to help him collect them.",
        "scrat 16 (copy 1)_instruction": "Acorn! Acorn! Acorn! Use an \"if\" block to get me there with the fewest number of blocks.",
        "scrat 16_instruction": "Acorn! Acorn! Acorn! Use an \"if\" block to get me there with the fewest number of blocks.",
        "scrat 17 (copy 1)_instruction": "Ok, let's do that again for practice - this isn't very different, but watch out for the <insert obstacle name for Scrat>!",
        "scrat 17_instruction": "Ok, let's do that again for practice - this isn't very different, but watch out for the wall!",
        "scrat 18 (copy 1)_instruction": "The \"If-else\" blocks checks a condition, and then does one thing OR another. To get me to the acorn try to use this new block.",
        "scrat 18_instruction": "The \"If-else\" blocks checks a condition, and then does one thing OR another. To get me to the acorn try to use this new block.",
        "scrat 19 (copy 1)_instruction": "One more practice of the \"if-else\" block, can you get it right on your first try?",
        "scrat 19_instruction": "One more practice of the \"if-else\" block, can you get it right on your first try?",
        "scrat 20_instruction": "Can you add just 3 blocks to help me solve a more complex maze? If you do it right, I can walk any curvy path no matter the length. Hurry! The ice is melting!",
        "skratDebugVideo1_instruction": "Get Scrat to the Acorn.",
        "subgoal U3 L4 introducing subgoal labels_instruction": "Introduce orient turtle and move turtle",
        "subgoal U3L2 Using Simple Commands_instruction": "Draw a 1x1 square above and to the left of the turtle's starting position. Click to see full instructions.",
        "subgoalU3L2_TurtleSquare_right_instruction": "Draw a square to the front and to the right of the starting location. (Click to show full instructions)",
        "template test_instruction": "what's up",
        "testArtistForTestK_instruction": "The Artist is trying to draw a line five times, but can't get it right.  Can you help?",
        "test_sarah_instruction": "hi hi",
        "u3-old-drawing-view_instruction": "DO This",
        "valentine_artist_03_instruction": "Now try something on your own!",
        "weird_playLab_instruction": "About My Robot Project! Write code so that clicking on each bird shows a new fact about your robot."
      },
      "markdown_instructions": {
        "'pre-assessment survey q25A'_markdown_instruction": "If yes, what computer science course(s) had you taken before your current computer science  class? \n",
        "2-3 Artist 1 new_markdown_instruction": "Hi, I'm an artist. You can write code to make me draw almost anything. Use a few blocks to make me draw over the grey lines in the picture. (Each line is 100 pixels long)\n\n",
        "2-3 Artist 11_markdown_instruction": "Give the stop sign a border by making an octagon with 100 pixels sides. ",
        "2-3 Artist 12_markdown_instruction": "Create a circle to finish the eyeball! \n\nIf the artist turns 1 degree with each loop, how many times do you need to repeat the code to draw a circle? ",
        "2-3 Artist 2 new_markdown_instruction": "This house has a half-finished wall. Each side is 100, but the half-finished wall is only 50. Complete the wall.",
        "2-3 Artist 3.4_markdown_instruction": "The jump block moves the artist without drawing. Draw the dashed line using both the `jump forward` and `move forward` blocks. Each line is 50 pixels long.",
        "2-3 Artist 3new_markdown_instruction": "The red hat is 100 pixels tall. Finish drawing a black hat that is 70 pixels shorter. \n\n*(Note: The width of each hat is 50 pixels.)*",
        "2-3 Artist 4_markdown_instruction": "Help me complete the house for this cat.",
        "2-3 Artist 6_markdown_instruction": "This house needs a roof! Draw the triangle.  \n\nHint: all three sides are the same length.\n\n<img src=\"https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif\" width=\"300\"/>",
        "2-3 Artist 7_markdown_instruction": "Finish drawing the last set of windows on the school so that everyone in class can see outside. \n\nThe sides of each square window pane are 25 pixels long. ",
        "2-3 Artist 8_markdown_instruction": "Time to build a barn!\n\nMake the rooms for each animal by splitting the barn into 2 equal-sized squares. \n\nHint: The rectangle is 200 pixels wide and 100 pixels tall.\n\nThere are many different ways to solve this puzzle.",
        "2-3 Artist 9 NEW_markdown_instruction": "Finish this kite",
        "2-3 Artist 9 REPLACEMENT_markdown_instruction": "Finish drawing these stairs!",
        "2-3 Artist 9_markdown_instruction": "Finish this kite",
        "2-3 Artist Assessment 1_markdown_instruction": "**Assessment:** Finish drawing the last tooth. It is 25 pixels wide and 25 pixels tall.",
        "2-3 Artist Debugging 1_markdown_instruction": "This hat should only be 50 pixels wide. \nCan you fix it?\n\n<br/>\n",
        "2-3 Artist Debugging 10_markdown_instruction": "The direction pad on my game controller is too narrow. \n\nCan you make it wider by 10 pixels?\n\nTry running the code first to see what's wrong.",
        "2-3 Artist Debugging 11_markdown_instruction": "My snowflake is falling apart!\n\nCan you figure out what's going wrong?",
        "2-3 Artist Debugging 2_markdown_instruction": "This code for the cat's whiskers is wrong. \n\nFix this code to draw whiskers that are all the same length.",
        "2-3 Artist Debugging 3_markdown_instruction": "My boat has a hole! \n\nWhat do you need to fix to make the ends meet?",
        "2-3 Artist Debugging 5_markdown_instruction": "The code that we have for the leg and foot is wrong. \n\nCan you fix it?",
        "2-3 Artist Debugging 6_markdown_instruction": "Looks like I'm sitting on a chair that’s missing a leg!\n\nEdit the code to draw the last leg.",
        "2-3 Artist Debugging 7_markdown_instruction": "Looks like the C in code is drawn backwards!\n\nCan you make it look like a C again?",
        "2-3 Artist Debugging 8_markdown_instruction": "My teacher says that I should finish what I start!\n\nHelp me finish my pinwheel. Can you figure out what's wrong?",
        "2-3 Artist Debugging 9_markdown_instruction": "Something is off!\n\nThe code for this stem is wrong. Can you figure out how to get the artist to trace the stem the right way?",
        "2-3 Artist Debugging Assessment 1_markdown_instruction": "**Assessment:** \nWhy does this square end up being 75 pixels too small on each side?  \n\nWhere does the code go wrong?",
        "2-3 Artist Free Play_markdown_instruction": "Free-play! Draw anything you'd like.",
        "2-3 Artist Functions 1 a_markdown_instruction": "\"Me zombie artist. Me love drawing!\" \n\nHelp the zombie draw square glasses.  \n\nThe bridge between the glasses is 25 pixels shorter than the width of the squares, which is 100 pixels.\n\n",
        "2-3 Artist Functions 1_markdown_instruction": "\"Me zombie artist. Me love drawing!\" \n\nHelp the zombie draw square glasses.  \n\nThe bridge between the glasses is 25 pixels shorter than the width of the squares, which is 100 pixels.\n\n",
        "2-3 Artist Functions 10_markdown_instruction": "**Freeplay:** Here are two functions, one to draw a big gear and one to draw a small gear.  \n\nUse them to draw the inside of a machine!",
        "2-3 Artist Functions 11 a_markdown_instruction": "We've renamed the `draw a square` function to `draw a hexagon`, but it's still giving us squares!  \n\nCan you modify the `draw a hexagon` function to draw a hexagon with 50 pixel sides? \n\nDraw the image using the new function!",
        "2-3 Artist Functions 11.5 a_markdown_instruction": "Here's that same `draw a hexagon` function. \n\nWhat happens if you loop the main program **6** times, turning **60** degrees each time you loop?",
        "2-3 Artist Functions 11.5_markdown_instruction": "Here's that same `draw a hexagon` function. \n\nWhat happens if you loop the main program 6 times, turning 60 degrees each time you loop?",
        "2-3 Artist Functions 11_markdown_instruction": "We've renamed the `draw a square` function to `draw a hexagon`, but it's still giving us squares!  \n\nCan you modify the `draw a hexagon` function to draw a hexagon with 50 pixel sides? \n\nDraw the image using the new function!",
        "2-3 Artist Functions 12 Mike_markdown_instruction": "Functions are really great for drawing complex things multiple times. \n\nCan you use the `draw a flower` function to fill the rest of the planter box?\nThe plants are all 100 pixels apart.",
        "2-3 Artist Functions 12 a_markdown_instruction": "Functions are really great for drawing complex things multiple times. \n\nCan you use the `draw a flower` function to fill the rest of the planter box?\nThe plants are all 100 pixels apart.",
        "2-3 Artist Functions 12_markdown_instruction": "Functions are really great for drawing complex things multiple times. \n\nCan you use the `draw a flower` function to fill the rest of the planter box?\nThe plants are all 100 pixels apart.",
        "2-3 Artist Functions 2 a_markdown_instruction": "Functions let you define new blocks! \n\nWe've moved the blocks needed for drawing a square into a function called `draw a square`. This time, use the small green `draw a square` block to call this new function and create the glasses. \n\nThe squares in this drawing are 75 pixels apart.",
        "2-3 Artist Functions 2_markdown_instruction": "Functions let you define new blocks! \n\nWe've moved the blocks needed for drawing a square into a function called `draw a square`. This time, use the `draw a square` function to create the glasses. \n\nThe squares are 75 pixels apart.",
        "2-3 Artist Functions 3 a_markdown_instruction": "Edit the \"draw a square\" function to draw glasses with frames that are 115px on each side. \n\nThe squares are now 45 pixels apart.",
        "2-3 Artist Functions 3_markdown_instruction": "Edit the function to draw a square with a side length of 115 to draw the bigger glasses. \n\nThe squares are now 45 pixels apart.",
        "2-3 Artist Functions 4 a_markdown_instruction": "Now, put the function inside of a loop and add an extra turn to draw these three squares.",
        "2-3 Artist Functions 4_markdown_instruction": "Now, put the function inside of a loop to draw these three squares.",
        "2-3 Artist Functions 9_markdown_instruction": "**Freeplay:** Here is a snowflake function. Experiment with it to create a winter scene! \n\nThis is a free play level, so there is no puzzle to solve. Have fun!",
        "2-3 Artist Loops 1_markdown_instruction": "Can you make a hexagon with sides that are 100 pixels long to finish the cell? Remember, that means that you will only need to turn 60 degrees!",
        "2-3 Artist Loops 2_markdown_instruction": "Now use a repeat block to make the cell a shell.",
        "2-3 Artist Loops New 1_markdown_instruction": "Let's draw this robot's head! Can you make a square with sides that are 100 pixels?\n\n<br/>\n",
        "2-3 Artist Loops New 10_markdown_instruction": "Now let's connect a bunch of V's together in a loop.",
        "2-3 Artist Loops New 11_markdown_instruction": "Time to make something snazzy! \n\nRebuild the code from the last puzzle, but this time, add a left turn of 30 degrees inside the loop. Now, repeat it 24 times instead of 8.",
        "2-3 Artist Loops New 12_markdown_instruction": "Draw a diamond with sides of 100 pixels. ",
        "2-3 Artist Loops New 13_markdown_instruction": "We are going to start you with some code (in grey) to make one diamond. \n\nLoop the grey code to create a fun pattern!",
        "2-3 Artist Loops New 14_markdown_instruction": "Play around with the code for the diamond and see what other patterns you can make. \n\nTry changing how many degrees you turn and how many times you loop.",
        "2-3 Artist Loops New 15_markdown_instruction": "Now, draw anything you like!\n<br/><br/>\n\n",
        "2-3 Artist Loops New 2_markdown_instruction": "Here is the same puzzle that we just solved, but this time, we can only use one `move forward` block and one `turn` block this time.\n\nCan you use a `repeat` to solve this puzzle?",
        "2-3 Artist Loops New 9_markdown_instruction": "Draw a simple V (where both sides are 50 pixels) to complete the arrow.",
        "2-3 Artist Nested Loops 1_markdown_instruction": "You've used loops to draw shapes before, but now we're going to put loops inside of other loops!\n\nPut a `repeat` block around this whole stack of code to draw the pattern.\n\n<br/>\n\n",
        "2-3 Artist Nested Loops 10_markdown_instruction": "Loop this code 12 times to complete the pattern.",
        "2-3 Artist Nested Loops 11_markdown_instruction": "Loop this code 4 times to complete the pattern, turn 90 degrees after each circle.",
        "2-3 Artist Nested Loops 12_markdown_instruction": "Loop this code 12 times to complete the curls.",
        "2-3 Artist Nested Loops 2_markdown_instruction": "Now loop the triangle 6 times. \n\nAfter each triangle, you'll need to turn 60 degrees before drawing the next.",
        "2-3 Artist Nested Loops 3_markdown_instruction": "You'll need to loop your triangle 12 times to draw this pattern. \n\nDivide the number of degrees in a circle (360) by the number of shapes you're drawing (12) to figure out how far to turn after each shape.",
        "2-3 Artist Nested Loops 4_markdown_instruction": "Loop this diamond 12 times to draw a flower!\n\nNote: We'll use the same angle to loop 12 diamonds as we did for 12 triangles.  \nHow much do you need to turn after each shape?",
        "2-3 Artist Nested Loops 5_markdown_instruction": "Fill in this building's windows using a nested loop. \n\nThe windows are 20 pixels long and 20 pixels apart.",
        "2-3 Artist Nested Loops 6_markdown_instruction": "This dinosaur has 8 spikes running up its tail.\n\nEach spike is 30 pixels long. \n\nLoop the triangle 8 times, but make sure to jump forward after each one!",
        "2-3 Artist Nested Loops 7_markdown_instruction": "Loop this triangle 10 times to draw the sun. \n\nYou'll need to move and turn after each triangle. \n\nYou can figure out how much to turn by dividing the number of degrees in a circle by the number of triangles that make it up.",
        "2-3 Artist Nested Loops 8_markdown_instruction": "Now let's add some grass to our picture. \n\nEach tuft of grass is 50 pixels apart.",
        "2-3 Artist Nested Loops 9_markdown_instruction": "We'll finish this picture by adding our flower. \n\nLoop the diamond 12 times to draw the flower.",
        "2-3 Artist Nested Loops Free Play_markdown_instruction": "Free play, draw something cool with nested loops.",
        "2-3 Bee Conditionals 11_markdown_instruction": "I wonder what's out there!\n\nHelp me fly around the yard and collect nectar only from the flowers that have some. ",
        "2-3 Bee Conditionals 13_markdown_instruction": "There's a lot happening here!\n\nUse what you've learned to collect all of the nectar and then make the honey.",
        "2-3 Bee Conditionals 14_markdown_instruction": "Let's put everything together!\n\nUse what you've learned to help me collect nectar only from flowers that have it, using as few blocks as possible.  \n\nDon't forget to make honey at the end.",
        "2-3 Bee Conditionals 15_markdown_instruction": "This stair step pattern should look familiar.  \n\nCan you collect nectar only from the flowers that have some, using as few blocks as possible?",
        "2-3 Bee Conditionals 2_markdown_instruction": "I'm a hungry bee! \n\n\nHelp me collect all of the nectar from the flowers using the fewest number of blocks.",
        "2-3 Bee Conditionals 3_markdown_instruction": "Look at all of that nectar!\n\nHelp me collect the nectar and make the honey using as few blocks as you can.  ",
        "2-3 Bee Conditionals 5_markdown_instruction": "These magic purple flowers change!\n\nEach time you try the puzzle, purple flowers can have either 1 nectar or none at all...but you won't know the number until you run the code! \n\nBe careful not to collect nectar from a purple flower if it doesn't have any. \nYou must first check if the nectar is equal to 1 using the `if nectar` block.",
        "2-3 Bee Conditionals Assessment 1_markdown_instruction": "**Assessment:** Collect all of the nectar.  \nBe careful not to try to collect nectar from a purple flower if it doesn't have any.",
        "2-3 Bee Debugging 1_markdown_instruction": "These blocks are really bugging me!\n\nFix the error(s) to collect all of the nectar.",
        "2-3 Bee Debugging 10_markdown_instruction": "This puzzle is making me loopy! \n\nFix the error(s) to collect all of the nectar and make all of the honey.",
        "2-3 Bee Debugging 2_markdown_instruction": "Can you find the problem here?\n\nFix the error(s) to collect all of the nectar.",
        "2-3 Bee Debugging 3_markdown_instruction": "Ooh, this one stings!\n\nFix the error(s) to collect all of the nectar.",
        "2-3 Bee Debugging 5_markdown_instruction": "That flower looks tasty! \n\nFix the error(s) to collect all of the nectar.  \nYou can now use both run and step.",
        "2-3 Bee Debugging 6_markdown_instruction": "What a sweet challenge!\n\nFix the error(s) to collect all of the nectar.",
        "2-3 Bee Debugging 9_markdown_instruction": "\"Bee\" patient with this one!\n\nYou will need to fix a couple of things in this program to collect all of the nectar and make all of the honey.",
        "2-3 Bee Debugging Assessment 1_markdown_instruction": "**Assessment:**  Now it's time to show what you know!\n\nFix the error(s) to collect all of the nectar and make all of the honey.",
        "2-3 Bee Functions 1_markdown_instruction": "Functions are blocks of code that perform a task.  \n\nUse the `get 2 nectar` function to collect the nectar from each flower.",
        "2-3 Bee Functions 10_markdown_instruction": "Purple flowers change between either 1 or 0 nectar each time you run the puzzle.   \n\nCreate a function that collects nectar only from purple flowers that have nectar.",
        "2-3 Bee Functions 2_markdown_instruction": "Functions are blocks of code that perform a task.  \n\nUse the `get 5` function to get 5 nectars at a time.",
        "2-3 Bee Functions 4_markdown_instruction": "The `move and get nectar` function turns the bee, collects nectar, and then returns the bee to where it started.  \n\nUse the function to collect all of the nectar.",
        "2-3 Bee Functions Assessment 1_markdown_instruction": "**Assessment:** Use the given function to collect nectar from each flower.",
        "2-3 Bee Functions Assessment 2_markdown_instruction": "**Assessment:** Create a function to turn, move forward and make 3 honey, then return the bee to where it started and turn back.",
        "2-3 Bee Loops 1_markdown_instruction": "Those flowers look tasty!\n\nCollect nectar from each of the flowers using the fewest blocks possible.",
        "2-3 Bee Loops 13_markdown_instruction": "**Assessment:** Collect all of the nectar using the fewest blocks possible.",
        "2-3 Bee Loops 3A_markdown_instruction": "Use a `repeat` loop to collect all of the nectar.",
        "2-3 Bee Loops 3B_markdown_instruction": "Now use the `repeat` block to collect all of the nectar and make all of the honey.",
        "2-3 Bee Loops 4_markdown_instruction": "Such a busy bee!\n\nHelp Bee collect all of the nectar and make all of the honey with the fewest blocks possible.",
        "2-3 Bee Loops 4A_markdown_instruction": "How many times can loops help you in this puzzle?  \n\nLoops are your friend! Use a few of them to complete this puzzle with the fewest blocks possible.",
        "2-3 Bee Loops 5_markdown_instruction": "The shape of this path is different from the others. \n\nCan you collect all of the nectar using as few blocks as possible?",
        "2-3 Bee Loops 7_markdown_instruction": "What a beautiful field of flowers!   \n\nHelp the bee visit each one.\n\nCan you find a way to do it with fewer than 7 blocks?",
        "2-3 Bee Loops 8_markdown_instruction": "These purple flowers have different amount of nectar each time you run the puzzle. \n\nUse the `while nectar` loop to collect all of the nectar. \n\nThis loop will run as long as the condition is true, in this case `nectar > 0`.",
        "2-3 Bee Loops Assessment 1_markdown_instruction": "**Assessment:** Use a `while` loop to collect all of the nectar from these flowers.",
        "2-3 Maze 1_markdown_instruction": "Can you help me catch the naughty pig? \n\nStack a couple of `move forward` blocks below the `when run` block and press \"Run\". ",
        "2-3 Maze 12 - One Move Block_markdown_instruction": "Get the mean pig! But this time, you can only use one `move forward` block...\n\nAh, look closely - do you see any other blocks that can help you get there?",
        "2-3 Maze 12_markdown_instruction": "Suddenly, a magical block appears!  With the `repeat` block, you can loop code over and over.\n\nCan you get to the pig by creating a loop that uses only one `move forward` block inside of a `repeat`?",
        "2-3 Maze 13_markdown_instruction": "Get me to the pig! You can only use one `move forward` block this time",
        "2-3 Maze 15_markdown_instruction": "In this puzzle, two `repeat` loops will help you get to the pig with the fewest number of blocks!",
        "2-3 Maze Loops 18_markdown_instruction": "Get me to the sunflower using the fewest blocks possible!  \n\nTry using one `repeat` loop inside of another to cut down on the amount of code you need.",
        "2-3 Maze Loops 19_markdown_instruction": "Let's take this to another level! \n\nUse loops to get me to the sunflower with the fewest loops possible.",
        "2-3 Maze Loops Assessment 1_markdown_instruction": "**Assessment:**  Get me to the sunflower using only 5 blocks! ",
        "4-5 Artist 1_markdown_instruction": "Help me finish drawing my box. (Each line is 300 pixels long) \n\n",
        "4-5 Artist 10_markdown_instruction": "Press \"Run\" to try the code. Then, repeat it enough times to complete the drawing. The colors will be different every time.",
        "4-5 Artist 11_markdown_instruction": "Complete the green lines.  \n\nThe lines are 300 pixels long and 15 pixels apart.",
        "4-5 Artist 2_markdown_instruction": "Loop this code using the `repeat` block to complete the square.",
        "4-5 Artist 3.5_markdown_instruction": "Try to figure out what happens if you run this code (or just press \"Run\" and try it). \n\nNext, repeat the code enough times to complete the drawing!",
        "4-5 Artist 3_markdown_instruction": "This rectangular flower bed has a perimeter of 600.  \nThe long side has a length of 200. \n\nDraw the rectangle using as few blocks as possible.",
        "4-5 Artist 4_markdown_instruction": "How many degrees are in a circle?  \n\nLoop the blocks to create a circle of colors.",
        "4-5 Artist 5_markdown_instruction": "What can we replace \"???\" with to make sure that the zombie completes this drawing using the loop provided?",
        "4-5 Artist 6_markdown_instruction": "This equilateral triangle has angles of 60, 60, and 60 degrees. Each side is 200 pixels. Complete the drawing.",
        "4-5 Artist 7_markdown_instruction": "This right triangle has angles of 30, 60, and 90 degrees.  The slanted side's length (length of the hypotenuse) is 200 pixels. \n\nComplete the drawing.",
        "4-5 Artist 8_markdown_instruction": "The halfway line on a soccer field is *perpendicular* to the sidelines.   \nThis rectangle has a perimeter of 800 pixels total, and it is 240 pixels long. How tall is it?   \n\nDraw the bounds and the halfway line.",
        "4-5 Artist 9_markdown_instruction": "Draw the right half of this image so that the design is symmetrical. \nThe triangles are equilateral and have sides that are 50 pixels long.",
        "4-5 Artist Assessment 1_markdown_instruction": "**Assessment:** Use a loop to draw the equilateral triangle. Each side is 300 pixels.",
        "4-5 Artist Free Draw 1_markdown_instruction": "Free Draw!  Draw whatever you are inspired to create.",
        "4-5 Artist Patterns 1_markdown_instruction": "Draw this square using a loop.\n\nEach side is 20 pixels long.",
        "4-5 Artist Patterns 10_markdown_instruction": "This code draws two rows of hexagons - loop the whole thing 4 times to draw the whole honeycomb. \n\nYou'll need to jump back 120 pixels in your outermost loop to make sure the artist doesn't draw off the screen.",
        "4-5 Artist Patterns 11_markdown_instruction": "How many times do you need to loop this to draw a half circle?",
        "4-5 Artist Patterns 12_markdown_instruction": "If you create another loop like this one, but turn left instead of right, what happens? \n\nCan you repeat all of that to draw this wave?",
        "4-5 Artist Patterns 13_markdown_instruction": "Now let's loop that whole thing four times to create this picture frame. Watch out for the corners - you can't just turn 90 degrees! \n\nIf looping a 3 degree turn 60 times makes a half circle, which of these blocks of code will make an additional quarter circle for the corners?",
        "4-5 Artist Patterns 2_markdown_instruction": "If you place your square loop inside another loop, we call that a nested loop. \n\nWhat do you need to add as an outer loop to make sure all 15 squares line up next to each other?",
        "4-5 Artist Patterns 3_markdown_instruction": "Now let's go one level deeper! We've nested that whole block of code into another loop, but you need to get the artist back in place to draw the next line. Which of these code blocks can you place at the end of the outermost loop to draw the whole grid?",
        "4-5 Artist Patterns 4_markdown_instruction": "This diamond has 50 pixel sides and angles of 120 and 60 degrees. \n\nUse a loop to draw it.",
        "4-5 Artist Patterns 5_markdown_instruction": "Repeat this code to make a row of 6 diamonds. \n\nNotice that we changed our diamond code to repeat 3 times instead of 2 - why do you think that is?",
        "4-5 Artist Patterns 6_markdown_instruction": "How many times do you need to repeat this block to draw the full grid of diamonds?\n\n",
        "4-5 Artist Patterns 7_markdown_instruction": "Let's modify the code from the last puzzle to make this more complex pattern. Notice how the diamonds overlap now, try changing the first \"jump backwards\" from 100 to 50 (half as far) - now how far should the artist go in the second \"jump backwards\"?\n\n",
        "4-5 Artist Patterns 8_markdown_instruction": "Use a loop to draw this hexagon with 40 pixel sides and 60 degree angles.",
        "4-5 Artist Patterns 9.5_markdown_instruction": "Let's loop this code to draw two rows of hexagons. \n\nNotice how our second row is shifted to the right.",
        "4-5 Artist Patterns 9_markdown_instruction": "Now repeat this code 3 times and draw the whole row. \n\nEach hexagon is 80 pixels wide from the furthest points left to right.",
        "4-5 Artist Patterns Free Play_markdown_instruction": "Free play - try your hand at making a pattern of your own!",
        "4-5 Bee Conditionals 1_markdown_instruction": "This cloud is blocking my view! \n\nCheck to see if there's a flower under the cloud, and only get nectar if there's a flower.   \nBe careful, it can change!",
        "4-5 Bee Conditionals 2_markdown_instruction": "More clouds! \n\nCheck underneath every cloud to see if it is hiding a flower before you get nectar.  \n\nRemember: Not all clouds hide the same thing!",
        "4-5 Bee Conditionals 4_markdown_instruction": "Sometimes this cloud covers a flower, and sometimes it covers a honeycomb! \n\nUse the `if/else` block to collect nectar only if it is a flower.  \nElse, make honey (because it is a honeycomb).",
        "4-5 Bee Conditionals 5_markdown_instruction": "There will be either a flower or a honeycomb under each of those clouds!\n\nUse the `if/else` block to collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "4-5 Bee Conditionals 6_markdown_instruction": "I am not sure how much nectar this flower has, but I know it has either 1, 2, or 3 nectar. \n\nCombine the conditional blocks (`if` and/or `if/else`) to only get as much nectar as the flower has. \n\nRemember, the amount of nectar can change each time you run the puzzle!",
        "4-5 Bee Conditionals 7_markdown_instruction": "These flowers can have 3, 2, or 1 nectar. \n\nComplete the `check purple flower` function and use it to collect all of the nectar at the flowers.",
        "4-5 Bee Conditionals 8_markdown_instruction": "Write the function for `check flower make honey`. \n\nYour function should check if the purple flower has 3, 2, or 1 nectar and get all of the nectar. \nThen, move forward and make honey.",
        "4-5 Bee Conditionals Assessment 1_markdown_instruction": "**Assessment:** This cloud is either hiding a flower with one nectar or a honeycomb that needs one honey.  \n\nComplete the `get nectar or make honey` function, then call it to collect the nectar or honey. \n",
        "4-5 Bee Debugging 1_markdown_instruction": "These blocks are really bugging me. \n\nCan you fix them?",
        "4-5 Bee Debugging 6_markdown_instruction": "The purple flower has a different amount of nectar each time you run the puzzle. \n\nFix the blocks to get all of the nectar from the flower each time.",
        "4-5 Bee Debugging Assessment 1_markdown_instruction": "**Assessment:** Fix the code.",
        "4-5 Bee Nested Loops 2_markdown_instruction": "Collect all of the nectar from each flower. \n\nUse a nested loop. ",
        "4-5 Bee Nested Loops 4_markdown_instruction": "Collect all of the nectar from each flower and make honey at the honeycomb. \n\nUse a nested loop. ",
        "4-5 Bee Nested Loops Assessment 1_markdown_instruction": "**Assessment:** Collect all of the nectar and make all of the honey using loops.",
        "4-5 Maze 7_markdown_instruction": "Get the zombie to the sunflower quickly!  \n\nCan you solve the puzzle in fewer than 11 blocks?",
        "4-5 Maze 9_markdown_instruction": "Now we have a new block called `repeat until`.  \nThis will let us keep looping commands until the zombie gets the sunflower.  \n\nUse the new `repeat until` block to solve this puzzle in as few commands as possible.",
        "4-5 Maze Assessment 1_markdown_instruction": "**Assessment:** Get to the sunflower using as few blocks as possible.",
        "4-5 Maze Conditionals 1_markdown_instruction": "Use the `repeat until` block to get the zombie to the sunflower.",
        "4-5 Maze Conditionals 10_markdown_instruction": "Can you add just 3 blocks to help the zombie solve a more complex maze? \n\nIf you do it right, he can walk any curvy path no matter the length!",
        "4-5 Maze Conditionals 2_markdown_instruction": "Use the `repeat until` block to get the zombie to the sunflower.",
        "4-5 Maze Conditionals 3_markdown_instruction": "Use the `if` block to help me decide when to turn. \n",
        "4-5 Maze Conditionals 4_markdown_instruction": "Ok, solve this one just like the last puzzle, but you need to remember how you used the `if` and `repeat until` blocks together.",
        "4-5 Maze Conditionals 5_markdown_instruction": "\"Me want sunflower!\"  \n\nUse an `if` statement to get the zombie to the sunflower with the fewest number of blocks.",
        "4-5 Maze Conditionals 6_markdown_instruction": "\"Eat sunflower!\"\n\nUse an `if` statement to get the zombie to the sunflower with the fewest number of blocks.",
        "4-5 Maze Conditionals 7_markdown_instruction": "The solution to this puzzle isn't very different, but watch out for the chompers!",
        "4-5 Maze Conditionals 8_markdown_instruction": "The `if/else` block checks a condition, and then does one thing OR another. \n\nUse this new block to get me to the sunflower.",
        "4-5 Maze Conditionals 9_markdown_instruction": "One more practice puzzle with the `if/else` block!\n\nTrace it with your finger to see if you can figure it out on your first try.",
        "4-5 Maze Conditionals Assessment 1_markdown_instruction": "**Assessment:** Use a `repeat until` and an `if/else` block to get me to the sunflower in as few blocks as possible.",
        "4-5 Nested Loops 1_markdown_instruction": "Complete the code to draw these triangles.  The first one is done for you.  Hint:  3 triangles in a 360 degree rotation.\n\n",
        "4-5 Nested Loops 11_markdown_instruction": "Can you draw these 10 squares of this sidewalk using a nested loop? \n\nEach square is 30 pixels.",
        "4-5 Nested Loops 12_markdown_instruction": "Can you draw these 36 triangles using a nested loop?",
        "4-5 Nested Loops 2_markdown_instruction": "Now nest this loop inside another loop to draw 10 triangles.  \nThis is called a \"nested\" loop.  ",
        "4-5 Nested Loops 3_markdown_instruction": "Create a sun by nesting the starter code in another loop.\n\nTo get this cool design with a hollow center, you'll need to jump forward by the length of the triangle before turning.",
        "4-5 Nested Loops 5_markdown_instruction": "Loop the given code to create a windmill.",
        "4-5 Nested Loops 6_markdown_instruction": "Can you draw a hexagon by looping the triangle code?",
        "4-5 Nested Loops 7_markdown_instruction": "Loop this design 10 times. \n\nHow much do you have to turn each time you loop?",
        "4-5 Nested Loops 8_markdown_instruction": "Loop this shape 6 times. \n\nHow much do you have to turn each time you loop? ",
        "4-5 Nested Loops 9_markdown_instruction": "Draw the teeth in the alligator's mouth!",
        "4-5 Nested Loops Assessment 1_markdown_instruction": "**Assessment:** Use a nested loop to complete the design.",
        "4-5 While Loops 1_markdown_instruction": "Move me to the hole and fill it with two shovelfuls of dirt, using the `fill` block.",
        "4-5 While Loops 2_markdown_instruction": "Move me to the pile of dirt and remove it with 5 shovel scoops, using the `remove 1` block.",
        "4-5 While Loops 3_markdown_instruction": "Use as few blocks as possible to complete this puzzle!  \n\nMove me to the pile and remove all the dirt, then move to the hole and fill it completely.",
        "4-5 While Loops 4_markdown_instruction": "Wow, look at that! \n\nI don't know how many shovelfuls of dirt this hole needs.  \nCan you write a program that keeps using the `fill` block until the ground is even?  ",
        "AWS applab_markdown_instruction": "# Do this stuff now\n\n* step one\n* step two",
        "AWS link_markdown_instruction": "# Use this tool for stuff",
        "AlgPD DR Free Play_markdown_instruction": "Using a word problem from your existing curriculum or elswhere, complete the Design Recipe and program a function. Use a Design Recipe form from your workbook or download a copy [here]('https://code.org/curriculum/algebra/docs/worksheets/design_recipe.pdf').",
        "Alien Defender_markdown_instruction": "**Project Idea**: Make a defender game in Play Lab!",
        "Alien Defender_2018_markdown_instruction": "**Project Idea**: Make a defender game in Play Lab!",
        "AllTheThings Applab - Turtle move with button_markdown_instruction": "# Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).\n # Your First Interactive App!\n<img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png' style='float: right; width: 250px'> A new group of commands has been added to the toolbox called **UI Controls** (User Interface Controls) which are commands that let you interact with, and respond to, the user of your app. To keep it simple, we'll start with just two commands: \n* `onEvent` which let's you run a function in response to some event occuring (such as a button click)\n* `button` which puts a button on the screen\n\n# Do This\nYou will replicate the small app, shown below, which makes the turtle move with a button click. You will do three things:\n* Add a `button`\n* Add an `onEvent` block\n* Add `moveForward` inside the the onEvent function block\n\nHere's what you should do - you can come back to watch this as many times as you need to get it right.\n<img src=\"https://images.code.org/1cdc8cfbcef2a43f84b11ebdf14aed0c-image-1444061731350.gif\" style=\"border: solid 1px black; width: 500px; margin: auto\">",
        "AllTheThings: Pixelation - Lesson 15 - Complete 3-bit color_markdown_instruction": "# Color Pixelation: Task 1\n**Directions:**\n\n* We start you with the 4x2 image Maddie was creating, but we've left out the last two squares. \n* Finish off the image by figuring out which two colors are missing and encode them.\n",
        "App Lab test_markdown_instruction": "<a href=\"https://docs.google.com/document/d/1HgSfQeUI1zxo-3bL-9jhff0jI2um2A-3vwpvy3JAD38\" target=\"_blank\">Innovation Project</a>",
        "AppLab Intro 1 - Add Button_markdown_instruction": "# Getting Started - Add a button\n\nYou'll need a button on your home screen to go to your new screen. You can make a new button in two ways. \n\n1. If you like the style of the \"Dogs\" button you can make a copy of it. Click the button and then click \"Duplicate\".\n\n\t![](https://images.code.org/171aa97d90014f66f999ecf929b672c0-image-1504289310310.08.10 AM.png)\n\n2. You can also make a new button from scratch by dragging it in from the Design Toolbox.\n\n\t![](https://images.code.org/501c9ddd3e5b737df5b9cf053ae198a7-image-1504289359851.09.09 AM.png)\n\n3. Click and drag to move your new button where you want it.\n\n3. Once you have a new button give it a clear name, \"catButton\". You can also change its text to read \"Cats!\".\n\n\t![](https://images.code.org/87586b18b001fae0001d2243f6d09889-image-1504289448320.10.14 AM.png)\n    \n4. There's lots of other ways you can change the look of your button. Experiment with the full menu of options.\n\n5. Once you're done run your app to make sure your button appears. Then click \"Finish\" to move on to learn how to make your button actually work.",
        "AppLab Intro 1 - Add Event_markdown_instruction": "# Getting Started - onEvent\n\nYou're back in \"Code Mode\". You'll notice there's already a bit of code in this app. This `onEvent()` block runs some code when the `dogButton` is clicked. You're going to need a second `onEvent()` block to make your button work. There's two ways to do this.\n\n1. From Code Mode you can drag in the block \n\n\t![](https://images.code.org/c1ca564880152242c3bf92b2b9ad4fca-image-1504290427563.26.56 AM.png)\n    \n2. From Design Mode your button has an \"Events\" tab. Click 'Insert and show code' to add the code.\n\n\t![](https://images.code.org/90d6c0cb723ee4317244f99dcfbd3a66-image-1504290568475.29.18 AM.png)\n    \n3. Use the drop down to make sure you're making the event respond to the \"catButton\".\n\n\t![](https://images.code.org/ebef61f18259a2fb0d8addb90d9d8ba4-image-1504290674099.31.03 AM.png)\n    \n4. The `setScreen()` block changes the screen. Drag this block inside your `onEvent()` block and choose your `catScreen` from the list.\n\n\t![](https://images.code.org/00433d32665ec6f2aa6a0caac2626568-image-1504290788639.33.02 AM.png)\n    \n5. Run your app. If everything worked correctly your cat button should now take you to your cat screen when you click it. When you're ready move on to learn how to add sounds to your app!",
        "AppLab Intro 1 - Add Screen_markdown_instruction": "# Getting Started - Add a cats screen\n\n1. You're going to make a cats screen. This is \"Design Mode\" where you can add and edit screens. To add a screen click the screen dropdown and select \"New screen\".\n\n\t![expandable](https://images.code.org/4e90c1d897ede63403a1351f5ec3bfae-image-1504288061907.47.33 AM.png) \n\n2. Then name your new screen \"catScreen\". \n\n\t![expandable](https://images.code.org/966a2563aaf8a59a983fe6417d01dae9-image-1504288205242.49.33 AM.png)\n    \n3. Finally, choose the cats background image of your screen\n\n\t![expandable](https://images.code.org/ff8509146b8a249973498af63f41b08d-image-1504288758611.51.40 AM.png)\n    \nOnce you have added your new screen hit \"Finish\" to learn how to add buttons to navigate to the screen.",
        "AppLab Intro 1 - Add Sound_markdown_instruction": "# Getting Started - Add Sound\n\nApp Lab can play sound too. You'll need to use the `playSound()` block to do it.\n\n1. Drag a `playSound()` block into your `onEvent`. This will make the sound play when your user clicks the button. Then click \"Choose...\" from the menu.\n\n\t![](https://images.code.org/9c84293859317f7ae46391a28c5a51e7-image-1504291688560.47.41 AM.png)\n\n2. Go through the \"Sound Library\" and find the sounds you want. There's tons!\n\n\t![](https://images.code.org/5393762b4f31fa4f09040ca8b09ca91c-image-1504291692587.47.52 AM.png)\n\n3. Run your app to check out how your sounds work.",
        "AppLab Intro 1 - Build Your Adventure_markdown_instruction": "# Build Your Adventure\n\nUse this blank project to build your project. To get you started there's already a home screen with a couple of buttons. If you want you can **quickly make copies of screens** to build out your world. What will you create?!\n\nWhen you're done you can \"Share\" your work with a friend by phone or with a link. Create your own account to keep building in App Lab!",
        "AppLab Intro 1 - Template_markdown_instruction": "# Getting Started - Try this app\n\nBefore you build your own Choose Your Own Adventure app, practice using AppLab by building this one about a visit to a pet shop. To get started, click \"Run\" and then navigate to the \"Dogs\" screen. Once you've made it there click \"Finish\" to move on.",
        "AppLab Intro 1 - Try App_markdown_instruction": "# Getting Started - Try this app\n\nBefore you build your own Choose Your Own Adventure app, practice using AppLab by building this one about a visit to a pet shop. To get started, click \"Run\" and then navigate to the \"Dogs\" screen. Once you've made it there click \"Finish\" to move on.",
        "AppLab Intro 2 - Edit place1 2_markdown_instruction": "Think about how you want your adventure to continue on this screen. Then add some text to tell your story!\n\n1. Use the screen selector to choose the screen you just made ([Show me where](#triggercallout=selector))\n2. Drag a new \"text area\" onto your screen to add it. ([Show me where](#triggercallout=textArea))\n3. Drag the bottom right corner of your text area to change its size.\n4. Change the text to tell your user what happens on this screen. Then change the color of your text if you want!\n\nClick \"Run\" and then \"Finish\" to move on.\n\n![expandable](https://images.code.org/8ba0d4f0eccaf83163e86d10eec3a291-image-1505766539456.gif) Click to see a GIF of these steps",
        "AppLab Intro 2 - Edit place1_markdown_instruction": "On the last screen you gave your character a choice between to actions or places. Pick one of them and start making a screen for it!\n\n1. In the screen selector choose \"New screen...\" ([Show me where](#triggercallout=selector))\n2. Change the \"id\" of the screen to something clear, for example the name of the new location ([Show me where](#triggercallout=idChange))\n3. You can switch back and forth between your two screens from the screen selector. ([Show me where](#triggercallout=selector))\n4. You can select the \"background-color\" of your screen if you like.\n\nClick \"Run\" and then \"Finish\" to move on and start adding to your screen.",
        "AppLab Intro 2 - Edit startScreen_markdown_instruction": "Welcome to App Lab! Right now you're in **Design Mode** where you can personalize the look of your app. Get your adventure started by picking a fun title!\n\n1. Click the title of your app. ([Show me where](#triggercallout=titleCallout))\n2. Change the \"text\" to pick whatever name you like! ([Show me where](#triggercallout=designMenu))\n3. Scroll down the menu to change the color of your title ([Show me where](#triggercallout=changeTextColor))\n\nOnce you like the look of your title hit \"Run\" once to make sure it's looking good. Then hit \"Finish\" to move on!\n\n![expandable](https://images.code.org/47c8fc2986226beaa39e382bc0759797-image-1505765264098.com-gif-maker.gif) Click here to see all three steps in a GIF",
        "AppLab Intro 2 - Edit startScreen2_markdown_instruction": "Nice work! Time to start filling in your story.\n\n1. Click the story text on this screen. ([Show me where](#triggercallout=storyText))\n2. Fill in your story ([Show me where](#triggercallout=editStoryText))\n3. Explore the different properties you can change in the menu. Personalize this screen's look! ([Show me where](#triggercallout=changeTextColor))\n\nHit \"Run\" once to make everything looks good. Then hit \"Finish\" to move on!",
        "AppLab Intro 2 - Template_markdown_instruction": "# Getting Started - Try this app\n\nBefore you build your own Choose Your Own Adventure app, practice using AppLab by building this one about a visit to a pet shop. To get started, click \"Run\" and then navigate to the \"Dogs\" screen. Once you've made it there click \"Finish\" to move on.",
        "AppLab Intro 2 - Try App_markdown_instruction": "<img src=\"https://images.code.org/1f43ffc6a6da4c3a7644802cdbbff58b-image-1504737782528.jpg\" style=\"float:right;width:200px\">\n\n# Getting Started - Try this app\n\nYou're going to build a \"Choose Your Own Adventure\" app by extending this project. To get you started you already have the parts of your project outlined in blue. Hit \"Run\" and click through what's already been created for you. \n\nOnce you see how the project already works hit \"Finish\" to start making it yours.",
        "AppLab Intro 2 - Try Cat Commander_markdown_instruction": "This is what the code for Cat Commander looks like. Take one minute to scroll through the code and see if you can understand how it works. Talk about it with a partner. What patterns do you see? \n\nOnce you're done, move on by clicking \"Run\" then \"Finish\", to learn to build your own adventure.",
        "AppLab Intro 2 - add Button_markdown_instruction": "Now you have two screens, but no way to get between them. Time to start adding buttons!\n\n1. Use the screen selector to go back to your \"startScreen\" ([Show me where](#triggercallout=selector))\n2. Drag a button onto the screen ([Show me where](#triggercallout=dragButton))\n3. Give your button a clear \"id\" that describes what it does ([Show me where](#triggercallout=changeButtonID))\n4. Change the \"text\" of your button to describe where it will take the user.\n5. Personalize your button's other properties like \"text color\" or \"background color\".\n\nClick \"Run\" then \"Finish\" to move on and start writing the code that will make your button work\n\n![expandable](https://images.code.org/43f2678e4748a1fa09556f75cad65e97-image-1505766882756.gif) Click to see a GIF of all steps",
        "AppLab Intro 2 - add images_markdown_instruction": "You now know everything you need to make a simple Choose Your Own Adventure app, but you can add so much more! If you want to add images to your screen it's easy!\n\n1. In another tab in your browser go online and find an image you want to use\n2. Right click the image and save its URL (usually \"Copy link address\" or \"Copy image URL\")\n3. Back in App Lab go to Design Mode\n4. Drag an \"image\" element onto your screen\n5. Paste the URL you copied into the \"image\" property\n\n\"Run\" your app once to test it. Then hit \"Finish\" to move to learn to add sounds.\n\n![expandable](https://images.code.org/5b977b1c127b3fcb1761aadcb74c79e8-image-1505772215256.gif) Click to see GIF of all steps",
        "AppLab Intro 2 - add more buttons 2_markdown_instruction": "Time to add a second button and write the code to make it work.\n\n1. Drag a second button onto your \"startScreen\" and give it a clear \"id\"\n2. Change the text and color of your button\n3. In Code Mode drag in a second `onEvent()` block and drag a `setScreen()` inside of it\n4. Set the \"id\"s of your `onEvent()` and `setScreen()` blocks to the button and screens you added\n\nIf everything worked you should now have a second button that changes the screen. \"Run\" your app and hit \"Finish\" if it worked.\n\n![expandable](https://images.code.org/33d1a6d2dcc81ed8ecd0966d2f0682ca-image-1505770427380.gif) Click to see a GIF of all steps",
        "AppLab Intro 2 - add more buttons_markdown_instruction": "If this is going to be a real Choose Your Own Adventure, you're need to add some more choices! Start by adding a screen for the second choice your player could make.\n\n1. Use the screen selector to add a new screen. Give it a clear \"id\".\n2. Set the \"background color\" of your screen\n3. Add a \"Text Area\" to your screen describing what happens on it.\n\nClick \"Run\" then \"Finish\" to move on. You'll add another button and write the code to make it work.\n\n![expandable](https://images.code.org/f1c83578a245d832c94c78aeba6ef317-image-1505768404048.gif) Click to see a GIF of all steps",
        "AppLab Intro 2 - add onEvent_markdown_instruction": "<img src=\"https://images.code.org/89a0cddfc305cb44a3d888c5de864d2e-image-1505423852271.17.02 PM.png\" style=\"float:right;height:120px\">\n\nThis is Code Mode where you write the code of your app. You're going to add code that looks like this picture.\n\n1. Click and drag an \"onEvent\" block into your workspace ([Show me where](#triggercallout=onEvent))\n2. Use the left dropdown to pick your button's ID\n3. Click and drag a \"setScreen\" block inside the \"onEvent\" block ([Show me where](#triggercallout=setScreen))\n4. Use the dropdown to pick your new screen's ID\n\nYour app now switches screens! Try it out yourself by hitting \"Run\". Then \"Finish\" to move on.\n\n![expandable](https://images.code.org/b9970c3478dfb15e7531034d26fbcc40-image-1505767231404.gif) Click to see all steps in a GIF",
        "AppLab Intro 2 - add sound_markdown_instruction": "<img src=\"https://images.code.org/3c1d6506a6a3c350380b921e08588a2b-image-1505429594117.52.37 PM.png\" style=\"float:right;height:100px\">\n\nYou can add sound to your app too! Add them outside an `onEvent()` to play from the start of the adventure (good for background music) or inside an `onEvent()` to play when that button is clicked (good for \"Win\" / \"Lose\" sounds).\n\n1. Drag a `playSound()` block into your program\n2. Click the dropdown, then \"Choose...\", then \"Sound Library\" to find the library of sounds built into App Lab\n3. Try out the \"Background\" category for longer songs that will play for your entire adventure.\n4. Hit \"Choose\" to select the sound you like.\n5. You can also drag code inside an `onEvent` block to play sound only when an event happens. Shorter sounds work better here.\n\nRun your app. There should be sound playing now too!",
        "AppLab Intro 2 - finish and share_markdown_instruction": "Congrats on finishing your Hour of Code! You can share your work with friends! Click \"Share\" to get a link or even text it to them.\n\nYou can keep working on your project here. Whenever your friends go to the link you shared they'll get the latest version you made. How far will you build your adventure?",
        "AppLab Intro 3 - Change Screen Color_markdown_instruction": "Set the screen's `\"background-color\"` to `\"red\"`. Click the picture to see how. \n\n![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif) ",
        "AppLab Intro 3 - Change Text 2_markdown_instruction": "Give `\"label1\"` a `\"font-size:` of 40 and set its `\"text-color\"` to `\"blue\"`. Don't forget the double quote `\"` for colors. Click the picture to see how.\n\n![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>",
        "AppLab Intro 3 - Change Text_markdown_instruction": "Make the `\"font-size\"` of `\"label1\"` even bigger. Click the picture to see how.\n\n![expandable](https://images.code.org/6125888ad13353978132b19dfca8cc49-image-1505953367275.gif)",
        "AppLab Intro 3 - Change Two Buttons_markdown_instruction": "Make the `\"background-color\"` of the left button `\"red\"` and the right one `\"blue\"`. Hover over a button with your mouse to read its `\"id\"`. Click the picture to see how.\n\n![expandable](https://images.code.org/d6418be215384e89872a72c2bd6d4a8a-image-1505875864576.gif)",
        "AppLab Intro 3 - Full Text_markdown_instruction": "Set the `\"text\"` of this label to anything you want (for example `\"Hi there!\"`). Make sure you include the double-quotes `\"`. Click the picture to see how.\n\n![expandable](https://images.code.org/4e8549acbca3449cb336fe0ed495f8f3-image-1505878779849.gif)",
        "AppLab Intro 3 - onEvent before_markdown_instruction": "Set the screen's `\"background-color\"` to `\"orange\"`. Then add code inside the `onEvent()` so the button will set the screen's `\"background-color\"` to `\"pink\"`. Click the picture to see how.\n\n![expandable](https://images.code.org/6c338185d7fe959daed2465c4f91fb55-image-1505888600472.gif)",
        "AppLab Intro 3 - onEvent intro_markdown_instruction": "Blocks placed inside the new `onEvent()` block will only run when you `\"click\"` the `\"bigButton\"`. Add code so the button will make the screen's `\"background-color\"` turn `\"green\"`. Remember to use double-quotes `\"` for colors. Click the picture to see how.\n\n![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)",
        "AppLab Intro 3 - onEvent mouseInOut_markdown_instruction": "Your program can use multiple `onEvent()` blocks. The left button already sets both buttons' `\"background-color\"` to `\"purple\"`. Add code to make the right button set both buttons' `\"background-color\"` to `\"green\"`. Click the picture to see how.\n\n![expandable](https://images.code.org/5cd0c24b0f7f855daa2225a4b6a08087-image-1505932139152.gif)",
        "AppLab Intro 3 - onEvent mouseOut_markdown_instruction": "The `\"mouseout\"` event fires when your mouse moves out of a button. Write code that will set the screen's `\"background-color\"` back to `\"black\"` and set the button's `\"text\"` to `\"Off!\"` when the mouse moves out of the button. Remember to use double quotes `\"`. Click the picture to see how.\n\n![expandable](https://images.code.org/a3403900844f631cc2579539c8d68ed1-image-1505937421979.gif)",
        "AppLab Intro 3 - onEvent mouseOver_markdown_instruction": "`\"click\"` is just one type of event. `\"mouseover\"` events run when your mouse is over a button, even if you don't click it. Add code to set the `\"background-color\"` of the screen to `\"black\"` when the mouse is over the `\"offButton\"`. Click the picture to see how.\n\n![expandable](https://images.code.org/756e2c5ee19fd94963ca364fd46bcbd8-image-1505935772425.gif)",
        "AppLab Intro 3 - onEvent twoButtons_markdown_instruction": "Your program can use multiple `onEvent()` blocks. The left button already sets both buttons' `\"background-color\"` to `\"purple\"`. Add code to make the right button set both buttons' `\"background-color\"` to `\"green\"`. Click the picture to see how.\n\n![expandable](https://images.code.org/5cd0c24b0f7f855daa2225a4b6a08087-image-1505932139152.gif)",
        "AppLab Intro 3 - playSound_markdown_instruction": "The `\"playSound()\"` block plays sounds. The `\"horseButton\"` already plays a horse sound. Add code to make the `\"duckButton\"` play a duck sound. Click the picture to see how.\n\n![expandable](https://images.code.org/30e35a2c35ac309545d90af9330ba76d-image-1505939876315.gif)",
        "AppLab Intro 3 - share and keep going_markdown_instruction": "Make a This or That app. Decide what happens to the screen and text when the user clicks each button.\n\nWhen you're done with your app click \"Share\" at the top to send it to a friend to play! Click the picture to see how to share.\n\n![expandable](https://images.code.org/c1d23a0288a42d48963053e0d9a1002e-image-1505943063546.gif)",
        "AppLab Intro 3 - stopSound_markdown_instruction": "The `stopSound()` block stops all sounds. The `\"playButton\"` plays a very long sound. Add code to make the `\"stopButton\"` stop all sounds. Click the picture to see how.\n\n![expandable](https://images.code.org/a5081cce1969c5a784b4440369706801-image-1505941723405.gif)",
        "AppLab Intro 3 - thisOrThat_markdown_instruction": "Make a This or That app. Decide what happens to the screen and text when the user clicks each button.\n\nWhen you're done with your app click \"Share\" at the top to send it to a friend to play! Click the picture to see how to share.\n\n![expandable](https://images.code.org/c1d23a0288a42d48963053e0d9a1002e-image-1505943063546.gif)",
        "AppLab Intro 4 - Change Screen Color_markdown_instruction": "<div style=\"float:right\">\n\t<img src=\"https://images.code.org/1c2a02a2caebbda2be4e537ab5087dcd-image-1506613875548.50.54 AM.png\" style=\"height:150px\"> \n</div>\n\n**Goal:** Make the screen `\"red\"`. \n\n**How:** Drag in the block and hit \"Run\".\n\n**Show Me:** ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)",
        "AppLab Intro 4 - Change Text 2_markdown_instruction": "<div style=\"float:right\">\n<img src=\"https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29 PM.png\" style=\"height:150px;\">\n</div>\n\n**Goal:** Make the text bigger and blue \n\n**How:**  Give `\"label1\"` a `\"font-size\"` of `80` and `\"text-color\"` of `\"blue\"`.\n\n**Show Me:** ![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>",
        "AppLab Intro 4 - Change Text_markdown_instruction": "<div style=\"float:right\">\n\t<img src=\"https://images.code.org/7435f9effd46381a1d7d0c9078d6db78-image-1506554154216.15.23 PM.png\" style=\"height:150px\">\n</div>\n\n**Goal:** Make the text bigger\n\n**How:** Drag in the block and then choose a bigger `\"font-size\"` of `\"label1\"`.\n\n**Show Me:** ![expandable](https://images.code.org/6125888ad13353978132b19dfca8cc49-image-1505953367275.gif)",
        "AppLab Intro 4 - Change Two Buttons_markdown_instruction": "<div style=\"float:right\">\n\t<img src=\"https://images.code.org/a35a27104ec33f192971be1cd8d28a6a-image-1506617895943.57.33 AM.png\" style=\"height:150px\">\n</div>\n\n**Goal:** Make the buttons `\"red\"` and `\"blue\"`\n\n**How:** Hover over the buttons with your mouse to read its `\"id\"`. Then set the `\"background-color\"` of each block\n\n**Show Me:** ![expandable](https://images.code.org/d6418be215384e89872a72c2bd6d4a8a-image-1505875864576.gif)",
        "AppLab Intro 4 - Full Text_markdown_instruction": "<div style=\"float:right\">\n<img src=\"https://images.code.org/9109abf972acc093fd591eb56619aee5-image-1506617570302.52.18 AM.png\" style=\"height:150px\">\n</div>\n\n**Goal:** Change the words on the screen\n\n**How:** Set the `\"text\"` of the label to anything you want, like `\"My app is uh-mazing!`\n\n**Show Me:** ![expandable](https://images.code.org/4e8549acbca3449cb336fe0ed495f8f3-image-1505878779849.gif)</details>\n\n",
        "AppLab Intro 4 - Video designMode_markdown_instruction": "# Sneak Peak of Design Mode",
        "AppLab Intro 4 - Video onEvent_markdown_instruction": "# Using onEvent",
        "AppLab Intro 4 - Video share your work_markdown_instruction": "# Make and Share Your App!",
        "AppLab Intro 4 - Video share_markdown_instruction": "# Make and Share Your App!",
        "AppLab Intro 4 - onEvent before_markdown_instruction": "<img src=\"https://images.code.org/d1d4126613db6bc3db331d47eecf0748-image-1506619589642.gif\" style=\"float:right;height:150px\">\n\n**Goal:** The screen starts as `\"orange\"`. The button turns the screen `\"pink\"`.\n\n**How:** Before the `onEvent()` set the screen's `\"background-color\"` to `\"orange\"`. Inside the `onEvent()` set it to `\"pink\"`.\n\n**Show Me:** ![expandable](https://images.code.org/6c338185d7fe959daed2465c4f91fb55-image-1505888600472.gif)",
        "AppLab Intro 4 - onEvent intro_markdown_instruction": "<img src=\"https://images.code.org/d793e711e9e2ea74f68cebf228fcb360-image-1506618780451.gif\" style=\"float:right;height:150px\">\n\n**Goal:** The screen turns `\"green\"` when you click the button\n\n**How:** Add code inside the `\"onEvent\"` that sets the screen's `\"background-color\"` to `\"green\"`.\n\n**Show Me:** ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)",
        "AppLab Intro 4 - onEvent mouseOver_markdown_instruction": "`\"click\"` is just one type of event. `\"mouseover\"` events run when your mouse is over a button, even if you don't click it. Add code to set the `\"background-color\"` of the screen to `\"black\"` when the mouse is over the `\"offButton\"`. Click the picture to see how.\n\n![expandable](https://images.code.org/756e2c5ee19fd94963ca364fd46bcbd8-image-1505935772425.gif)",
        "AppLab Intro 4 - onEvent twoButtons_markdown_instruction": "<img src=\"https://images.code.org/624964d54e36fe248f91f08563a57c4b-image-1506620778039.gif\" style=\"float:right;height:150px\">\n\n**Goal:** The right button makes both buttons `\"green\"`\n\n**How:** Add a second `onEvent()` below the first. Set the `\"id\"` to `\"rightButton\"`. Inside it add code that changes both buttons' `\"background-color\"`\n\n**Show Me:** ![expandable](https://images.code.org/5cd0c24b0f7f855daa2225a4b6a08087-image-1505932139152.gif)",
        "AppLab Intro 4 - playSound_markdown_instruction": "**Goal:** The right button plays a duck sound\n\n**How:** The `playSound()` block plays sounds. Add an `onEvent()` for the right button and use the `playSound()` block inside it.\n\n**Show Me:** ![expandable](https://images.code.org/30e35a2c35ac309545d90af9330ba76d-image-1505939876315.gif)",
        "AppLab Intro 4 - stopSound_markdown_instruction": "**Goal:** The right button stops all sound\n\n**How:** Add an `onEvent()` for the right button and use the `stopSound()` block inside it.\n\n**Show Me:** ![expandable](https://images.code.org/a5081cce1969c5a784b4440369706801-image-1505941723405.gif)",
        "AppLab Intro 4 - thisOrThat design_markdown_instruction": "**Goal:** Try out Design Mode to keep making changes to your This or That App. There's also some new blocks in your toolbox! You'll learn more about these in later lessons.\n\n**How:** Click into \"Design\" to quickly edit how your app looks or add screen elements yourself. Experiment with some of the new blocks in the toolbox.",
        "AppLab Intro 4 - thisOrThat template_markdown_instruction": "**Goal:** Try out Design Mode to keep making changes to your This or That App. You'll learn more in later lessons.\n\n**How:** Click into \"Design\" to quickly edit how your app looks or add screen elements yourself.",
        "AppLab Intro 4 - thisOrThat_markdown_instruction": "**Goal:** Make a \"This or That\" app, then share it with friends\n\n**How:** You know how to use `\"background-color\"`, `\"font-size\"`, `\"text-color\"`, `\"text\"`, `playSound()`, and `onEvent()`. Use them to set the look of your app and make it change when your user clicks the buttons. Click \"Share\" to send it to a friend.\n\n**Show Me:** ![expandable](https://images.code.org/c1d23a0288a42d48963053e0d9a1002e-image-1505943063546.gif)",
        "AppLab Intro 5 - Change Screen Color_markdown_instruction": "<div style=\"float:right\">\n\t<img src=\"https://images.code.org/1c2a02a2caebbda2be4e537ab5087dcd-image-1506613875548.50.54 AM.png\" style=\"height:150px\"> \n</div>\n\n**Goal:** Make the screen `\"red\"`. \n\n**How:** Drag in the block, change the color, then hit \"Run\"\n\n**Show Me:** ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)",
        "AppLab Intro 5 - Change Text 2_markdown_instruction": "<div style=\"float:right\">\n<img src=\"https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29 PM.png\" style=\"height:150px;\">\n</div>\n\n**Goal:** Make the text bigger and blue \n\n**How:**  Give `\"label1\"` a `\"font-size\"` of `80` and `\"text-color\"` of `\"blue\"`.\n\n**Show Me:** ![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>",
        "AppLab Intro 5 - Change Text_markdown_instruction": "<div style=\"float:right\">\n\t<img src=\"https://images.code.org/7435f9effd46381a1d7d0c9078d6db78-image-1506554154216.15.23 PM.png\" style=\"height:150px\">\n</div>\n\n**Goal:** Make the text bigger\n\n**How:** Drag in the block and then choose a bigger `\"font-size\"` of `\"label1\"`.\n\n**Show Me:** ![expandable](https://images.code.org/6125888ad13353978132b19dfca8cc49-image-1505953367275.gif)",
        "AppLab Intro 5 - Change Two Buttons_markdown_instruction": "<div style=\"float:right\">\n\t<img src=\"https://images.code.org/a35a27104ec33f192971be1cd8d28a6a-image-1506617895943.57.33 AM.png\" style=\"height:150px\">\n</div>\n\n**Goal:** Make the buttons `\"red\"` and `\"blue\"`\n\n**How:** Hover over the buttons with your mouse to read its `\"id\"`. Then set the `\"background-color\"` of each block\n\n**Show Me:** ![expandable](https://images.code.org/d6418be215384e89872a72c2bd6d4a8a-image-1505875864576.gif)",
        "AppLab Intro 5 - Full Text_markdown_instruction": "<div style=\"float:right\">\n<img src=\"https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19 AM.png\" style=\"height:200px\">\n</div>\n\n**Goal:** Change the words on the screen and the colors of the buttons.\n\n**How:** Set the `\"text\"` of the label to anything you want, like `\"Welcome to my app!\"`. Then set the `\"background-color\"` of the buttons.\n\n**Show Me:** ![expandable](https://images.code.org/709ff200e5b5f553b24d1d0a769db6ed-image-1507565545993.gif)",
        "AppLab Intro 5 - addButton_markdown_instruction": "**Goal:** Add a right arrow to the screen for switching the next image. In the next level you'll make it work.\n\n**How:** Use Design Mode to drag in an `\"image\"` element. The icon library has many different arrows to choose from. \n\n**Show Me:** ![expandable](https://images.code.org/066245e52135c038502620a19f961667-image-1507570682956.gif)",
        "AppLab Intro 5 - go further_markdown_instruction": "**Goal:** This is a blank App Lab project. Build whatever you like here! You also have a few more blocks you can try out if you like. Don't forget to share your work!",
        "AppLab Intro 5 - onEvent intro_markdown_instruction": "<img src=\"https://images.code.org/d793e711e9e2ea74f68cebf228fcb360-image-1506618780451.gif\" style=\"float:right;height:150px\">\n\n**Goal:** The screen turns `\"green\"` when you click the button\n\n**How:** Add code inside the `\"onEvent\"` that sets the screen's `\"background-color\"` to `\"green\"`.\n\n**Show Me:** ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)",
        "AppLab Intro 5 - onEvent twoButtons_markdown_instruction": "<img src=\"https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif\" style=\"float:right;height:200px\">\n\n**Goal:** Complete this flashlight app. The right button should switch the make the screen `\"black\"` and the text `\"white\"`\n\n**How:** Add a second `onEvent()` block below the first. Then set the `\"background-color\"` of the screen and `\"text-color\"` of the label.\n\n**Show Me:** ![expandable](https://images.code.org/64c83d66a723eae01d09e4aea38fbad1-image-1507567249833.gif)",
        "AppLab Intro 5 - playSound_markdown_instruction": "<img src=\"https://images.code.org/cdc81e79687693db50383a41894d6679-image-1507566452258.26.22 AM.png\" style=\"float:right;height:200px\">\n\n**Goal:** Add two more animals to the sound board.\n\n**How:** You'll need to add two `onEvent()` blocks to the program. Then use `playSound()` inside them.\n\n**Show Me:** ![expandable](https://images.code.org/b0f254d319f788f832553648db6fb13c-image-1507566138094.gif)",
        "AppLab Intro 5 - rate it app_markdown_instruction": "<img src=\"https://images.code.org/74c675e72f33fa368057d7b783e50e31-image-1507568235560.gif\" style=\"float:right;height:200px\">\n\n**Goal:** Complete this simple profile. Set the user name. Choose a main image. When you click the heart it should switch to a filled in heart icon and turn red.\n\n**How:** You'll need to use the `\"image\"` property.\n\n**Show Me:** ![expandable](https://images.code.org/217e10ec9ac91037b80b963fab299a60-image-1507568801064.gif)",
        "AppLab Intro 5 - setScreen_markdown_instruction": "**Goal:** Write code to let the user switch to your second screen.\n\n**How:** Add an `onEvent()` for the button you just created. Use `setScreen()` to switch between screens.\n\n**Show Me:** ![expandable](https://images.code.org/9ac5102ec678c1ecd0278446560ba617-image-1507571425597.gif)",
        "AppLab Intro 5 - share keep going_markdown_instruction": "**Goal:** Share your app with someone, or just send it to yourself! Then keep building it out!\n\n**How:** Click \"Share\" to find lots of ways to share your app. Here's some ideas to try\n\n* Add a button that takes you back from `\"screen2\"` to `\"screen1\"`\n* Add more screens with more images\n* Add more types of reaction buttons that users can click",
        "AppLab Intro 5 - socialTemplate_markdown_instruction": "**Goal:** Add a button to the screen for scrolling to the next image. Give it a good icon, like a right arrow. In the next level you'll make it work.\n\n**How:** Use Design Mode to drag in a button. The icon library has many different arrows to choose from. Don't forget you can search for them.\n\n**Show Me:** ",
        "AppLab Intro 6 - Change Screen Color_markdown_instruction": "<div style=\"float:right\">\n\t<img src=\"https://images.code.org/1c2a02a2caebbda2be4e537ab5087dcd-image-1506613875548.50.54 AM.png\" style=\"height:150px\"> \n</div>\n\n**Goal:** Make the screen `\"red\"`. \n\n**How:** Drag in the block, change the color, then hit \"Run\"\n\n**Stuck? Click here** ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)",
        "AppLab Intro 6 - Change Text 2_markdown_instruction": "<div style=\"float:right\">\n<img src=\"https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29 PM.png\" style=\"height:150px;\">\n</div>\n\n**Goal:** Make the text bigger and blue \n\n**How:**  Give `\"label1\"` a `\"font-size\"` of `80` and `\"text-color\"` of `\"blue\"`.\n\n**Stuck? Click here:** ![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>",
        "AppLab Intro 6 - Full Text_markdown_instruction": "<div style=\"float:right\">\n<img src=\"https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19 AM.png\" style=\"height:200px\">\n</div>\n\n**Goal:** Change the words on the screen and the colors of the buttons.\n\n**How:** Set the `\"text\"` of the label to anything you want, like `\"Welcome to my app!\"`. Then set the `\"background-color\"` of the buttons.\n\n**Stuck? Click here:** ![expandable](https://images.code.org/709ff200e5b5f553b24d1d0a769db6ed-image-1507565545993.gif)",
        "AppLab Intro 6 - animalSoundBoard_markdown_instruction": "**Goal:** Keep building out the Animal Sound board. Then make sure to \"Share\" it.\n\n**How:** Add new buttons for more animals. Or make the soundboard for a totally different topic entirely!",
        "AppLab Intro 6 - blankApp_markdown_instruction": "**Goal:** This is a completely blank App Lab App. Build whatever you want from scratch!?\n\n**How:** You're in control here. You decide what you want to make!",
        "AppLab Intro 6 - onEvent intro_markdown_instruction": "<img src=\"https://images.code.org/d793e711e9e2ea74f68cebf228fcb360-image-1506618780451.gif\" style=\"float:right;height:150px\">\n\n**Goal:** The screen turns `\"green\"` when you click the button\n\n**How:** Add code inside the `\"onEvent\"` that sets the screen's `\"background-color\"` to `\"green\"`.\n\n**Stuck? Click here:** ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)",
        "AppLab Intro 6 - onEvent twoButtons_markdown_instruction": "<img src=\"https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif\" style=\"float:right;height:200px\">\n\n**Goal:** Complete this flashlight app. The right button should switch the make the screen `\"black\"` and the text `\"white\"`\n\n**How:** Add a second `onEvent()` block below the first. Then set the `\"background-color\"` of the screen and `\"text-color\"` of the label.\n\n**Stuck? Click here:** ![expandable](https://images.code.org/64c83d66a723eae01d09e4aea38fbad1-image-1507567249833.gif)",
        "AppLab Intro 6 - playSound Template_markdown_instruction": "<img src=\"https://images.code.org/2bb21cff40cc9823a4ae370895de2953-image-1508294971111.49.16 PM.png\" style=\"float:right;height:200px\">\n\n**Goal:** Add an animal to the sound board. If you don't want to find a picture of your animal then change the color of the speaker icon to one you like.\n\n**How:** Add an `onEvent()` and use `playSound()` inside of it. Find an animal sound you like in the sound library. For the picture you can either upload an image you find online and change the button's `\"image\"` property, or just change the `\"icon-color\"`. \n\n**Stuck? Click here:** ![expandable](https://images.code.org/b0f254d319f788f832553648db6fb13c-image-1507566138094.gif)",
        "AppLab Intro 6 - playSound_markdown_instruction": "<img src=\"https://images.code.org/2bb21cff40cc9823a4ae370895de2953-image-1508294971111.49.16 PM.png\" style=\"float:right;height:200px\">\n\n**Goal:** Add an animal to the sound board. If you don't want to find a picture of your animal then change the color of the speaker icon to one you like.\n\n**How:** Add an `onEvent()` and use `playSound()` inside of it. Find an animal sound you like in the sound library. For the picture you can either upload an image you find online and change the button's `\"image\"` property, or just change the `\"icon-color\"`. \n\n**Stuck? Click here:** ![expandable](https://images.code.org/80b30e5bd85dd5430e2c375568d53580-image-1508432171734.gif)",
        "AppLab Intro 6 - quizApp_markdown_instruction": "**Goal:** Build out three questions in this Quiz App. You can always make more questions by duplicating screens. Then send it to a friend!\n\n**How:** Run the app first and try clicked all the buttons to see how it works. Then from Design Mode you can change the default text for the questions and buttons. In Code mode create response text for when the user clicks the different buttons. Customize the colors or add images if you want too!",
        "AppLab Intro 6 - thisOrThatAddButton Template_markdown_instruction": "**Goal:** Add a second button to the screen that says \"Right!\"\n\n**How:** In Design Mode drag in a new button. Position and resize it. Then set its `\"text\"`, `\"background color\"`, and `\"font size\"`\n\n**Show Me:** ",
        "AppLab Intro 6 - thisOrThatAddButton_markdown_instruction": "<img src=\"https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00 PM.png\" style=\"float:right;height:200px\">\n\n**Goal:** Add a second button to the screen that says \"Right!\"\n\n**How:** In Design Mode drag in a new button. Position and resize it. Then set its `\"text\"`, `\"background color\"`, and `\"font size\"`\n\n**Stuck? Click here:** ![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)",
        "AppLab Intro 6 - thisOrThatAddScreen_markdown_instruction": "<img src=\"https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59 PM.png\" style=\"float:right;height:200px\">\n\n**Goal:** Create a new screen called `\"rightScreen\"`. Add a short text label to the screen.\n\n**How:** In Design Mode add a new screen. Change its `\"id\"` to be `\"rightScreen\"`. Then drag a label onto the screen with a short message to your user. You can also duplicate the `\"leftScreen\"` to do this.\n\n**Stuck? Click here:** ![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)",
        "AppLab Intro 6 - thisOrThatPersonalize_markdown_instruction": "<img src=\"https://images.code.org/762507aef26d512f820c42fb2e7fc6f1-image-1508386296370.11.19 PM.png\" style=\"float:right;height:200px\">\n\n**Goal:** Start building your own \"Choose Your Own Adventure\" app. Don't forget to \"Share\" it with someone!\n\n**How:** Choose the basic story you want to tell, like who your character is and the setting. Then change the text and images of your app to match the story. You can always add more screens as you keep building out your adventure.\n\n<details><summary><b>Stuck? Click here for some ideas</b></summary>\n\n<li>Make an adventure about your favorite fictional character</li>\n<li>Make an adventure about a famous (or not-so-famous person) you're a big fan of</li>\n<li>Make an adventure that has a lot of unexpected twists or has a difficult moral choice</li>\n\n</details>",
        "AppLab Intro 6 - thisOrThatSetScreen_markdown_instruction": "<img src=\"https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop (1).gif\" style=\"float:right;height:200px\">\n\n**Goal:** The screen switches to `\"rightScreen\"` when the user clicks the \"Right!\" button.\n\n**How:** In Code Mode add a new `onEvent()` to your program for your \"Right!\" button. Add a `setScreen()` block inside of it that switches screens to `\"thatScreen\"`.\n\n**Stuck? Click here:** ![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)",
        "AppLab Intro 7 - Change Screen Color_markdown_instruction": "<div style=\"float:right\">\n\t<img src=\"https://images.code.org/bf9b1fb57751fa90c9b786339914ad70-image-1508521068798.34.54 AM.png\" style=\"height:150px\"> \n</div>\n\n**Goal:** Make the screen green. \n\n**How:** Drag in a `setProperty()` block. Use the dropdowns to set the screen's `\"background-color\"` to `\"green\"`. Then hit \"Run\".\n\n**Stuck? Click here:** ![expandable](https://images.code.org/3b5e70522b02867a1df1d5b5e481785e-image-1511279858395.gif)",
        "AppLab Intro 7 - Change Text 2_markdown_instruction": "<div style=\"float:right\">\n<img src=\"https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29 PM.png\" style=\"height:200px;\">\n</div>\n\n**Goal:** Make the text bigger and blue.\n\n**How:**  You'll need two lines of code. Give `\"label1\"` a `\"font-size\"` of `80` and `\"text-color\"` of `\"blue\"`.\n\n**Stuck? Click here:** ![expandable](https://images.code.org/2d5d46a03082af3b01847aad6602e2ea-image-1511280140482.gif)",
        "AppLab Intro 7 - Full Text_markdown_instruction": "<div style=\"float:right\">\n<img src=\"https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19 AM.png\" style=\"height:200px\">\n</div>\n\n**Goal:** Make the buttons `\"red\"` and `\"blue\"`. Then change the text in the large orange label.\n\n**How:** \n* Remember you can hover over elements to see their `\"id\"`.\n* Set the `\"background-color\"` of the buttons to `\"red\"` and `\"blue\"`.\n* Set the `\"text\"` property of the label to anything you want, like `\"Welcome to my app!\"`.\n\n**Stuck? Click here:** ![expandable](https://images.code.org/4bf99e7352e7c17a5bf73ced80171f6a-image-1511280628092.gif)",
        "AppLab Intro 7 - onEvent intro_markdown_instruction": "<img src=\"https://images.code.org/3d8c8487ea669563d3401c0009cd9462-image-1511281194897.gif\" style=\"float:right;height:200px\">\n\n**Goal:** The screen will start out blue. Add code so it turns green when you click the \"Green-ify\" button.\n\n**How:** Add code inside the `onEvent()` that sets the screen's `\"background-color\"` to `\"green\"`.\n\n**Stuck? Click here:** ![expandable](https://images.code.org/5ddf6b129bc04b79839b3661ccef788b-image-1511281012076.gif)",
        "AppLab Intro 7 - onEvent twoButtons_markdown_instruction": "<img src=\"https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif\" style=\"float:right;height:200px\">\n\n**Goal:** Help finish this flashlight app. The \"On\" button already turns the screen white. Run the app and try it out. Then write code so the \"Off\" button makes the screen black again.\n\n**How:** Add code inside the empty `onEvent()` that sets the `\"background-color\"` of the screen to `\"black\"` and `\"text-color\"` of the label to `\"white\"`.\n\n**Stuck? Click here:** ![expandable](https://images.code.org/020b1d9b465aaf35967a528a92961c13-image-1511281772276.gif)",
        "AppLab Intro 7 - playSound_markdown_instruction": "<img src=\"https://images.code.org/28176329f15dea1a863564b069e72aab-image-1511282702534.44.52 AM.png\" style=\"float:right;height:200px\">\n\n**Goal:** This sound board is almost done! Run it to see how it works. Then add an image, text, and sound to the last button.\n\n**How:** \n* Add an `onEvent()` to the program and set the \"id\" to `\"button4\"`. Drag a `playSound()` into the `onEvent()` and choose a sound from the library. \n* Add a `setProperty()` (outside your `onEvent()`) to change the button's `\"image\"` property. Choose an image using the third dropdown.\n* Add one more `setProperty()` to change the button's `\"text\"`.\n\n**Stuck? Click here:** ![expandable](https://images.code.org/a3fdcb8954c5e8d585bef64df1ec5b1a-image-1511285408512.gif)",
        "AppLab Intro 7 - thisOrThatAddButton_markdown_instruction": "<img src=\"https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00 PM.png\" style=\"float:right;height:200px\">\n\n**Goal:** Add a second button to the screen that says \"Right!\" with an `\"id\"` of `\"rightButton\"`.\n\n**How:** In Design Mode drag in a new button. Position and resize it. Then set its `\"id\"`, `\"text\"`, `\"background color\"`, and `\"font size\"`.\n\n**Stuck? Click here:** ![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)",
        "AppLab Intro 7 - thisOrThatAddScreen_markdown_instruction": "<img src=\"https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59 PM.png\" style=\"float:right;height:200px\">\n\n**Goal:** Create a new screen called `\"rightScreen\"`. Add a text label that says \"You went right!\".\n\n**How:** In Design Mode drag in a new screen element. Change its `\"id\"` to `\"rightScreen\"`. Then drag a label onto the screen and change the text to \"You went right!\".\n\n**Stuck? Click here:** ![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)",
        "AppLab Intro 7 - thisOrThatSetScreen_markdown_instruction": "<img src=\"https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop (1).gif\" style=\"float:right;height:200px\">\n\n**Goal:** The screen switches to `\"rightScreen\"` when the user clicks the `\"rightButton\"`.\n\n**How:** In Code Mode add a new `onEvent()` to your program for your \"Right!\" button. Add a `setScreen()` block inside of it that switches screens to `\"rightScreen\"`.\n\n**Stuck? Click here:** ![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)",
        "AppLab_test02_markdown_instruction": "# This is the title \n\n- bullet 1 \n- do this\n- then this\n\n![](https://images.code.org/982f9167cf54c24251922fbd0a7f60b3-image-1436470853351.png)",
        "Applab allthethings onRecordEvent_markdown_instruction": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
        "Applab test_markdown_instruction": "This level is submittable. For testing only! Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
        "Artist Inspiration_markdown_instruction": "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\" width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! \n\nIf this picture inspires you, try to make something similar. Otherwise, create something all your own.\n\nNotice: We've used the `set alpha` block to make the \"petals\" fade toward the outside.",
        "Bergeron Robot Maze1_markdown_instruction": "Can you help me catch the naughty pig? \n\nStack a couple of `move forward` blocks below the `when run` block and press \"Run\". ",
        "Big Game Animation 1_markdown_instruction": "Now that you've learned to write simple linear functions, let's work on using them to add some movement to our game. Click \"Run\" to see what your game can currently do (not much!), update any variables you like, and then click finish to move on.",
        "Big Game Animation 2_markdown_instruction": "The `update-target` function takes the target's current x value, and returns an updated value.\n\nComplete `update-target` so that it adds to the x value each time it is called. The more you add to x, the faster the target will go.",
        "Big Game Animation 3_markdown_instruction": "The `update-danger` function should work just like `update-target`, except that the danger should move from the right side over towards the left.\n\nComplete `update-danger` to make the danger fly across the screen.",
        "Big Game Animation 4_markdown_instruction": "At this point in your game your danger should run across the screen from right to left, and your target should run across from left to right.\n\nThey don't ever come back on screen once they've left, but we'll take care of that later.\n\nTake a minute to make sure your game is working like you want it to, and then click \"Finish\" to move on.",
        "Big Game Booleans 1_markdown_instruction": "When you last worked on your game we got our target and danger sprites to fly across the screen, but they never come back. Click \"Run\" to see how your game is currently working, and then click finish and we'll work on making those sprites reappear on screen after they've left.",
        "Big Game Booleans 2_markdown_instruction": "Now that your `onscreen?` function is checking `safe-left?` and `safe-right?` we need to fix those functions.\n\nWhen we used them for Sam the Bat we wanted to prevent Sam from leaving the screen, but now we want the Target and Danger to actually go all the way off screen before returning to the opposite side.\n\nGo to the \"Functions\" section of the toolbox and complete the `safe-left?` function so that it returns *true* if the sprite's x coordinate is greater than -50.\n\nIf you're successful you should see the Danger go all the way off the left side before returning on the right side.",
        "Big Game Booleans 3_markdown_instruction": "Now that you've got `safe-left?` working, let's fix `safe-right?`\n\nIt should take in a sprite's x coordinate and return true if that coordinate is less than 450.\n\nOnce your `safe-right?` is complete you should see the Target go off the right side of the screen and return on the left.",
        "Big Game Booleans 4_markdown_instruction": "We've provided a couple of empty functions for `safe-left?` and `safe-right?` The first thing you need to do is complete the `onscreen?` function so that it checks whether both `safe-left?` and `safe-right?` are true.\n\n**TIP** - even after you add `safe-left?` and `safe-right?` your sprites won't return to the screen - why do you think that is?",
        "Big Game Booleans 5_markdown_instruction": "At this point your Danger should run across the screen from right to left, your Target should run across from left to right, and they should both return to the opposite side, repeatedly. Take a minute to make sure your game is working like you want it to, and then click \"Finish\" to move on.",
        "Big Game Collision 1_markdown_instruction": "At this point you've programmed a video game with a moving Target and Danger, both of which return to the screen once they've left, and a Player that responds to keyboard input. Click \"Run\" to see how your game is currently working, and then we'll dig into the final missing piece - collision detection!",
        "Big Game Collision 3_markdown_instruction": "Let's fix this `distance` function so our collision detection works properly.\n\nUse the Distance Formula, so the distance function returns the distance between the player's center coordinates (px, py) and another sprite's center coordinates (cx, cy).\n\nWe've provided a working `line-length` function to help you out.",
        "Big Game Collision 4_markdown_instruction": "The `distance` function returns the distance between two sprites.\n\nComplete the `collide?` function so that it returns *true* if the distance between two points is less than 100 pixels apart.\n\nIf you're successful, your sprites will instantly collide - why do you think that is?",
        "Big Game Final_markdown_instruction": "You made it!\n\nAt this point your game should be fully functioning, take some time to enjoy your new game and make any final tweaks to it.\n\nWhen you're happy with the final product, click Finish and you'll have an opportunity to share a link to your game.\n\nGood work!",
        "Big Game Player 1_markdown_instruction": "We're getting really close to a finished game!\n\nLast time you worked on your game, you used booleans to make your Target and Danger return to the screen once they've left. Click \"Run\" to see how your game looks right now, and then we'll get to making your Player move up and down.",
        "Big Game Player 2_markdown_instruction": "To move the player up and down, we'll need to use a conditional block to figure out which key is pressed and respond accordingly.\n\nComputers read keypresses as numeric key codes - the up arrow is **38** and the down arrow is **40**. You can lookup other key codes in your student workbook.\n\nEdit the `update-player` function so the player moves up when the up arrow (keycode 38) is pressed, and moves down (keycode 40) when the down arrow is pressed.",
        "Big Game Vars 1_markdown_instruction": "Let's get started on your Big Game! Here you'll see a whole bunch of placeholder code that you'll eventually replace with your own, but for now we're only going to worry about defining variables. Click \"Run\" to see what the game looks like with the default values.",
        "Big Game Vars 2_markdown_instruction": "The first step to making this game your own is to give it a good Title. Click edit on the `title` and `subtitle` variables and change them to something new.",
        "Big Game Vars 3_markdown_instruction": "Now let's set the background for your new game. Edit the `bg` variable and select a new background Image from the dropdown.",
        "Big Game Vars 4_markdown_instruction": "Awesome! Now you can update the variables for your Player, Target, and Danger. Feel free to play with all of the variables at this point to make your game look like you'd like it to. Click \"Finish\" when you're done.",
        "Boolean Expressions_markdown_instruction": "### Points to pay attention to:\n\n1. What's a *Boolean Expression?*\n2. Why is it called a \"Boolean\"?\n3. Is this a legal expression?  `10 > 25`?",
        "Brad Spooky House Copy_markdown_instruction": "Freeplay: Here are the functions you've written, and some more for you to play with. Play with the pen width to see how different your drawings look!\n\n",
        "Brad Spooky House_markdown_instruction": "Freeplay: Here are the functions you've written, and some more for you to play with. Play with the pen width to see how different your drawings look!\n\n",
        "Brand Book Example_markdown_instruction": "# Brand Book\n\nCheck out the example of a brand book\n\n",
        "CDU U6 Playground Sound Board_markdown_instruction": "# Sound Board 2.0\n\nYou can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.\n\nIn the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!\n\n# Do This\n\n* Use all of the button related board events (up, down), to play a unique sound or song at each event.\n* Are there any other events you could use to play even more sounds/songs?",
        "CDU U6 Playground Sound Board_2018_markdown_instruction": "# Sound Board 2.0\n\nYou can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.\n\nIn the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!\n\n# Do This\n\n* Use all of the button related board events (up, down), to play a unique sound or song at each event.\n* Are there any other events you could use to play even more sounds/songs?",
        "CSD - Predict - Array Length List Printing_markdown_instruction": "# For Loop - Using List Length in For Loop\n\nOne of the most common ways that for loops are used is with lists. In this example the condition is dependent on list. \n\nWhat will this print in the console?",
        "CSD - Predict List Accessing_markdown_instruction": "# Predict\n\nThe code below has 4 things it will log to the console. What do you think will print in the console as a result of this code?\n",
        "CSD - for loop - on off_markdown_instruction": "# For Loops with Color LEDs\n\nFor loops can make doing something to all the `colorLed`s easier. \n\n**Starter Program:** There are two buttons one to turn all the `colorLeds` on and one to turn them all off. \n\nCan you fill in the functions for each of these task using a for loop to write your algorithm.",
        "CSD For Loops - Check For Understanding_markdown_instruction": "# Check In\n\nIn the box below explain the 3 different parts of the for loop. Why is each important?\n",
        "CSD Hackathon Pt 1_markdown_instruction": "# MS Hackathon: Fancy Drawing\n\nThe blocks you've been provided are those that a student in CS Discoveries would likely have available after a week or so of using Game Lab. No sprites yet, but you've **just been introduced to some powerful programming constructs like generating random numbers, storing values in a variable, and looping.** You'll also be pretty familiar with the drawing commands at this point.\n\n# Do This\n\n* Using only the tools provided to you, **make something awesome!!**\n* The likely project at this point would be an **animated card** but feel free to go other directions if you like.\n* **Avoid complex variable arithmetic** if you can. You \"don't know it\" yet.\n* **Avoid referencing the iterator in your for loops**. At this point it's just a repeat loop.",
        "CSD Hackathon Pt 2_markdown_instruction": "# MS Hackathon: Sprites and Interactivity\n\nYou now can **create sprites, add images, manipulate their properties, and perform simple variable arithmetic to update their values (e.g. `sprite.scale = sprite.scale + 1;`)**. You've also been introduced to conditional statements and know how to use them to get some interactive behavior with the mouse and keyboard.\n\n# Do This\n\n* Using only the tools provided to you **make something awesome!**\n* The likely target project here might be a **simple game** or **interactive visualization**.\n* You don't yet know about **groups, loops, collisions**, or more magical properties like **velocity or rotationSpeed**\n\n**These commands are not in the block palette but feel free to use**\n\n* `mySprite.mouseActive = true;` will make your sprite track mouse events\n* `mySprite.mouseIsOver` and `mySprite.mouseIsPressed` are booleans you can now use to sense mouse-to-sprite interactions.\n\n**To add sprites to images follow the pattern below**\n\n```\nvar spriteImage, sprite;\n\n//You'll need to create a preload function to load the image.\nfunction preload(){\t\t\t\n    spriteImage = loadImage(\"imageURL\");\n}\n\n//Create your sprite and add the image\nfunction setup(){\n    sprite = createSprite(200,200,10,10);\n    sprite.addImage(\"someName\", spriteImage);\n}\n\n//Draw your sprites.\nfunction draw(){\n\tbackground(255,255,255);\n\tdrawSprites();\n}\n```",
        "CSD Hackathon Week 1_markdown_instruction": "# MS Hackathon: Fancy Drawing\n\nThe blocks you've been provided are those that a student in CS Discoveries would likely have available after a week or so of using Game Lab. No sprites yet, but you've **just been introduced to some powerful programming constructs like generating random numbers, storing values in a variable, and looping.** You'll also be pretty familiar with the drawing commands at this point.\n\n# Do This\n\n* Using only the tools provided to you, **make something awesome!!**\n* The likely project at this point would be an **animated card** but feel free to go other directions if you like.\n* **Avoid complex variable arithmetic** if you can. You \"don't know it\" yet.\n* **Avoid referencing the iterator in your for loops**. At this point it's just a repeat loop.",
        "CSD Hackathon Week 2_markdown_instruction": "# MS Hackathon: Sprites and Interactivity\n\nYou now can **create sprites, add images, manipulate their properties, and perform simple variable arithmetic to update their values (e.g. `sprite.scale = sprite.scale + 1;`)**. You've also been introduced to conditional statements and know how to use them to get some interactive behavior with the mouse and keyboard.\n\n# Do This\n\n* Using only the tools provided to you **make something awesome!**\n* The likely target project here might be a **simple game** or **interactive visualization**.\n* You don't yet know about **groups, loops, collisions**, or more magical properties like **velocity or rotationSpeed**\n\n**These commands are not in the block palette but feel free to use**\n\n* `mySprite.mouseActive = true;` will make your sprite track mouse events\n* `mySprite.mouseIsOver` and `mySprite.mouseIsPressed` are booleans you can now use to sense mouse-to-sprite interactions.\n\n**To add sprites to images follow the pattern below**\n\n```\nvar spriteImage, sprite;\n\n//You'll need to create a preload function to load the image.\nfunction preload(){\t\t\t\n    spriteImage = loadImage(\"imageURL\");\n}\n\n//Create your sprite and add the image\nfunction setup(){\n    sprite = createSprite(200,200,10,10);\n    sprite.addImage(\"someName\", spriteImage);\n}\n\n//Draw your sprites.\nfunction draw(){\n\tbackground(255,255,255);\n\tdrawSprites();\n}\n```",
        "CSD U1 - Image Filter Demo show Binary_markdown_instruction": "# Oh Noes\nThis tree should be green, but it's blue instead. Can you use the filter blocks to change all of the blue pixels to green?",
        "CSD U1 - Image Filter Demo_markdown_instruction": "# Oh Noes\nThis tree should be green, but it's blue instead. Can you use the filter blocks to change all of the blue pixels to green?",
        "CSD U1 - PixFilter 1x1 Filter_markdown_instruction": "# Filtering Images\nIf you've ever used Instragram you've probably encountered an image filter. Image filters read in each pixel, process it in some way, and the return the filtered pixel. In this tool we're going to start by filtering just a single pixel before moving on to a full image.\n\nYou’ll notice there are three drop downs under the picture. A red replace, a green replace, and a blue replace. Next to it are drop downs for the colors. How many bits are we working with? Yes, we’re working with 3. We also learned that the bits control the colors. First bit controls R, second bit controls G, third bit controls B.\n\n\n# Do This\nTry changing the color drop downs next to replace. Based on how the bits change, can you formulate what replace is doing? Talk to your partner and see if you can figure it out.\n\n",
        "CSD U1 - PixFilter 1x1 intro_markdown_instruction": "# 3 Bit Colors\nEach pixel is a square on a screen that emits light. Each pixel can have a certain number of bits assigned to it, and bits per pixel determine the colors that can be rendered.\n\nIn this tool we're using 3 bits to define the one large black pixel. The first bit affects the red tint. The second bit affects the green tint. The third bit affects the blue tint.\n\n# Do This\n\n* Click the \"Run\" button to start the widget\n* Click on the light bulbs to turn on or off each color and see what happens to your pixel\n* See how many different colors you can create with just three bits\n* Write down the binary associated with each color you come up with\n",
        "CSD U1 - PixFilter Filter Intro_markdown_instruction": "# Filtering Pixels\nIf you've ever used Instagram you've probably encountered an image filter. Image filters read in each pixel, process it in some way, and the return the filtered pixel. In this tool we're going to start by filtering just a single pixel before moving on to a full image.\n\n# Do This\n\n* Try changing the color drop downs in the Filter section\n* Click on the top row of lightbulbs in the Diagram section to see how the filter will convert the input (top bulbs) to the output (bottom bulbs)\n* Look at how the numbers in the Binary section reflect changes to the colors\n* Based on how the bits change, can you formulate what replace is doing? Talk to your partner and see if you can figure it out.\n* Complete the Level 2 table in your Activity Guide\n\n",
        "CSD U1 - PixFilter Filter Revisit_markdown_instruction": "# Combining Filters\nNow that you've played with filtering a single color channel, it's time to see what happens if we filter more than one color.\n\n# Do This\n\n* Using the color dropdowns in the filter section, build a filter that changes the value of more than one color channel\n* Click on the top row of lightbulbs in the Diagram section to see how the filter will convert the input (top bulbs) to the output (bottom bulbs)\n* Look at how the numbers in the Binary section reflect changes to the colors\n* Complete the Level 4 table in your Activity Guide\n\n",
        "CSD U1 - PixFilter FreePlay_markdown_instruction": "# Free Play\n\nDo as you will, make something awesome",
        "CSD U1 - PixFilter Full_markdown_instruction": "# Instructions Go Here",
        "CSD U1 - PixFilter Mario_markdown_instruction": "# Combining Filters\n\nSometimes you'll need to filter more than one pixel to get the color change that you want.\n\n# Do This\nCheck out Mario, he's lookin' pretty good in his red hat and overalls. Your job it to set up the filter so he looks like Luigi, with a green hat and overalls.\n\n* First, determine which bit(s) needs to change in order to the change you want\n* Once you've figured out which bit needs changing, set the filter dropdown appropriately\n* After you've got the filter working so that, try to come up with other filters that change *only* his hat and overalls - how many different clothing colors can you come up with?\n\n_How many tries did it take you to find the right filter?_\n\n\n\n",
        "CSD U1 - PixFilter Mushroom_markdown_instruction": "# Filtering Images\nNow that we've seen how a single pixel can be filtered to change its color, let's try applying a filter to an image made of multiple pixels. The filter you create will be applied to each pixel in the image - and you still have the light bulbs available to experiment with how your filter will work with individual colors.\n\n\n# Do This\nHere's a picture of a red mushroom - you're going to try and turn it into a yellow mushroom.\n\n* First, determine which bit needs to change in order to turn red into yellow\n* Once you've figured out which bit needs changing, use the filter dropdowns to make all of the red areas turn yellow\n* After you've got the filter working so that the red has turned yellow, see if you can come up with filters that turn the mushroom other colors\n\n_How many tries did it take you to find the right filter?_\n\n\n\n",
        "CSD U1 - Single Pixel_markdown_instruction": "# 3 Bit Colors\nEach pixel is a square on a screen that emits light. Each pixel can have a certain number of bits assigned to it, and bits per pixel determine the colors that can be rendered.\n\nIn this tool we're using 3 bits to define the one large blue pixel pixel. The first bit affects the red tint. The second bit affects the green tint. The third bit affects the blue tint.\n\n# Do This\n\n* Click on the light bulbs to turn on or off each color and see what happens to your pixel\n* See how many different colors you can create with just three bits\n",
        "CSD U2 Debugging comments_markdown_instruction": "# Debugging\n\nThis page has images in it. Images make finding bugs a little more tricky. Can you debug this page?\n\nAs you are debugging you may notice a new set of symbols that look something like this:\n<pre>\n&lt;!-- this is a comment --&gt;\n</pre>\n\nThis is a **comment**. Comments are written by computer scientists creating web pages for themselves and other humans who might look at their HTML file. Comments explain the different parts of the code and what it should create.  Comments might help you debug.\n\n# Do This\n\n* Find and fix all bugs in the starting HTML\n* You know you’ve found all of the bugs when your page matches the <a href=\"https://thimbleprojects.org/danimcavoy/103295/\" target=\"_blank\"> Target Page</a>.",
        "CSD U2 HTML Add Content_markdown_instruction": "# Adding Content\n\nStart creating your first web page! Try to create a page with a title and two paragraphs.\n\n# Do This\n\n* Write a sentence about your favorite animal\n* On a separate line write another sentence about your least favorite animal.\n* Above both sentences try adding a title that says \"Animals\"\n* Don't forget to click <img src=\"https://images.code.org/6a35d13b10ed2029a9323c9cb555e39e-image-1477681291001.01.12 PM.png\" style=\"width:100px\">\n* **What do you notice about the structure of your content?**",
        "CSD U2 HTML Adding Paragraphs Template_markdown_instruction": "# Add Text to the Body\n\nWhen you start any Web Lab project it will automatically add `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When you add content to your projects you'll need to do it between the `<body>` and `</body>` tags since it should be part of the body of your webpage.\n\n# Do This\n\n* Write three separate sentences about any topic you like inside of the body tags of your web page\n* Hit \"Refresh and Save\" if you don't see the changes in the Preview area\n* Compare your work with a neighbor. Make sure you're placing code in the same place.\n",
        "CSD U2 HTML Adding Paragraphs Template_2018_markdown_instruction": "# Add Text to the Body\n\nWhen you start any Web Lab project it will automatically add `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When you add content to your projects you'll need to do it between the `<body>` and `</body>` tags since it should be part of the body of your webpage.\n\n# Do This\n\n* Write three separate sentences about any topic you like inside of the body tags of your web page\n* Hit \"Refresh and Save\" if you don't see the changes in the Preview area\n* Compare your work with a neighbor. Make sure you're placing code in the same place.\n",
        "CSD U2 HTML Adding Paragraphs_markdown_instruction": "# Add Text to the Body\n\nWhen you start any Web Lab project, it will automatically add `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When you add content to your projects, you'll need to do it between the `<body>` and `</body>` tags because it should be part of the body of your webpage.\n\n# Do This\n\n* Write three separate sentences about any topic you like inside of the body tags of your web page.\n* Hit \"Refresh and Save\" if you don't see the changes in the preview area.\n* Compare your work with a neighbor. Make sure you're placing code in the same place.\n",
        "CSD U2 HTML Adding Paragraphs_2018_markdown_instruction": "# Add Text to the Body\n\nWhen you start any Web Lab project, it will automatically add `<!DOCTYPE>`, `<html>`, `<head>`, and `<body>` tags to your project. When you add content to your projects, you'll need to do it between the `<body>` and `</body>` tags because it should be part of the body of your webpage.\n\n# Do This\n\n* Write three separate sentences about any topic you like inside of the body tags of your web page.\n* Hit \"Refresh and Save\" if you don't see the changes in the preview area.\n* Compare your work with a neighbor. Make sure you're placing code in the same place.\n",
        "CSD U2 Info Page Content_markdown_instruction": "# Adding Your Content\n\nYou should now have found a handful of websites that you can use to help make your case for the cause you've chosen. If not, keep on researching! Otherwise it's time to start structuring the content of your page.\n\nFor all of the content you find externally, you'll need to provide attribution to the original creator. For now, just include the url of the site where you found it in parenthesis. For example\n\n* According to the ASPCA only 10% of animals entering shelters have been spayed or neutered (http://www.aspca.org/animal-homelessness).\n* Kill shelters euthanize 2.7 million animals per year (http://www.aspca.org/animal-homelessness).\n\n# Do This\n\nThe specifics of your page layout will depend on your topics and goals, but in general you should create the following structure\n\n* A first level header with a catchy title for your page\n* A second level header for each separate argument to support your cause\n* Paragraphs of content under each second level header\n* The urls of any sites where you found information\n* Don't worry about styling right now you are just getting the content\n",
        "CSD U2 Info Page Create_markdown_instruction": "# Informational Page\n\nLet's start by setting up the page you will be using to create your informational page.\n\n# Do This\n\n* Add a new HTML file to your project for your informational page.\n* Add a title and description",
        "CSD U2 add content_markdown_instruction": "# Add HTML\n\nNext, you should add the HTML to your pages.\n\n# Do This\n* For each of the new pages that you've created, add HTML to make the page you sketched in your project guide.\n* You may also add more HTML to the pages you've already created.\n",
        "CSD U2 add content_2018_markdown_instruction": "# Add HTML\n\nNext, you should add the HTML to your pages.\n\n# Do This\n* For each of the new pages that you've created, add HTML to make the page you sketched in your project guide.\n* You may also add more HTML to the pages you've already created.\n",
        "CSD U2 add links_markdown_instruction": "# Missing Home Link\n\nCopying your hyperlinks to all your pages allowed you to get to most of the pages on your website from any other page. One hyperlink is missing - the one to get you to your home page (index.html).\n\n**Add a hyperlink to your home page from all the pages, even your home page itself.** Adding it to your home page will keep your navigation header consistent on all pages.",
        "CSD U2 challenge_markdown_instruction": "# Challenge\n\nCheck with your teacher before starting on this challenge.\n\nThis page is only partially finished, and it has some bugs.  Luckily, there are comments that should help you to finish the page as the author intended.\n\n# Do This\n\n* Look at the code and with your partner and discuss what the page should look like.\n* Work together to finish the page, paying attention to formatting.\n* Compare with another pair to see whether your pages are the same.\n",
        "CSD U2 challenge_2018_markdown_instruction": "# Challenge\n\nCheck with your teacher before starting on this challenge.\n\nThis page is only partially finished, and it has some bugs.  Luckily, there are comments that should help you to finish the page as the author intended.\n\n# Do This\n\n* Look at the code with your partner and discuss what the page should look like.\n* Work together to finish the page, paying attention to formatting.\n* Compare with another pair to see whether your pages are the same.\n",
        "CSD U2 create page_markdown_instruction": "# Create and Name Your New Page\n\nBefore you start coding, you should make sure that you have all the pages that you need in your project.\n\n# Do This\n* Create a new HTML page and rename it. (Look at <a href=\"/s/csd2/stage/6/puzzle/8\" target=\"_new\">Lesson 6 Level 8</a> if you've forgotten how.)\n* Repeat this process for any other pages you want to add.\n\n",
        "CSD U2 create page_2018_markdown_instruction": "# Create and Name Your New Page\n\nBefore you start coding, you should make sure that you have all the pages that you need in your project.\n\n# Do This\n* Create a new HTML page and rename it. (Look at <a href=\"/s/csd2/stage/6/puzzle/8\" target=\"_new\">Lesson 6 Level 8</a> if you've forgotten how.)\n* Repeat this process for any other pages you want to add.\n\n",
        "CSD U2 debug comments_markdown_instruction": "# Debugging\n\nThis page has images in it. Images make finding bugs a little more tricky. Can you debug this page?\n\nAs you are debugging you may notice a new set of symbols that look something like this:\n<pre>\n&lt;!-- this is a comment --&gt;\n</pre>\n\nThis is a **comment**. Comments are written by computer scientists creating web pages for themselves and other humans who might look at their HTML file. Comments explain the different parts of the code and what it should create.  Comments might help you debug.\n\n# Do This\n\n* Find and fix all bugs in the starting HTML\n* You know you’ve found all of the bugs when your page matches the <a href=\"https://thimbleprojects.org/danimcavoy/103295/\" target=\"_blank\"> Target Page</a>.",
        "CSD U2 header footer_markdown_instruction": "# Navigation Bar and Footer\n\nEach of your pages needs a navigation bar and a footer.\n\n# Do This\n* For each page, make sure it has a navigation bar that links to other pages in your site.  For a review of the navigation bar, go to <a href=\"/s/csd2/stage/9/puzzle/4\" target=\"_new\">Lesson 9 Level 4</a>.\n* For each page, make sure it has a footer at the bottom that explains the copyright information for your page. (Go to <a href=\"https://creativecommons.org/choose/\" target=\"_new\">Creative Commons</a> for help in creating this HTML.)",
        "CSD U2 header footer_2018_markdown_instruction": "# Navigation Bar and Footer\n\nEach of your pages needs a navigation bar and a footer.\n\n# Do This\n* For each page, make sure it has a navigation bar that links to other pages in your site.  For a review of the navigation bar, go to <a href=\"/s/csd2/stage/9/puzzle/4\" target=\"_new\">Lesson 9 Level 4</a>.\n* For each page, make sure it has a footer at the bottom that explains the copyright information for your page. (Go to <a href=\"https://creativecommons.org/choose/\" target=\"_new\">Creative Commons</a> for help in creating this HTML.)",
        "CSD U2 layout style freeplay - OLD_markdown_instruction": "# Personal Web Site\n\nTry out these some new CSS properties on your personal web site.\n\n* Add styling of your choice to your web site. Be sure to use at least 3 new CSS properties.\n\n# Checklist\n\n* At least 3 of the following CSS Properties are used:\n\n  * `background-color`\n  * `height`\n  * `width`\n  * `border-style`\n  * `border-radius`\n  * `border-width`\n  * `float`\n  * `margin`\n\n\nIf you’ve used at least 3 of the properties from the checklist, you can explore some additional CSS properties to add to your About Me page.",
        "CSD U2 layout style freeplay_markdown_instruction": "# Personal Web Site\n\nTry out some of these new CSS properties on your personal web site.\n\n* Add styling of your choice to your web site. Be sure to use at least three new CSS properties.\n\n# Checklist\n\n* At least three of the following CSS Properties are used:\n\n  * `background-color`\n  * `height`\n  * `width`\n  * `border-style`\n  * `border-radius`\n  * `border-width`\n  * `float`\n  * `margin`\n\nWe encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.",
        "CSD U2 layout style freeplay_2018_markdown_instruction": "# Personal Web Site\n\nTry out some of these new CSS properties on your personal web site.\n\n* Add styling of your choice to your web site. Be sure to use at least three new CSS properties.\n\n# Checklist\n\n* At least three of the following CSS Properties are used:\n\n  * `background-color`\n  * `height`\n  * `width`\n  * `border-style`\n  * `border-radius`\n  * `border-width`\n  * `float`\n  * `margin`\n\nWe encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.",
        "CSD U2 project review_markdown_instruction": "# Review Your Project\n\nYou're almost ready to publish your project, but you should check one more time that you have fulfilled all the requirements for this project.\n\n# Do This\n* Check that you are comfortable sharing all the information that's on your site.\n* Check that all of your images are correctly attributed, and that you have the right to put them on your site.\n* Check that your project includes everything included in the project rubric.\n* Use comments and whitespace to make your website readable.\n* Ask your partner to help you find any potential problems with your site.\n",
        "CSD U2 project review_2018_markdown_instruction": "# Review Your Project\n\nYou're almost ready to publish your project, but you should check one more time that you have fulfilled all the requirements for this project.\n\n# Do This\n* Check that you are comfortable sharing all the information that's on your site.\n* Check that all of your images are correctly attributed, and that you have the right to put them on your site.\n* Check that your project includes everything included in the project rubric.\n* Use comments and whitespace to make your website readable.\n* Ask your partner to help you find any potential problems with your site.\n",
        "CSD U2 project share_markdown_instruction": "# Share Your Project\n\nIt's time to share your project with the world!\n\n# Do This\n* Click the ![](https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27 AM.png) button at the top of this page.\n* Copy the URL it gives you, and email it to the people you want to see your page.\n\n",
        "CSD U2 project share_2018_markdown_instruction": "# Share Your Project\n\nIt's time to share your project with the world!\n\n# Do This\n* Click the ![](https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27 AM.png) button at the top of this page.\n* Copy the URL it gives you, and email it to the people you want to see your page.\n\n",
        "CSD U3 - Booleans Video_markdown_instruction": "# Boolean Expressions Video",
        "CSD U3 - Simple Counter Predict_markdown_instruction": "# The Counter Pattern\n\nThis pattern is one of the most important ones in all of programming. \n\n![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56 PM.png)\n    \nIt is used to increase the value of a variable by 1. You might call it the **counter pattern** since it can be used to make a variable that counts up. You'll use this pattern a lot, especially with the draw loop. Let's see what that looks like.\n\n# Do This\n\nThis program creates a variable `counter` and then uses the **counter pattern** to make it count up. When you run the program what do you think you'll see on the screen?\n\n* **Read the program** and make a prediction of what the output will be.\n* **Run the program** to check your prediction.\n* **Discuss with a neighbor**. Can you explain what you observed?\n\n",
        "CSD U3 - Simple Counter Predict_2018_markdown_instruction": "# The Counter Pattern\n\nThis pattern is one of the most important ones in all of programming. \n\n![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56 PM.png)\n    \nIt is used to increase the value of a variable by 1. You might call it the **counter pattern** since it can be used to make a variable that counts up. You'll use this pattern a lot, especially with the draw loop. Let's see what that looks like.\n\n# Do This\n\nThis program creates a variable `counter` and then uses the **counter pattern** to make it count up. When you run the program what do you think you'll see on the screen?\n\n* **Read the program** and make a prediction of what the output will be.\n* **Run the program** to check your prediction.\n* **Discuss with a neighbor**. Can you explain what you observed?\n\n",
        "CSD U3 - Sprites - Sprite v Rect_markdown_instruction": "# Sprites vs Rect\n\nCurently sprites and rectangles seem really similar. It will become clear later on why sprites are more powerful than basic shapes. Before you get there though it is important to call out a major difference in the way sprites and rectangles draw.\n\n# Do This\nCan you will figure out the difference by just trying this?\n\n* Create a rectangle with a width and height of 30\n* Set the fill for the rectangle to a different color than gray (So its clear which is the rectangle)\n* Create a sprite and give it the same x and y values as you gave the rectangle\n* Make sure to call `drawSprites` in the draw loop\n* Run the program\n* Can you see the difference?",
        "CSD U3 - complex - key up and down_markdown_instruction": "# Responding to a Single Click\n\nEarlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!\n\n# Do This\n\nLet's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.\n\n* Add a conditional that checks if the mouse went down.\n* Inside your conditional, add to the `clicks` variable.\n\n_Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._",
        "CSD U3 - complex - key up and down_2018_markdown_instruction": "# Responding to a Single Click\n\nEarlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!\n\n# Do This\n\nLet's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.\n\n* Add a conditional that checks if the mouse went down.\n* Inside your conditional, add to the `clicks` variable.\n\n_Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._",
        "CSD U3 - complex - mouse down_markdown_instruction": "# Mouse Clicks\n\nKeypresses are great, but sometimes you want users to interact through mouse clicks. There's a new block called `mouseDown` which, similar to `keyDown`, checks whether the left or right mouse buttons is being pressed. If you are using a computer with a mouse or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`. \n\n# Do This\nHere's a program that drops a balloon down the screen - you're going to program the mouse button to raise the balloon back up while it's clicked.\n\n* Add an if else statment that checks for `mouseDown`.\n* Inside the conditional, move the balloon up one pixel if the mouse is down. Otherwise, move the balloon down.\n\n_Hint: You'll need to move the code that drops the balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge: Can you make the balloon drift randomly to the left and right as it rises and falls?_",
        "CSD U3 - complex - mouse down_2018_markdown_instruction": "# Mouse Clicks\n\nKeypresses are great, but sometimes you want users to interact through mouse clicks. There's a new block called `mouseDown` which, similar to `keyDown`, checks whether the left or right mouse buttons is being pressed. If you are using a computer with a mouse or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`. \n\n# Do This\nHere's a program that drops a balloon down the screen - you're going to program the mouse button to raise the balloon back up while it's clicked.\n\n* Add an if else statment that checks for `mouseDown`.\n* Inside the conditional, move the balloon up one pixel if the mouse is down. Otherwise, move the balloon down.\n\n_Hint: You'll need to move the code that drops the balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge: Can you make the balloon drift randomly to the left and right as it rises and falls?_",
        "CSD U3 - complex - mouse move_markdown_instruction": "# mouseDidMove\n\nWe can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.\n\n# Do This\nRight now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can \"shake\" the salt by moving the mouse back and forth.\n\n* Add a conditional that checks if `mouseDidMove`.\n* If the conditional is true, rotate the salt sprite randomly to the left or right.\n\n_Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_",
        "CSD U3 - complex - mouse move_2018_markdown_instruction": "# mouseDidMove\n\nWe can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.\n\n# Do This\nRight now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can \"shake\" the salt by moving the mouse back and forth.\n\n* Add a conditional that checks if `mouseDidMove`.\n* If the conditional is true, rotate the salt sprite randomly to the left or right.\n\n_Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_",
        "CSD U3 - conditionals - arrows and gears_markdown_instruction": "# Gears with Conditionals\n\nLet's make the gears spin only when the space key is being held down.\n\n# Do This\n\n* Add an `if` statement.\n* Use `keyDown` as input to the if statement to check when the space key is pressed.\n* Move the code that makes the gears rotate inside the `if`.",
        "CSD U3 - conditionals - transition 2_markdown_instruction": "# More Practice With Booleans\n\nLet's use one more Boolean expression to check the condition of a sprite.\n\n# Do This\nThere is a growing balloon sprite created for you. Can you create an expression to check when the balloon hits the edge of the game area?\n\n* Add a `console.log` statement.\n* Add a Boolean expression inside the `console.log` that checks whether the balloon has hit the edge of the game area.\n* Hint: Use the scale of the balloon. You might have to do some guess and check testing to find the right scale.",
        "CSD U3 - conditionals - transition_markdown_instruction": "# Booleans\n\nIn the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.\n\n# Do This\nThe program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.\n\n* Add a `console.log` statement inside the draw loop. ( [Show me where](#triggercallout=callout) )\n* Add an Boolean expression inside the `console.log` that asks \"Is the x position of the race car less than the x position of the finish line?\"\n* Look at the output of the program as the car moves. When does the output change? Why?",
        "CSD U3 - conditionals - transition_2018_markdown_instruction": "# Booleans\n\nIn the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.\n\n# Do This\nThe program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.\n\n* Add a `console.log` statement inside the draw loop. ( [Show me where](#triggercallout=callout) )\n* Add an Boolean expression inside the `console.log` that asks \"Is the x position of the race car less than the x position of the finish line?\"\n* Look at the output of the program as the car moves. When does the output change? Why?",
        "CSD U3 - images - Embed Project_markdown_instruction": "Example of the Final Project",
        "CSD U3 - images - animations_markdown_instruction": "# Animations\n\nYou have seen through out this Unit that when you put together a set of images and play them close together back to back it looks like movement! Well sprites make that animation easier! You can put together a set of images to create an animation. There are pre-loaded animations for you in the animations manager. \n\nSet the animation with setAnimation.\n\n# Do This\n\n* Create a sprite\n* Add the animation.",
        "CSD U3 - images - changing scene_markdown_instruction": "# Images\n\nUse the animations tab to finish making all three sprites fish images.\n\n<img src=\"https://images.code.org/f947fc6800cd1abda023b08c20a2ee87-image-1477679298953.gif\" style=\"float:right\">\n\n# Do This\nYour goal is to finish the underwater scene so all three sprites are fish like the example on the right. \n\n* There is a rectangle sprite already created for you for each fish.\n* Run the code to see how it works.\n* Add a `setAnimation` command to change the look for the remaining two fish. \n* Run it to see that your rectangle is now an image!\n",
        "CSD U3 - images - first image_markdown_instruction": "# Images\n\nUp until now all of your sprites have been rectangles. No longer! Now you can use pictures for your sprites instead.\n\nCheck out the animations tab by clicking the <img src=\"https://images.code.org/9471c62f11f3c6065c0d2da523f2ac89-image-1465515854142.43.49 PM.png\" style=\"width:100px\"> button above the display area.\n\nThere is an image there that have been loaded for you!\n\nIn order to use that image you will need to use the `setAnimation` command. You have to create the sprite before you can set its animation.\n\n# Do This\n\nThere is a rectangle sprite already created for you. All you need to do is change it to an image.\n\n* Add a call to `setAnimation` to set the animation to the image provided\n* Run it to see that your rectangle is now an image!",
        "CSD U3 - images - first sprite with image_markdown_instruction": "# Images\n\nRectangles are great, but if you're going to make animations and games that really look great, you'll need some way to add more interesting images to your sprites.\n\nOver on the **Animations Tab** you'll see three images that have been loaded for you! You can get to the animations tab by clicking the <img src=\"https://images.code.org/9471c62f11f3c6065c0d2da523f2ac89-image-1465515854142.43.49 PM.png\" style=\"width:100px\"> button above the display area.\n\n<img src=\"https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11 PM.png\" style=\"width:300px;float:right\">\n\nOnce you have created a sprite you can **use the `setAnimation()` command to change the look of your sprite from a rectangle to a picture.** The blocks make this super easy to do as the names of all the images you have loaded in the animation tab show up in the `setAnimation()` dropdown.  The alien is set up for you as an example.\n\n# Do This\nChange the sprite to your favorite image from the animations tab.\n\n* A sprite that is set to an image has already been created for you.\n* Run the code to see how it works.\n* Change the input to the `setAnimation` command to change the look of the sprite.\n* Try out all the different images.",
        "CSD U3 - images - fish free play_markdown_instruction": "# Fish Free Play\n\nHere are the swimming fish you have been working on. Continue to improve the animation!\n\n# Do This\n\n* Add another sea creature to the scene.\n* Make the sea creature move.\n* Make one of the fish follow the mouse.\n* Add more ideas of your own!",
        "CSD U3 - images - fish with arrows_markdown_instruction": "# Fish With Arrows\n\nThe fish are back. Can you make the fish move left only when the left arrow key is pressed down?\n\n# Do This\n\n* Add an if statement to check when the left arrow key is pressed down.\n* Move the statements for moving the fish inside the if statement.",
        "CSD U3 - images - kite free play_markdown_instruction": "# Kite Free Play\n\nHere is the flying kite you have been working on. Continue to improve the animation!\n\n# Do This\n\n* Add at least 1 other sprite.\n* Make the sprite move.\n* Improve the background by adding clouds or other objects.\n* Add more ideas of your own!",
        "CSD U3 - images - kiteFlying_markdown_instruction": "# Flying Kite\n\nNow that you have a kite, make it fly around.\n\nTo do this we will need to move the kite and update the end position of the line that is the string. You have done similar things with variables before but now you will be using properties.\n\n# Do This\n\n* Make the kite move around the top right corner of the screen randomly.\n* Move the code for the string of the kite to the Draw Animations section since it is now moving!\n* Update the end position of the line so that one end of string stays at the center of the kite.",
        "CSD U3 - images - nextFrame_markdown_instruction": "# Next Frame\n\nOn the last level the animation you used continously looped through the animation and never stopped. Sometimes we want to control when the animation changes.  When you want to create a sequence but not have it loop you can click the button in the anmations tab ***show example***. Then in the code you can control when you move to the next frame using `nextFrame`. \n\n\n# Do This\n\nThere is a sprite already created for you and 4 images loaded into the animations tab. Make the sprite change frames each time the space bar is pressed down.\n\n* Create a conditional to respond to the space bar\n* Inside the conditional call `nextFrame` to move the sprite to the next frame",
        "CSD U3 - images - race images_markdown_instruction": "# Race Cars\n\nYou made a racing game in the last lesson. You can now make those rectangles look like race cars!\n\n# Do This\n\n* Use the race car images in the animations tab to update your racing animation.",
        "CSD U3 - images - random movement_markdown_instruction": "<img src=\"https://images.code.org/fccef5d23434917c0a22361cb6e69666-image-1477679738105.gif\" style=\"float:right\">\n\n# Updating Fish\n\nThe same thing you did on the last level will help your fish look more like they are swimming. Update your scene to make the fish look like they don't swim in a perfectly straight line. \n\n# Do This\nYour goal is to finish the underwater scene so all three sprites are fish like the example on the right. \n\n* Use a small random rotation to **make your fish wiggle**.\n",
        "CSD U3 - images - review_markdown_instruction": "# Sprites Review\n\nYou have learned a lot about sprites already and conditionals. Can you use those skills to create a square that moves in all 4 directions in response to the arrow keys?\n\n# Do This\n\n* Create a sprite\n* Make the sprite move up, down, left, and right in response to the arrow keys",
        "CSD U3 - images - scale_markdown_instruction": "# Upload your own image\n\nSo the image you uploaded probably was not the size you wanted was it? You can fix that!  There is a property for sprites called `scale`.  **Scale controls the width and the height of the sprite at once.** Using scale is better than  using width and height for images because...\n1. It's one property instead of two.\n2. You keep the image ratio and it doesn't distort it.\n\n**To make the image smaller you want to use a scale less than 1. To make the image bigger you want to use a number greater than 1. A scale of 1 would keep it the same.**\n\n# Do This\n\n* Resize your kite using `scale` to better fit the picture.",
        "CSD U3 - images - setAnimation_markdown_instruction": "# Upload your own image\n\nYou can also use the Animation tab to upload your own image.\n\n# Do This\nYou are going to make a flying kite. The first step is to pick out a kite you like.\n\n* Find an image of a kite you want to use.  It works best if it has a clear background.\n* Open the animations tab.\n* Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png\" style=\"width:50px\">\n* Click <img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png\" style=\"width:50px\">\n* Select a file from your computer.\n* Rename your image so it has a name that is easy to remember. To rename it click the text below the image. <img src=\"https://images.code.org/c7809f27743bcb4cd86e46a4493c5c7a-image-1466194516357.15.04 PM.png\" style=\"width:60px\">\n* Set the kite sprite to display your image.\n\nDon't worry if your kite image is too big! You'll learn how to fix that in the next level.",
        "CSD U3 - images - switch the picture_markdown_instruction": "# Switching Images\n\nYou don't have to keep the same image the whole time. In fact since your *image* was moving around the screen it would be cool to have it fact the correct direction as it moves.\n\n# Do This\n\nYour work was copied here as well\n\n* Add a call to `setAnimation` inside each if statement to the correct image",
        "CSD U3 - images - visible_markdown_instruction": "# Visible\n\nNow that you have conditionals and images sometimes it appropriate to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different than some of the other properties you have seen in the past. It is a boolean value. So visible is either true or false. By default visible is set to true.\n\n\n# Do This\n\n* In response to something set the sprite to visible and invisible.\n",
        "CSD U3 - sprites - motiviation_markdown_instruction": "# How Many Variables?\n\nIn the last lesson you learned how to use the **counter pattern** (`x = x + 1`, `x = x - 0.5`, `x = x - 1`, etc.) to create smooth animations. Using this pattern in many different ways allows you to create interesting and complex animations.\n\nWatch the animation here. With a partner discuss: \n\n* How many counter variables would you need to create to make this animation? What are they used to animate?\n* What would you name your variables?\n* What are the challenges of using counter variables in a scene like this?",
        "CSD U3 AnimationsMulti Play Defender_markdown_instruction": "# Defend Your Cake!\n\nThis is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.\n\n# Do This\n\nTurn to a classmate and make a list of the following information.\n\n* How many sprites are there in this game. Which are they?\n* What variables are needed to make this game? What do they store?\n* If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?",
        "CSD U3 AnimationsMulti Play Defender_2018_markdown_instruction": "# Defend Your Cake!\n\nThis is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.\n\n# Do This\n\nTurn to a classmate and make a list of the following information.\n\n* How many sprites are there in this game. Which are they?\n* What variables are needed to make this game? What do they store?\n* If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?",
        "CSD U3 AnimationsMulti defender animate cake enemies_markdown_instruction": "# Getting Started: Set Animations\n\nYou should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.\n\n# Do This\n\nBefore we get started you'll want some better animations for each of your sprites.\n\n* In the Animation Tab are animations for each of your sprites. Go look at what they are.\n* In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.\n* Head to [Level 4](/s/csd3/stage/20/puzzle/4) if you need help remembering how to do this.",
        "CSD U3 AnimationsMulti defender animate cake enemies_2018_markdown_instruction": "# Getting Started: Set Animations\n\nYou should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.\n\n# Do This\n\nBefore we get started you'll want some better animations for each of your sprites.\n\n* In the Animation Tab are animations for each of your sprites. Go look at what they are.\n* In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.\n* Head to [Level 4](/s/csd3/stage/20/puzzle/4) if you need help remembering how to do this.",
        "CSD U3 AnimationsMulti defender animate player_markdown_instruction": "# Change Player Animations\n\nRight now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.\n\n# Do This\n\n* Inside the Animation Tab copy the animation of your player sprite.\n* Flip each frame of the new animation so that the sprite is facing in the opposite direction.\n* Rename your new animation.\n* Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the \"left\" and \"right\" arrows are pressed.",
        "CSD U3 AnimationsMulti defender animate player_2018_markdown_instruction": "# Change Player Animations\n\nRight now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.\n\n# Do This\n\n* Inside the Animation Tab copy the animation of your player sprite.\n* Flip each frame of the new animation so that the sprite is facing in the opposite direction.\n* Rename your new animation.\n* Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the \"left\" and \"right\" arrows are pressed.",
        "CSD U3 AnimationsMulti defender create set enemies_markdown_instruction": "# Creating Functions\n\n<img src=\"https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png\" style=\"float:right; height:90px\">\n\nYour program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.\n\n# Do This\n\n<img src=\"https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png\" style=\"\nfloat:right; height:70px\">\n\n* At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.\n* Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.\n* Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.",
        "CSD U3 AnimationsMulti defender create set enemies_2018_markdown_instruction": "# Creating Functions\n\n<img src=\"https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png\" style=\"float:right; height:90px\">\n\nYour program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.\n\n# Do This\n\n<img src=\"https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png\" style=\"\nfloat:right; height:70px\">\n\n* At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.\n* Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.\n* Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.",
        "CSD U3 AnimationsMulti defender displace enemies_markdown_instruction": "# Displace Enemies\n\nIt's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.\n\n# Do This\n\nFor this level you'll be writing code inside the `displaceEnemies` function.\n\n* Write code that makes player displace both enemy sprites.\n* Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.\n\n_Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._",
        "CSD U3 AnimationsMulti defender displace enemies_2018_markdown_instruction": "# Displace Enemies\n\nIt's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.\n\n# Do This\n\nFor this level you'll be writing code inside the `displaceEnemies` function.\n\n* Write code that makes player displace both enemy sprites.\n* Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.\n\n_Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._",
        "CSD U3 AnimationsMulti defender enemies move_markdown_instruction": "# Moving The Enemies\n\nIt's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.\n\n# Do This\n\nAt the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.\n\n* Use `sprite.x` to set the x position to 0.\n* Use `sprite.y` to set the y position should be a random number between 150 and 250.\n* Use `sprite.velocityX` to set the x velocity to 2.\n\nTest your program. Your enemy sprites should now be moving across the bridge.",
        "CSD U3 AnimationsMulti defender enemies move_2018_markdown_instruction": "# Moving The Enemies\n\nIt's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.\n\n# Do This\n\nAt the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.\n\n* Use `sprite.x` to set the x position to 0.\n* Use `sprite.y` to set the y position should be a random number between 150 and 250.\n* Use `sprite.velocityX` to set the x velocity to 2.\n\nTest your program. Your enemy sprites should now be moving across the bridge.",
        "CSD U3 AnimationsMulti defender make it your own_markdown_instruction": "# Make It Your Own\n\nYou just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?\n\n# Do This\n\nSelect one of the challenges below to add to the game or come up with a challenge of your own.\n\n* Change the visuals of the game so that your player, enemies, or cake look different.\n* End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.\n* Randomize the speed of the enemies.\n* Create a new background that shows up when players reach a higher score.",
        "CSD U3 AnimationsMulti defender make it your own_2018_markdown_instruction": "# Make It Your Own\n\nYou just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?\n\n# Do This\n\nSelect one of the challenges below to add to the game or come up with a challenge of your own.\n\n* Change the visuals of the game so that your player, enemies, or cake look different.\n* End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.\n* Randomize the speed of the enemies.\n* Create a new background that shows up when players reach a higher score.",
        "CSD U3 AnimationsMulti defender move player_markdown_instruction": "# Moving Left and Right\n\nNow that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.\n\n# Do This\n\nFor this level you'll be writing code inside the `movePlayer` function.\n\n* Use an `if` block along with `keyDown` to detect when the \"right\" arrow is pressed.\n* Use `sprite.x` and the counter pattern increase the player's x position by 3.\n* Use another `if` block to move the player to the left when the \"left\" arrow is pressed. This time you'll need to decrease the player's x position.\n\nTest your game. Your character sprite should now move left and right when you press the left and right arrows.",
        "CSD U3 AnimationsMulti defender move player_2018_markdown_instruction": "# Moving Left and Right\n\nNow that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.\n\n# Do This\n\nFor this level you'll be writing code inside the `movePlayer` function.\n\n* Use an `if` block along with `keyDown` to detect when the \"right\" arrow is pressed.\n* Use `sprite.x` and the counter pattern increase the player's x position by 3.\n* Use another `if` block to move the player to the left when the \"left\" arrow is pressed. This time you'll need to decrease the player's x position.\n\nTest your game. Your character sprite should now move left and right when you press the left and right arrows.",
        "CSD U3 AnimationsMulti defender move up down_markdown_instruction": "# Moving Up and Down\n\nYou'll want your player sprite to move up and down as well.\n\n# Do This\n\nFor this level you'll still be writing code inside the `movePlayer` function.\n\n* Use an `if` block along with `keyDown` to detect when the \"up\" arrow is pressed.\n* Use `sprite.y` to increase the player's y position by 3 using the counter pattern.\n* Use another `if` block to move the player down when the \"down\" arrow is pressed.\n\nTest your code. Your character should now move in all 4 directions.",
        "CSD U3 AnimationsMulti defender move up down_2018_markdown_instruction": "# Moving Up and Down\n\nYou'll want your player sprite to move up and down as well.\n\n# Do This\n\nFor this level you'll still be writing code inside the `movePlayer` function.\n\n* Use an `if` block along with `keyDown` to detect when the \"up\" arrow is pressed.\n* Use `sprite.y` to increase the player's y position by 3 using the counter pattern.\n* Use another `if` block to move the player down when the \"down\" arrow is pressed.\n\nTest your code. Your character should now move in all 4 directions.",
        "CSD U3 AnimationsMulti defender template_markdown_instruction": "# Play and Pause\n\nYou can use the `sprite.play` and `sprite.pause` commands to play and pause a sprite's animation. If the animation is already playing or paused, using these commands twice in a row has no effect.  There's one important exception, however, which is that **play will restart a non-looping animation if it has finished**. We're going to look at some cool behavior this lets us create.\n\n# Do This\n\n* Use the `sprite.play` command after each of your `setAnimation` commands. This will restart the walk animations as long as the keys are pressed.",
        "CSD U3 AnimationsMulti defender template_2018_markdown_instruction": "# Play and Pause\n\nYou can use the `sprite.play` and `sprite.pause` commands to play and pause a sprite's animation. If the animation is already playing or paused, using these commands twice in a row has no effect.  There's one important exception, however, which is that **play will restart a non-looping animation if it has finished**. We're going to look at some cool behavior this lets us create.\n\n# Do This\n\n* Use the `sprite.play` command after each of your `setAnimation` commands. This will restart the walk animations as long as the keys are pressed.",
        "CSD U3 AnimationsMulti introducing multiframe template_markdown_instruction": "# Using Multiframe Animations\n\nYou probably noticed in the last game that the sprites themselves were animated. Have some fun choosing some of the animations from the library.\n\n\n# Do This\n\nThis program already includes several sprites but they don't yet have any animations.\n\n* Go to the Animation tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.\n",
        "CSD U3 AnimationsMulti introducing multiframe template_2018_markdown_instruction": "# Using Multiframe Animations\n\nYou probably noticed in the last game that the sprites themselves were animated. Have some fun choosing some of the animations from the library.\n\n\n# Do This\n\nThis program already includes several sprites but they don't yet have any animations.\n\n* Go to the Animation tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.\n",
        "CSD U3 AnimationsMulti introducing multiframe_markdown_instruction": "# Using Multiframe Animations\n\nIn the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.\n\n# Do This\n\nThis program already includes several sprites but they don't yet have any animations.\n\n* Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.\n* Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.",
        "CSD U3 AnimationsMulti introducing multiframe_2018_markdown_instruction": "# Using Multiframe Animations\n\nIn the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.\n\n# Do This\n\nThis program already includes several sprites but they don't yet have any animations.\n\n* Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.\n* Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.",
        "CSD U3 AnimationsMulti mirror animation_markdown_instruction": "# Editing Multiframe Animations\n\nYour sprites will look a lot more realistic if they turn around when they're moving. You can switch back and forth between multiframe animations when the user presses different keys.\n\n# Do This\n\nRead this code and run the program. Make sure you know how the sprite responds to the arrow keys.\n\n* In the Animation Tab, create a copy of the alien animation by clicking the following button: ![](https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09 PM.png)\n* Use the tool to flip your animation. Make sure you flip both frames using this button:  ![](https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03 PM.png) \n* Rename your new animation.\n* Use your new animation and old animation so that the alien faces the correct direction when moving. Where do you think you'll need to set the sprite's animation in your code?",
        "CSD U3 AnimationsMulti mirror animation_2018_markdown_instruction": "# Editing Multiframe Animations\n\nYour sprites will look a lot more realistic if they turn around when they're moving. You can switch back and forth between multiframe animations when the user presses different keys.\n\n# Do This\n\nRead this code and run the program. Make sure you know how the sprite responds to the arrow keys.\n\n* In the Animation Tab, create a copy of the alien animation by clicking the following button: ![](https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09 PM.png)\n* Use the tool to flip your animation. Make sure you flip both frames using this button:  ![](https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03 PM.png) \n* Rename your new animation.\n* Use your new animation and old animation so that the alien faces the correct direction when moving. Where do you think you'll need to set the sprite's animation in your code?",
        "CSD U3 AnimationsMulti no loop_markdown_instruction": "# Preventing Animations from Looping\n\nBy default your animations keep replaying in a loop. You can have your animation only play once by clicking this button below your animation.\n\n# Do This\n\n* Set both the animations in your project to non-looping.\n* Run the program and confirm your sprite only takes 1 step when it changes directions",
        "CSD U3 AnimationsMulti play pause_markdown_instruction": "# Play and Pause\n\nYou can use the `sprite.play` and `sprite.pause` commands to play and pause a sprite's animation. If the animation is already playing or paused, using these commands twice in a row has no effect.  There's one important exception, however, which is that **play will restart a non-looping animation if it has finished**. We're going to look at some cool behavior this lets us create.\n\n# Do This\n\n* Use the `sprite.play` command after each of your `setAnimation` commands. This will restart the walk animations as long as the keys are pressed.",
        "CSD U3 AnimationsMulti slow down_markdown_instruction": "# Slow Down\n\nNice work! Time to start learning how to control these multiframe animations.\n\n# Do This\n\nYour sprites should be animated but they're moving really quickly. \n\n* Head back to the Animation Tab. Underneath each animation you should see a slider. ![](https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26 AM.png)\n* Use these sliders to slow down your animations so they look more realistic.\n\n",
        "CSD U3 AnimationsMulti slow down_2018_markdown_instruction": "# Slow Down\n\nNice work! Time to start learning how to control these multiframe animations.\n\n# Do This\n\nYour sprites should be animated but they're moving really quickly. \n\n* Head back to the Animation Tab. Underneath each animation you should see a slider. ![](https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26 AM.png)\n* Use these sliders to slow down your animations so they look more realistic.\n\n",
        "CSD U3 Background Discuss_markdown_instruction": "<i class=\"fa fa-hand-paper-o\" aria-hidden=\"true\" style=\"color:red; float: right; font-size: 200px; font-weight: 800;\"></i>\n\n# Animation\nUsing the draw loop opens up the potential to make some neat animations, but it's a bit troublesome that every time the loop is run it just draws on top of the last drawing. What if we could make this behave more like a flip book animation?\n\n# Do This Together\n\n* **Run** the provided program together\n* **Hypothesize** how does the draw loop work?\n* **Brainstorm** how could we make it so that we only see the most recently drawn rectangle?",
        "CSD U3 Background Experiment_markdown_instruction": "# Background\nWe could draw a 400 pixel white square each time the `draw()` loop runs, but there's actually a built-in command that works even better. The `background()` block just takes one input, the color of your background, and fills the whole canvas with that color. The nice thing about using `background()` instead of `rect()` is that it will fill the screen regardless of how big it is, making your code more flexible and usable in more scenarios (like when you get a new phone with a bigger screen).\n\n# Do This\nPlace the `background()` block inside your `draw()` loop before any other shapes are drawn. Choose a background color of your choice and then test your code to make sure it only shows a single rectangle at a time.",
        "CSD U3 Complex Movement counter prediction_markdown_instruction": "# Velocity and the Counter Pattern\n\nUsing the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.\n\n# Predict\n\nWhat do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.",
        "CSD U3 Complex Movement counter prediction_2018_markdown_instruction": "# Velocity and the Counter Pattern\n\nUsing the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.\n\n# Predict\n\nWhat do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.",
        "CSD U3 Compound Nested Challenge_markdown_instruction": "# Challenge: Checking for Multiple Conditions\n_Check with your teacher before taking on this challenge._\n\n\nSo far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:\n\n- The sprite should move up, down, left, and right if the corresponding arrow key is pressed.\n- The sprite should _not_ go all the way off the screen in any direction.\n\n# Do This Together\n\nBefore you tackle writing this program, you'll need to figure out how to check multiple conditions at once.\n\n* **Brainstorm** with your neighbors ways you might check for more than one condition.\n* **Share** back with the whole class so you can see other potential approaches.\n* **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).\n* **Program** your proposed solution.\n* **Test** your program to make sure it's actually checking all of the conditions you intended.\n",
        "CSD U3 Compound Nested Challenge_2018_markdown_instruction": "# Challenge: Checking for Multiple Conditions\n_Check with your teacher before taking on this challenge._\n\n\nSo far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:\n\n- The sprite should move up, down, left, and right if the corresponding arrow key is pressed.\n- The sprite should _not_ go all the way off the screen in any direction.\n\n# Do This Together\n\nBefore you tackle writing this program, you'll need to figure out how to check multiple conditions at once.\n\n* **Brainstorm** with your neighbors ways you might check for more than one condition.\n* **Share** back with other classmates so you can see other potential approaches.\n* **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).\n* **Program** your proposed solution.\n* **Test** your program to make sure it's actually checking all of the conditions you intended.\n",
        "CSD U3 Conditional Project_markdown_instruction": "# Get Creative\n\nAt this point you have all of the tools necessary to make an interactive animation or simple game of your own design! This is your chance practice using all of the blocks you've seen so far, and to experiment with blocks you haven't used yet.\n\n# Do This\n\nDesign an interactive animation of your own. Your program should -\n\n- Use conditionals to get keyboard input\n- Use conditionals to react to a sprite's properties\n- Allow a user to move one or more sprites around the screen\n- Change multiple sprite properties through conditionals\n\n_You might notice some new blocks in the Sprites drawer, experiment with them and see if you can incorporate them into your conditionals._",
        "CSD U3 Conditionals Apple 2-2018_markdown_instruction": "# Changing Fruit\n\nNow that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.\n\n# Do This\n\nUse a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to \"pear\".\n\n_Challenge: Can you also make the fruit stop growing once it turns into a pear?_",
        "CSD U3 Conditionals Apple 2_markdown_instruction": "# Turning Red\n\nNow that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2, you turn it red once it happens.\n\n# Do This\n\nUse a conditional in the draw loop to check whether `apple.scale` is greater than 2 - if it is, set the apples new animation to \"apple_red\".\n\n_Challenge: Can you also make the apple stop growing once it turns red?_",
        "CSD U3 Conditionals Apple 2_2018_markdown_instruction": "# Changing Fruit\n\nNow that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.\n\n# Do This\n\nUse a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to \"pear\".\n\n_Challenge: Can you also make the fruit stop growing once it turns into a pear?_",
        "CSD U3 Conditionals Apple-2018_markdown_instruction": "# More Practice With Booleans\n\nLet's use one more Boolean expression to check the condition of a sprite.  You can use a `console.log` command to check whether its scale is 2 yet.\n\n# Do This\n\n* Add a `console.log` statement.\n* Add a Boolean expression inside the `console.log` that checks whether the `apple.scale` is greater than 2.",
        "CSD U3 Conditionals Apple_markdown_instruction": "# More Practice With Booleans\n\nLet's use one more Boolean expression to check the condition of a sprite.\n\n# Do This\nThere is a growing apple sprite created for you. It starts as green and should turn red when it gets to a scale of 2. We won't worry about making it red yet, let's just use a `console.log` command to check whether it's scale is 2 yet.\n\n* Add a `console.log` statement.\n* Add a Boolean expression inside the `console.log` that checks whether the `apple.scale` is greater than 2.",
        "CSD U3 Conditionals Apple_2018_markdown_instruction": "# More Practice With Booleans\n\nLet's use one more Boolean expression to check the condition of a sprite.  You can use a `console.log` command to check whether its scale is 2 yet.\n\n# Do This\n\n* Add a `console.log` statement.\n* Add a Boolean expression inside the `console.log` that checks whether the `apple.scale` is greater than 2.",
        "CSD U3 Counters assigning an expression_markdown_instruction": "# Assignment and Expressions\n\nYou know that **variables can hold a single value**. You also know that **expressions are always evaluated to a single value**. Why don't we try storing that single value in a variable so that we can use it many times in our programs.\n\n# Do This\n\nThis program generates a random multiple of 10 (10, 20, 30, 40 etc) and stores it in the variable `size`\n\n* **Run the progam** to see how it works\n* **Change the numbers used in the expression on line 3** to see how it affects this simple animation",
        "CSD U3 Counters counter subtraction_markdown_instruction": "# Counting Down\n\nSometimes you won't want to count up, you'll want to count down. You can **subtract** from a variable's value just as easily as you add. ![](https://images.code.org/8b98effa437da54090926c3451af204d-image-1465325587949.52.49 PM.png)\n\n\t// counter pattern, counting down\n    counter = counter - 1;\n\nKeep getting practice using counters to animate, but this time try counting down.\n# Do This\n\nThis program uses the counter pattern with a variable called `xPos`.\n\n* The square currently starts in the center and **goes off the right side** of the screen\n* **Change the program** so that the square **goes off the left side of the screen** instead.\n\n",
        "CSD U3 Counters counters expressions_markdown_instruction": "# Using One Counter Many Times\n\nYou've already seen and used commands like  `x = x + 1` often to update the value of `x`. Sometimes though we want to **do some math with a variable without actually changing that variable's value**. \n\nThis program draws a rectangle **100 pixels to the right of `x` without changing the value of `x`**. Here's the steps your computer goes through to run that second line of code.\n\n![](https://images.code.org/8f33bbb0189c5e1b854c5b1786168225-image-1465503000293.09.49 PM.png)\n\nUsing this pattern allows you to use a single counter to animate multiple objects, as you're about to see.\n\n# Do This\n\nThis program creates a counter variable called `xPos` and uses it to animate 3 rectangles.\n\n* **Run the program** to see what happens.\n* **The red and orange rectangles move across the screen but the yellow one doesn't yet.**\n* **Write code following the pattern shown above** so that the yellow rectangle will move across the screen with the others.\n* **Hint:** How was the orange rectangle made to move?\n\n![](https://images.code.org/822941874e7add509bb80266718efb94-image-1463080462625.gif)",
        "CSD U3 Counters counters sunset night_markdown_instruction": "# Challenge: Nightfall\n\nThink you've got drawing with counters down? Try this challenge.\n\nThe color block can take a 4th input that controls the opacity of the color. You can click the arrows on the side of the color block to expand this 4th input.\n\n![](https://images.code.org/7844f8cb46eade7cec452b7a4d98124b-image-1484964689007.10.08 PM.png)\n\n# Do This\n\nThis is your same sunset animation from before. Can you make the scene slowly change to night?\n\n![](https://images.code.org/b055142110b0d0ed092d6496447aad6e-image-1463079830043.gif)\n\n",
        "CSD U3 Counters explaining counters contained 2_markdown_instruction": "# The Counter Pattern\n\nThis pattern is one of the most important ones in all of programming. \n\n![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56 PM.png)\n    \nIt is used to increase the value of a variable by 1. You might call it the **counter pattern** since it can be used to make a variable that counts up. You'll use this pattern a lot, especially with the draw loop. Let's see what that looks like.\n\n# Do This\n\nThis program creates a variable `counter` and then uses the **counter pattern** to make it count up. When you run the program what do you think you'll see on the screen?\n\n* **Read the program** and make a prediction of what the output will be.\n* **Run the program** to check your prediction.\n* **Discuss with a neighbor**. Can you explain what you observed?\n\n",
        "CSD U3 Counters explaining counters contained 2_2018_markdown_instruction": "# The Counter Pattern\n\nThis pattern is one of the most important ones in all of programming. \n\n![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56 PM.png)\n    \nIt is used to increase the value of a variable by 1. You might call it the **counter pattern** since it can be used to make a variable that counts up. You'll use this pattern a lot, especially with the draw loop. Let's see what that looks like.\n\n# Do This\n\nThis program creates a variable `counter` and then uses the **counter pattern** to make it count up. When you run the program what do you think you'll see on the screen?\n\n* **Read the program** and make a prediction of what the output will be.\n* **Run the program** to check your prediction.\n* **Discuss with a neighbor**. Can you explain what you observed?\n\n",
        "CSD U3 Counters explaining counters_markdown_instruction": "# The Counter Pattern\n\nThis pattern is one of the most important ones in all of programming. \n\n![](https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56 PM.png)\n    \nIt is used to increase the value of a variable by 1. You might call it the **counter pattern** since it can be used to make a variable that counts up. You'll use this pattern a lot, especially with the draw loop. Let's see what that looks like.\n\n# Do This\n\nThis program creates a variable `counter` and then uses the **counter pattern** to make it count up. When you run the program what do you think you'll see on the screen?\n\n* **Read the program** and make a prediction of what the output will be.\n* **Run the program** to check your prediction.\n* **Discuss with a neighbor**. Can you explain what you observed?\n\n",
        "CSD U3 Counters expressions_markdown_instruction": "# Expressions\n\nWe're going to start learning about **expressions** and how to use them in programs. Here are two expressions, a short one and a longer one.\n\n`1 + 2`\n\n`(1000 - 400) / (3 * 20)`\n\nThese expressions have two important components:\n\n* **values:** numbers, text, or information in your program \n* **operators:** commands telling the computer to perform an action with those value `+`, `-`, `*`, `/`\n\nDon't worry if this is a lot of vocabulary all at once. Try using some expressions first to get a feel for how they work.\n\n# Do This: \n\nThis program draws a rectangle using 4 separate expressions. \n\n* **Run the program** to see what happens\n* **Change some of the values and operators in the 4 expressions**. How does it change the rectangle?\n* Move on once you've changed a few expressions. It's fine if your program didn't run properly.",
        "CSD U3 Counters long expressions_markdown_instruction": "# Expressions Evaluate to a Single Value\n\nAs you probably just noticed expressions can be used in places where you might normally use a number. That's because your computer can **evaluate or calculate the single number that is the result of the expression**. When your computer runs the command\n\n`strokeWeight(10 + 20)`\n\nIt will first calculate the value of the expression `10 + 20` to be `30` and use that value to set the strokeWeight. In fact, **every expression will eventually be evaluated to a single value**.\n\n# Do This\n\nThis program uses console.log to show the single value of a couple long expressions.\n\n* **Run the program** to see that the expressions result in a single value\n* **Create and display the results of some expressions of your own**. It doesn't matter what they are, just throw in something long and complex and convince yourself a single value always comes out.",
        "CSD U3 Counters random expressions_markdown_instruction": "# Random Numbers in Expressions\n\nYou can **use random numbers inside of expressions** too. For example, \n\n`10 * randomNumber(1,5)`\n\nis a perfectly valid expression. This is because **`randomNumber` will generate a single random value** that can then be used in the expression just like a number.\n\n# Do This\n\nThis program displays random multiples of 10 between 10 and 50.\n\n* **Run the program** to see how it works\n* **Change the program** so that it displays **random multiples of 10 between 10 and 100**.\n* Change the expression with a random number in it more if you like. Once you're comfortable with how it works move on.",
        "CSD U3 Counters variables as counters_markdown_instruction": "# x = x + 1\n\nThe following line of code **is the most important one to understand in this lesson**.\n\n`x = x + 1;`\n\nTry it out in a program first, then move on to **learn more about what this command is doing**.\n\n# Do This:\n\n* **Read the program to get a sense of how it should run**\n* **Run the program** and observe how it works\n* **Discuss with a neighbor** what you observe and why you think it is happening. Once you've talked, move on.",
        "CSD U3 Counters variables in expressions_markdown_instruction": "# Variables in Expressions\n\nYou just saw that **the result of an expression can be stored in a variable**. Get ready though, because we're about to get even more interesting.\n\n**Variables can be used in expressions**. All of these expressions are valid (assuming the variables have been created):\n\n`age + 1`\n`height / 2`\n`(time * speed) + 100`\n\nIn each case **the variable's value is used when its label appears**.\n\n# Do This\n\nThis program generates a random multiple of 10 (10, 20, 30, 40 etc) and stores it in the variable `size`\n\n* **Run the progam** to see how it works\n* **The variable `size` appears in two expressions on lines 7 and 8.**\n* **Change the values in these expressions** to see how they affect the way your program works",
        "CSD U3 Counters watchers_markdown_instruction": "# Debugging: Watchers\n\nOnce you have multiple counter variables it can become difficult to keep track of how your program is running. **If you want to debug your code, it's useful to be able to see the values of your different variables as they change.**\n\nYou can add a **watcher** to a variable at any time by typing `$watch` followed by the name of your variable into the Debug Console. This example shows how you would create watchers for the variables `x` and `y`. Notice they've now **been added to the \"Watch\" window** to the right.\n\n![](https://images.code.org/c5cddda5572e73e3f082287aa076e4a8-image-1465327628344.25.11 PM.png)\n\nWhile your program is running, the values of `x` and `y` in the \"Watch\" window will update to show their current value.\n\n# Do This\n\nThis program draws a dot that slowly grows in size. You want to know **the value of `size` when the dot totally covers the screen.**\n\n* **Create a watcher** for `size` by running the command `$watch size` in the Debug Console.\n* **Run the program** and observe the value of `size` change in the \"Watch\" window.\n* **Talk to a neighbor**. How large is `size` when the dot covers the whole screen?",
        "CSD U3 Diagonal Movement_markdown_instruction": "<img src=\"https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif\" style=\"float: right; margin-left: 20px;\">\n\n# Diagonal Movement\n\nUpdating only the `x` or `y` properties of a sprite can only make it move straight up and down or left and right. If you want a sprite to move on a diagonal path you'll need to update _both_ of those properties.\n\nThis program currently makes the mouse move straight down the screen - can you update it so that it moves diagonally across the screen like the image to the right?\n\n_Challenge: Can you make the mouse point in the same direction as the image?_",
        "CSD U3 Diagonal Movement_2018_markdown_instruction": "<img src=\"https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif\" style=\"float: right; margin-left: 20px;\">\n\n# Diagonal Movement\n\nUpdating only the `x` or `y` properties of a sprite can only make it move straight up and down or left and right. If you want a sprite to move on a diagonal path you'll need to updated _both_ of those properties.\n\nThis program currently makes the mouse move straight down the screen - can you update it so that it moves diagonally across the screen like the image to the right?\n\n_Challenge: Can you make the mouse point in the same direction as the image?_",
        "CSD U3 Direction Animations-2018_markdown_instruction": "# Changing Images as you Move\nRight now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.\n\n# Do This\nUsing the provided program and images:\n\n- Duplicate your chosen bug image four times.\n- Edit each of your images to point in one of the four directions.\n- Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.",
        "CSD U3 Direction Animations_markdown_instruction": "# Changing Images as you Move\nRight now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.\n\n# Do This\nUsing the provided program and images:\n\n- Duplicate your chosen bug image four times.\n- Edit each of your images to point in one of the four directions.\n- Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.",
        "CSD U3 Direction Animations_2018_markdown_instruction": "# Changing Images as you Move\nRight now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.\n\n# Do This\nUsing the provided program and images:\n\n- Duplicate your chosen bug image four times.\n- Edit each of your images to point in one of the four directions.\n- Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.",
        "CSD U3 Direction Arrows-2018_markdown_instruction": "# Move in All Directions\nOnce you've got your sprite moving in one direction by responding to a `keyDown`, getting it to move in all four directions should be more of the same. The basic keyboard control that you're developing here will become the basis for many of the games you make down the road.\n\n# Do This\nThe bug sprite you made that responds to the right arrow has been brought to this level. Add the interaction for the other three arrow keys!\n\n- Add three if statements - one for each arrow.\n- Each if statement should move the sprite in the direction of the arrow.\n\n_HINT: Make sure you consider both the axis (x or y) of movement, **and** whether you need to increase or decrease that value._",
        "CSD U3 Direction Arrows_markdown_instruction": "# Move in All Directions\nOnce you've got your sprite moving in one direction by responding to a `keyDown`, getting it to move in all four directions should be more of the same. The basic keyboard control that you're developing here will become the basis for many of the games you make down the road.\n\n# Do This\nThe bug sprite you made that responds to the up arrow has been brought to this level. Add the interaction for the other three arrow keys!\n\n- Add three if statements - one for each arrow.\n- Each if statement should move the sprite in the direction of the arrow.\n\n_HINT: Make sure you consider both the axis (x or y) of movement, **and** whether you need to increase or decrease that value._",
        "CSD U3 Direction Arrows_2018_markdown_instruction": "# Move in All Directions\nOnce you've got your sprite moving in one direction by responding to a `keyDown`, getting it to move in all four directions should be more of the same. The basic keyboard control that you're developing here will become the basis for many of the games you make down the road.\n\n# Do This\nThe bug sprite you made that responds to the right arrow has been brought to this level. Add the interaction for the other three arrow keys!\n\n- Add three if statements - one for each arrow.\n- Each if statement should move the sprite in the direction of the arrow.\n\n_HINT: Make sure you consider both the axis (x or y) of movement, **and** whether you need to increase or decrease that value._",
        "CSD U3 Draw Loop Discuss_markdown_instruction": "# Draw()ing\nHere's a program that looks pretty similar to what you've been writing, but may behave quite differently. You'll want to **stop and discuss** with the class before moving on.\n\n# Do This Together\nYou will **not write any code** in this level, and you should be working as a whole class.\n* **Read** the provided program together.\n* **Identify** elements that are different than those you have seen before.\n* **Predict** what the provided program will do. **Be specific!**\n* **Run** the program several times and **record** the results.\n* **Discuss with a neighbor.** Was your prediction correct?\n* **Hypothesize** what is happening when this code is run.",
        "CSD U3 Draw Loop Experiment_markdown_instruction": "# Do This\nTry using some of the other shape functions you've learned in the draw loop. What happens when you use `randomNumber()` to generate some of the inputs?\n\n# Challenge\nExperiment with adding code before and after the `draw()` loop. Can you figure out what gets called when?",
        "CSD U3 Draw Loop Plugged orange and green_markdown_instruction": "<img src=\"https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45 PM.png\" style=\"float:right;width:150px\">\n\n# Using the Draw Loop\n\nNow it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.\n\n# Do This\n\n* Add code to this program so that your drawing has orange circles being drawn, too.\n* Move on when your program looks like the picture to the right.",
        "CSD U3 Draw Loop Plugged orange and green_2018_markdown_instruction": "<img src=\"https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45 PM.png\" style=\"float:right;width:150px\">\n\n# Using the Draw Loop\n\nNow it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.\n\n# Do This\n\n* Add code to this program so that your drawing has orange circles being drawn, too.\n* Move on when your program looks like the picture to the right.",
        "CSD U3 Draw Loop Plugged predict 1 embed_markdown_instruction": "# Predict\n\nThis program has some code in the draw loop and some code outside of it. Remember:\n\n* All your code outside the draw loop is run first, one time\n* All your code inside the draw loop is run over and over forever\n\nWhat will this program do? Write your prediction below.",
        "CSD U3 Draw Loop Plugged predict 1_markdown_instruction": "# Draw Loop\n\nHere's an example of the draw loop at work.\n\n# Do this\n* Run the code and see how it works.\n* Discuss with your partner whether this looks like the flip book you saw in the video.  Why or why not?",
        "CSD U3 Draw Loop Plugged predict 1_2018_markdown_instruction": "# Draw Loop\n\nHere's an example of the draw loop at work.\n\n# Do this\n* Run the code and see how it works.\n* Discuss with your partner whether this looks like the flip book you saw in the video.  Why or why not?",
        "CSD U3 Draw Loop Plugged predict 2 embed_markdown_instruction": "# Predict\n\nThis program has one small difference that will make it run a little differently. Again though, remember:\n\n* All your code outside the draw loop is run first, one time\n* All your code inside the draw loop is run over and over forever\n\nWhat will this program do? Write your prediction below.",
        "CSD U3 Draw Loop Plugged predict 2 embed_2018_markdown_instruction": "# Predict\n\nThis program has one small difference that will make it run a little differently. Again though, remember:\n\n* All your code outside the draw loop is run first, one time\n* All your code inside the draw loop is run over and over forever\n\nWhat will this program do? Write your prediction below.",
        "CSD U3 Draw Loop Plugged update your scene_markdown_instruction": "# Extend Your Scene\n\nThis is the sprite scene you made in the last lesson. You'll now be updating it a little bit to use the draw loop and sprite properties.\n\n<img src=\"https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png\" style=\"float:right;height:100px\">\n\n# Do This\n\n* Add a draw loop to your program (you should only have one).\n* Use the lasso selector (click, hold and drag) to select all your code and place it inside your draw loop. Ctrl-Z will let you undo any mistakes you make.\n* Add code to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation` properties so that they move. You'll need to update them with `randomNumber()`.\n",
        "CSD U3 Draw Loop Plugged update your scene_2018_markdown_instruction": "# Extend Your Scene\n\nThis is the sprite scene you made in the last lesson. You'll now be updating it a little bit to use the draw loop and sprite properties.\n\n<img src=\"https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png\" style=\"float:right;height:100px\">\n\n# Do This\n\n* Add a draw loop to your program (you should only have one).\n* Use the lasso selector (click, hold and drag) to select all your code and place it inside your draw loop. Ctrl-Z will let you undo any mistakes you make.\n* Add code to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation` properties so that they move. You'll need to update them with `randomNumber()`.\n",
        "CSD U3 Drawing Squares to Corners_markdown_instruction": "<img src=\"https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12 AM.png\" style=\"float:right;width:150px\">\n\n# Place Squares in Corners\n\nA big part of using Game Lab is understanding position. Remember you can always turn on the grid or hover with the mouse to help find the x and y position you want.\n\n# Do This\n\n* Place two rectangles exactly in the corners of the screen, just like the picture.",
        "CSD U3 Drawing Squares to Corners_2018_markdown_instruction": "<img src=\"https://images.code.org/716209ce879925f89bf661f337946509-image-1529019186051.32.48 PM.png\" style=\"float:right;width:150px\">\n\n# Place Squares in Corners\n\nA big part of using Game Lab is understanding position. Remember you can always turn on the grid or hover with the mouse to help find the x and y position you want.\n\n# Do This\n\n* Place two rectangles exactly in the corners of the screen, just like the picture.",
        "CSD U3 Else_markdown_instruction": "# What If My Condition Isn't True?\n\n<img src=\"https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png\" width=\"125px\" style=\"float:right\">\n\nSometimes we want to tell our program what to do if a condition is `true`, but also what to do if it's `false`. Pressing the plus button at the bottom of your conditional block will give you another section called `else`. This `else` section is a fallback - it will get called whenever the condition in the `if` before it is `false`.\n\n# Do This\nThe gears are back again. The last time you worked with them, you made them spin when the space bar is pressed. Instead of the gears only spinning when the space key is pressed, we want them to spin one way when the space key is pressed and spin the other way when it's not pressed.\n<img src=\"https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif\" style=\"float:right\">\n\n* Click the _plus_ button at the bottom of the if block to add an else.\n* Add commands to make the gears spin opposite of the direction that they do when the space bar is pressed.",
        "CSD U3 Else_2018_markdown_instruction": "# What If My Condition Isn't True?\n\n<img src=\"https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png\" width=\"125px\" style=\"float:right\">\n\nSometimes we want to tell our program what to do if a condition is `true`, but also what to do if it's `false`. Pressing the plus button at the bottom of your conditional block will give you another section called `else`. This `else` section will be run whenever the condition in the `if` before it is `false`.\n\n# Do This\nThe gears are back again. The last time you worked with them, you made them spin when the space bar is pressed. Instead of the gears only spinning when the space key is pressed, we want them to spin one way when the space key is pressed and spin the other way when it's not pressed.\n<img src=\"https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif\" style=\"float:right\">\n\n* Click the _plus_ button at the bottom of the if block to add an else.\n* Add commands to make the gears spin opposite of the direction that they do when the space bar is pressed.",
        "CSD U3 Entertainment Sample 1 - unembed_markdown_instruction": "# Alien Jumper\n\nPress \"Run\" to play the game on the left.  You can make the alien jump with the space bar, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.",
        "CSD U3 Entertainment Sample 1_markdown_instruction": "# Alien Jumper\n\nPress \"Run\" to play the game on the left.  You can make the alien jump with the space bar, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.",
        "CSD U3 Entertainment Sample 1_2018_markdown_instruction": "# Alien Jumper\n\nPress \"Run\" to play the game on the left.  You can make the alien jump with the space bar, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.",
        "CSD U3 Entertainment Sample 2_markdown_instruction": "# Hungry Bunny\n\nThe bunny is hungry, and it's looking for mushrooms and carrots for dinner.\n\nTo win, you'll need to find a dinner bowl, then collect at least ten carrots and five mushrooms.\n\nMake sure to avoid the bugs.  Ladybugs and snails will eat your food, and bees will sting you, making you drop everything!\n\nUse the space bar to jump.  You can squash ladybugs and snails by jumping on them.\n\nClick \"Run\" to start the program.",
        "CSD U3 Entertainment Sample 2_2018_markdown_instruction": "# Hungry Bunny\n\nThe bunny is hungry, and it's looking for mushrooms and carrots for dinner.\n\nTo win, you'll need to find a dinner bowl, then collect at least ten carrots and five mushrooms.\n\nMake sure to avoid the bugs.  Ladybugs and snails will eat your food, and bees will sting you, making you drop everything!\n\nUse the space bar to jump.  You can squash ladybugs and snails by jumping on them.\n\nClick \"Run\" to start the program.",
        "CSD U3 Entertainment Sample 3_markdown_instruction": "# Animated Comics\n\nCombining images, text, and some subtle animation can make for really interesting comics or graphic stories.  Click \"Run\" to see an example.\n",
        "CSD U3 Entertainment Sample 3_2018_markdown_instruction": "# Animated Comics\n\nCombining images, text, and some subtle animation can make for really interesting comics or graphic stories.  Click \"Run\" to see an example.\n",
        "CSD U3 Entertainment Sample 4_markdown_instruction": "# Stamp Pad\n\nClick \"Run\" to start the program, then use the stamp pad to draw pictures with simple colors and animal stamps.\n",
        "CSD U3 Entertainment Sample 4_2018_markdown_instruction": "# Stamp Pad\n\nClick \"Run\" to start the program, then use the stamp pad to draw pictures with simple colors and animal stamps.\n",
        "CSD U3 Expressions calculator_markdown_instruction": "# Adding and Multiplying\n\nYour computer can calculate the results of many math problems. Try out this example, where we add and multiply a few numbers. Then extend it yourself to the numbers 1 - 10.\n\n# Do This\n\n* Run the program code once to see how it works\n* Following the examples, write a program that **multiplys the numbers 1 - 10** and **adds the numbers 1 - 10**\n* **When you're done confirm your results with a neighbor**",
        "CSD U3 Frame Rate_markdown_instruction": "# Too Fast, Slow Down!\n<img src=\"https://images.code.org/f249b981ead9d196b0f136c402dd0c41-image-1478803334302.gif\" style=\"float:right; width:200px\"/>\n\nThe animation is working, but it's a bit too fast. We're flipping the pages in our virtual flipbook too often, so we'll need to slow that down.\n\nThe frequency that our draw loop is run is called the **frame rate** - the number of times per second the screen is refreshed.\n\nThe default frame rate for Game Lab is 30 frames per second (or FPS), which is great for a video game, but not so good for our animation. We can slow down the frame rate using the `World.frameRate` block.\n\n# Do This\n\n* Use the `World.frameRate` block at the very beginning of your program, setting it to a number (frames per second) that slows the animation down a bit. \n* Test it out with different numbers to see which frame rate you like (the default is 30, and it can't go any higher than 60).",
        "CSD U3 Functions Add Change Background tmp_markdown_instruction": "# Change the Background with the Score\n\nOnce you've caught 10 coins it's time to celebrate. You should change the background to be something fun.\n\n<img src=\"https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54 PM.png\" style=\"float:right; height:100px\">\n\n# Do This\n\n* Use an **if-statement** and two separate functions to draw your backgrounds\n* Then go write your functions outside your draw loop. You get to decide what a \"simple\" or \"crazy\" background are. Have fun with it!",
        "CSD U3 Functions Add Change Background_markdown_instruction": "# Change the Background with the Score\n\nOnce you've caught 10 coins it's time to celebrate. You should change the background to be something fun.\n\n<img src=\"https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54 PM.png\" style=\"float:right; height:100px\">\n\n# Do This\n\n* Use an **if-statement** and two separate functions to draw your backgrounds.\n* Then go write your functions outside your draw loop. You get to decide what a \"simple\" or \"crazy\" background are. Have fun with it!",
        "CSD U3 Functions Add Change Background_2018_markdown_instruction": "# Change the Background with the Score\n\nOnce you've caught 10 coins it's time to celebrate. You should change the background to be something fun.\n\n<img src=\"https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54 PM.png\" style=\"float:right; height:100px\">\n\n# Do This\n\n* Use an **if-statement** and two separate functions to draw your backgrounds.\n* Then go write your functions outside your draw loop. You get to decide what a \"simple\" or \"crazy\" background are. Have fun with it!",
        "CSD U3 Functions Add IsTouching_markdown_instruction": "# Catch the Coin, Increase the Score\n\nLet's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.\n\n# Do This\n\n* Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.\n* Make sure you're **calling your function** to reset the coin once it's been caught.\n* Play the game and **randomize the velocity of the coin** to a range that you think is fun.",
        "CSD U3 Functions Add IsTouching_2018_markdown_instruction": "# Catch the Coin, Increase the Score\n\nLet's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.\n\n# Do This\n\n* Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.\n* Make sure you're **calling your function** to reset the coin once it's been caught.\n* Play the game and **randomize the velocity of the coin** to a range that you think is fun.",
        "CSD U3 Functions Call Draw Loop_markdown_instruction": "# Calling Functions in the Draw Loop\n\nYou can call a function inside the draw loop, just as you would anywhere else in your code.\n\n# Do This\n\nA function that will draw a background has been created for you. A sprite has been created to move across the background.\n\n* **Call the function inside the draw loop** so that the sprite appears on top of the background.\n* **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.",
        "CSD U3 Functions Call Draw Loop_2018_markdown_instruction": "# Calling Functions in the Draw Loop\n\nYou can call a function inside the draw loop, just as you would anywhere else in your code.\n\n# Do This\n\nA function that will draw a background has been created for you. A sprite has been created to move across the background.\n\n* **Call the function inside the draw loop** so that the sprite appears on top of the background.\n* **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.",
        "CSD U3 Functions Call Function_markdown_instruction": "# Calling Functions\n\nFunctions let you build your own blocks and decide what code goes inside of them. This is the command that lets you create a new function.\n\n![](https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09 PM.png)\n\nYou use or \"call\" your function like any other block by using the name you gave it.\n\n![](https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00 PM.png)\n\nThe blocks to create and call functions can be found in the \"Functions\" tab of the palette.\n\n![](https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36 PM.png)\n\n# Do This\n\nThis program has already created 2 functions. Only one of them is being called.\n\n* **Call the second function** to reveal the full image. Use the function that is being called as a guide.\n* **Tip:** Just as with all other blocks, spelling and capitalization are important here.",
        "CSD U3 Functions Call Function_2018_markdown_instruction": "# Calling Functions\n\nFunctions let you build your own blocks and decide what code goes inside of them. This is the command that lets you create a new function.\n\n![](https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09 PM.png)\n\nYou use or \"call\" your function like any other block by using the name you gave it.\n\n![](https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00 PM.png)\n\nThe blocks to create and call functions can be found in the \"Functions\" tab of the palette.\n\n![](https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36 PM.png)\n\n# Do This\n\nThis program has already created 2 functions. Only one of them is being called.\n\n* **Call the second function** to reveal the full image. Use the function that is being called as a guide.\n* **Tip:** Just as with all other blocks, spelling and capitalization are important here.",
        "CSD U3 Functions Create Function_markdown_instruction": "# Creating Functions to Organize Code\n\nIn Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.\n\n<img src=\"https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png\" style=\"float:right;width:150px\">\n\n# Do This\n\nThis program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.\n\n* **Write the `drawNight` function** which has been created but is empty.\n* Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?",
        "CSD U3 Functions Create Function_2018_markdown_instruction": "# Creating Functions to Organize Code\n\nIn Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.\n\n<img src=\"https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png\" style=\"float:right;width:150px\">\n\n# Do This\n\nThis program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.\n\n* **Write the `drawNight` function** which has been created but is empty.\n* Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?",
        "CSD U3 Functions Improve Side Scroller_markdown_instruction": "# Finish Your Side Scroller\n\nTime to use functions to finish off you side-scroller!\n\n# Do This\n\n* Change the background of your game depending on the score. Use functions to move the code for your background out of your draw loop\n* Use functions to make sure you're not repeating code when you reset your obstacle\n\n_Challenge: Add another sprite to your game and define how it will interact with your main character. It might be another obstacle to avoid or some kind of goal to collect_",
        "CSD U3 Functions Order Functions_markdown_instruction": "# Reordering Code\n\nPlacing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.\n\n# Do This\n\nThis program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.\n\n* **Read the 4 functions** to know what they do\n* **Call the functions** in an order that draws the scene in the way that looks best to you",
        "CSD U3 Functions Order Functions_2018_markdown_instruction": "# Reordering Code\n\nPlacing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.\n\n# Do This\n\nThis program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.\n\n* **Read the 4 functions** to know what they do\n* **Call the functions** in an order that draws the scene in the way that looks best to you",
        "CSD U3 Functions Prediction Order of Create Call_markdown_instruction": "# When Can Your Define Functions?\n\nSo far you've only seen functions created at the bottom of your code. What do you think happens if we create the function before we call it?\n\n# Do This\n\n",
        "CSD U3 Functions Randomize Sprite_markdown_instruction": "# Making Changes to Functions\n\nA nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.\n\n# Do This\n\nMake changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.",
        "CSD U3 Functions Randomize Sprite_2018_markdown_instruction": "# Making Changes to Functions\n\nA nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.\n\n# Do This\n\nMake changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.",
        "CSD U3 Functions Reset Sprite_markdown_instruction": "# Calling Functions Multiple Times\n\nYou'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.\n\n# Do This\n\nThis code creates a sprite that moves across the screen once. How can you make it go back across the screen?\n\n* **Note:** The function is already called once at the beginning of your program\n* Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?\n* Use this if-statement and the function written for you to make the sprite move across the screen multiple times.",
        "CSD U3 Functions Reset Sprite_2018_markdown_instruction": "# Calling Functions Multiple Times\n\nYou'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.\n\n# Do This\n\nThis code creates a sprite that moves across the screen once. How can you make it go back across the screen?\n\n* **Note:** The function is already called once at the beginning of your program\n* Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?\n* Use this if-statement and the function written for you to make the sprite move across the screen multiple times.",
        "CSD U3 Functions Template Flyman_markdown_instruction": "# Calling Functions Multiple Times\n\nOften times you'll want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.\n\n# Do This\n\nThis code creates a sprite that moves across the screen once. How can you make it go back across the screen.\n\n* Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?\n* Use this if-statement and the function written for you to make the sprite move across the screen multiple times.",
        "CSD U3 Functions Template Flyman_2018_markdown_instruction": "# Calling Functions Multiple Times\n\nOften times you'll want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.\n\n# Do This\n\nThis code creates a sprite that moves across the screen once. How can you make it go back across the screen.\n\n* Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?\n* Use this if-statement and the function written for you to make the sprite move across the screen multiple times.",
        "CSD U3 Functions Write Reset_markdown_instruction": "# Write Your Own Function\n\nTime to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.\n\n# Do This\n\n* **Read and run the code** that already exists to make sure you know how it works.\n* **Write the code for the `setCoin`** function to make the coin fall from the sky.\n* You can go look at some of the previous levels if you need help.",
        "CSD U3 Functions Write Reset_2018_markdown_instruction": "# Write Your Own Function\n\nTime to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.\n\n# Do This\n\n* **Read and run the code** that already exists to make sure you know how it works.\n* **Write the code for the `setCoin`** function to make the coin fall from the sky.\n* You can go look at some of the previous levels if you need help.",
        "CSD U3 Functions Write Your Own_markdown_instruction": "# Write Your Own Function\n\nTry writing your own function to add something to the scene!\n\n# Do This\n\nThis is the same program you wrote in the last level.\n\n* **Create and call** a function that adds something to the scene. No need to get too complex, but make sure you get some practice writing a function\n* **Share your code** with a neighbor. Do they think your function's name clearly describes what it does? Make changes if you need to.",
        "CSD U3 Functions isTouching_markdown_instruction": "# Making Changes to Functions\n\nA nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.\n\n# Do This\n\nMake changes to the `setFlyman` function so that he starts at a random Y location between 0 and 400, and moves at a random speed every time he restarts.",
        "CSD U3 If Else_markdown_instruction": "# When to Provide a Fallback\n\nThe else clause is useful as a fallback to the main condition that you're checking - that is, if you _care_ what happens when your primary condition is `false`, you should provide an else clause to take care of it.\n\n<img src=\"https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif\" style=\"float:right;\">\n\n# Do This\nClick \"Run\" to see the swarm of bees created for you and a flower on the left side of the screen. Make the swarm of bees **appear when the mouse is near the flower** (on the left side of the screen) and **disappear when the mouse is away from the flower** (on the right side of the screen). Look at the example on the right.\n\n* Add an `if else` statement after you update the position of the bees.\n* In the input of the if use a boolean to check if the x position of the mouse is on the side of the screen with the flower.\n* Set the `visible` property of each bee inside both the if and else statements appropriately to make the bees only show near the flower.",
        "CSD U3 If Else_2018_markdown_instruction": "# When to Provide a Fallback\n\nThe else clause is useful as a fallback to the main condition that you're checking - that is, if you _care_ what happens when your primary condition is `false`, you should provide an else clause to take care of it.\n\n<img src=\"https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif\" style=\"float:right;\">\n\n# Do This\nClick \"Run\" to see the swarm of bees created for you and a flower on the left side of the screen. Make the swarm of bees **appear when the mouse is near the flower** (on the left side of the screen) and **disappear when the mouse is away from the flower** (on the right side of the screen). Look at the example on the right.\n\n* Add an `if else` statement after you update the position of the bees.\n* In the input of the if use a boolean to check if the x position of the mouse is on the side of the screen with the flower.\n* Set the `visible` property of each bee inside both the if and else statements appropriately to make the bees only show near the flower.",
        "CSD U3 Input Fish_markdown_instruction": "# Fish With Arrows\n\nThe fish are back. Can you make the fish move left only when the left arrow key is pressed down?\n\n# Do This\n\n* Add an if statement to check when the left arrow key is pressed down.\n* Move the commands for moving the fish inside the if statement.",
        "CSD U3 Input Fish_2018_markdown_instruction": "# Fish With Arrows\n\nThe fish are back. Can you make the fish move left only when the left arrow key is pressed down?\n\n# Do This\n\n* Add an if statement to check when the left arrow key is pressed down.\n* Move the commands for moving the fish inside the if statement.",
        "CSD U3 Input Gears_markdown_instruction": "# Gears with Conditionals\n\nLet's make the gears spin only when the space key is being held down.\n\n# Do This\n\n* Add an `if` statement.\n* Use `keyDown` as input to the if statement to check when the space key is pressed.\n* Move the code that makes the gears rotate inside the `if`.",
        "CSD U3 Input Gears_2018_markdown_instruction": "# Gears with Conditionals\n\nLet's make the gears spin only when the space key is being held down.\n\n# Do This\n\n* Add an `if` statement.\n* Use `keyDown` as input to the if statement to check when the space key is pressed.\n* Move the code that makes the gears rotate inside the `if`.",
        "CSD U3 Interactive Card Background_markdown_instruction": "# Laying Out Your Background\nBefore beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!\n\n# Do This\nRefer to your planning activity sheet to help you lay out the shapes that will become the background to your card.\n\n* First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.\n* Next, layer each additional drawing block in the order you want them to appear in the stack.\n* Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.\n\n**Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?",
        "CSD U3 Interactive Card Background_2018_markdown_instruction": "# Laying Out Your Background\nBefore beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!\n\n# Do This\nRefer to your planning activity sheet to help you lay out the shapes that will become the background to your card.\n\n* First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.\n* Next, layer each additional drawing block in the order you want them to appear in the stack.\n* Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.\n\n**Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?",
        "CSD U3 Interactive Card Final_markdown_instruction": "# Finishing Touches\nNow's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.\n\n# Do This\nConsider adding any of the following to finish up your card:\n\n* Text\n* Additional images for your sprites\n* Subtle animation in the background\n* Sound effects  (Can you figure out now to do this?)\n* More ways for a user to interact with your card",
        "CSD U3 Interactive Card Final_2018_markdown_instruction": "# Finishing Touches\nNow's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.\n\n# Do This\nConsider adding any of the following to finish up your card:\n\n* Text\n* Additional images for your sprites\n* Subtle animation in the background\n* Sound effects  (Can you figure out now to do this?)\n* More ways for a user to interact with your card",
        "CSD U3 Interactive Card Other Conditionals_markdown_instruction": "# Other Conditionals\nThe _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.\n\n# Do This\nFor each of the remaining items on your interactions table:\n\n* Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.\n* Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).\n* Add the necessary actions inside the `if` block.\n\n**Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?",
        "CSD U3 Interactive Card Other Conditionals_2018_markdown_instruction": "# Other Conditionals\nThe _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.\n\n# Do This\nFor each of the remaining items on your interactions table:\n\n* Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.\n* Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).\n* Add the necessary actions inside the `if` block.\n\n**Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?",
        "CSD U3 Interactive Card Sprites_markdown_instruction": "# Adding Sprites\nNow that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.\n\n# Do This\nCheck out the Sprites table on the back of your planning sheet. For each Sprite in your table:\n\n* Initialize the Sprite at the top of your program with `createSprite()`.\n* Find or create the image(s) for the Sprite and set it with `setAnimation()`.\n* Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).",
        "CSD U3 Interactive Card Sprites_2018_markdown_instruction": "# Adding Sprites\nNow that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.\n\n# Do This\nCheck out the Sprites table on the back of your planning sheet. For each Sprite in your table:\n\n* Initialize the Sprite at the top of your program with `createSprite()`.\n* Find or create the image(s) for the Sprite and set it with `setAnimation()`.\n* Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).",
        "CSD U3 Interactive Card User Input_markdown_instruction": "# User Input\nYou've got a background, you've got Sprites, now it's time to give your user something to do!\n\n# Do This\nOn the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:\n\n* Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.\n* Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).\n* Add the necessary actions inside the `if` block.\n\n**Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?",
        "CSD U3 Interactive Card User Input_2018_markdown_instruction": "# User Input\nYou've got a background, you've got Sprites, now it's time to give your user something to do!\n\n# Do This\nOn the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:\n\n* Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.\n* Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).\n* Add the necessary actions inside the `if` block.\n\n**Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?",
        "CSD U3 Keyboard Input Challenge-2018_markdown_instruction": "# Challenge\n_Check with your teacher before trying this challenge._\n\nHere's the bug program you've been working on for the past few levels. Choose one or more of following challenges, or add new features of your own!\n\n* Use the \"space\" key to control another property of your bug sprite, such as rotation or scale.\n* Add some randomization to your movement.\n* Add a second sprite and control it with a different set of keys (\"w\", \"a\", \"s\", and \"d\" are common choices).\n* Add some shapes to your background to make the scene more interesting.",
        "CSD U3 Keyboard Input Challenge_markdown_instruction": "# Challenge\n_Check with your teacher before trying this challenge._\n\nHere's the bug program you've been working on for the past few levels. Choose one or more of following challenges, or add new features of your own!\n\n* Use the \"space\" key to control another property of your bug sprite, such as rotation or scale.\n* Add some randomization to your movement.\n* Add a second sprite and control it with a different set of keys (\"w\", \"a\", \"s\", and \"d\" are common choices).\n* Add some shapes to your background to make the scene more interesting.",
        "CSD U3 Keyboard Input Challenge_2018_markdown_instruction": "# Challenge\n_Check with your teacher before trying this challenge._\n\nHere's the bug program you've been working on for the past few levels. Choose one or more of following challenges, or add new features of your own!\n\n* Use the \"space\" key to control another property of your bug sprite, such as rotation or scale.\n* Add some randomization to your movement.\n* Add a second sprite and control it with a different set of keys (\"w\", \"a\", \"s\", and \"d\" are common choices).\n* Add some shapes to your background to make the scene more interesting.\n",
        "CSD U3 Keypress Boolean Predict_markdown_instruction": "# Make a Prediction: keyDown()\nThe `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can figure out how the `keyDown()` block works.\n\nWhat do you think will happen when you run the program and press the \"up\" arrow? Write your prediction below and then run the program to see if your prediction was accurate.",
        "CSD U3 Keypress Boolean embed-2018_markdown_instruction": "# Prediction - keyDown()\n\nThe `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.\n\n# Do This\n* Read the program carefully.\n* **Make a prediction about how the code will run** and write it in the box below. Be specific!\n* Run the program.\n* While the program is running, press the space bar on your keyboard.\n* Were you correct? Were you surprised? Discuss with a classmate.",
        "CSD U3 Keypress Boolean embed_markdown_instruction": "# Prediction - keyDown()\n\nThe `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.\n\n# Do This\n* Read the program carefully.\n* **Make a prediction about how the code will run** and write it in the box below. Be specific!\n* Run the program.\n* While the program is running, press the up arrow on your keyboard.\n* Were you correct? Were you surprised? Discuss with a classmate.",
        "CSD U3 Keypress Boolean embed_2018_markdown_instruction": "# Prediction - keyDown()\n\nThe `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.\n\n# Do This\n* Read the program carefully.\n* **Make a prediction about how the code will run** and write it in the box below. Be specific!\n* Run the program.\n* While the program is running, press the space bar on your keyboard.\n* Were you correct? Were you surprised? Discuss with a classmate.",
        "CSD U3 Keypress Boolean_markdown_instruction": "# Prediction - keyDown()\n\nThe `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.\n\n# Do This\n* Read the program carefully.\n* **Make a prediction about how the code will run** and write it in the box below. Be specific!\n* Run the program.\n* While the program is running, press the up arrow on your keyboard.\n* Were you correct? Were you surprised? Discuss with a classmate.",
        "CSD U3 Keypress Watchers Predict_markdown_instruction": "# Make a Prediction: User Input\n\nSo far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.\n\nRead the program and predict below what will happen when you press each of the up, down, left, and right arrows.\n\nAfter making your prediction, run the code and write down or share with your neighbor your observations.\n\n* What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?\n* What do you think the exclamation mark (`!`) on line 10 does?\n* How might you use the different keypress blocks in a game?",
        "CSD U3 Keypress Watchers Predict_2018_markdown_instruction": "# Make a Prediction: User Input\n\nSo far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.\n\nRead the program and predict below what will happen when you press each of the up, down, left, and right arrows.\n\nAfter making your prediction, run the code and write down or share with your neighbor your observations.\n\n* What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?\n* What do you think the exclamation mark (`!`) on line 10 does?\n* How might you use the different keypress blocks in a game?",
        "CSD U3 L11 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n",
        "CSD U3 L11 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n",
        "CSD U3 L12 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "CSD U3 L12 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "CSD U3 L13 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "CSD U3 L13 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "CSD U3 L15 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "CSD U3 L15 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "CSD U3 L16 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "CSD U3 L16 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "CSD U3 L17 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n",
        "CSD U3 L17 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n",
        "CSD U3 L18 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n",
        "CSD U3 L18 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n",
        "CSD U3 L19 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n\n",
        "CSD U3 L19 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n\n",
        "CSD U3 L3 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n\n\n\n",
        "CSD U3 L3 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n",
        "CSD U3 L4 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n\n\n\n",
        "CSD U3 L4 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n\n\n\n",
        "CSD U3 L5 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n\n\n\n",
        "CSD U3 L5 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n\n\n\n",
        "CSD U3 L6 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n",
        "CSD U3 L6 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.\n",
        "CSD U3 L7 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "CSD U3 L7 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "CSD U3 L9 Freeplay_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "CSD U3 L9 Freeplay_2018_markdown_instruction": "# Free Play\n\nUse what you've learned to create whatever you like.  When you're finished, you can click  ![](https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png)  to send your creation to a friend, or ![](https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png) to send it to your Projects Gallery.",
        "CSD U3 Movement Fish challenge_2018_markdown_instruction": "# More fish!\n\nThis time, try updating the the rotation of each fish as it moves to make it look even more like it is swimming.  You can also try adding extra features, such as bubbles that rise up through the water.",
        "CSD U3 Movement Fish_markdown_instruction": "<img src=\"https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif\" style=\"float: right; margin-left: 20px;\">\n\n# Fish Animation\n\nUsing the counter pattern, make all three of the fish move in the image to the left. The blue fish should move the fastest, followed by the orange fish, with the green fish being the slowest.",
        "CSD U3 Movement Fish_2018_markdown_instruction": "<img src=\"https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif\" style=\"float: right; margin-left: 20px;\">\n\n# Fish Animation\n\nUsing the counter pattern, make all three of the fish move as in the image to the right. The blue fish should move the fastest, and the green fish should move the slowest.",
        "CSD U3 Movement Gears_markdown_instruction": "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\" style=\"width:200px; float:right; margin-left: 20px;\">\n\n# Rotation Direction\n\nWhen you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!\n\n# Do This\n\nThere are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.\n\n* Make the gears rotate so they look like they are working as one system.\n* **Hint: They won't all rotate the same direction**.",
        "CSD U3 Movement Gears_2018_markdown_instruction": "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\" style=\"width:200px; float:right; margin-left: 20px;\">\n\n# Rotation Direction\n\nWhen you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!\n\n# Do This\n\nThere are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.\n\n* Make the gears rotate so they look like they are working as one system.\n* **Hint: They won't all rotate the same direction**.",
        "CSD U3 Movement Your Own 1_markdown_instruction": "# Make an animation of your own\n\nUsing the counter pattern and sprite properties, make an animation all your own. You might consider building on the static images you've made in the past, or come up with a new image to create or story to tell.\n\n# Do This\n\nTo start, let's just get a static scene set up.\n\n* Add images in the Animation Tab.\n* Create sprites and assign images.\n* Set up the draw loop to draw a background and your sprites.",
        "CSD U3 Movement Your Own 1_2018_markdown_instruction": "# Make an animation of your own\n\nUsing the counter pattern and sprite properties, make an animation all your own. You might consider building on the static images you've made in the past, or come up with a new image to create or story to tell.\n\n# Do This\n\nTo start, let's just get a static scene set up.\n\n* Add images in the Animation Tab.\n* Create sprites and assign images.\n* Set up the draw loop to draw a background and your sprites.",
        "CSD U3 Movement Your Own 2_markdown_instruction": "# Add movement to your animation\n\nWith your static scene set up, you can now add some movement. When you are satisfied with your program, click the \"Submit\" button to turn it in. You can always unsubmit and continue working if you want to add features.\n\n# Do This\n\nIn the draw loop\n\n* Identify which sprite properties to change.\n* Update those properties using the counter pattern.\n\n_Tip: If your counter pattern isn't working like you expect, add watchers to help debug your program._",
        "CSD U3 Movement Your Own 2_2018_markdown_instruction": "# Add movement to your animation\n\nWith your static scene set up, you can now add some movement. When you are satisfied with your program, click the \"Submit\" button to turn it in. You can always unsubmit and continue working if you want to add features.\n\n# Do This\n\nIn the draw loop\n\n* Identify which sprite properties to change.\n* Update those properties using the counter pattern.\n\n_Tip: If your counter pattern isn't working like you expect, add watchers to help debug your program._",
        "CSD U3 Plotting Shapes Shape Lab - unembed_markdown_instruction": "# Drawing Shapes\n\nExplore using this tool that lets you draw different colored shapes. \n\nMake sure you hit \"Run\" and try out turning on the grid to help you place shapes precisely.\n\n![](https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59 PM.png)",
        "CSD U3 Plotting Shapes Shape Lab Open_markdown_instruction": "# Drawing Shapes\n\nExplore using this tool that lets you draw different colored shapes. \n\nMake sure you hit \"Run\" and try out turning on the grid to help you place shapes precisely.\n\n![](https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59 PM.png)",
        "CSD U3 Plotting Shapes Shape Lab_markdown_instruction": "# Drawing Shapes\n\nExplore using this tool that lets you draw different colored shapes. \n\nMake sure you hit \"Run\" and try out turning on the grid to help you place shapes precisely.\n\n![](https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59 PM.png)",
        "CSD U3 Plotting Shapes Shape Lab_2018_markdown_instruction": "# Drawing Shapes\n\nExplore using this tool that lets you draw different colored shapes. \n\nMake sure you hit \"Run\" and try out turning on the grid to help you place shapes precisely.\n\n![](https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59 PM.png)",
        "CSD U3 Property Conditional_markdown_instruction": "# Doing More With Conditionals\nUsing conditionals to figure out which key was pressed is pretty useful, but we can also use conditionals with any value in our program, including sprite properties!\n\nWith your neighbor, discuss the kinds of boolean questions you could use with the following sprite properties:\n\n- `sprite.x` and `sprite.y`\n- `sprite.width` and `sprite.height`\n- `sprite.shapeColor`\n- `sprite.visibility`\n\n# Do This\nHere's a program similar to one you just made, it uses `keyDown()` to move the sprite around the screen when you click the arrow keys. You're going to add some additional conditionals to this program to do the following:\n\n- Change the color of the sprite if it goes into the top quarter of the screen\n- Rotate the sprite if it goes into the left quarter of the screen\n- Make the sprite invisible if it goes into the bottom quarter of the screen\n- Make the sprite larger if it goes into the right quarter of the screen\n\n_BTW, if you're looking for the `keyDown()` block, you'll notice that it's now in the 'Game Lab' category._ \n",
        "CSD U3 Random Add a Door_markdown_instruction": "<img src=\"https://images.code.org/fd746a708d8a94ad0aad863f3284a1ad-image-1490826372819.25.25 PM.png\" style=\"float:right;height:150px\">\n\n# Do This\n\n* Write code that makes a red rectangle that is taller than the one already in the drawing.\n* Don't worry about the exact dimensions as long as your new rectangle is taller.",
        "CSD U3 Random Choice_markdown_instruction": "# Making Random Choices\n\nYou probably noticed that the code from the last puzzle did a few things.\n* Always produced a whole number (also called an **integer**).\n* The lowest number that could be produced was 0, which is the first **input** we passed to the `randomNumber` block.\n* The highest number that could be produced was 10, which is the second **input** to the block.\n\nLet's create a program that can randomly make decisions for us. We'll use a **binary** representation where `0` means `false` and `1` means `true`.\n\n# Do This\n\n* Write a program that randomly writes out either 0 or 1 using `console.log()`.\n* Have your partner ask some true/false or yes/no questions and use your program to randomly answer.",
        "CSD U3 Random Color_markdown_instruction": "# Randomized Colors\n\nCould you use `randomNumber()` to pick random colors as well? Back in Unit 2 you learned that colors can be composed of Red, Green, and Blue channel values - each of which is represented by a number value. What's the maximum and minimum that those channels can be set to?\n\n# Do This\n\nUsing the `color()` function, set the `fill` or `stroke` of your shape to a random color.\n\n# Challenge\n\nCan you generate random colors that are limited to a narrow range of colors, such as a random shade or purple, or a random shade of teal?",
        "CSD U3 Random Debug Cloud-2018_markdown_instruction": "<img src=\"https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png\" style=\"float:right;height:150px\">\n\n# Debug - Using 4 Parameters\n\nNow that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.\n\n# Do This\n\n* Debug this program to make the cloud wider than it is tall, like in the image.\n* Hint: You'll need to change two parameters. Which ones set your cloud's width and height?\n\n_Challenge: The sun is not in the exact same place as in the picture.  Can you change the sun's coordinates so that the picture matches completely?_\n",
        "CSD U3 Random Debug Cloud_markdown_instruction": "<img src=\"https://images.code.org/529b7e5ddda4683e6a0cc5b3028e4dbf-image-1490824752133.58.50 PM.png\" style=\"float:right;height:150px\">\n\n# Debug - Using 4 Parameters\n\nNow that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.\n\n# Do This\n\n* Debug this program to make the cloud wider than it is tall, like in the image.\n* Hint: You'll need to change two parameters. Which ones set your cloud's width and height?\n\n_Challenge: The sun is not in the exact same place as in the picture.  Can you change the sun's coordinates so that the picture matches completely?_",
        "CSD U3 Random Debug Cloud_2018_markdown_instruction": "<img src=\"https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png\" style=\"float:right;height:150px\">\n\n# Debug - Using 4 Parameters\n\nNow that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.\n\n# Do This\n\n* Debug this program to make the cloud wider than it is tall, like in the image.\n* Hint: You'll need to change two parameters. Which ones set your cloud's width and height?\n\n",
        "CSD U3 Random Debug Grass_markdown_instruction": "<img src=\"https://images.code.org/83269268e1c4f8af8551253ff4573b43-image-1490825158453.03.45 PM.png\" style=\"float:right;height:150px\">\n\n# Debug - Using 4 Parameters\n\nThis program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.\n\n# Do This\n\n* Debug this program and correct the error so that the grass extends across the entire bottom.\n* Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?",
        "CSD U3 Random Debug Grass_2018_markdown_instruction": "<img src=\"https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png\" style=\"float:right;height:150px\">\n\n# Debug - Using 4 Parameters\n\nThis program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.\n\n# Do This\n\n* Debug this program and correct the error so that the grass extends across the entire bottom.\n* Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?",
        "CSD U3 Random Ellipse Behind-2018_markdown_instruction": "<img src=\"https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png\" style=\"float:right;height:150px\">\n\n# Do This\n\n* Write code that makes an orange ellipse behind the green one.\n* Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.",
        "CSD U3 Random Ellipse Behind_markdown_instruction": "<img src=\"https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10 PM.png\" style=\"float:right;height:150px\">\n\n# Do This\n\n* Write code that makes an orange ellipse behind the green one.\n* Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.",
        "CSD U3 Random Ellipse Behind_2018_markdown_instruction": "<img src=\"https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png\" style=\"float:right;height:150px\">\n\n# Do This\n\n* Write code that makes an orange ellipse behind the green one.\n* Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.",
        "CSD U3 Random FreeResponse_markdown_instruction": "# Randomness\n\nSometimes you will want your programs to run a bit differently every time, and a simple way to do this is to generate **random numbers**. The `randomNumber()` block allows you to write programs with a little bit of randomization in them, which is also helpful when you you want images that look more natural - for example drawing a lots of stars in the sky in random positions, instead of selecting the x and y for each star.\n\n# console.log() \nThe `console.log()` block is a useful tool for testing and debugging - anything that you place into `console.log()` block's input will be printed to the debug console, which you can find below your code.\n\n# Do This\n\nYou will **not write any code** in this level.\n\n* Read the program provided\n* **Predict** what the provided program will do and write your prediction in the box below. **Be specific!**\n* Run the program several times and **record** the results.\n* **Discuss the results with a neighbor**. Was your prediction correct?",
        "CSD U3 Random Intro_markdown_instruction": "# Randomness\n\nSometimes you will want your programs to run a bit differently every time, and a simple way to do this is to generate **random numbers**. The `randomNumber()` block allows you to write programs with a little bit of randomization in them, which is also helpful when you you want images that look more natural - for example drawing a lots of stars in the sky in random positions, instead of selecting the x and y for each star.\n\n# console.log() \nThe `console.log()` block is a useful tool for testing and debugging - anything that you place into `console.log()` block's input will be printed to the debug console, which you can find below your code.\n\n# Do This\n\nYou will **not write any code** in this level.\n\n* Read the program provided\n* **Predict** what the provided program will do. **Be specific!**\n* Run the program several times and **record** the results.\n* **Discuss the results with a neighbor**. Was your prediction correct?",
        "CSD U3 Random Min Max_markdown_instruction": "# Changing the minimum\n\nSo far we've only generated numbers from 0 up to some other value, but what if we wanted a different minimum? For example, if we want to use `randomNumber()` to create circles that have a radius somewhere between 50 and 100 pixels, how might we do it?\n\nThe first input (also called an **argument**) of the `randomNumber()` block defines the lowest number that will be randomly generated. In the previous levels we always used 0, but you could use any integer as the lower bound (even negative numbers!)\n\n# Do This\n\nUsing `console.log()` write a program that randomly returns a number in a range you define. Try coming up with an interesting range of numbers for your program, for example:\n* Randomly generate a month number\n* Randomly generate a temperature below boiling but above freezing\n* Randomly generate a year you were alive in\n\nCan you come up with a range that includes negative numbers? What about both positive and negative ones?",
        "CSD U3 Random Number Map_markdown_instruction": "# Random Numbers\n\n# Using Random Numbers\n\nThe `randomNumber()` block can be used to generate random numbers in your programs. It can be used in the place of a single number and so can make your program run a little differently each time.\n\n![](https://images.code.org/ef48e7f0312a567eca8641f349968c2a-image-1491521271912.27.09 PM.png)\n\n<img src=\"https://images.code.org/246e7ac850015aa830d469b7eeb5f00e-image-1491523022253.50.04 PM.png\" style=\"float:left;width:150px\">\n\n<img src=\"https://images.code.org/01b10dc034475fd5a90bd3c7bd0c51b8-image-1491523025607.50.17 PM.png\" style=\"float:left;width:150px\">\n\n<img src=\"https://images.code.org/0f0c3cc4d42923dc4321809daf189053-image-1491523028093.50.49 PM.png\" style=\"float:left;width:150px\">\n\n`randomNumber()` has two parameters for the minimum and maximum numbers it can choose between. If you want you can make these numbers negative.\n\n# Drawing and Random Numbers\n\nBelow this program you can see three examples of possible output. Notice that even though it's the same program it's a different image every time.\n\nYou can use the `randomNumber()` command multiple times in your programs. Each time it's used a new random number will be generated.\n\n![](https://images.code.org/2c562cef4ef69c163db2b183225ee954-image-1491522524705.48.33 PM.png)",
        "CSD U3 Random Width Height_markdown_instruction": "# Randomized Shapes\n\nLet's see how we can use randomization in our drawings. Each of the inputs from the shape blocks you've seen can be replaced with calls to `randomNumber()`. Try drawing some images that are slightly randomized each time. You might try changing the position randomly by using `randomNumber()` in place of the x or y inputs, or you could change the size of the shape itself by randomizing the length or width inputs.\n\n# Do This\n\nPick a shape command (`ellipse()`, `rect()` or `regularPolygon()`) and use `randomNumber()` in place of one or more of the inputs. Make sure you run it a few times so you can see the effect of randomization.\n\n_Notice that the `console.log()` block is now in the Variables drawer and the `randomNumber()` block is in the Math drawer._",
        "CSD U3 Random background_markdown_instruction": "# Background\n\nSometimes you'll want to fill the entire screen with a color.  For that, you can use `background`.  It covers everything on the screen with the color you choose.\n\n# Do This\n\n* Run the code to see `background` work.\n* Change the background from yellow to orange.\n\n*Challenge: There is a purple square that is covered up by the background.  Can you change the order of the code so you can see both the purple and blue squares?*",
        "CSD U3 Random background2_markdown_instruction": "<img src=\"https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png\" style=\"float:right;height:150px\">\n\n# Background\n\n`background()` will draw on top of everything already in your drawing, so it's important to think about the order of your code.\n\n# Do This\n\n* Use `background()` to make a \"black\" background behind the green circle.",
        "CSD U3 Random background2_2018_markdown_instruction": "<img src=\"https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png\" style=\"float:right;height:150px\">\n\n# Background\n\n`background()` will draw on top of everything already in your drawing, so it's important to think about the order of your code.\n\n# Do This\n\n* Use `background()` to make a \"black\" background behind the green circle.",
        "CSD U3 Random background_2018_markdown_instruction": "# Background\n\nSometimes you'll want to fill the entire screen with a color.  For that, you can use `background`.  It covers everything on the screen with the color you choose.\n\n# Do This\n\n* Run the code to see `background` work.\n* Change the background from yellow to orange.\n\n*Challenge: There is a purple square that is covered up by the background.  Can you change the order of the code so you can see both the purple and blue squares?*",
        "CSD U3 Random rainbow snake-2018_markdown_instruction": "<img src=\"https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png\" style=\"float:right;height:150px\">\n\n# Rainbow Snake\n\nThis program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.\n\n# Do This\n\n* Run the program several times to see how the starter code works.\n* Add at least three new different colored circles to your rainbow snake.\n* Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.\n\n*Challenge: Can you make size of some of the circles random, too?*",
        "CSD U3 Random rainbow snake_markdown_instruction": "<img src=\"https://images.code.org/d1e4780e483ffa510a27e91b2b1f1963-image-1491341267537.26.14 PM.png\" style=\"float:right;height:150px\">\n\n# Rainbow Snake\n\nThis program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.\n\n# Do This\n\n* Run the program several times to see how the starter code works.\n* Add at least three new different colored circles to your rainbow snake.\n* Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.\n\n*Challenge: Can you make size of some of the circles random, too?*",
        "CSD U3 Random rainbow snake_2018_markdown_instruction": "<img src=\"https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png\" style=\"float:right;height:150px\">\n\n# Rainbow Snake\n\nThis program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.\n\n# Do This\n\n* Run the program several times to see how the starter code works.\n* Add at least three new different colored circles to your rainbow snake.\n* Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.\n\n*Challenge: Can you make size of some of the circles random, too?*",
        "CSD U3 Random random ellipse-2018_markdown_instruction": "# Random Numbers\n\n`randomNumber()` chooses a random number between a minimum and maximum value. You can use this code instead of writing in the specific number.  If you make your drawings with random numbers it will look a little bit different every time you run your program.\n\n# Do This\n\n* Run the program several times to see how it works.\n* Change the numbers inside `randomNumber` and run the code again a few times to see what changes.",
        "CSD U3 Random random ellipse_markdown_instruction": "# Random Numbers\n\n`randomNumber()` chooses a random number between a minimum and maximum value. You can use this code instead of writing in the specific number.  If you make your drawings with random numbers it will look a little bit different every time you run your program.\n\n# Do This\n\n* Run the program several times to see how it works.\n* Change the numbers inside `randomNumber` and run the code again a few times to see what changes.",
        "CSD U3 Random random ellipse2-2018_markdown_instruction": "<img src=\"https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png\" style=\"float:right;height:150px\">\n\n# Random Numbers\n\nHere's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.\n\n# Do This\n\n* Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.\n* As long as your circle is appearing at random X and Y positions, you can move on.",
        "CSD U3 Random random ellipse2_markdown_instruction": "<img src=\"https://images.code.org/ff3be801c7e634d49584aac103df292a-image-1491334428729.33.18 PM.png\" style=\"float:right;height:150px\">\n\n# Random Numbers\n\nHere's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.\n\n# Do This\n\n* Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.\n* As long as your circle is appearing at random X and Y positions, you can move on.",
        "CSD U3 Random random ellipse2_2018_markdown_instruction": "<img src=\"https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png\" style=\"float:right;height:150px\">\n\n# Random Numbers\n\nHere's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.\n\n# Do This\n\n* Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.\n* As long as your circle is appearing at random X and Y positions, you can move on.",
        "CSD U3 Random random ellipse_2018_markdown_instruction": "# Random Numbers\n\n`randomNumber()` chooses a random number between a minimum and maximum value. You can use this code instead of writing in the specific number.  If you make your drawings with random numbers it will look a little bit different every time you run your program.\n\n# Do This\n\n* Run the program several times to see how it works.\n* Change the numbers inside `randomNumber` and run the code again a few times to see what changes.",
        "CSD U3 Scene Example-2018_markdown_instruction": "# Sprite Scenes\n\nBy combining shapes, sprites, and text, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.\n\n## Sketch It Out\n\nBefore moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about `text` and how to compose a scene.\n",
        "CSD U3 Scene Example_markdown_instruction": "# Sprite Scenes\n\nBy combining shapes, sprites, and a new block called `text`, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.\n\n## Sketch It Out\n\nBefore moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about `text` and how to compose a scene.\n",
        "CSD U3 Scene Example_2018_markdown_instruction": "# Sprite Scenes\n\nBy combining shapes, sprites, and text, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.\n\n## Sketch It Out\n\nBefore moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about `text` and how to compose a scene.\n",
        "CSD U3 Simple Drawing - Background_markdown_instruction": "# Draw()ing your street image\n\nHere's the street image you started working on in the last lesson. We're going to get it ready to add some animation.\n\nFor the animation to work you'll need to wrap all of your current code in the `draw()` loop, adding a call to `background()` at the top of the loop.\n\n# Do This\n\n* Add a `draw()` block and move all of your current code inside it\n* Replace the rectangle that draws your background with a call to the `background()` block",
        "CSD U3 Simple Drawing - Personal Animation_markdown_instruction": "# Your Own Animation\n\nHere's the drawing you planned and started in the last lesson - let's animate it!\n\n# Do This\n\n* Move all of your code into a `draw()` loop\n* Use `randomNumber()` in the inputs of some of your shapes\n* Set the speed of your animation using the `World.frameRate` block\n",
        "CSD U3 Sprite Movement Left_markdown_instruction": "<img src=\"https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif\" style=\"float: right; margin-left: 20px\">\n\n# Moving to the Left\n\nIf adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?\n\n# Do This\n\nMake your program animate like the image to the right. Update `fly.x` inside the draw loop so that in each frame the fly is drawn a little bit further to the left.\n\n_Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._",
        "CSD U3 Sprite Movement Left_2018_markdown_instruction": "<img src=\"https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif\" style=\"float: right; margin-left: 20px\">\n\n# Moving to the Left\n\nIf adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?\n\n# Do This\n\nMake your program animate like the image to the right. Update `fly.x` inside the draw loop so that in each frame the fly is drawn a little bit further to the left.\n\n_Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._",
        "CSD U3 Sprite Movement Right_markdown_instruction": "<img src=\"https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif\" style=\"float: right; margin-left: 20px\">\n\n# Sprite Movement\n\nUsing the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's `x` or `y` property in the draw loop makes your sprite move just a bit each time it is redrawn.\n\n# Do This\n\nMake your program animate like the image to the right. We've already added a line to update `plane.x` in the draw loop, but it needs to be finished.\n",
        "CSD U3 Sprite Movement Right_2018_markdown_instruction": "<img src=\"https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif\" style=\"float: right; margin-left: 20px\">\n\n# Sprite Movement\n\nUsing the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's `x` or `y` property in the draw loop makes your sprite move just a bit each time it is redrawn.\n\n# Do This\n\nMake your program animate like the image to the right. We've already added a line to update `plane.x` in the draw loop, but it needs to be finished.\n",
        "CSD U3 Sprites Template race_markdown_instruction": "# Putting it All Together\n\nLet's put all of this together in a fun way. We're going to make three sprites \"race\" across the screen by combining the counter pattern, random numbers, and sprite properties.\n\n# Do This\n\n<img src=\"https://images.code.org/2f9214a801a60af226fa604a9b6533f5-image-1466008001402.26.15 AM.png\" style=\"float:right; width:200px\">\n\nTo begin with make three different sprites and put them in a row on the left side of your screen.\n\n* **Create three sprites** and give them labels\n* **Add code to the \"Drawing\" section of the draw loop that draws the background and your sprites**\n* Your animation should look like the example at the right.\n\n",
        "CSD U3 Sprites animating with sprites_markdown_instruction": "# Animating with Sprites\n\n**Sprite properties can be used in the counter pattern too**.\n\n\t// Counter Pattern with variables\n    x = x + 1;\n    \n    // Counter Pattern with sprite properties\n    mySprite.x = mySprite.x + 1\n\nIf you call ![](https://images.code.org/16810be94cc61ea828e0acce5b642468-image-1466009389700.19.16 AM.png) inside the draw loop then you can use this counter pattern to animate sprites as well.\n\n# Do This\n\n<img src=\"https://images.code.org/a34d5c36c98c2d61ce341be59cbcf315-image-1466534169200.gif\" style=\"float:right; width:200px\">\n\n\nThis program creates 2 sprites and then animates one of them to move across the screen using the counter pattern.\n\n* Inside the draw loop **add code that uses the counter pattern to make the orange sprite move across the screen**.\n* Hint: How can you use the counter pattern here? Look at the code for the redSprite if you need help.\n* Your animation should look like the example at the right.",
        "CSD U3 Sprites anitab 1_markdown_instruction": "# Images\n\nOver on the **Animations Tab**, you'll see three images that have been loaded for you. You can get to the animations tab by clicking the **Animation** button above the display area.\n\n<img src=\"https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11 PM.png\" style=\"width:300px;float:right\">\n\nOnce you have created a sprite, you can **use the `sprite.setAnimation()` command to change the look of your sprite from a rectangle to a picture.** All the images you have loaded in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The alien is set up for you as an example.\n\n# Do This\nChange the sprite to your favorite image from the animations tab.\n\n* A sprite that is set to an image has already been created for you.\n* Run the code to see how it works.\n* Change the input to the `setAnimation` command to change the look of the sprite.\n* Try out all the different images.",
        "CSD U3 Sprites anitab 1_2018_markdown_instruction": "# Images\n\nOver on the **Animations Tab**, you'll see three images that have been loaded for you. You can get to the animations tab by clicking the **Animation** button above the display area.\n\n<img src=\"https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11 PM.png\" style=\"width:300px;float:right\">\n\nOnce you have created a sprite, you can **use the `sprite.setAnimation()` command to change the look of your sprite from a rectangle to a picture.** All the images you have loaded in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The alien is set up for you as an example.\n\n# Do This\nChange the sprite to your favorite image from the animations tab.\n\n* A sprite that is set to an image has already been created for you.\n* Run the code to see how it works.\n* Change the input to the `setAnimation` command to change the look of the sprite.\n* Try out all the different images.",
        "CSD U3 Sprites anitab 2_markdown_instruction": "# Upload your own image\n\nYou can also use the Animation tab to upload or draw your own image.\n\n# Do This\nYou are going to make a flying kite. You can search the web for an image or create a new animation from scratch by drawing your own kite.\n\n* Download your kite image. Images with transparent backgrounds work best.\n* Open the animations tab.\n* Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png\" style=\"width:50px\"> and then <img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png\" style=\"width:50px\"> to upload an image.\n* Select the file from your computer.\n* Rename your image so it is easy to remember. To rename it click the text below the image.\n* Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.\n\nDon't worry if your kite image is too big! You'll learn how to fix that in the next level.",
        "CSD U3 Sprites anitab 2_2018_markdown_instruction": "# Upload your own image\n\nYou can also use the Animation tab to upload or draw your own image.\n\n# Do This\nYou are going to make a flying kite. You can search the web for an image or create a new animation from scratch by drawing your own kite.\n\n* Download your kite image. Images with transparent backgrounds work best.\n* Open the animations tab.\n* Click <img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png\" style=\"width:50px\"> and then <img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png\" style=\"width:50px\"> to upload an image.\n* Select the file from your computer.\n* Rename your image so it is easy to remember. To rename it click the text below the image.\n* Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.\n\nDon't worry if your kite image is too big! You'll learn how to fix that in the next level.",
        "CSD U3 Sprites anitab 3_markdown_instruction": "# Resizing with Scale\n\nIn the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`. It lets you change the size of a sprite in relation to its original size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite half as big, while `sprite.scale = 2` makes it twice as big.\n\n# Do This\n\nThe program should already include your newly uploaded image, but it's probably not the _perfect_ size. Use `sprite.scale` to change the size of your `kite` sprite.\n\n_Hint: the order of your code matters! You need to add `sprite.scale` **after** you've created the sprite, but **before** you draw the sprite with `drawSprites()`. For clarity, try to keep all of your sprite code together at the top of your program._",
        "CSD U3 Sprites anitab 3_2018_markdown_instruction": "# Resizing with Scale\n\nIn the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`. It lets you change the size of a sprite in relation to its original size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite half as big, while `sprite.scale = 2` makes it twice as big.\n\n# Do This\n\nThe program should already include your newly uploaded image, but it's probably not the _perfect_ size. Use `sprite.scale` to change the size of your `kite` sprite.\n\n_Hint: the order of your code matters! You need to add `sprite.scale` **after** you've created the sprite, but **before** you draw the sprite with `drawSprites()`. For clarity, try to keep all of your sprite code together at the top of your program._",
        "CSD U3 Sprites anitab 4_markdown_instruction": "# Resizing with Scale\n\nIn the _Sprites_ drawer of the toolbox you'll see a new block called `sprite.scale`. This command let's you change the size of a sprite in relation to its original size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` would make your sprite half as big, while `sprite.scale = 2` would make it twice as big.\n\n# Do This\n\nAt this point the program should include your newly uploaded image, but it's probably not the _perfect_ size. Add a `sprite.scale` block to change the size of your `kite` sprite.\n\n_Hint: the order of your code matters! You need to add `sprite.scale` **after** you've created the sprite, but **before** you draw the sprite with `drawSprites()`. For clarity, try to keep all of your sprite code together at the top of your program._",
        "CSD U3 Sprites debug background_markdown_instruction": "# Debug: Ordering in the Draw Loop\n\nAs you start animating with sprites you'll have more complex code in your draw loop. It's important to stay organized if you don't want your code to be confusing.\n\nHere's the way you should structure your draw loop when animating with sprites:\n\n\tfunction draw(){\n    \t// Draw Background\n        \n    \t// Update Sprite Properties\n        \n        // Draw Animations\n     \n    }\n    \nThis strategy will work for most cases but not all.\n\n# Do This\n\n<img src=\"https://images.code.org/df08c0bb7290e9d255f1cc51be35954d-image-1472665837101.gif\" style=\"float:right; width:200px\">\n\nThis program is supposed to animate a sprite moving across the screen, but **there's a problem that's preventing it from running properly**.\n\n* **Run the program** to see how it works.\n* **Debug the program** to find the error that prevents it from working properly.\n* Your animation should look like the example at the right.\n* Hint: Order matters a lot when drawing.\n",
        "CSD U3 Sprites debug dot notation_markdown_instruction": "# Debugging: Dot Notation\n\n**Dot Notation:** Sprites all have the same properties, which is really useful. It means that once you know the label of a sprite, you know the labels of its properties. All you need to do is combine the name of your sprite and the name of your property with a period or \"dot\" in between. This is also referred to as **dot notation**. For example, a sprite called `bob` will have the properties `bob.x`, `bob.y`, and so on.\n\nWhen using dot notation it's important that **you spell the label of your sprite and your property correctly.** Just like with variables, keep an eye out for:\n\nRule | Example\n---|---\nCorrect capitalization|`sprite.x` is not `sprite.X`\nCorrect spelling|`sprite.y` is not `sprte.y`\nWhether the label you're trying to use actually exists|`sprite.xlocation` does not exist\nThe sprite's label comes before the property's label|`x.sprite` will not work\n\n# Do This\n\n<img src=\"https://images.code.org/5c6019e343bc58650c45f66c3e3c9bc5-image-1466089712070.08.20 AM.png\" style=\"float:right; width:200px\">\n\nThis program tries to use dot notation to change the properties of two sprites. Unfortunately, errors are preventing the program from running correctly.\n\n* **Use dot notation correctly** to fix the errors in this program\n* When your program works correctly, it should draw the image to the right",
        "CSD U3 Sprites debug watchers_markdown_instruction": "# Debug: Watchers\n\nYou can place watchers on a sprite property just like you would a regular variable.\n\n![](https://images.code.org/291b83de4b7d540017df382944474c16-image-1466017776084.09.27 PM.png)\n\n# Do This\n\n<img src=\"https://images.code.org/1a1a724338e983c2124b0e97d43469a2-image-1466024475859.gif\" style=\"float:right; width:200px\">\n\nThis program is supposed to animate a sprite moving across the screen but **there's a problem that's preventing it from running properly**.\n\n* **Run the program** to see how it works.\n* **Add a watcher** if you like to help you check individual properties.\n* **Debug the program** to find the error that prevents it from working properly.\n* Your animation should look like the example at the right.\n* Hint: Read the code carefully. Is there a logical error?",
        "CSD U3 Sprites make template_markdown_instruction": "# Make Your Own Sprite\n\nYou now know how to create a sprite, set its properties with dot notation, and draw sprites using `drawSprites`. It's time to put all these pieces together on your own.\n\n# Do This\n\n<img src=\"https://images.code.org/2f9214a801a60af226fa604a9b6533f5-image-1466008001402.26.15 AM.png\" style=\"float:right; width:200px\">\n\nThis program creates a red sprite in the bottom right hand corner of the screen.\n\n* **Write code** that creates a new separate sprite in the top left corner of the screen.\n* Be careful with your dot notation, and use the code for the first sprite as a guide.\n* Try to make your image look as close as possible to the image at the right.",
        "CSD U3 Sprites make your own sprite_markdown_instruction": "# Make Your Own Sprite\n\nYou now know how to create a sprite, set its properties with dot notation, and draw sprites using `drawSprites`. It's time to put all these pieces together on your own.\n\n# Do This\n\n<img src=\"https://images.code.org/2f9214a801a60af226fa604a9b6533f5-image-1466008001402.26.15 AM.png\" style=\"float:right; width:200px\">\n\nThis program creates a red sprite in the bottom right hand corner of the screen.\n\n* **Write code** that creates a new separate sprite in the top left corner of the screen.\n* Be careful with your dot notation, and use the code for the first sprite as a guide.\n* Try to make your image look as close as possible to the image at the right.",
        "CSD U3 Sprites motivation_markdown_instruction": "# How Many Counter Variables?\n\nYou can use counter variables (`x = x + 1` , `x = x - 1` , `x = x + 0.5`, etc.) to animate a scene. What happens when scenes start to get larger and more complicated? \n\nWatch this animation. With a partner: \n\n* Decide how many counter variables you would need to create this scene\n* Decide what you would name your counter variables\n* **Draw a Labels-Values-Connectors** diagram of your variables at the first frame of this scene. Don't worry about getting the values exactly correct.\n* Share your answer with another group **and be ready to share your ideas with the class**",
        "CSD U3 Sprites race create sprites_markdown_instruction": "# Putting it All Together\n\nLet's put all of this together in a fun way. You're going to make three sprites \"race\" across the screen by combining the counter pattern, random numbers, and sprite properties.\n\n# Do This\n\n<img src=\"https://images.code.org/1ee52eac731176211c286023c87c166a-image-1466021038288.03.29 PM.png\" style=\"float:right; width:200px\">\n\nTo begin with, make three different sprites and put them in a row on the left side of your screen.\n\n* **Create three sprites** and give them labels.\n* **Add code to the \"Draw Background\" section of the draw loop that draws the background**.\n* **Add code to the \"Draw Animations\" section of the draw loop that draws your sprites**.\n* Your picture should look like the example at the right.",
        "CSD U3 Sprites race movement_markdown_instruction": "# Get Those Sprites Moving!\n\nNow that you have three sprites on the screen, it's time to make them \"race\" across the screen. For now, the race will just be a tie, so focus mainly on **making sure your code is organized** and that **you use sprite properties with the counter pattern correctly**.\n\n# Do This\n\n<img src=\"https://images.code.org/a935615480098eb0a8e7723d87b2308c-image-1466021329937.gif\" style=\"float:right; width:200px\">\n\n* **Add code to the \"Update Properties\" section** that makes the sprites move across the screen together.\n* Your animation should look like the example at the right.",
        "CSD U3 Sprites race random_markdown_instruction": "# Random Movement\n\nRight now your race isn't very interesting. Let's make one small change to make it a lot more exciting. Instead of your sprites moving the same amount forward every frame, **they will now move a random amount**. This will make use of what we'll call the **random counter pattern**. Here's what the code might look like.\n\n\t// Random Counter Pattern\n    mySprite.x = mySprite.x + randomNumber(0,2);\n    \nInstead of adding the same amount every time it will move forward by some random amount between 0 and 2.\n\n# Do This\n\n<img src=\"https://images.code.org/accadb669e88a7c2aff8a29b6305da55-image-1466021491106.gif\" style=\"float:right; width:200px\">\n\n* **Use the random counter pattern** to make your sprites move forward by a random amount in each frame.\n* **Run the program** to make sure your sprites now move a random amount. Is your race predictable anymore?\n* Your animation should look similar to the example at the right.",
        "CSD U3 Sprites scene challenge_markdown_instruction": "# Challenge: Extend your scene\n\n_Check with your teacher before starting this challenge._\n\nNow that you've finished your scene, consider adding to it or creating another.",
        "CSD U3 Sprites scene challenge_2018_markdown_instruction": "# Challenge: Extend your scene\n\n_Check with your teacher before starting this challenge._\n\nNow that you've finished your scene, consider adding to it or creating another.",
        "CSD U3 Sprites scene drawing_markdown_instruction": "# Create Your Scene - Drawing\n\nYou're going to start creating a scene of your own. If you haven't already, take a minute to sketch out a picture of your scene (consider using graph paper). Once you have an idea and plan for your scene, start drawing the background.\n\n# Do This\n\n* Use a `background()` command to fill the screen with a color.\n* Add any necessary shape commands to draw the non-sprite elements of your scene.",
        "CSD U3 Sprites scene drawing_2018_markdown_instruction": "# Create Your Scene - Drawing\n\nYou're going to start creating a scene of your own. If you haven't already, take a minute to sketch out a picture of your scene (consider using graph paper). Once you have an idea and plan for your scene, start drawing the background.\n\n# Do This\n\n* Use a `background()` command to fill the screen with a color.\n* Add any necessary shape commands to draw the non-sprite elements of your scene.",
        "CSD U3 Sprites scene sprites_markdown_instruction": "# Create Your Scene - Sprites\n\nWith your background in place, it's time to add your sprites.\n# Do This\n\n* Add or create all of your sprite images in the Animation Tab.\n* Create a variable for each sprite at the top of your program and use `setAnimation()` to assign the images you created in the Animation Tab.\n* Call `drawSprites()` once at the end of your program.\n\n_Hint: You probably want to call `drawSprites()` at the very end of your program so the sprites are on top of your background, but for some designs you may want to call `drawSprites()` earlier so that your sprites are on top of some shapes but below others._",
        "CSD U3 Sprites scene sprites_2018_markdown_instruction": "# Create Your Scene - Sprites\n\nWith your background in place, it's time to add your sprites.\n# Do This\n\n* Add or create all of your sprite images in the Animation Tab.\n* Create a variable for each sprite at the top of your program and use `setAnimation()` to assign the images you created in the Animation Tab.\n* Call `drawSprites()` once at the end of your program.\n\n_Hint: You probably want to call `drawSprites()` at the very end of your program so the sprites are on top of your background, but for some designs you may want to call `drawSprites()` earlier so that your sprites are on top of some shapes but below others._",
        "CSD U3 Sprites scene text_markdown_instruction": "# Create Your Scene - Text\n\nThe final piece of your scene is to add text.\n\n# Do This\n\n* Add a `text()` command for each separate line of text.\n* If necessary, use `fill()` and `textSize()` to change the appearance of your text.\n\n_Hint: Most scenes have the text on top of everything else, which would require your `text()` commands to be the last lines in your program. If, however, you want the text layered in with other elements, you might consider changing the order._",
        "CSD U3 Sprites scene text_2018_markdown_instruction": "# Create Your Scene - Text\n\nThe final piece of your scene is to add text.\n\n# Do This\n\n* Add a `text()` command for each separate line of text.\n* If necessary, use `fill()` and `textSize()` to change the appearance of your text.\n\n_Hint: Most scenes have the text on top of everything else, which would require your `text()` commands to be the last lines in your program. If, however, you want the text layered in with other elements, you might consider changing the order._",
        "CSD U3 Sprites setting properties_markdown_instruction": "# Properties\n\n<img src=\"https://images.code.org/9567c9df55163104ff91df0920457ad3-image-1466047307713.21.28 PM.png\" style=\"float:right\">\n\n**Properties:** When you create a sprite it will automatically be given many special variables called properties. Properties keep track of information about the sprite, which is used when you draw it on the screen. For example, these two properties keep track of a sprite's x and y position on the screen.\n\n**Changing Properties:** Properties are just variables, so you can change their values using `=` just like any other variable. Here's an example of how you might change the `x` property of a sprite called `myFavoriteSprite`.\n\n![](https://images.code.org/6976d707cba95e92369831729cdb7435-image-1466085767357.02.35 AM.png)\n\n<img src=\"https://images.code.org/2743e55cef5da23bf61db1556c88f174-image-1466049906667.04.41 PM.png\" style=\"float:right;width:150px\">\n\n# Do This\n\nThis program creates a new sprite, gives it a label, and then sets its `x` and `y` properties.\n\n* **Read the code**. Notice that the label given to the sprite is used in the sprite's property.\n* **Change the values given to the `x` and `y` properties** to move the sprite to the bottom right corner of the screen.",
        "CSD U3 Sprites sprites vs rects_markdown_instruction": "# Sprites vs. Rectangles\n\nSprites may seem a lot like fancy rectangles right now. In time you'll see that sprites are **much more powerful**. But for now, there's one key difference you need to know about.\n\nSprites have an `x` and a `y` location just like a rectangle. The key difference is that **a sprite's `x` and `y` are in the middle of the sprite, not the top left corner**. \n\n\n# Do This\n\n<img src=\"https://images.code.org/b1b38266c674e43687148a1ec4fd8e82-image-1466007512332.17.59 AM.png\" style=\"float:right; width:200px\">\n\nThis program creates a red sprite and a green rectangle that are the same size and have the same `x` and `y`. **The sprite does not cover the rectangle since its `x` and `y` are at its center**.\n\n* Change the `x` and `y` properties of the sprite so that it entirely covers the green rectangle.\n* When your program works correctly, it should draw the image to the right.",
        "CSD U3 Sprites text_markdown_instruction": "# Adding Text\n\nYou can put text anywhere you'd like on the screen using `text`. Change the displayed text in the provided code, then add a second `text` to write in a different part of the screen.\n\n_Tip: The default text size is pretty small, but you can use the `textSize` block to change that. You can also use `fill` to change the color of your text._",
        "CSD U3 Sprites text_2018_markdown_instruction": "# Adding Text\n\nYou can put text anywhere you'd like on the screen using `text`. Change the displayed text in the provided code, then add a second `text` to write in a different part of the screen.\n\n_Tip: The default text size is pretty small, but you can use the `textSize` block to change that. You can also use `fill` to change the color of your text._",
        "CSD U3 Sprites width height_markdown_instruction": "# Width and Height\n\nWhen you create a sprite, it is automatically set up with all its properties having default values. If you know the names of these properties, you can use dot notation to change them. This will change the way your sprite looks when you draw it.\n\nHere are two new properties:\n\n![](https://images.code.org/158421dbb4f9640ee852d994d2b4a7d6-image-1466006293357.40.26 AM.png)\n\nBy default each sprite starts with a width and height of 100.\n\n# Do This\n\nThis program creates a sprite and sets its `x`, `y`, and `shapeColor` properties.\n\n* Use the new `width` and `height` properties to make the sprite fill up most of the screen.\n* Make sure you're using dot notation correctly.\n* **Note:** If you drag the property block onto a new line it will change to include the `=` command automatically.\n\n![](https://images.code.org/77d0a16f19a2a7b2c2f1f6b88cda17b3-image-1466006474149.41.53 AM.png)",
        "CSD U3 UP_ARROW-2018_markdown_instruction": "# Moving Sprites\n\nYou can change your sprite's position based on key presses in the same way you changed its animations.\n\n# Do This\n\n* Add an `if` statement inside your draw loop.\n* Check whether the right arrow key has been pressed down.\n* Add code inside the conditional to move the sprite right if the right arrow is down.\n\n_Do you need to change sprite's x or y property to move it right?_",
        "CSD U3 UP_ARROW_markdown_instruction": "# Moving Sprites\n\nYou can change your sprite's position based on key presses in the same way you changed its animations.\n\n# Do This\n\nYou have been provided with the start of a bug sprite. You need to pick the bug picture you want to use from the animation tab.\n\n* Set the animation of the sprite to your favorite bug.\n* Add an if statement inside your draw loop.\n* Add a call to keyDown as the input to the if statement to check if the up arrow was pressed.\n* Add code inside the conditional to move the sprite up if the up arrow is down.\n\n_Do you need to change sprite's x or y property to move it up?_\n\n\n\n",
        "CSD U3 UP_ARROW_2018_markdown_instruction": "# Moving Sprites\n\nYou can change your sprite's position based on key presses in the same way you changed its animations.\n\n# Do This\n\n* Add an `if` statement inside your draw loop.\n* Check whether the right arrow key has been pressed down.\n* Add code inside the conditional to move the sprite right if the right arrow is down.\n\n_Do you need to change sprite's x or y property to move it right?_",
        "CSD U3 Variable Arithmetic pt2_markdown_instruction": "# Variable Arithmetic Pt2\n\nAs we saw in the last level, **you can add, subtract, multiply, or divide** your variable **without changing its value**. The only time a variable's value will change is when you use the `=` or **gets** command.\n\nTry another example highlighting another common misconception.\n\n# Do This\n\n* Read the program provided\n* **Predict:** What two numbers will get displayed? Why? **Explain your reasoning to a neighbor**.\n* Run the program. Were you surpised by what happened? **Compare notes with a neighbor**.",
        "CSD U3 Variable Arithmetic_markdown_instruction": "# Variable Arithmetic\n\nYou can use the values stored in a variable to perform **addition, subtraction, multiplication, and division**. Let's have a look at some common misconceptions.\n\n# Do This\n\n* Read the program provided\n* **Predict:** what will displayed when you run the program? Why? **Explain your reasoning to a neighbor**.\n* Run the program. Were you surpised by what happened? **Compare notes with a neighbor**.",
        "CSD U3 Variable Incrementation pt2_markdown_instruction": "# Variable Reassignment\n\nThis example is starting to get a little more complex. Work through it with a partner. Why do you get the output you do?\n\n# Do This\n\n* Read the program provided\n* **Predict:** What two numbers will get displayed? Why? **Explain your reasoning to a neighbor**.\n* Run the program. Were you surpised by what happened? **Compare notes with a neighbor**.",
        "CSD U3 Variable Incrementation_markdown_instruction": "# Variable Incrementation\n\nTo **increment** something means to add something to a value. In programming if you want to increase or increment the value in a variable you need to use the **gets** command to store the new value.\n\nAs you work through this example try to discuss with your partner, **What's the difference between the left side and the right side of the `=` command?**\n\n# Do This\n\n* Read the program provided\n* **Predict:** What two numbers will get displayed? Why? **Explain your reasoning to a neighbor**.\n* Run the program. Were you surpised by what happened? **Compare notes with a neighbor**.",
        "CSD U3 Variables CHALLENGE gamelab gary_markdown_instruction": "# Challenge: Variables and Game Lab Gary\n\n* You've been provided code that draws a simple version of Game Lab Gary\n* **Use variables to animate Gary**. How can you extend them?\n* [[Question that leads towards incrementation]]",
        "CSD U3 Variables Draw Challenge_markdown_instruction": "# Challenge: Draw an Image\n\n_Check with your teacher before tackling this challenge level._\n\nUsing variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils. Once you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together.\n",
        "CSD U3 Variables Draw Challenge_2018_markdown_instruction": "# Challenge: Draw an Image\n\n_Check with your teacher before tackling this challenge level._\n\nUsing variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils. Once you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together.\n",
        "CSD U3 Variables Draw Poppy_markdown_instruction": "# Using a Variable Many Times\n\nThis program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.\n\n# Do This\n\n* Change the number assigned to `petalSize` so the red petals touch one another.\n* Try to find the size that makes the most sense. Compare your answer with someone around you.",
        "CSD U3 Variables Draw Poppy_2018_markdown_instruction": "# Using a Variable Many Times\n\nThis program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.\n\n# Do This\n\n* Change the number assigned to `petalSize` so the red petals touch one another.\n* Try to find the size that makes the most sense. Compare your answer with someone around you.",
        "CSD U3 Variables Initialize_markdown_instruction": "# Using a Variable's Value\n\nThis program creates a variable called `size`. You will need to **assign it a value**. It will then be used to set the size of a square on the screen.\n\n# Do This\n\n* **Assign the variable `size` a value** and run the program to see how its value is used\n* **Change the value** and rerun the program to see how it affects the output of your program.",
        "CSD U3 Variables Intro_markdown_instruction": "# Your first variable\n\nThe `var` command **creates a new variable**. You only need to use it once with each variable you create.\n\n# Do This\n\n* Create a new variable with a **name of your choosing**, as shown in the starter code.",
        "CSD U3 Variables Predict Where X Embed_markdown_instruction": "# Predict\n\nIn which corner of the screen will the circle be drawn?",
        "CSD U3 Variables Predict Where X_markdown_instruction": "# Using Variables\n\nIn this program, the variable `xPosition` is used to store the x-coordinate of the circle.\n\n# Do This\n* Run the program to see how it works.\n* Change the number that is stored into the variable ([Show me where](#triggercallout=code_triggered)) and run the code again.",
        "CSD U3 Variables Predict Where XY Embed_markdown_instruction": "# Predict\n\nIn which corner of the screen will the circle be drawn?\n\n_Hint: Click the \"Show grid\" box to help you find the exact coordinates on the screen._",
        "CSD U3 Variables Predict Where XY Embed_2018_markdown_instruction": "# Predict\n\nIn which corner of the screen will the circle be drawn?\n\n_Hint: Click the \"Show grid\" box to help you find the exact coordinates on the screen._",
        "CSD U3 Variables Predict Where X_2018_markdown_instruction": "# Using Variables\n\nIn this program, the variable `xPosition` is used to store the x-coordinate of the circle.\n\n# Do This\n* Run the program to see how it works.\n* Change the number that is stored into the variable ([Show me where](#triggercallout=code_triggered)) and run the code again.",
        "CSD U3 Variables Random_markdown_instruction": "# Variables random values\n\nYou can use a variable to store a **randomly generated number**.\n\n# Do This\n\n* In the starter code a variable is **initialized with a random number** and then **displayed twice**\n* **Predict:** Will the value displayed change between the two `console.log` statements?\n* Run the program. Was your prediction correct? Were you surprised?\n* **Compare notes with a neighbor**",
        "CSD U3 Variables Reassign Predict_markdown_instruction": "# Make a Prediction\n\nThis program **creates a variable** and then sets its value twice in a row. **What value will be displayed when the console.log() statement runs?**\n\n![](https://images.code.org/0375d4215c5cc4b937c9333390deb81c-image-1460404063955.47.09 PM.png)\n\n**Once you've submitted your answer be prepared to discuss your reasoning with your classmates.**\n",
        "CSD U3 Variables Reassign pt2_markdown_instruction": "# Creating and assigning in one line\n\nYou can use `var` and `=` in a single line to **assign a value to a variable as soon as it is created**, for example: `var size = 10;`\n\n# Do This\n\n* **Create a new variable and assign it a value** in a single line.",
        "CSD U3 Variables Reassign_markdown_instruction": "# Assiging a Variable\n\nVariables **store a single piece of information that can change throughout your program**. The `=` command gives a variable a new value.\n\nYou read the command `size = 10;` as \"size gets the value 10\". You can also say \"size gets 10\".\n\n# Do This\n\n**Use the `=` command** to assign a value to the variable `numberOfDogs`",
        "CSD U3 Variables Square Random Loop_markdown_instruction": "# Random Values and the Draw Loop\n\nIn the last level you should have **made a prediction** about the difference between two programs. They are both available here, with the second one commented out.\n\n# Do This\n\n* Run the first program\n* **Comment out** the first program and **uncomment** the second program\n* Run the second program\n* **Compare what you observed to your prediction. Discuss the results with a neighbor**",
        "CSD U3 Variables Square Random_markdown_instruction": "# Variables and Random Drawing\n\nVariables can be used to **store a randomly generated value** that you want to use many times in your program.\n\n# Do This\n\n* Assign size a **random number between 1 and 200**.\n* **Run the program multiple times**\n* **Discuss with a neighbor:** Can you explain why the program always drawing a square?",
        "CSD U3 Variables Square_markdown_instruction": "# Variables and Drawing\n\nVariables allow you to **use the same value multiple times in your program**. If a value will always be used many times in a program it is really useful to place that value in a variabnle. This lets you **quickly change the same value at many places in your program**. It also can make move obvious **how that value is used**.\n\n# Do This\n\n* Change the value that `size` is initialized to so that the program draws a **larger square**",
        "CSD U3 Variables TEMPLATE square_markdown_instruction": "# Drawing with Variables\n\n**Get excited because you're about to see your first variable used in a program!** This program uses a variable in three separate ways.\n\n* `var size;` Creates a new variable with the label size\n* `size = 50;` Assigns the value 50 to size\n* `rect(200, 200, size, size);` Uses the value in size to draw a rectangle with equal width and height.\n\n# Do This\n\n* Run the program once to see how it works\n* **Change the value assigned to size in line 2** and rerun the program to see what changed.",
        "CSD U3 Variables change circle size_markdown_instruction": "<img src=\"https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png\" style=\"float:right; height:150px\">\n\n# Debug: Using Variables\n\nThis program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.\n\n# Do This\n\n* Change the value assigned to `circleSize` so that the circle takes up the entire screen.",
        "CSD U3 Variables change circle size_2018_markdown_instruction": "<img src=\"https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png\" style=\"float:right; height:150px\">\n\n# Debug: Using Variables\n\nThis program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.\n\n# Do This\n\n* Change the value assigned to `circleSize` so that the circle takes up the entire screen.",
        "CSD U3 Variables create and assign_markdown_instruction": "# Create and Assign\n\nWhen you create a new variable you will often want to assign it a value right away. You can **create and assign a value** to a variable in a single command as shown below.\n\n![](https://images.code.org/2110bcf19415401434a876503ddecab5-image-1462472203840.16.37 PM.png)\n\n# Do This\n\nThis program needs you to **create and assign a value to the variable `size`** in order to draw a square.\n\n* Use the block shown above to create the rectangle and assign it a value in a single line of code.\n\n",
        "CSD U3 Variables draw loop rgb_markdown_instruction": "# Using variables in the draw loop\n\nNow try randomizing the `red`, `green`, and `blue` variables. Try setting their values to random numbers **before the draw loop** or **inside the draw loop** like you did with `x1` and `y1` in the previous level.  \n\n# Do This\n\n* Randomize the values of `red`, `green`, and `blue`, changing some **before the draw loop** and some **inside the draw loop**\n* Find a visual effect you really like and share with a neighbor before moving on",
        "CSD U3 Variables draw loop xy_markdown_instruction": "# Using variables in the draw loop\n\nAs you saw in the last example, **you can update a value repeatedly within the draw loop**. Using this allows you to redraw an image with random changes every time. By storing these random values in a variable you can **use the same random value multiple times**.\n\n# Do This\n\n* Add to the starter code provided so that the variables `x1` and `y1` are updated randomly in the draw loop.\n* Use these values to redraw the ellipses at random locations.",
        "CSD U3 Variables eyeBrows_markdown_instruction": "# Create Your Own\n\nThe pattern you just saw is very common. The steps were:\n\n* **Create** a variable **outside** the draw loop\n* **Assign** the variable a new value **inside** the draw loop\n* **Use** the new value **inside** the draw loop to draw the current frame\n\nLet's see if you can put together everything you've done so far to use this pattern yourself.\n\n# Do This\n\nYou will be adding **eyebrows that move up and down together** to your smiley face.\n\n* **Create** a variable **outside** the draw loop with a good label. Remember this variable will control **the height of the eyebrows**\n* **Assign** your variable a new random value **inside** your draw loop\n* **Use** your value inside the draw loop to create **two new ellipses**. The value in your variable should control the height\n\n**Hints and Tips:**\n\n* The x values of your eyes can help you line up your eyebrows. \n* Don't be afraid to work **iteratively** here (that means try something and keep improving). It's ok to have something not work the first time.\n* Talk with a neighbor if you're having trouble, or go check your work from earlier in the lesson.\n\n![](https://images.code.org/05e5ea214c8ccc37fc8dd4223569602a-image-1462474590368.gif)",
        "CSD U3 Variables random assignment_markdown_instruction": "# Random Assignment\n\nVariables are really helpful when you want to **store a number that you'll use many times in your program**. For example, if you generate a random number you could store it in a variable so that you can use that same random number as many times as you wish, like this.\n\n\tvar randomSize;                     // Create variable randomSize\n    randomSize = randomNumber(10,100);  // randomSize \"gets\" a randomly generated number between 10 and 100\n\n# Do This\n\nThis program **assigns a random number** to `eyeSize` on line 1. It's already being used to change the size of one of the eyes on the smiley face, but not the other. **Can you get both eyes to always be the same random size?**\n\n* **Run the program** to see how it works\n* **Change the program** so that both eyes are always the same random size. Check line 12 if you need some help.\n\nNote: Read the documentation about the `arc` command if you want to know more about how the mouth on the smiley was made.",
        "CSD U3 Variables random drawing exemplar_markdown_instruction": "# Exemplar: Random Drawing\n\nTo practice using **variables with the draw loop** you will be building your own **randomized art project**. Check out the exemplar to see one possible outcome. Then move on to get started building your own.",
        "CSD U3 Variables random with assignment_markdown_instruction": "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\" style=\"float:right;height:150px\">\n\n# Debug: Variables and Random Numbers\n\nVariables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.\n\n# Do This\n\n`eyeSize` is assigned a random number. Unfortunately only one of the eyes is currently using it.\n\n* **Run the program** to see how it works.\n* **Change the program** so that both eyes are always the same random size. Hint: you'll only need to make changes to one line of code.",
        "CSD U3 Variables random with assignment_2018_markdown_instruction": "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\" style=\"float:right;height:150px\">\n\n# Debug: Variables and Random Numbers\n\nVariables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.\n\n# Do This\n\n`eyeSize` is assigned a random number. Unfortunately only one of the eyes is currently using it.\n\n* **Run the program** to see how it works.\n* **Change the program** so that both eyes are always the same random size. Hint: you'll only need to make changes to one line of code.",
        "CSD U3 Variables use value rect_markdown_instruction": "# Using a Variable's Value\n\nThis program creates a variable called `size`. You will need to **assign it a value**. It will then be used to set the size of a square on the screen.\n\n# Do This\n\n* **Assign the variable `size` a value** and run the program to see how its value is used\n* **Change the value** and rerun the program to see how it affects the output of your program.",
        "CSD U3 Variables write_markdown_instruction": "# Displaying a Variable's Value\n\nOften you want to see the exact value contained in a variable, especially if it was randomly generated. Both `console.log` and `text` can be used with variables to specifically see their values. This is an important skill when **debugging** your programs.\n\n# Do This\n\nThis program uses a variable `size` to draw a square with a randomly generated value.\n\n* **Use the `text` command** to display the value of `size` on the screen.\n* **Use the `console.log` command** to display the value of `size` in the debug console.",
        "CSD U3 Variables2 expressions in commands_markdown_instruction": "# Expressions inside commands\n\n**When your computer sees an expression in a program it will calculate its value before using it**. This means you can even use expressions in unexpected places, like inside drawing commands.\n\n\tstrokeWeight(4 * 5);\n    rect(10 + 10, 5 * 50, 30, 30);\n    \nNotice that the commas still separate each expression. This is just further evidence that **even though an expression may have multiple parts, it will eventually get treated as a single value.**\n\n# Do This\n\nTry writing more complex expressions inside of the drawing commands provided.",
        "CSD U3 Variables2 expressions in variables_markdown_instruction": "# Do This\n\n* Use the `=` (assignment operator) to store the value of each expression in a variable\n* Use `console.log` to display each value\n* Repeat the pattern with some expressions of your own. What do you want to calculate?",
        "CSD U3 Variables2 expressions_markdown_instruction": "# Do This\n\n* Place each expression inside of a `console.log` command to display their results\n* What other expressions can you make? Try writing 3 of your own.\n",
        "CSD U3 Watcher Debug_markdown_instruction": "<img src=\"https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif\" style=\"float: right; margin-left: 20px;\">\n\n# Debug: Watching the Counter Pattern\n\nLet's practice using watchers to debug your code. This program should move the motorcycle from the bottom left to the top right, like the image to the right. Unfortunately the motorcycle moves off screen too quickly to see what's going wrong.\n\nUsing the provided watchers for `cycle.x` and `cycle.y`, figure out which one is moving in the wrong direction and fix the program.",
        "CSD U3 Watcher Debug_2018_markdown_instruction": "<img src=\"https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif\" style=\"float: right; margin-left: 20px;\">\n\n# Debug: Watching the Counter Pattern\n\nLet's practice using watchers to debug your code. This program should move the motorcycle from the bottom left to the top right, like the image to the right. Unfortunately the motorcycle moves off screen too quickly to see what's going wrong.\n\nUsing the provided watchers for `cycle.x` and `cycle.y`, figure out which one is moving in the wrong direction and fix the program.",
        "CSD U3 Watcher Predict response_markdown_instruction": "# Watching the Counter Pattern\n\nWatchers are a really useful tool for debugging programs that use the counter pattern.\n\n* **Read the program** and predict what the program will do.\n* **Run the program** to check your prediction.\n* **Look at the watchers** and explain to a neighbor what you are seeing.\n\n",
        "CSD U3 Watcher Predict response_2018_markdown_instruction": "# Watching the Counter Pattern\n\nWatchers are a really useful tool for debugging programs that use the counter pattern.\n\n* **Read the program** and predict what the program will do.\n* **Run the program** to check your prediction.\n* **Look at the watchers** and explain to a neighbor what you are seeing.\n\n",
        "CSD U3 abstraction accelerateX_markdown_instruction": "# Velocity and the Counter Pattern\n\nAs you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.\n\n# Do This\n\nThis program already makes a car move across the screen, but it's going very slowly.\n\n* Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )",
        "CSD U3 abstraction accelerateX_2018_markdown_instruction": "# Velocity and the Counter Pattern\n\nAs you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.\n\n# Do This\n\nThis program already makes a car move across the screen, but it's going very slowly.\n\n* Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )",
        "CSD U3 abstraction accelerateY up_markdown_instruction": "# Rising Bubble\n\nThis program makes a bubble rise up the water. Can you make it get faster as it rises?\n\n# Do This\n\n* Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.",
        "CSD U3 abstraction accelerateY up_2018_markdown_instruction": "# Rising Bubble\n\nThis program makes a bubble rise up the water. Can you make it get faster as it rises?\n\n# Do This\n\n* Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.",
        "CSD U3 abstraction accelerateY_markdown_instruction": "# Falling Rock\n\nThe rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?\n\n# Do This\n\n* Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )\n\n*Challenge: Can you make the rock spin as it falls?*",
        "CSD U3 abstraction accelerateY_2018_markdown_instruction": "# Falling Rock\n\nThe rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?\n\n# Do This\n\n* Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )\n\n*Challenge: Can you make the rock spin as it falls?*",
        "CSD U3 abstraction add coin_markdown_instruction": "# Add a Coin\n\nIn the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.\n\n# Do This\n\nIn this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.\n\n* Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.\n* Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.\n* In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.\n\nTest your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.",
        "CSD U3 abstraction add coin_2018_markdown_instruction": "# Add a Coin\n\nIn the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.\n\n# Do This\n\nIn this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.\n\n* Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.\n* Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.\n* In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.\n\nTest your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.",
        "CSD U3 abstraction animation circle_markdown_instruction": "# Animate the Satellite\n\nNow you are ready for the final piece of the drawing: making the satellite circle the moon.\n\n# Do This\n\nUse `setSpeed()` and `getDirection()` to make the satellite circle the moon. ",
        "CSD U3 abstraction animation rotate_markdown_instruction": "# Rotation\n\nMake earth rotate using the `rotationSpeed` property.",
        "CSD U3 abstraction animation setSpeed_markdown_instruction": "# Animate Your Picture\n\n<img style=\"float:right\" src=\"https://images.code.org/d2ad362f37d0e5f9b98691654256d2fb-image-1469469372823.gif\">\n\nNow that everything is in the right place, you can make them move using the properties and methods you have learned.\n\n# Do This\n\nUse `rotationSpeed`, `rotationToDirection`, `getSpeed`, `getDirection`, and `setSpeed` to animate your scene, as seen in the image to the right.  ",
        "CSD U3 abstraction bug template_markdown_instruction": "# velocityY\n\n`velocityY` is like `velocityX`, but it moves things up and down.  Can you use it to make the dragonfly walk up the screen?\n\n# Do This\n\nUse `velocityY` to make the sprite go up the screen.\n\n*Hint: Should velocity by positive or negative to move the sprite up the screen?*",
        "CSD U3 abstraction car rotation_markdown_instruction": "# rotateToDirection\n\nHere's the car you just made move.  It stayed on the road, but it was not pointing in the right direction.  You can tell the sprite to always point in the direction that it's moving by adding `car.rotateToDirection = true` outside the draw loop, right after you create your sprite.\n\n# Do This\n\nUse the `rotateToDirection` property to make your car face the direction it's moving.",
        "CSD U3 abstraction car template_markdown_instruction": "# Moving at an Angle\n\nIf you use `velocityX` and `velocityY` at the same time, you can move your sprite at an angle.  See if you can keep the car on the road by using these two properties.\n\n# Do This\n\nUse `velocityX` and `velocityY` to make the car move along the road.",
        "CSD U3 abstraction change velocityX_markdown_instruction": "# Moving Faster\n\nRemember when you used the counter pattern `sprite.x = sprite.x + 1` to change your sprite's position inside the draw loop?  Now you can use the same type of counter pattern with `sprite.velocityX` to change your sprite's speed as your program runs. Can you add a line of code in the draw loop to make the sprite swim faster and faster?\n\n# Do This\n\nMake the fish get faster by adding `fish.velocityX = fish.velocityX + 1` inside the draw loop.  [Show me where](#triggercallout=code_triggered)",
        "CSD U3 abstraction change velocityXY_markdown_instruction": "# Getting faster at an angle\n\nHere's a different car that uses the same counter pattern we used in the last lesson to make the car go faster, but it changes both `velocityX` and `velocityY`. ([Show me where](#triggercallout=code_triggered))  It also prints the speed and direction to the debug console.  What do you think will happen when you run the code?\n\n# Do This\n\nDiscuss with your partner what you think will happen when the code runs, then run it and see whether you were right.  Why do you think the car moves in this way?\n\n[//]: #(https://images.code.org/4d1af9cc274f30b9d9263a47f9f64f13-image-1470941637433.png)",
        "CSD U3 abstraction change velocityY_markdown_instruction": "# Moving Faster\n\nJust as you can change `velocityX` inside the draw loop, you can change `velocityY` to make your sprite move faster up or down.  Can you add code into the draw loop to make the dragonfly go faster?\n\n# Do This\n\nUse the `velocityY` property to make the dragonfly fly faster and faster up the screen.    [Show me where](#triggercallout=code_triggered)",
        "CSD U3 abstraction circle_markdown_instruction": "# getDirection()\n\nYou've been using `getSpeed` and `setSpeedAndDirection`  to change the speed of a sprite in a particular direction.  What do you think will happen if you keep the speed the same, but use `getDirection` and `setSpeedAndDirection` to change the direction?  Look at the code below and predict what it will do.  After you've run it, try changing the direction by different amounts to see what happens.\n\n# Do This\n* Read the code where the direction is changed and predict what it will do [Show me where](#triggercallout=code_triggered)\n* Run the program and observe what it does\n* Modify the program to make the car spin in large circles\n* Modify the program to make the car move in the opposite direction\n\n[//]: #(https://images.code.org/63b04e63fc4bc21700b64ef3d6c6b8b7-image-1471475653020.png)",
        "CSD U3 abstraction decelerateX_markdown_instruction": "# Slowing Things Down\n\nNow that you've had some practice speeding things up, can you use the counter pattern to slow sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll need to use the counter pattern to slow it down.\n\n* Use the `sprite.velocityX` block with a counter pattern to slow the car down by 0.25 as it moves across the screen.  \n* Discuss with your Partner: What do you think will happen when the car finally stops?\n\n*Challenge: Add code that makes the car slow down only if his velocityX is greater than 0.*",
        "CSD U3 abstraction decelerateX_2018_markdown_instruction": "# Slowing Things Down\n\nNow that you've had some practice speeding things up, can you use the counter pattern to slow sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll need to use the counter pattern to slow it down.\n\n* Use the `sprite.velocityX` block with a counter pattern to slow the car down by 0.25 as it moves across the screen.  \n* Discuss with your Partner: What do you think will happen when the car finally stops?\n\n*Challenge: Add code that makes the car slow down only if his velocityX is greater than 0.*",
        "CSD U3 abstraction decelerateY_markdown_instruction": "# Simulating Gravity\n\nIn the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.\n\nIf you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!\n\n# Do This\n\nThe rock is thrown in the air but it never falls back down.\n\n* Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.\n* Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?\n* Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?",
        "CSD U3 abstraction decelerateY_2018_markdown_instruction": "# Simulating Gravity\n\nIn the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.\n\nIf you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!\n\n# Do This\n\nThe rock is thrown in the air but it never falls back down.\n\n* Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.\n* Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?\n* Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?",
        "CSD U3 abstraction demo pic_markdown_instruction": "# Space Animation\n\nIn the next few puzzles, you'll be building the space animation on the left.  You can use your activity guide to help you plan how to make the different type of movements you see.\n\n# Do This\n\n* Click \"Run\" to see the animation.\n* Look at how all the different sprites are moving and update your activity guide with any ideas you have.\n* Discuss with a partner how you might make this picture.",
        "CSD U3 abstraction dragonfly (OLD)_markdown_instruction": "# velocityY\n\n`velocityY` is like `velocityX`, but it moves things up and down.  Can you use it to make the feather float the down screen?\n\n# Do This\n\nUse `velocityY` to make the sprite go down the screen.&nbsp;&nbsp;  [Show me where](#triggercallout=code_triggered)",
        "CSD U3 abstraction dragonfly OLD_markdown_instruction": "# velocityY\n\n`velocityY` is like `velocityX`, but it moves things up and down.  Can you use it to make the dragonfly walk up the screen?\n\n# Do This\n\nUse `velocityY` to make the sprite go up the screen.&nbsp;&nbsp;  [Show me where](#triggercallout=code_triggered)\n\n*Hint: Should velocity be positive or negative to move the sprite up the screen?*",
        "CSD U3 abstraction drive_markdown_instruction": "# Race Your Car\n\nNow that you can steer, you need to control the speed of your car.  Use the `setSpeed` method to make the car go faster when you push the up arrow and slower when you push the down arrow.\n\n# Do This\n\nAdd two conditionals to your car program.  \n\n* The first should check whether the up arrow is pressed, and increase the speed of the car. \n* The second should check whether the down arrow is pressed and decrease the speed of the car.\n\n*Hint:  What's the difference between `keyDown` and `keyWentDown`?  Which do you think will work better for changing the speed of the car?*",
        "CSD U3 abstraction fish template_markdown_instruction": "# velocityX\n\nLast time you made the fish move, you did it by changing its `x` property in the draw loop.  Now, you can use `velocityX` to make your sprites move left or right by a certain amount each time they are drawn.\n\n# Do This\n\nUse the `velocityX` block to make the sprite go across the screen.\n",
        "CSD U3 abstraction horse_markdown_instruction": "# Horse\n\nThe horse is trying to make its escape. Can you use the `velocityX` and `velocityY` blocks to make the horse jump over the fence?\n\n\n# Do This\n\n* Set the starting `velocityX` and `velocityY` values outside the draw loop [Show me where](#triggercallout=code_triggered1)\n* Change your sprite's `velocityY` using a counter pattern inside the draw loop [Show me where](#triggercallout=code_triggered2)\n",
        "CSD U3 abstraction horse2_markdown_instruction": "# Better Horse\n\nIf you're making a game, you'll want the horse to jump according to user input. This program automatically moves the horse to the right, but the horse should jump when the user presses the up arrow key.  You will need to add three lines of code to make this work.  First, you'll need to check whether the up arrow key has been pressed, and make the horse move up if it has. \n\n\n# Do This\n\n* Inside the `if` block that checks whether the up arrow key has been pressed, use the `velocityY` block to make the horse move up by 4 each time. [Show me where](#triggercallout=code_triggered)\n\n",
        "CSD U3 abstraction horse3_markdown_instruction": "# Better Horse\n\nNext, you'll make the horse fall back down to the ground. You'll need to check whether the horse is in the air by looking at its y position. If it's in the air it should fall down, but once it touches the ground it should stop. The `if/else` block has already been provided for you.\n\n# Do This\n\nLook at the `if/else` block that checks whether the horse's position is less than 325. [Show me where](#triggercallout=code_triggered1)\n\n* If the horse's y position is less than 325, use a counter pattern to change the horse's velocityY by 0.1 on each tick of the draw loop. \n* If the horse's y position is not less than 325, use the `velocityY` to change its vertical velocity to zero. [Show me where](#triggercallout=code_triggered2)\n\n",
        "CSD U3 abstraction jumper intro_markdown_instruction": "# Horse Jumper\n\nNow that you've learned these new blocks, you can start to make a horse jumper game.  Press \"Run\" to play the game on the left.  You can use the up arrow to jump over the tumbleweed.  What block will you need to make the tumbleweed move?  How many different ways does the horse move?\n\n\n",
        "CSD U3 abstraction jumper template_markdown_instruction": "# Horse Jumper\n\nNow that you've learned these new blocks, you can start to make a horse jumper game.  Press \"Run\" to play the game on the left.  You can use the up arrow to jump over the tumbleweed.  What block will you need to make the tumbleweed move?  How many different ways does the horse move?\n\n\n",
        "CSD U3 abstraction jumping advanced_markdown_instruction": "# Jumping with the Counter Pattern\n\nIn the last level you just set the sprite's velocity to -5 to make it jump. Eventually the sprite slows down and then starts falling again. Now you'll build a slightly more realistic jump by using the counter pattern with the sprite's y velocity.\n\n# Do This\n\nInside the `if` block you should have code that sets the sprite's y velocity to a number.\n\n* Replace that line of code with new code, `flyer.velocityY = flyer.velocityY - 5`\n* Discuss with Your Partner: How did this change affect the way the sprite moves? How does subtracting a different amount change the way your sprite moves? Do you prefer one or the other type of jump?",
        "CSD U3 abstraction jumping template_markdown_instruction": "# Jumping\n\nIncreasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump and then make it more realistic looking in the next level.\n\n# Do This\n\nA sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.\n\n* Inside the draw loop add an `if` block\n* Use the `keyWentDown` block to make the block respond to the \"up\" arrow being pressed\n* Inside your `if` block set the sprite's y velocity to -5\n\nRun the code to make sure it works. Then experiment with different values. How could you make your sprite jump higher or lower?",
        "CSD U3 abstraction jumping template_2018_markdown_instruction": "# Jumping\n\nIncreasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump and then make it more realistic looking in the next level.\n\n# Do This\n\nA sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.\n\n* Inside the draw loop add an `if` block\n* Use the `keyWentDown` block to make the block respond to the \"up\" arrow being pressed\n* Inside your `if` block set the sprite's y velocity to -5\n\nRun the code to make sure it works. Then experiment with different values. How could you make your sprite jump higher or lower?",
        "CSD U3 abstraction jumping_markdown_instruction": "# Jumping\n\nIncreasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.\n\n# Do This\n\nA sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.\n\n* Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )\n* Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?",
        "CSD U3 abstraction jumping_2018_markdown_instruction": "# Jumping\n\nIncreasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.\n\n# Do This\n\nA sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.\n\n* Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )\n* Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?",
        "CSD U3 abstraction left right counter 2_markdown_instruction": "# Floating Left\n\nIn the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.\n\n# Do This\n\n* Add code to your draw loop that will make the sprite start moving to the left when the \"left\" arrow is down.\n* Make sure you're using velocity and the counter pattern together.\n\nOnce your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?",
        "CSD U3 abstraction left right counter 2_2018_markdown_instruction": "# Floating Left\n\nIn the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.\n\n# Do This\n\n* Add code to your draw loop that will make the sprite start moving to the left when the \"left\" arrow is down.\n* Make sure you're using velocity and the counter pattern together.\n\nOnce your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?",
        "CSD U3 abstraction left right counter_markdown_instruction": "# Floating Right\n\nYou're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.\n\n# Do This\n\nIn this level you'll make your sprite start floating to the right when the right arrow is pressed.\n\n* Add an `if` statement inside your draw loop below the one you created for the \"up\" arrow.\n* Use the `keyDown` block to make the `if` statement respond to when the \"right\" arrow is pressed.\n* Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.\n\nRun your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press \"up\". You'll make the left arrow work in the next level.",
        "CSD U3 abstraction left right counter_2018_markdown_instruction": "# Floating Right\n\nYou're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.\n\n# Do This\n\nIn this level you'll make your sprite start floating to the right when the right arrow is pressed.\n\n* Add an `if` statement inside your draw loop below the one you created for the \"up\" arrow.\n* Use the `keyDown` block to make the `if` statement respond to when the \"right\" arrow is pressed.\n* Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.\n\nRun your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press \"up\". You'll make the left arrow work in the next level.",
        "CSD U3 abstraction looping_markdown_instruction": "# Looping\n\nThe game will be more fun if the frog can jump more than once.  You can make the mushroom \"loop\" by checking whether it's moved past the left edge and moving it back to the right edge when it has.\n\n# Do this\n* Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )\n* Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.",
        "CSD U3 abstraction looping_2018_markdown_instruction": "# Looping\n\nThe game will be more fun if the frog can jump more than once.  You can make the mushroom \"loop\" by checking whether it's moved past the left edge and moving it back to the right edge when it has.\n\n# Do this\n* Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )\n* Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.",
        "CSD U3 abstraction make it your own_markdown_instruction": "# Make It Your Own\n\nYou now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a \"bad coin\" that takes away points?\n\n# Do This\n\nMake at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.",
        "CSD U3 abstraction make it your own_2018_markdown_instruction": "# Make It Your Own\n\nYou now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a \"bad coin\" that takes away points?\n\n# Do This\n\nMake at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.",
        "CSD U3 abstraction parabola_markdown_instruction": "# Basketball\n\nHere's a basketball that's thrown up, then falls back down.  Can you use the `velocityX` block to make it go through the hoop?\n\n\n# Do This\n\nUse the `velocityX` block outside the draw loop to make the ball move to the right by 3 each time. [Show me where](#triggercallout=code_triggered)\n\n[//]: #(https://images.code.org/119358fc8705640a24d2138439ea7cc1-image-1472496770816.png)",
        "CSD U3 abstraction race template_markdown_instruction": "Template for the race game",
        "CSD U3 abstraction rotation accelerate_markdown_instruction": "# Speeding up\n\nNow that you've used `rotationSpeed` outside the draw loop to start your sprite rotating at a certain speed, you can also use `rotationSpeed` inside the draw loop to change how fast the sprite rotates.  Look at the code inside the draw loop.  It uses the counter pattern to make the wheel speed up when the up arrow is pressed.  Can you use a different counter pattern to make the wheel slow down when the down arrow is pressed?\n\n# Do This\n\n* Look at the code that makes the wheel spin faster when the up arrow is pressed [Show me where](#triggercallout=code_triggered1)\n* Add code that makes the wheel spin slower when the down arrow is pressed [Show me where](#triggercallout=code_triggered2)",
        "CSD U3 abstraction rotation control_markdown_instruction": "# Controlling Speed\n\nYou used `rotatationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.\n\n# Do This\n\n* Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )\n* Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.",
        "CSD U3 abstraction rotation control_2018_markdown_instruction": "# Controlling Speed\n\nYou used `rotatationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.\n\n# Do This\n\n* Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )\n* Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.",
        "CSD U3 abstraction rotation_markdown_instruction": "# rotationSpeed\n\nYou've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.\n\nNow, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.\n\n# Do This\n\nMake the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )",
        "CSD U3 abstraction rotation_2018_markdown_instruction": "# rotationSpeed\n\nYou've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.\n\nNow, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.\n\n# Do This\n\nMake the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )",
        "CSD U3 abstraction setSpeed accelerate_markdown_instruction": "# Moving faster and faster\n\nNow that you've started your car off in the right direction, you can make it go faster and faster by using a counter pattern inside the draw loop.  Because the sprite does not store its speed as it would a property, you'll need to use the `getSpeed` block inside the `setSpeedAndDirection` block to add one to the speed each time.  The code `car.setSpeedAndDirection(car.getSpeed() + 1, -20)` will get the speed of the car, add one to it, and set the new speed to be the sum.  Even though it looks different from using a counter pattern on a property or variable, the basic pattern of adding one each time is the same.\n\n# Do this\n\nUse the `getSpeed` and `setSpeedAndDirection` blocks to add one to the speed each time the draw loop is called.  [Show me where](#triggercallout=code_triggered)",
        "CSD U3 abstraction setSpeed intro_markdown_instruction": "# getSpeed() and getDirection()\n\nWhen you move around the world, you probably don't normally think about your velocityX and velocityY.  You probably just think about how fast you are going in the direction you are heading.  You can figure out a sprite's speed and direction with math, but it's faster to teach the computer to do those calculations for you.  `getSpeed()` and `getDirection()` are methods that use the information in `velocityX` and `velocityY` to find your speed and direction.\n\n# Do this\n\n* For each of the three sprites in this animation: Look at its `velocityX` and `velocityY` and guess what its speed and direction are.  \n* Then run the code and see the answers in the debug console.\n",
        "CSD U3 abstraction setSpeed_markdown_instruction": "# setSpeedAndDirection()\n\nJust as you can use the `getSpeed` and `getDirection` blocks to see how your sprite is moving, you can use the `setSpeedAndDirection` block to tell the computer how you want your sprite to move.  This block takes in two numbers, first the new speed of your sprite, then the angle of its direction.\n\nBefore, you did this by setting your `velocityX` and `velocityY` properties, but `setSpeedAndDirection` lets you input the exact speed and direction of your sprite.  The computer calculates the matching `velocityX` and `velocityY` values and sets them for you, according to code that another programmer already wrote.\n\n# Do this\n\nUse `setSpeedAndDirection` to make the car stay on the road.  You can see the effect on your sprite's `velocityX` and `velocityY` in the debug console.\n\n*Hint: The angle of the road is -20 degrees*\n\n*Challenge: Make the car point in the correct direction.*",
        "CSD U3 abstraction sidescroll intro_markdown_instruction": "# Horse Jumper\n\nNow that you've learned these new blocks, you can start to make a horse jumper game.  Press \"Run\" to play the game on the left.  You can use the up arrow to jump over the tumbleweed.  What block will you need to make the tumbleweed move?  How many different ways does the horse move?\n\n\n",
        "CSD U3 abstraction space animation_markdown_instruction": "# Your choice\n\n<img style=\"float:right\" src=\"https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif\">\n\nNow that you have everything moving in the correct way, you can add your own sprite.  You can choose between the star and astronaut animations in the animations tab\n\n# Do This\n\n* Add a new sprite to the picture using the star or astronaut in the animations tab\n* Make  your sprite move in a new way based on what you have learned\n* Share your picture with a classmate and compare your animations",
        "CSD U3 abstraction space comet_markdown_instruction": "# Animate The Comet\n\n<img style=\"float:right\" src=\"https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif\">\n\nNow that your sprites are in the right place, you can make them move using the properties and methods you have learned.  In this level, you can make the comet fly across the sky in a curve.  If you want to animate another sprite, you can click on the following links:\n\n* [Animate the Earth](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/12)\n* [Animate the Spaceship](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/14)\n* [Animate the Satellite](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/15)\n\n# Do This\n\nUse the correct blocks to make the comet fly across the sky as in the picture.\n\n*Hint: Look at [this level](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/11/puzzle/13) for clues.*",
        "CSD U3 abstraction space earth_markdown_instruction": "# Animate The Earth\n\n<img style=\"float:right\" src=\"https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif\">\n\nNow that everything is in the right place, you can make the sprites move using the properties and methods you have learned.  In this level, you can make the earth rotate.  If you want to animate another sprite, you can click on the following links:\n* [Animate the Comet](s/CSDU3-Draft/stage/12/puzzle/13)\n* [Animate the Spaceship](s/CSDU3-Draft/stage/12/puzzle/14)\n* [Animate the Satellite](s/CSDU3-Draft/stage/12/puzzle/15)\n\n# Do This\n\nUse the correct blocks to make the earth rotate as in the picture.\n",
        "CSD U3 abstraction space satellite_markdown_instruction": "# Animate The Satellite\n\n<img style=\"float:right\" src=\"https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif\">\n\nNow that everything is in the right place, you can make the sprites move using the properties and methods you have learned.  In this level, you can make the satellite revolve around the moon.  If you want to animate another sprite, you can click on the following links:\n\n* [Animate the Earth](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/12)\n* [Animate the Comet](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/13)\n* [Animate the Spaceship](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/14)\n\n# Do This\n\nUse the correct blocks to make the satellite move as in the picture.\n\n*Hint: Look at [this level](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/8) for clues.*",
        "CSD U3 abstraction space spaceship_markdown_instruction": "# Animate The Spaceship\n\n<img style=\"float:right\" src=\"https://images.code.org/1c05e3bd228881b77109488b2eb5e737-image-1472408305120.gif\">\n\nNow that everything is in the right place, you can make the sprites move using the properties and methods you have learned.  In this level, you can make the spaceship speed up as it takes off from Earth.  If you want to animate another sprite, you can click on the following links:\n\n* [Animate the Earth](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/12)\n* [Animate the Comet](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/13)\n* [Animate the Satellite](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/15)\n\n# Do This\n\nUse the correct blocks to make the spaceship take off as in the picture.\n\n*Hint: Look at [this level](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/6) for clues.*",
        "CSD U3 abstraction space template_markdown_instruction": "![](https://images.code.org/b449da443093a6b7fb872c0b65d4ea39-image-1472234725048.png)\n\n![](https://images.code.org/87f39110a8cec7a6ca1978989f1d8eaf-image-1472235414354.png)\n\n![](https://images.code.org/69cb2daab7d1eec824b8bd2d2b117116-image-1472235429548.png)",
        "CSD U3 abstraction steer_markdown_instruction": "# Steering your car\n\nNow you have enough information to control your car with the keyboard using conditionals.  Every time the left arrow key is pressed, the car will turn to the left.  Can you use the `if` block to make the car turn to the right when the right arrow key is pressed?  (Don't worry about speeding up and slowing down.  You will do that on the next level.)\n\n# Do This\n\nInside the draw loop:\n* check whether the right arrow key is pressed\n* if it's pressed, turn the car to the right\n\n*Challenge: Can you modify the code so that the car turns faster?*",
        "CSD U3 abstraction teaser_markdown_instruction": "# Space Animation\n\nLook at the space animation on the left.\n\n* What sorts of movements are the different sprites making? \n* Which types of movement do you already know how to program?\n* Is there anything you're not sure how to do? \n* Discuss with a partner how you might make this picture.\n\n# Do This\n\n* Click \"Run\" to see the space animation.\n* With your partner, discuss the different types of movement and how you might code your sprites.\n* Fill out the activity guide with your notes on the different movements.",
        "CSD U3 abstraction tumbleweed_markdown_instruction": "# Mushroom\n\nNow you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.\n\n# Do this\n* Use the `velocityX` block to make the mushroom move left across the screen.\n\n*Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?*\n\n",
        "CSD U3 abstraction tumbleweed_2018_markdown_instruction": "# Mushroom\n\nNow you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.\n\n# Do this\n* Use the `velocityX` block to make the mushroom move left across the screen.\n\n*Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?*\n\n",
        "CSD U3 abstraction velocityX control_markdown_instruction": "# Multiple Controls\n\nAs you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.\n\n# Do This\n* Look at the three `if` statements inside the draw loop.\n\n* Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:\n  * If the user presses the right arrow key, move the fish to the right.\n  * If the fish gets to the right-hand side of the screen, move the fish to the left.\n  * If the fish gets to the left-hand side of the screen, stop the fish.",
        "CSD U3 abstraction velocityX control_2018_markdown_instruction": "# Multiple Controls\n\nAs you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.\n\n# Do This\n* Look at the three `if` statements inside the draw loop.\n\n* Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:\n  * If the user presses the right arrow key, move the fish to the right.\n  * If the fish gets to the right-hand side of the screen, move the fish to the left.\n  * If the fish gets to the left-hand side of the screen, stop the fish.",
        "CSD U3 abstraction velocityX if-statements predict_markdown_instruction": "# Changing Velocity with Position\n\nOne advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.  The code below uses if statements to make a fish sprite move in different directions.\n\n# Do This\n\n* Look at `if` statements that check the sprite's position and set its velocity.\n* With your partner, discuss what you think the code will do, and write your answer below.\n* Once you have submitted your answer, run the code.",
        "CSD U3 abstraction velocityX if-statements predict_2018_markdown_instruction": "# Changing Velocity with Position\n\nOne advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.  The code below uses if statements to make a fish sprite move in different directions.\n\n# Do This\n\n* Look at `if` statements that check the sprite's position and set its velocity.\n* With your partner, discuss what you think the code will do, and write your answer below.\n* Once you have submitted your answer, run the code.",
        "CSD U3 abstraction velocityX if-statements_markdown_instruction": "# Changing Velocity with Position\n\nOne advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.\n\nIn the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.\n\n# Do This\n\n* Look at `if` statements that check the sprite's position and set its velocity.\n* With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).",
        "CSD U3 abstraction velocityX if-statements_2018_markdown_instruction": "# Changing Velocity with Position\n\nOne advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.\n\nIn the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.\n\n# Do This\n\n* Look at `if` statements that check the sprite's position and set its velocity.\n* With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).",
        "CSD U3 abstraction velocityX_markdown_instruction": "# velocityX\n\nOne way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.\n\n# Do This\n\n* Drag a `sprite.velocityX` block directly below where your sprite is created. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( [Show me where](#triggercallout=code_triggered) )\n* Write the name of your sprite in the block.\n* Assign the `velocityX` property a value of 1.\n* Run the code. What happens?\n* Re-run the code giving the `velocityX` property a different value. What's changing?",
        "CSD U3 abstraction velocityXY_markdown_instruction": "# Moving at an Angle\n\nFor the next several levels you'll use the `sprite.velocityX` and `sprite.velocityY` blocks to create some interesting sprite movements. As you do so ask yourself whether you need the code to run just once (outside the draw loop) or on every frame (inside the draw loop).\n\n# Do This\n\nThis car sprite should move along the diagonal road.\n\n* Set both the X and Y velocities of the car to make it move along the road.\n* Discuss with a Neighbor: Did you set the velocity inside or outside the draw loop? Does it make a difference? Why might one be better than the other?",
        "CSD U3 abstraction velocityX_2018_markdown_instruction": "# velocityX\n\nOne way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.\n\n# Do This\n\n* Drag a `sprite.velocityX` block directly below where your sprite is created. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( [Show me where](#triggercallout=code_triggered) )\n* Write the name of your sprite in the block.\n* Assign the `velocityX` property a value of 1.\n* Run the code. What happens?\n* Re-run the code giving the `velocityX` property a different value. What's changing?",
        "CSD U3 abstraction velocityY 2_markdown_instruction": "# velocityY\n\n`velocityY` is like `velocityX`, but it moves things up and down.  Can you use it to make the feather float the down screen?\n\n# Do This\n\nUse `velocityY` to make the sprite go down the screen.&nbsp;&nbsp;  [Show me where](#triggercallout=code_triggered)",
        "CSD U3 abstraction velocityY control_markdown_instruction": "# Controlling Speed\n\nYour code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.\n\n# Do This\n\n* Use an `if` statement inside the draw loop to check when the space bar is pressed.\n* Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.",
        "CSD U3 abstraction velocityY control_2018_markdown_instruction": "# Controlling Speed\n\nYour code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.\n\n# Do This\n\n* Use an `if` statement inside the draw loop to check when the space bar is pressed.\n* Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.",
        "CSD U3 abstraction velocityY_markdown_instruction": "# Moving Down\n\nHere is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?\n\n# Do This\n\nFind the block that will make the feather sprite go down the screen, and use it outside the draw loop.&nbsp;&nbsp; (  [Show me where](#triggercallout=code_triggered) )",
        "CSD U3 abstraction velocityY_2018_markdown_instruction": "# Moving Down\n\nHere is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?\n\n# Do This\n\nFind the block that will make the feather sprite go down the screen, and use it outside the draw loop.&nbsp;&nbsp; (  [Show me where](#triggercallout=code_triggered) )",
        "CSD U3 challenge new shape_markdown_instruction": "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\" style=\"float: right; max-width: 200px; border: 1px solid grey\">\n\n# Challenge: Shape of Shapes\n\n_Check with your teacher before starting any of the challenges._\n\nUsing only the `rect` and `ellipse` commands, can you draw a new shape, such as this triangle made out of circles?",
        "CSD U3 challenge new shape_2018_markdown_instruction": "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\" style=\"float: right; max-width: 200px; border: 1px solid grey\">\n\n# Challenge: Shape of Shapes\n\n_Check with your teacher before starting any of the challenges._\n\nUsing only the `rect` and `ellipse` commands, can you draw a new shape, such as this triangle made out of circles?\n",
        "CSD U3 collisions bounce birds_markdown_instruction": "# bounce()\n\nThe birds are fighting for space on the wire.  Can you change the code so that the green bird pushes the yellow bird off the wire?\n\n# Do This\n\nUse the `bounce` block to the green bird sprite bounce against the yellow bird sprite.\n",
        "CSD U3 collisions bounce intro_markdown_instruction": "# bounce()\n\nYou can also make sprites bounce when they touch each other, as in the code below. Read the code and run it with a partner.  Can you change the code so that the green bird pushes the yellow bird off the wire?\n\n# Do This\n\nUse the `bounce` block to make the green bird sprite bounce against the yellow bird sprite.\n",
        "CSD U3 collisions bounce_markdown_instruction": "# Billiards\n\nChanging your sprites' velocities will change the ways that they bounce when they touch each other.  Read the code and run it with a partner, then try out different intial velocities for your sprites.  After each change, discuss with your partner what you think will happen before you run the code.\n\n# Do This\nDiscuss with your partner what you think will happen when you run the code, then try it again with the following changes:\n* set the purple ball's velocity to 0\n* set the purple ball's velocity to 4\n* switch the purple and red balls so it says `red_ball.bounce(purple_ball)`\n\n\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\n\n[//]: #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)",
        "CSD U3 collisions bounceOff intro_markdown_instruction": "# Basketball\n\nRun the code below and see what happens.  You want the basketball to bounce, but the floor should not move!  See if you can find a different block that you can use to make the basketball bounce off the floor.\n\n# Do This\n\nReplace `bounce` with a different block so that the floor sprite does not move, and the basketball sprite bounces off it.\n\n[//]: # (https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png)\n\n[//]: # (https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png)",
        "CSD U3 collisions bounceOff_markdown_instruction": "# Mouse\n\nThe mouse should be running back and forth between the two walls.  Can you use the `bounceOff` block to make it move in the right way?\n\n# Do This\n\nUse the `bounceOff` block to make the mouse sprite bounce off the wall sprites.\n\n[//]: # (https://images.code.org/e542bc5decf5f57d3184a8d5449776d2-image-1470413949810.png)\n\n[//]: # (https://images.code.org/fcd40235d2a4285723eecec1df041edc-image-1470413965009.png)\n\n[//]: # (https://images.code.org/c3f6298b05a9eb51772c8c03a06abe54-image-1470414415864.png)\n\n[//]: # (https://images.code.org/e89b80c63658eb3607478fe91aceda47-image-1470414741858.png)",
        "CSD U3 collisions bounciness_markdown_instruction": "# Bounciness\n\nSo far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.\n\n# Do This\n\n* Read the code below and press \"Run\" to see the behavior of the basketball and pool ball.\n* Use a `bounciness` block to set the bounciness of your soccer ball.\n* Run the code again to see how the sprites bounce off the floor.\n\n\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\n\n[//]: #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)\n\n[//]: #  (https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png)",
        "CSD U3 collisions bounciness_2018_markdown_instruction": "# Bounciness\n\nSo far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.\n\n# Do This\n\n* Read the code below and press \"Run\" to see the behavior of the basketball and pool ball.\n* Use a `bounciness` block to set the bounciness of your soccer ball.\n* Run the code again to see how the sprites bounce off the floor.\n\n\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\n\n[//]: #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)\n\n[//]: #  (https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png)",
        "CSD U3 collisions build isTouching_markdown_instruction": "# Balloon\n\nThe code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.\n\n# Do This\n\n* You do not need to change any code on this level.\n* Read the if statements inside the draw loop and find the different sprite properties and how they are compared.\n* Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?\n\n\n[//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\n\n[//]: # (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\n\n[//]: # (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)",
        "CSD U3 collisions build isTouching_2018_markdown_instruction": "# Balloon\n\nThe code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.\n\n# Do This\n\n* You do not need to change any code on this level.\n* Read the if statements inside the draw loop and find the different sprite properties and how they are compared.\n* Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?\n\n\n[//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\n\n[//]: # (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\n\n[//]: # (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)",
        "CSD U3 collisions bumper_markdown_instruction": "# Bumper Cars\n\nThe bumper cars are almost ready, but they still don't bump into each other.  Can you choose the right method to make the cars behave like they do in the picture?\n\n# Do This\n\nUse `displace`, `collide`, `bounce`, or `bounceOff` to make the sprites interact in the right way.\n\n[//]: # (https://images.code.org/682567536f824cc930ebed5c1b936e5f-image-1470415888369.png)\n\n[//]: # (https://images.code.org/8a6915fe703f4fe097094cad1e754a6f-image-1470415888371.png)\n\n[//]: # (https://images.code.org/0b9f5ca88dc99fc08d472fdba87d6e32-image-1470417254115.png)\n\n[//]: # (https://images.code.org/2085e5de29f7170465b0c7bd5e6b56e9-image-1470417254116.png)",
        "CSD U3 collisions car intro_markdown_instruction": "# Frog Jump\n\nLook at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?\n\n[//]: #  (https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png)\n\n[//]: #  (https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png)\n\n[//]: #  (https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png)",
        "CSD U3 collisions car intro_2018_markdown_instruction": "# Frog Jump\n\nLook at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?\n\n[//]: #  (https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png)\n\n[//]: #  (https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png)\n\n[//]: #  (https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png)",
        "CSD U3 collisions car_markdown_instruction": "# Improve Your Game\n\nNow that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.\n\n# Do This\n\nUse the `if`, `isTouching`, `playsound`, and any other blocks you want to add effects when your sprites collide.  You should have at least two effects.\n\n_Challenge: Can you add a score board to the top of the screen?  How would your game keep score, and how would the score be displayed?_",
        "CSD U3 collisions collide_markdown_instruction": "# Save your treasure\n\nThe pirate is trying to steal your treasure!  Use the arrow keys to move the pirate around the screen.  Can you change the code so the pirate can't get past the wall?\n\n# Do This\n\nUse the `collide` block to make the pirate sprite collide into the wall.\n\n[//]: #(https://images.code.org/04a7b28f7228570602238fed87420aab-image-1470944619236.png)\n\n[//]: #(https://images.code.org/8f7ec18621c97ce98d22337a1e21ddab-image-1470944619234.png)\n\n[//]: #(https://images.code.org/6b749a05857ea1e88fa46f7e2740c77c-image-1470944619235.png)",
        "CSD U3 collisions debug isTouching_markdown_instruction": "# Debugging Collisions\n\nThe balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?\n\n# Do This\n* Run the code and use the arrow keys to move the tack to pop the balloon.\n* In the code below, change `balloon.debug = false` to `balloon.debug = true`.\n* Add a new `debug` block to the code and set the tack sprite's debug property to `true`.\n* Run the code again, then discuss with your partner why the balloon is popping early.\n\n*Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?*\n\n[//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\n\n[//]: # (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\n\n[//]: # (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)\n\n[//]: # (https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png)\n\n[//]: # (https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png)",
        "CSD U3 collisions debug isTouching_2018_markdown_instruction": "# Debugging Collisions\n\nThe balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?\n\n# Do This\n* Run the code and use the arrow keys to move the tack to pop the balloon.\n* In the code below, change `balloon.debug = false` to `balloon.debug = true`.\n* Add a new `debug` block to the code and set the tack sprite's debug property to `true`.\n* Run the code again, then discuss with your partner why the balloon is popping early.\n\n*Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?*\n\n[//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\n\n[//]: # (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\n\n[//]: # (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)\n\n[//]: # (https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png)\n\n[//]: # (https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png)",
        "CSD U3 collisions debug_markdown_instruction": "# Debug\n\nSometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.\n\n# Do This\n\nThese two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!\n\n* Run the code and watch the way that the coins interact.\n* Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.\n* Change the gold coin's starting x position to 51 and run the code again.\n* Discuss with a partner: Why do you think the coins are bouncing strangely?",
        "CSD U3 collisions debug_2018_markdown_instruction": "# Debug\n\nSometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.\n\n# Do This\n\nThese two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!\n\n* Run the code and watch the way that the coins interact.\n* Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.\n* Change the gold coin's starting x position to 51 and run the code again.\n* Discuss with a partner: Why do you think the coins are bouncing strangely?",
        "CSD U3 collisions displace diagonal_markdown_instruction": "# Diagonal Elevator\n\nLast time we saw balloon, it pushed the feather all the way off screen.  What do you think will happen when the balloon moves away from the feather while it's moving it?\n\n# Do This\n\nUse the `displace` block to make the balloon sprite push the feather sprite, and watch what happens when the sprites stop touching each other.\n\n[//]: # (https://images.code.org/a6c891b044cea1b6d8649a153e13739b-image-1470316517410.png)\n\n[//]: # (https://images.code.org/af2df53196186e50a58f64f6559a53ca-image-1470316589121.png)\n\n[//]: # (https://images.code.org/fb739254c4d2f6745977a26e0481162a-image-1470316780326.png)\n\n[//]: # (https://images.code.org/341bb1ce73ba812f2bd0afeb01e08aad-image-1470316853020.png)",
        "CSD U3 collisions displace intro_markdown_instruction": "# Displace\n\nThe interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.\n\n# Do This\n\nSomeone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?\n\n* Find the line of code where the `sprite.displace()` block is used and fix the error.",
        "CSD U3 collisions displace intro_2018_markdown_instruction": "# Displace\n\nThe interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.\n\n# Do This\n\nSomeone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?\n\n* Find the line of code where the `sprite.displace()` block is used and fix the error.",
        "CSD U3 collisions displace x_markdown_instruction": "# Program a Sprite Interaction\n\nYou should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?\n\n# Do This\n\nThe giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.\n\n* Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.\n\n[//]: # (https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png)\n\n[//]: # (https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png)",
        "CSD U3 collisions displace x_2018_markdown_instruction": "# Program a Sprite Interaction\n\nYou should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?\n\n# Do This\n\nThe giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.\n\n* Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.\n\n[//]: # (https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png)\n\n[//]: # (https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png)",
        "CSD U3 collisions displace y_markdown_instruction": "# Write Your Own Sprite Interaction\n\nIn the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.\n\n# Do This\n\nThe elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.\n\n* Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.",
        "CSD U3 collisions displace y_2018_markdown_instruction": "# Write Your Own Sprite Interaction\n\nIn the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.\n\n# Do This\n\nThe elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.\n\n* Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.",
        "CSD U3 collisions egg template_markdown_instruction": "# Template Level\n\n[//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\n\n[//]: #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\n\n[//]: #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\n\n[//]: #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\n\n[//]: #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\n\n[//]: #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)",
        "CSD U3 collisions egg template_2018_markdown_instruction": "# Template Level\n\n[//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\n\n[//]: #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\n\n[//]: #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\n\n[//]: #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\n\n[//]: #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\n\n[//]: #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)",
        "CSD U3 collisions egg_markdown_instruction": "# Applesauce\n\nWhen the apple hits the blender, the blender should turn on.\n\n# Do This\n\nUse the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.\n\n*Challenge: Can you make the apple disappear when it touches the blender?*\n\n[//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\n\n[//]: #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\n\n[//]: #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\n\n[//]: #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\n\n[//]: #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\n\n[//]: #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)",
        "CSD U3 collisions egg2_markdown_instruction": "# Making Sounds\n\nYou can also use code to play a blender sound.\n\n# Do This\n\nUse the `playSound` block from the \"World\" drawer to play the \"https://docs.code.org/sounds/blender.mp3\" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png)\n\n[//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\n\n[//]: #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\n\n[//]: #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\n\n[//]: #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\n\n[//]: #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\n\n[//]: #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)\n\n[//]: #  (https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png)",
        "CSD U3 collisions egg2_2018_markdown_instruction": "# Making Sounds\n\nYou can also use code to play a blender sound.\n\n# Do This\n\nUse the `playSound` block from the \"World\" drawer to play the \"https://docs.code.org/sounds/blender.mp3\" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png)\n\n[//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\n\n[//]: #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\n\n[//]: #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\n\n[//]: #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\n\n[//]: #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\n\n[//]: #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)\n\n[//]: #  (https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png)",
        "CSD U3 collisions egg_2018_markdown_instruction": "# Applesauce\n\nWhen the apple hits the blender, the blender should turn on.\n\n# Do This\n\nUse the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.\n\n*Challenge: Can you make the apple disappear when it touches the blender?*\n\n[//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\n\n[//]: #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\n\n[//]: #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\n\n[//]: #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\n\n[//]: #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\n\n[//]: #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)",
        "CSD U3 collisions flyman add obstacles_markdown_instruction": "# Flyer Game - Add Obstacle\n\nThis is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.\n\n<img src=\"https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png\" style=\"float:right;width:200px\">\n\n# Do This\n\nAdd an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.\n\n* Add a new sprite to your game called \"obstacle\".\n* In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.\n* Use the `sprite.setAnimation()` block to give your sprite the image you chose.\n* Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.",
        "CSD U3 collisions flyman add obstacles_2018_markdown_instruction": "# Flyer Game - Add Obstacle\n\nThis is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.\n\n<img src=\"https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png\" style=\"float:right;width:200px\">\n\n# Do This\n\nAdd an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.\n\n* Add a new sprite to your game called \"obstacle\".\n* In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.\n* Use the `sprite.setAnimation()` block to give your sprite the image you chose.\n* Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.",
        "CSD U3 collisions flyman bounceOff_markdown_instruction": "# Flyer Game - Interacting with the Obstacle\n\nYou don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.\n\n# Do This\n\n* Add code to your game that prevents your player from moving through the obstacle.\n* If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.\n* Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?",
        "CSD U3 collisions flyman bounceOff_2018_markdown_instruction": "# Flyer Game - Interacting with the Obstacle\n\nYou don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.\n\n# Do This\n\n* Add code to your game that prevents your player from moving through the obstacle.\n* If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.\n* Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?",
        "CSD U3 collisions flyman change colliders_markdown_instruction": "# Flyer Game - Change Colliders\n\nRight now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.\n\n# Do This\n\n* Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.\n* Set your sprites' debug properties to `true` to make sure your game is working the way you want.\n* Play your game to make sure it's working the way you want.",
        "CSD U3 collisions flyman change colliders_2018_markdown_instruction": "# Flyer Game - Change Colliders\n\nRight now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.\n\n# Do This\n\n* Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.\n* Set your sprites' debug properties to `true` to make sure your game is working the way you want.\n* Play your game to make sure it's working the way you want.",
        "CSD U3 collisions flyman displace coin_markdown_instruction": "# Flyer Game - Coin Behind the Obstacle\n\nRight now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.\n\n# Do This\n\n* Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.\n* Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?",
        "CSD U3 collisions flyman displace coin_2018_markdown_instruction": "# Flyer Game - Coin Behind the Obstacle\n\nRight now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.\n\n# Do This\n\n* Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.\n* Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?",
        "CSD U3 collisions flyman make it your own_markdown_instruction": "# Flyer Game - Make It Your Own\n\nTime to make this game your own by using what you've learned about sprite interactions.\n\n# Do This\n\nAdd at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.\n\n* Create \"edge\" sprites to keep your character from bouncing out.\n* Add platforms to the game for your character to navigate around.\n* Add another obstacle to your game.\n* Create another idea of your own.",
        "CSD U3 collisions flyman make it your own_2018_markdown_instruction": "# Flyer Game - Make It Your Own\n\nTime to make this game your own by using what you've learned about sprite interactions.\n\n# Do This\n\nAdd at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.\n\n* Create \"edge\" sprites to keep your character from bouncing out.\n* Add platforms to the game for your character to navigate around.\n* Add another obstacle to your game.\n* Create another idea of your own.",
        "CSD U3 collisions getSpeed_markdown_instruction": "# Dashboard\n\nHere's a car that can be controlled with the arrow keys.  The dashboard at the bottom should show the car's speed and direction, even when it is off the screen.\n\n# Do This\n\n* Use the `getDirection()` block to turn the compass needle to the car's current direction. [Show me where](#triggercallout=code_triggered1)\n* Use the `getSpeed()` block to display the car's current speed on the dashboard, instead of 0. [Show me where](#triggercallout=code_triggered2)\n\n*Challenge: Can you also show the car's current location on the dashboard?*\n\n[//]: #(https://images.code.org/b87e51b8ed026ca239cbf629c9a58b26-image-1472571454000.png)\n\n[//]: #(https://images.code.org/669fd48b2a28602220c2d07b717c1ace-image-1472571454002.png)\n\n[//]: #(https://images.code.org/e3013d8428f54f7fbde63d0a4a8eaafb-image-1472571782304.png)",
        "CSD U3 collisions horse_markdown_instruction": "# Rainbow Horse\n\nWhen the rainbow touches the horse, it should turn into a unicorn.\n\n# Do This\n\nUse the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.\n\n[//]: #  (https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png)\n\n[//]: #  (https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png)\n\n[//]: #  (https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png)\n\n[//]: #  (https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png)",
        "CSD U3 collisions horse_2018_markdown_instruction": "# Rainbow Horse\n\nWhen the rainbow touches the horse, it should turn into a unicorn.\n\n# Do This\n\nUse the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.\n\n[//]: #  (https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png)\n\n[//]: #  (https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png)\n\n[//]: #  (https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png)\n\n[//]: #  (https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png)",
        "CSD U3 collisions isTouching intro_markdown_instruction": "# isTouching()\n\nWriting out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the *target*).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.\n\n# Do This\n\nInside the draw loop, drag the `isTouching` block into the `if` block.  &nbsp;&nbsp; ( [Show me where](#triggercallout=code_triggered) )\n\n*Hint: Don't forget to change the \"sprite\" to \"balloon\" and the \"target\" to \"tack\".*\n\n[//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\n\n[//]: # (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\n\n[//]: # (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)",
        "CSD U3 collisions isTouching intro_2018_markdown_instruction": "# isTouching()\n\nWriting out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the *target*).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.\n\n# Do This\n\nInside the draw loop, drag the `isTouching` block into the `if` block.  &nbsp;&nbsp; ( [Show me where](#triggercallout=code_triggered) )\n\n*Hint: Don't forget to change the \"sprite\" to \"balloon\" and the \"target\" to \"tack\".*\n\n[//]: # (https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png)\n\n[//]: # (https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png)\n\n[//]: # (https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png)",
        "CSD U3 collisions obstacle_markdown_instruction": "# Mouse Maze\n\nThe mouse needs to find its way through the maze to get to the cheese, but right now it passes through the walls.  Can you change the code so that the mouse is blocked by the walls?\n\n# Do This\n\nAdd a `displace`, `collide`, `bounce`, or `bounceOff` block in the draw loop to make the sprites interact in the right way.\n\n[//]: # (https://images.code.org/cefb99d244b9167314128578e477808c-image-1470948228670.png)\n\n[//]: # (https://images.code.org/e0cf14ae384355129b32b73ef64ed77e-image-1470948281047.png)",
        "CSD U3 collisions open_markdown_instruction": "# Your Choice\n\nYou've seen sprites do many things when they collide with each other: rotate, disappear, change animation, or even make a new sprite appear on the screen.  Now it's your turn to choose what the sprites can do.  Decide what two animations you want to use for your sprite, and what you want to happen when they touch each other, then code your choice.  You may also choose to change the position, speed, and direction of your sprites.\n\n# Do This\n* Decide what your sprites should look like, and use `setAnimation` to give them that image\n* Change the starting position of your sprites in the `createSprite` block\n* Use `setSpeedAndDirection` or `velocityX` and `velocityY` to make your sprites move how you want\n* Use the `if` block, with `isTouching` and `rotate`, `visible`, `setAnimation` or any other block to make your sprites react when they collide.",
        "CSD U3 collisions overlap x_markdown_instruction": "# Turtle Race\n\nThe turtle moves forward every time you press the left key.  When he touches the finish line, he should get a trophy.  The trophy will appear when `isTouchingX` is true.  Can you add code to make sure it is set to true when the turtle gets to the finish line?\n\n# Do This\n\nAdd code inside the draw loop to set the values of the variables that have been created for you.  Then, test your program by playing the game.\n\n\n[//]: #  (https://images.code.org/af2cffe952997258eb6b5573cfe9a29f-image-1470188585528.png)\n\n[//]: #  (https://images.code.org/d2eb9684743d45ef1e10ff4602936107-image-1470188590517.png)\n\n[//]: #  (https://images.code.org/98aee1ed11c7e00cd66718b4c232ab66-image-1470190293465.png)\n\n[//]: #  (https://images.code.org/fb129d34e3089763f35dfc8980d705ea-image-1470191576501.png)\n\n[//]: #  (https://images.code.org/3fc6da739dfd31b256618a560c12a076-image-1470191923150.png)",
        "CSD U3 collisions overlap y_markdown_instruction": "# Fried Egg\n\nIt's breakfast time!  When the egg hits the pan, it should start to fry.  Can you add code so that isTouchingX is set to true at the right time?\n\n# Do This\n\nSet the values of the variables so that `isTouchingX` is true when the egg hits the pan.\n\n[//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\n\n[//]: #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\n\n[//]: #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\n\n[//]: #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\n\n[//]: #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\n\n[//]: #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)",
        "CSD U3 collisions overlap_markdown_instruction": "# IDEK\n\nThis is Tracey's idea.  Apparently horses turn into unicorns when they go through rainbows?  Use your arrow keys to aim the rainbow at the unicorn, then hit the space bar to make it fly toward the horse.\n\n# Do This\n\nUse two `if` blocks together to change the sprite's animation when the two sprites touch each other.  Then play the game to test your code.\n\n[//]: #  (https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png)\n\n[//]: #  (https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png)\n\n[//]: #  (https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png)\n\n[//]: #  (https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png)",
        "CSD U3 collisions pinball_markdown_instruction": "# Panda Game\n\nPress \"Run\" to try out the game on the left.  You can use the left and right arrow keys to control the paddle.  What types of sprite interactions do you see?  Which ones will use the `isTouching` block?  Which interactions have their own blocks?\n\n# Do This\n\nPlay the game a few times and discuss with your partner what how you would program the different sprite interactions.\n",
        "CSD U3 collisions pinball2_markdown_instruction": "# Panda Game\n\nHere is the same game, but missing most of the interactions.  All of the missing interactions should be inside the \"spriteInteractions\" function.  ([Show me where](#triggercallout=code_triggered))  The comments will help you remember which interactions are missing.\n\n# Do This\n\nUse the blocks you know to program back the missing interactions.\n",
        "CSD U3 collisions predict set velocity_markdown_instruction": "# Setting Velocity\n\nThis program creates two sprites, one that's standing still in the middle of the screen and the other that moves towards it. Notice the one important line of code in this program\n\n\tif(sprite1.isTouching(sprite2)){\n\t\tsprite2.velocityX = sprite1.velocityX;\n    }\n\n# Predict\n\nWhat do you think will happen when the two sprites touch? Write your answer and reasonings in the space below. Then run the code to see for yourself.\n\n",
        "CSD U3 collisions setCollider_markdown_instruction": "# setCollider\n\nSprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a \"rectangle\" or a \"circle\".  By default all colliders are \"rectangle\".\n\n# Do This\n\n* Find the `sprite.setCollider()` block for the gold coin, and change it from \"rectangle\" to \"circle\".\n* Add a new `sprite.setCollider()` block for the silver coin, and choose \"circle\" for the shape of the collider.\n* Run the code again to see how the sprites bounce.\n\n\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\n\n[//]: #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)",
        "CSD U3 collisions setCollider_2018_markdown_instruction": "# setCollider\n\nSprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a \"rectangle\" or a \"circle\".  By default all colliders are \"rectangle\".\n\n# Do This\n\n* Find the `sprite.setCollider()` block for the gold coin, and change it from \"rectangle\" to \"circle\".\n* Add a new `sprite.setCollider()` block for the silver coin, and choose \"circle\" for the shape of the collider.\n* Run the code again to see how the sprites bounce.\n\n\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\n\n[//]: #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)",
        "CSD U3 collisions sidescroll2_markdown_instruction": "# Improve Your Game\n\nNow that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.\n\n*Note: The `playSound` block now has an extra parameter called \"loop\" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop.*\n\n# Do This\n\n* Add at least two effects when your sprites collide.\n\n*Challenge: Add a scoreboard to the top of your screen.*\n",
        "CSD U3 collisions sidescroll2_2018_markdown_instruction": "# Improve Your Game\n\nNow that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.\n\n*Note: The `playSound` block now has an extra parameter called \"loop\" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop.*\n\n# Do This\n\n* Add at least two effects when your sprites collide.\n\n*Challenge: Add a scoreboard to the top of your screen.*\n",
        "CSD U3 collisions sundae_markdown_instruction": "# collide()\n\nThe `collide` block is similar to `displace`, but it makes the sprite that uses it stop when it is touching the other sprite.  Can you use this to make the cherry stop when it gets to the top of the ice cream sundae?\n\n# Do This\n\nUse the `collide` block to make the cherry sprite stop when it runs into the ice cream sprite.\n\n[//]: # (https://images.code.org/491fb8bff907a183bd1cf0061689d193-image-1470419927625.png)\n\n[//]: # (https://images.code.org/ea2066d640e74284b8c48e382f56bf1b-image-1470419927627.png)",
        "CSD U3 collisions tennis_markdown_instruction": "# Tennis\n\nComplete the tennis game by making sure the ball and the racket interact in the right way. You can use your up and down arrows to control the racket.\n\n# Do This\n\nAdd a `displace`, `collide`, `bounce`, or `bounceOff` block in the draw loop to make the sprites interact as they do in the picture.\n\n_Challenge: Can you add a scoreboard that will add a point every time the ball is hit, and subtract one every time it's missed?_\n\n[//]: # (https://images.code.org/8d8cf039f50114c07a21e73bbc1c8dfe-image-1470418244037.png)\n\n[//]: # (https://images.code.org/d05be653ae7e4717353dffd08af9c656-image-1470418244039.png)",
        "CSD U3 collisions turtle_markdown_instruction": "# Debugging Sprite Interactions\n\nSprite interactions just run some code when they're called. The interactions are not \"remembered\" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.\n\n# Do This\n\nThe turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?\n\n* Run the code and try to make the turtle collide with the tree.\n* Look through the code and discuss with your partner what the problem is.\n* Correct the code, then run it again to make sure it works.",
        "CSD U3 collisions turtle_2018_markdown_instruction": "# Debugging Sprite Interactions\n\nSprite interactions just run some code when they're called. The interactions are not \"remembered\" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.\n\n# Do This\n\nThe turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?\n\n* Run the code and try to make the turtle collide with the tree.\n* Look through the code and discuss with your partner what the problem is.\n* Correct the code, then run it again to make sure it works.",
        "CSD U3 collisions types_markdown_instruction": "# Collision Types\n\nThere are four types of collisions that we use in Game Lab.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.\n\n## displace\n\nThe `displace` block causes the sprite to push the target as long as they are touching each other. The sprite keeps moving normally.\n\n## collide\n\nThe `collide` block makes the sprite stop when it runs into the target.  If the target is moving, it will push the sprite with it.  The target keeps moving normally.\n\n## bounce\n\nThe `bounce` block makes the sprite and the target bounce when they touch each other.  Both the sprite and the target change how they are moving.\n\n## bounceOff\n\nThe `bounceOff` block makes the sprite bounce off the target.  The target keeps moving normally.\n\n\n\n# Do This\n\nChoose the best block to model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered) )\n\n[//]: # (https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png)\n\n[//]: # (https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png)",
        "CSD U3 collisions types_2018_markdown_instruction": "# Collision Types\n\nThere are four types of collisions that we use in Game Lab.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.\n\n## displace\n\nThe `displace` block causes the sprite to push the target as long as they are touching each other. The sprite keeps moving normally.\n\n## collide\n\nThe `collide` block makes the sprite stop when it runs into the target.  If the target is moving, it will push the sprite with it.  The target keeps moving normally.\n\n## bounce\n\nThe `bounce` block makes the sprite and the target bounce when they touch each other.  Both the sprite and the target change how they are moving.\n\n## bounceOff\n\nThe `bounceOff` block makes the sprite bounce off the target.  The target keeps moving normally.\n\n\n\n# Do This\n\nChoose the best block to model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered) )\n\n[//]: # (https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png)\n\n[//]: # (https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png)",
        "CSD U3 counter example_markdown_instruction": "# The Counter Pattern\n\nIn this program, the draw loop is used to make the sprites move across the screen.\n\n# Do This\n\n* Run the code and discuss with your partner how you think it works.",
        "CSD U3 dancing alien_markdown_instruction": "# Sprites in the Draw Loop\n\nBy changing sprite properties in the draw loop, you can animate your characters. \n\nThis animation has also been slowed down.  At the beginning of the program the `World.frameRate` block has been used to set the frame rate to 10. Usually the frame rate is 30. Feel free to explore different frame rates.\n\n# Do This\n* Run the code to see how it works.\n* Discuss with your partner why some code is inside the draw loop and some code is outside.\n* Try changing the frame rate and running the code again.",
        "CSD U3 dancing alien_2018_markdown_instruction": "# Sprites in the Draw Loop\n\nBy changing sprite properties in the draw loop, you can animate your characters. \n\nThis animation has also been slowed down.  At the beginning of the program the `World.frameRate` block has been used to set the frame rate to 10. Usually the frame rate is 30. Feel free to explore different frame rates.\n\n# Do This\n* Run the code to see how it works.\n* Discuss with your partner why some code is inside the draw loop and some code is outside.\n* Try changing the frame rate and running the code again.",
        "CSD U3 ellipse_markdown_instruction": "<img src=\"https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png\" style=\"float:right;width:150px;\">\n\n# ellipse\n\nYou can use `ellipse` to make a circle.\n\n# Do This\n\n* Look at the code that makes the ellipse.\n* Add a new ellipse of a different color.\n",
        "CSD U3 ellipse_2018_markdown_instruction": "<img src=\"https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png\" style=\"float:right;width:150px;\">\n\n# ellipse\n\nYou can use `ellipse` to make a circle.\n\n# Do This\n\n* Look at the code that makes the ellipse.\n* Add a new ellipse of a different color.\n",
        "CSD U3 finishing touches_markdown_instruction": "# Finishing Touches\n\nNow that you have the basis for your game, it's time to add some finishing touches.\n\nTo make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.\n\n* Find a way to keep your player from going off the edges of the screen.\n* Add a different item for your player to collect or avoid that are worth different point values.\n* Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.\n* Add sprites that move in the background of your game.\n* Make another background to switch to when the score gets even higher, or when the game ends.\n* Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.\n* If your game has platforms, try making the objects in your game interact with these platforms in some way.",
        "CSD U3 finishing touches_2018_markdown_instruction": "# Finishing Touches\n\nNow that you have the basis for your game, it's time to add some finishing touches.\n\nTo make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.\n\n* Find a way to keep your player from going off the edges of the screen.\n* Add a different item for your player to collect or avoid that are worth different point values.\n* Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.\n* Add sprites that move in the background of your game.\n* Make another background to switch to when the score gets even higher, or when the game ends.\n* Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.\n* If your game has platforms, try making the objects in your game interact with these platforms in some way.",
        "CSD U3 game animations_markdown_instruction": "# Create your Animations\n\nNext you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.\n",
        "CSD U3 game animations_2018_markdown_instruction": "# Create your Animations\n\nNext you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.\n",
        "CSD U3 game backgrounds_markdown_instruction": "# Create your Backgrounds\n\nNext, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.\n\n* [Show me the block to create a new function](#triggercallout=callout1)\n* [Show me the area in the code to put my function](#triggercallout=callout2)\n\nAfter you create your functions, test them by calling them inside the draw loop, one background per test.\n\n* [Show me the block to call my function](#triggercallout=callout3)",
        "CSD U3 game backgrounds_2018_markdown_instruction": "# Create your Backgrounds\n\nNext, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.\n\n* [Show me the block to create a new function](#triggercallout=callout1)\n* [Show me the area in the code to put my function](#triggercallout=callout2)\n\nAfter you create your functions, test them by calling them inside the draw loop, one background per test.\n\n* [Show me the block to call my function](#triggercallout=callout3)",
        "CSD U3 game choose background_markdown_instruction": "# Choose your Backgrounds\n\nNow that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11](/s/csd3/stage/19/puzzle/11).\n\nAfter you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.\n",
        "CSD U3 game choose background_2018_markdown_instruction": "# Choose your Backgrounds\n\nNow that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 15 Level 11](/s/csd3/stage/15/puzzle/11).\n\nAfter you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.\n",
        "CSD U3 game create sprites_markdown_instruction": "# Create your Sprites\n\nNext you will create your sprites and give them starting properties in the \"Create Sprites\" area of your code.  For each sprite your should:\n\n* Create the sprite in the correct place on the screen\n* Set its animation (or color and size)\n* Set its velocity and rotation speed, if needed\n* Set its collider and bounciness, if needed\n\nAfter you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.\n\nIf your sprites position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.\n",
        "CSD U3 game create sprites_2018_markdown_instruction": "# Create your Sprites\n\nNext you will create your sprites and give them starting properties in the \"Create Sprites\" area of your code.  For each sprite your should:\n\n* Create the sprite in the correct place on the screen\n* Set its animation (or color and size)\n* Set its velocity and rotation speed, if needed\n* Set its collider and bounciness, if needed\n\nAfter you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.\n\nIf your sprites position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.\n",
        "CSD U3 game display boards_markdown_instruction": "# Display Boards\n\nNow that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9](/s/csd3/stage/16/puzzle/9) for an example of how to make a scoreboard.\n\nFor each display board:\n* Create a function to display the information\n* Call the function in the draw loop\n\nBe sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.\n",
        "CSD U3 game display boards_2018_markdown_instruction": "# Display Boards\n\nNow that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 12 Puzzle 9](/s/csd3/stage/12/puzzle/9) for an example of how to make a scoreboard.\n\nFor each display board:\n* Create a function to display the information\n* Call the function in the draw loop\n\nBe sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.\n",
        "CSD U3 game interactions_markdown_instruction": "# Sprite Interactions\n\nThe last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3/stage/21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3/stage/20/puzzle/15) as examples.\n\nFor each interaction:\n* Create a function in the functions area of your code\n* Call the function inside the draw loop\n\nAfter you make each function, run the code to test it before making another.",
        "CSD U3 game interactions_2018_markdown_instruction": "# Sprite Interactions\n\nThe last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3/stage/21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3/stage/20/puzzle/15) as examples.\n\nFor each interaction:\n* Create a function in the functions area of your code\n* Call the function inside the draw loop\n\nAfter you make each function, run the code to test it before making another.",
        "CSD U3 game sprite movement_markdown_instruction": "# Sprite Movement Functions\n\nNow you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 17 Puzzle 9](/s/csd3/stage/17/puzzle/9) and `playerFall` in [Lesson 17 Puzzle 14](/s/csd3/stage/17/puzzle/14).\n\nFor each movement:\n* Create a function that will make the sprite move in that way\n* Call the function inside the draw loop\n",
        "CSD U3 game sprite movement_2018_markdown_instruction": "# Sprite Movement Functions\n\nNow you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 17 Puzzle 9](/s/csd3/stage/17/puzzle/9) and `playerFall` in [Lesson 17 Puzzle 14](/s/csd3/stage/17/puzzle/14).\n\nFor each movement:\n* Create a function that will make the sprite move in that way\n* Call the function inside the draw loop\n",
        "CSD U3 game user controls_markdown_instruction": "# User Controls\n\nNext, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](/s/csd3/stage/20/puzzle/13) as an example.",
        "CSD U3 game user controls_2018_markdown_instruction": "# User Controls\n\nNext, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](/s/csd3/stage/20/puzzle/13) as an example.",
        "CSD U3 game variables_markdown_instruction": "# Create your Variables\n\nFirst, you'll need to create all of your variables and put them in the variables area of your code.\n* [Show me the block](#triggercallout=callout1)\n* [Show me the area in the code](#triggercallout=callout2)\n\nDon't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.",
        "CSD U3 game variables_2018_markdown_instruction": "# Create your Variables\n\nFirst, you'll need to create all of your variables and put them in the variables area of your code.\n* [Show me the block](#triggercallout=callout1)\n* [Show me the area in the code](#triggercallout=callout2)\n\nDon't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.",
        "CSD U3 keydown conditional-2018_markdown_instruction": "# Changing Sprites\n\nYou saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are \"x\", \"up\" and \"space\".\n\nWe can use `keyDown` as an input to an `if` statement to change our animations based on key presses!\n\n# Do This\n* Run the code and try pressing the \"p\" and \"h\" keys.\n* Look inside the `if` statement to see how the code works.\n* Add a block inside the third `if` statement to change the animation to a different animal.\n\n*Challenge: When you use `setAnimation`, it keeps the new animation until you change it again.  Can you change the code so that the sprite will automatically go back to a giraffe when you're not holding one of the keys down?*",
        "CSD U3 keydown conditional_markdown_instruction": "# Changing Sprites\n\nYou saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are \"x\", \"up\" and \"space\".\n\nWe can use `keyDown` as an input to an `if` statement to change our animations based on key presses!\n\n# Do This\n* Run the code and try pressing the up and down arrows.\n* Look inside the `if` statement to see how the code works.\n* Add a block inside the third `if` statement to change the animation to a different animal.\n\n*Hint: you can use the rabbit that's already in the Animations tab, or add a new animation.*",
        "CSD U3 keydown conditional_2018_markdown_instruction": "# Changing Sprites\n\nYou saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are \"x\", \"up\" and \"space\".\n\nWe can use `keyDown` as an input to an `if` statement to change our animations based on key presses!\n\n# Do This\n* Run the code and try pressing the \"p\" and \"h\" keys.\n* Look inside the `if` statement to see how the code works.\n* Add a block inside the third `if` statement to change the animation to a different animal.\n\n*Challenge: When you use `setAnimation`, it keeps the new animation until you change it again.  Can you change the code so that the sprite will automatically go back to a giraffe when you're not holding one of the keys down?*",
        "CSD U3 my-rect_markdown_instruction": "# rect(x,y)\n\nWelcome to Game Lab, where you can create interactive animations and games!   \n\nIn class you already practiced the basics of putting shapes on a grid.  In Game Lab, you'll do the same with the display area on the left.\n\n# Do This\n\n* Look at the line of code in the workspace below these instructions ( [Show me where](#triggercallout=block_trigger) ) and discuss with your partner where you think the shape will be dawn on the grid.  (insert picture of block here) \n* Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png\" width=100> to run the program and see what happens. ( [Show me where](#triggercallout=run_trigger) )\n* Change the numbers in the two different openings, then try running the program again. \n* Try to place the rectangle near the bottom right of the screen",
        "CSD U3 picture_markdown_instruction": "# Challenge: Draw an Image\n\n_Check with your teacher before starting any of the challenges._\n\nIn the previous lesson you and your partner created several interesting images. See if you can recreate one of them using code.",
        "CSD U3 picture_2018_markdown_instruction": "# Challenge: Draw an Image\n\n_Check with your teacher before starting any of the challenges._\n\nIn the previous lesson you and your partner created several interesting images. See if you can recreate one of them using code.\n",
        "CSD U3 platform background1_markdown_instruction": "# Background\n\nThe first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))\n\nIn order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))\n\nThere is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.\n\n# Do this\n\n* Read the code for `background1`.\n* Fill the `background2` function with new code for a second background.\n* Test your `background2` function by calling it inside the draw loop.\n\n_Hint: It's much easier to copy, paste, and make small changes to your code in text mode._",
        "CSD U3 platform background1_2018_markdown_instruction": "# Background\n\nThe first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))\n\nIn order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))\n\nThere is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.\n\n# Do this\n\n* Read the code for `background1`.\n* Fill the `background2` function with new code for a second background.\n* Test your `background2` function by calling it inside the draw loop.\n\n_Hint: It's much easier to copy, paste, and make small changes to your code in text mode._",
        "CSD U3 platform background2_markdown_instruction": "# Choosing your Background\n\nNow that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 19 Level 11](/s/csd3/stage/19/puzzle/11)\n\n# Do This\n\n\n* Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.\n* Test your code by changing the start score to 100, then running to code to see whether the background changes.\n\n_Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._\n",
        "CSD U3 platform background2_2018_markdown_instruction": "# Choosing your Background\n\nNow that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 19 Level 11](/s/csd3/stage/19/puzzle/11)\n\n# Do This\n\n\n* Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.\n* Test your code by changing the start score to 100, then running to code to see whether the background changes.\n\n_Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._\n",
        "CSD U3 platform challenge_markdown_instruction": "# Improve Your Game\n\nImprove your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.\n\n* Choose new animations for your player, platform, and items.\n* Prevent your player from going off the side of the screen.\n* Add a different type of item for the player to collect or avoid.\n* Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.\n* Make your player's animation change direction when the player changes direction.\n* Change the player to only jump when it is on a platform.\n* Add another background and make it appear when the score gets even higher.\n* Make your items interact with the platforms in some way.",
        "CSD U3 platform challenge1_markdown_instruction": "# Collect Items\n\nLast, you'll want your player to collect the items falling from the top of the screen.\n\n# Do This\n\n* Create a `collectItems` function and add it to the \"functions\" area of your code.\n* Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.\n* Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Stage 12 Puzzle 8](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/8) for an example.\n* Call the function inside the draw loop, in the \"update sprites\" area of your code.\n* Run the code to test your function.",
        "CSD U3 platform challenge_2018_markdown_instruction": "# Improve Your Game\n\nImprove your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.\n\n* Choose new animations for your player, platform, and items.\n* Prevent your player from going off the side of the screen.\n* Add a different type of item for the player to collect or avoid.\n* Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.\n* Make your player's animation change direction when the player changes direction.\n* Change the player to only jump when it is on a platform.\n* Add another background and make it appear when the score gets even higher.\n* Make your items interact with the platforms in some way.",
        "CSD U3 platform draw loop_markdown_instruction": "# Draw Loop\n\nOnce you have functions that can draw what you want, you can put them inside a draw loop.\n\n# Do This\n\n* Add the `function draw() {}` (draw loop) block into the workspace.\n* Inside the draw loop, use an `if` block to choose the correct background function to use [Remind me how](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/13/puzzle/10)\n* After the if statement, use the function you wrote to display the current information\n* Test your code by changing the starting value of your variables and running it to see whether the correct information and background are drawn.",
        "CSD U3 platform items_markdown_instruction": "# Create your Items\n\nNext, you need to add in the items that fall from the top of the screen.  In [Stage 11 Puzzle 6](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/11/puzzle/6), you modeled falling using the counter pattern on `velocityY`.  You can use the same pattern to make your items fall from the sky.  In our sample game, our carrots rotated and bounced off the platforms, but you can choose to add any other type of interaction that you like in the next level.\n\n# Do This\n\n* Create an item sprite with the label and starting position that you put on your worksheet.\n* Give the sprite the starting properties you wrote on your worksheet.\n* Run the code to test your sprite.\n* Create a function that checks whether the sprite is off the bottom of the screen, and loops it back to the top of the screen if it is.  (Look at [Stage 11 Bubble 16](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/11/puzzle/16) to see an example of code that loops a sprite.)\n* Run the code to test your sprite.",
        "CSD U3 platform items1_markdown_instruction": "# Create an Item\n\n<img src=\"https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif\" style=\"float:right;\">\n\nNext, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.\n\n# Do This\n\n* Use the `createSprite` block to make an item sprite in the \"create sprites\" section of your code.\n* Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.\n* Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.\n* Run the code to test your sprite.",
        "CSD U3 platform items1_2018_markdown_instruction": "# Create an Item\n\n<img src=\"https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif\" style=\"float:right;\">\n\nNext, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.\n\n# Do This\n\n* Use the `createSprite` block to make an item sprite in the \"create sprites\" section of your code.\n* Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.\n* Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.\n* Run the code to test your sprite.",
        "CSD U3 platform items3_markdown_instruction": "# Make your Second Item\n\n<img src=\"https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif\" style=\"float: right\">\n\nNext, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.\n\nYou'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.\n\n# Do This\n\n* Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.\n* Change the names of the sprite in the new lines.  For example, if you named your original sprite \"star\", you could name this one \"star2\".\n* Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.\n* Change the sprite name in the new lines of code.\n* Run your code to test it.\n",
        "CSD U3 platform items3_2018_markdown_instruction": "# Make your Second Item\n\n<img src=\"https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif\" style=\"float: right\">\n\nNext, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.\n\nYou'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.\n\n# Do This\n\n* Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.\n* Change the names of the sprite in the new lines.  For example, if you named your original sprite \"star\", you could name this one \"star2\".\n* Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.\n* Change the sprite name in the new lines of code.\n* Run your code to test it.\n",
        "CSD U3 platform platform2_markdown_instruction": "# Loop the Platform Sprite\n\n<img src=\"https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif\" style=\"float: right;\">\n\nRight now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](/s/csd3/stage/15/puzzle/13) to see an example of a sprite looping around a screen.\n\n# Do This\n\n* Use the `function` block to create a `loopPlatforms` function at the bottom of your code.\n* Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.\n* Call the function inside the draw loop, in the \"update sprites\" area.\n* Run the code to test your sprite.\n\n_Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_",
        "CSD U3 platform platform2_2018_markdown_instruction": "# Loop the Platform Sprite\n\n<img src=\"https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif\" style=\"float: right;\">\n\nRight now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](/s/csd3/stage/15/puzzle/13) to see an example of a sprite looping around a screen.\n\n# Do This\n\n* Use the `function` block to create a `loopPlatforms` function at the bottom of your code.\n* Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.\n* Call the function inside the draw loop, in the \"update sprites\" area.\n* Run the code to test your sprite.\n\n_Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_",
        "CSD U3 platform platform3_markdown_instruction": "# Make your Second Platform\n\n<img src=\"https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif\" style=\"float:right;\">\n\nMaking a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in *text mode*, so be sure to try it out if you haven't already.\n\nYou'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.\n\n# Do This\n\n* Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.\n* Change the names of the sprite in the new lines.  For example, if you named your original sprite \"platform\", you could name this one \"platform2\".\n* Change the starting position of your new platform sprite.\n* Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.\n* Change the sprite name in the new lines of code.\n* Run your code to test it.\n\n_Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._\n",
        "CSD U3 platform platform3_2018_markdown_instruction": "# Make your Second Platform\n\n<img src=\"https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif\" style=\"float:right;\">\n\nMaking a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in *text mode*, so be sure to try it out if you haven't already.\n\nYou'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.\n\n# Do This\n\n* Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.\n* Change the names of the sprite in the new lines.  For example, if you named your original sprite \"platform\", you could name this one \"platform2\".\n* Change the starting position of your new platform sprite.\n* Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.\n* Change the sprite name in the new lines of code.\n* Run your code to test it.\n\n_Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._\n",
        "CSD U3 platform player1_markdown_instruction": "# Create your Player\n\n<img src=\"https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif\" style=\"float:right\">\n\nNow you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.\n\n# Do This\n\n* Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.\n* Use `setAnimation` to give it the correct image.\n* Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](/s/csd3/stage/17/puzzle/4).\n* Call the `playerFall` function inside the draw loop.\n* Run the code to test your sprite.",
        "CSD U3 platform player1_2018_markdown_instruction": "# Create your Player\n\n<img src=\"https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif\" style=\"float:right\">\n\nNow you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.\n\n# Do This\n\n* Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.\n* Use `setAnimation` to give it the correct image.\n* Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](/s/csd3/stage/17/puzzle/4).\n* Call the `playerFall` function inside the draw loop.\n* Run the code to test your sprite.",
        "CSD U3 platform player2_markdown_instruction": "# User Controls\n\nNext, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.\n\n# Do This\n\n* Create a new `controlPlayer` function in the \"functions\" area of your code.\n* Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys.  Look at <a href=\"/s/csd3/stage/12/puzzle/7\" target=\"_blank\"> Lesson 12 Puzzle 7 </a> for examples.\n* Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed.  Look at <a href=\"/s/csd3/stage/15/puzzle/11\" target=\"_blank\"> Lesson 15 Puzzle 11 </a> for an example.\n* Call the `controlPlayer` function inside the draw loop.\n* Run the game and test your code.",
        "CSD U3 platform player2_2018_markdown_instruction": "# User Controls\n\nNext, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.\n\n# Do This\n\n* Create a new `controlPlayer` function in the \"functions\" area of your code.\n* Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys.  Look at <a href=\"/s/csd3/stage/12/puzzle/7\" target=\"_blank\"> Lesson 12 Puzzle 7 </a> for examples.\n* Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed.  Look at <a href=\"/s/csd3/stage/15/puzzle/11\" target=\"_blank\"> Lesson 15 Puzzle 11 </a> for an example.\n* Call the `controlPlayer` function inside the draw loop.\n* Run the game and test your code.",
        "CSD U3 platform player2b_markdown_instruction": "# Add Reset\n\nNow that your player is falling, you can add code to reset him when he gets to the top.\n\n# Do This\n\n* Create a function that checks whether the player sprite is off the bottom of the screen, and decreases the number of lives by one if it is.\n* Use the function inside the draw loop.\n* Run the code to test your function.\n* Once you have decreased the lives, you need to check whether the player has run out.  Add code to your function that checks to see whether the player's lives equals 0.  If they do equal zero, use the `text` block to write \"GAME OVER\" in the middle of the screen.  Otherwise, reset the sprite to the top of the screen.\n",
        "CSD U3 platform player3_markdown_instruction": "# Player Interactions\n\nThe last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.\n\n# Do This\n\n* Create a `playerLands` function and add it to the \"functions\" area of your code.\n* Inside the function, use the `collide` block so that your player can land on both the platforms.\n* Call the function inside the draw loop.\n* Run the code to test your function.\n",
        "CSD U3 platform player3_2018_markdown_instruction": "# Player Interactions\n\nThe last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.\n\n# Do This\n\n* Create a `playerLands` function and add it to the \"functions\" area of your code.\n* Inside the function, use the `collide` block so that your player can land on both the platforms.\n* Call the function inside the draw loop.\n* Run the code to test your function.\n",
        "CSD U3 platform player4_markdown_instruction": "# Collect Items\n\nLast, you'll want your player to collect the items falling from the top of the screen.\n\n# Do This\n\n* Create a `collectItems` function and add it to the \"functions\" area of your code.\n* Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.\n* Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](/s/csd3/stage/16/puzzle/9) for an example.\n* Call the function inside the draw loop, in the \"update sprites\" area of your code.\n* Run the code to test your function.",
        "CSD U3 platform player4_2018_markdown_instruction": "# Collect Items\n\nLast, you'll want your player to collect the items falling from the top of the screen.\n\n# Do This\n\n* Create a `collectItems` function and add it to the \"functions\" area of your code.\n* Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.\n* Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](/s/csd3/stage/16/puzzle/9) for an example.\n* Call the function inside the draw loop, in the \"update sprites\" area of your code.\n* Run the code to test your function.",
        "CSD U3 platform sample_markdown_instruction": "# Platform Jumper\n\nThe game on the left is an example of a platform jumper.  Press \"Run\" to play it.  You can make the bunny bump with the space bar, and move it to the left and right with the arrow keys.  You score by collecting carrots, and if you score high enough, the background will change.\n\nYou have three lives, so if you fall to the bottom of the screen three times, the game will be over.\n\nYou already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.",
        "CSD U3 platform sample1_markdown_instruction": "# Platform Jumper\n\nThe game on the left is an example of a platform jumper.  Press \"Run\" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.\n\nYou already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.",
        "CSD U3 platform sample1_2018_markdown_instruction": "# Platform Jumper\n\nThe game on the left is an example of a platform jumper.  Press \"Run\" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.\n\nYou already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.",
        "CSD U3 platform sample2_markdown_instruction": "# Plane Jumper\n\nHere's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.\n\nChoose one or more of the following changes and add them to your game.\n* Choose new animations for your player, platform, and items.\n* Make it impossible for your player to go off the left or right of the screen.\n* Add a different type of item for the player to collect or avoid.\n* Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.\n\n",
        "CSD U3 platform sample2_2018_markdown_instruction": "# Plane Jumper\n\nHere's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.\n\nChoose one or more of the following changes and add them to your game.\n* Choose new animations for your player, platform, and items.\n* Make it impossible for your player to go off the left or right of the screen.\n* Add a different type of item for the player to collect or avoid.\n* Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.\n\n",
        "CSD U3 platform sample3_markdown_instruction": "# Bunny Jumper\n\nHere's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.\n\nChoose one or more of the following changes and add them to your game.\n* Make your player's animation change direction when the player changes direction.\n* Add another background and make it appear when the score gets even higher.\n* Make your items interact with the platforms in some way.\n\n",
        "CSD U3 platform sample3_2018_markdown_instruction": "# Bunny Jumper\n\nHere's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.\n\nChoose one or more of the following changes and add them to your game.\n* Make your player's animation change direction when the player changes direction.\n* Add another background and make it appear when the score gets even higher.\n* Make your items interact with the platforms in some way.\n\n",
        "CSD U3 platform scoreboard_markdown_instruction": "# Make the Scoreboard\n\n<img src=\"https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png\" style=\"float:right;\">\n\nYou'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text \"Score\" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](/s/csd3/stage/16/puzzle/9).\n\n# Do This\n\n* Read the code in the `showScore` function.\n* Call the function inside the draw loop, right after you draw the backgrounds.\n* Use the `text` block to display the score at the top of the screen.",
        "CSD U3 platform scoreboard_2018_markdown_instruction": "# Make the Scoreboard\n\n<img src=\"https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png\" style=\"float:right;\">\n\nYou'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text \"Score\" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](/s/csd3/stage/16/puzzle/9).\n\n# Do This\n\n* Read the code in the `showScore` function.\n* Call the function inside the draw loop, right after you draw the backgrounds.\n* Use the `text` block to display the score at the top of the screen.",
        "CSD U3 platform variable1_markdown_instruction": "# Score Variable\n\nNow that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.\n\nYou should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.\n\n# Do This\n\n* Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )\n* Set the score equal to 0.",
        "CSD U3 platform variable1_2018_markdown_instruction": "# Score Variable\n\nNow that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.\n\nYou should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.\n\n# Do This\n\n* Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )\n* Set the score equal to 0.",
        "CSD U3 platform variables_markdown_instruction": "# Variables and Display\n\nIn our sample game, we kept track of the score and the number of lives left, then displayed them at the top of the screen.  For your game, you'll need to create a variable for each piece of information you want to keep track of during the game.  Once you have your variables, you can create a function to display information at the top of the screen for the player.\n\n# Do This\n\n* Create the variables that you listed on your planning sheet and give them starting values.\n* Use the `text` block to display information about the variables on the screen.  You can use `textSize` and `fill` to change the way the text looks.\n* Make a new function and put the code that displays the information inside of it.\n\n_Hint: You can look at [Stage 12 Bubble 8](https://levelbuilder-studio.code.org/s/CSDU3-Draft/stage/12/puzzle/8) to see a working scoreboard.  Scroll down in the code until you see the comment \"draw score\"_",
        "CSD U3 rect_markdown_instruction": "# Explore Game Lab\n\nWelcome to Game Lab, where you can create interactive animations and games!   \n\nYou've already practiced the basics of putting shapes on a grid.  In Game Lab, you'll do the same with the display area on the left.\n\n# Do This\n\n* Look at the line of code in the workspace below these instructions ( [Show me where](#triggercallout=block_trigger) ) and discuss with your partner where you think the shape will be drawn on the grid.\n* Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png\" width=100> to run the program and see what happens. ( [Show me where](#triggercallout=run_trigger) )\n* Change the numbers inside the block, then try running the program again.\n* Try to place the rectangle near the bottom right of the screen.",
        "CSD U3 rect_2018_markdown_instruction": "# Explore Game Lab\n\nWelcome to Game Lab, where you can create interactive animations and games!   \n\nYou've already practiced the basics of putting shapes on a grid.  In Game Lab, you'll do the same with the display area on the left.\n\n# Do This\n\n* Look at the line of code in the workspace below these instructions ( [Show me where](#triggercallout=block_trigger) ) and discuss with your partner where you think the shape will be drawn on the grid.\n* Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png\" width=100> to run the program and see what happens.\n* Change the numbers inside the block, then try running the program again.\n* Try to place the rectangle near the bottom right of the screen.",
        "CSD U5 Amazon Data Video_markdown_instruction": "Watch this video to learn how this problem is solved by Amazon. As you watch think about what data is being collected and where it's coming from.",
        "CSD U5 Amazon Data Video_2018_markdown_instruction": "Watch this video to learn how this problem is solved by Amazon. As you watch think about what data is being collected and where it's coming from.",
        "CSD U5 Netflix Data Video_markdown_instruction": "Watch this video to learn how this problem is solved by Netflix. As you watch think about what data is being collected and where it's coming from.",
        "CSD U5 Netflix Data Video_2018_markdown_instruction": "Watch this video to learn how this problem is solved by Netflix. As you watch think about what data is being collected and where it's coming from.",
        "CSD U5 Pizza 2_markdown_instruction": "# Pizza Party\n\nWhen people work with data, they know to leave off answers that don't make sense, and that some answers, such as \"peppers\", \"pepppers\" and \"green peppers\", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.\n\nThis version of the app has a second column for data to be cleaned.\n\n## Do this\n* Click \"Run\" to see the new list of answers to be cleaned.\n* Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)\n* When you are finished, click \"Show Chart\" to see the new chart of cleaned answers.",
        "CSD U5 Pizza 2_2018_markdown_instruction": "# Pizza Party\n\nWhen people work with data, they know to leave off answers that don't make sense, and that some answers, such as \"peppers\", \"pepppers\" and \"green peppers\", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.\n\nThis version of the app has a second column for data to be cleaned.\n\n## Do this\n* Click \"Run\" to see the new list of answers to be cleaned.\n* Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)\n* When you are finished, click \"Show Chart\" to see the new chart of cleaned answers.",
        "CSD U5 Pizza_markdown_instruction": "# Pizza Party\n\nThe pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.\n\n# Do This\n* Click \"Run\" to see the list of answers that the classes have given.\n* Discuss with a partner what you think the chart of this data will look like.\n* Click \"Show Chart\" to see for yourself.\n\n# Spreadsheet Version\n\nThe pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.\n\n* This link will make you your own copy of the \"Pizza Topping Choices\" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)\n* You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).",
        "CSD U5 Pizza_2018_markdown_instruction": "# Pizza Party\n\nThe pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.\n\n# Do This\n* Click \"Run\" to see the list of answers that the classes have given.\n* Discuss with a partner what you think the chart of this data will look like.\n* Click \"Show Chart\" to see for yourself.\n\n# Spreadsheet Version\n\nThe pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.\n\n* This link will make you your own copy of the \"Pizza Topping Choices\" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)\n* You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).",
        "CSD U5 Waze Data Video_markdown_instruction": "Watch this video to learn how this problem is solved by Waze. As you watch think about what data is being collected and where it's coming from.",
        "CSD U5 Waze Data Video_2018_markdown_instruction": "Watch this video to learn how this problem is solved by Waze. As you watch think about what data is being collected and where it's coming from.",
        "CSD U5 binary 1_markdown_instruction": "# 5-Bit Number\n\nWhen you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.\n\nIn this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.\n\n# Do This\n\n* Click on the bits to turn them on and off, and see the different numbers you can make.\n* With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.\n* Click \"Edit\" to change the value of the left most bit.\n* Once you've decided on the value, try to make the following numbers: 16, 27, 31",
        "CSD U5 binary 1_2018_markdown_instruction": "# 5-Bit Number\n\nWhen you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.\n\nIn this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.\n\n# Do This\n\n* Click on the bits to turn them on and off, and see the different numbers you can make.\n* With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.\n* Click \"Edit\" to change the value of the left most bit.\n* Once you've decided on the value, try to make the following numbers: 16, 27, 31",
        "CSD U5 binary 3-new_markdown_instruction": "# Decoding multiple numbers\n\nHere's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.\n\n1. Most number of people lifted and thrown in two minutes. (4 bits)\n1. Most canned drinks opened by a parrot in one minute. (6 bits)\n\n# Do This\n* Decode the two numbers from the binary string.",
        "CSD U5 binary 4-new_markdown_instruction": "# Decoding multiple numbers\n\nHere's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.\n\n![](https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png)\n\n1. Most number of people lifted and thrown in two minutes. (4 bits)\n1. Most canned drinks opened by a parrot in one minute. (6 bits)\n\n# Do This\n* Decode the two numbers from the binary string.",
        "CSD U5 binary 4-new_2018_markdown_instruction": "# Decoding multiple numbers\n\nHere's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.\n\n![](https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png)\n\n1. Most number of people lifted and thrown in two minutes. (4 bits)\n1. Most canned drinks opened by a parrot in one minute. (6 bits)\n\n# Do This\n* Decode the two numbers from the binary string.",
        "CSD U5 binary 4_markdown_instruction": "# Bit Length\n\nIf you don't know how many bits long each number is, you won't be able to decode a string of numbers.\n\nFor example, the following binary string could be decoded many different ways.\n\n<img src=\"https://images.code.org/51fe16afb224a2cc4819def434f6ec9d-image-1502735454689.png\" style=\"height: 30px;\">\n\nIf you split the string like this, the string reads 71, 28, 28.\n\n<img src=\"https://images.code.org/03f40f140dbdbff92af0784911e66fa2-image-1502741759516.png\" style=\"height: 30px;\"> &nbsp;&nbsp; <img src=\"https://images.code.org/b5b34c9ec4d051bd81404756269b1cf0-image-1502741761216.png\" style=\"height: 30px;\"> &nbsp;&nbsp; <img src=\"https://images.code.org/b5b34c9ec4d051bd81404756269b1cf0-image-1502741761216.png\" style=\"height: 30px;\">\n\nIf you split it like this, the string reads 17, 249, 12.\n\n<img src=\"https://images.code.org/ec9a1533c32a23637f9d1021d318f496-image-1502741540345.png\" style=\"height: 30px;\"> &nbsp;&nbsp;  <img src=\"https://images.code.org/1239b8d5f24df95e6461165b92a41383-image-1502741542720.png\" style=\"height: 30px;\">  &nbsp;&nbsp; <img src=\"https://images.code.org/5e71958697e30b9874ed6f6028a02023-image-1502741545510.png\" style=\"height: 30px;\">\n\n\nTo solve this problem, people agree on a fixed length for every number.  The following string uses the same three numbers, but each number takes up exactly eight bits.\n\n\n<img src=\"https://images.code.org/2c55ec3f4ff236cb4ffa8d9b1b46895f-image-1502742909603.png\" style=\"height: 30px;\">\n\n# Do This\n\n* Use the binary widget to decode the string that uses eight bit numbers.\n* Check you answer with a partner to see whether you got the same answer.",
        "CSD U5 binary 5-new_markdown_instruction": "# Decoding multiple numbers\n\nHere's a widget that can calculate numbers up to to eight bits. You can use it to find the values of the two world records below.\n\nDon't forget to make sure that the \"1\" bit is always the right most bit.  If you have extra bits on the left side of the widget, just keep them turned off.\n\n![](https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14 PM.png)\n\n1. Longest tail on a dog (in inches) (5 bits)\n2. Most spoons balanced on someone's face (5 bits)\n\n# Do This\n* Decode the two numbers from a the binary string.",
        "CSD U5 binary 6-new_markdown_instruction": "# Decoding multiple numbers\n\nHere's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.\n\n![](https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png)\n\n1. Largest wind chime, in feet (? bits)\n2. Furthest arrow shot with someone's feet (in feet) (? bits)\n\n# Do This\n* Try to decode the two numbers from the binary string.\n* Discuss with your partner why you cannot know for sure whether your answer is correct.",
        "CSD U5 binary 6-new_2018_markdown_instruction": "# Decoding multiple numbers\n\nHere's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.\n\n![](https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png)\n\n1. Largest wind chime, in feet (? bits)\n2. Furthest arrow shot with someone's feet (in feet) (? bits)\n\n# Do This\n* Try to decode the two numbers from the binary string.\n* Discuss with your partner why you cannot know for sure whether your answer is correct.",
        "CSD U5 binary 7-new_markdown_instruction": "# Bit Length\n\nIf you don't know how many bits long each number is, you won't be able to decode a string of numbers.\n\nFor example, the following binary string could be decoded many different ways.\n\n![](https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png)\n\nIf you split the string like this, the string reads 10, 84.\n\n![](https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png) ![](https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png)\n\n\nIf you split it like this, the string reads 42, 20.\n\n![](https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png) ![](https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png)\n\nTo solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.\n\n![](https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png)\n\n# Do This\n\n* Use the binary widget to decode the string that uses eight bit numbers.\n* Check you answer with a partner to see whether you got the same answer.",
        "CSD U5 binary 7-new_2018_markdown_instruction": "# Bit Length\n\nIf you don't know how many bits long each number is, you won't be able to decode a string of numbers.\n\nFor example, the following binary string could be decoded many different ways.\n\n![](https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png)\n\nIf you split the string like this, the string reads 10, 84.\n\n![](https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png) ![](https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png)\n\n\nIf you split it like this, the string reads 42, 20.\n\n![](https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png) ![](https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png)\n\nTo solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.\n\n![](https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png)\n\n# Do This\n\n* Use the binary widget to decode the string that uses eight bit numbers.\n* Check you answer with a partner to see whether you got the same answer.",
        "CSD U5 black white images pixelation 2_markdown_instruction": "# Do This\n\nUse the pixelation widget to draw a smiley face\n\n![](https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47 PM.png)",
        "CSD U5 black white images pixelation 2_2018_markdown_instruction": "# Do This\n\nUse the pixelation widget to draw a smiley face\n\n![](https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47 PM.png)",
        "CSD U5 black white images pixelation 3_markdown_instruction": "# Do This\n\nThe width and height sliders are set incorrectly for this image so it doesn't look like anything. Change them until you find the image.\n\n![](https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17 PM.png)",
        "CSD U5 black white images pixelation 3_2018_markdown_instruction": "# Do This\n\nThe width and height sliders are set incorrectly for this image so it doesn't look like anything. Change them until you find the image.\n\n![](https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17 PM.png)",
        "CSD U5 black white images pixelation 4_markdown_instruction": "# Do This\n\nAdd eyebrows to this smiley face. Remember to use the \"Readable Format\" if you get stuck.\n\n![](https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37 PM.png)",
        "CSD U5 black white images pixelation 4_2018_markdown_instruction": "# Do This\n\nAdd eyebrows to this smiley face. Remember to use the \"Readable Format\" if you get stuck.\n\n![](https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37 PM.png)",
        "CSD U5 black white images pixelation 5_markdown_instruction": "# Do This\n\nNow it's your turn. Draw anything you want in the pixelation widget. Feel free to change the width and height of your image if you wish.",
        "CSD U5 black white images pixelation 5_2018_markdown_instruction": "# Do This\n\nNow it's your turn. Draw anything you want in the pixelation widget. Feel free to change the width and height of your image if you wish.",
        "CSD U5 black white images pixelation_markdown_instruction": "# Do This\n\nComplete the \"X\" shape by typing 0s and 1s. You can always click \"Readable Format\" if you want to clean up your work.",
        "CSD U5 black white images pixelation_2018_markdown_instruction": "# Do This\n\nComplete the \"X\" shape by typing 0s and 1s. You can always click \"Readable Format\" if you want to clean up your work.",
        "CSD U5 collection videos_markdown_instruction": "<img src=\"https://images.code.org/dbefd53cc9aaa2ee1c54f25afc88d860-image-1488492606296.jpg\" style=\"float:right;height:300px\">\n\n### Make a Recommendation\n\nMeScreen is a website where users can watch videos uploaded from all over the world. It has millions of videos and users and new ones every day.\n\nMeScreen recommends a Top Video to each of its users every day. You job is to collect information about your users and your videos to make the best recommendation you can.\n\n**What kinds of information should you collect AND how could you get it?**",
        "CSD U5 color image_markdown_instruction": "# Paint by Numbers\n\nLook at the binary code below.  Use the patterns of ones and zeros to create the picture the code represents. To paint each square, click on the color you want to use, then click on the square.\n\n\n`011 011 011 011 011 011 011 011 110 110`\n\n`011 011 111 111 111 011 011 011 110 110`\n\n`011 111 111 111 111 111 011 011 011 011`\n\n`011 011 111 111 111 011 011 011 011 011`\n\n`011 011 011 011 011 011 011 010 011 011`\n\n`011 011 011 011 011 011 010 010 010 011`\n\n`011 011 011 011 011 011 010 010 010 011`\n\n`011 011 011 011 011 011 011 000 011 011`\n\n`001 001 001 010 010 010 010 000 010 010`\n\n`001 001 001 001 010 010 010 010 010 010`",
        "CSD U6 Catch the Mouse prediction_markdown_instruction": "# Catch the Mouse\n\nThis is a clicker game, similar to the one that you built in the last lesson.\n\nLook at the code with your partner and answer the following question:\n\n* How many times do you need to click the mouse before the LED starts to blink?\n\nWrite your answer in the box below, then run the code and see what happens.",
        "CSD U6 Catch the Mouse prediction_2018_markdown_instruction": "# Catch the Mouse\n\nThis is a clicker game, similar to the one that you built in the last lesson.\n\nLook at the code with your partner and answer the following question:\n\n* How many times do you need to click the mouse before the LED starts to blink?\n\nWrite your answer in the box below, then run the code and see what happens.",
        "CSD U6 Catch the Mouse_markdown_instruction": "Embedded Prediction",
        "CSD U6 Catch the Mouse_2018_markdown_instruction": "Embedded Prediction",
        "CSD U6 Driver pt 2_markdown_instruction": "# Limiting Turn\n\nYou might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.\n\n# Do This\n\nFind a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.\n\n_Challenge_: Can you keep the car from going off the side of the screen?",
        "CSD U6 Driver pt 2_2018_markdown_instruction": "# Limiting Turn\n\nYou might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.\n\n# Do This\n\nFind a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.\n\n_Challenge_: Can you keep the car from going off the side of the screen?",
        "CSD U6 Driver pt1_markdown_instruction": "# Steering Wheel\n\nThis game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!\n\n\n# Do This\n\n* Make the car move down the screen while the program runs.\n* Give the car the ability to steer side to side.\n\nThink back to the programs you've made up until this point, how can you update these values?",
        "CSD U6 Driver pt1_2018_markdown_instruction": "# Steering Wheel\n\nThis game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!\n\n\n# Do This\n\n* Make the car move down the screen while the program runs.\n* Give the car the ability to steer side to side.\n\nThink back to the programs you've made up until this point, how can you update these values?",
        "CSD U6 LED all_markdown_instruction": "# Multi-function Light\n\nThis app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the \"on\" button works, and the \"off\" button is completely missing.\n\n# Do This\n* Add code to make the \"blink\" and \"pulse\" buttons work.\n* In design mode, add a new \"off\" button.\n* Add code to make the \"off\" button work.",
        "CSD U6 LED all_2018_markdown_instruction": "# Multi-function Light\n\nThis app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the \"on\" button works, and the \"off\" button is completely missing.\n\n# Do This\n* Add code to make the \"blink\" and \"pulse\" buttons work.\n* In design mode, add a new \"off\" button.\n* Add code to make the \"off\" button work.",
        "CSD U6 LEDbutton predict embed_markdown_instruction": "# Using Events\n\nThis program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click \"Run\" to check your answer.\n\n* Will the light turn on when the program is \"Run\"?  Why or why not?",
        "CSD U6 LEDbutton predict embed_2018_markdown_instruction": "# Using Events\n\nThis program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click \"Run\" to check your answer.\n\n* Will the light turn on when the program is \"Run\"?  Why or why not?",
        "CSD U6 LEDs color_markdown_instruction": "# Adding Some Color\n\nYou probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like \"blue\" or an RGB value using color `color()` command.\n\n# Do This\n\nUse the `.color()` command to set each of the color LEDs to a different color.",
        "CSD U6 LEDs color_2018_markdown_instruction": "# Adding Some Color\n\nYou probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like \"blue\" or an RGB value using color `color()` command.\n\n# Do This\n\nUse the `.color()` command to set each of the color LEDs to a different color.",
        "CSD U6 Pedometer_markdown_instruction": "# Jogger\n\nThis program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.\n\n# Do This\n\n* Change the event so it triggers every time the board is shaken.\n* Add code inside the event so that `steps` increases every time the board is shaken.",
        "CSD U6 Pedometer_2018_markdown_instruction": "# Jogger\n\nThis program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.\n\n# Do This\n\n* Change the event so it triggers every time the board is shaken.\n* Add code inside the event so that `steps` increases every time the board is shaken.",
        "CSD U6 add LED button_markdown_instruction": "# Using Events\n\nThis program has two buttons.  The \"on\" button works, but the \"off\" button still needs to be programmed.\n\n# Do This\n* Add code so that the second button turns the LED off.",
        "CSD U6 add LED button_2018_markdown_instruction": "# Using Events\n\nThis program has two buttons.  The \"on\" button works, but the \"off\" button still needs to be programmed.\n\n# Do This\n* Add code so that the second button turns the LED off.",
        "CSD U6 airplane predict markdown_markdown_instruction": "# Accelerometer\n\nLook at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!",
        "CSD U6 airplane predict markdown_2018_markdown_instruction": "# Accelerometer\n\nLook at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!",
        "CSD U6 analog challenge_markdown_instruction": "# Challenge\n\n_Check with your teacher before pursuing this challenge_\n\nNow that you've practiced taking input from the various analog sensors and changing their scale to meet your needs, can you come up with an interesting use for sensor data? It's easy to display the raw numbers coming out of a sensor, but far more interesting to present that data in different ways.\n\nConsider the following ways you might communicate sensor data:\n\n* Use the board outputs\n* Change the width, height, or position of a UI element\n* Use conditionals to display different images based on sensor values",
        "CSD U6 analog challenge_2018_markdown_instruction": "# Challenge\n\n_Check with your teacher before pursuing this challenge_\n\nNow that you've practiced taking input from the various analog sensors and changing their scale to meet your needs, can you come up with an interesting use for sensor data? It's easy to display the raw numbers coming out of a sensor, but far more interesting to present that data in different ways.\n\nConsider the following ways you might communicate sensor data:\n\n* Use the board outputs\n* Change the width, height, or position of a UI element\n* Use conditionals to display different images based on sensor values",
        "CSD U6 analog change_markdown_instruction": "# Change Event\n\nThe data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor \"change\" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.\n\n# Do This\n\nUsing the provided event handler, write a program that buzzes the buzzer and updates \"temp_value\" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.",
        "CSD U6 analog change_2018_markdown_instruction": "# Change Event\n\nThe data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor \"change\" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.\n\n# Do This\n\nUsing the provided event handler, write a program that buzzes the buzzer and updates \"temp_value\" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.",
        "CSD U6 analog data_markdown_instruction": "# Data Event\n\nEach of these analog sensors emits a special event called \"data\" which occurs every time new data comes in from the sensor. Using this event, we can write programs that continually update.\n\n# Do This\n\nThis is the first program you worked on in this lesson, let's see if we can make it continually update the sound reading using the \"data\" event.\n\n* Create an event handler to respond to sound sensor's \"data\" event\n* Move the existing code into your event handler",
        "CSD U6 analog data_2018_markdown_instruction": "# Data Event\n\nEach of these analog sensors emits a special event called \"data\" which occurs every time new data comes in from the sensor. Using this event, we can write programs that continually update.\n\n# Do This\n\nThis is the first program you worked on in this lesson, let's see if we can make it continually update the sound reading using the \"data\" event.\n\n* Create an event handler to respond to sound sensor's \"data\" event\n* Move the existing code into your event handler",
        "CSD U6 analog light_markdown_instruction": "# Light Sensor Updates\n\nThis app is very similar to the last, but we've added a button with the ID \"update_button\". Write a program that displays the current value of the light sensor every time the update button is clicked.\n\n# Do This\n\nUse an event handler to update the text of \"light_value\" using the `lightSensor.value` block.",
        "CSD U6 analog light_2018_markdown_instruction": "# Light Sensor Updates\n\nThis app is very similar to the last, but we've added a button with the ID \"update_button\". Write a program that displays the current value of the light sensor every time the update button is clicked.\n\n# Do This\n\nUse an event handler to update the text of \"light_value\" using the `lightSensor.value` block.",
        "CSD U6 analog rbg 1_markdown_instruction": "# Displaying Sensor Readings in Color\n\nIn the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.\n\n# Do This\n\nTo start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.\n\n* Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.\n* Create a variable for each of the three colors and assign each one to the value of a different sensor.\n* Use `console.log()` to test that your variables are in the correct range.\n\n_Hint: Order matters. You need to set the scale of a sensor before checking its value_\n\n_Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_",
        "CSD U6 analog rbg 1_2018_markdown_instruction": "# Displaying Sensor Readings in Color\n\nIn the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.\n\n# Do This\n\nTo start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.\n\n* Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.\n* Create a variable for each of the three colors and assign each one to the value of a different sensor.\n* Use `console.log()` to test that your variables are in the correct range.\n\n_Hint: Order matters. You need to set the scale of a sensor before checking its value_\n\n_Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_",
        "CSD U6 analog rbg 2_markdown_instruction": "# Putting Color on the Screen\n\nNow that your sensor data is in a scale that works for RGB, you can go about setting the screen color.\n\n# Do This\n\n* Add a `setProperty()` block and set it to change the screen's background color.\n* Add an `rgb()` block to the last parameter of `setProperty()`.\n* Use the three color variables you created as inputs to the `rgb()` block.",
        "CSD U6 analog rbg 2_2018_markdown_instruction": "# Putting Color on the Screen\n\nNow that your sensor data is in a scale that works for RGB, you can go about setting the screen color.\n\n# Do This\n\n* Add a `setProperty()` block and set it to change the screen's background color.\n* Add an `rgb()` block to the last parameter of `setProperty()`.\n* Use the three color variables you created as inputs to the `rgb()` block.",
        "CSD U6 analog rgb 3_markdown_instruction": "# Continuous Updates\n\nThis sensor-to-color app isn't super useful if it only sets the color once when you start the app. You can use the sensors' \"data\" event to make your app continually update the background color every time the value changes.\n\nMove your `setProperty()` block into a an event handler for one of the sensors to make the app update continually.",
        "CSD U6 analog rgb 3_2018_markdown_instruction": "# Continuous Updates\n\nThis sensor-to-color app isn't super useful if it only sets the color once when you start the app. You can use the sensors' \"data\" event to make your app continually update the background color every time the value changes.\n\nMove your `setProperty()` block into a an event handler for one of the sensors to make the app update continually.",
        "CSD U6 analog sound_markdown_instruction": "# Reading the Sound Sensor\n\nThe `soundSensor.value` block allows you to get the current sound sensor reading\n\n# Do This\n\nIn this app we've already added a text label with the id \"sound_value\". Using the `soundSensor.value` block, display the value of the sound sensor.\n\n_Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._\n\n![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)",
        "CSD U6 analog sound_2018_markdown_instruction": "# Reading the Sound Sensor\n\nThe `soundSensor.value` block allows you to get the current sound sensor reading\n\n# Do This\n\nIn this app we've already added a text label with the id \"sound_value\". Using the `soundSensor.value` block, display the value of the sound sensor.\n\n_Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._\n\n![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)",
        "CSD U6 analog temp_markdown_instruction": "# Make a Thermometer App\n\nWhile the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties `tempSensor.F` and `tempSensor.C` which convert the raw input value to either Fahrenheit or Celsius.\n\n# Do This\n\nMake a simple thermometer app that reads in values from the temperature sensor. Your app can display the temperature in either Fahrenheit or Celsius (or both!)\n\n* Using Design Mode, create a button for updating and a label to display the temperature\n* Add an event handler to respond to your update button being clicked\n* Add code to your event handler to read the temperature sensor and display the value on screen",
        "CSD U6 analog temp_2018_markdown_instruction": "# Make a Thermometer App\n\nWhile the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties `tempSensor.F` and `tempSensor.C` which convert the raw input value to either Fahrenheit or Celsius.\n\n# Do This\n\nMake a simple thermometer app that reads in values from the temperature sensor. Your app can display the temperature in either Fahrenheit or Celsius (or both!)\n\n* Using Design Mode, create a button for updating and a label to display the temperature\n* Add an event handler to respond to your update button being clicked\n* Add code to your event handler to read the temperature sensor and display the value on screen",
        "CSD U6 analog threshold_markdown_instruction": "# Change Threshold\n\nBy default a sensor's \"change\" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the \"change\" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a \"change\" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's \"change\" event only to trigger if its value increased or decreased by at least 100.\n\n# Do This\n\nThis app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.\n\n* Add a `soundSensor.threshold` block before the event handler\n* Test out which how different threshold values impact the \"change\" event\n* Choose a threshold value that makes the screen background change only when a loud noise is sensed.\n\n_Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._",
        "CSD U6 analog threshold_2018_markdown_instruction": "# Change Threshold\n\nBy default a sensor's \"change\" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the \"change\" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a \"change\" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's \"change\" event only to trigger if its value increased or decreased by at least 100.\n\n# Do This\n\nThis app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.\n\n* Add a `soundSensor.threshold` block before the event handler\n* Test out which how different threshold values impact the \"change\" event\n* Choose a threshold value that makes the screen background change only when a loud noise is sensed.\n\n_Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._",
        "CSD U6 array piano_markdown_instruction": "# Piano Panic\n\nSo far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.\n\nOur good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).\n\n# Do this\n\nThe `sharpNotes` array only has one item inside of it right now.\n\n* Fix the array so that the sharp keys on the piano can actually play the right note.\n\n_Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._",
        "CSD U6 array piano_2018_markdown_instruction": "# Piano Panic\n\nSo far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.\n\nOur good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).\n\n# Do this\n\nThe `sharpNotes` array only has one item inside of it right now.\n\n* Fix the array so that the sharp keys on the piano can actually play the right note.\n\n_Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._",
        "CSD U6 balloon clicker predict_markdown_instruction": "# Make the Balloon Fly\n\nIn this game, you have to click on the correct buttons to make the balloon fly into the sky.\n\nLook at the code with your partner and answer the following questions:\n\n* When does the value stored in the variable `correct` change?\n* Why does the program need this line: `var choice = randomNumber(1,3);`?\n\nOnce you have answered the questions, run the code and see what happens.",
        "CSD U6 board getters_markdown_instruction": "# Using the Circuit Playground\n\nYou can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.\n\nRead through the code and predict what the program will do, then hit \"Run\" to test your prediction.",
        "CSD U6 board getters_2018_markdown_instruction": "# Using the Circuit Playground\n\nYou can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.\n\nRead through the code and predict what the program will do, then hit \"Run\" to test your prediction.",
        "CSD U6 challenge motorcycle_markdown_instruction": "# Challenge\n\nUse this program to experiment some more with getting and setting properties. Some ideas you might try include:\n\n* Use the toggle switch to change the motorcycle's movement to go up and down.\n* Use a dropdown with color names to change the motorcycle's color\n* Make the buzzer or LED turn on when the motorcycle reaches the top or bottom of the screen.",
        "CSD U6 challenge motorcycle_2018_markdown_instruction": "# Challenge\n\nUse this program to experiment some more with getting and setting properties. Some ideas you might try include:\n\n* Use the toggle switch to change the motorcycle's movement to go up and down.\n* Use a dropdown with color names to change the motorcycle's color\n* Make the buzzer or LED turn on when the motorcycle reaches the top or bottom of the screen.\n",
        "CSD U6 change_markdown_instruction": "# Change\n\nIn the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the \"change\" event.\n\n# Do This\n\n* Look at the first event block in the program and find where it says \"change\".\n* Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.\n* Run your program, moving the slider to see whether the LED speed changes automatically.",
        "CSD U6 change_2018_markdown_instruction": "# Change\n\nIn the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the \"change\" event.\n\n# Do This\n\n* Look at the first event block in the program and find where it says \"change\".\n* Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.\n* Run your program, moving the slider to see whether the LED speed changes automatically.",
        "CSD U6 checkbox_markdown_instruction": "Predict Level",
        "CSD U6 circuit createLed_markdown_instruction": "# Creating Board Objects\n\nYou might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.\n\nThe new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.\n\n# Do This\n\nNow that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.\n\n* Keep your LED wired just as it was before (connected to pin 2)\n* Make sure you're in text mode, not block mode.\n* Drag out an `led.blink()` block below the comment `// Blink myLed`.\n* Replace the text `led` with `myLed`.\n* Test your code.",
        "CSD U6 circuit createLed_2018_markdown_instruction": "# Creating Board Objects\n\nYou might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.\n\nThe new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.\n\n# Do This\n\nNow that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.\n\n* Keep your LED wired just as it was before (connected to pin 2)\n* Make sure you're in text mode, not block mode.\n* Drag out an `led.blink()` block below the comment `// Blink myLed`.\n* Replace the text `led` with `myLed`.\n* Test your code.",
        "CSD U6 circuit mix_markdown_instruction": "# Mix and Match Circuits\n\nUsing the 8 numbered pins around the edge of the board, you can combine as many buttons and LEDs as you can fit, using a separate numbered pin for each circuit and a shared ground pin for all them.\n\n# Do This\n\nDisconnect any circuits currently attached to your board.\n\n* Create a button circuit connected to pin 0.\n* Create an LED circuit connected to pin 2.\n* Create a new button object for your button circuit with `createButton()`.\n* Create a new LED object for your LED circuit with `createLed()`\n* Add event handlers to turn on your new LED when your button is pressed down, and turn it back off when the button is released.\n\n_Tip: When sharing the ground pin with multiple circuits it can be useful to connect a larger conductive object (like a bare wire) to the pin and then connect all of your circuits to that larger object._",
        "CSD U6 circuit multi led_markdown_instruction": "# Wiring Multiple LEDs\n\nUsing the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.\n\n# Do This\n\nLeave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:\n\n* Add a `var myLed = createLed()` block.\n* Replace the variable label `myLed` with a unique label.\n* Make sure you're in text mode, not block mode.\n* Add an `led.blink()` command.\n* Replace the text `led` with your new LED variable.\n* Test your code.\n\n_Challenge: Try adding a third LED and make all three LED blink at different intervals._",
        "CSD U6 circuit multi led_2018_markdown_instruction": "# Wiring Multiple LEDs\n\nUsing the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.\n\n# Do This\n\nLeave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:\n\n* Add a `var myLed = createLed()` block.\n* Replace the variable label `myLed` with a unique label.\n* Make sure you're in text mode, not block mode.\n* Add an `led.blink()` command.\n* Replace the text `led` with your new LED variable.\n* Test your code.\n\n_Challenge: Try adding a third LED and make all three LED blink at different intervals._",
        "CSD U6 circuit pinMode_markdown_instruction": "# Wire a Circuit\n\nYou can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.\n\n# Do This\n\n* Using a wire, connect pin 2 to the positive (+) side of an LED\n* Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)\n* Run this program to test your circuit. If it worked, your LED should turn on.\n\n_Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._",
        "CSD U6 circuit pinMode_2018_markdown_instruction": "# Wire a Circuit\n\nYou can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.\n\n# Do This\n\n* Using a wire, connect pin 2 to the positive (+) side of an LED\n* Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)\n* Run this program to test your circuit. If it worked, your LED should turn on.\n\n_Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._",
        "CSD U6 circuit predict multi_markdown_instruction": "# Make a Prediction\n\nAll of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.",
        "CSD U6 circuit predict multi_2018_markdown_instruction": "# Make a Prediction\n\nAll of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.",
        "CSD U6 circuit project program_markdown_instruction": "# Program Your Prototype\n\nUsing your planning guide, program your prototype to simulate basic functionality.\n\n# Do This\n\nYour physical prototype should by now include one of the buttons wired to pin 0, and one of your location indicator LEDs connected to pin 2. That's enough to model how the prototype should work, you just need program the button to turn on and off the LED.\n\n* Create your LED and button objects using the appropriate `create` commands.\n* Program event handlers to respond to your button going down and up, which turn on and off the LED.",
        "CSD U6 circuit project template_markdown_instruction": "# Prototyping Circuit Project Template",
        "CSD U6 circuit project template_2018_markdown_instruction": "# Prototyping Circuit Project Template",
        "CSD U6 circuit smart bike blinker buttons_markdown_instruction": "# Smart Bike - Blinker Controls\n\nWith your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.\n\n# Do This\n\n* Add event handlers to blink the left turn signal when the left button is pressed.\n* Add event handlers to blink the right turn signal when the right button is pressed.\n* Test your code!\n\n_Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._",
        "CSD U6 circuit smart bike blinker buttons_2018_markdown_instruction": "# Smart Bike - Blinker Controls\n\nWith your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.\n\n# Do This\n\n* Add event handlers to blink the left turn signal when the left button is pressed.\n* Add event handlers to blink the right turn signal when the right button is pressed.\n* Test your code!\n\n_Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._",
        "CSD U6 circuit smart bike blinkers_markdown_instruction": "# Smart Bike - Blinkers\n\nUsing your planning guide, wire up the two LEDs that will serve as the blinkers. In order to make sure that the blinkers can be mounted at the end of the handlebars, make sure you wire them so that they can stretch out in opposite directions.\n\n# Do This\n\nUsing alligator clips, wire, or other conductive material, connect two LEDs to your board, one for each turn signal blinker.\n\n* Hook up each LED to a different numbered pin on the board.\n* Use the `createLed()` block to create an LED object for each blinker.\n\n_Tip: Make your wiring easier by considering how your blinkers will be mounted when selecting a pin to use._ ",
        "CSD U6 circuit smart bike blinkers_2018_markdown_instruction": "# Smart Bike - Blinkers\n\nUsing your planning guide, wire up the two LEDs that will serve as the blinkers. In order to make sure that the blinkers can be mounted at the end of the handlebars, make sure you wire them so that they can stretch out in opposite directions.\n\n# Do This\n\nUsing alligator clips, wire, or other conductive material, connect two LEDs to your board, one for each turn signal blinker.\n\n* Hook up each LED to a different numbered pin on the board.\n* Use the `createLed()` block to create an LED object for each blinker.\n\n_Tip: Make your wiring easier by considering how your blinkers will be mounted when selecting a pin to use._ ",
        "CSD U6 circuit smart bike buzzer_markdown_instruction": "# Smart Bike - Buzzer\n\nNow that we know how to add more buttons, you can add a button to control the smart bike's horn.\n\n# Do This\n\nUsing the button that you've already wired to the board, find a good spot to place your horn button. Then:\n\n* Create a button object for your horn button\n* Add an event handler to buzz when button is pressed\n\n_Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_",
        "CSD U6 circuit smart bike buzzer_2018_markdown_instruction": "# Smart Bike - Buzzer\n\nNow that we know how to add more buttons, you can add a button to control the smart bike's horn.\n\n# Do This\n\nUsing the button that you've already wired to the board, find a good spot to place your horn button. Then:\n\n* Create a button object for your horn button\n* Add an event handler to buzz when button is pressed\n\n_Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_",
        "CSD U6 circuit smart bike final_markdown_instruction": "# Smart Bike - Final Touches\n\nAt this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.\n\n# Do This\n\nYou may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.",
        "CSD U6 circuit smart bike final_2018_markdown_instruction": "# Smart Bike - Final Touches\n\nAt this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.\n\n# Do This\n\nYou may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.",
        "CSD U6 circuit smart bike light_markdown_instruction": "# Smart Bike - Headlight\n\nThe last part of the smart bike plan that we need to figure out is the automatic headlight.\n\n# Do This\n\nFirst you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.\n\n_Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._",
        "CSD U6 circuit smart bike light_2018_markdown_instruction": "# Smart Bike - Headlight\n\nThe last part of the smart bike plan that we need to figure out is the automatic headlight.\n\n# Do This\n\nFirst you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.\n\n_Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._",
        "CSD U6 colorLED on_markdown_instruction": "<img src=\"//curriculum.code.org/images/circuitplayground/colorLedonoff.gif\" style=\"float: right; margin: 10px;\">\n\n# colorLeds\n\nThe color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.\n\n# Do This\n\n* Read and run the code to see how the program turns the bottom left LED on and off.\n* Add more code to make both bottom LEDs turn on and off.",
        "CSD U6 colorLED on_2018_markdown_instruction": "<img src=\"//curriculum.code.org/images/circuitplayground/colorLedonoff.gif\" style=\"float: right; margin: 10px;\">\n\n# colorLeds\n\nThe color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.\n\n# Do This\n\n* Read and run the code to see how the program turns the bottom left LED on and off.\n* Add more code to make both bottom LEDs turn on and off.",
        "CSD U6 colorLeds debug_markdown_instruction": "<img src=\"https://images.code.org/e055be621221385d3503962bee5aa616-image-1491493475417.44.28.png\" style=\"width:250px; float:right\">\n\n# Debug: colorLeds\n\nCan you debug the index values so that the rainbow shows up on the board like in the picture?",
        "CSD U6 colorLeds debug_2018_markdown_instruction": "<img src=\"https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png\" style=\"width:250px; float:right\">\n\n# Debug: colorLeds\n\nCan you debug the index values so that the rainbow shows up on the board like in the picture?\n",
        "CSD U6 colorLeds intensity_markdown_instruction": "# Changing Brightness\n\nThe `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.\n\n# Do This\n\n* Read the program and see how the \"Bright\" and \"Dim\" buttons work.\n* Add code to make the \"Medium\" button make the rainbow a medium level of brightness (between \"Bright\" and \"Dim\"). ([Show me where](#triggercallout=code_triggered))",
        "CSD U6 colorLeds intensity_2018_markdown_instruction": "# Changing Brightness\n\nThe `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.\n\n# Do This\n\n* Read the program and see how the \"Bright\" and \"Dim\" buttons work.\n* Add code to make the \"Medium\" button make the rainbow a medium level of brightness (between \"Bright\" and \"Dim\"). ([Show me where](#triggercallout=code_triggered))",
        "CSD U6 colorLeds light pattern_markdown_instruction": "# Light Patterns\n\nThis app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.\n\n# Do This\n\nCreate a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.\n\nAfter you've created your new function, add a button and event handler so that you can switch between the two light patterns.",
        "CSD U6 colorLeds light pattern_2018_markdown_instruction": "# Light Patterns\n\nThis app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.\n\n# Do This\n\nCreate a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.\n\nAfter you've created your new function, add a button and event handler so that you can switch between the two light patterns.",
        "CSD U6 colorLeds predict embed_markdown_instruction": "# colorLEDs\n\nThis program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.\n\nWhat do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.",
        "CSD U6 colorLeds predict embed_2018_markdown_instruction": "# colorLEDs\n\nThis program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.\n\nWhat do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.",
        "CSD U6 direction theremin_markdown_instruction": "# Accelerated Music\n\nWe're going to make music with the board again, this time using the accelerometer. \n\nSince `buzzer.frequency` takes a number as a parameter, we can use the number that the accelerometer's pitch and roll properties return to change the frequency.\n\n# Do This\n* Make a variable to store either the accelerometer's pitch or roll, name it accordingly.\n* Use this variable with the buzzer, and alter it in some way. You can add or subtract from it, multiply it by another number, etc.\n* Run the program and alter it again to see what sort of sounds you get this time.",
        "CSD U6 directional LEDs roll_markdown_instruction": "# Roll\n\nThis program should display \"Left\" or \"Right\" on the screen, depending on which way the board is tilted.\n\n# Do this\n* Use the \"roll\" property of the accelerometer to determine whether the board is tilted to the left or right.\n* Use a conditional to change the text for the \"direction\" element to be either \"Left\" or \"Right\", depending on the board's orientation.",
        "CSD U6 directional LEDs roll_2018_markdown_instruction": "# Roll\n\nThis program should display \"Left\" or \"Right\" on the screen, depending on which way the board is tilted.\n\n# Do this\n* Use the \"roll\" property of the accelerometer to determine whether the board is tilted to the left or right.\n* Use a conditional to change the text for the \"direction\" element to be either \"Left\" or \"Right\", depending on the board's orientation.",
        "CSD U6 directional leds pitch_markdown_instruction": "# Pitch\n\nThis program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.\n\n# Do This\n* Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.\n* Run your code and test it a few times.",
        "CSD U6 directional leds pitch_2018_markdown_instruction": "# Pitch\n\nThis program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.\n\n# Do This\n* Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.\n* Run your code and test it a few times.",
        "CSD U6 emoji race demo_markdown_instruction": "# Emoji Race!\n\nThis is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.\n\n# Do This\n\nTurn to a classmate and make a list of the following information.\n\n* What components of the board does this program use?\n* What events is this program responding to?\n* What functions might you create to make this program work?",
        "CSD U6 emoji race demo_2018_markdown_instruction": "# Emoji Race!\n\nThis is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.\n\n# Do This\n\nTurn to a classmate and make a list of the following information.\n\n* What components of the board does this program use?\n* What events is this program responding to?\n* What functions might you create to make this program work?",
        "CSD U6 emotion machine 2_markdown_instruction": "# Changing Color\n\nIf you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.\n\n# Do This\n\nIn each of the event handlers, set the \"icon-color\" property of \"face\". Pick a warm color for happy and a cool color for sad.",
        "CSD U6 emotion machine 2_2018_markdown_instruction": "# Changing Color\n\nIf you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.\n\n# Do This\n\nIn each of the event handlers, set the \"icon-color\" property of \"face\". Pick a warm color for happy and a cool color for sad.",
        "CSD U6 emotion machine 3_markdown_instruction": "# Setting Text\n\nYour happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.\n\n# Do This\n\nMake each of the event handlers change the text of \"feeling\" to the appropriate emotion (either \"happy\" or \"sad\")",
        "CSD U6 emotion machine 3_2018_markdown_instruction": "# Setting Text\n\nYour happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.\n\n# Do This\n\nMake each of the event handlers change the text of \"feeling\" to the appropriate emotion (either \"happy\" or \"sad\")",
        "CSD U6 emotion machine 4_markdown_instruction": "# Add Another Emotion\n\nIn the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?\n\n# Do This\n\nUsing all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.\n\nWhen you're all done, feel free to add more emotions or features before submitting your final version.",
        "CSD U6 emotion machine 4_2018_markdown_instruction": "# Add Another Emotion\n\nIn the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?\n\n# Do This\n\nUsing all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.\n\nWhen you're all done, feel free to add more emotions or features before submitting your final version.",
        "CSD U6 emotion machine example_markdown_instruction": "# The Emotion Machine\n\nCheck out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.\n\n# Do This\n\nTry out the app, and then with a neighbor discuss:\n\n* What events handlers does this app use?\n* Which elements are being changed with code?\n* Which properties are being changed when you click a button?",
        "CSD U6 emotion machine example_2018_markdown_instruction": "# The Emotion Machine\n\nCheck out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.\n\n# Do This\n\nTry out the app, and then with a neighbor discuss:\n\n* What events handlers does this app use?\n* Which elements are being changed with code?\n* Which properties are being changed when you click a button?",
        "CSD U6 for loop button array_markdown_instruction": "# Looping Over Arrays\n\nOne of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.\n\n# Do This\n\nThis program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.\n\n* Add a second `setProperty` block inside the loop\n* Change the target to `buttons[i]`\n* Set the \"height\" property to 50\n\n![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)",
        "CSD U6 for loop button array_2018_markdown_instruction": "# Looping Over Arrays\n\nOne of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.\n\n# Do This\n\nThis program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.\n\n* Add a second `setProperty` block inside the loop\n* Change the target to `buttons[i]`\n* Set the \"height\" property to 50\n\n![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)",
        "CSD U6 for loop click exit_markdown_instruction": "# Knowing When to Stop\n\nIf you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.\n\n# Do This\n\nThis program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.\n\n_Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_",
        "CSD U6 for loop click exit_2018_markdown_instruction": "# Knowing When to Stop\n\nIf you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.\n\n# Do This\n\nThis program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.\n\n_Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_",
        "CSD U6 for loop click predict question_markdown_instruction": "# Make a Prediction\n\nRead through the code for this program and predict what will happen each time the button is clicked?",
        "CSD U6 for loop click predict question_2018_markdown_instruction": "# Make a Prediction\n\nRead through the code for this program and predict what will happen each time the button is clicked?",
        "CSD U6 for loop images_markdown_instruction": "# Constructing a for loop from scratch\n\nNow that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.\n\n# Do This\n\nWe've provided the design elements and an array to start with, but the rest is on you.\n\n* Add an event handler to respond to the \"thumbsup_button\" being clicked\n* Place a _for loop_ inside the event handler\n* Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`\n* Inside your _for loop_ change the current image to \"icon://fa-thumbs-o-up\"\n\n_Challenge: Can you add a second button that turns all of the images back to thumbs down?_",
        "CSD U6 for loop images_2018_markdown_instruction": "# Constructing a for loop from scratch\n\nNow that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.\n\n# Do This\n\nWe've provided the design elements and an array to start with, but the rest is on you.\n\n* Add an event handler to respond to the \"thumbsup_button\" being clicked\n* Place a _for loop_ inside the event handler\n* Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`\n* Inside your _for loop_ change the current image to \"icon://fa-thumbs-o-up\"\n\n_Challenge: Can you add a second button that turns all of the images back to thumbs down?_",
        "CSD U6 for loop led bonus 1_markdown_instruction": "# Challenge: Add More Buttons\n\nExtend the program by adding more buttons that change the board to different colors.\n\n# Do This\n\nAdd your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.",
        "CSD U6 for loop led bonus 1_2018_markdown_instruction": "# Challenge: Add More Buttons\n\nExtend the program by adding more buttons that change the board to different colors.\n\n# Do This\n\nAdd your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.",
        "CSD U6 for loop led bonus 2_markdown_instruction": "# Challenge: Color Patterns\n\nExtend the program by adding more buttons that create different patterns of light.\n\n# Do This\n\nAdd your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.\n\n_Hint: As you design your patterns, consider whether a function with parameters could help simplify your program._",
        "CSD U6 for loop led bonus 2_2018_markdown_instruction": "# Challenge: Color Patterns\n\nExtend the program by adding more buttons that create different patterns of light.\n\n# Do This\n\nAdd your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.\n\n_Hint: As you design your patterns, consider whether a function with parameters could help simplify your program._",
        "CSD U6 for loop led bonus 3_markdown_instruction": "# Challenge: Music\n\nUse what you learned in the Making Music lesson to make the board play music when the lights change.\n\n# Do This\n\nCreate some arrays of notes for different songs and add code to your event handlers to play your music.",
        "CSD U6 for loop led bonus 3_2018_markdown_instruction": "# Challenge: Music\n\nUse what you learned in the Making Music lesson to make the board play music when the lights change.\n\n# Do This\n\nCreate some arrays of notes for different songs and add code to your event handlers to play your music.",
        "CSD U6 for loop led function call_markdown_instruction": "# Calling Your Function\n\nNow that you've created a function that can behave differently based on the parameter it is passed, we can use it in multiple different event handlers to change the lights to different colors.\n\n# Do This\n\nWe'll start simple by just creating an event handler for \"button_red\"\n\n* Create a new event handler to respond to \"button_red\"\n* Inside your event handler, add a \"call function with parameter\" block\n![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)\n* Change the name from `myFunction` to `setLedsColor`\n* Change the parameter from `n` to \"red\" (note the quotation marks!)\n* Test your program, the \"Red\" button should turn all of your LEDs red",
        "CSD U6 for loop led function call_2018_markdown_instruction": "# Calling Your Function\n\nNow that you've created a function that can behave differently based on the parameter it is passed, we can use it in multiple different event handlers to change the lights to different colors.\n\n# Do This\n\nWe'll start simple by just creating an event handler for \"button_red\"\n\n* Create a new event handler to respond to \"button_red\"\n* Inside your event handler, add a \"call function with parameter\" block\n![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)\n* Change the name from `myFunction` to `setLedsColor`\n* Change the parameter from `n` to \"red\" (note the quotation marks!)\n* Test your program, the \"Red\" button should turn all of your LEDs red",
        "CSD U6 for loop led function finish_markdown_instruction": "# Finish the App\n\nIf your red button worked, the only thing left is to call your new function when all of the remaining buttons is pressed.\n\n# Do This\n\nFor each of the remaining buttons (green, blue, and white):\n\n* Create a new event handler\n* Call your `setLedsColor` function with the appropriate color (\"green\", \"blue\", or \"white\")\n* Test your program to make sure all of the buttons work\n\nWhen you've got all of your buttons working properly, click \"Submit\" to turn your program in.",
        "CSD U6 for loop led function finish_2018_markdown_instruction": "# Finish the App\n\nIf your red button worked, the only thing left is to call your new function when all of the remaining buttons is pressed.\n\n# Do This\n\nFor each of the remaining buttons (green, blue, and white):\n\n* Create a new event handler\n* Call your `setLedsColor` function with the appropriate color (\"green\", \"blue\", or \"white\")\n* Test your program to make sure all of the buttons work\n\nWhen you've got all of your buttons working properly, click \"Submit\" to turn your program in.",
        "CSD U6 for loop led function_markdown_instruction": "# Switching Colors with a Function\n\nWe could write a for loop for each different color that we want to set LEDs to, but that would be a lot of duplicate code that's _almost_ the same. This is the perfect place to use a _function with a parameter_! You've seen and used functions with parameters before, but now you're going to make one from scratch.\n\n# Do This\n\nCreate a function called `setLedsColor` that takes a parameter `color` and uses it to change the color of all of the LEDs\n\n* At the bottom of your program, drag out a function with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)\n* Change the name from `myFunction` to `setLedsColor`\n* Change the parameter name from `n` to `color`\n* Inside your function, add a _for loop_ that repeats until it reaches the end of `colorLeds`\n* Inside your _for loop_, set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`\n\nWe'll add event handlers that use this function in the next level, but for now you can test your function by your program and typing this into the debug console: `setLedsColor(\"blue\")`",
        "CSD U6 for loop led function_2018_markdown_instruction": "# Switching Colors with a Function\n\nWe could write a for loop for each different color that we want to set LEDs to, but that would be a lot of duplicate code that's _almost_ the same. This is the perfect place to use a _function with a parameter_! You've seen and used functions with parameters before, but now you're going to make one from scratch.\n\n# Do This\n\nCreate a function called `setLedsColor` that takes a parameter `color` and uses it to change the color of all of the LEDs\n\n* At the bottom of your program, drag out a function with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)\n* Change the name from `myFunction` to `setLedsColor`\n* Change the parameter name from `n` to `color`\n* Inside your function, add a _for loop_ that repeats until it reaches the end of `colorLeds`\n* Inside your _for loop_, set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`\n\nWe'll add event handlers that use this function in the next level, but for now you can test your function by your program and typing this into the debug console: `setLedsColor(\"blue\")`",
        "CSD U6 for loop led off_markdown_instruction": "# Turning all the Color LEDs Off\n\nNow that you've got one button to turn the color LEDs on, you can make another turn them off.\n\n# Do This\n\nAdd an event handler to \"button_off\" with a for loop that turns each color LED off.",
        "CSD U6 for loop led off_2018_markdown_instruction": "# Turning all the Color LEDs Off\n\nNow that you've got one button to turn the color LEDs on, you can make another turn them off.\n\n# Do This\n\nAdd an event handler to \"button_off\" with a for loop that turns each color LED off.",
        "CSD U6 for loop led on_markdown_instruction": "# Turning all the Color LEDs On\n\nNow that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.\n\n# Do This\n\nWe're going to start an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.\n\n* Add an event handler for \"button_on\"\n* Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`\n* Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED",
        "CSD U6 for loop led on_2018_markdown_instruction": "# Turning all the Color LEDs On\n\nNow that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.\n\n# Do This\n\nOver the next few levels, you'll create an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.  (Don't worry about the rest of the comments in the workspace.  You'll work on those in later levels.)\n\n* Add an event handler for \"button_on\"\n* Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`\n* Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED",
        "CSD U6 for loop led template_markdown_instruction": "# Arrays and For Loops RGB LED Project Template",
        "CSD U6 for loop led template_2018_markdown_instruction": "# Arrays and For Loops RGB LED Project Template",
        "CSD U6 for loop list.length_markdown_instruction": "# Array Length\n\nIn the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.\n\n# Do This\n\nChange the exit condition of this for loop so that it runs while `i < buttons.length`.",
        "CSD U6 for loop list.length_2018_markdown_instruction": "# Array Length\n\nIn the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.\n\n# Do This\n\nChange the exit condition of this for loop so that it runs while `i < buttons.length`.",
        "CSD U6 frequency_markdown_instruction": "# Frequency\n\nThis buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.\n\n# Do This\n* Using the `duration` variable as a model, create a `frequency` variable that gets the value from the *frequency* slider.\n* Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.\n* Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)",
        "CSD U6 frequency_2018_markdown_instruction": "# Frequency\n\nThis buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.\n\n# Do This\n* Using the `duration` variable as a model, create a `frequency` variable that gets the value from the *frequency* slider.\n* Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.\n* Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)",
        "CSD U6 game project board events_markdown_instruction": "# Board Events\n\nGo back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.",
        "CSD U6 game project board events_2018_markdown_instruction": "# Board Events\n\nGo back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.",
        "CSD U6 game project finish_markdown_instruction": "# Finishing Touches and Testing\n\nAt this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.\n\nOnce you're all done with this version of your program, click Submit to turn it in.",
        "CSD U6 game project finish_2018_markdown_instruction": "# Finishing Touches and Testing\n\nAt this point you should have most of your program in place. Now you need to add whatever finishing touches are needed and do a little testing. When your app is ready, have your classmates try it out. See if you can find any bugs, confusing design choices, or missing features you'd like to work on.\n\nOnce you're all done with this version of your program, click Submit to turn it in.",
        "CSD U6 game project functions call_markdown_instruction": "# Calling your Functions\n\nWith your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.",
        "CSD U6 game project functions call_2018_markdown_instruction": "# Calling your Functions\n\nWith your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.",
        "CSD U6 game project functions define_markdown_instruction": "# Define Your Functions\n\nDefine all of your functions at the bottom of the program, under the comment `// Create your functions here`.\n\nRight now we're only worrying about writing the function _definitions_, the part which looks like:\n\n```\nfunction myFunction() {\n\t// Things my function does\n}\n```",
        "CSD U6 game project functions define_2018_markdown_instruction": "# Define Your Functions\n\nDefine all of your functions at the bottom of the program, under the comment `// Create your functions here`.\n\nRight now we're only worrying about writing the function _definitions_, the part which looks like:\n\n```\nfunction myFunction() {\n\t// Things my function does\n}\n```",
        "CSD U6 game project screen links_markdown_instruction": "# UI Element Events\n\nNow that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the \"Events\" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.\n\nDon't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.",
        "CSD U6 game project screen links_2018_markdown_instruction": "# UI Element Events\n\nNow that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the \"Events\" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.\n\nDon't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.",
        "CSD U6 game project screens_markdown_instruction": "# Create Your Screens\n\nThe first thing you'll need to do is create all of the screens that you've sketched in your planning guide.\n\n# Do This\n\nUse Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.",
        "CSD U6 game project screens_2018_markdown_instruction": "# Create Your Screens\n\nThe first thing you'll need to do is create all of the screens that you've sketched in your planning guide.\n\n# Do This\n\nUse Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.",
        "CSD U6 get toggle_markdown_instruction": "# change\n\nThis program has events that detect three different changes: the toggle switch, the interval slider, and the duration slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.\n\n# Do This\n\n* Read the `updateLED` function to see what it does.\n* Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.",
        "CSD U6 get toggle_2018_markdown_instruction": "# change\n\nThis program has events that detect three different changes: the toggle switch, the interval slider, and the duration slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.\n\n# Do This\n\n* Read the `updateLED` function to see what it does.\n* Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.",
        "CSD U6 getProperty Demo_markdown_instruction": "# Updating Properties\n\nHere's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking \"Save\"\n\n_Note: you don't need to change any code here, but read through the provided code to see how it works._",
        "CSD U6 getProperty Demo_2018_markdown_instruction": "# Updating Properties\n\nHere's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking \"Save\"\n\n_Note: you don't need to change any code here, but read through the provided code to see how it works._",
        "CSD U6 getProperty Text Input_markdown_instruction": "# Getting Text\n\nThe `getProperty()` block makes it easy to take text input from a user. In this app, the user can type in their name, click \"Submit,\" and see their name below.\n\n# Do This\n\n* Drag out a `setProperty` block\n* For the first parameter, select \"name\" (the element's id)\n* For the second parameter, select \"text\" (the property you want to set)\n* For the third parameter, write your name in quotes (the value to set)\n\n_Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._",
        "CSD U6 getProperty board predict_markdown_instruction": "Predict Level (See contained level for markdown)",
        "CSD U6 getProperty board predict_2018_markdown_instruction": "Predict Level (See contained level for markdown)",
        "CSD U6 getProperty debug_markdown_instruction": "# Debug\n\nThis program should change the background color, text color, and text of the button \"click_me\" when it is clicked, but nothing seems to be working. Fix the code so that the program works as expected.",
        "CSD U6 getProperty predict_markdown_instruction": "# Debug\n\nThis program should change the background color, text color, and text of the button \"click_me\" when it is clicked, but nothing seems to be working. Fix the code so that the program works as expected.",
        "CSD U6 getProperty xy challenge_markdown_instruction": "# Challenge: Make it Your Own\n\nUse this program to experiment some more with getting and setting properties. Some ideas you might try include:\n\n* Add a button that returns the motorcycle to the center of the screen\n* Add buttons that move the motorcycle in two directions at once (eg up and right)\n* Use a dropdown with color names to change the motorcycle's color\n* Use a text input to control how much the motorcycle moves when you click the button",
        "CSD U6 getProperty xy design_markdown_instruction": "# Design Mode is Back!\n\nNow that you have Design Mode back, you can add some elements of your own. The motorcycle should be able to move up and down right now, but what about left and right?\n\n# Do This\n\nAdd two more buttons in design move for left and right, then program those buttons to move the motorcycle when clicked.",
        "CSD U6 getProperty xy_markdown_instruction": "# Movement with Properties\n\nEarlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.\n\n# Do This\n\nThis program includes two buttons to move the motorcycle up and down. Using the working \"up\" button as an example, can you make the \"down\" button work?",
        "CSD U6 getters debug_markdown_instruction": "# LED and Buzzer Controller\n\nThis program operates the LED and the buzzer, but it has some problems.\n\n# Do This\n* Read the program to understand how it is supposed to work.\n* Find and correct the bugs so that the program works properly.",
        "CSD U6 getters debug_2018_markdown_instruction": "# LED and Buzzer Controller\n\nThis program operates the LED and the buzzer, but it has some problems.\n\n# Do This\n* Read the program to understand how it is supposed to work.\n* Find and correct the bugs so that the program works properly.",
        "CSD U6 goalie_markdown_instruction": "# Updating Values with Data\n\nIn this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.\n\n\n# Do This\n\n* Use the counter pattern to update the ball's `x` value so that it moves across the screen.",
        "CSD U6 goalie_2018_markdown_instruction": "# Updating Values with Data\n\nIn this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.\n\n\n# Do This\n\n* Use the counter pattern to update the ball's `x` value so that it moves across the screen.",
        "CSD U6 interval predict_markdown_instruction": "# Interval\n\nNow we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.\n\n# Do This\n\n* Read the code and predict what the program will do, then hit \"Run\" to test your prediction.",
        "CSD U6 interval predict_2018_markdown_instruction": "# Interval\n\nNow we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.\n\n# Do This\n\n* Read the code and predict what the program will do, then hit \"Run\" to test your prediction.",
        "CSD U6 interval_markdown_instruction": "Predict Level",
        "CSD U6 interval_2018_markdown_instruction": "Predict Level",
        "CSD U6 iter create notes_markdown_instruction": "# Music Player\n\nThis program lets you play music by waving a wand over the different notes, but it's missing a function definition.\n\n# Do This\n* Create a `checkNotes()` function that will call `checkNote(note)` on everything in the \"notes\" array.",
        "CSD U6 iter create notes_2018_markdown_instruction": "# Music Player\n\nThis program lets you play music by waving a wand over the different notes, but it's missing a function definition.\n\n# Do This\n* Create a `checkNotes()` function that will call `checkNote(note)` on everything in the \"notes\" array.",
        "CSD U6 iter predict bubbles contained_markdown_instruction": "# Fish Bubbles\n\nThis program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?",
        "CSD U6 iter predict bubbles contained_2018_markdown_instruction": "# Fish Bubbles\n\nThis program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?",
        "CSD U6 iter predict bubbles_markdown_instruction": "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)",
        "CSD U6 iter predict bubbles_2018_markdown_instruction": "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)",
        "CSD U6 light pattern challenge_markdown_instruction": "# Challenge: More Patterns\n\nAdd some more patterns to your app. Find a partner and add their pattern as an option. Make sure to put each pattern into its own function.",
        "CSD U6 light pattern challenge_2018_markdown_instruction": "# Challenge: More Patterns\n\nAdd some more patterns to your app. Find a partner and add their pattern as an option. Make sure to put each pattern into its own function.",
        "CSD U6 light pattern off_markdown_instruction": "# Turning It Off\n\nWhen you start this app your lights are off, but as soon as choose a pattern, there's no way to turn the lights back off!\n\n# Do This\n\nCreate a function that turns all of the LEDs off, and then add a \"Off\" button to your app and make it turn off all of the color LEDs.",
        "CSD U6 light pattern off_2018_markdown_instruction": "# Turning It Off\n\nWhen you start this app your lights are off, but as soon as choose a pattern, there's no way to turn the lights back off!\n\n# Do This\n\nCreate a function that turns all of the LEDs off, and then add a \"Off\" button to your app and make it turn off all of the color LEDs.",
        "CSD U6 light show predict_markdown_instruction": "# Put on a Light Show\n\nThis app lets you put on a light show with the LED.\n\nLook at the code with your partner and answer the following questions:\n\n* What does this line of code do: `setProperty(\"screen\", \"background-color\", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?\n\nOnce you have answered the question, run the code and click the buttons to see what happens.",
        "CSD U6 light show predict_2018_markdown_instruction": "# Put on a Light Show\n\nThis app lets you put on a light show with the LED.\n\nLook at the code with your partner and answer the following questions:\n\n* What does this line of code do: `setProperty(\"screen\", \"background-color\", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?\n\nOnce you have answered the question, run the code and click the buttons to see what happens.",
        "CSD U6 making music w arrays mod_markdown_instruction": "# Changing Elements in Arrays\n\nSo far you’ve just been using the elements of arrays. Now, you're going to change what these elements are.\n\nIn the code below there's an array called `notes`, which is filled with notes the buzzer can play. Every time the left button is pressed, the buzzer plays one of these notes randomly. However, all of the notes in the `notes` array are the same.\n\n# Do this\n\n* Change the elements of `notes` so that each one is a different note.",
        "CSD U6 move motorcycle_markdown_instruction": "# Movement with Properties\n\nEarlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.\n\n# Do This\n\n* Read the program and discuss with your partner how the left button makes the motorcycle go up.\n* Using the working left button as an example, program the right button to make the motorcycle go down.",
        "CSD U6 move motorcycle_2018_markdown_instruction": "# Movement with Properties\n\nEarlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.\n\n# Do This\n\n* Read the program and discuss with your partner how the left button makes the motorcycle go up.\n* Using the working left button as an example, program the right button to make the motorcycle go down.",
        "CSD U6 onChange_markdown_instruction": "# onChange\n\nIn the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the \"onChange\" event.\n\n# Do This\n\n* Look at the first event block in the program and find where it says \"onChange\".\n* Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.\n* Run your program, moving the slider to see whether the LED speed changes automatically.",
        "CSD U6 params create colors_markdown_instruction": "# Color Picker\n\nIn this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.\n\n# Do This\n* Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.\n* Call your function in the event blocks so that all the buttons work.",
        "CSD U6 params create colors_2018_markdown_instruction": "# Color Picker\n\nIn this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.\n\n# Do This\n* Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.\n* Call your function in the event blocks so that all the buttons work.",
        "CSD U6 params predict contained_markdown_instruction": "# Bug Crawl\n\nLook at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?",
        "CSD U6 params predict contained_2018_markdown_instruction": "# Bug Crawl\n\nLook at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?",
        "CSD U6 params starchaser 1_markdown_instruction": "# Make your `loopStar(color)` function\n\nRight now only the red star works, so you'll need to change this code.\n\n# Do This\n* Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.\n* Test your function by calling `loopStar(\"red\")` and `loopStar(\"blue\")` inside the `loopStars()` function.",
        "CSD U6 params starchaser 1_2018_markdown_instruction": "# Make your `loopStar(color)` function\n\nRight now only the red star works, so you'll need to change this code.\n\n# Do This\n* Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.\n* Test your function by calling `loopStar(\"red\")` and `loopStar(\"blue\")` inside the `loopStars()` function.",
        "CSD U6 params starchaser 2_markdown_instruction": "# Star Chaser\n\nNow you'll need to make all the stars loop around the screen.\n\n# Do This\n* Use a `for` loop inside your `loopStars()` function to make every star in \"starArray\" loop around the screen.",
        "CSD U6 params starchaser 2_2018_markdown_instruction": "# Star Chaser\n\nNow you'll need to make all the stars loop around the screen.\n\n# Do This\n* Use a `for` loop inside your `loopStars()` function to make every star in \"starArray\" loop around the screen.",
        "CSD U6 params starchaser 3_markdown_instruction": "# Star Chaser\n\nAll the stars loop, but you can still only catch the red star.\n\n# Do This\n* Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.\n* Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.\n* Test your code by calling `checkStar(\"red\")` and `checkStar(\"blue\")` inside your event block.",
        "CSD U6 params starchaser 3_2018_markdown_instruction": "# Star Chaser\n\nAll the stars loop, but you can still only catch the red star.\n\n# Do This\n* Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.\n* Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.\n* Test your code by calling `checkStar(\"red\")` and `checkStar(\"blue\")` inside your event block.",
        "CSD U6 params starchaser 4_markdown_instruction": "# Star Chaser\n\nNow make it work for all the stars\n\n# Do This\n* Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.\n* Test your code by calling the `checkStars()` function inside the event block.",
        "CSD U6 params starchaser 4_2018_markdown_instruction": "# Star Chaser\n\nNow make it work for all the stars\n\n# Do This\n* Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.\n* Test your code by calling the `checkStars()` function inside the event block.",
        "CSD U6 params starchaser 5_markdown_instruction": "# Star Chaser\n\nNow you can add extra stars, and your functions will work with them, too.\n\n# Do This\n* In design mode, copy one of the stars, and change its name and color to \"yellow\".\n* Add a new element, \"yellow\", to your star array.\n* Test the game with your new star.",
        "CSD U6 params starchaser 5_2018_markdown_instruction": "# Star Chaser\n\nNow you can add extra stars, and your functions will work with them, too.\n\n# Do This\n* In design mode, copy one of the stars, and change its name and color to \"yellow\".\n* Add a new element, \"yellow\", to your star array.\n* Test the game with your new star.",
        "CSD U6 params starchaser challenge 1_markdown_instruction": "# Star Chaser\n\nNow that you have a working game, you can challenge yourself with some different features.\n\n# Do This\n* Start the user with 5 \"lives\", and take one away every time the user touches the **wrong** star.\n* Make an end screen, and change to that screen when the user runs out of lives.",
        "CSD U6 params starchaser challenge 1_2018_markdown_instruction": "# Star Chaser\n\nNow that you have a working game, you can challenge yourself with some different features.\n\n# Do This\n* Start the user with 5 \"lives\", and take one away every time the user touches the **wrong** star.\n* Make an end screen, and change to that screen when the user runs out of lives.",
        "CSD U6 params starchaser challenge 2_markdown_instruction": "# Star Chaser\n\nNow that you have a working game, you can challenge yourself with some different features.\n\n# Do This\n* Make the player go back to the middle of the screen when the left button is pressed.",
        "CSD U6 params starchaser challenge 2_2018_markdown_instruction": "# Star Chaser\n\nNow that you have a working game, you can challenge yourself with some different features.\n\n# Do This\n* Make the player go back to the middle of the screen when the left button is pressed.",
        "CSD U6 params starchaser challenge_markdown_instruction": "# Star Chaser\n\nNow that you have a working game, you can challenge yourself with some different features.\n\n# Do This\n* Start the user with 5 \"lives\", and take one away every time the user touches the **wrong** star.\n* Make an end screen, and change to that screen when the user runs out of lives.",
        "CSD U6 params starchaser template_markdown_instruction": "Template Level.",
        "CSD U6 params starchaser template_2018_markdown_instruction": "Template Level.",
        "CSD U6 plane shake_markdown_instruction": "# Shaking Things Up\n\nLike the `change` event, the `shake` event updates every time the board moves. However, `shake` is a lot less sensitive than `change`. In order to actually trigger it, the board has to be shaken, not just slightly moved.\n\n# Do This\n\nThe airplane needs to be shaken in order to take off.\n\n* Use the `shake` event move the airplane\n* Update the airplane's x and y coordinates in order to move it.",
        "CSD U6 predict LED button_markdown_instruction": "Embedded Prediction",
        "CSD U6 predict LED button_2018_markdown_instruction": "Embedded Prediction",
        "CSD U6 random array notes_markdown_instruction": "# Random Song Generator\n\nYou're going to make a random song generator. When you press a button, a random note should play. Press it enough times, and you have yourself a beautiful arrangement of bleeps and bloops. \n\nYou used `randomNumber()` to select an element from an array in the previous lesson, so this should be familiar.\n\n# Do This\n\n* Add code to randomly select a note from the `notes` array and play it.\n* Run the program and press the left button to hear your buzzer sing its beautiful tune.",
        "CSD U6 random array notes_2018_markdown_instruction": "# Random Song Generator\n\nYou're going to make a random song generator. When you press a button, a random note should play. Press it enough times, and you have yourself a beautiful arrangement of bleeps and bloops. \n\nYou used `randomNumber()` to select an element from an array in the previous lesson, so this should be familiar.\n\n# Do This\n\n* Add code to randomly select a note from the `notes` array and play it.\n* Run the program and press the left button to hear your buzzer sing its beautiful tune.",
        "CSD U6 sensor experiment embedded_markdown_instruction": "# Sensor Experiment\n\nRun the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:\n\n* What does this sensor measure?\n* What is its maximum value?\n* What is its minimum value?",
        "CSD U6 sensor experiment embedded_2018_markdown_instruction": "# Sensor Experiment\n\nRun the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:\n\n* What does this sensor measure?\n* What is its maximum value?\n* What is its minimum value?",
        "CSD U6 setProperty Text_markdown_instruction": "# Changing the Text\n\nThe `setProperty` block can be used to change lots of things about your design elements, including the text they contain.\n\n# Do This\n\n* Drag out a `setProperty` block\n* For the first parameter, select \"name\" (the element's id)\n* For the second parameter, select \"text\" (the property you want to set)\n* For the third parameter, write your name in quotes (the value to set)\n\n_Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._",
        "CSD U6 setProperty Text_2018_markdown_instruction": "# Changing the Text\n\nThe `setProperty` block can be used to change lots of things about your design elements, including the text they contain.\n\n# Do This\n\n* Drag out a `setProperty` block\n* For the first parameter, select \"name\" (the element's id)\n* For the second parameter, select \"text\" (the property you want to set)\n* For the third parameter, write your name in quotes (the value to set)\n\n_Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._",
        "CSD U6 setProperty hidden 2_markdown_instruction": "# Showing/Hiding\n\nThis alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.\n\n# Do This\n\nAdd a second `onEvent` block to watch for the \"stopAlarmButton\" to be clicked. Inside that block:\n\n* Change the status text to \"OFF\"\n* Hide the \"stopAlarmButton\"\n\n_Hint: \"hidden\" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_",
        "CSD U6 setProperty hidden 2_2018_markdown_instruction": "# Showing/Hiding\n\nThis alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.\n\n# Do This\n\nAdd a second `onEvent` block to watch for the \"stopAlarmButton\" to be clicked. Inside that block:\n\n* Change the status text to \"OFF\"\n* Hide the \"stopAlarmButton\"\n\n_Hint: \"hidden\" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_",
        "CSD U6 setProperty hidden_markdown_instruction": "# Hidden\n\nDesign elements have a property called \"hidden\" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.\n\nWe have already set up an event handler for the \"triggerAlarmButton\" which will do two things when clicked:\n\n* Change the \"text\" property of \"statusLabel\" to \"on\"\n* Set the \"hidden\" property of \"stopAlarmButton\" to `false` (meaning it should _not_ be hidden)\n\n# Do This\n\n* Run the program and click \"Trigger Alarm\" to see how it works\n* Add code to the provided event handler that hides the \"triggerAlarmButton\"\n\n_Note: the button \"stopAlarmButton\" is already on the screen, but because its \"hidden\" property is marked true, it isn't shown when the program starts._",
        "CSD U6 setProperty hidden_2018_markdown_instruction": "# Hidden\n\nDesign elements have a property called \"hidden\" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.\n\nWe have already set up an event handler for the \"triggerAlarmButton\" which will do two things when clicked:\n\n* Change the \"text\" property of \"statusLabel\" to \"on\"\n* Set the \"hidden\" property of \"stopAlarmButton\" to `false` (meaning it should _not_ be hidden)\n\n# Do This\n\n* Run the program and click \"Trigger Alarm\" to see how it works\n* Add code to the provided event handler that hides the \"triggerAlarmButton\"\n\n_Note: the button \"stopAlarmButton\" is already on the screen, but because its \"hidden\" property is marked true, it isn't shown when the program starts._",
        "CSD U6 setProperty xy click_markdown_instruction": "# Changing With a Click\n\nIt's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.\n\n# Do This\n\nWe've provided an empty `onEvent` block that's watching the \"smiley\" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.",
        "CSD U6 setProperty xy click_2018_markdown_instruction": "# Changing With a Click\n\nIt's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.\n\n# Do This\n\nWe've provided an empty `onEvent` block that's watching the \"smiley\" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.",
        "CSD U6 setProperty xy random_markdown_instruction": "<img src=\"https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif\" style=\"float:right; max-width: 150px; margin: 10px;\">\n\n# Randomization\n\nMoving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.\n\n# Do This\n\nInstead of setting the \"x\" and \"y\" properties to a specific number, use the `randomNumber` block to pick a new random \"x\" and \"y\" each time the smiley is clicked.\n\n_Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_",
        "CSD U6 setProperty xy random_2018_markdown_instruction": "<img src=\"https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif\" style=\"float:right; max-width: 150px; margin: 10px;\">\n\n# Randomization\n\nMoving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.\n\n# Do This\n\nInstead of setting the \"x\" and \"y\" properties to a specific number, use the `randomNumber` block to pick a new random \"x\" and \"y\" each time the smiley is clicked.\n\n_Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_",
        "CSD U6 stillness game predict code_markdown_instruction": "# Change with the Accelerometer\n\nThis program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.\n\n\n# Do This\nThis program has two bugs that you need to fix:\n\n* The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.\n* The programmer forgot how to use the counter pattern to increase the movement variable.\n\nOnce you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.",
        "CSD U6 stillness game predict code_2018_markdown_instruction": "# Change with the Accelerometer\n\nThis program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.\n\n\n# Do This\nThis program has two bugs that you need to fix:\n\n* The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.\n* The programmer forgot how to use the counter pattern to increase the movement variable.\n\nOnce you have found the bugs, run the program and try to pass the board to your partner without setting off the alerm.",
        "CSD U6 stillness game predict_markdown_instruction": "# Accelerometer Events\n\nLook at the code below with a partner. What do you think it's going to do? Give it a guess, then run the code to find out!\n",
        "CSD U6 tugowar buzzer_markdown_instruction": "# Winning Buzzer\n\nThat last thing that that is missing from your project guide's description of this project is the buzzer. It should buzz a high tone if player 1 wins and a low tone if player 2 wins. \n\n# Do This\n\nSo far we've been able to just use the `player` parameter directly to report which player won, but that won't work for buzzing different sounds. Inside the conditional that checks if a player won, you'll need to add _another_ conditional that checks which player it was. If `player == \"red\"` the buzzer should play a high note, otherwise (else) it should play a low note.",
        "CSD U6 tugowar buzzer_2018_markdown_instruction": "# Winning Buzzer\n\nThat last thing that that is missing from your project guide's description of this project is the buzzer. It should buzz a high tone if player 1 wins and a low tone if player 2 wins. \n\n# Do This\n\nSo far we've been able to just use the `player` parameter directly to report which player won, but that won't work for buzzing different sounds. Inside the conditional that checks if a player won, you'll need to add _another_ conditional that checks which player it was. If `player == \"red\"` the buzzer should play a high note, otherwise (else) it should play a low note.",
        "CSD U6 tugowar conditional_markdown_instruction": "# Check for a Winner\n\nYour game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.\n\n# Do This\n\nUsing a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.\n\n* Add an if statement to the bottom of `checkWin()`\n* For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)\n* In your conditional, add a `console.log` that reports which player won\n* Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen",
        "CSD U6 tugowar conditional_2018_markdown_instruction": "# Check for a Winner\n\nYour game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.\n\n# Do This\n\nUsing a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.\n\n* Add an if statement to the bottom of `checkWin()`\n* For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)\n* In your conditional, add a `console.log` that reports which player won\n* Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen",
        "CSD U6 tugowar demo_markdown_instruction": "# Grab that Bug!\n\nThis is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.",
        "CSD U6 tugowar demo_2018_markdown_instruction": "# Grab that Bug!\n\nThis is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.",
        "CSD U6 tugowar design 1.5_markdown_instruction": "# Game Screen Design\n\nWe've also added a \"game\" screen where the game will be played. It just needs a couple of tweaks.\n\n# Do This\n\nSwitch to the \"game\" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.\n\nFeel free to add any other design tweaks that you'd like.",
        "CSD U6 tugowar design 1.5_2018_markdown_instruction": "# Game Screen Design\n\nWe've also added a \"game\" screen where the game will be played. It just needs a couple of tweaks.\n\n# Do This\n\nSwitch to the \"game\" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.\n\nFeel free to add any other design tweaks that you'd like.",
        "CSD U6 tugowar design 1_markdown_instruction": "# Getting Started: Screen Design\n\nYou should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.\n\n# Do This\n\nWe've already created a \"start\" screen and included a title and \"play\" button. Using your planning guide, finish creating this screen. Specifically you'll want to:\n\n* Update the title text to say \"Emoji Race\"\n* Add instructions for playing using the ID \"instructions\"\n\nFeel free to add any other design tweaks that you'd like.",
        "CSD U6 tugowar design 1_2018_markdown_instruction": "# Getting Started: Screen Design\n\nYou should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.\n\n# Do This\n\nWe've already created a \"start\" screen and included a title and \"play\" button. Using your planning guide, finish creating this screen. Specifically you'll want to:\n\n* Update the title text to say \"Emoji Race\"\n* Add instructions for playing using the ID \"instructions\"\n\nFeel free to add any other design tweaks that you'd like.",
        "CSD U6 tugowar design 2_markdown_instruction": "# Designing the Win Screen\n\nThe final screen in this program shows who won. It's totally blank right now.\n\n# Do This\n\nSwitch to \"win\" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.",
        "CSD U6 tugowar design 2_2018_markdown_instruction": "# Designing the Win Screen\n\nThe final screen in this program shows who won. It's totally blank right now.\n\n# Do This\n\nSwitch to \"win\" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.",
        "CSD U6 tugowar final_markdown_instruction": "# Make It Your Own\n\nYou just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?\n\n# Do This\n\nSelect one of the challenges below to add to the game or come up with a challenge of your own.\n\n* Change the look and layout of the screens\n* Use the buzzer or the led to show when one of the buttons has been clicked\n* Set the \"icon-color\" property of \"winner_image\" to the winning color\n* Make the emojis start out sad, change to meh halfway, and end up happy\n* Use a variable and conditionals to make sure that players can only move their emojis when the \"game\" screen is showing",
        "CSD U6 tugowar final_2018_markdown_instruction": "# Make It Your Own\n\nYou just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?\n\n# Do This\n\nSelect one of the challenges below to add to the game or come up with a challenge of your own.\n\n* Change the look and layout of the screens\n* Use the buzzer or the led to show when one of the buttons has been clicked\n* Set the \"icon-color\" property of \"winner_image\" to the winning color\n* Make the emojis start out sad, change to meh halfway, and end up happy\n* Use a variable and conditionals to make sure that players can only move their emojis when the \"game\" screen is showing",
        "CSD U6 tugowar movement 1_markdown_instruction": "# Tracking the Score\n\nYour `score` variable should keep track of how many times each user has clicked their button. Instead of just going up, `score` should _decrease_ if the player 1 clicks `buttonL` and _increase_ if player 2 clicks `buttonR`.\n\n# Do This\n\nInside each `onBoardEvent`, use the counter pattern to increase or decrease `score`. The amount that you change `score` will change how difficult the game is to win. Start with changing by 10 - you can always experiment with different values when the program is more complete.\n",
        "CSD U6 tugowar setProperty_markdown_instruction": "# Display the Winner\n\nThe winning screen doesn't actually know _who_ won the game. Let's fix that now.\n\n# Do This\n\nBefore each call to `setScreen`, add a `setProperty` block to change the \"text\" property of \"winner\" to display the actual winner.",
        "CSD U6 tugowar setProperty_2018_markdown_instruction": "# Display the Winner\n\nThe winning screen doesn't actually know _who_ won the game. Let's fix that now.\n\n# Do This\n\nBefore each call to `setScreen`, add a `setProperty` block to change the \"text\" property of \"winner\" to display the actual winner.",
        "CSD U6 tugowar setScreen_markdown_instruction": "# Change to the Win Screen\n\nNow that we have conditionals to check which player won, let's switch to the \"win\" screen when a player wins.\n\n# Do This\n\nInside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the \"win\" screen. Make sure you test that your new code works before moving on!",
        "CSD U6 tugowar setScreen_2018_markdown_instruction": "# Change to the Win Screen\n\nNow that we have conditionals to check which player won, let's switch to the \"win\" screen when a player wins.\n\n# Do This\n\nInside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the \"win\" screen. Make sure you test that your new code works before moving on!",
        "CSD U6 tugowar variables 3_markdown_instruction": "# The checkWin() Function\n\nThe last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.\n\n# Do This\n\nJust like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin(\"red\")`, then the variable `player` will have the value \"red\".\n\n* Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )\n* Create a variable called `player_y` and assign it the \"y\" property of the player\n* Use either a `console.log()` command or a watcher to report the value of `player_y`\n* Play the game with only one button, keeping an eye on the value of `player_y`\n* Decide what value of `player_y` should be considered the bottom of the screen",
        "CSD U6 tugowar variables 3_2018_markdown_instruction": "# The checkWin() Function\n\nThe last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.\n\n# Do This\n\nJust like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin(\"red\")`, then the variable `player` will have the value \"red\".\n\n* Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )\n* Create a variable called `player_y` and assign it the \"y\" property of the player\n* Use either a `console.log()` command or a watcher to report the value of `player_y`\n* Play the game with only one button, keeping an eye on the value of `player_y`\n* Decide what value of `player_y` should be considered the bottom of the screen",
        "CSD sprite movement challenge_2018_markdown_instruction": "# Improve your animation\n\nMake your animation even better by changing more sprite properties, or by adding even more sprites!",
        "CSD-Arrays_markdown_instruction": "Today you’re going to learn how to use and create **functions**.\n\nCreating a function lets you make your own blocks! There are two parts to a function: \n\nMaking a newly named block that has all of the code you want to run inside of it. \n-xml of function definition- \n\nThe single green block itself that you use, or call, to run the function you created.\n-xml of function call-\n\nPrepare to get familiar with functions, learn how to edit them, and create your own!",
        "CSD-Arrays_2018_markdown_instruction": "Today you’re going to learn how to use and create **functions**.\n\nCreating a function lets you make your own blocks! There are two parts to a function: \n\nMaking a newly named block that has all of the code you want to run inside of it. \n-xml of function definition- \n\nThe single green block itself that you use, or call, to run the function you created.\n-xml of function call-\n\nPrepare to get familiar with functions, learn how to edit them, and create your own!",
        "CSD: Boolean Expressions_markdown_instruction": "# Boolean Expressions Video",
        "CSD: Cake Defender Exemplar_markdown_instruction": "# Defend Your Cake!\n\nThis is an example of a defender game that you'll build by the end of this lesson. Move the alien with arrow keys to keep the ladybugs from getting to your cake. How high of a score can you get?\n\n# Do This\n\nTurn to a classmate and make a list of the following information.\n\n* How many sprites are there in this game. Which are they?\n* What variables are needed to make this game? What do they store?\n* If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?",
        "CSD: Platform Jumper Exemplar_markdown_instruction": "# Platform Jumper\n\nThe game on the left is an example of a platform jumper.  Press \"Run\" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.\n\nYou already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.\n\nYou can see other examples of platform jumpers in the next two levels.",
        "CSD: Slider Example_markdown_instruction": "# RGB Slider\n\nOver the next couple levels you are going to learn about using sliders to get user input. You will be creating this slider which controls the color of a button. You will return to this project in later lessons to control lights!",
        "CSDU2 - 2nd Validator issue_markdown_instruction": "# Add head and title tags\n\nYou should have ended up on this level because of one of the following errors:\n\n* Element head is missing a required instance of child element title.\n* Element title must not be empty.\n\nBoth of these error messages point out that **every web page needs a title**. The title is more than just putting a header on your page. A computer won't be able to easily go through the content of your web page to find your header (it could be in lots of different types of tags). So instead **every web page includes a title element marked by a &lt;title&gt; tag.** This title does not show up anywhere on your page so it is not part of the content of your page.\n\nSince the title is not part of web page content it goes in a special area at the top. This area is for all information about your web page that is not content. This information is often called **metadata**.  **Metadata goes in the head element marked by a &lt;head&gt; tag.**  The title element is a child element of the head element so the title element goes inside the head element.\n\nExample:\n\n<pre>\n&lt;head&gt;\n   &lt;title&gt; My Awesome Website &lt;/title&gt;\n&lt;/head&gt;\n</pre>\n\n# Do This\n\n* Add a &lt;head&gt; element above the first content in your page\n* Add a &lt;title&gt; element inside the &lt;head&gt; element. Makes sure to give your page a descriptive title.\n* Once you have done this return to the <a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/3\">validator level</a>",
        "CSDU2 - About Me Page Styling_markdown_instruction": "# About Me Page\n\nThere are many CSS properties and values that can be applied to HTML elements in order to change their style. Use the checklist below to add style to the text, image, and body elements. Remember to think about how your styling choices will impact users view of the web page.\n\n# Do This\n\n* Add `<head>` and `<body>` elements to your page\n* Add a `<title>` element to your page inside the `<head>` element\n* Add a `<style>` element to your page\n* Add styling of your choice to your About Me Page. Be sure to use at least 5 different CSS properties.\n\n# Checklist\n\n* All content contained in body element\n* All style contained in head element\n* At least 5 of the following CSS Properties are used:\n\n| Color Properties | Text Properties | Images Properties |\n| ---------------  | --------------- |-----------------  |\n| `color` <br> `background-color` | `text-align` <br> `text-decoration` <br> `font-family` <br> `font-size` | `height` <br> `width` <br> `border-width` <br> `border-color` <br> `border-style` |\n\nIf you’ve used at least 5 of the properties from the checklist, you can explore some additional text and image CSS properties to add to your About Me page.",
        "CSDU2 - About Me Page start_markdown_instruction": "# About Me Page\n\nYou are going to make another page for your portfolio. This one will be your About Me page. The project has been loaded with 6 different images. Two pictures are associated with each question below.\n\n* Do you prefer chocolate or vanilla ice cream?\n* Are you a dog or a cat person?\n* Do you prefer watching a movie or reading a book?\n\nCreate a website that tells your user more about you by answering the 3 questions and showing pictures for each answer.\n\n# Checklist\n\n* At least three images\n* A large header with the name of the page\n* Descriptions of your image choices for each category inside a paragraph element\n* HTML document uses the correct structure. (Doctype, html, head, and body)",
        "CSDU2 - Add doctype and html_markdown_instruction": "# Doctype and HTML tag\n\nWhen a web browswer is trying to read your document it looks for alerts which tell it which language you are using. In order to let the web browser know that this is an html document you need to do two things:\n\n1. Add &lt;!DOCTYPE html&gt; at the very top of your html file. &lt;!DOCTYPE html&gt; is always the first thing in an html document because it notifies the computer that this is an html document and to interpret it as such. &lt;!DOCTYPE html&gt; is not technically a tag but instead an instruction to the web browser. \n\n2. Wrap all the content of the file in an HTML element using the &lt;html&gt; tag. The &lt;html&gt; tag notifies the computer where the html starts and ends. The  &lt;html&gt; tag is the container for all other HTML elements (except for the &lt;!DOCTYPE html&gt; tag).  So you need an opening and closing &lt;html&gt; tag.\n\n# Do This\nThis is your Hobbies page from the last lesson.\n\n* Add &lt;!DOCTYPE html&gt; at the top of your index.html file\n* Add &lt;html&gt; right underneath &lt;!DOCTYPE html&gt; and add a closing &lt;/html&gt; tag at the end of index.html",
        "CSDU2 - Adding Personal Cause_markdown_instruction": "# Personal Cause\n\n**Circulate:** As students are working on their research and website, check to make sure that thay are using appropriately licensed media and proving accurate attribution. Spot check by asking for the license details of specific images.\n\n\n# Do This\n\n* Finish your personal website",
        "CSDU2 - Classes_markdown_instruction": "# Classes\n\nSometimes you only want to style one specific element of a certain type instead of all elements of one type. **Classes are HTML attributes that can be added to any HTML element to group it with other elements. Classes allow for the group of elements to have their own unique style.** This applies to elements on the same page or on separate pages.\n\nTo style using classes:\n\n1. First you need to mark the elements in html that will be in that class.  \n2. Second you need to write a style rule for that class. To write a rule for a class of elements, the selector for the rule is a `.` before the class name. \n\nFor example the code below would style the fancy class which has been set up for a paragraph element:\n\n| HTML file | CSS File | Result |\n| --------- | -------- | ------ |\n| <pre> &lt;p class=\"fancy\"&gt;Good Day&lt;/p&gt;</pre> |<pre>.fancy {<br>  color: darkblue;<br>  font-family: cursive;<br>} </pre>|<img src=\"https://images.code.org/05110876c62dafe72a7d0ddf34f7ae07-image-1475009963479.58.30 PM.png\" alt=\"result image\"> | \n\n# Do This\n\nThere are lots of different `<h5>` elements on the page. We want to style them differently depending on what season they are associated with.\n\n* For each season put all the `<h5>` elements for that season in a class specific to that season. For example all the winter `<h5>` elements would be in the class \"winter\".\n* Style each class of `<h5>` elements with a different `color`",
        "CSDU2 - Copy Code_markdown_instruction": "# Adding HTML and CSS\n\nNow that you have the files set up bring over your code for your Guinness Book of World Records page.\n\n## Copy Code\n* Go to <a href=\"https://studio.code.org/s/csd2/stage/7/puzzle/8\" target=\"_blank\">this level</a> and copy all the code from the HTML file. Paste the code into the HTML file you just created.\n* Copy the CSS code from the style sheet at <a href=\"https://studio.code.org/s/csd2/stage/7/puzzle/8\" target=\"_blank\">this level</a> and copy it into the CSS file you just created.",
        "CSDU2 - Debug images_markdown_instruction": "# Debug\n\n\n\n# Do This\n* Look through at the src attribute and determine the cause. \n* Your goal is to have an HTML page that displays 5 images. \n* Notice that the “alt” attribute serves as a placeholder in case the image doesn’t load\n* It’s also helpful to know what the picture should be about in case there’s a problem with the file path",
        "CSDU2 - Debugging 1_markdown_instruction": "# Debugging\n\nComputer code is written by humans and humans make mistakes. All computer scientists make mistakes.  So part of being a good computer scientists is about being able to find your mistakes and fix them. In computer science we call mistakes **bugs**. Bugs can be anything in code which causes it not to work as planned. The process of finding and fixing those bugs is called **debugging**.  Debugging is a problem solving process so use your problem solving steps as you try to debug. Over the next couple levels you are going to work on your debugging skills.\n\n<img src=\"https://images.code.org/ed7cb1f2e093b9c36b82bfbf9bbcd76b-image-1474383288840.54.26 AM.png\" style=\"float:right;border:black solid 5px;width:200px\">\n\nThe desired web page is on the right. There are two issues with the starter web page:\n\n1. The header won't show up as an h1 header.\n2. The list doesn't seem to be formatting correctly.\n\n# Do This\n\n* Find and fix all bugs in the starting HTML\n* Check that the final result matches the image on the right.",
        "CSDU2 - Debugging 2_markdown_instruction": "# Debugging\n<img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38 AM.png\" style=\"float:right;border:5px black solid;width:250px\">\n\nMore debugging practice!  This page is a little more challenging to debug than the last one.\n\n# Do This\n\nFix the HTML so that the web page makes the example on the right.\n\n* Find and fix all bugs in the starting HTML\n* You will know you have found all the bugs when your page matches the one on the right.",
        "CSDU2 - Debugging 3_markdown_instruction": "# Debugging\n\nThis page has images in it. Images make finding bugs a little more tricky. Can you debug this page?\n\nAs you are debugging you may notice a new set of symbols that look something like this:\n<pre>\n&lt;!-- this is a comment --&gt;\n</pre>\n\nThis is a **comment**. Comments are written by computer scientists creating web pages for themselves and other humans who might look at their HTML file. Comments explain the different parts of the code and what it should create.  Comments might be able to help you debug.\n\n# Do This\n\n* Find and fix all bugs in the starting HTML\n* You know you’ve found all of the bugs when your page matches the <a href=\"https://thimbleprojects.org/danimcavoy/103295/\" target=\"_blank\"> Target Page</a>.",
        "CSDU2 - Debugging 4_markdown_instruction": "# Debugging\n\nSometimes bugs in code aren't obvious in how the page displays. Remember that you want your web page to display on any browser so even though it displays nicely in one place may not mean that it works everywhere. \n\n# Do This\n\n* Find and fix all bugs in the starting HTML\n* You know you’ve found all of the bugs when your page matches the <a href=\"https://thimbleprojects.org/danimcavoy/103456\" target=\"_blank\"> Target Page</a>",
        "CSDU2 - Developing Brand Style_markdown_instruction": "# Developing Brand Style\n\nAlright now its time to start writing the style rules for your brand!\n\nYou will notice that all the different basic elements you could have used on your web pages are included on this page and you are given a style rule for each to start with.\n\nIn addition there is a style rule for two classes: header and content. You will be setting up these classes on all the pages of your website using divs. The header class contains the title of the website as well as the navigation to get around it. The content class contains everything else.\n\n# Do This\n\n* Look up your colors RGB values from your <a href=\"https://studio.code.org/s/csd2/stage/10/puzzle/4\" target=\"_blank\"> Color Choice Level </a> and copy the RGB values into the block comment to make it easier to style your page\n* Create style rules for all the basic elements of a web page that might be included on your website\n* Create style rules for the header and content classes. Consider having background colors and borders on these sections to make them stand out from the background.",
        "CSDU2 - Div_markdown_instruction": "# Div Element\n\nHTML elements allow you to group together content on your web page that is connected. However sometimes you want to group together multiple HTML elements into one connected chunk and give it a style.  To connect a set of HTML elements inside one element you can use the `<div>` element.\n\nFor your Personal Website you are going to start out by using this to group together the header section you want to go on every page of your website. This will include the title of your website as well as any navigation. Once you do this you can put a background color on the whole div to make it look like one connected block.\n\n<pre>\n&lt;div&gt;\n    &lt;h1&gt; Title of Website &lt;/h1&gt;\n    &lt;a href=\"index.html\"&gt; Home &lt;/a&gt;\n    &lt;a href=\"page1.html\"&gt; Page 1 &lt;/a&gt;\n    &lt;a href=\"page2.html\"&gt; Page 1 &lt;/a&gt;\n    &lt;a href=\"page3.html\"&gt; Page 1&lt;/a&gt;\n&lt;/div&gt;\n</pre>\n\n# Do This\n\n* Put all the navigation hyperlinks and page title in `<div>` element\n* Add a `background-color` for the `<div>` element",
        "CSDU2 - External Style Sheets_markdown_instruction": "# External Style Sheet\n\nNow that you have your colors and fonts, you can begin to think more about the style rules of your brand. This is a simple template page that contains the features your website might contain. You will use this page to play around with the style rules until you find the right set of style rules for your brand. These style rules will be common across all the pages on your website. They will promote your own personal brand. Since they will be common across all the web pages it would be nice if they could all be written in one place instead of duplicating them on every page.\n\nYou can get clearer separation of content and style by putting content and style in separate files. The new file for CSS will be called an **external style sheet**. Most of the time the file name will be **style.css**. Since the file ends in .css the web browswer already knows that this is CSS code so we no longer need the `<style>` element around it. \n\n# Do This\n\n* Add a new CSS file called style.css\n* Copy all the CSS from inside the `<style>` element from the .html file to the .css file\n* Delete the `<style>` element from the .html file",
        "CSDU2 - Finalize Personal Website_markdown_instruction": "# Consistent Style\n\nYour site’s pages might look crazy since you pulled together the style of all the pages in the last level. It is time to work on that. It will be up to you to determine the style rules for your page.  Remember best practice is to only have one rule per html element. If you want to keep two different styles for certain elements remember you can use classes. In addition you should have taken time to plan out your consistent style design for website.\n\n# Do This\n\n* Work on creating a consistent style for your website using the external style sheet and style rules.\n* Use classes to make parts of your website stand out.",
        "CSDU2 - Finish Recipe_markdown_instruction": "# Finishing Recipe Page\n\nNow its time to finish off your Recipe Page.\n\n* Add any more information to your recipe page you think would be helpful such as how long it takes to make or what meal of the day you usually eat it.\n* Finalize your Recipe Page. Use the checklist below to make sure your page is complete. Remember you can always go back and look at the example page.\n\n## Checklist\n\n* All text contained in an HTML tag (header, paragraph, or list)\n* Unordered list of ingredients\n* Ordered list of directions\n* Paragraph description of the dish\n* Headers for each section\n* Title header at the top of the page",
        "CSDU2 - First Debug_markdown_instruction": "# Debug\n\nMistakes happen when you are programming. The great thing is that these mistakes help your code get better and you become a better developer as you learn how to find the mistakes. Mistakes in code are called **bugs** and the process of fixing the bugs is called **debugging**. \n\n# Do This\nThe creator of this website is having trouble so trouble. Debug this page so that it matches the example on the next level.  Your teacher may also be displaying the website at the front of the room.\n\nAs you work to debug look specifically at:\n\n* header elements\n* list elements\n* list item elements",
        "CSDU2 - First-Weblab_markdown_instruction": "# Adding Content\n\nStart creating your first web page! Try to create a page with a title and two paragraphs.\n\n# Do This\n\n* Write a sentence about your favorite animal\n* On a separate line write another sentence about your least favorite animal.\n* Above both sentences try adding a title that says \"Animals\"\n* Don't forget to click <img src=\"https://images.code.org/6a35d13b10ed2029a9323c9cb555e39e-image-1477681291001.01.12 PM.png\" style=\"width:100px\">\n* **What do you notice about the structure of your content?**",
        "CSDU2 - Footer_markdown_instruction": "# Recreating Page\n\nAt the beginning of class you looked at a web page and figured out which elements were styled similarly. Using those guesses and the classes in the starter code can you recreate the original page?\n\n# Do This\n* Look at the class style rules to see what they do. Don't worry if you don't know every property yet. Just use the ones you do know.\n* Put elements in the appropriate classes to recreate the <a href=\"https://studio.code.org/s/csd2/stage/9/puzzle/2\" target=\"_blank\"> original page </a>",
        "CSDU2 - Header of Page_markdown_instruction": "# Header Area\n\nWebsites usually have the same navigation bar across all of their pages so you can get back and forth between things on the site. To do this you need to add the navigation links to all the pages on your website.\n\n# Do This\n\n* Copy the navigation links section onto all the web pages.\n* Copy any styles you need into the style sheets for those pages.",
        "CSDU2 - HobbiesPage_markdown_instruction": "# Hobbies Page\n\nIn this level, you’ll use what you’ve learned to create your Hobbies page. Get creative with your Hobbies Page but make sure it meets the basic requirements in the Checklist first.\n\n# Checklist\n\n* 1 title with large header size\n* At least 3 medium headers with each hobby name\n* At least 3 small headers with the amount of time you’ve been doing each hobby\n* At least a 2 to 3 sentence description of each hobby under the hobby’s time inside paragraph tags",
        "CSDU2 - HobbiesPageExample_markdown_instruction": "# Example Hobbies Page\n\nTO DO: Make this an embed level\n\nOn the next level you are going to work on creating your own Hobbies Page. This is an example of the type of page you are working to create. Come back to this level for reference as needed while creating your page.",
        "CSDU2 - Internet Speed Test_markdown_instruction": "# Peer Review\n\nToday you are going to have other people look at your website and give feedback on it.\n\n# Do This\n\n* Leave this open on your screen so your peer reviewers can look at your work",
        "CSDU2 - Intro to CSS_markdown_instruction": "# Style Element\n\nUp until now you have only been able to add content to your page. In Web Developers intentionally separate content and style to make their code easier to maintain.  HTML is the language used to add content to a web page. CSS is a language that adds style to a web page. \n\nIn CSS style rules are used to style certain elements of HTML.  Style rules explicitly call out certain properties of the element to be styled. To add CSS style rules to an HTML page, you need to first add an HTML `<style>` element. This signals to the web browser that all the stuff inside the `<style>` element is CSS styling instructions. \n\n\n# Do This\n\n* Add the `<style>` element right below the opening `<html>` tag. \n\nWe will add CSS to change the look of the page on the next level!",
        "CSDU2 - Link Tag_markdown_instruction": "# Link Element\n\nIn the last level you moved your style out into an external style sheet. You may have noticed though that the style was no longer appearing on the page. To get the style to apply to the web page we need to connect the html and css files.\n\n**To link sheets you will need to add a `<link>` element.** The `<link>` element goes inside the `<head>` element since it is information about the page and not content of the page. You can link a stylesheet to multiple pages if you want them all to have the same style.\n\n`<link>` element has two main attributes: `rel` and `href`.\n\n* As you learned before for images the `href` attribute is the file path, in this case just the same of the CSS file.  \n* The `rel` attribute indicates the relationship that the linked file has to the current file, in this case its a stylesheet.\n\nFor example:\n<pre>\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n</pre>\n\n# Do This\n\n* For the index.html link the css file using the `<link>` element in the `<head>` element",
        "CSDU2 - Matching Class Style Checker_markdown_instruction": "# Check your matching answers\n\nTest out your guesses from the matching activity by applying the class styling to the elements and see if it produces the same result. The results from the slide show are shown below.\n\n| Question 1 | Question 2 | Question 3 | Question 4 | Question 5 |\n| ---------- | ---------  | ---------- | ---------- | ---------- |\n| <img src=\"https://images.code.org/702e804602dbf28874f516f1578fd883-image-1475259238611.54.05 PM.png\" style=\"width:250px\"> | <img src=\"https://images.code.org/7f6a2c9561213f6b5c8c9285f94ae850-image-1475259241204.25.16 PM.png\" style=\"width:250px\"> | <img src=\"https://images.code.org/291f01b170f9242a26f04f8eb8296471-image-1475259238611.52.46 PM.png\" style=\"width:250px\"> | <img src=\"https://images.code.org/81c9db1d1258f0fd709ba4508806388c-image-1475259238611.53.08 PM.png\" style=\"width:250px\"> | <img src=\"https://images.code.org/43df26d786235bf2402854b56c8bbcf5-image-1475259238610.50.22 PM.png\" style=\"width:250px\"> |",
        "CSDU2 - Missing Home Link_markdown_instruction": "# Missing Home Link\n\nCopying your hyperlinks to all your pages allowed you to get to most of the pages on your website from any other page. One hyperlink is missing - the one to get you to your home page (index.html).\n\n**Add a hyperlink to your home page from all the pages, even your home page itself.** Adding it to your home page will keep your navigation header consistent on all pages.",
        "CSDU2 - Multi Site First_markdown_instruction": "# Making a Multi-page Site\n\nA web site should include more than one web page, and they should connect to each other.  The first multi-page site you make will be a site of Odd Stuff.  Most of the site is already here, but you will need to add your Guinness Book of World Records page.\n\n* In the list of project files, find index.html and click on it.   **index.html is used in Web Lab to mark the home page of a website**, the first page that your visitors will see.\n* Click on some of the other HTML files.  These are also web pages, but they have different names.  **Every file needs a unique name that will help you know what it is.**\n* Look around through all the files provided. Can you figure out which style sheets go with which web pages?",
        "CSDU2 - Nav add to Personal Site_markdown_instruction": "# Navigation on Personal Website\n\nNow that you have all the files for your website, connect them together!\n\n# Do This\n\n* Add hyperlinks at the top of your index.html file for every page on your site (including the index.html page).\n* In your style sheet, create a rule-set for the `a` tag that gives it the style that you want.\n* Copy the hyperlinks and put them in every page.\n\n\n* Add the `a` rule-set to every style sheet, or combine your style sheets to make your entire page have the same look and feel!\n\nOnce your website is set up and connected, feel free to make improvements to any pages on your website.\n\nBefore leaving this level:\n* Take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website </a>.*)\n\n## Check List\n\n* All of your web pages are individual HTML files in this Portfolio Project",
        "CSDU2 - Nav on Personal Website_markdown_instruction": "# Multi-Page Personal Website\n\nNow that you know how to set up a website, go ahead and set up your own personal website.\n\n# Do This\nYour personal website is back. So far you have just your personal home page.\n\n* Add html files for each of the Hobbies Page, Recipe Page, and About Me page\n* Copy the code from the following levels <a href=\"https://studio.code.org/s/csd2-old/stage/4/puzzle/13\" target=\"_blank\">Hobbies Page</a>, <a href=\"https://studio.code.org/s/csd2-old/stage/4/puzzle/17\" target=\"_blank\">Recipe Page</a>, and <a href=\"https://studio.code.org/s/csd2-old/stage/8/puzzle/12\" target=\"_blank\">About Me page</a> into the files you created.\n* Add a CSS file for your <a href=\"https://studio.code.org/s/csd2-old/stage/8/puzzle/12\" target=\"_blank\">\"About Me\" page style sheet</a>.",
        "CSDU2 - New Html Files_markdown_instruction": "# Adding HTML and CSS\n\nYou will need to add your Guinness Book of World Records page. First create an HTML and CSS file. On the next level you will bring over the code.\n\n## Adding File\n* Add a new HTML file by clicking the \"Add HTML\" button.\n* Rename the file, either by right clicking it and choosing \"Rename\", or by clicking on it when it's already highlighted.  **Make sure the name is unique, descriptive and ends in \".html\"**.\n* Create a new CSS file and rename it, too.",
        "CSDU2 - PW - Class Style Personal Site - OLD_markdown_instruction": "# Free Play Styling\n\nYour turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.\n\n* Make sure you have completed the checklist below.\n* Take a screenshot of your home page and save it somewhere on your computer so you can find it later.\n\n## Checklist\n\n* Somewhere on your site, give text a particular color using RGB values.\n* On your lists page, give all the list items the same background color.\n* Use classes to style at least 2 other elements of your personal website",
        "CSDU2 - PW - Class Style Personal Site_markdown_instruction": "# Free Play Styling\n\nYour turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.\n\n* Make sure you have completed the checklist below.\n* Take a screenshot of your home page and save it somewhere on your computer so you can find it later.\n\n## Checklist\n\n* Somewhere on your site, give text a particular color using RGB values.\n* On your lists page, give all the list items the same background color.\n* Use classes to style at least two other elements of your personal website",
        "CSDU2 - PW - Class Style Personal Site_2018_markdown_instruction": "# Free Play Styling\n\nYour turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.\n\n* Make sure you have completed the checklist below.\n* Take a screenshot of your home page and save it somewhere on your computer so you can find it later.\n\n## Checklist\n\n* Somewhere on your site, give text a particular color using RGB values.\n* On your lists page, give all the list items the same background color.\n* Use classes to style at least two other elements of your personal website",
        "CSDU2 - PW - Classes on Recipe_markdown_instruction": "# Classes on Recipe Page\n\nIn the next few levels, as a little more practice with style, you will style some of the elements on your recipe page in order to give the appearance of a notecard. You will want to make the background of the ingredients list and the directions lists look like notecards.\n\n# Do This\n\n* In the recipe page add the ordered list for directions to the \"notecard\" class\n* In the recipe page add the unordered list for the ingredients to the \"notecard\" class\n* Add a style rule for the notecard class but don't put anything in it. You will start working on it on the next level.",
        "CSDU2 - PW - Consistent Personal Site Style_markdown_instruction": "# Consistent Style\n\nYour site’s pages might look crazy since you pulled together the style of all the pages in the last level. It is time to work on that by creating classes for style exceptions.\n\n# Do This\n\n* Identify the exceptions to the style rules such as the note card styling\n* Use classes to separate the styling of those unique elements\n* Move the styling for those classes into your style.css file\n* Get ride of all `<style>` elements and the style rules inside them\n* Your website should now have a consistent look!",
        "CSDU2 - PW - Divs to break up the page_markdown_instruction": "# Header and Content Divs\n\nGrouping together the different sections of a web page will make styling the web page easier. It also helps make clear to the user where to look for different content. You saw an example of this earlier in the levels.\n\n# Do This\n\n* Put all the elements for the navigation of the website and the title of the website in div if it not already\n* Set the class of that div to be \"header\"\n* Put all the rest of the elements on the page in a different div \n* Set the class for the second div to be \"content\"\n* These will get styled on the next level!",
        "CSDU2 - PW - External Style Sheets_markdown_instruction": "# External Style Sheet\n\nAlright you just learned how to add an external style sheet to create consistent style across a website. When there are specific things you want to style differently you have practiced using classes. It is time to use these in your Personal Website. To start, get all the style into one external style sheet linked to each web page.\n\nYou can mark the different sections of the .css file with comments. Comments in CSS use different notation than comments in HTML. Comments in CSS look like this: `/* This is a comment */`\n\n# Do This\n\n* Create a CSS file and name it style.css\n* Cut/Paste the CSS code from your <a href=\"\" target=\"_blank\">style tester level</a> to style.css\n* Link the stylesheet to each document in a project.",
        "CSDU2 - PW - Favicon_markdown_instruction": "# Favicon\n\nSince you have a logo for your website it would also be cool to have it be small image associated your website. The small image associate with your website is called a **favicons**. Favicon is short for favorite icon. It displays in the tab for a website, when a website is bookmarked, and sometimes in the browsers address bar.\n\nFor example when you open a tab for Code.org it might look like this. The icon on the left is the favicon.\n\n<img src=\"https://images.code.org/9db8bd43bf27355cd6ed799358775140-image-1475697356699.55.40 PM.png\">\n\nFavicons are metadata for the website since they are used by the web browser and not content on the web page itself. Therefor they are included in the `<head>` element. To add the favicon you use the `<link>` element. The `href` still is the file path but the `rel` is \"shortcut icon\".\n\nFor Example:\n\n<pre>\n&lt;head&gt;\n\t&lt;link rel=\"shortcut icon\" href=\"logo.png\" /&gt;\n&lt;/head&gt;\n</pre>\n\n# Do This\n\n* Set your icon to be the favicon for your website. You need to add it to every page for it show up on each page.",
        "CSDU2 - PW - Image as A Link_markdown_instruction": "# Image as a Link\n\nNow that you have a logo lets add it to your website. It will go on every individual page in your header with your navigation and website title. Often clicking on the logo of a website will take you back to the home page of a website. So we will set that up as well.\n\nTo make an image also a link we just wrap the `<img>` element in a `<a>` element.\n\n<pre>\n&lt;a href=\"index.html\"&gt; &lt;img src=\"logo.png\" alt=\"logo\"&gt; &lt;/a&gt;\n</pre>\n\n# Do This\n\n* Upload your logo to your project.\n* Insert the logo using an `<img>` element in the header div of each page\n* Make the image a link by surronding the `<img>` element in an `<a>` element that directs to the index.html page",
        "CSDU2 - PW - Pre Publishing 2_markdown_instruction": "# HTML Tags Check\n\nThe next check should be for bugs or issues with your HTML. \n\n# Do This\n\n* Make sure you are viewing your index.html file on Web Lab\n* Open your Web Development Practices to page 2\n* Read through the list of basic HTML tags you have seen\n* Check through your page to make sure you are using the tags correctly and not missing tags",
        "CSDU2 - PW - Pre Publishing 3_markdown_instruction": "# Bugs Check\n\nThe next check should be for general bugs.\n\n# Do This\n\n* Open your Web Development Practices to page 3\n* Read through the list of bugs you have seen\n* Check through your page to make sure none of those bugs are appearing in your current website",
        "CSDU2 - PW - Pre Publishing 4_markdown_instruction": "# CSS Properties Check\n\nThe next check should be for styles you still want to add or fix.\n\n# Do This\n\n* Make sure you are viewing your style.css file on Web Lab\n* Open your Web Development Practices to page 4\n* Read through the list of basic CSS properties you have seen\n* Think about if there are styles you still want to add or improve",
        "CSDU2 - PW - Pre Publishing 5_markdown_instruction": "# Personally Identifiable Information Check\n\nEarlier in this lesson you made a list of information you would not want to give away on your website. Use that list to check your site. This is the most important step before publishing your website for all to see.\n\n# Do This\n\n* Open your Web Development Practices to page 5\n* Read through your list of rules for protecting your PII\n* Be a sleuth on your own page and make sure people can not find out that important information you want to protect.\n* Remove the information you don't want people to know. This doesn’t have to mean stripping all of the personal importance out of your site, it can be as simple as cropping an image to remove faces or replacing your school’s name with “my school”.",
        "CSDU2 - PW - Pre Publishing 6_markdown_instruction": "# Publishing!\n\nIt is time to share your website!\n\n# Do This\n\n* Check your website one more time to make sure you are ready to share it with others\n* Notice the \"Share\" button has appeared at the top of the screen.\n* Click the share button and copy the URL for your website.\n* Send that URL to friends and family as instructed by your teacher.\n\nIf you made changes to your home page during class make sure to take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website </a>.*)",
        "CSDU2 - PW - Pre Publishing Access_markdown_instruction": "# Accessibility Check\n\nThe next check should be for accessibility issues.\n\n# Do This\n\n* Open your Web Development Practices to page 5\n* Read through the list of accessibility issues you had identified\n* Make sure you fixed all the issues you had listed\n* Check for any new content you have added for accessibility issues",
        "CSDU2 - PW - Pre Publishing Check_markdown_instruction": "# High Quality Features Check\n\nUse your Web Development Practices - Project Guide to review your website for publishing. First you will look at the list of features you said you thought made something a high quality website to make sure you are doing those things.\n\n# Do This\n\n* Open your Web Development Practices to page 1\n* Read through the feature list\n* Pick a couple features you might want to improve after reading the list",
        "CSDU2 - PW - Publish It_markdown_instruction": "# Publish It\n\n\n# Do This\n\n* Publish it",
        "CSDU2 - PW - Title for Your Site_markdown_instruction": "# Website Title\n\nin head element need to add title element with your title\n\nshows up in the name of the tab\n\n# Do This\n\n* Stuff",
        "CSDU2 - Priority of CSS Rules_markdown_instruction": "# Priority of CSS Rules\n\nOn the last level you moved all the style rules to one style.css file that is linked to both web pages on the website. You may have noticed that the way some of the styling of the elements on the two pages changed. Over the next couple levels you will be working to fix this.\n\n## Multiple Rules for One Element\n\nBy copying the style rules from two different pages into one style sheet we created a couple cases where we have two style rules for one element. Style rules are applied from top to bottom so when there are multiple style-rules for the same properties of one element the one closer to the bottom is the one that will appear.\n\nFor example if you had the following style rules.\n\n<pre>\np{\n  background-color: blue;\n}\np{\n  background-color: red;\n}\n</pre>\n\nThe pargraph elements would have a red background.\n\nTo fix this issue the best thing to do is have one rule for each type of element.\n\n# Do This\n\n* There are two style rules for `<div>` elements. They are both the same. Delete one of them.\n* There are two style rules for `<body>` elements. They are **different** but both just control the `background-color` decide which of the two you would like to keep and get rid of the other one.\n* Leave the duplicate `<img>` element style rules for now we will deal with them on the next level.",
        "CSDU2 - SEO 1_markdown_instruction": "# Personal Website: Search Engine Optimization\n\nYou are going to update your website to optimize for finding it on a search engine. It is important to know that your website might not be easy to find on a search engine.  This might be partially a result of improvements you could make to your website. However since your website is hosted by Code.org and does not have a descriptive URL it might be harder to find.\n\n# Do This\n\n* Run your website through the <a href=\"http://www.seocentro.com/tools/seo/seo-analyzer.html\" target=\"_blank\"> SEO </a>\n* Write down the issues it highlights with your website\n* We will learn how to fix some of those issues in the next couple levels however some may be things you want to investigate on your own later such as Social Media presence.",
        "CSDU2 - SEO 2_markdown_instruction": "# Search Engine Optimization: Title\n\nOne piece of metadata that should be included in every web page you create is the website title. Although you may put an `<h1>` element on your page content with the title of your website, the computer does not necessarily know that is the title as there may be multiple `<h1>` tags on your page. To make clear to the computer what the title is the `<title>` element is added as metadata in the `<head>` element. Every page on your website needs it own title.\n\nExample:\n<pre>\n&lt;head&gt;\n\t&lt;title&gt; My Website Title&lt;/title&gt;\n&lt;/head&gt;\n</pre>\n\nThis `<title>` element is not displayed anywhere on the page but the browser may use it to put a name in the tab of your web browser or display it when someone searches for your website. In fact titles are very important to search engines because titles are often a primary piece of information looked at by users to decide which websites fulfill their needs.\n\n*Sometimes search engines will still generate their own title for your page based on the user search and what the algorithm of the search engine thinks is best for supporting what the user is looking for.*\n\n## Guidelines for Creating Good Titles\n\nSince titles are so important you will want to make sure you have good titles for all the pages of your website. Here are a couple practices for making good titles. \n\nMake your title:\n* **Descriptive:** Make sure your title explains what someone will find on that page.\n* **Concise:** Keep your title short. 5 words or less.\n* **Individual:** Don't use the same title for multiple pages.\n\n# Do This\n\n* Add a `<title>` element to each web page on your website",
        "CSDU2 - SEO 4_markdown_instruction": "# Search Engine Optimization: Keywords\n\n\n\n\n# Do This\n\n* Meta name =”keywords” content=”blah” (http://searchengineland.com/meta-keywords-tag-101-how-to-legally-hide-words-on-your-pages-for-search-engines-12099)",
        "CSDU2 - SEO 5_markdown_instruction": "# Search Engine Optimization: Viewport\n\nYour website can be used on many different devices. Those devices have different screen sizes. Viewport tells the browser how to load your website depending on the size of the browser. To get the browser to display your web page at the width of the device you can use the `<meta>` element with the attributes below. The `<meta>` element should go inside the `<head>` element with all the other meta data.\n\n<pre>\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n</pre>\n\n# Do This\n\n* Set the viewport of your website using the above code.",
        "CSDU2 - SEO Final_markdown_instruction": "# Search Engine Optimization: Final\n\nIn the past levels you added metadata to your website to improve your search engine optimization. Go back to your list of issues the Search Engine Optimizer identified and see if there are any others you can solve.\n\n# Do This\n\n* Check to make sure you have completed the checklist below\n* Continue to optimize your site for better search engine results\n* Take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website </a>.*)\n\n## Checklist\n\n* Every web page has metadata for title, description and viewport to improve search engine optimization.",
        "CSDU2 - Selector and Property_markdown_instruction": "# CSS Style Rules\n\nStyle rules consists of two main parts: the selector and the property. All style rules go inside the `<style>` element.\n\n# Selector\nThe selectors can be any part of the web page you want to style. One way you can identify parts of the web page is using the names of the element. Selecting an element will make all elements of that type have the given styling. The selector name for HTML elements is the name of the tag with the brackets removed. In the below example the selector is `h1` and it will style all the h1 tags with the properties inside the `{ }`.\n\n# Property\nThe property describes which style component of the selected element to change. There are lots of different style properties you can change about your web page. Not all properties can be used for all elements.\n\nThe first property we will use is the `color` property. The **`color` property sets the color of text** and works for any text elements including paragraphs, lists and headers. There are tons of colors you can choose. Luckily Web Lab pops up a list as you type. You can also look at the full list of colors at <a href=\"http://www.w3schools.com/cssref/css_colors.asp\">W3 Schools - CSS Colors</a>.\n\nExample:\n\nThe below style will make all the h1 headers on the page have blue text.\n\n<pre>\n  &lt;style&gt;\n    h1{\n      color:blue;\n    }\n  &lt;/style&gt;\n</pre>\n\n# Do This\n\n* Add a style rule for h1 headers so the text is green.\n* Add another rule that defines the color of h3 headers. Pick any color you would like.",
        "CSDU2 - SizeOfHeaders_markdown_instruction": "# Size of Headers\n\nThere are different sized headers which are marked by the number next to the h in the header tag. They go from &lt;h1&gt; to &lt;h6&gt; .\n\n| Example | Result |\n| ------- | ------ |\n| <pre>&lt;h1&gt; Shoulders &lt;/h1&gt; <br> &lt;h2&gt; Knees &lt;/h2&gt; <br> &lt;h3&gt; Toes &lt;/h3&gt;</pre> | <img src=\"https://images.code.org/4f252e3dce84a14e1bfdab373d3edbad-image-1473432674187.50.43 AM.png\" style=\"width:200px\"> |\n\n# Do This\n* Predict what the result of the code in the index.html file will look like. Pick from one of the 4 options below.\n\n| Option 1 | Option 2 | Option 3 | Option 4 |\n| -------- | -------- | -------- | -------- |\n| <img src=\"https://images.code.org/a4e973cc13db380ca1e1efeb4263974f-image-1473432905067.53.47 AM.png\" style=\"width:200px\"> | <img src=\"https://images.code.org/1c660b4e54a3e835250597cb261d8e17-image-1473432905068.54.08 AM.png\" style=\"width:200px\"> | <img src=\"https://images.code.org/22e9ae6a04afd8251b29939a6fa63411-image-1473432905069.54.25 AM.png\" style=\"width:200px\"> | <img src=\"https://images.code.org/0eee565202089d44a6bb5633603c45e0-image-1473432905069.54.50 AM.png\" style=\"width:200px\"> |",
        "CSDU2 - Starting Personal Home Page_markdown_instruction": "# Starting Your Home Page\n\nIn this lesson we are going to start putting together your personal website! In order to do this you need to create your personal home page.\n\n# Do This\n\nUsing your sketch of your personal home page and personal web development practice packet as a guide:\n* Create as much of the home page design as you currently know how to.\n* Take a screenshot of your work and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website </a>.*)",
        "CSDU2 - Style to Personal Site_markdown_instruction": "# Style on Personal Website\n\nNow that you have navigation on each page, you need to figure out how you want to style your website. You have two choices:\n\n1. Make a style sheet for each web page on your website\n2. Have one style sheet for your whole website to give it a more consistent feel.\n\nPick one of the two choices and style your website appropriately. Make sure to link the style sheet to the page(s) you want it to apply to. Also make sure that the `a` rule-set you created on the last level is applied to all your `a` tags.\n\nOnce your website is set up and connected, feel free to make improvements to any pages on your website.\n\nBefore leaving this level:\n* Take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website </a>.*)\n\n## Check List\n\n* All of your web pages are individual HTML files in this Portfolio Project\n* Navigation to all the pages exists at the top of each individual page\n* Style has been applied to all pages on the website",
        "CSDU2 - Sub Folders_markdown_instruction": "# Images\n\nWhen you have a bunch of images in your project its good to put them all in a folder to help organize your files.\n\nOnce files are in a folder you need to help the computer find them by giving both the folder name and the file name.  For example to display the dog.png file in the folder called images we would use:\n\n<pre> &lt;img src=\"images/dog.png\" alt=\"dog jumping\" /&gt; </pre>\n\nThe folder names comes first follow by the image name. We separate them with a / .\n\n# Do This\n* Add a folder called pictures\n* Move all the image files into the pictures folder\n* Notice how all the pictures no longer show but the text in the alt attribute does.\n* Update the links to the images so they display again",
        "CSDU2 - Type Anything_markdown_instruction": "<img src=\"https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg\" style=\"width:400px; float:right\">\n\n# Welcome to Web Lab!\n\nThe platform you are in is called Web Lab. There are three main parts of the screen in Web Lab.\n\n# Do This\n\n* Try typing something in the workspace.\n* Press <img src=\"https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png\" style=\"width:150px\"> to see it in the preview area!",
        "CSDU2 - Type Anything_2018_markdown_instruction": "<img src=\"https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg\" style=\"width:400px; float:right\">\n\n# Welcome to Web Lab!\n\nThe platform you are in is called Web Lab. There are three main parts of the screen in Web Lab.\n\n# Do This\n\n* Try typing something in the workspace.\n* Press <img src=\"https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png\" style=\"width:150px\"> to see it in the preview area!",
        "CSDU2 - Validator Extension_markdown_instruction": "# Favorite Places\n\nLets start a new page. This page will be about your favorite places to spend time. This could be on your block, in your city or even somewhere you like to go on vacation.\n\n# Do This\n\n* Add &lt;!Doctype&gt;, &lt;html&gt;, &lt;head&gt;, &lt;title&gt; tags to set up your page correctly from the beginning.\n* Use header and list elements to make a page describing your favorite places.\n\n# Checklist\n* At least 1 header\n* At least 1 list\n* Description of each of your favorite places\n* Consistency tags used correctly - &lt;!Doctype&gt;, &lt;html&gt;, &lt;head&gt;, and &lt;title&gt;",
        "CSDU2 - Welcome-to-Weblab_markdown_instruction": "# Welcome to Web Lab!\n\nStuff\n\n# Do This\n\n* Thing 1\n* Thing 2",
        "CSDU2 - add header to content_markdown_instruction": "# Adding Content Part 2\n\nLet's add some headers to the document.\n\n# Do This\n\n* Add a \"Favorite Animal\" title above your paragraph about your favorite animal.\n* Add a \"Favorite Way to Travel\" title above your paragraph about your favorite way to travel (car, plane, train, etc.).",
        "CSDU2 - body tags_markdown_instruction": "# Body Element\n\nAs mentioned on the last level the `<body>`element can be useful for more than breaking up your code. What if you wanted to put a background color on the whole page? Since the `<body>` element contains all the content of the web page, styling its `background-color` property will give the whole page a background color.\n\n# Do This\n\n* Use a selector for the `<body>` element to set the `background-color` of the page to something other than white",
        "CSDU2 - font properties_markdown_instruction": "# Font Properties\nThe way text looks is called a font. Two properties that control font are `font-family` and `font-size`.\n\n## font-family\nThere are 5 fonts that will look the same across any browser:\n\n* serif\n* sans-serif\n* monospace\n* cursive\n* fantasy\n\nWe will focus on using those font families to start. To read more about font families you can go to <a href=\"http://www.w3schools.com/cssref/pr_font_font-family.asp\"> W3 Schools - CSS font-family</a>\n\n## font-size\nThere are many values that can be used to determine font-size. Pixels are the easiest to use. A pixel is one tiny square on the screen. So when a font is 14px that means its 14 pixels tall.\n\nFor more details on font properties go to <a href=\"http://www.w3schools.com/cssref/pr_font_font-size.asp\">W3 Schools - font-size</a>.\n\n# Do This\n\n* Add a font-family property to h1 style to make the font cursive\n* Make the text in all the paragraph elements larger.",
        "CSDU2 - head body_markdown_instruction": "# Head and Body\n\nThere are now two different sections of code in our HTML file:\n\n1. Content of the page\n2. Information about the page (for right now just how to style it).\n\nIn creating web pages we differentiate between these two areas using the &lt;head&gt; and &lt;body&gt; elements. These elements are important for creating maintainable code but will also be useful for other things as well. The &lt;head&gt; element contains all the information about the page, also sometimes called **metadata**.  The &lt;body&gt; element contains all the content for a web page.\n\nOutline of the structure of your web page:\n\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;style&gt;\n    \t\t&lt;!--Styling Goes Here--&gt;\n\t\t&lt;/style&gt;\n\t&lt;/head&gt;\n\n\t&lt;body&gt;\n\t\t&lt;!--Content Goes Here--&gt;\n\t&lt;/body&gt;\n    \n&lt;/html&gt;\n</pre>\n\n\n# Do This\n\n* Add a &lt;head&gt; element surrounding the styling for the web page.\n* Add a &lt;body&gt; element surrounding the content for the web page.",
        "CSDU2 - image properties_markdown_instruction": "# Image Properties\n\nImages elements also have properties that can change their style.\n\n## Size\nOne of the image properties is size. You can control size of an image using the `width` and `height` properties. The size is determined by the number of pixels tall and wide an image is. Pixels is abbreviated to `px`.  For example to make all the images 100 pixels wide you would use:\n\n<pre>\nimg {\n\twidth: 100px;\n}\n</pre>\n\nAlthough you can control both width and height it is best practice to only set either width and height since setting both can distort the image.\n\n\n\n## Borders\nBorders are a common property for many elements including images. Borders consist of three properties: `border-style`, `border-width` and `border-color`.\n\n<pre>\nimg {\n      border-style: dashed;\n      border-width: 5px;\n      border-color: blue;\n}\n</pre>\n\nFor more information about borders go to <a href=\"http://www.w3schools.com/css/css_border.asp\"> W3 Schools - Border Properties</a>.\n\n# Do This\n\n* Add a rule to style img elements\n* Use the rule to set the width of all images to 200 pixels\n* Add borders to all images. Be creative and try different border styles and colors.",
        "CSDU2 - p tags_markdown_instruction": "# Background Color\n\nAnother common CSS property used to style pages is `background-color`. This property will set the background color of a specific element.  You can use any of the CSS colors for background color.\n\nFor example the code below will set the text color of all h1 elements to blue and the background color to red.\n\n<pre>\nh1 {\n\tcolor: blue;\n\tbackground-color: red;\n}\n</pre>\n\n# Do This\nTry out the `background-color` property with paragraphs.\n\n* Give all the paragraphs (`<p>`) elements a background color of your choice.",
        "CSDU2 - testing something_markdown_instruction": "# Welcome to Web Lab!\n\nHTML is a language to express content on the web. HTML stands for Hypertext Markup Language. This means you are just using special sets of characters to define the content of a website.\n\nThe platform you are in is called Web Lab. It lets you write HTML on one side of the screen and see the results on the other.\n\n# Do This\n\n* Use the Inspector Tool to find where the HTML code for “Welcome to Web Lab” appears.\n* Try to change the text from \"Welcome to Web Lab\" to something different.\n* Try typing something else on the page and see what happens.",
        "CSDU2 - text properties_markdown_instruction": "# Text Properties\n\nColor properties are just one type of property. Another is text properties. Text properties can be used on an text element (`<p>`, `<h1>` to `<h6>`, `<ul>`, `<ol>`, `<li>`).\n\n* text-align - sets the horizontal (side to side) position of the text within each line\n* text-decoration - can add a line above, below or through the text\n\nFor more details on text properties go to <a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3 Schools - Text Decoration</a> or <a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3 Schools - Text Align</a>.\n\nExample:\n\nThe below example will make all the paragraphs be right aligned with a green text color and a line through all the text.\n<pre>\np {\n\ttext-decoration: line-through;\n\tcolor: green;\n    text-align: right;\n}\n</pre>\n\n# Do This\nRead the W3 resources and figure out how to add the following styles on your page.\n\n* Add an underline to all of the smaller headers by using the text-decoration property.\n* Use the “text-align” property on paragraphs to align them on the page so that each line has the same width.",
        "CSDU2 - title element in head_markdown_instruction": "# Title Element\n\nOne piece of metadata that should be included in every web page you create is the website title. Although you may put an `<h1>` element on your page content with the title of your website, the computer does not necessarily know that is the title as there may be multiple `<h1>` tags on your page.\n\nTo make clear what the title of a website is for the computer the `<title>` element is added as metadata in the `<head>` element.  This title is not displayed on the page anywhere as a result of the title tag but the browser may use it to put a name in the tab of your web browser or when someone searches for your website.\n\nExample:\n<pre>\n&lt;head&gt;\n\t&lt;title&gt; My Website Title&lt;/title&gt;\n&lt;/head&gt;\n</pre>\n\n# Do This\n\n* Add a `<title>` element with the name of the web page inside the `<head>` element",
        "CSDU2 - website comp_markdown_instruction": "# Comparing Websites\n\n**Prompt:** Imagine you have a new puppy at home who has chewed through her old leash. Decide between which of these two websites you would ultimately decide to buy your puppy’s new leash. Why?\n\n* Website 1: <a href=\"https://thimbleprojects.org/nickianselmo/84613/\"> Uncle Joe's Pet Store</a>\n* Website 2: <a href=\"http://www.petsmart.com/\"> PetSmart</a>\n\nWrite your answer in the box below. When you are done wait for directions from your teacher before moving on.",
        "CSDU2 Color Blindness_markdown_instruction": "# Color Blindness Filter\n\n\n\n",
        "CSDU2 IP Portfolio_markdown_instruction": "# Cause Page\n\nLet's start by setting up the page you will be using to create your cause page.\n\n# Do This\n\n* Add a new HTML file to your project for your cause page.\n* Add a title, viewport, and description\n* Link the style sheet for your website to the cause page",
        "CSDU2 IP Research Content_markdown_instruction": "# Adding Your Content\n\nYou should now have found a handful of websites that you can use to help make your case for the cause you've chosen. If not, keep on researching! Otherwise it's time to start structuring the content of your page.\n\n## Hyperlinks to Websites\n\nEarlier in the unit you learned how to use the `<a>` element to link between pages on your website. You can also use this element to link to other websites. To do this the `href` attribute needs to contain the full URL of the site you wish to link to. For example if I wanted to link to the Code.org website in my project I would use the following code:\n\n| Code | Output|\n| ---- | ----- |\n| <pre> My favorite coding site is &lt;a href=\"https://code.org/\" &gt; Code.org &lt;/a &gt; ! </pre> | My favorite coding site is <a href=\"https://code.org/\"> Code.org </a> ! |\n\n# Do This\n\nThe specifics of your page layout will depend on your topics and goals, but in general you should create the following structure\n\n* A first level header with a catchy title for your page\n* A second level header for each separate argument to support your cause\n* Paragraphs of content under each second level header\n* A link to the appropriate site where you need to cite outside sources\n* Don't worry about styling right now you are just getting the content\n\nAttribution links can take many forms, for example\n\n* According to the [ASPCA](http://www.aspca.org/animal-homelessness) only 10% of animals entering shelters have been spayed or neutered.\n* Kill shelters euthanize 2.7 million animals per year (Source: [ASPCA](http://www.aspca.org/animal-homelessness)).",
        "CSDU2 Make Your Logo_markdown_instruction": "# Create a Logo\n\nYou will also need a logo for your brand. Get creative and create something that really is you. Remember you probably want to use your colors and fonts as you design your logo. If the tools does not have your exact font find something close.\n\n# Do This\n\n* Use the tool linked below to **create a logo for your brand**\n* **Hint:** The color picker on this site uses a different encoding called hex. Your color picker gave you those values as well. They are the first encoding with numbers and letters in it. They start with the # symbol.\n* **Save that logo somewhere on your computer** so you can use it later.",
        "CSDU2 Pick Your Colors_markdown_instruction": "# Pick Your Colors\n\nAnother component of creating your brand is picking the colors for your brand. These should be colors that stand out but also look good together. You want your users to enjoy looking at your page. You will want to keep your set of colors small so that the combination is memorable. A set of 4 main colors or less for your page will be a good place to start. Different shades of those colors can be used as well.\n\n# Do This\n\n* Go to the <a href=\"http://paletton.com/\"> Paletton </a> website.\n* Decide how many primary colors you want for your brand.\n* Set the number of primary colors useing these buttons <img src=\"https://images.code.org/669d2fe15825ea753f804ebb690aab95-image-1475594935612.28.22 AM.png\" style=\"width:150px\">. The number of dots shows the number of primary colors.\n* Play with dragging around the dots to find the primary colors you like. The one that takes up the biggest box on the right will be your primary color.\n\n<img src=\"https://images.code.org/b5811cea1acf1bf281ab73661db4b7cb-image-1475595405528.gif\" style=\"width:400px\">\n\n* Once you have picked your colors click <img src=\"https://images.code.org/3d30144dbe0cadc9bd083f1967e66b20-image-1475595929655.44.22 AM.png\" style=\"width:100px\"> which is below the color boxes on the right.\n\n* A list like the one below will show up click on **\"as Text\"** below the Color List header.\n\n<img src=\"https://images.code.org/d39c3112948cd860148f2228f5b1c45a-image-1475595929655.44.43 AM.png\" style=\"width:150px\">\n\n* A page that looks like the one below will open. **Copy the text from this page into the box below.** This will give you the RGB values for the colors as well as hex codes which you may want on the next level.\n\n<img src=\"https://images.code.org/731d2612a1ccb47a4db8085abe910266-image-1475596945480.02.14 PM.png\" style=\"width:400px\">",
        "CSDU2 Pick Your Fonts_markdown_instruction": "# Pick Your Fonts\n\nPart of any good brand is having a specific font that is associated with the brand. Most brands keep to a small set of fonts they use. These fonts however are unique to the brand and will need to adventure beyond the 5 font families you have been using.\n\nPicking a small set of fonts for your website is also a good practice as when you adventure beyond the 5 font families into other fonts the browser has to download the font file. Downloading files is something that can add time to how long it takes to your load your website. To prevent it from taking too long it is good to stay with just 2 different fonts.\n\n# Do This\n\n* Go to the <a href=\"http://fontpair.co/\" target=\"_blank\">Font Pair </a> website. The website lists sets of heading and body font pairs that work nicely together. Each pair is listed like the image below.\n\n<img src=\"https://images.code.org/7f34c1986c16fbb50e2acc4f72923b60-image-1475593488897.03.00 AM.png\" style=\"width:400px\">\n\n* Pick a font set you like.\n* Copy the heading and body font names.\n\n<img src=\"https://images.code.org/879b3b41486f728fbb8840469277704e-image-1475594076521.png\" style=\"width:400px\">\n\n* Click the link to each font. This should take you to a google fonts page.\n\n<img src=\"https://images.code.org/6163e64372d8825a7a8ed6a943cb3701-image-1475594076522.png\" style=\"width:400px\">\n\n* Copy the URL for the google fonts page into the box below so they will be saved for later. An example is below.\n\n<img src=\"https://images.code.org/92e66b9ffae4d836175d63d87ab5586c-image-1475594389964.17.58 AM.png\" style=\"width:400px\">",
        "CSDU2 RGB Color Matching_markdown_instruction": "# RGB Colors\n\nAll colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.\n\n* **Click \"Run\" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.\n* For each of the colors below, match it to its RGB value. Type your response in the box below.\n\nA) red: 216, green: 191, blue: 216 - rgb(216,191,216)\n\nB) red: 255, green: 239, blue: 213 - rgb(255,239,213)\n\nC) red: 255, green: 140, blue: 105 - rgb(255,140,105)\n\nD) red: 123, green: 104, blue: 238 - rgb(123,104,238)\n\nE) red: 107, green: 142, blue: 35 - rgb(107,142,35)\n",
        "CSDU4 - AppLab - 1_markdown_instruction": "# Documentation\nAs we move forward you are going to see more and more (and more!) commands added to the toolbox.  What happens if you see a command and don't understand it, or you forget how it works?  Don't worry, this happens to professional programmers all the time! No one actually memorizes long lists of commands.  Most programming environments have ways to quickly look up documentation about the commands of the language you're using.  **Good news: App Lab has documentation too!**\n\n![](https://images.code.org/3fe10e1b65edb37306099098161be001-image-1441990727053.gif)\n\nWhen you **hover your mouse over a command** in the block palette a bubble pops up with a quick reminder of what a function does, and what its parameters are. If you click \"See examples\", you will be taken to more detailed documentation of the command which includes **code examples** that you can even copy and paste.\n",
        "CSDU4 - AppLab - 3_markdown_instruction": "# Debug Console: Variable Values\n\nUp until now, if we wanted to find out the value of a variable at some point in the execution of a program, we've used `console.log`. That is still going to be a great strategy but **the Debug Console can do even more for us!**\n\n**Check this out:** We can check the value of a variable in real time (as our program executes) by typing its name into the prompt within the Debug Console and hitting \"enter\". **This is another powerful tool for debugging your programs.** \n\n![](https://images.code.org/7e7ff7aa041814cfcd69a1c9a028c439-image-1446826780896.gif)",
        "CSDU4 - AppLab - 4_markdown_instruction": "# Debug Commands\n\n<img src=\"https://images.code.org/c6322845b96b70c9083a6c62736048e5-image-1446739268136.00.34 AM.png\" style=\"width: 200px; float: right\">\n\nCheck out the new **Debug Commands toolbox** that has appeared next to the Debug Console! These powerful tools allow us to **pause a program at a certain point** while it’s running and then execute lines one at a time. \n\nUsing these tools we can investigate the state of variables and other elements of the program at any point, mid-execution. This makes it much easier to see what’s happening while the programming is actually running!\n\nIn order to use the debug commands, you first have to indicate which line you want the program to pause at.  This is called adding a “breakpoint” (see animation below).\n\n# Do This:\n\n* **Add a breakpoint** on the line where the `while` loop starts. (**Just click the line number.**)\n* **Use the <img src=\"https://images.code.org/bd8f1a67242e64e6b3740eac79f881e8-image-1446748421345.33.09 PM.png\" style=\"width: 75px\"> button** to execute each line one at a time.\n* **NOTE:** If you hit <img src=\"https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48 AM.png\" style=\"width: 75px\"> it will \"continue\" executing the program normally, unless of course it hits another breakpoint. \n\n![](https://images.code.org/68f8e185914c8cc127aa9573ae37f687-image-1446835628580.gif)",
        "CSDU4 - Design Mode - 1_markdown_instruction": "<img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png' style='float: right; width: 250px'> A new group of commands has been added to the toolbox called **UI Controls** (User Interface Controls) which are commands that let you interact with, and respond to, the user of your app. To keep it simple, we'll start with just two commands: \n* `onEvent` which lets you run a function in response to some event occuring (such as a button click).\n* `button` which puts a button on the screen.",
        "CSDU4 - Design Mode - 15_markdown_instruction": "# Design Mode\n\nWelcome to Design Mode in AppLab! This will allow you to easily create a digital version of your sketched wireframes by adding UI elements from the toolbox and and styling them the way you want!\n\n**Goal:** Add a large red button to your app using Design Mode.\n\n# Do This:\n\n* **Find <img src=\"https://images.code.org/278f146396c80c97d0b5d73f24d48aec-image-1444335461720.png\"> in the Design Toolbox** and drag out a button and resize it. \n\n* **Change the button text** to say \"Click Me\".\n\n* **Set the color for the button** to be red.\n\n<img src=\"https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif\" style=\"width: 500px; float: middle\">\n",
        "CSDU4 - Design Mode - 16_markdown_instruction": "# Activate Your Button\nIn the last lesson you focused on laying out a page of your app in Design Mode. This is a great, quick way to get the visual side of an app figured out, but it's not very functional. If you click any of the buttons you added, nothing happens. Now you're work towards adding some basic functionality by making the buttons in your app actually _do_ something!\n\n**Goal:** Add code using Design Mode to make the button respond to a click.\n\n# Do This\nYour starter app has two elements, a _label_ with the id `titleLabel` and a _button_ with the id `changeTitleButton`. To start with, you're going to make the button log a message to the console when it's clicked.\n\n* In Design Mode, **click on the provided button to edit its properties**\n* Click on the **Events** tab\n* Insert an `onEvent` from Design Mode by clicking **Insert and show code** under the **Events Tab**.\n* Take a look at the block that was added to the **Code Mode** tab.\n* Run the program, click your button and **look for the output in the _Debug Console_** below the workspace instead of the app window. We will discuss the *Debug Console* on the next level.",
        "CSDU4 - Design Mode - 19_markdown_instruction": "# Second Screen\n\nMost apps have more than one screen or page that each have different contents. With Design Mode you can quickly add new screen to your app.\n\n# Do This\n\nYou're going to add a second screen to your app and add a button to that screen. Make sure you're using good IDs!\n\n* Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39 PM.png\" style=\"width: 50px\"> from the Design Toolbox into your app. You now have two screens!\n* Using Design Mode create a button in your new screen.  <img src=\"https://images.code.org/bbf464e2fc94bacba39407d6842f2336-image-1478300698068.04.35 PM.png\" style=\"width: 150px\"> \n* Set the IDs for your screens and buttons to something meaningful, for example _\"homeScreen\"_, _\"detailsScreen\"_, _\"homeButton\"_, and _\"detailsButton\"_\n\n\nYou can always use the screen dropdown menu at the top of the app window to switch between your screens <img src=\"https://images.code.org/404e0b3f520a413c8a5e62e74b70bb19-image-1478300388689.58.59 PM.png\" style=\"width: 150px\"> \n\n",
        "CSDU4 - Design Mode - 2_markdown_instruction": "# Buttons and Unique IDs\nYou may have noticed that the button command has two parameters: `button(id, text)`.  The `text` is the text that actually shows up on the button display, and the `id` (we'll typically write **ID**) is a **unique identifier** for that element in the app.\n\nEach element that appears in the app must have a **unique ID**. In fact, if you try to run a program that has two buttons with same ID you will get a warning message in the console. Watch:\n<img src=\"https://images.code.org/47ec46e0563f63641cc10ef152e9f86e-image-1444074330713.gif\" style=\"border: solid 1px black; width:500px\">\n\nNotice that even though the text on the buttons was different, the IDs were the same, which caused the error message to show up. To get rid of that error message you will have to change the ID of the button from the default `id` to something else.\n\n**Error messages happen to everyone and they are helpful!**: getting an error or warning message when you run your program is *not a big deal*. Programmers actually rely on error messages to tell them where and how to fix their code.\nSometimes error messages are bit cryptic: `WARNING: Line: 2: button() id parameter refers to an id (id) which already exists.` But a warning like this contains helpful information and clues such as the line the error occured on, or some word or command it didn't recognize. ",
        "CSDU4 - Design Mode - 20_markdown_instruction": "# Switching Screens\n\nYou can set which screen is showing in your app with the `setScreen()` command. If you're working in blocks you can select which screen you want to switch to from a dropdown.\n\n![](https://images.code.org/615fae136488e1e6d1349e4383388e08-image-1478303858022.13.25 PM.png)\n\n# Do This\n\nYou'll use an `onEvent()` block with `setScreen()` to make the two buttons in your app switch between the two screen.\n\n* Drag out two `onEvent()` blocks\n* Set the IDs for your `onEvent()` blocks for each of your two buttons\n* Place a `setScreen` block inside each of the `onEvent` blocks.\n* Choose the appropriate screen from the dropdown of each `setScreen` block.\n* Test out your app to make sure your buttons let you switch back and forth between the two screens",
        "CSDU4 - Design Mode - 22_markdown_instruction": "A new command in the toolbox: `playsound`! Read the documentation about how to add sounds.",
        "CSDU4 - Design Mode - 23_markdown_instruction": "# Changing Elements on Screen \n\nThere's another way to display text in your app besides `console.log` and `write`.  \n\nThere is a command called `setText` which will **change the text of a component on screen** given its id. This is a very powerful technique and one that you will use a lot. Here's what it looks like in action....\n\n<img src=\"https://images.code.org/3e5dd320801720d5c62a49146d9ee3d2-image-1446056202170.gif\" style=\"width: 500px\">\n\nLet's do a **very simple** example of using `setText`.",
        "CSDU4 - Design Mode - 26_markdown_instruction": "# Saving Text Input in Variables\n\nOften we want to save the information we pull in from the user for later use in our program. The best way to do this is to save it in a variable.\n\n# Do This:\n\n* **Create two variables inside your event handler** to store the **age** and **name** of the user.\n* **Use `getText()` to update the values** stored in each of these variables.\n* **Change your `console.log` statements to use your variable instead of `getText`**.\n\n![](https://images.code.org/ca45dcb01ae2d1956ed2f87efeda0264-image-1445976691215.11.13 PM.png)",
        "CSDU4 - Design Mode - 29_markdown_instruction": "# Dropdown\n\nOn the last level we used `promptNum` to get the user's guess. However, we had no way to limit them to the numbers we wanted. They could have typed 11 even though we told them not to. A better way to get input with a limited set of options is the dropdown. The <img src=\"https://images.code.org/3b21b4288a2a155d1e9a3c2cf3a5b09b-image-1446229368079.28.23 PM.png\" style=\"width: 75px\"> is in your Design Mode Toolbox. You can control the list of options users can choose and then use `getText` to get the chosen number.\n\nWe are going to need an event handler in order to do this. The event handler will detect when the user has changed the value of the dropdown. \n\n# Do This:\n\n* **Add a dropdown** for their guess instead of `promptNum`. Make sure to give it a good ID.\n\n<img src=\"https://images.code.org/fea164f6e53d1ce0c50981565e066d4c-image-1446229598357.gif\" style=\"width: 350px\">\n\n* Under properties **find the Options** and change it to the **numbers 1 to 10**\n\n<img src=\"https://images.code.org/0cfecbcdcfb95fc30876155ec6a3a021-image-1446229593687.gif\" style=\"width: 250px\">\n\n* Add an event handler to detect the `change` event on your dropdown.<br><br>\n<img src=\"https://images.code.org/48cffda5b7ff3a446116a39b4dbcbe8c-image-1446232308751.gif\" style=\"width: 150px; float: right\">\n* Move your `if` statement inside the event handler so it will check each time the dropdown is changed.<br><br>\n* When the dropdown is changed **use `getText` to find out the user's guess**. Save the guess using a variable. **Don't forget about scope!**<br><br>\n* Test your app -- it should work like the demo.",
        "CSDU4 - Design Mode - 3_markdown_instruction": "# How Do Events Work?\nEvent-driven apps are made up of elements that can trigger events (such as buttons) and pieces of code called **event handlers**. Event handlers are commands that \"watch\" for certain events to occur in your program, and then run some function when an event occurs.\n\nWhen you first create an event handler from Design Mode, puts a `console.log()` block inside to help you test the event, but you can put just about any code you want inside the event hander.\n\n# Do This\n\nThe toolbox has a new block called `setText` which allows you to change the text of an element on the screen. You're going to modify the button event handler so that it changes the title text when clicked.\n\n* Drag out a `setText()` block to the _inside_ of the `onEvent()` callback function (where the `console.log()` block currently is)\n* From the block's dropdown, select \"titleLabel\" (the id of the element you want to change)\n* In the block's second input, replace \"text\" with a new title for the app\n* Run your program and click the button to see it work",
        "CSDU4 - Design Mode - 33_markdown_instruction": "# Play Sound With Keys\n\nYou may have noticed from the last couple of levels that the value of `event.key` is just a string which is the name of the key. As a result we can check which key was pressed with a simple conditional statement.  For example to check for the press of the **\"a\"** key we could write `if (event.key == \"a\")`.\n\n# Do This:\nThe **starter code provided** plays the sound whenever ANY key is pressed.\n\n* Use `console.log` to **find out the value of `event.key` when the up arrow is pressed.**\n\n* **Add an `if` statement** so the sound only plays when the when the **up arrow** is pressed.",
        "CSDU4 - Design Mode - 4_markdown_instruction": "# IDs\nThe `id` (we'll typically write **ID**) is a **unique identifier** used for each element in the app.\n\nEach element that appears in the app must have a **unique ID**. In fact, if you try to run a program that has two buttons with same ID you will get a warning message in the console.\n\n# Do This\nWhile each element you drag out in Design Mode gets a default ID, they aren't really that helpful (like `button1` and `button2`), so you should get in the habit of creating your own IDs.\n\n* Change the ID of your \"click me\" button to something useful (like `redButton`)\n* Drag out a second button\n* Make the second button blue and give it an ID of `blueButton`",
        "CSDU4 - Design Mode - 5_markdown_instruction": "# Debugging Event-Driven Programs: IDs\n\n**Debugging:** As you write more complex event-driven programs, you'll need to polish your **debugging** skills. Debugging involves locating and correcting errors within a program. It is a critical (and generally unavoidable) step when writing code.<img src=\"https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif\" style=\"float: right; width: 200px\">\n\n**Checking IDs:** Your first debugging task will be to verify that the button IDs match the IDs in the event-handlers. **Remember that IDs are case-sensitive**.",
        "CSDU4 - Design Mode - 9_markdown_instruction": "# How to Organize the Code\nAs your apps get more complex you'll have to think about how to organize your code so it remains readable and easy for you to locate things when debugging any problems.  We suggest the following convention which breaks the code into 3 major sections:\n* **Top**:   code for event handlers.\n* **Bottom**: code for any other other functions you've written. (We don't have any of these yet.)",
        "CSDU4 - Design Mode Icons_markdown_instruction": "<img src=\"https://images.code.org/2b405319f597910b1563ae607958171c-image-1475866226306.49.51.png\" style=\"width: 200px; float:right\">\n\n# Icons\nIcons help users find the right functionality while also making your app feel more polished.\n\n# Do This\nAdd a few icons to your app. For each icon:\n\n* Drag out an image element\n* Next to the \"Picture\" field click \"Choose...\"\n* Click on the \"Icons\" tab and select one\n* Make sure to give your image a good ID! (do we still need to say it?)\n\n",
        "CSDU4 Connecting Screens Getting Back_markdown_instruction": "# Navigating Back\n\nSomeone using your app can now get to each of the red, green, and blue pages, but they can't get back to the homepage. You can add buttons and event handlers of your own to help them do this.\n\n# Do This\n\nCreate buttons and event handlers to help a user navigate back to the \"home\" screen\n\n* Use Design Mode to create a button inside each of the \"red\", \"green\", and \"blue\" screens. Make sure to give them descriptive IDs.\n* Back in your code drag in three `onEvent()` blocks, one for each of the three buttons you made.\n* Inside each `onEvent()` block use the `setScreen()` block that switches back to your \"home\" screen.\n* Test your app. You should now be able to navigate back to the home screen from each of the other three.",
        "CSDU4 Connecting Screens template_markdown_instruction": "# Navigating\n\nOnce you start adding multiple screens to an app, you need to make sure that users can always get where they want to go. If you forget to provide a link back home or to a deeper page.\n\n# Do This\n\nHere's an app with four different pages, but only the \"red\" screen is linked so far.\n\n* Add event handlers for \"greenButton\" and \"blueButton\" to go to their respective screens\n* From each of the sub pages, add a button with event handler to navigate back to the home page\n* Test your app thoroughly to make sure all of your buttons work and you can always get back home",
        "CSDU4 Connecting Screens_markdown_instruction": "# Navigating\n\nOnce you start adding multiple screens to an app, you need to make sure that users can always get where they want to go. In the next two levels you'll learn how to make sure a user can always get back to the \"homepage\" of your app.\n\n# Do This\n\nHere's an app with four different pages, but only the \"red\" screen is linked so far. In this level you'll make the other two buttons take the user to the correct screen.\n\n* Add two `onEvent()` blocks, one each for the \"greenButton\" and \"blueButton\"\n* Use the `setScreen()` block to make each button switch to the appropriate screen\n* Test your app to make sure both buttons work. For example, when you click the green button you should go to the green screen.",
        "CSDU4 Crowdsource App Demo_markdown_instruction": "# Crowdsourcing\n\nCrowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and \"like\" submissions.\n\nThis example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.\n\n# Functionality Missing from this Prototype\n\n* User's can't create accounts or profiles\n* Submitted things aren't added to the list\n* Clicking on the \"like\" icons don't change their state",
        "CSDU4 Crowdsource App Demo_2018_markdown_instruction": "# Crowdsourcing\n\nCrowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and \"like\" submissions.\n\nThis example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.\n\n# Functionality Missing from this Prototype\n\n* User's can't create accounts or profiles\n* Submitted things aren't added to the list\n* Clicking on the \"like\" icons don't change their state",
        "CSDU4 Decision App Demo_markdown_instruction": "# Decision Maker\n\nSimilar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.\n\nThis simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:\n\n![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)\n\nDepending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.\n\n# Functionality Missing from this Prototype\n\n* Question buttons don't direct you to different screens\n* The final screen doesn't give you a recommended decision",
        "CSDU4 Decision App Demo_2018_markdown_instruction": "# Decision Maker\n\nSimilar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.\n\nThis simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:\n\n![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)\n\nDepending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.\n\n# Functionality Missing from this Prototype\n\n* Question buttons don't direct you to different screens\n* The final screen doesn't give you a recommended decision",
        "CSDU4 Functionality setText button_markdown_instruction": "# setText on More than Just Labels\n\nYou can use `setText()` to change the text of labels, obviously, but it can also be used to change the text on _any_ element that has text, including buttons, text input, and text areas.\n\n# Do This\n\nThe starter program has an event handler already set up for the red button, can you write event handlers for the other three buttons so they behave in the same way?",
        "CSDU4 Functionality setText input_markdown_instruction": "# Pre-fill Input Fields with setText\n\nYou've set the text of labels, and you've set the text of buttons, but did you know you can also use `setText()` to pre-fill text input fields?\n\n# Do This\n\nThis app has four buttons, each of which should fill the \"nameInput\" field with a given name. For each button:\n\n* Add an `onEvent` block to run when the button is clicked\n* In the button's event handler, set the text of \"nameInput\" to the appropriate name\n\nWhen you've gotten all four buttons to work, add another button that will fill the input field with your name.",
        "CSDU4 Functionality setText quiz 2_markdown_instruction": "# Answering the Question\n\nNow that this screen is asking the question you want it to ask, you'll want to make it respond to the answer buttons.\n\n# Do This\n\nInstead of using the buttons to change screens as we did in earlier quiz apps, each one of the answer buttons should change the title to say either \"Correct\" or \"Incorrect.\" For each of the answer buttons:\n\n* Add an event handler to watch the button's ID\n* In the event handler, set the title text to either \"Correct\" or Incorrect\"\n\n_Challenge: Create a couple more question screens just like this on and make the \"Next Question\" button navigate between them._",
        "CSDU4 Functionality setText_markdown_instruction": "# Changing text with setText()\n\nYou actually saw `setText()` briefly in the last lesson - it's a function that allows you to change the text of a design element with code.\n\n# Do This\n\nUsing the provided `onEvent()` block\n\n* Add a `setText()` block in the event handler\n* From the dropdown in the `setText()` block, select \"title\"\n* Make up a new title for the app and place it in the second parameter of the `setText()` block\n* Run it and test the button",
        "CSDU4 Functionality visible_markdown_instruction": "# Controlling Visibility\n\nEarlier in this lesson, when we were proposing ways to simplify the quiz app, we mentioned that it was possible to show or hide design elements with code. App Lab has two functions that let you control the visibility of an element:\n\n* `hideElement()` makes the specified element invisible\n* `showElement()` makes the specified element visible\n\n# Do This\n\nThe provided app has an image and two buttons.\n\n* Attach an event handler to the \"Hide\" button that hides the image when clicked\n* Attach an event handler to the \"Show\" button that shows the image when clicked",
        "CSDU4 List App Demo_markdown_instruction": "# List Manager\n\nThe list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.\n\nWhile this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is \"Done,\" but it could be extended to track and organize any amount of information about the list items.\n\n# Functionality Missing from this Prototype\n\n* Delete buttons don't actually delete items from the list\n* Add screen doesn't actually add an item to the list",
        "CSDU4 List App Demo_2018_markdown_instruction": "# List Manager\n\nThe list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.\n\nWhile this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is \"Done,\" but it could be extended to track and organize any amount of information about the list items.\n\n# Functionality Missing from this Prototype\n\n* Delete buttons don't actually delete items from the list\n* Add screen doesn't actually add an item to the list",
        "CSDU4 Project Bug Feature_markdown_instruction": "# Improving and Iterating\n\nYou've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.\n\n# Do This\n\nEach team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:\n\n* Add a comment to the top of your program describing the feature or bug fix you are implementing\n* Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.\n* When done, move your sticky to the **Done** column, pick a new one, and start the process over.",
        "CSDU4 Project Bug Feature_2018_markdown_instruction": "# Improving and Iterating\n\nYou've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.\n\n# Do This\n\nEach team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:\n\n* Add a comment to the top of your program describing the feature or bug fix you are implementing\n* Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.\n* When done, move your sticky to the **Done** column, pick a new one, and start the process over.",
        "CSDU4 Project Events_markdown_instruction": "# Linking Screens\n\nWith all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!\n\n# Do This\n\nFor each screen of your app:\n\n* Find all of the button IDs\n* For each button, add an event handler that watches that ID\n* In each event handler, use `setScreen()` to move the the right screen\n* Test it all out!\n\nDepending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.",
        "CSDU4 Project Events_2018_markdown_instruction": "# Linking Screens\n\nWith all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!\n\n# Do This\n\nFor each screen of your app:\n\n* Find all of the button IDs\n* For each button, add an event handler that watches that ID\n* In each event handler, use `setScreen()` to move the the right screen\n* Test it all out!\n\nDepending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.",
        "CSDU4 Project Functionality_markdown_instruction": "# Add Some Functionality\n\nUsing the list you brainstormed with your team, add a single piece of new functionality to your app.\n\n# Do This\n\nBefore adding anything new to a working app, it's always a good idea to make a backup. Click the \"Remix\" button in the header, give your remix a good name, and then come back here.\n\nFor each piece of functionality you incorporate:\n\n* Make a remix of your app at it's current state\n* Return here to work on your app\n* Add a comment to the top of your program describing the functionality you are trying to add\n* Work on your app until it works. Try to stay focused on only the single piece of functionality you've chosen\n* When done, pick a new idea and start the process over\n",
        "CSDU4 Quiz App Demo_markdown_instruction": "# Quiz Me\n\nA quiz app can be used to teach, or help reinforce, information important to your chosen topic.\n\nAt its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.\n\nMore advanced quiz apps could include features such as:\n\n* Different types of questions (such as matching, free response, or even interactive games)\n* Randomizing the order of questions\n* Changing the questions based on how we'll you're doing\n* Providing a final score\n* Incorporating study material\n\n# Functionality Missing from this Prototype\n\n* Questions aren't actually checked for correctness",
        "CSDU4 Quiz App Demo_2018_markdown_instruction": "# Quiz Me\n\nA quiz app can be used to teach, or help reinforce, information important to your chosen topic.\n\nAt its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.\n\nMore advanced quiz apps could include features such as:\n\n* Different types of questions (such as matching, free response, or even interactive games)\n* Randomizing the order of questions\n* Changing the questions based on how we'll you're doing\n* Providing a final score\n* Incorporating study material\n\n# Functionality Missing from this Prototype\n\n* Questions aren't actually checked for correctness",
        "CSDU6  note array length_markdown_instruction": "# Adding to Arrays\n\nArrays don't have to be a fixed length, you can add or delete as many items in the array as you'd like. The left and right arrows to the side of the array block let you add or delete an item at the end of the array.\n\n![](https://images.code.org/a9a72527b700740382cae5017f8fa16d-image-1511913249739.jpg)\n\n# Do this\n\n* Add at least two more unique notes to the existing array.\n* Run the code to see what happens.",
        "CSDU6 - Arrays - expressionsAsIndexes_markdown_instruction": "# Expressions as Indexes: Using Variables\n\n* **Starter code** has been provided which creates an list of identifiers for icons in the icon library\n* **Write code** that sets the image on the screen to a random icon from the list",
        "CSDU6 - Arrays - indexPractice_markdown_instruction": "# Index Practice\n\n<img src=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png\" style=\"width: 150px; float: right\">\n\n**Starter code** has been provided that creates a list called `colors`.\n\n* Use `setProperty` and the list of colors to change the `background-color` of the buttons to create a rainbow. The first button has been done for you.",
        "CSDU6 - Arrays - length_markdown_instruction": "<img src=\"https://images.code.org/f02914c957acffecbadaa3646388d26c-image-1486499703151.33.50 PM.png\" style=\"width: 200px; float:right\">\n\n# List Length\n\n* **Starter code** has been provided which creates several long arrays.\n* **Use `list.length` and `console.log`** to determine how many items are in each array. An example of the output is below.",
        "CSDU6 - Arrays - lengthMinus1_markdown_instruction": "# Accessing Last Item in List\n\n* **Starter code** has been provided that which creates several lists.\n* **Write Code** to display the final item in each list. Make sure to use list.length so that your code will work even if the list shrank.\n",
        "CSDU6 - LED toggle buttonL down_markdown_instruction": "# Other Board Events with the Buttons\n\nThe left and right buttons have three event types:`press`, `down`, and `up`\n\nSo far you've just been using the `press` event. Now, we're going to use the `up` and `down` events to make the LED turn on and off with just **one** button.\n\n## Do this\n* Drag out an `onBoardEvent` block for one of the buttons and set the event type to `down`.\n* Add code to turn the LED on when the button goes down.",
        "CSDU6 - LED toggle buttonL up_markdown_instruction": "# Other Board Events with the Buttons\n\nInstead of using the right button, you can make the LED turn off when the left button comes back up.\n\n# Do this\n* Create an 'up' event for the left button.\n* Add code to turn the LED off when the button pops back up.",
        "CSDU6 - LED toggle buttonL up_2018_markdown_instruction": "# Other Board Events with the Buttons\n\nInstead of using the right button, you can make the LED turn off when the left button comes back up.\n\n# Do this\n* Create an 'up' event for the left button.\n* Add code to turn the LED off when the button pops back up.",
        "CSDU6 - LED toggle buttonL_markdown_instruction": "# Using Board Events with the LED\n\nCan you toggle the LED on and off using a single board event?\n\n## Do this\n* Pull out one `onBoardEvent()` block.\n* Add code to turn the LED on and off with just the one event on the Board.",
        "CSDU6 - UI and Inputs - Debug Screens and IDs_markdown_instruction": "# Debug The Program\n\nIn Unit 4 you learned how to set up the UI of an app, give elements meaningful IDs, and switch between screens using button clicks.   The programmer that created this app did not use good IDs and that caused their code to be buggy. Can you fix their code?\n\n* Go into Design Mode and give everything meaningful IDs\n* Set up the event handlers so that the buttons transition to the correct screen (see diagram below)\n\n![](https://images.code.org/f9c9a9b5cbcb6e1cd59b1349625b7e9d-image-1485898200882.png)",
        "CSDU6 - UI and Inputs - dropdown setText_markdown_instruction": "# setText and getText\n\nOften you will want to get the text of a UI Element and use it to set the text of another element on the screen. Can you get the text from the dropdown when the user picks a new input and use it to set the text of the \"choiceDisplay\" label.",
        "CSDU6 - UI and Inputs - event type testing_markdown_instruction": "# Event Testing: \n\nSo far you have only used the 'click' event type. However there are lots of other event types. You are going to test out a couple different event types for 4 different UI elements (Button, Dropdown, Slider, Text Input).\n\n**Starter Code:** The starting code is set up to react to the *click* event for the *button*. When that event fires a message will be logged to the console.\n\nOne at a time, **change either the ID or event type**. Run the program and write down you observations of when this event fires. Keep going until you have tried all the combinations of events in the table.",
        "CSDU6 - UI and Inputs - function_markdown_instruction": "# setColor Function\n\nAt this point you probably have the same code inside each of your event handlers. Remember that when you have repeated code it is good to put it into a function. Can you use functions to get rid of the repeated code?",
        "CSDU6 - UI and Inputs - get set with text input_markdown_instruction": "# setText and getText\n\nYou've seen how to use getText and setText already. Can you make this app get the text the user typed once they hit enter and show it in the text area at the bottom?\n\n_Tip: The \"change\" event is triggered when the user clicks \"enter\" in a field. Use an event handler for the text input watching for the \"change\" event._",
        "CSDU6 - UI and Inputs - getNumber practice_markdown_instruction": "# getNumber\n\n**Starter Code:** The program tries to update the valueDisplay whenever the slider value changes but it always sets the value to 10.\n\nCan you use `getNumber()` to get the value of the slider and update the valueDisplay as it changes?",
        "CSDU6 - UI and Inputs - getNumber_markdown_instruction": "# getNumber\n\n**Starter Code:** This program creates a simple calculator but **there is something wrong with it. Try putting in 2 + 2.**\n\nWe can fix this by using `getNumber()` instead of `getText()`. Can you fix the program by changing `getText()` to `getNumber()`?",
        "CSDU6 - UI and Inputs - getText_markdown_instruction": "# getText\n\nTry to set up an event handler that gets the text from the dropdown whenever a user selects a new item from the dropdown. You will need to use the getter `getText()`. Whenever you use a getter you should save it in a variable. Use `console.log()` to make sure it is working.",
        "CSDU6 - UI and Inputs - hide show_markdown_instruction": "# Hide and Show\n\nIt is a little weird that both buttons are on the screen at the same time. You don't need the stop alarm button until the alarm is on. Can you make the buttons only show when they are needed?\n\n* You will want the stop alarm button to be hidden when the program starts. You can do this in design mode.\n\nHint: When you click the trigger alarm button, you should change the text, hide the trigger alarm button, _and_ show the stop alarm button.",
        "CSDU6 - UI and Inputs - set slider range_markdown_instruction": "# Set Slider Range\n\nSliders represent a range of numbers. In order to set that range you need to set the minimum value and maximum value for each slider. Do you remember what the range of values is you can give for each value in a RGB color?",
        "CSDU6 - UI and Inputs - setProperty Image_markdown_instruction": "# setProperty image\n\n**Note:** This level starts in Design Mode.\n\nThere is an image element set up for you but it does not show when you leave Design Mode because it has not been told what image to display. \n\n* Use the `setProperty()` command to set the image of the UI Image Element on the screen.\n",
        "CSDU6 - UI and Inputs - setProperty first level_markdown_instruction": "# setProperty\n\n**Starter Code:** There is one call to `setProperty()` which sets the text-color to blue when you run the program.\n\nCan you add more calls to `setProperty()` that change other things about the text when you run the program? Try to change at least 3 more things.\n",
        "CSDU6 - UI and Inputs - setProperty_markdown_instruction": "# setProperty background-color\n\nChange the `background-color` of a button to a new random color each time it is clicked using `setProperty()`.",
        "CSDU6 - UI and Inputs - setScreen_markdown_instruction": "# setScreen\n\nLets start with a setter you have used before `setScreen()`. \n\n* Make the About Me button on the Home page go to the About Me page.\n* Make the Back button on the About Me go to the Home page.",
        "CSDU6 - UI and Inputs - setText_markdown_instruction": "# setText\n\nWe are going to start making an alarm app. We have already set up an event handler for the \"triggerAlarmButton\" which will change the \"statusLabel\" text to ON when clicked. Can you make the stop alarm button change the text to OFF when clicked?",
        "CSDU6 - UI and Inputs - slider UI_markdown_instruction": "# RGB Sliders\n\n<img src=\"https://images.code.org/f3fb468a73aa35b69d7e64deee34c7c3-image-1486080850211.12.39 PM.png\" style=\"width:200px;float:right\">\n\nFirst step to creating the RGB Sliders app is to set up the UI elements and event handers for the sliders. \n\n* Can you get the screen to look similar to the one below? Hint: The color box is a button with no text.\n* Can you set up 3 event handlers that listen for when someone has finished moving the slider to a new location? Hint: Think back to your event investigation. Which event type do you want?",
        "CSDU6 - board event challenge_markdown_instruction": "# Challenge: Sound Board\n\nCheck with your teacher before starting the challenge.\n\nNow that you know how to use board events, the buttons, switch, and the buzzer, try making a program that turns your board into a sound board when you press the buttons or flip the switch. Play around with the duration and frequencies of the sounds, and listen to how it turns out.",
        "CSDU6 - board event challenge_2018_markdown_instruction": "# Challenge: Sound Board\n\nCheck with your teacher before starting the challenge.\n\nNow that you know how to use board events, the buttons, switch, and the buzzer, try making a program that turns your board into a sound board when you press the buttons or flip the switch. Play around with the duration and frequencies of the sounds, and listen to how it turns out.",
        "CSDU6 - button LED prediction_markdown_instruction": "See contained level for markdown",
        "CSDU6 - button LED prediction_2018_markdown_instruction": "See contained level for markdown",
        "CSDU6 - button debug_markdown_instruction": "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/clickdebug.gif\" style=\"float: right; margin: 20px; width: 200px;\">\n\n# Debug\n\nThis program should work like the image on the right - toggle LEDs one by one in the direction of the button you click. Clicking the left button should cause LEDs to toggle counter clockwise, while clicking the right button should toggle LEDs clockwise. Find and fix all of the bugs to get the program working again.\n\n_Challenge: Note that in the gif, the last LED on each side doesn't get toggled back. Can you update the program so that it doesn't leave an LED on when you change directions?_",
        "CSDU6 - button on off_markdown_instruction": "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_on_off.gif\" style=\"float: right; margin: 20px; width: 200px;\"/>\n\n# On and Off Buttons\n\nWrite a program that works like the image to the right. The left button should turn on all of the color LEDs, and the right button should turn them off again.\n",
        "CSDU6 - button screen buttonR_markdown_instruction": "# Changing the Input\n\n<img src=\"https://images.code.org/cc903e4a0fb57b241b90abe220f027ef-image-1487707484420.04.00.png\" style=\"float:right; margin-left: 10px; width: 50%\">\n\nUsing another `onBoardEvent()` block, make `buttonR` change the screen back to \"red_screen\". The first input of the `onBoardEvent()` command lets you pick which board object to watch.",
        "CSDU6 - button switch_markdown_instruction": "# The Toggle Switch\n\nWhile the toggle switch is in many ways similar to the left and right buttons, the reasons you might use it can be different. Unlike the buttons, the toggle switch stays in whichever position you place it, so it doesn't have a \"press\" event. In fact, you'll find that none of the events you used with buttons are present for the toggle switch.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/toggle.gif\" style=\"float:right; margin: 20px; width: 200px;\">\n\n# Do This\n\nDrag out an `onBoardEvent()` block and select `toggleSwitch` from the first dropdown\n\n* Look at the options available in the events dropdown. What do you think they do?\n* Write a program that turns on half of the color LEDs at a time, based on the position of the toggle switch",
        "CSDU6 - button toggle_markdown_instruction": "# Toggle with a Button\n\nUsing `onBoardEvent()`, can you write a program that toggles the red LED when you click the left button?",
        "CSDU6 - button tug o war challenge_markdown_instruction": "# Challenge\n\n_Check with your teacher before starting this challenge_\n\nAt this point your Tug o' War game should have basic functionality, but there are still a few things missing. Continue fleshing out your game. You can make the game your own in any way you like, but you might add some of the following features:\n\n* Switch to a \"Win\" screen when one player reaches their target\n* Add a \"Reset\" button to start the game over\n* Add different difficulty levels or \"handicaps\" (one user may move two on each click while the other only moves one)\n* Add visuals to make the game look more interesting\n* Use the color LEDs to show the score",
        "CSDU6 - button tug o war left button_markdown_instruction": "# Making Both Buttons Work\n\nIf you were successful in the last level, the slider should move to the right when the right button is pressed. To get the left button to work you need to add another event handler, only this time it should **decrease** the variable _score_ and update the slider on each press.",
        "CSDU6 - button tug o war right button_markdown_instruction": "# Tug o' War\n\nLet's start working on a two player Tug o' War game. Each player will be assigned one of the two hardware buttons (`buttonL` or `buttonR`), and they play the game by clicking as quickly as possible. Each time one of the buttons is clicked, it should move the slider \"tug_slider\" in the direction of that button.When the slider gets to one of the ends (either -10 or 10), that player wins.\n\n# Do This\n\nFirst we'll get the right button working. You've already been provided an event handler for `buttonR` - when the \"press\" event occurs, your program should:\n\n* Increase the variable _score_ by one\n* Set the value of \"tug_slider\" to the new score\n\nDon't worry about the other button yet, we'll get to that in the next level.",
        "CSDU6 - button up down predict question_markdown_instruction": "What do you think will happen when you run this code? What will happen when you press the left and right buttons?",
        "CSDU6 - button up down_markdown_instruction": "# Down and Up Events\n\nAs you saw in the last level, the \"down\" and \"up\" events allow you to respond to buttons being pressed down and being released back up, respectively.\n\n# Do This\n\nUsing those events, can you write a program that shows the label with id \"alert_message\" while the button is pressed down, but hides it again when the button is released?",
        "CSDU6 - button_LED_prediction_markdown_instruction": "# Board Events\n\nThe `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click \"Run\" to check your answer.\n\n* What will happen when you press the left button down?",
        "CSDU6 - button_LED_prediction_2018_markdown_instruction": "# Board Events\n\nThe `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click \"Run\" to check your answer.\n\n* What will happen when you press the left button down?",
        "CSDU6 - buzzer duration buttons_markdown_instruction": "# Buzzer and the Buttons\n\nThis program should use the buttons to play long and short buzzes.\n\n# Do this\n* Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.",
        "CSDU6 - buzzer duration buttons_2018_markdown_instruction": "# Buzzer and the Buttons\n\nThis program should use the buttons to play long and short buzzes.\n\n# Do this\n* Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.",
        "CSDU6 - buzzer duration_markdown_instruction": "# Buzzer Duration\n\nAs you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.\n\n* Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.\n\n* Duration determines how long the buzzer is going to play a sound for in milliseconds.\n\nFor right now we're going to focus on duration, the second parameter.\n\n\n# Do this\nTry out a few things with duration:\n\n* Change the duration of the buzzer to something longer than 100.\n* Try setting the duration to 0, what happens?\n\nRun the program multiple times to see what happens before you move on.",
        "CSDU6 - buzzer duration_2018_markdown_instruction": "# Buzzer Duration\n\nAs you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.\n\n* Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.\n\n* Duration determines how long the buzzer is going to play a sound for in milliseconds.\n\nFor right now we're going to focus on duration, the second parameter.\n\n\n# Do this\nTry out a few things with duration:\n\n* Change the duration of the buzzer to something longer than 100.\n* Try setting the duration to 0, what happens?\n\nRun the program multiple times to see what happens before you move on.",
        "CSDU6 - buzzer intro_markdown_instruction": "# Using the Buzzer\n\nYou can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.\n\n# Do this\n* Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?\n* Run the program and enjoy the music of your Circuit Playground.",
        "CSDU6 - buzzer intro_2018_markdown_instruction": "# Using the Buzzer\n\nYou can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.\n\n# Do this\n* Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?\n* Run the program and enjoy the music of your Circuit Playground.",
        "CSDU6 - ch 1 exemplar LEDs_markdown_instruction": "# An Example Using Color LEDs\n\nHere's an example app that uses the color LEDs, event handlers, and a for loop to create an visual color mixer. Run this app and analyze how you think it was written.",
        "CSDU6 - ch 1 project design_markdown_instruction": "# Set Up Your Screen\n\nUsing the project guide, set up the elements of your screen in Design Mode.",
        "CSDU6 - ch 1 project events_markdown_instruction": "# Event Handlers\n\nSet up an event handler for each of the elements you plan to use for input. Don't worry yet about getting the them fully functional, but you might use `console.log()` statements to help with testing.",
        "CSDU6 - ch 1 project finish_markdown_instruction": "# Add the Finishing Touches\n\nGo back to your project guide and check to see that your app is addressing the goals you set out. This is your chance to add finishing touches, improve functionality, and get your app ready to be used by other people. When you're are finished, and have thoroughly tested it, use the share button to share your app out with others.",
        "CSDU6 - ch 1 project functions_markdown_instruction": "# Functions\n\nCreate all of the functions that you identified in your project guide.",
        "CSDU6 - ch 1 project output_markdown_instruction": "# Board Output\n\nAt this point you should have the structure of your app mostly fleshed out. Test your program as is to make sure that everything currently works as expected. Once you are confident in your program as-is, add the code to send output to your board.",
        "CSDU6 - end challenge_markdown_instruction": "# Challenge: Board Events and Outputs\n\nCheck with your teacher before starting the challenge.\n\nNow that you know how to use board events, the led, and the buzzer, try to create an app that uses all three.",
        "CSDU6 - final project 1_markdown_instruction": "# Designing the User Interface\n\nBefore worrying about the code for your program, start by laying out the user interface. As you add elements in Design Mode, make sure to give everything a meaningful ID. Even if you don't plan on accessing an element with code, making sure that all of your IDs are descriptive will help make your program more readable and easier to program.",
        "CSDU6 - final project 1_2018_markdown_instruction": "# Designing the User Interface\n\nBefore worrying about the code for your program, start by laying out the user interface. As you add elements in Design Mode, make sure to give everything a meaningful ID. Even if you don't plan on accessing an element with code, making sure that all of your IDs are descriptive will help make your program more readable and easier to program.",
        "CSDU6 - final project 2_markdown_instruction": "# Wiring Up the UI\n\nWith your user interface in place, you can now add event handlers for your interface elements. At this point you may want to just include `console.log()` commands to make sure that your events are working as expected - you can add the functional code later one.",
        "CSDU6 - final project 2_2018_markdown_instruction": "# Wiring Up the UI\n\nWith your user interface in place, you can now add event handlers for your interface elements. At this point you may want to just include `console.log()` commands to make sure that your events are working as expected - you can add the functional code later one.",
        "CSDU6 - final project 3_markdown_instruction": "# Board Input Events\n\nNow you can add the events which will take input from the board. Again, feel free to just use `console.log()` statements at this point to ensure that your events are working.",
        "CSDU6 - final project 3_2018_markdown_instruction": "# Board Input Events\n\nNow you can add the events which will take input from the board. Again, feel free to just use `console.log()` statements at this point to ensure that your events are working.",
        "CSDU6 - final project 4_markdown_instruction": "# Functions\n\nAs you continue to work through your program, look for patterns that can be abstracted into functions. Can you find code that is repeated multiple places, or chunks of code that could be better understood of given a name? Don't forget that you can use parameters to write functions for repeated code that is _mostly_ the same, but varies a bit (such as setting color on multiple LEDs).",
        "CSDU6 - final project 4_2018_markdown_instruction": "# Functions\n\nAs you continue to work through your program, look for patterns that can be abstracted into functions. Can you find code that is repeated multiple places, or chunks of code that could be better understood of given a name? Don't forget that you can use parameters to write functions for repeated code that is _mostly_ the same, but varies a bit (such as setting color on multiple LEDs).",
        "CSDU6 - final project 5_markdown_instruction": "# Board Output\n\nIf you haven't already, use some of the output elements on the board to communicate useful information to the user.",
        "CSDU6 - final project 5_2018_markdown_instruction": "# Board Output\n\nIf you haven't already, use some of the output elements on the board to communicate useful information to the user.",
        "CSDU6 - final project 6_markdown_instruction": "# Finishing Touches\n\nAdd any finishing touches still needed to make your innovation awesome. If you have time, test out your innovation with some potential users to gather feedback and find opportunities for improvement. When you're totally finished, click the \"Submit\" button to turn it in!",
        "CSDU6 - final project 6_2018_markdown_instruction": "# Finishing Touches\n\nAdd any finishing touches still needed to make your innovation awesome. If you have time, test out your innovation with some potential users to gather feedback and find opportunities for improvement. When you're totally finished, click the \"Submit\" button to turn it in!",
        "CSDU6 - for loop - 1_markdown_instruction": "# For Loop - Looping Through A List\n\n* Print out all the items in the colors list using a for loop",
        "CSDU6 - for loop - 10_markdown_instruction": "# For Loop - Looping Through A List\n\nYou saw this for loop on the last level:\n\n<pre>\nfor(var i = 0; i < daysOfWeek.length; i++){\n  console.log(i);\n}\n</pre>\n\nWhich prints the numbers from 0 to one less than the list length in this case (0 to 6). Another way of looking at this is that it prints all the index values in the list!  This might be helpful to loop through a list!\n\n**Starter Code:** This program writes out each item of the array individually. \n\n**Write Code** that uses the for loop from the last level to print out all the items in the list.",
        "CSDU6 - for loop - 2_markdown_instruction": "# For Loop - Condition\n\n* Run the program - how many times does it print?\n* Change the 2 to another positive number less than 5. What happens?",
        "CSDU6 - for loop - 4_markdown_instruction": "# For Loop - Incrementor \n\n* Run the program what numbers is it printing?\n* Try to change the 2 to another number, what happens?",
        "CSDU6 - for loop - 6_markdown_instruction": "# For Loop - Condition Practice\n\nChange the condition of the for loop so that the word message prints 6 times.",
        "CSDU6 - for loop - 7_markdown_instruction": "# For Loop - Starting Value Practice\n\nEdit the starting value and the condition of the loop so that it counts from 50 to 100.\n",
        "CSDU6 - for loop - 8_markdown_instruction": "# For Loop - Incrementor Practice\n\nCan you make the program count from 30 to 60 by 3s?  (30,33,36,39......57,60)",
        "CSDU6 - for loop - around for loop_markdown_instruction": "# Before and After For Loop\n\n* Run this code and check out when the console.log statements before and after the for loop print.",
        "CSDU6 - for loop - button grid 1_markdown_instruction": "# Random Button Colors\n\n**Starter Code:** An array with the name of the 30 buttons on the screen (not including the New Pattern button) is provided for you. \n\n**Write Code** that loops through all the buttons on the screen and gives them each a random color when the New Pattern Button is clicked.",
        "CSDU6 - for loop - color buttons with for_markdown_instruction": "# Lists\n\n<img src=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png\" style=\"width: 150px; float: right\">\n\nTake a look at the code you wrote in the last level. Can you make it better by using a loop to set the button colors instead?",
        "CSDU6 - for loop - color buttons_markdown_instruction": "# Lists\n\n<img src=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png\" style=\"width: 150px; float: right\">\n\n**Starter code** has been provided that creates a list of colors and a list of the buttons on the screen. In addition there is code to set each button to a color.\n\n**Change the code** so that instead of the name of each button being used in the call to `setProperty`, the list index is used instead.  For example:\n\n<pre>\nsetProperty(buttons[0],\"background-color\", colors[0]);\n</pre>",
        "CSDU6 - for loop - count down_markdown_instruction": "# Counting down\n\nSo far all the programs you have written count up. Can you make this program count down from 10 to 1? Hint: You need to change something about all three parts of the for loop!",
        "CSDU6 - for loop - next day_markdown_instruction": "# Accessing Items in a List\n\n**Starter Code:** There is a list of days of the week provided as well as a command to set the label on the screen.\n\n**Do This:** Can you change the index value so that the page displays \"Today is: Tuesday\"",
        "CSDU6 - for loop - predict repeat_markdown_instruction": "# For Loop - Condition Practice\n\nChange the condition of the for loop so that the word message prints 6 times.",
        "CSDU6 - for loop - repeatedCode_markdown_instruction": "# Refactoring To For Loop\n\nFor loops are just a way of simplifying repeated code and make it easier to update in the future.\n\n* Can you take the repeated code here and turn it into a for loop?",
        "CSDU6 - for loop - why for_markdown_instruction": "# Lists\n\n<img src=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png\" style=\"width: 150px; float: right\">\n\nWhy are loops so great?  Well lets try something out.\n\n* Add another button to your screen in design mode.\n* Add a color for that button to the end of your list of colors\n* Add the button name for that button to the end of your list of buttons\n* Run your program!\n\nDid it work? Notice you never changed the for loop at all!",
        "CSDU6 - for loop - winning num_markdown_instruction": "# Debug\n\nThis program is supposed to generate 3 random winning numbers from 1 to 5. There is a list of numbers but it seems like there are some bugs with generating the 3 random numbers when the Draw Numbers button is clicked. Can you debug the program? Check to make sure you can get every number in every slot of the winning numbers area. ",
        "CSDU6 - for loops - lights picker_markdown_instruction": "# Challenge: More Patterns\n\nYour work on the color light patterns is back:\n\n* Consider using the all lights on and all lights off functions you made on the last level here.\n* Can you edit the patterns you created to use for loops where appropriate?\n* Can you add more patterns that use for loops?",
        "CSDU6 - lightswitch toggleswitch_markdown_instruction": "# Using the Toggle Switch\n\nThe toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.\n\n# Do this\n\n* Create a new toggle switch event that is triggered when the switch is flipped to `close`.\n* Add code so that when the toggle switch is flipped to `close` the light turns off.",
        "CSDU6 - lightswitch toggleswitch_2018_markdown_instruction": "# Using the Toggle Switch\n\nThe toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.\n\n# Do this\n\n* Create a new toggle switch event that is triggered when the switch is flipped to `close`.\n* Add code so that when the toggle switch is flipped to `close` the light turns off.",
        "CSDU6 - lists - lists 1_markdown_instruction": "# Lists\n\nLet's practice adding items and printing out lists.\n\n* Add a `console.log()` command to print out the lettersList\n* Add the letter \"c\" to the letters list so it prints [a,b,c,d]",
        "CSDU6 - lists - lists 2_markdown_instruction": "# Create Your Own Lists\n\n**Write code:** to create and then log to the console _one or more_ of the following lists:\n\n* The numbers from 1 to 10\n* A list of the names of 5 different shapes\n* The names of the months of the year",
        "CSDU6 - lists - lists 3 - out of bounds_markdown_instruction": "# Accessing Items in a List\n\n**Starter Code:** There is a list of days of the week provided as well as well as a console.log statement to access the spot that holds \"Friday\" in the list. \n\n**Do This:** Can you add three more console.log statements that access the spots that hold:\n\n* Thursday\n* Monday\n* Sunday",
        "CSDU6 - lists - lists 3_markdown_instruction": "# Accessing Items in a List\n\n**Starter Code:** There is a list of days of the week provided as well as a command to set the label on the screen.\n\n**Do This:** Can you change the index value so that the page displays \"Today is: Tuesday\"",
        "CSDU6 - lists - lists 5_markdown_instruction": "# Debug\n\nThis program is supposed to generate 3 random winning numbers from 1 to 5. There is a list of numbers but it seems like there are some bugs with generating the 3 random numbers when the Draw Numbers button is clicked. Can you debug the program? Check to make sure you can get every number in every slot of the winning numbers area. ",
        "CSDU6 - sensor love tester demo_markdown_instruction": "# \"Love\" Tester\n\nThe \"Love\" Tester is a classic carnival game. It works by having a user place their palm flat on a sensor or hold a metal handle. The tester then displays how in love that person is. The simplest version of these machines simply measure the temperature of the user’s hand and equate more love with a higher temperature.\n\nTest out this \"Love\" Tester by holding your thumb down on your Circuit Playground's temperature sensor. Compare your results with those of your neighbors - do all of the boards respond in the same way?",
        "CSDU6 - sensor theremin demo_markdown_instruction": "# Light Theremin\n\nA theremin is an instrument that can be played without the musician actually touching it! Traditional theremins use magnetic fields for user interaction, but a simpler version can be made by detecting and reacting to light.\n\nTest out this theremin by waving your hand over the light sensor on your Circuit Playground. How does the tone change as the amount of light detected changes?",
        "CSDU6 - sensor vu meter demo_markdown_instruction": "# VU Meter\n\nMany stereo systems feature a row of LEDs that light up as the music plays. This display is called a Volume Unit (VU) Meter, and it allows the user to see how loud the music is as it plays.\n\nTest out this VU Meter by speaking or otherwise making noise near the Circuit Playground. How do the lights and display change as the volume of ambient noise changes?",
        "CSDU6 - sensors challenge_markdown_instruction": "# Challenge\n\n_Check with your teacher before pursuing this challenge_\n\nNow that you've practiced taking input from the various analog sensors and changing their scale to meet your needs, can you come up with an interesting use for sensor data? It's easy to display the raw numbers coming out of a sensor, but far more interesting to present that data in different ways.\n\nConsider the following ways you might communicate sensor data:\n\n* Use the board outputs\n* Change the width, height, or position of a UI element\n* Use conditionals to display different images based on sensor values",
        "CSDU6 - sensors experiment_markdown_instruction": "<iframe width=\"370\" height=\"620\" style=\"float:right; margin-left: 25px; border: 0px;\" src=\"https://studio.code.org/projects/applab/kxyJyJI1Bg1fV_5NIl8MHQ/embed\"></iframe>\n\n# Sensor Experiment\n\nRun the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. Once you've completed the experiment, answer the following questions for each sensor in the text box below.\n\n* What does this sensor measure?\n* What is its maximum value?\n* What is its minimum value?",
        "CSDU6 - sensors light_markdown_instruction": "# Light Sensor Updates\n\nThis app is very similar to the last, but we've added a button with the ID \"update_button\". Write a program that displays the current value of the light sensor every time the update button is clicked.",
        "CSDU6 - sensors love tester 1_markdown_instruction": "# \"Love\" Tester: Collecting and Scaling Input\n\nWhich sensor do you need to take input from?\nWhat scale of input is appropriate for this app?\n\n# Do This\n\nAdd an event handler to continually collect data from your chosen sensor and use `console.log()` to track how it changes to user interaction. If necessary, change the scale of your input to meet your needs.\n\n_Tip: Consider which type of data is easiest to use from the temperature sensor - the raw value, temperature in C, or temperature in F._",
        "CSDU6 - sensors love tester 2_markdown_instruction": "# \"Love\" Tester: Displaying Output\n\nHow will your collected data be displayed?\nDoes your data need to be transformed or processed before being displayed?\n\n# Do This\n\nReplace your call to `console.log()` with the kind of output you need for your project.\n\n_Tip: You may want a conditional to determine which output to display depending on input._",
        "CSDU6 - sensors love tester 3_markdown_instruction": "# \"Love\" Tester: Finishing it Up\n\nDoes your app meet the minimum requirements of its objective?\n\n# Do This\n\nAdd the finishing touches to your app. Return to your planning guide to make sure that the app meets your initial goals.",
        "CSDU6 - sensors predict question_markdown_instruction": "# Make a Prediction\n\nRead the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.",
        "CSDU6 - sensors predict question_2018_markdown_instruction": "# Make a Prediction\n\nRead the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.",
        "CSDU6 - sensors rgb part 1_markdown_instruction": "# Displaying Sensor Readings in Color\n\nIn the previous prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communcate the current value of all three analog sensors with a single color.\n\n# Do This\n\nTo start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.\n\n<img src=\"https://images.code.org/39de88e19682e905a1e08d5f12398f35-image-1488995498849.png\" style=\"float: right; width: 300px; margin-left: 20px;\"/>\n\n* Using the `sensor.setScale()` block, set each of the three analog sensors to the right scale for an RGB color channel.\n* Create a variable for each of the three colors and assign each one to the `.value` of a different sensor.\n* Use `console.log()` to test that your variables are in the correct range.\n\n_Hint: Order matters. You need to set the scale of a sensor before checking it's value_",
        "CSDU6 - sensors rgb part 2_markdown_instruction": "# Putting Color on the Screen\n\nNow that your sensor data is in a scale that works for RGB, you can go about setting the screen color.\n\n# Do This\n\n* Add a `setProperty()` block and set it to change the \"background-color\" property of \"screen1\".\n* Add an `rgb()` block to the last parameter of `setProperty()`.\n* Use the three color variables you created as inputs to the `rgb()` block.",
        "CSDU6 - sensors rgb part 3_markdown_instruction": "# Continuous Updates\n\nThis sensor-to-color app isn't super useful if it only sets the color once when you start the app. You can use the sensors' \"data\" event to make your app continually update the background color every time the value changes.\n\nMove your `setScale()` blocks into a an event handler for one of the sensors to make the app update continually.",
        "CSDU6 - sensors sound_markdown_instruction": "# Reading the Sound Sensor\n\nIn this app we've already added a text label with the id \"sound_value\". Using the `soundSensor.value` block. display the value of the sound sensor.",
        "CSDU6 - sensors temp_markdown_instruction": "# Make a Thermometer App\n\nWhile the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties `tempSensor.F` and `tempSensor.C` which convert the raw input value to either Fahrenheit or Celsius.\n\n# Do This\n\nMake a simple thermometer app that reads in values from the temperature sensor. Your app can display the temperature in either Fahrenheit or Celsius (or both!)\n\n_Challenge: can you make your app continually update the temperature readings?_",
        "CSDU6 - sensors theremin 1_markdown_instruction": "# Light Theremin: Collecting and Scaling Input\n\nWhich sensor do you need to take input from?\nWhat scale of input is appropriate for this app?\n\n# Do This\n\nAdd an event handler to continually collect data from your chosen sensor and use `console.log()` to track how it changes to user interaction. If necessary, change the scale of your input to meet your needs.",
        "CSDU6 - sensors theremin 2_markdown_instruction": "# Light Theremin: Displaying Output\n\nHow will your collected data be displayed?\nDoes your data need to be transformed or processed before being displayed?\n\n# Do This\n\nReplace your call to `console.log()` with the kind of output you need for your project.",
        "CSDU6 - sensors theremin 3_markdown_instruction": "# Light Theremin: Finishing it Up\n\nDoes your app meet the minimum requirements of its objective?\n\n# Do This\n\nAdd the finishing touches to your app. Return to your planning guide to make sure that the app meets your initial goals.",
        "CSDU6 - sensors vu meter 1_markdown_instruction": "# VU Meter: Collecting and Scaling Input\n\nWhich sensor do you need to take input from?\nWhat scale of input is appropriate for this app?\n\n# Do This\n\nAdd an event handler to continually collect data from your chosen sensor and use `console.log()` to track how it changes to user interaction. If necessary, change the scale of your input to meet your needs.\n\n_Tip: If you are going to use the 10 color LEDs for output, how should you set the scale of your sensor?_",
        "CSDU6 - sensors vu meter 2_markdown_instruction": "# VU Meter: Displaying Output\n\nHow will your collected data be displayed?\nDoes your data need to be transformed or processed before being displayed?\n\n# Do This\n\nReplace your call to `console.log()` with the kind of output you need for your project.\n\n_Tip: You may want to use a conditional to determine which LEDs to turn on, and which one's to turn off_",
        "CSDU6 - sensors vu meter 3_markdown_instruction": "# VU Meter: Finishing it Up\n\nDoes your app meet the minimum requirements of its objective?\n\n# Do This\n\nAdd the finishing touches to your app. Return to your planning guide to make sure that the app meets your initial goals.",
        "CSDU6 - switch blink_markdown_instruction": "# Changing the Input\n\n<img src=\"https://images.code.org/cc903e4a0fb57b241b90abe220f027ef-image-1487707484420.04.00.png\" style=\"float:right; margin-left: 10px; width: 50%\">\n\nUsing another `onBoardEvent()` block, make `buttonR` change the screen back to \"red_screen\". The first input of the `onBoardEvent()` command lets you pick which board object to watch.",
        "CSDU6 - timed loop challenge_markdown_instruction": "# Challenge\n\n_Ask your teacher before embarking on this challenge_\n\nUsing your new _timed loop_ skills, create an interesting program of your own design. Consider using multiple loops running at different speeds, or combining _timed loops_ with the `blink()` and `play()` helpers you saw in the previous level.\n\nYou can either start from scratch here, or remix any of the earlier levels in this lesson.",
        "CSDU6 - timed loop console.log()_markdown_instruction": "# Starting From Scratch\n\nNow that you've got some practice with `timedLoop()`, let's see if you can set one up from scratch.\n\n# Do This\n\n* Get a `timedLoop()` block from the _Control_ drawer in your toolbox\n* Change the _ms_ input so that the loop runs twice a second\n* Inside the loop, write the console with `console.log()`",
        "CSDU6 - timed loop for LEDs_markdown_instruction": "# Turn on Each RGB LED and Exit\n\nUsing a _timed loop_ in place of a _for loop_ loop requires that you set up a counter variable, increment it each time the loop is run, and use a conditional to determine when to exit the loop. Set up a _timed loop_ to turn on each of the color LEDs one at a time and then exit. Refer back to the previous page for examples.\n\n_Tip: If you're unsure whether your loop has exited or not, consider adding a `console.log()` block or displaying text on the screen in the same condition that calls `stopTimedLoop()`._",
        "CSDU6 - timed loop helpers_markdown_instruction": "# Timed Loop Alternatives\n\nBlinking lights and playing notes are common enough activities that we've provided some helpers to do them more easily.\n\n# Do This\n\nRun this code to see how the helpers work, and then **discuss** with a neighbor how you might do this with a _timed loop_.",
        "CSDU6 - timed loop question timed_markdown_instruction": "What do you think will happen when you run this code?",
        "CSDU6 - timed loop random blink_markdown_instruction": "# Timed Blinking\n\nThe provided code toggles a randomly selected color LED once. Place that line inside a timed loop to make a randomized pattern of blinking lights.",
        "CSDU6 - timed loop random sound exit_markdown_instruction": "# Ending The Song and Light Show\n\nHere's the randomized light and music app you created earlier. Using the `stopTimedLoop()` command, can you make the program stop at some point? You can choose one of the following ways to stop:\n\n* Use a _counter_ variable and stop the loop after the counter has reached a certain point (like a _for loop_)\n* Add a button and event handler to call `stopTimedLoop()` when clicked.\n\n_Make sure you also turn off all of the LEDs when the show is over!_",
        "CSDU6 - timed loop random sound_markdown_instruction": "# Disco Dance Party\n\nAdding some sound to your blinking lights would really kick this program up a notch.\n\n# Do This\n\n* At the top of the program, create an list of notes, such as `var notes = ['C4', 'D4', 'E4']`\n* Inside the timed loop, randomly select one of the notes to play with `buzzer.note()`\n\n_Challenge: By default the lights are all blinking white - can you set them to random colors?_",
        "CSDU6 - timed loop smiley event_markdown_instruction": "# What Happens Between Repetitions\n\nWhen the `timedLoop()` is waiting for the next repetition, the rest of your program is free to do whatever else it needs to do, including respond to events.\n\nAdd an event handler for the \"smiley\" image. You can make the event do whatever you like - just test it to make sure that your event responds each time the image is moved.\n\n**Heads Up**: Make sure to put your event handler **outside** of the loop, otherwise a new event handler will be added _every time your loop is run!_ \n\n_Challenge: At this point you've got the start of a simple clicker gamer. Consider keeping track of score, or adding additional event handlers._",
        "CSDU6 - timed loop smiley rand y_markdown_instruction": "# Infinite Loop\n\nThe `timedLoop()` is really useful not only for looping code at a slower speed, but also to loop code infinitely. The provided program moves the image \"smiley\" to a random x position every second, can you make the image also move to a random y?",
        "CSDU6 - toggle state LED prediction_markdown_instruction": "See contained level for markdown",
        "CSDU6 - toggle state LED prediction_2018_markdown_instruction": "See contained level for markdown",
        "CSDU6 - toggleswitch state setProp_markdown_instruction": "# State and the Toggle Switch\n\nThis program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.\n\n# Do this\n* Complete the if-statement with the `toggleSwitch.isOpen` property.\n* Run the program and press the left button, then flip the toggle switch and press the button again.",
        "CSDU6 - toggleswitch state setProp_2018_markdown_instruction": "# State and the Toggle Switch\n\nThis program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.\n\n# Do this\n* Complete the if-statement with the `toggleSwitch.isOpen` property.\n* Run the program and press the left button, then flip the toggle switch and press the button again.",
        "CSDU6 - toggleswitch state_markdown_instruction": "# State and the Toggle Switch\n\nThe toggle switch has the `toggleSwitch.isOpen` property, which keeps track of which **state** (opened or closed) the switch is in. `toggleSwitch.isOpen` is a boolean, so its value is `true` if the toggle switch is open, and `false` if it's closed.\n\n\n## Do this\n\n You'll be adding to the if-else statement to check if the toggle switch is open or closed.\n\n* Drag the `toggleSwitch.isOpen` block into the condition of the if-statement. Since `toggleSwitch.isOpen` is a boolean, the condition reads \"If true\".\n\n* Add `console.log()` statements that say \"open!\" if the switch is open, and \"closed!\" otherwise.\n\n* Run your code and toggle the switch to see what happens.\n\nRemember: This program is wrapped under an event. You'll _have_ to press the left button to update the program when you toggle the switch.",
        "CSDU6 AppLab Input 1_markdown_instruction": "# Input in App Lab\n\n_You don't need to make any changes to the code here_\n\nTake a minute to read through the code and run the program. Discuss with a partner:\n\n1. What is the source of input?\n2. Where and how does the program check for input?\n3. What does the program do when it gets the right input?\n3. What is the program doing when there is no input?",
        "CSDU6 AppLab Input 1_2018_markdown_instruction": "# Input in App Lab\n\n_You don't need to make any changes to the code here_\n\nTake a minute to read through the code and run the program. Discuss with a partner:\n\n1. What is the source of input?\n2. Where and how does the program check for input?\n3. What does the program do when it gets the right input?\n3. What is the program doing when there is no input?",
        "CSDU6 Circuit Playground Test_markdown_instruction": "# Test Your Board\n\nThis level is just a quick test to make sure your board is working. To run this test, do the following:\n\n1. Plug your board into your computer with a USB cable\n2. Click \"Run\"\n3. Wait a few seconds for either a Success or Error screen to pop up\n4. If your test was successful, move on to the next level. If not, try some of the troubleshooting steps\n\n## Troubleshooting\n\nThere are a number of things that could prevent your test from passing.\n\n1. Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)\n2. Try connecting your board to a different USB port\n3. Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!\n4. Try a different board\n5. Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test",
        "CSDU6 Circuit Playground Test_2018_markdown_instruction": "# Test Your Board\n\nThis level is just a quick test to make sure your board is working. To run this test, do the following:\n\n1. Plug your board into your computer with a USB cable\n2. Click \"Run\"\n3. Wait a few seconds for either a Success or Error screen to pop up\n4. If your test was successful, move on to the next level. If not, try some of the troubleshooting steps\n\n## Troubleshooting\n\nThere are a number of things that could prevent your test from passing.\n\n1. Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)\n2. Try connecting your board to a different USB port\n3. Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!\n4. Try a different board\n5. Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test",
        "CSDU6 GameLab Input 1_markdown_instruction": "# Input in Game Lab\n\n_You don't need to make any changes to the code here_\n\nTake a minute to read through the code and run the program. Discuss with a partner:\n\n1. What is the source of input?\n2. Where and how does the program check for input?\n3. What does the program do when it gets the correct input?\n3. What is the program doing when there is no input?",
        "CSDU6 GameLab Input 1_2018_markdown_instruction": "# Input in Game Lab\n\n_You don't need to make any changes to the code here_\n\nTake a minute to read through the code and run the program. Discuss with a partner:\n\n1. What is the source of input?\n2. Where and how does the program check for input?\n3. What does the program do when it gets the correct input?\n3. What is the program doing when there is no input?",
        "CSDU6 LED alarm silent_markdown_instruction": "# Silent Alarm\n\nHere's the alarm app that you started in the last lesson. Right now it doesn't do much, so let's see if we can make it more useful by hooking it up to your board. When the alarm is triggered, turn on the red LED. When the alarm is stopped, turn the LED off again.\n\n# Do This\n\nAdd `led.on()` and `led.off()` blocks to the events that trigger and disable the alarm.\n\n_Notice that the LED blocks have been moved to a new drawer called Circuit_",
        "CSDU6 LED basics led.off()_markdown_instruction": "# Turn that LED Off\n\nJust as you can turn your red LED on using `led.on()`, you can turn it back off again with `led.off()`. You'll need to add a second button with an event handler that calls `led.off()`.\n\n# Do this\n\nAdd a second button and use its \"click\" event to turn off the LED\n\n* Drag out a new button in Design Mode and give it a good ID\n* Insert an event handler for your newly created button\n* Drag an `led.off()` command into your new event handler\n\nNow you should have two buttons, one that turns the LED on, and another that turns it off.\n\n_Challenge: Can you come up with other ways to turn on and off the LED? Could you do it with a single button?_",
        "CSDU6 LED basics led.on_markdown_instruction": "# Turn on that LED\n\nThe red LED on your board is represented in code by an object called `led`. Similar to the sprite objects in Game Lab, you can use _dot notation_ to control the LED. Try using the command `led.on()` to make your red LED light up when the program is run.\n\n# Do this\n\n* Drag out the `led.on()` block and place it underneath the comment\n* Run the program\n* Bask in the warm red glow of your LED!",
        "CSDU6 LED basics onEvent_markdown_instruction": "# Turn on that LED - with a Button!\n\nAs exciting as an always-on red LED is, an LED that you can turn on with the click of a button seems much more useful. If you add a button to your screen in Design Mode, then you can use move your `led.on()` command into an `onEvent()` block.\n\n# Do this\n\nAdd a button and use its \"click\" event to turn on the LED\n\n* Drag out a new button in Design Mode and give it a good ID\n* Insert an event handler for your newly created button\n* Move the code that turns your LED on _inside_ the button's event handler\n\nIf everything worked out, you should see that your LED starts out off, but turns on when you click the button!",
        "CSDU6 array access modify_markdown_instruction": "# Accessing Items in a List\n\n**Starter Code:** There is a list of days of the week provided as well as a command to set the label on the screen.\n\n**Do This:** Can you change the index value so that the page displays \"Today is: Tuesday\"",
        "CSDU6 array index predict contained_markdown_instruction": "# Predict\n\nThe code below will display four things on the screen.  What do you think they will be?",
        "CSDU6 array index predict contained_2018_markdown_instruction": "# Predict\n\nThe code below will display four things on the screen.  What do you think they will be?",
        "CSDU6 array length predict_markdown_instruction": "# Playing Notes from an Array\n\nYou may have noticed that when you ran the code from the last bubble, it didn't sound any different than the bubble before it. Why do you think that is?",
        "CSDU6 array select days_markdown_instruction": "# Accessing Items in an Array\n\nThis program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as \"Tuesday\".\n\n# Do This\n\n* Add code that will display the day as \"Thursday\" when the right button is pressed.",
        "CSDU6 array select days_2018_markdown_instruction": "# Accessing Items in an Array\n\nThis program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as \"Tuesday\".\n\n# Do This\n\n* Add code that will display the day as \"Thursday\" when the right button is pressed.",
        "CSDU6 arrays rainbow_markdown_instruction": "# Index Practice\n\n<img src=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png\" style=\"width: 150px; float: right\">\n\n**Starter code** has been provided that creates a list called `colors`.\n\n* Use `setProperty` and the list of colors to change the `background-color` of the buttons to create a rainbow. The first button has been done for you.",
        "CSDU6 arrays random_markdown_instruction": "# Expressions as Indexes: Using Variables\n\n* **Starter code** has been provided which creates an list of identifiers for icons in the icon library\n* **Write code** that sets the image on the screen to a random icon from the list",
        "CSDU6 arrays select icons_markdown_instruction": "# Expressions as Indexes: Using Variables\n\n* **Starter code** has been provided which creates an list of identifiers for icons in the icon library\n* **Write code** that sets the image on the screen to a random icon from the list",
        "CSDU6 arrays select rainbow_markdown_instruction": "# Index Practice\n\n<img src=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png\" style=\"width: 150px; float: right\">\n\n**Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.\n\n# Do This\n\n* Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.",
        "CSDU6 arrays select rainbow_2018_markdown_instruction": "# Index Practice\n\n<img src=\"https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png\" style=\"width: 150px; float: right\">\n\n**Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.\n\n# Do This\n\n* Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.",
        "CSDU6 arrays select random_markdown_instruction": "# Random Selection\n\nYou can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.\n\n# Do This\n* Add code that will select a random color from the list and use that as the icon color.",
        "CSDU6 arrays select random_2018_markdown_instruction": "# Random Selection\n\nYou can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.\n\n# Do This\n* Add code that will select a random color from the list and use that as the icon color.",
        "CSDU6 arrays select variable_markdown_instruction": "# Using Variables\n\nThis program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable \"myIndex\", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.\n\n# Do This\n* Change the code so that both the icon and its color are chosen using the \"myIndex\" variable.",
        "CSDU6 arrays select variable_2018_markdown_instruction": "# Using Variables\n\nThis program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable \"myIndex\", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.\n\n# Do This\n* Change the code so that both the icon and its color are chosen using the \"myIndex\" variable.",
        "CSDU6 arrays variable_markdown_instruction": "# Expressions as Indexes: Using Variables\n\n* **Starter code** has been provided which creates an list of identifiers for icons in the icon library\n* **Write code** that sets the image on the screen to a random icon from the list",
        "CSDU6 buzzer 2d arrays_markdown_instruction": "# Challenge: 2D Arrays\n\nArrays can hold all sorts of data, like numbers, strings, and even other arrays. When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()` block can be used to play songs that sound more precise with 2D arrays.\n\nThe structure that you've been using to play notes looks like this:\n\n`buzzer.playNotes( [array of notes to play] , tempo of the whole song);`\n\nThe main difference with `buzzer.playSong()` is each element inside the `[array of notes to play]`, is an array with two elements: the note you want to play, and the duration of the note. Sometime you'll want a quarter note in your song, other times you'll want a full note, or maybe somewhere in between. A full song might look something like this:\n\n`buzzer.playSong([\n  [\"G3\",0.25],\n  [\"C4\",0.25],\n  [\"E4\",0.25],\n  [\"G4\",0.125],\n  [null,0.375],\n  [\"E4\",0.1875],\n  [\"G4\",1]\n], 120);`\n\n# Do this\n\n* Use the `buzzer.playSong` block to make a different song.\n* When you get comfortable with the structure, add more notes to the song.",
        "CSDU6 buzzer 2d arrays_2018_markdown_instruction": "# Challenge: 2D Arrays\n\nArrays can hold all sorts of data, like numbers, strings, and even other arrays. When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()` block can be used to play songs that sound more precise with 2D arrays.\n\nThe structure that you've been using to play notes looks like this:\n\n`buzzer.playNotes( [array of notes to play] , tempo of the whole song);`\n\nThe main difference with `buzzer.playSong()` is each element inside the `[array of notes to play]`, is an array with two elements: the note you want to play, and the duration of the note. Sometime you'll want a quarter note in your song, other times you'll want a full note, or maybe somewhere in between. A full song might look something like this:\n\n`buzzer.playSong([\n  [\"G3\",0.25],\n  [\"C4\",0.25],\n  [\"E4\",0.25],\n  [\"G4\",0.125],\n  [null,0.375],\n  [\"E4\",0.1875],\n  [\"G4\",1]\n], 120);`\n\n# Do this\n\n* Use the `buzzer.playSong` block to make a different song.\n* When you get comfortable with the structure, add more notes to the song.\n",
        "CSDU6 buzzer alarm_markdown_instruction": "# Noisy Alarm\n\nBack to the Alarm now - now with the buzzer we can make this thing really sound like an alarm. Using `buzzer.frequency()` and `buzzer.stop()` make your alarm play a sound when it goes off.",
        "CSDU6 buzzer freq_markdown_instruction": "# Playing Sounds\n\nThe `buzzer.frequency()` command takes two inputs - the first is the _frequency_ of the sound to be played (higher numbers = higher sounds), and the second is the _duration_ of the sound (how long it should be played)\n\n# Do This\n\nThe provided app has three buttons with event handlers. Add a `buzzer.frequency()` command to each of the event handlers so that the buzzer plays the appropriate sound (a low, medium, or high note).",
        "CSDU6 buzzer stop_markdown_instruction": "# Playing Longer Sounds\n\n<img src=\"https://images.code.org/e5513675e74233d4fe55a0826376b83f-image-1487622642991.gif\" style=\"float: right; margin: 10px;\">\n\nThe _duration_ input of the `buzzer.frequency()` command is an _optional_ input - meaning that you don't need to use it. You can remove an optional input by clicking the left arrow next to it.\n\nBy removing the duration, you are telling the buzzer to buzz continuously. You'll notice that there's a new block in the toolbox called `buzzer.stop()` to use in this case.\n\n# Do This\n\nHere's an app with two buttons, a Start and a Stop. Make these buttons Start and Stop the buzzer\n\n* Add an event handler for each button\n* When the Start button is clicked, make the buzzer play continuously\n* When the Stop button is clicked, stop the buzzer from playing\n\n",
        "CSDU6 buzzer.stop_markdown_instruction": "# Stopping the Music\n\nSometimes you need to be able to stop the music when you want, like in the code below. Duration wasn't specified so now the note plays continuously. Luckily, the `buzzer.stop()` method is here to save your ears.\n\n# Do this\n\n* Find a way to get the note to stop playing with `buzzer.stop()`.\n* Celebrate your win over the endless note!",
        "CSDU6 buzzer.stop_2018_markdown_instruction": "# Stopping the Music\n\nSometimes you need to be able to stop the music when you want, like in the code below. Duration wasn't specified so now the note plays continuously. Luckily, the `buzzer.stop()` method is here to save your ears.\n\n# Do this\n\n* Find a way to get the note to stop playing with `buzzer.stop()`.\n* Celebrate your win over the endless note!",
        "CSDU6 challenge play songs_markdown_instruction": "# Challenge: Song Bot\n\nYou have all the tools you need to make an awesome song bot! Try your hand at making a musical masterpiece with the buzzer. Here's some additional ideas to add to your bot:\n\n* Consider making a song that uses different octaves.\n* Maybe you could shuffle through songs by using the buttons on the board.",
        "CSDU6 circuit playground piano_markdown_instruction": "# Circuit Piano\n\nLook at the code below. You're not going to be changing it, but try to see what it does. \n\n# Do this\n\n* Run the program and play with the piano on the screen.",
        "CSDU6 circuit playground piano_2018_markdown_instruction": "# Circuit Piano\n\nLook at the code below. You're not going to be changing it, but try to see what it does. \n\n# Do this\n\n* Run the program and play with the piano on the screen.",
        "CSDU6 frequency creation_markdown_instruction": "# Making the Buzzer Buzz\n\nNow that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.\n\n# Do this\n* Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**",
        "CSDU6 frequency creation_2018_markdown_instruction": "# Making the Buzzer Buzz\n\nNow that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.\n\n# Do this\n* Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**",
        "CSDU6 frequency modification_markdown_instruction": "# Making the Buzzer Buzz\n\nThe frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.\n\n# Do this\n* Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.\n",
        "CSDU6 frequency modification_2018_markdown_instruction": "# Making the Buzzer Buzz\n\nThe frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.\n\n# Do this\n* Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.\n",
        "CSDU6 frequency template_markdown_instruction": "Do a thing!",
        "CSDU6 frequency template_2018_markdown_instruction": "Do a thing!",
        "CSDU6 light sensor alarm_markdown_instruction": "# Auto Alarm\n\nLet's revisit the alarm app one last time. When we last updated this app we made it turn on or off the buzzer in addition to the LED, but it still needs to be manually triggered. Now that we know how to use sensor events, you can make the alarm trigger automatically!\n\n# Do This\n\nUsing the an event handler for the light sensor, make the alarm turn on when it sees light. You can test the alarm by placing an object like a piece of paper over the board - if someone tries to take the piece of paper your alarm should start buzzing.\n\n_Challenge: Can you make both the buttons and the sensor play nicely together?_",
        "CSDU6 making new arrays_markdown_instruction": "# Making New Arrays\n\nYou know how to change arrays, now it's time for you to make your own.\n\n# Do this\n\n* Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!\n* Have the buzzer play a random note from your array when the **right** button is pressed.",
        "CSDU6 making new arrays_2018_markdown_instruction": "# Making New Arrays\n\nYou know how to change arrays, now it's time for you to make your own.\n\n# Do this\n\n* Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!\n* Have the buzzer play a random note from your array when the **right** button is pressed.",
        "CSDU6 note array length p2_markdown_instruction": "# Length of an Array\n\n`randomNumber()` was still generating a range of numbers from 0 to 2. You added more indexes in the array, so checking for the index of 0-2 isn't helpful if there's 5 items in the array.\n\nYou can fix this by using the **length** of the array with `array.length()`. If we generate a random number that's anywhere between 0 and the length of the array, you'll be able to play any of the elements in the array! Sort of!\n\nIf the array length is 5, and you want to select a random index between 0 (the first index) and 5, then the computer can select up to 6 possible indexes, which the array doesn't have. To get around this, you'll have to subtract 1 from the length of the array like in the code below: \n\n![](https://images.code.org/6e4e01b50708667fcd1585b61b1a87ae-image-1512083621011.jpg)\n\n# Do this\n\n* Set `randomNumber()` to generate numbers between 0 and the length of the list minus 1.\n* Add as many new notes to the array as you want.\n* Run the code to see what happens.\n",
        "CSDU6 note array length_markdown_instruction": "# Adding to Arrays\n\nArrays don't have to be a fixed length, you can add or delete as many items in the array as you'd like. The left and right arrows to the side of the array block let you add or delete an item at the end of the array.\n\n![](https://images.code.org/a9a72527b700740382cae5017f8fa16d-image-1511913249739.jpg)\n\n# Do this\n\n* Add at least two more unique notes to the existing array.\n* Run the code to see what happens.",
        "CSDU6 piano with notes_markdown_instruction": "# Piano Notes\n\nThis is the same piano that you saw at the beginning of the lesson, but there are some bugs!\n\n# Do this\n\n* Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.\n* Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.\n\n_Hint: Remember to put quotes around the notes! e.g `buzzer.note(\"A4\", 100);`_",
        "CSDU6 piano with notes_2018_markdown_instruction": "# Piano Notes\n\nThis is the same piano that you saw at the beginning of the lesson, but there are some bugs!\n\n# Do this\n\n* Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.\n* Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.\n\n_Hint: Remember to put quotes around the notes! e.g `buzzer.note(\"A4\", 100);`_",
        "CSDU6 play null notes_markdown_instruction": "# Null Notes\n\nYou may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.\n\n`null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.\n\n\n# Do this\n\n* Run the code to hear what it sounds like first.\n* Examine the array inside `buzzer.playNotes()`.\n* Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.\n\n_Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_",
        "CSDU6 play null notes_2018_markdown_instruction": "# Null Notes\n\nYou may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.\n\n`null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.\n\n\n# Do this\n\n* Run the code to hear what it sounds like first.\n* Examine the array inside `buzzer.playNotes()`.\n* Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.\n\n_Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_",
        "CSDU6 play predict code_markdown_instruction": "Markdown is in contained level",
        "CSDU6 play predict code_2018_markdown_instruction": "Markdown is in contained level",
        "CSDU6 play predict markdown_markdown_instruction": "# Make a Prediction\n\nLook at the code below. What do you think it's going to do?\n\nGive it a guess and run the code to find out!",
        "CSDU6 play predict markdown_2018_markdown_instruction": "# Make a Prediction\n\nLook at the code below. What do you think it's going to do?\n\nGive it a guess and run the code to find out!",
        "CSDU6 play songs_markdown_instruction": "# Making Songs\n\nYou can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.\n\n\n# Do this\n\n* Pull out a `buzzer.playNotes` block and change the starting array inside.\n* Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `[\"A5\", \"A5\", \"G4\", \"G4\"]`)\n\n_Hint: Don't forget that you can always switch back and forth between block and text mode._",
        "CSDU6 play songs_2018_markdown_instruction": "# Making Songs\n\nYou can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.\n\n\n# Do this\n\n* Pull out a `buzzer.playNotes` block and change the starting array inside.\n* Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `[\"A5\", \"A5\", \"G4\", \"G4\"]`)\n\n_Hint: Don't forget that you can always switch back and forth between block and text mode._",
        "CSDU6 toggle state prediction_markdown_instruction": "# More on the Toggle Switch\n\nYou can also check whether the toggle switch is in the `open` or `close` position anywhere in your program. \n\nWhat different things does the button do when the toggle switch is `open` or `close`?",
        "CSDU6 toggle state prediction_2018_markdown_instruction": "# More on the Toggle Switch\n\nYou can also check whether the toggle switch is in the `open` or `close` position anywhere in your program. \n\nWhat different things does the button do when the toggle switch is `open` or `close`?",
        "CSDU6- predict event types_markdown_instruction": "# Predict: Event Type\n\nSo far you have really only used the click event type with buttons. There are many different event types you can use in App Lab. Look at the code and predict when each of the messages will print to the console log.",
        "CSDU6L06 - lists and colorLeds - Light Display_markdown_instruction": "# Blink\n\nMake lights blink \n\n",
        "CSDU6L06 - lists and colorLeds - blink_markdown_instruction": "# Blink\n\nMake lights blink \n\n",
        "CSDU6L06 - lists and colorLeds - create light pattern_markdown_instruction": "# Light Pattern\n\nFind a partner and bring your light patterns together.\n\nSet up the app so the user can use what light pattern they want to see. You should put each of your light displays in a function to make this easier",
        "CSDU6L06 - lists and colorLeds - debug_markdown_instruction": "<img src=\"https://images.code.org/e055be621221385d3503962bee5aa616-image-1491493475417.44.28.png\" style=\"width:250px; float:right\">\n\n# Debug: colorLeds\n\nCan you debug the index values so that the rainbow shows up on the board like in the picture?",
        "CSDU6L06 - lists and colorLeds - intensity_markdown_instruction": "# Changing Brightness\n\nSometimes you want to do more than just turn a light on or off, you might want to set a specific brightness. The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. Under the hood, this works just like `buzzer.frequency()` by rapidly turning the LED on and off to make it seem dimmer.\n\n# Do This\n\nThe provided program has a slider that goes from 0 to 100 with an event handler. In the event handler, set intensity of your color LEDs to the value of the slider.",
        "CSDU6L06 - lists and colorLeds - light pattern off_markdown_instruction": "# Turning It Off\n\nWhen you start this app your lights are off, but as soon as choose a pattern, there's no way to turn the lights back off!\n\n# Do This\n\nCreate a function that turns all of the LEDs off, and then add a \"Off\" button to your app and make it turn off all of the color LEDs.",
        "CSDU6L06 - lists and colorLeds - pulse_markdown_instruction": "# Pulse\n\nMake lights pulse\n\n",
        "CSDU6L06 - lists and colorLeds - set color_markdown_instruction": "# Adding Some Color\n\nYou probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like \"blue\" or an RGB value using color `color()` command.\n\n# Do This\n\nUse the `.color()` command to set each of the color LEDs to a different color.",
        "CSDU6L06 - lists and colorLeds - toggle_markdown_instruction": "# Toggle\n\nThe `.toggle()` command works like a light switch - whenever you call it on an LED, the light will turn on if it was off, or off if it was on. This can be a really useful alternative to using both on and off.\n\n# Do This\n\nChoose a few LEDs and write a program that toggles them on and off when you click the Toggle button.\n",
        "CSDU6L06 - lists and colorLeds -solo light pattern_markdown_instruction": "# Light Patterns\n\nThis app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.\n\n# Do This\n\nCreate a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.\n\nAfter you've created your new function, add a button and event handler so that you can switch between the two light patterns.",
        "CSP Data Unit - Counting Multiple Things_markdown_instruction": "If you can count one thing you can count multiple things\n\nFind out how many people like something other than dogs and cats\n\nCount dogs\nCount cats\nCount total\nDo the math\n\nblank/ blank total\n\nCan also use this to find percents from this\n\nx% are dog lovers",
        "CSP Data Unit -Counting Records - Easy Way_markdown_instruction": "ReadRecords with specific criteria \nfind the length of an array\n",
        "CSP Data Unit -Counting Records - Hard Way_markdown_instruction": "\n1. ReadRecords for all records\n2. Way to loop through and count",
        "CSP U4 - CreateRecord with JSON_markdown_instruction": "Good news! we can also store objects in the easy way!\nStarting code is some kind of pre-composed object. And call to createRecord that shows using the javascript object as the the thing being stored.\nTest.\nInvestigate.\nAdd a field to the object and run again, see what’s there.",
        "CSP U4 - Export Table_markdown_instruction": "# You can export the table too!\n\nMake a table and then export it to share it with a friend!",
        "CSP U4 - First Create Record Experience_markdown_instruction": "So how can we use this?  We can use it to compose a bunch of things we want to store at once.  In Data we call this a “record”.  Let’s look at how we create records….new level:\n\nJust drag out createRecord and play with it (non-project level) — not triggered by a button. \n\nCreateRecord should populate with a default JSON object (which you can set in level builder when defining params for the blocks in the palette.)  Have it be the string version of of JSON object.\nJust Hit run several times.\nView Data.\nInvestigate problems.\n\n\n",
        "CSP U4 - Import Table_markdown_instruction": "You can create a new table by importing a CSV file. CSV stands for comma separated values and is a standard way to move data between different applications. CSV files usually have multiple columns with the first row containing the label for each column. AppLab will use this first row to create the column names in the table. \n\nIn AppLab you can create a new table in an app by clicking the “View Data” button(a new browser tab opens) and type in a new, descriptive table name (the table name does not have to match the app name, and an app can have more than one table), then click the “Add” button next to the table name(another new browser tab opens). Click the “Import” button, then the “Choose File” button and select the RottenTomatoes2015.csv file (see below). Finally click the “Overwrite & Import” button. Note the unique “Id” field created for each record.",
        "CSP U4 - JSON Object Intro - Good Way_markdown_instruction": "# Creating Your Own Objects\n\n**Objects are unordered collections of name value pairs**. Like an array they can hold many pieces of information, but where arrays use a numeric index to reference specific pieces of information, objects use a descriptive name. We lose the \"ordered\" nature of our data, but we gain the ability to describe the purpose of each piece of data within a collection.\n\nConsider the event objects you just looked at. An array can just as easily store all the information they contain, but it would be difficult to determine what any of the values represent.\n\n**The syntax for creating objects of your own is shown below**\n\n* Curly braces are placed around the contents of an object `{}`\n* Names are separated from values with a colon `:`\n* Name value pairs are separated by commas `,`\n* Names must be strings. If they are not they will be coerced to strings, possibly creating unpredictable behavior.\n* **Example:** `var user = {\"userName\":\"Ada\", \"password\":\"csIsAwesome\", \"yearBorn\":1815};`\n\n# Do This\n\n**Starter code** is provided which creates an empty object and displays its value.\n\n* Modify the code **using the syntax above** to create an object of your own. Your object should contain **at least 5 pieces of information including both strings and numbers**.\n* **Run the program** and confirm all values in your object appear as you expected.",
        "CSP U4 - Objects - createObject_markdown_instruction": "# Creating Your Own Objects\n\n**Objects are unordered collections of name value pairs**. Like an array they can hold many pieces of information, but where arrays use a numeric index to reference specific pieces of information, objects use a descriptive name. We lose the \"ordered\" nature of our data, but we gain the ability to describe the purpose of each piece of data within a collection.\n\nConsider the event objects you just looked at. An array can just as easily store all the information they contain, but it would be difficult to determine what any of the values represent.\n\n**The syntax for creating objects of your own is shown below**\n\n* Curly braces are placed around the contents of an object `{}`\n* Names are separated from values with a colon `:`\n* Name value pairs are separated by commas `,`\n* Names must be strings. If they are not they will be coerced to strings, possibly creating unpredictable behavior.\n* **Example:** `var user = {\"userName\":\"Ada\", \"password\":\"csIsAwesome\", \"yearBorn\":1815};`\n\n# Do This\n\n**Starter code** is provided which creates an empty object and displays its value.\n\n* Modify the code **using the syntax above** to create an object of your own. Your object should contain **at least 5 pieces of information including both strings and numbers**.\n* **Run the program** and confirm all values in your object appear as you expected.",
        "CSP U4L01 SFLP_markdown_instruction": "<div style=\"width: 250px; text-align: center; float: right; margin-left: 50px\">\n  <a href=\"https://images.code.org/8abc8eedb4975d2c55ac5848cac0d0ed-image-1454087887353.png\" target=\"_blank\">\n    <img src=\"https://images.code.org/8abc8eedb4975d2c55ac5848cac0d0ed-image-1454087887353.png\" style=\"width: 250px; float: right\">\n  </a>\n  <i>Click to enlarge.</i>\n</div>",
        "CSPPD course goals_markdown_instruction": "***Now that you've learned more about the CSP curriculum, let's consider your goals***\n<br>\n<br>\n\n__What are your goals for your CSP class?__ *These goals will change over time, and we'll revisit this your response as we go through the course so we can check in on how we're progressing towards those goals.*\n\n*NOTE: remember you can change the size of the text box by clicking and dragging the bottom-right corner of the box.*\n",
        "CSPPD impact in program_markdown_instruction": "\n#### What connections do you think might exist between the ideas covered in the videos you just watched and the units of CSP that you learned about earlier?\n",
        "CSPPD materials question1_markdown_instruction": "We just talked about the types of materials available through the Code.org CSP curriculum, including teacher lesson plans, widgets, widget tutorial videos, concept videos, teaching tips videos, and student-facing activities. Which of these materials are you most excited to have access to? Which are you most uncertain about? ",
        "CSPPD program overlap_markdown_instruction": "#### Now that you've read more about the CSP program, what relationship do you see between the curriculum and Professional Development? What aspects of the two pieces of the program seem most important or interesting to you?\n",
        "CSPPD strategies_markdown_instruction": "\nThis space is your __digital journal for documenting strategies__ you've picked up during Professional Development and while teaching the course. We'll revisit this often during PD, and you should refer back to it while planning lessons to remind yourself of strategies you want to try in class. \n\n\n",
        "CSPPD2 PT activity_markdown_instruction": "# Practice PT > Encoding a Complex Thing\n<img src=\"https://s3.amazonaws.com/uploads.hipchat.com/65395/734864/FBlNhEkvsTFskXJ/Screen%20Shot%202015-07-18%20at%205.46.24%20PM.png\" class=\"level-image\">\n\n## Doing the Project\nTo wrap up our work in this unit, we're going to spend an hour doing the practice performance task. After you've read the lesson, spend some time looking over the student-facing worksheet and think about what you would like to encode. This is really open ended, and there's no 'right' thing to choose, but to get the juices going, here are a few example topics: \n\n- A piece of music (the notes that are played, the instruments that play them, etc)\n- A food (the smells, tastes, appearance, etc) \n- A place (the sounds, the smells, what natural things are in the space, what man-made things are in the space, etc)\n\n> Once you've selected your topic, start working through your protocol for encoding the \"complex thing.\" Use the <a href =\"https://docs.google.com/document/d/1IPDnC6tKN7yRzog9t7weKISnjXvykTQe3QEpu43uM7c/edit\" target =\"_blank\">student activity guide</a> and the <a href=\"https://docs.google.com/document/d/1rkVbwb8nJBlnF9t3hkyIyckM6gJGEjcUwyQiyV-Jlu4/edit\" target =\"_blank\">lesson plan</a> to work through this.\n\n**See how far you can get through the activity in one hour, but please do limit yourself to 60 minutes.** Don't worry about getting through the entire thing in that time, but be ready to share your thoughts about the process along with whatever you come up with! \n\nUse the text box below to record your protocol. You'll have space on the next page to share your final product. ",
        "CSPPD2 share protocol_markdown_instruction": "# Chunk 3: Encoding and Sending Text > Creating a Text Message Protocol\n\n<img src=\"https://s3.amazonaws.com/uploads.hipchat.com/65395/734864/FCmh8I2x5GTQ3tu/Screen%20Shot%202015-07-18%20at%2012.53.45%20PM.png\" class=\"level-image\">\n\n## Creating a Text Message Protocol\n\nOn the right you'll find the student-facing worksheet from lesson 10, which builds on students' prior work with protocols and has them develop a text messaging protocol that can handle the letters a-z as well as common punctuation. \n\n>Read over the [lesson plan](https://docs.google.com/document/d/1lAHRLpxu05-gSbNF6LX8vUIoDMHEonrmL3bk-Sh1viA/edit) and **work through developing a protocol yourself.** Use the text box below to record your protocol.\n\n*Having trouble viewing the activity? [Click here](https://s3.amazonaws.com/uploads.hipchat.com/65395/734864/jogZFA5WQK3rYne/text%20protocol.pdf) to open it directly.* \n\n",
        "CSPPD3-u2 pick a challenge_markdown_instruction": "# Challenge Overview > What's your Challenge?\n\nNow that you've selected a lesson, head to the forum and **share which lesson you plan to complete** for your challenge.\n\n#### <a href=\"http://forum.code.org/t/unit-2-online-pd-challenge-selection/2222\" target=_blank>Forums <i class=\"fa fa-external-link-square\" /></a>\n\nEnter the lesson you selected for your challenge below:",
        "CSPPD3-u2 submit forum link_markdown_instruction": "# Share Out and Submit > Submit Link\n\n##  Submit the Link for your Forum Post for Review\n\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a dirct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "CSPPD3-u3 pick a challenge_markdown_instruction": "# Challenge Overview > What's your Challenge? \n\n## Enter the lesson you selected for your challenge in the text box below.\n\n- 2 - 5: Turtle Drawing\n- 6 - 7: Functions and Simple Loops\n- 14-15: Variables \n- 16: Strings\n- 18: Programming Flow and Conditionals\n\nNow that you've selected a lesson, head to the forum and **share which lesson you plan to complete** for your challenge. \n\n#### <a href=\"http://forum.code.org/t/unit-3-challenge-selection/2470\" target=_blank>Forums <i class=\"fa fa-external-link-square\" /></a>",
        "CSPPD3-u3 submit forum link_markdown_instruction": "# Share Out and Submit > Submit Link\n\n##  Submit the Link for your Forum Post for Review\n\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "CSPPD3-u4 submit forum link_markdown_instruction": "# Share Out and Submit > Submit Link\n\n##  Submit the Link for your Forum Post for Review\n\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "CSPPD3-u5 submit forum link_markdown_instruction": "# Share Out and Submit > Submit Link\n\n##  Submit the Link for your Forum Post for Review\n\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "CSPU5 Add Screens to Chaser Game_markdown_instruction": "# Improved Chaser Game\n\nNow lets improve the \"Chaser Game\".  This is where you get to use your creativity. Make it look nice!\n\nIn addition you will notice a new command in the toolbox: `playsound`! Read the documentation about how to add sounds.\n\n**Note:** Your code from before has been provided for you.\n\n# Do This:\n\n* **Create a Welcome Screen** that explains the rules of the game. Include a \"Start Game\" button.\n\n* Update the your code so that the **image jumps to a new location when it is clicked**. \n\n* **Play a sound** each time the image is clicked.\n\n* **Add a Game Over Screen** with a lose message and button to start over. The Start Over Button should direct back to the Welcome Screen.\n\n* **Make the user lose**, by sending them to the Game Over Screen, when the background is clicked.\n\n\n",
        "CSPU5 Add a 2nd Screen_markdown_instruction": "# Design Mode: Adding a Screen\n\n<img src=\"https://images.code.org/3aab64d77293bda1759586e2cff5c6cc-image-1477366229125.png\" style=\"width: 150px; float: right\">\n\n**Now you try it:** Add a new screen and a button to the app we've started here.\n\n**NOTE:** We've created one screen for you - the Hello Screen.  You need to add a new screen - the new screen should look something like the example shown to the right.\n\nHere are the steps:\n\n* **Add a new screen**\n  * Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39 PM.png\" style=\"width: 50px\"> from the Design Toolbox.\n  * Or choose *New Screen...* from the pulldown menu at the top of the app display.\n \n* **Set the background color**\n  * It doesn't have to be orange like the example\n \n* **Add a Button**\n  * A simple button is fine.  You can embelish with an icon if you want.\n  * Optional: You can also add a text label saying \"Goodbye!\"\n\n**Click Run...but...you won't see much**\n\n* Because we haven't added code yet **all you'll see is the (default) Hello screen**\n* You won't have any way to see the orange screen when the app is running.\n\n**Click Finish** to move on to the next level where we'll add code\n\n  * Note: you can continue to work on your design on the next level too\n\n",
        "CSPU5 Add a 2nd Screen_2018_markdown_instruction": "# Design Mode: Adding a Screen\n\n<img src=\"https://images.code.org/3aab64d77293bda1759586e2cff5c6cc-image-1477366229125.png\" style=\"width: 150px; float: right\">\n\n**Now you try it:** Add a new screen and a button to the app we've started here.\n\n**NOTE:** We've created one screen for you - the Hello Screen.  You need to add a new screen - the new screen should look something like the example shown to the right.\n\nHere are the steps:\n\n* **Add a new screen**\n  * Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39 PM.png\" style=\"width: 50px\"> from the Design Toolbox.\n  * Or choose *New Screen...* from the pulldown menu at the top of the app display.\n \n* **Set the background color**\n  * It doesn't have to be orange like the example\n \n* **Add a Button**\n  * A simple button is fine.  You can embelish with an icon if you want.\n  * Optional: You can also add a text label saying \"Goodbye!\"\n\n**Click Run...but...you won't see much**\n\n* Because we haven't added code yet **all you'll see is the (default) Hello screen**\n* You won't have any way to see the orange screen when the app is running.\n\n**Click Finish** to move on to the next level where we'll add code\n\n  * Note: you can continue to work on your design on the next level too\n\n",
        "CSPU5 Add full screen image to bg of chaser game_markdown_instruction": "# Add a Full Screen Image to act as Background to Game\n\n<img src=\"https://images.code.org/9898664ee57768dd6e332bfab804c2a6-image-1477324830263.png\" style=\"float: right\">\n\nWe want to be able to detect when the user *misses* clicking on the target. Since we know the screen itself registers every click no matter what, the only way to determine that the user missed the target is to **add an image that takes up the full screen**.  \n\nIn other words we're trying to determine which of two images was clicked - the target, or the background - which is do-able since we know when images overlap only one will have a click event triggered. \n\n  * When the target is clicked, it jumps to a new location\n  * When the background image is clicked we will (eventually) switch to a new screen.\n\n**Following the Event-Driven Pattern...**\n\n* **Design mode: Add a new image to the game** \n  * and stretch it to fill the whole screen.\n  * Change the layering order (if necessary) so that the target image is in front of the full screen image.\n  * (See example at right which shows an image that is stretched to the full size of the screen sitting behind the target image).\n\n* **Add an onEvent handler** for the full screen image with a simple console.log message\n  * **TIP**: this is basically done for you if you add onEvent from Design Mode\n\n* **Run. Test. Debug.**\n  \nMake sure that with each click one of two things is happening.\n  * When the target is clicked, it jumps to a new location (and optionally print a message to the console).\n  * When the background image is clicked it should display a message to the console.\n  * (See example console output at right).",
        "CSPU5 Add full screen image to bg of chaser game_2018_markdown_instruction": "# Add a Full Screen Image to act as Background to Game\n\n<img src=\"https://images.code.org/9898664ee57768dd6e332bfab804c2a6-image-1477324830263.png\" style=\"float: right\">\n\nWe want to be able to detect when the user *misses* clicking on the target. Since we know the screen itself registers every click no matter what, the only way to determine that the user missed the target is to **add an image that takes up the full screen**.  \n\nIn other words we're trying to determine which of two images was clicked - the target, or the background - which is do-able since we know when images overlap only one will have a click event triggered. \n\n  * When the target is clicked, it jumps to a new location\n  * When the background image is clicked we will (eventually) switch to a new screen.\n\n**Following the Event-Driven Pattern...**\n\n* **Design mode: Add a new image to the game** \n  * and stretch it to fill the whole screen.\n  * Change the layering order (if necessary) so that the target image is in front of the full screen image.\n  * (See example at right which shows an image that is stretched to the full size of the screen sitting behind the target image).\n\n* **Add an onEvent handler** for the full screen image with a simple console.log message\n  * **TIP**: this is basically done for you if you add onEvent from Design Mode\n\n* **Run. Test. Debug.**\n  \nMake sure that with each click one of two things is happening.\n  * When the target is clicked, it jumps to a new location (and optionally print a message to the console).\n  * When the background image is clicked it should display a message to the console.\n  * (See example console output at right).",
        "CSPU5 Add game over screen_markdown_instruction": "# Add a \"game over\" screen and finalize the game\n\n* **Add a new Screen** with a \"game over\" message and **add a button** to start over. \n\n* **Add an event handler** for the \"Start Over\" Button to send the user back to the Welcome Screen.\n\n* **Add `setScreen` to the event handling function for the background image**\n  * When the background image is clicked, the user should be sent to the \"game over\" screen you just created.\n\n<img src=\"https://images.code.org/bb3c0973ee0d83d3540f5ffed797e442-image-1477405500619.gif\" style=\"float: right; width: 150px\">\n\n# Run. Test. Debug.\n\nYou should now have a 3-screen app with:\n\n* A welcome screen\n* A game play screen\n* A \"game over\" screen\n\n**Avoid dead-ends** -- the user should be able to get between all the screens appropriately, and play the game.\n\nIf it's not working:\n\n* Retrace your steps\n* See if you can figure out where things are going wrong\n* Add extra `console.log` statements.  \n* Ask a friend to help you out.\n\n**Stick with it until you get it!**\n\n",
        "CSPU5 Add game over screen_2018_markdown_instruction": "# Add a \"game over\" screen and finalize the game\n\n* **Add a new Screen** with a \"game over\" message and **add a button** to start over. \n\n* **Add an event handler** for the \"Start Over\" Button to send the user back to the Welcome Screen.\n\n* **Add `setScreen` to the event handling function for the background image**\n  * When the background image is clicked, the user should be sent to the \"game over\" screen you just created.\n\n<img src=\"https://images.code.org/bb3c0973ee0d83d3540f5ffed797e442-image-1477405500619.gif\" style=\"float: right; width: 150px\">\n\n# Run. Test. Debug.\n\nYou should now have a 3-screen app with:\n\n* A welcome screen\n* A game play screen\n* A \"game over\" screen\n\n**Avoid dead-ends** -- the user should be able to get between all the screens appropriately, and play the game.\n\nIf it's not working:\n\n* Retrace your steps\n* See if you can figure out where things are going wrong\n* Add extra `console.log` statements.  \n* Ask a friend to help you out.\n\n**Stick with it until you get it!**\n\n",
        "CSPU5 Adding Screens Template_markdown_instruction": "# Second Screen\n\nUp until now our apps have only been able to have one view. With Design Mode we can now make multiple screens and switch between them!\n\n**Goal:** Make a 2 screen app with a black screen and a white screen. \n\n<img src=\"https://images.code.org/e35a6f494cf6f0c57c66a1aef651cdb0-image-1444353622241.gif\" style=\"width: 250px; float: right\">\n\n# Do This:\n\nSwitch to Design Mode and **add a second screen**. There are two ways to add a second screen: \n\n* Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39 PM.png\" style=\"width: 50px\"> from the Design Toolbox. Check out the screen dropdown menu at the top right of the app window. You should now have two screens!  <img src=\"https://images.code.org/b48d978335701888b744702f25f11b28-image-1444353746012.17.07 PM.png\" style=\"width: 75px\"> \n* From the screen dropdown menu at the top right of the app window click *New Screen*. \n\nMake screen1 white and screen2 black. **Set the background color for a screen in the Properties tab**.  Make sure to rename the screens with appropriate IDs.",
        "CSPU5 Adding Screens Template_2018_markdown_instruction": "# Second Screen\n\nUp until now our apps have only been able to have one view. With Design Mode we can now make multiple screens and switch between them!\n\n**Goal:** Make a 2 screen app with a black screen and a white screen. \n\n<img src=\"https://images.code.org/e35a6f494cf6f0c57c66a1aef651cdb0-image-1444353622241.gif\" style=\"width: 250px; float: right\">\n\n# Do This:\n\nSwitch to Design Mode and **add a second screen**. There are two ways to add a second screen: \n\n* Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39 PM.png\" style=\"width: 50px\"> from the Design Toolbox. Check out the screen dropdown menu at the top right of the app window. You should now have two screens!  <img src=\"https://images.code.org/b48d978335701888b744702f25f11b28-image-1444353746012.17.07 PM.png\" style=\"width: 75px\"> \n* From the screen dropdown menu at the top right of the app window click *New Screen*. \n\nMake screen1 white and screen2 black. **Set the background color for a screen in the Properties tab**.  Make sure to rename the screens with appropriate IDs.",
        "CSPU5 Debugging Overlapping Objects and Screen Events_markdown_instruction": "# Use console.log to Test Overlapping Objects and the Screen\n\nThere are two goals here:\n\n1. Practice inserting your own console.log statements.\n2. Investigate how the screen captures events (it's different).\n\n## Do This:\n<img src=\"https://images.code.org/4100fcc7062f97ce8440003b3a17cd25-image-1477363054051.png\" style=\"float: right\">\n\n* **Add `console.log` statements to each of the 3 event handlers** we started you out with.\n  * Make the text that gets printed *be descriptive* so that you know exactly what is happening when.\n\n* **Run** the program and try clicking where the diagram (at right) shows.\n  * Click on each button\n  * Click where the buttons overlap\n  * Click on the screen (i.e. the background)\n\n**Investigate until you can answer these questions:**\n1. When you click on a location where two objects are overlapping, which event(s) fire(s)?\n2. When you click on an non-overlapping part of some object what gets triggered?\n3. When does a \"click\" on the \"screen\" get triggered?\n\n\n<details><summary>Answers: [click here]</summary>\n<br><br>\n1. When you click on a location where two objects are overlapping, which event(s) fire(s)?\n<br>\n<li><em> The event-handler for object that is on top gets triggered.  The object that is underneath is essentially blocked from being clicked in the overlapping portion</em></li>\n<br><br>\n2. When you click on an non-overlapping part of some object what gets triggered?\n<li><em>The event-handler for the object gets triggered as you might expect</em></li>\n<br><br>\n3. When does a \"click\" on the \"screen\" get triggered?\n<li><em>Always. Events that occur on the screen cannot be blocked by other objects.  If you set up an event listener for the screen it will capture EVERY event of that type, no matter what other UI elements are on the screen.  This behavior of the screen is done on purpose and is useful for certain kinds of things.</em></li>\n\n\n</details>\n\n",
        "CSPU5 Debugging Overlapping Objects and Screen Events_2018_markdown_instruction": "# Use console.log to Test Overlapping Objects and the Screen\n\nThere are two goals here:\n\n1. Practice inserting your own console.log statements.\n2. Investigate how the screen captures events (it's different).\n\n## Do This:\n<img src=\"https://images.code.org/4100fcc7062f97ce8440003b3a17cd25-image-1477363054051.png\" style=\"float: right\">\n\n* **Add `console.log` statements to each of the 3 event handlers** we started you out with.\n  * Make the text that gets printed *be descriptive* so that you know exactly what is happening when.\n\n* **Run** the program and try clicking where the diagram (at right) shows.\n  * Click on each button\n  * Click where the buttons overlap\n  * Click on the screen (i.e. the background)\n\n**Investigate until you can answer these questions:**\n1. When you click on a location where two objects are overlapping, which event(s) fire(s)?\n2. When you click on an non-overlapping part of some object what gets triggered?\n3. When does a \"click\" on the \"screen\" get triggered?\n\n\n<details><summary>Answers: [click here]</summary>\n<br><br>\n1. When you click on a location where two objects are overlapping, which event(s) fire(s)?\n<br>\n<li><em> The event-handler for object that is on top gets triggered.  The object that is underneath is essentially blocked from being clicked in the overlapping portion</em></li>\n<br><br>\n2. When you click on an non-overlapping part of some object what gets triggered?\n<li><em>The event-handler for the object gets triggered as you might expect</em></li>\n<br><br>\n3. When does a \"click\" on the \"screen\" get triggered?\n<li><em>Always. Events that occur on the screen cannot be blocked by other objects.  If you set up an event listener for the screen it will capture EVERY event of that type, no matter what other UI elements are on the screen.  This behavior of the screen is done on purpose and is useful for certain kinds of things.</em></li>\n\n\n</details>\n\n",
        "CSPU5 First Time Console.log_markdown_instruction": "# Exploring console.log\n\n<img src=\"https://images.code.org/cdc253db1b9a3685eaf5ea4b6bc30766-image-1444337429645.png\" style=\"width: 250px; float: right; border: solid 1px black; margin-right: 10px\">\n\nIn the last level, we saw a new command: `console.log`. You should have noticed that it prints out text in the Debug Console below the code workspace.\n\nThe Debug Console area is an important tool for programmers.  You've seen it display error messages, but you can also have your program display messages there.  \n\nYou can find `console.log` in the **Variables** code toolbox, and it is the command you use to send messages to the console -- it's just about the simplest thing you can do to make your code generate output.\n\n**You try it:** Add a console.log statement to say your name\n\n* Drag out a `console.log` statement into the workspace and add it below the 2 statements there.\n\n* Following the lead of the first two lines - update the code so that it says your name.\n\n* The output should look something like this: \n\n![](https://images.code.org/64c82c1bf7ecb859d84192e5bffb3488-image-1477338603375.png)",
        "CSPU5 First Time Console.log_2018_markdown_instruction": "# Exploring console.log\n\n<img src=\"https://images.code.org/cdc253db1b9a3685eaf5ea4b6bc30766-image-1444337429645.png\" style=\"width: 250px; float: right; border: solid 1px black; margin-right: 10px\">\n\nIn the last level, we saw a new command: `console.log`. You should have noticed that it prints out text in the Debug Console below the code workspace.\n\nThe Debug Console area is an important tool for programmers.  You've seen it display error messages, but you can also have your program display messages there.  \n\nYou can find `console.log` in the **Variables** code toolbox, and it is the command you use to send messages to the console -- it's just about the simplest thing you can do to make your code generate output.\n\n**You try it:** Add a console.log statement to say your name\n\n* Drag out a `console.log` statement into the workspace and add it below the 2 statements there.\n\n* Following the lead of the first two lines - update the code so that it says your name.\n\n* The output should look something like this: \n\n![](https://images.code.org/64c82c1bf7ecb859d84192e5bffb3488-image-1477338603375.png)",
        "CSPU5 Project - Multi Screen App_markdown_instruction": "# Multi Screen App\nYou will be creating your own multi-screen app to practice designing user interfaces and writing event-driven programs. \n\n**Look at the Project Guide and Planning Sheets before programming**.\n\n# Requirements Reminder\n* Your app will have at least **4 screens**.\n* Your app should include **text, images, buttons, and sound**.\n* There should be **no “getting stuck” on any screen.**  It should always be possible to navigate from a screen in your app to some other screen. \n* Your program code should follow **good style**.\n* Your user interface should be **intuitive to use**.",
        "CSPU5 Use setScreen for first time_markdown_instruction": "# Adding Code: Switching Screens with *setScreen*\n\n<img src=\"https://images.code.org/9232bd923268d36158d63829145c9879-image-1477367827365.gif\" style=\"float: right; width: 150px\">\n\n**You Try it:** Add event handlers to the buttons that use `setScreen` to switch to the other screen. \n\nThe result should be two-screen app which can switch back and forth between the \"hello\" and \"go back\" screens.  See example at right.\n\n* **Add an onEvent handler** for the smiley face image/button to respond to a \"click\"\n  * Do it the easy way by inserting from design mode, or just drag an `onEvent` block into the code workspace.\n\n* **Add `setScreen` into the event handling function**\n  * Make it switch to the other screen when the smiley face is clicked.\n\n**Run. Test. Debug**\n\n* Test to see if the clicking the smiley face switches screens\n* If it doesn't work, retrace your steps and try again.\n\nIf it works, then **repeat these steps for the \"go back\" button.**\n\n* The result should look something like the example on the right. \n",
        "CSPU5 Use setScreen for first time_2018_markdown_instruction": "# Adding Code: Switching Screens with *setScreen*\n\n<img src=\"https://images.code.org/9232bd923268d36158d63829145c9879-image-1477367827365.gif\" style=\"float: right; width: 150px\">\n\n**You Try it:** Add event handlers to the buttons that use `setScreen` to switch to the other screen. \n\nThe result should be two-screen app which can switch back and forth between the \"hello\" and \"go back\" screens.  See example at right.\n\n* **Add an onEvent handler** for the smiley face image/button to respond to a \"click\"\n  * Do it the easy way by inserting from design mode, or just drag an `onEvent` block into the code workspace.\n\n* **Add `setScreen` into the event handling function**\n  * Make it switch to the other screen when the smiley face is clicked.\n\n**Run. Test. Debug**\n\n* Test to see if the clicking the smiley face switches screens\n* If it doesn't work, retrace your steps and try again.\n\nIf it works, then **repeat these steps for the \"go back\" button.**\n\n* The result should look something like the example on the right. \n",
        "CSPU5 console.log debug when mouse events happen_markdown_instruction": "# Which comes first?\n\nAnother useful thing to do with `console.log` statements is to use them to figure out the order in which events are triggered. In the code below one button has 3 different event listeners, that will respond to the events: `\"mousedown\"`, `\"mouseup\"`, and `\"click\"`\n\nThe question is, if you click the button:\n\n* Will all 3 of these events trigger? \n* Will any of them trigger?  Which one(s)?\n* What order will these events be triggered in?\n\n**You try it**:\n1. Study the code and **make Prediction**\n2. **Run** the program\n3. **Were you right?** What's unexpected?\n4. **Keep testing** until you see what's happening.\n\n",
        "CSPU5 console.log debug when mouse events happen_2018_markdown_instruction": "# Which comes first?\n\nAnother useful thing to do with `console.log` statements is to use them to figure out the order in which events are triggered. In the code below one button has 3 different event listeners, that will respond to the events: `\"mousedown\"`, `\"mouseup\"`, and `\"click\"`\n\nThe question is, if you click the button:\n\n* Will all 3 of these events trigger? \n* Will any of them trigger?  Which one(s)?\n* What order will these events be triggered in?\n\n**You try it**:\n1. Study the code and **make Prediction**\n2. **Run** the program\n3. **Were you right?** What's unexpected?\n4. **Keep testing** until you see what's happening.\n\n",
        "CSPU5 console.log in event v. global_markdown_instruction": "# Predict what will happen\n\nWe've added some `console.log` statements *both* in event handlers as well as just out in the open, between event handler definitions. \n\n* **Study the code first**\n  * We've added some white space between lines to make it more readable.\n\n* **Predict:** What do you think will happen when you click Run?  What will display? Will it:\n  * Print all 5 messages?\n  * Print only a few? Which ones?\n  * Halt with an error message?\n \n* *After* you've made some kind of prediction, **hit Run**.\n  * If the program runs, then try to use it - click on the buttons and such.\n\n* Were you right? Anything unexpected?\n  * Reset and Run the program again a few times until you understand what's happening.\n \n<details><summary>What's happening? [click to expand]</summary>\n<li> As soon as you hit Run messages \"1\", \"3\" and \"5\" will display immediately. Those statements are out in the \"open\" rather than part of an event handling function - the computer can run them right away.</li>\n<li>Messages \"1\", \"3\" and \"5\" will only print once each time you run the program not matter what else you do</li>\n<li>Messages \"2\" and \"4\" will be displayed when the the buttons are clicked.</li>\n<li>In case you're wondering: <strong>This is bad code</strong>.  It's hard to read because of where the statements fall.  Typically if some code needs to run when the program starts up, you'd group it all together at the top of the program.  Scattering it about in and between event handlers and other functions is a recipe for a lot of buggy code that will be hard for you to work out.</li></details>",
        "CSPU5 console.log in event v. global_2018_markdown_instruction": "# Predict what will happen\n\nWe've added some `console.log` statements *both* in event handlers as well as just out in the open, between event handler definitions. \n\n* **Study the code first**\n  * We've added some white space between lines to make it more readable.\n\n* **Predict:** What do you think will happen when you click Run?  What will display? Will it:\n  * Print all 5 messages?\n  * Print only a few? Which ones?\n  * Halt with an error message?\n \n* *After* you've made some kind of prediction, **hit Run**.\n  * If the program runs, then try to use it - click on the buttons and such.\n\n* Were you right? Anything unexpected?\n  * Reset and Run the program again a few times until you understand what's happening.\n \n<details><summary>What's happening? [click to expand]</summary>\n<li> As soon as you hit Run messages \"1\", \"3\" and \"5\" will display immediately. Those statements are out in the \"open\" rather than part of an event handling function - the computer can run them right away.</li>\n<li>Messages \"1\", \"3\" and \"5\" will only print once each time you run the program not matter what else you do</li>\n<li>Messages \"2\" and \"4\" will be displayed when the the buttons are clicked.</li>\n<li>In case you're wondering: <strong>This is bad code</strong>.  It's hard to read because of where the statements fall.  Typically if some code needs to run when the program starts up, you'd group it all together at the top of the program.  Scattering it about in and between event handlers and other functions is a recipe for a lot of buggy code that will be hard for you to work out.</li></details>",
        "CSPU5_AddImageToChaserGame_markdown_instruction": "# Now you do it: Add an image\n\n[lice cap]\n\n* add an image from icon, or from something you upload.\n\n* We'll make the image respond to events on the next level\n\n* Click continue\n\n",
        "CSPU5_AddImage_andMakeChaserGame_markdown_instruction": "# Now you do it: Add an image\n\n[lice cap]\n\n* add an image from icon, or from something you upload.\n\n* We'll make the image respond to events on the next level\n\n* Click continue\n\n",
        "CSPU5_AddLabelToChaserGame_markdown_instruction": "# Design Mode: Add a label\n\n<img src=\"https://images.code.org/092af4a9c90ad36fa44c636f1227e4d9-image-1476893390336.gif\" style=\"float: right\">\n\nWell, now we have the beginnings of a little game!  Time to go back to design mode to start embellishing our program.\n\n**You try it:** - Add a text label that says \"Try to Catch the Button!\"\n\n\n\n* Switch back to design mode\n* Drag a label on the screen <img src=\"https://images.code.org/c74c0e7fed308af92740d31cbd1098a9-image-1476892918698.png\">\n* Set the text to be something like \"Try to Catch the Button!\"\n* Set any other properties or styles of the text label that you want.\n\n\n",
        "CSPU5_AddLabelToChaserGame_2018_markdown_instruction": "# Design Mode: Add a label\n\n<img src=\"https://images.code.org/092af4a9c90ad36fa44c636f1227e4d9-image-1476893390336.gif\" style=\"float: right\">\n\nWell, now we have the beginnings of a little game!  Time to go back to design mode to start embellishing our program.\n\n**You try it:** - Add a text label that says \"Try to Catch the Button!\"\n\n\n\n* Switch back to design mode\n* Drag a label on the screen <img src=\"https://images.code.org/c74c0e7fed308af92740d31cbd1098a9-image-1476892918698.png\">\n* Set the text to be something like \"Try to Catch the Button!\"\n* Set any other properties or styles of the text label that you want.\n\n\n",
        "CSPU5_Debugging predict unexpected behavior - two onEvents to one ID_markdown_instruction": "# Debugging Unexpected Behavior\n\n## Predict - Observe - Reflect\n\nTo understand a new piece of code good programmers often try to **first make a prediction about what will happen before running the program**. \n\nBy forcing yourself to make a prediction (it doesn't matter if you're right or not) you are immediately alerted to any **unusual or unexpected behavior** and you can ask yourself, *\"Huh? why did it do that?  Was that supposed to happen?\"*  It might not be an error, but you gain invaluable insight and actually **learn faster**.\n\n**Predict:** For the code that is here, what will happen when the \"Click Me\" button is clicked? \n\n  * **Study the code** - This program has **two event handlers** listening for events on the same button?\n  * **Force yourself to make a prediction!** - \"I don't know\" is not a prediction!. \n\nHere are some options to think about:\n\n* There will be an error in the console immediately after hitting run\n* There will be an error in the console but not until you hit the button\n* Program does nothing\n* turtle only moves forward\n* turtle only turns left\n* turtle move forward *then* turn left \n* turtle turn left *then* move forward?\n* something else? \n\n**Observe:** Once you've made a prediction, close these instructions and **run the program** to observe what happens.\n\n**Reflect:** Was your prediction correct? If not what about your mental model might need to change? Talk about it with a classmate and experiment with the code to make sure you understand what is happening.",
        "CSPU5_Debugging predict unexpected behavior - two onEvents to one_2018_markdown_instruction": "# Debugging Unexpected Behavior\n\n## Predict - Observe - Reflect\n\nTo understand a new piece of code good programmers often try to **first make a prediction about what will happen before running the program**. \n\nBy forcing yourself to make a prediction (it doesn't matter if you're right or not) you are immediately alerted to any **unusual or unexpected behavior** and you can ask yourself, *\"Huh? why did it do that?  Was that supposed to happen?\"*  It might not be an error, but you gain invaluable insight and actually **learn faster**.\n\n**Predict:** For the code that is here, what will happen when the \"Click Me\" button is clicked? \n\n  * **Study the code** - This program has **two event handlers** listening for events on the same button?\n  * **Force yourself to make a prediction!** - \"I don't know\" is not a prediction!. \n\nHere are some options to think about:\n\n* There will be an error in the console immediately after hitting run\n* There will be an error in the console but not until you hit the button\n* Program does nothing\n* turtle only moves forward\n* turtle only turns left\n* turtle move forward *then* turn left \n* turtle turn left *then* move forward?\n* something else? \n\n**Observe:** Once you've made a prediction, close these instructions and **run the program** to observe what happens.\n\n**Reflect:** Was your prediction correct? If not what about your mental model might need to change? Talk about it with a classmate and experiment with the code to make sure you understand what is happening.",
        "CSPU5_FinalizeChaserGame_markdown_instruction": "# Add an Image and Make a Chaser Game!\n<img src=\"https://images.code.org/ed1e9852b33ca368cf8cd8e0b0159de7-image-1444336815528.gif\" style=\"float: right\">\n\n**Now You Try it** - add an image to your app and modify the code so that the image jumps around the screen rather than the button.  Your little game should have:\n\n* **Text** on the top of the screen with a title or instructions for what to do.\n* **An image** that \"runs away\" (moves randomly) based on some mouse event.\n\n**Tips:**\n  * **Hint** - the easy way to do this is to simply change the IDs in `onEvent` and `setPosition` to respond to the image instead of the button.\n  * Remove the button from the app after the image is working.  We don't need it anymore.\n  * Change the label text so that the instructions make sense for your game.\n  * The game is even more fun if you use  the `mouseover` event instead of `click`\n\n**Optional Extensions**:\n  * Make the background interesting\n  * Add another image that runs away.\n  * See what happens with the commands `hideElement` and `showElement`\n  * Have two UI elements where interacting with one controls or does something to the other.\n\n**Finalize your \"Chaser Game\"** and click Finish.\n\n",
        "CSPU5_Project - Multi Screen App_markdown_instruction": "# Multi Screen App\nYou will be creating your own multi-screen app to practice designing user interfaces and writing event-driven programs. \n\n**Look at the Project Guide and Planning Sheets before programming**.\n\n# Requirements Reminder\n* Your app will have at least **4 screens**.\n* Your app should include **text, images, buttons, and sound**.\n* There should be **no “getting stuck” on any screen.**  It should always be possible to navigate from a screen in your app to some other screen. \n* Your program code should follow **good style**.\n* Your user interface should be **intuitive to use**.",
        "CSPU5_U3 - Arrays - Wrap Up 1_markdown_instruction": "## Choose: Array or Variable?\n\nYour app needs to store the following information. For each type of information, decide whether you would use an array or a variable to store it:\n \n* All the messages a user has sent\n* The highest score a user has ever reached on the app\n* A username and password to unlock the app\n",
        "CSPU5_U3 - Arrays - Wrap Up 1_2018_markdown_instruction": "## Choose: Array or Variable?\n\nYour app needs to store the following information. For each type of information, decide whether you would use an array or a variable to store it:\n \n* All the messages a user has sent\n* The highest score a user has ever reached on the app\n* A username and password to unlock the app\n",
        "CSPU5_U3 - Arrays - Wrap Up 2_markdown_instruction": "## Free Response: Choosing Array or Variable\n\nIn general, when do you think you should store information in an array, and when should you use a variable?\n",
        "CSPU5_U3 - Arrays - Wrap Up 2_2018_markdown_instruction": "## Free Response: Choosing Array or Variable\n\nIn general, when do you think you should store information in an array, and when should you use a variable?\n",
        "CSPU5_U3 - Arrays - appendItem_markdown_instruction": "# Adding Items to an Array\n\n<img src=\"https://images.code.org/c9244eb598416b5a3d9baac088bbaca8-image-1447267168567.39.06 PM.png\" style=\"width: 250px; float: right\">\n\nIn our last exercise we created our array and initialized it with some values. Another way to do this is to **add items to your array on separate lines**. The simplest way to do this is to add a new item to the end of your array using the `appendItem` command.\n\n<img src=\"https://images.code.org/74a2f2660d5aea8dec7dc4933f2c68d3-image-1447185901732.04.50 PM.png\" style=\"width: 250px; float:right; border: solid 1px black\">\n\nTo append means to add or to join. When you append an item to an array you actually add a new location to the end of the array that contains the new value, so that the total size of the array grows by one.  Since you can always add items to an array after creating it, it is very common to  **create an empty array and then add values in subsequent portions of your program**.\n\n# Do This:\n\n* **Read the documentation** for `appendItem`.\n* Create an **empty array** called `oddNumbers`.\n* Use `appendItem` to add the odd numbers 1-11 to your array.\n\n![](https://images.code.org/41883beff3cb9810fed37ae684dc1fe8-image-1448312407634.gif)\n\n* **Use `console.log`** to confirm your array is holding the correct values. The output should look like the example below.\n\n![](https://images.code.org/4daf7aff37f4796185fc608f20856a12-image-1489697355089.png)",
        "CSPU5_U3 - Arrays - appendItem_2018_markdown_instruction": "# Adding Items to an Array\n\n<img src=\"https://images.code.org/c9244eb598416b5a3d9baac088bbaca8-image-1447267168567.39.06 PM.png\" style=\"width: 250px; float: right\">\n\nIn our last exercise we created our array and initialized it with some values. Another way to do this is to **add items to your array on separate lines**. The simplest way to do this is to add a new item to the end of your array using the `appendItem` command.\n\n<img src=\"https://images.code.org/74a2f2660d5aea8dec7dc4933f2c68d3-image-1447185901732.04.50 PM.png\" style=\"width: 250px; float:right; border: solid 1px black\">\n\nTo append means to add or to join. When you append an item to an array you actually add a new location to the end of the array that contains the new value, so that the total size of the array grows by one.  Since you can always add items to an array after creating it, it is very common to  **create an empty array and then add values in subsequent portions of your program**.\n\n# Do This:\n\n* **Read the documentation** for `appendItem`.\n* Create an **empty array** called `oddNumbers`.\n* Use `appendItem` to add the odd numbers 1-11 to your array.\n\n![](https://images.code.org/41883beff3cb9810fed37ae684dc1fe8-image-1448312407634.gif)\n\n* **Use `console.log`** to confirm your array is holding the correct values. The output should look like the example below.\n\n![](https://images.code.org/4daf7aff37f4796185fc608f20856a12-image-1489697355089.png)",
        "CSPU5_U3 - Arrays - assignment_markdown_instruction": "# Setting Values by Index\n\nEach location in an array can be treated like its own variable. We've already seen how we can use bracket notation to reference values stored at specific locations in an array. Just like with variables, **we can assign the value of a specific location in an array using `=`** (the assignment operator).\n\n**Example:** The value at index 0 of this array is set to 10.\n\n![](https://images.code.org/d0bf9901deeffb1cd6553c27c38046a4-image-1447172887059.27.25 AM.png)\n\n# Do This:\n\n<img src=\"https://images.code.org/cfa8d82d89e5227f22e3afe5f9c49698-image-1447366432447.13.11 PM.png\" style=\"width: 200px; float: right\">\n\nStarter code is provided that creates an array of 0's and 1's. **Set all the values in this array to be 0**. \n\n* Use **indexes** and the **assignment operator** `=` to **set all the 1's to be 0**.\n* Check the output of the `console.log` to confirm **the array only contains 0's**. Example shown on the right.\n\n",
        "CSPU5_U3 - Arrays - assignment2_markdown_instruction": "# Array Values: Arithmetic\n\nYou can reference locations in arrays in arithmetic expressions, just like you might a variable.\n\n![](https://images.code.org/a7d11342d8c72b34f2268e4104e43fbd-image-1447189790574.09.32 PM.png)\n\nThe starter code **creates an empty array and adds three random values to it**. \n\n![](https://images.code.org/51b7c713ae398299a85ee8c0b9ee04f3-image-1447190702799.23.46 PM.png)\n\nYou will be adding code to your program that calculates the sum of the values in the array.\n\n**Notice** the difference between displaying an array as part of a string or by itself.  Example:\n\n* code: `console.log(myNumbers)` displays *with* brackets as: `[1, 2, 3, 4]`\n* code: `console.log(\"my list: \"+myNumbers)` displays *without* brackets as: `my list: 1, 2, 3, 4`\n\nSo when it's part of a string it *does not* print the square brackets around the ends of the list.  This is a \"feature\" of the language with no great explanation. In the first case it sees only a list and it produces a more technical representation. In the second case the system is trying hard to convert the list to a nice looking string.\n\n# Do This:\n\n* **Add a variable** to your program to hold the sum of the array values.\n* Assign the value of the variable to **the sum of the three array values**.\n* Use `console.log` to confirm that you have correctly calculated the sum of the values. Below is sample output from one run of the program.\n\n![](https://images.code.org/a9ca48808e8e833d92b3bcdebc7b0bd4-image-1447189975738.12.31 PM.png)",
        "CSPU5_U3 - Arrays - assignment2_2018_markdown_instruction": "# Array Values: Arithmetic\n\nYou can reference locations in arrays in arithmetic expressions, just like you might a variable.\n\n![](https://images.code.org/a7d11342d8c72b34f2268e4104e43fbd-image-1447189790574.09.32 PM.png)\n\nThe starter code **creates an empty array and adds three random values to it**. \n\n![](https://images.code.org/51b7c713ae398299a85ee8c0b9ee04f3-image-1447190702799.23.46 PM.png)\n\nYou will be adding code to your program that calculates the sum of the values in the array.\n\n**Notice** the difference between displaying an array as part of a string or by itself.  Example:\n\n* code: `console.log(myNumbers)` displays *with* brackets as: `[1, 2, 3, 4]`\n* code: `console.log(\"my list: \"+myNumbers)` displays *without* brackets as: `my list: 1, 2, 3, 4`\n\nSo when it's part of a string it *does not* print the square brackets around the ends of the list.  This is a \"feature\" of the language with no great explanation. In the first case it sees only a list and it produces a more technical representation. In the second case the system is trying hard to convert the list to a nice looking string.\n\n# Do This:\n\n* **Add a variable** to your program to hold the sum of the array values.\n* Assign the value of the variable to **the sum of the three array values**.\n* Use `console.log` to confirm that you have correctly calculated the sum of the values. Below is sample output from one run of the program.\n\n![](https://images.code.org/a9ca48808e8e833d92b3bcdebc7b0bd4-image-1447189975738.12.31 PM.png)",
        "CSPU5_U3 - Arrays - assignment3_markdown_instruction": "# Reassigning Array Values\n\nWe've already seen many examples of how **a location in an array can be treated identically to a variable**. The last exercise we'll perform to prove this point is **reassigning array values**. The syntax for reassigning values stored in an array is identical to that used when reassigning variables. Even the `++` notation to increase a value by one works!\n\n![](https://images.code.org/3cbd11c69e42daddce28e059388097db-image-1464228660945.png)\n\nThe program you're about to see **creates an empty array and adds three random values to it**. You will be adding code to the program that **increases each value by one**.\n\n# Do This:\n\n* Add code to the program that **increases the value stored at each location in the array by one**.\n* Use `console.log` to confirm that you have correctly increased the values. Below is sample output from one run of the program.\n\n![](https://images.code.org/42ca1f874a8a7b71e29b2ffd80ec31c3-image-1447191826756.43.37 PM.png)\n\n",
        "CSPU5_U3 - Arrays - assignment3_2018_markdown_instruction": "# Reassigning Array Values\n\nWe've already seen many examples of how **a location in an array can be treated identically to a variable**. The last exercise we'll perform to prove this point is **reassigning array values**. The syntax for reassigning values stored in an array is identical to that used when reassigning variables. Even the `++` notation to increase a value by one works!\n\n![](https://images.code.org/3cbd11c69e42daddce28e059388097db-image-1464228660945.png)\n\nThe program you're about to see **creates an empty array and adds three random values to it**. You will be adding code to the program that **increases each value by one**.\n\n# Do This:\n\n* Add code to the program that **increases the value stored at each location in the array by one**.\n* Use `console.log` to confirm that you have correctly increased the values. Below is sample output from one run of the program.\n\n![](https://images.code.org/42ca1f874a8a7b71e29b2ffd80ec31c3-image-1447191826756.43.37 PM.png)\n\n",
        "CSPU5_U3 - Arrays - assignment_2018_markdown_instruction": "# Setting Values by Index\n\nEach location in an array can be treated like its own variable. We've already seen how we can use bracket notation to reference values stored at specific locations in an array. Just like with variables, **we can assign the value of a specific location in an array using `=`** (the assignment operator).\n\n**Example:** The value at index 0 of this array is set to 10.\n\n![](https://images.code.org/d0bf9901deeffb1cd6553c27c38046a4-image-1447172887059.27.25 AM.png)\n\n# Do This:\n\n<img src=\"https://images.code.org/cfa8d82d89e5227f22e3afe5f9c49698-image-1447366432447.13.11 PM.png\" style=\"width: 200px; float: right\">\n\nStarter code is provided that creates an array of 0's and 1's. **Set all the values in this array to be 0**. \n\n* Use **indexes** and the **assignment operator** `=` to **set all the 1's to be 0**.\n* Check the output of the `console.log` to confirm **the array only contains 0's**. Example shown on the right.\n\n",
        "CSPU5_U3 - Arrays - createFirstArray_markdown_instruction": "# Creating an Array\n\nArrays have many features which make them different from variables, but **most of what you've learned about variables also applies to arrays**. For example, just like a variable:\n\n* Arrays should be given a **descriptive and meaningful** name.\n* Arrays are created using `var`.\n* Arrays can be initialized/set using `=`.\n\n**Example: Creating an Array**\n\n![](https://images.code.org/0b7d201db2990f0189963bb6a565a057-image-1447097600773.33.08 PM.png)\n\nThis array contains 3 values: 100, 250, 500. Notice that the values are separated with commas `,` and that the entire array is enclosed in brackets `[ ]` . We can use `console.log` to display the contents of an array just like we would a variable.\n\n![](https://images.code.org/7d4be70330108e3e5d6325fa4e721ef4-image-1447097904253.38.18 PM.png)\n\n# Do This:\n\n* Following the format described above **create an array** which contains **the even numbers from 0 to 10**.\n\n<img src=\"https://images.code.org/872be32ff4ba4e9c733435d524a95c9e-image-1448311800271.gif\" width=450px>\n\n* Make sure your array has a **descriptive and meaningful name**.\n* Use `console.log` to display the contents of your array. Below is an example of the output your program should generate.\n\n![](https://images.code.org/230d988cf99556db04a8a4ad6a8d8a47-image-1447364062049.33.53 PM.png)\n\n",
        "CSPU5_U3 - Arrays - createFirstArray_2018_markdown_instruction": "# Creating an Array\n\nArrays have many features which make them different from variables, but **most of what you've learned about variables also applies to arrays**. For example, just like a variable:\n\n* Arrays should be given a **descriptive and meaningful** name.\n* Arrays are created using `var`.\n* Arrays can be initialized/set using `=`.\n\n**Example: Creating an Array**\n\n![](https://images.code.org/0b7d201db2990f0189963bb6a565a057-image-1447097600773.33.08 PM.png)\n\nThis array contains 3 values: 100, 250, 500. Notice that the values are separated with commas `,` and that the entire array is enclosed in brackets `[ ]` . We can use `console.log` to display the contents of an array just like we would a variable.\n\n![](https://images.code.org/7d4be70330108e3e5d6325fa4e721ef4-image-1447097904253.38.18 PM.png)\n\n# Do This:\n\n* Following the format described above **create an array** which contains **the even numbers from 0 to 10**.\n\n<img src=\"https://images.code.org/872be32ff4ba4e9c733435d524a95c9e-image-1448311800271.gif\" width=450px>\n\n* Make sure your array has a **descriptive and meaningful name**.\n* Use `console.log` to display the contents of your array. Below is an example of the output your program should generate.\n\n![](https://images.code.org/230d988cf99556db04a8a4ad6a8d8a47-image-1447364062049.33.53 PM.png)\n\n",
        "CSPU5_U3 - Arrays - expressionsAsIndexes_markdown_instruction": "# Expressions as Indexes: Using Variables\n\nWe can use **any expression that evaluates to a number** as an index in an array. Here are some examples:\n\n![](https://images.code.org/6d4ecc9249dc9f3a845196b04d833c1a-image-1447268711944.24.53 PM.png)\n\n# Do This:\n\n* **Starter code** has been provided which creates an array of colors.\n* **Write code** that logs **a random color from this list** to the console by generating a value for a random index. Try to write your program using `list.length` rather than hard-coding the length of the list.\n\n![](https://images.code.org/d0463c0f2528e04c396f3b9cf219c3ed-image-1447370139548.gif)",
        "CSPU5_U3 - Arrays - expressionsAsIndexes_2018_markdown_instruction": "# Expressions as Indexes: Using Variables\n\nWe can use **any expression that evaluates to a number** as an index in an array. Here are some examples:\n\n![](https://images.code.org/6d4ecc9249dc9f3a845196b04d833c1a-image-1447268711944.24.53 PM.png)\n\n# Do This:\n\n* **Starter code** has been provided which creates an array of colors.\n* **Write code** that logs **a random color from this list** to the console by generating a value for a random index. Try to write your program using `list.length` rather than hard-coding the length of the list.\n\n![](https://images.code.org/d0463c0f2528e04c396f3b9cf219c3ed-image-1447370139548.gif)",
        "CSPU5_U3 - Arrays - favThings bounds_markdown_instruction": "# *if* Statements: Staying in Bounds\n\nCurrently the user can increase or decrease the value in the global index **past the bounds of your array**. As a result you've probably already seen that errors are generated.\n\nTo prevent this from happening, we're going to **add `if` statements** to the event handlers on the \"Next\" and \"Last\" buttons. They should check the value of the global index variable before changing it. If the user is about to step out of the bounds of your array they should either:\n\n* **Block:** Do not change the index if it will result in a value that is out of bounds.\n* **Wrap:** Set the index to be the other end of the array. In other words, going past the end of the array moves the index back to 0 and going past the beginning of the array sets the index to the last in the array (`list.length` will be helpful here).\n\n# Do This:\n\n* **Add `if` statements** to the event handlers on the \"Next\" and \"Last\" buttons that **prevent the global index from going out of bounds** using one of the two strategies described above.\n* Run your program to confirm that the user **cannot go out of bounds** and that the output displayed is correct.",
        "CSPU5_U3 - Arrays - favThings bounds_2018_markdown_instruction": "# *if* Statements: Staying in Bounds\n\nCurrently the user can increase or decrease the value in the global index **past the bounds of your array**. As a result you've probably already seen that errors are generated.\n\nTo prevent this from happening, we're going to **add `if` statements** to the event handlers on the \"Next\" and \"Last\" buttons. They should check the value of the global index variable before changing it. If the user is about to step out of the bounds of your array they should either:\n\n* **Block:** Do not change the index if it will result in a value that is out of bounds.\n* **Wrap:** Set the index to be the other end of the array. In other words, going past the end of the array moves the index back to 0 and going past the beginning of the array sets the index to the last in the array (`list.length` will be helpful here).\n\n# Do This:\n\n* **Add `if` statements** to the event handlers on the \"Next\" and \"Last\" buttons that **prevent the global index from going out of bounds** using one of the two strategies described above.\n* Run your program to confirm that the user **cannot go out of bounds** and that the output displayed is correct.",
        "CSPU5_U3 - Arrays - favThings createArray_markdown_instruction": "# Create Your Array\n\nNow that we've dealt with our design elements we'll need to start writing the actual code of our app. This app keeps track of a list of items, so we know that **we'll need to create an array** to store them. \n\n# Do This:\n\n* **Create an array** that will hold your list of favorite things.\n* **Add three of your own favorite things to your array.**",
        "CSPU5_U3 - Arrays - favThings createArray_2018_markdown_instruction": "# Create Your Array\n\nNow that we've dealt with our design elements we'll need to start writing the actual code of our app. This app keeps track of a list of items, so we know that **we'll need to create an array** to store them. \n\n# Do This:\n\n* **Create an array** that will hold your list of favorite things.\n* **Add three of your own favorite things to your array.**",
        "CSPU5_U3 - Arrays - favThings giveIDs_markdown_instruction": "# Getting Started: Creating IDs\n\nTo get your application off the ground we've provided **the user interface elements that you will use in your application**. Unfortunately they all currently have **default IDs** which don't reflect how the elements will be used.\n\n# Do This:\n\n* **Create a descriptive and meaningful ID** for each element in your app.",
        "CSPU5_U3 - Arrays - favThings giveIDs_2018_markdown_instruction": "# Getting Started: Creating IDs\n\nTo get your application off the ground we've provided **the user interface elements that you will use in your application**. Unfortunately they all currently have **default IDs** which don't reflect how the elements will be used.\n\n# Do This:\n\n* **Create a descriptive and meaningful ID** for each element in your app.",
        "CSPU5_U3 - Arrays - favThings keepPlaying_markdown_instruction": "# Keep Going!\n\nYour app should now be fully functional - nice job! There are of course plenty of new pieces of functionality to add. If you have time feel free to make any improvements you wish. Here are some ideas:\n\n* Allow the user to **append items** rather than add them at the current location.\n* Give the user the ability to **remove** the item at the current index. This can be a little tricky if you **remove the item at the end of the list** so see if you can account for that.\n* Only add words **if they are not blank**.\n* **Improve the appearance** of the app.",
        "CSPU5_U3 - Arrays - favThings keepPlaying_2018_markdown_instruction": "# Keep Going!\n\nYour app should now be fully functional - nice job! There are of course plenty of new pieces of functionality to add. If you have time feel free to make any improvements you wish. Here are some ideas:\n\n* Allow the user to **append items** rather than add them at the current location.\n* Give the user the ability to **remove** the item at the current index. This can be a little tricky if you **remove the item at the end of the list** so see if you can account for that.\n* Only add words **if they are not blank**.\n* **Improve the appearance** of the app.",
        "CSPU5_U3 - Arrays - indexPractice_markdown_instruction": "# Index Practice\n\nIt will take some practice to get comfortable using array indexes. We'll do a couple of exercises to build your confidence.\n\n# Do This:\n\n<img src=\"https://images.code.org/4d52429f1d6f8e7812e14d73e2a89c45-image-1447366245418.08.51 PM.png\" style=\"width: 150px; float: right\">\n\n**Starter code** has been provided that creates an array called `myNumbers`.\n\n* Use `console.log` and array indexes to write the contents of `myNumbers` to the screen in order, as shown to the right. Your commands should be of the form `console.log(myNumbers[index])`.\n\n",
        "CSPU5_U3 - Arrays - indexPractice_2018_markdown_instruction": "# Index Practice\n\nIt will take some practice to get comfortable using array indexes. We'll do a couple of exercises to build your confidence.\n\n# Do This:\n\n<img src=\"https://images.code.org/4d52429f1d6f8e7812e14d73e2a89c45-image-1447366245418.08.51 PM.png\" style=\"width: 150px; float: right\">\n\n**Starter code** has been provided that creates an array called `myNumbers`.\n\n* Use `console.log` and array indexes to write the contents of `myNumbers` to the screen in order, as shown to the right. Your commands should be of the form `console.log(myNumbers[index])`.\n\n",
        "CSPU5_U3 - Arrays - insertingItems_markdown_instruction": "# Inserting Items: Array Indexes\n\nIf you want to add elements in the middle of your array you can use `insertItem` to specify an **index** at which an item should be inserted.\n\n![](https://images.code.org/46815edd373b9fe51c4efcf145474ecc-image-1447252675635.37.24 AM.png)\n\nJust like `appendItem`, `insertItem` creates a new location in the array. However `insertItem` allows you to insert an item anywhere in the array, not just at the end, and it shifts all elements at or after its index one location over.\n\n# Do This:\n\n* **Read the documentation** for `insertItem`.\n* **Starter code** has been provided which appends some strings to an array, but right now they don't form a complete sentence.\n* Use `insertItem` to **individually insert strings to your array** to form a complete sentence.\n* Use `console.log` to confirm you succesfully created your sentence.\n\n![](https://images.code.org/a77efe777082d387f64c4761d890c560-image-1447254451590.06.59 AM.png)",
        "CSPU5_U3 - Arrays - insertingItems_2018_markdown_instruction": "# Inserting Items: Array Indexes\n\nIf you want to add elements in the middle of your array you can use `insertItem` to specify an **index** at which an item should be inserted.\n\n![](https://images.code.org/46815edd373b9fe51c4efcf145474ecc-image-1447252675635.37.24 AM.png)\n\nJust like `appendItem`, `insertItem` creates a new location in the array. However `insertItem` allows you to insert an item anywhere in the array, not just at the end, and it shifts all elements at or after its index one location over.\n\n# Do This:\n\n* **Read the documentation** for `insertItem`.\n* **Starter code** has been provided which appends some strings to an array, but right now they don't form a complete sentence.\n* Use `insertItem` to **individually insert strings to your array** to form a complete sentence.\n* Use `console.log` to confirm you succesfully created your sentence.\n\n![](https://images.code.org/a77efe777082d387f64c4761d890c560-image-1447254451590.06.59 AM.png)",
        "CSPU5_U3 - Arrays - insertionErrors_markdown_instruction": "# Out of Bounds\n\nIn many languages trying to access indexes of an array that don't exist will create an error. **JavaScript allows for some strange behavior** with arrays that it's useful to see, even though **you will likely never use this functionality**.\n\n**Warning:** some of this code will generate errors or work in unexpected ways. Don't spend a long time trying to understand weird results. The point to take from this is **referencing indexes that are out of bounds will almost never do what you intend**, and we'll be learning ways to avoid this as we move forward.\n\n# Do This:\n\n* **Starter code** has been provided which creates an array with three elements.\n* Uncomment the **first command that references indexes that are out of bounds** and run the code.\n* **Examine the output** and try to understand what is happening.\n* Reset and then **recomment** the line after you've used it. \n* **Repeat the process for all the lines.**\n\n**Note:** We have used a different style of comment in this program. `/* long block comment */` is used when you want to write a multiple-line comment. ",
        "CSPU5_U3 - Arrays - insertionErrors_2018_markdown_instruction": "# Out of Bounds\n\nIn many languages trying to access indexes of an array that don't exist will create an error. **JavaScript allows for some strange behavior** with arrays that it's useful to see, even though **you will likely never use this functionality**.\n\n**Warning:** some of this code will generate errors or work in unexpected ways. Don't spend a long time trying to understand weird results. The point to take from this is **referencing indexes that are out of bounds will almost never do what you intend**, and we'll be learning ways to avoid this as we move forward.\n\n# Do This:\n\n* **Starter code** has been provided which creates an array with three elements.\n* Uncomment the **first command that references indexes that are out of bounds** and run the code.\n* **Examine the output** and try to understand what is happening.\n* Reset and then **recomment** the line after you've used it. \n* **Repeat the process for all the lines.**\n\n**Note:** We have used a different style of comment in this program. `/* long block comment */` is used when you want to write a multiple-line comment. ",
        "CSPU5_U3 - Arrays - introIndex_markdown_instruction": "# Accessing Items in an Array\n\nAn array is comprised of many locations. You can individually set or reference the information at each location of your array just like a variable. To tell your locations apart each has a separate number, or **index**, that identifies it.\n\nArrays in JavaScript are **zero-indexed** which means the first index is 0. This is similar to binary number systems which begin counting at 0. For example an array of 10 items would have indexes 0-9. As a result **the last index is always one less than the length of the array**.\n\n**Accessing Array Items by Index:** If you know the index of the item you wish to access you can reference it using square brackets `list[index]` . The example below prints the value of the 4th element in the array.  \n\n![](https://images.code.org/8b2da597fccaeeafb30b04991074cd8b-image-1447365422277.56.45 PM.png)\n\n# Do This:\n\n**Starter code** has been provided which creates an array of the numbers 1 through 10\n\n* Use `console.log` to display the first item in your array.\n* Use `console.log` to display the last item  in your array.\n* Use `console.log` to display the number 5 from the array.",
        "CSPU5_U3 - Arrays - introIndex_2018_markdown_instruction": "# Accessing Items in an Array\n\nAn array is comprised of many locations. You can individually set or reference the information at each location of your array just like a variable. To tell your locations apart each has a separate number, or **index**, that identifies it.\n\nArrays in JavaScript are **zero-indexed** which means the first index is 0. This is similar to binary number systems which begin counting at 0. For example an array of 10 items would have indexes 0-9. As a result **the last index is always one less than the length of the array**.\n\n**Accessing Array Items by Index:** If you know the index of the item you wish to access you can reference it using square brackets `list[index]` . The example below prints the value of the 4th element in the array.  \n\n![](https://images.code.org/8b2da597fccaeeafb30b04991074cd8b-image-1447365422277.56.45 PM.png)\n\n# Do This:\n\n**Starter code** has been provided which creates an array of the numbers 1 through 10\n\n* Use `console.log` to display the first item in your array.\n* Use `console.log` to display the last item  in your array.\n* Use `console.log` to display the number 5 from the array.",
        "CSPU5_U3 - Arrays - length_markdown_instruction": "# *Array.length*\n\nAs we saw in the last exercise, there are many strange behaviors that can result from referencing array indexes that are less than 0 or greater than the highest index in your array. **If you want to avoid these kinds of errors then it is useful to know how long your array is,** especially since we've seen that arrays can grow and shrink during the course of our program.\n\n![](https://images.code.org/419a610bedaaf709d400c51a6399f482-image-1447263621427.40.15 AM.png)\n\nYou can always check the current length of your array using the command `list.length` where \"list\" is the name of your array. It evaluates to a number indicating how many items are in your array.\n\n# Do This:\n\n* **Starter code** has been provided which creates several long arrays.\n* **Use `list.length` and `console.log`** to determine how many items are in each array. An example of the output is below.\n\n<img src=\"https://images.code.org/f309b94e58f252599de709dd568441fd-image-1447690174179.08.29 AM.png\" style=\"width: 250px\">",
        "CSPU5_U3 - Arrays - lengthMinus1_markdown_instruction": "# Expressions as Indexes: *list.length - 1*\n\nWe have been accessing information in an array by using numbers, but we can actually use **any expression that evaluates to a number as an index in our array**. The first example of this we will explore is accessing the last item in our array.\n\nArrays are **zero-indexed**, which means that the first index is 0. Therefore an array with a length of 3 will have indexes 0, 1, and 2. Notice that **the last index is 1 less than the length**. This will always be the case, and so we can use this expression to access the last element in any array:\n\n![](https://images.code.org/4b9d62e451188ea00a58102110e447f6-image-1447267224677.28.31 PM.png)\n\n# Do This:\n\n* **Starter code** has been provided that which creates several arrays.\n* Use the syntax provided above and `console.log` to display the final item in each list.\n",
        "CSPU5_U3 - Arrays - lengthMinus1_2018_markdown_instruction": "# Expressions as Indexes: *list.length - 1*\n\nWe have been accessing information in an array by using numbers, but we can actually use **any expression that evaluates to a number as an index in our array**. The first example of this we will explore is accessing the last item in our array.\n\nArrays are **zero-indexed**, which means that the first index is 0. Therefore an array with a length of 3 will have indexes 0, 1, and 2. Notice that **the last index is 1 less than the length**. This will always be the case, and so we can use this expression to access the last element in any array:\n\n![](https://images.code.org/4b9d62e451188ea00a58102110e447f6-image-1447267224677.28.31 PM.png)\n\n# Do This:\n\n* **Starter code** has been provided that which creates several arrays.\n* Use the syntax provided above and `console.log` to display the final item in each list.\n",
        "CSPU5_U3 - Arrays - length_2018_markdown_instruction": "# *Array.length*\n\nAs we saw in the last exercise, there are many strange behaviors that can result from referencing array indexes that are less than 0 or greater than the highest index in your array. **If you want to avoid these kinds of errors then it is useful to know how long your array is,** especially since we've seen that arrays can grow and shrink during the course of our program.\n\n![](https://images.code.org/419a610bedaaf709d400c51a6399f482-image-1447263621427.40.15 AM.png)\n\nYou can always check the current length of your array using the command `list.length` where \"list\" is the name of your array. It evaluates to a number indicating how many items are in your array.\n\n# Do This:\n\n* **Starter code** has been provided which creates several long arrays.\n* **Use `list.length` and `console.log`** to determine how many items are in each array. An example of the output is below.\n\n<img src=\"https://images.code.org/f309b94e58f252599de709dd568441fd-image-1447690174179.08.29 AM.png\" style=\"width: 250px\">",
        "CSPU5_U3 - Arrays - remove_markdown_instruction": "# Removing Items\n\nSometimes we want to remove something from an array. In order to do so you'll need to specify the **index** of the item that should be removed.\n\n<img src=\"https://images.code.org/350e3dfe234b1ce1e47e11bc0629b47d-image-1447272428285.06.40 PM.png\" style=\"width: 250px\">\n\n**Note:** `removeItem` removes the location in the array at the index provided. As a result **the array is one location shorter and all the indexes after the index provided will have their index decreased by one**.\n\n# Do This:\n\n* **Read the documentation** for `removeItem`.\n* **Starter code** has been provided which creates an array of strings.\n* Use `removeItem` to **individually remove all the \"REMOVE\" strings in your array** to form a complete sentence. \n* Use `console.log` to confirm you succesfully created your sentence.\n\n**Note:** Keep an eye out; your indexes will shift as you remove items.\n\n![](https://images.code.org/5ba2247cafcfcb5d8be80db32126105e-image-1447273315312.21.17 PM.png)",
        "CSPU5_U3 - Arrays - remove_2018_markdown_instruction": "# Removing Items\n\nSometimes we want to remove something from an array. In order to do so you'll need to specify the **index** of the item that should be removed.\n\n<img src=\"https://images.code.org/350e3dfe234b1ce1e47e11bc0629b47d-image-1447272428285.06.40 PM.png\" style=\"width: 250px\">\n\n**Note:** `removeItem` removes the location in the array at the index provided. As a result **the array is one location shorter and all the indexes after the index provided will have their index decreased by one**.\n\n# Do This:\n\n* **Read the documentation** for `removeItem`.\n* **Starter code** has been provided which creates an array of strings.\n* Use `removeItem` to **individually remove all the \"REMOVE\" strings in your array** to form a complete sentence. \n* Use `console.log` to confirm you succesfully created your sentence.\n\n**Note:** Keep an eye out; your indexes will shift as you remove items.\n\n![](https://images.code.org/5ba2247cafcfcb5d8be80db32126105e-image-1447273315312.21.17 PM.png)",
        "CSPU5_U3 - Arrays - stringsInArrays_markdown_instruction": "# Arrays Can Hold Strings\n\nSo far we have been using arrays to hold numbers, but each location in an array could hold a string instead.\n\n![](https://images.code.org/5088def6c9aa8c114fc415bf25d83511-image-1447195709238.48.13 PM.png)\n\n**Note:** It is possible for an array to hold both strings and numbers, but **typically you will only want your arrays to hold one type of data**.\n\n# Do This:\n\n* Create an **empty array**.\n* Use `appendItem` to **individually add strings to your array**, forming a sentence of at least **5 words**.\n* Use `console.log` to confirm you succesfully created your sentence.\n\n![](https://images.code.org/72b8a2bf0a98be39fba73498cb6ed5da-image-1489697463827.png)",
        "CSPU5_U3 - Arrays - stringsInArrays_2018_markdown_instruction": "# Arrays Can Hold Strings\n\nSo far we have been using arrays to hold numbers, but each location in an array could hold a string instead.\n\n![](https://images.code.org/5088def6c9aa8c114fc415bf25d83511-image-1447195709238.48.13 PM.png)\n\n**Note:** It is possible for an array to hold both strings and numbers, but **typically you will only want your arrays to hold one type of data**.\n\n# Do This:\n\n* Create an **empty array**.\n* Use `appendItem` to **individually add strings to your array**, forming a sentence of at least **5 words**.\n* Use `console.log` to confirm you succesfully created your sentence.\n\n![](https://images.code.org/72b8a2bf0a98be39fba73498cb6ed5da-image-1489697463827.png)",
        "CSPU5_U3 - Canvas - appendToArray_markdown_instruction": "# Store Your Dots\n\nNow we're going to get into the core of the activity. We will be **creating a record of every dot your user draws**.\n\nTo do this, we will append *every* `event` parameter to an array as events are generated. When we store every mouse location in an array, we can make many interesting effects and redraw the image in different ways, by looping over the array. First let's just make sure we can capture them all.\n\n# Do This:\n\n* Create a new array outside the event handler function: `var eventList = []`.\n\n* In your event handler, before you call the `circle` command, use `appendItem` to add the `event` parameter to `eventList`.\n![](https://images.code.org/98f98c0895fafa87b8f6617e5b4629af-image-1448080702748.gif)\n\n* **Run the program** and draw some dots.\n\n* In the Debug Console type `console.log(eventList)` and inspect the contents. You should have a record of every event parameter used to draw a dot! (It might be a lot.)\n![](https://images.code.org/425bdde5f2d87b34c037b533600f19b4-image-1448080857409.gif)",
        "CSPU5_U3 - Canvas - appendToArray_2018_markdown_instruction": "# Store Your Dots\n\nNow we're going to get into the core of the activity. We will be **creating a record of every dot your user draws**.\n\nTo do this, we will append *every* `event` parameter to an array as events are generated. When we store every mouse location in an array, we can make many interesting effects and redraw the image in different ways, by looping over the array. First let's just make sure we can capture them all.\n\n# Do This:\n\n* Create a new array outside the event handler function: `var eventList = []`.\n\n* In your event handler, before you call the `circle` command, use `appendItem` to add the `event` parameter to `eventList`.\n![](https://images.code.org/98f98c0895fafa87b8f6617e5b4629af-image-1448080702748.gif)\n\n* **Run the program** and draw some dots.\n\n* In the Debug Console type `console.log(eventList)` and inspect the contents. You should have a record of every event parameter used to draw a dot! (It might be a lot.)\n![](https://images.code.org/425bdde5f2d87b34c037b533600f19b4-image-1448080857409.gif)",
        "CSPU5_U3 - Canvas - clickToAdd_markdown_instruction": "# Click to Add Dots\n\nLoops are one way of quickly adding dots to our canvas, but now we're going to change our app so that the user can decide when and how many dots to add. The canvas is a UI element, so **you can attach event handlers to it just like you would any other element**. We're going to move the circle command inside of a click event handler so that the user can click to add individual dots.\n\n![](https://images.code.org/ecd25d3ff2bb50f0555ebd012e5c3b88-image-1448078111902.gif)\n\n# Do This:\n\n* **Add an `onEvent` handler**; set its ID to your canvas ID.\n* **Move the `circle` command out of your `for` loop and into your new event handler**.\n* **Remove the `for` loop from your program.**\n* **Run your program** and confirm that a single dot is added everytime a user clicks your canvas.\n\n![](https://images.code.org/0064f8ac406a9f09dc742c81d8510f16-image-1448244621879.gif)",
        "CSPU5_U3 - Canvas - clickToAdd_2018_markdown_instruction": "# Click to Add Dots\n\nLoops are one way of quickly adding dots to our canvas, but now we're going to change our app so that the user can decide when and how many dots to add. The canvas is a UI element, so **you can attach event handlers to it just like you would any other element**. We're going to move the circle command inside of a click event handler so that the user can click to add individual dots.\n\n![](https://images.code.org/ecd25d3ff2bb50f0555ebd012e5c3b88-image-1448078111902.gif)\n\n# Do This:\n\n* **Add an `onEvent` handler**; set its ID to your canvas ID.\n* **Move the `circle` command out of your `for` loop and into your new event handler**.\n* **Remove the `for` loop from your program.**\n* **Run your program** and confirm that a single dot is added everytime a user clicks your canvas.\n\n![](https://images.code.org/0064f8ac406a9f09dc742c81d8510f16-image-1448244621879.gif)",
        "CSPU5_U3 - Canvas - delete_markdown_instruction": "# Delete Button\n\nWe are finally going to use those buttons! Each one will trigger an event handler that **processes the array `eventList` to create a visual effect** with the mouse data you have stored. **The first effect we are going to create is delete.**\n\nYou may want to provide your user with a way to start over with their drawing. In order to do this, you will need to *both* **clear the canvas** and **delete all items from `eventList`.**  The easiest way to delete everything from the list is to simply set the value of `eventList` to be a new empty list.\n\n# Do This:\n\n<img src=\"https://images.code.org/f8fca0d889ae9ddc3ac9b33ba27fadce-image-1448311933871.gif\" style=\"width: 200px; float: right\">\n\n* In Design Mode, set the styling and text of one button to indicate it's the \"delete\" or \"start over\" button. Give your button **a descriptive ID**.\n\n* **Add a click event handler** to your button.\n\n* Within the event handler call `clearCanvas`.\n\n* Set `eventList` to the empty array (i.e., `eventList = []`).\n\n**Test your program** to make sure that starting over works the way it should.  \n",
        "CSPU5_U3 - Canvas - delete_2018_markdown_instruction": "# Delete Button\n\nWe are finally going to use those buttons! Each one will trigger an event handler that **processes the array `eventList` to create a visual effect** with the mouse data you have stored. **The first effect we are going to create is delete.**\n\nYou may want to provide your user with a way to start over with their drawing. In order to do this, you will need to *both* **clear the canvas** and **delete all items from `eventList`.**  The easiest way to delete everything from the list is to simply set the value of `eventList` to be a new empty list.\n\n# Do This:\n\n<img src=\"https://images.code.org/f8fca0d889ae9ddc3ac9b33ba27fadce-image-1448311933871.gif\" style=\"width: 200px; float: right\">\n\n* In Design Mode, set the styling and text of one button to indicate it's the \"delete\" or \"start over\" button. Give your button **a descriptive ID**.\n\n* **Add a click event handler** to your button.\n\n* Within the event handler call `clearCanvas`.\n\n* Set `eventList` to the empty array (i.e., `eventList = []`).\n\n**Test your program** to make sure that starting over works the way it should.  \n",
        "CSPU5_U3 - Canvas - draw at click point_markdown_instruction": "# Drawing Dots at Click\n\nCurrently the user can click to add dots, but they're drawn at random locations around the canvas. We're going to use information stored in the `event` parameter of the event handler function **to place dots wherever the user clicks the mouse on the canvas**.\n\nThe event parameter has two critical pieces of information we'll want, which are `event.offsetX` and `event.offsetY`. These hold **the location (relative to the top left corner of the canvas) that was clicked**. \n\n# Do This:\n\n<img src=\"https://images.code.org/1c6109cfc1b02c3ba737519d3f01d1b4-image-1448301532145.gif\" style=\"width: 200px; float: right\">\n\n* **Remove (or comment out) the `console.log` statement**.\n* Replace the `x` and `y` parameters of the `circle` command with `event.offsetX` and `event.offsetY`.\n* **Run your program** to confirm that dots are being drawn anywhere the user clicks the mouse.",
        "CSPU5_U3 - Canvas - draw at click point_2018_markdown_instruction": "# Drawing Dots at Click\n\nCurrently the user can click to add dots, but they're drawn at random locations around the canvas. We're going to use information stored in the `event` parameter of the event handler function **to place dots wherever the user clicks the mouse on the canvas**.\n\nThe event parameter has two critical pieces of information we'll want, which are `event.offsetX` and `event.offsetY`. These hold **the location (relative to the top left corner of the canvas) that was clicked**. \n\n# Do This:\n\n<img src=\"https://images.code.org/1c6109cfc1b02c3ba737519d3f01d1b4-image-1448301532145.gif\" style=\"width: 200px; float: right\">\n\n* **Remove (or comment out) the `console.log` statement**.\n* Replace the `x` and `y` parameters of the `circle` command with `event.offsetX` and `event.offsetY`.\n* **Run your program** to confirm that dots are being drawn anywhere the user clicks the mouse.",
        "CSPU5_U3 - Canvas - freePlay_markdown_instruction": "# Create Your Own Effect!\n\nYou've just seen several ways that we can process our array `eventList` in order to create different effects. Now it's time to make your own! **Extend the functionality of one of the effects you just created, or create an entirely new one**. What else could you do with the information you've stored in your array? How else might you combine the programming tools you've developed?\n\n# Do This:\n\n* **Extend the functionality of one of the effects, or create an entirely new one of your own!**",
        "CSPU5_U3 - Canvas - freePlay_2018_markdown_instruction": "# Create Your Own Effect!\n\nYou've just seen several ways that we can process our array `eventList` in order to create different effects. Now it's time to make your own! **Extend the functionality of one of the effects you just created, or create an entirely new one**. What else could you do with the information you've stored in your array? How else might you combine the programming tools you've developed?\n\n# Do This:\n\n* **Extend the functionality of one of the effects, or create an entirely new one of your own!**",
        "CSPU5_U3 - Canvas - movementFunction fix Orig_markdown_instruction": "# Fix the \"Original\" Button\n\nOur \"Original\" button is now slightly broken because the effect it renders doesn't match our new free-form drawing which takes the movement of the mouse into account - it just draws fixed-size circles.\n\nLet's fix the \"Original\" button.\n\n# Do This:\n\nIn the event handler function for the \"Original\" button:\n\n* Change the value used for the radius from a fixed value to the same thing calculated for the free-form drawing. Since you wrote a function to do this calculation, it should be easy to call it from this code as well!\n* The **slight difference will be that you will be looping over the array of events.**  So the line of code that draws the circle might look like the one below. This line of code is certainly a mouthful, but it's basically the same as the line of code in your `mousemove` event handler; **it just references the event in the list instead.** <br><img src=\"https://images.code.org/dbb4cd9b98eba70aa2919a93544c1e03-image-1448314845862.40.21 PM.png\" style=\"width: 600px\">\n* **Test your program** to confirm that clicking the \"Original\" button creates the same effect that occurs when doing free-form drawing.\n\n![](https://images.code.org/4fcf033e87dc407d337941a7adc4766b-image-1448394246410.gif)",
        "CSPU5_U3 - Canvas - movementFunction fix Orig_2018_markdown_instruction": "# Fix the \"Original\" Button\n\nOur \"Original\" button is now slightly broken because the effect it renders doesn't match our new free-form drawing which takes the movement of the mouse into account - it just draws fixed-size cricles.\n\nLet's fix the \"Original\" button.\n\n# Do This:\n\nIn the event handler function for the \"Original\" button:\n\n* Change the value used for the radius from a fixed value to the same thing calculated for the free-form drawing. Since you wrote a function to do this calculation, it should be easy to call it from this code as well!\n* The **slight difference will be that you will be looping over the array of events.**  So the line of code that draws the circle might look like the one below. This line of code is certainly a mouthful, but it's basically the same as the line of code in your `mousemove` event handler; **it just references the event in the list instead.** <br><img src=\"https://images.code.org/dbb4cd9b98eba70aa2919a93544c1e03-image-1448314845862.40.21 PM.png\" style=\"width: 600px\">\n* **Test your program** to confirm that clicking the \"Original\" button creates the same effect that occurs when doing free-form drawing.\n\n![](https://images.code.org/4fcf033e87dc407d337941a7adc4766b-image-1448394246410.gif)",
        "CSPU5_U3 - Canvas - redrawRandom_markdown_instruction": "# Redraw Random - Part 1\n\nThe next effect we are going to create is **\"random.\"** We will be redrawing the image but with randomly sized dots.\n\nWe'll be doing this in two steps. For now, all you need to do is **change the first button in the row to have the proper styling and attach a click event handler to it**. **In addition, clear the canvas from inside the event handler** so we are ready to redraw our new image.  We don't want to delete all the items from the array though, as we will use them to redraw. Once you've done that, move on to the next exercise where we'll write the actual code in our event handler.\n\n# Do This:\n\n<img src=\"https://images.code.org/0116a787b989df18b077cb4657a5d379-image-1448312365660.58.05 PM.png\" style=\"width: 200px; float: right\">\n\n* In Design Mode, **pick a button to use for Random. Set the styling and text of the button**. The image below shows one possible option, but you can style it however you like.\n\n* Give your button **a descriptive ID**.\n\n* **Add a click event handler** to your button.\n\n* **Call `clearCanvas`** from inside the event handler so the canvas is ready for the redraw.",
        "CSPU5_U3 - Canvas - redrawRandom2_markdown_instruction": "# Redraw Random - Part 2\n\nNow we're ready to write the code for our \"Random\" effect. To do this, we will be clearing the canvas and then processing the array `eventList` to redraw all the dots with a random radius. \n\nYou already set up the clear canvas, so next we'll need to process our array in order to find out the event information for each dot. You'll need to create a `for` loop that iterates through every index in `eventList` (recall the `length` command). Within your loop, you will be drawing dots referencing items stored in the array. \n\nAs you write this code, remember that **you can treat an individual element of an array exactly like the kind of data it stores**. Inside a `for` loop, the event at index `i` can be accessed with the notation `eventList[i]` and the `offsetX` of that event can be accessed with `eventList[i].offsetX`. Again, you are essentially treating the array element as if it were the data it contains.\n\n![](https://images.code.org/8ce01658ab31ce5f05101e58e3413681-image-1448250618520.gif)\n\n# Do This:\n\n<img src=\"https://images.code.org/6e081911348f3c1b07d17f83bd402249-image-1448312722857.gif\" style=\"width: 200px; float: right\">\n\n(**NOTE:** Everything listed below is shown in code animation above.)\n\n**Inside the \"Random\" button event handler...**\n* **Add a `for` loop** that runs `i` from 0 up to `eventList.length` to process over the array.\n* **Add a `circle`** command inside your loop.\n* **Set the x and y parameters** of the `circle` to `eventList[i].offsetX` and `eventList[i].offsetY`, respectively.\n* **Set the `radius` parameter** to some `randomNumber`. Pick any range you like. You can always change it later.\n* **Test your program** by drawing a figure and then hitting your \"Randomize\" button. It should be the same drawing, but now with randomly sized dots!",
        "CSPU5_U3 - Canvas - redrawRandom2_2018_markdown_instruction": "# Redraw Random - Part 2\n\nNow we're ready to write the code for our \"Random\" effect. To do this, we will be clearing the canvas and then processing the array `eventList` to redraw all the dots with a random radius. \n\nYou already set up the clear canvas, so next we'll need to process our array in order to find out the event information for each dot. You'll need to create a `for` loop that iterates through every index in `eventList` (recall the `length` command). Within your loop, you will be drawing dots referencing items stored in the array. \n\nAs you write this code, remember that **you can treat an individual element of an array exactly like the kind of data it stores**. Inside a `for` loop, the event at index `i` can be accessed with the notation `eventList[i]` and the `offsetX` of that event can be accessed with `eventList[i].offsetX`. Again, you are essentially treating the array element as if it were the data it contains.\n\n![](https://images.code.org/8ce01658ab31ce5f05101e58e3413681-image-1448250618520.gif)\n\n# Do This:\n\n<img src=\"https://images.code.org/6e081911348f3c1b07d17f83bd402249-image-1448312722857.gif\" style=\"width: 200px; float: right\">\n\n(**NOTE:** Everything listed below is shown in code animation above.)\n\n**Inside the \"Random\" button event handler...**\n* **Add a `for` loop** that runs `i` from 0 up to `eventList.length` to process over the array.\n* **Add a `circle`** command inside your loop.\n* **Set the x and y parameters** of the `circle` to `eventList[i].offsetX` and `eventList[i].offsetY`, respectively.\n* **Set the `radius` parameter** to some `randomNumber`. Pick any range you like. You can always change it later.\n* **Test your program** by drawing a figure and then hitting your \"Randomize\" button. It should be the same drawing, but now with randomly sized dots!",
        "CSPU5_U3 - Canvas - redrawRandom_2018_markdown_instruction": "# Redraw Random - Part 1\n\nThe next effect we are going to create is **\"random.\"** We will be redrawing the image but with randomly sized dots.\n\nWe'll be doing this in two steps. For now, all you need to do is **change the first button in the row to have the proper styling and attach a click event handler to it**. **In addition, clear the canvas from inside the event handler** so we are ready to redraw our new image.  We don't want to delete all the items from the array though, as we will use them to redraw. Once you've done that, move on to the next exercise where we'll write the actual code in our event handler.\n\n# Do This:\n\n<img src=\"https://images.code.org/0116a787b989df18b077cb4657a5d379-image-1448312365660.58.05 PM.png\" style=\"width: 200px; float: right\">\n\n* In Design Mode, **pick a button to use for Random. Set the styling and text of the button**. The image below shows one possible option, but you can style it however you like.\n\n* Give your button **a descriptive ID**.\n\n* **Add a click event handler** to your button.\n\n* **Call `clearCanvas`** from inside the event handler so the canvas is ready for the redraw.",
        "CSPU5_U3 - Canvas - shiftKey_markdown_instruction": "# Draw When a Key is Pressed\n\nThis app now lets the user draw, but they have no control of whether the pen is up or down. Let's give the user the ability to **choose when to put down the pen**. We won't even need to add a new event handler to our app! \n\nYou may have noticed that the **`event` parameter includes information about whether certain keys were pressed when the event fired**. They are stored in variables with names like `shiftKey` or `altKey` and are stored as boolean values (true / false). We are going to use the `shiftKey` variable to decide when we should draw circles. \n\n# Do This:\n<img src=\"https://images.code.org/1a4b8f12645e5e88dee96d5542933c84-image-1448248202626.gif\" style=\"float:right\">\n\n* **Add an `if` statement inside your event handler function** where the condition is based on the value stored in `event.shiftKey`: **If `shiftKey` is true, then draw the circle.** <img src=\"https://images.code.org/a542766e8e52fed5ca992f2434ace086-image-1448307484936.37.32 PM.png\" width=\"200\">\n\n* You might want to **decrease the radius of your circle** (for example to 5).\n\n* **Run the program and confirm that dots are only drawn when the shift key is pressed.**\n\t* The effect should be that the user can pick up and put down the pen to draw.\n\t* Hold the shift key down and move the mouse to draw.\n\t* Release the shift key to stop drawing.\n\n(**NOTE:** If you wish, use `console.log` to display the values in `event` again. You'll see `event.shiftKey` is one of the values stored.)\n",
        "CSPU5_U3 - Canvas - shiftKey_2018_markdown_instruction": "# Draw When a Key is Pressed\n\nThis app now lets the user draw, but they have no control of whether the pen is up or down. Let's give the user the ability to **choose when to put down the pen**. We won't even need to add a new event handler to our app! \n\nYou may have noticed that the **`event` parameter includes information about whether certain keys were pressed when the event fired**. They are stored in variables with names like `shiftKey` or `altKey` and are stored as boolean values (true / false). We are going to use the `shiftKey` variable to decide when we should draw circles. \n\n# Do This:\n<img src=\"https://images.code.org/1a4b8f12645e5e88dee96d5542933c84-image-1448248202626.gif\" style=\"float:right\">\n\n* **Add an `if` statement inside your event handler function** where the condition is based on the value stored in `event.shiftKey`: **If `shiftKey` is true, then draw the circle.** <img src=\"https://images.code.org/a542766e8e52fed5ca992f2434ace086-image-1448307484936.37.32 PM.png\" width=\"200\">\n\n* You might want to **decrease the radius of your circle** (for example to 5).\n\n* **Run the program and confirm that dots are only drawn when the shift key is pressed.**\n\t* The effect should be that the user can pick up and put down the pen to draw.\n\t* Hold the shift key down and move the mouse to draw.\n\t* Release the shift key to stop drawing.\n\n(**NOTE:** If you wish, use `console.log` to display the values in `event` again. You'll see `event.shiftKey` is one of the values stored.)\n",
        "CSPU5_U3 - Canvas - usingOffsetXY_markdown_instruction": "# The Event Parameter for Mouse Events\n\nWe'd like to change the app so that when the user clicks on the canvas we draw a circle right where they clicked. To do that, we need to learn more about the **parameter passed by our event handler function, which by default is called `event`**.\n\nRecall that when we wanted to know what key the user pressed on a `keyPress` event, we checked the value stored in `event.key`. **The event parameter actually stores a great deal more information about each event**. \n\nWhen using the mouse, the event parameter carries information like the location of the mouse, how fast it's moving, and some other things as well. \n\nLet's get acquainted with the event parameter and what we can find out about the mouse.\n\n# Do This:\n\n* Add a `console.log` command inside the function of your event handler. Use it to display the `event` parameter.\n* Run your program and click your canvas. **The full contents of the `event` parameter should be displayed in the console**. \n* **Which values do you think hold the x and y coordinates**?  What else is there?\n* We won't use all of these, but it's interesting to see just how much is available.\n* Once you have experimented a little, move to the next level.\n![](https://images.code.org/a6875e27019cb938a9576f0485648ca9-image-1448041792987.49.30 AM.png)\n",
        "CSPU5_U3 - Canvas - usingOffsetXY_2018_markdown_instruction": "# The Event Parameter for Mouse Events\n\nWe'd like to change the app so that when the user clicks on the canvas we draw a circle right where they clicked. To do that, we need to learn more about the **parameter passed by our event handler function, which by default is called `event`**.\n\nRecall that when we wanted to know what key the user pressed on a `keyPress` event, we checked the value stored in `event.key`. **The event parameter actually stores a great deal more information about each event**. \n\nWhen using the mouse, the event parameter carries information like the location of the mouse, how fast it's moving, and some other things as well. \n\nLet's get acquainted with the event parameter and what we can find out about the mouse.\n\n# Do This:\n\n* Add a `console.log` command inside the function of your event handler. Use it to display the `event` parameter.\n* Run your program and click your canvas. **The full contents of the `event` parameter should be displayed in the console**. \n* **Which values do you think hold the x and y coordinates**?  What else is there?\n* We won't use all of these, but it's interesting to see just how much is available.\n* Once you have experimented a little, move to the next level.\n![](https://images.code.org/a6875e27019cb938a9576f0485648ca9-image-1448041792987.49.30 AM.png)\n",
        "CSPU5_U3 - Conditional Basics - 6_markdown_instruction": "# What happens after an *if* ?\n\nYou may have noticed that our flowchart for our game so far only does something if the condition is true. What happens after the `if` statement? Let's find out.\n\n<img src=\"https://images.code.org/90b7a527091704a6ab4612b9f84db305-image-1446234882661.png\" style=\"width: 200px\">\n\n# Do This:\n\n* **Add a `setText` after the `if` statement** to \"Nope. Guess again.\"\n\n<img src=\"https://images.code.org/f5c5de1b77a9caf16027e65ed24f91ec-image-1446234785600.gif\" style=\"width: 450px\">\n\n* **Run the program** a couple times to **look for a bug**. We will fix this on the next level.",
        "CSPU5_U3 - Conditionals - Combine AND OR Simple_markdown_instruction": "# Combining AND and OR\n\nYou can express more complex conditions by combining **AND** and **OR** in one statement.  Here is the example from the previous page which you can use as a reference. This statement will evaluate to **true** if the day is Tuesday or Thursday AND their age is 15 or 16.\n\n![](https://images.code.org/3f3aba7828abd88fdbd90eda60611bd3-image-1448062956405.06.36.png)\n\n#  Do This:\nWe've provided you with starting code that prompts the user to enter a **day** and their **age** and stores the result in variables.\n\n**Add an `if` statement that uses both AND and OR operators**\n\n  * The app should write \"Sleep in!\" if it's a weekend and the user is a teenager.\n  * Otherwise it should write \"Uh oh. Have to wake up.\"\n \n\nTry it out!\n",
        "CSPU5_U3 - Conditionals - Combine AND OR Simple_2018_markdown_instruction": "# Combining AND and OR\n\nYou can express more complex conditions by combining **AND** and **OR** in one statement.  Here is the example from the previous page which you can use as a reference. This statement will evaluate to **true** if the day is Tuesday or Thursday AND their age is 15 or 16.\n\n![](https://images.code.org/3f3aba7828abd88fdbd90eda60611bd3-image-1448062956405.06.36.png)\n\n#  Do This:\nWe've provided you with starting code that prompts the user to enter a **day** and their **age** and stores the result in variables.\n\n**Add an `if` statement that uses both AND and OR operators**\n\n  * The app should write \"Sleep in!\" if it's a weekend and the user is a teenager.\n  * Otherwise it should write \"Uh oh. Have to wake up.\"\n \n\nTry it out!\n",
        "CSPU5_U3 - Conditionals - Simple AND_markdown_instruction": "# AND Operator\n\n<img src=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24 PM.png\" style=\"width: 100px; float: right\">\n\nAgain you will see the JavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You can drag them out or simply type them.\n\nLet's now try out using an **AND** operator. As a reminder: **if both statements are true** then AND evaluates to **true**.  **If either (or both) are false** the AND operator will evaluate to **false**.\n\n<img src=\"https://images.code.org/4a461db916ded2acccfcdb9a75ef8838-image-1446483668310.png\" style=\"width: 250px; float: right\">\n\n# Do This:\nWe've provided you with starting code that prompts the user to enter their **age** and stores it in a variable.\n\n**Add an `if` statement with a Boolean expression that uses an AND operator (`&&`)** to express:\n\n  * IF *the age is between 13 and 19* write \"You are a teenager.\"\n  * ELSE write \"You are not a teenager.\"\n",
        "CSPU5_U3 - Conditionals - Simple AND_2018_markdown_instruction": "# AND Operator\n\n<img src=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24 PM.png\" style=\"width: 100px; float: right\">\n\nAgain you will see the JavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You can drag them out or simply type them.\n\nLet's now try out using an **AND** operator. As a reminder: **if both statements are true** then AND evaluates to **true**.  **If either (or both) are false** the AND operator will evaluate to **false**.\n\n<img src=\"https://images.code.org/4a461db916ded2acccfcdb9a75ef8838-image-1446483668310.png\" style=\"width: 250px; float: right\">\n\n# Do This:\nWe've provided you with starting code that prompts the user to enter their **age** and stores it in a variable.\n\n**Add an `if` statement with a Boolean expression that uses an AND operator (`&&`)** to express:\n\n  * IF *the age is between 13 and 19* write \"You are a teenager.\"\n  * ELSE write \"You are not a teenager.\"\n",
        "CSPU5_U3 - Design Mode - Multi Screens 2_markdown_instruction": "# Switching Screens\n\nIn the last level you made two screens, a black one and a white one. However when you ran the app you probably noticed that you had no way to see the second screen. Let's fix that.\n\nIn order to switch between screens we have added a new command: `setScreen`. Read the documentation to figure out how this command works.\n\n<img src=\"https://images.code.org/152f45b312da467f0b553efc9fba20a7-image-1444354703453.gif\" style=\"width: 250px; float: right\">\n\n**Goal:** Make a 2 screen app which can switch back and forth between a black screen and a white screen using buttons.\n\n# Do This:\n\n* **Put a button on each screen**.  \n\n* **Set up event handlers** for each of your buttons. \n\n* **Use the `setScreen` block to switch screens** when the buttons are clicked.\n\n* Test out your app to make sure you can switch back and forth between the two screens.",
        "CSPU5_U3 - Design Mode - Multi Screens_markdown_instruction": "# Second Screen\n\nUp until now our apps have only been able to have one view. With Design Mode we can now make multiple screens and switch between them!\n\n**Goal:** Make a 2 screen app with a black screen and a white screen. \n\n<img src=\"https://images.code.org/e35a6f494cf6f0c57c66a1aef651cdb0-image-1444353622241.gif\" style=\"width: 250px; float: right\">\n\n# Do This:\n\nSwitch to Design Mode and **add a second screen**. There are two ways to add a second screen: \n\n* Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39 PM.png\" style=\"width: 50px\"> from the Design Toolbox. Check out the screen dropdown menu at the top right of the app window. You should now have two screens!  <img src=\"https://images.code.org/b48d978335701888b744702f25f11b28-image-1444353746012.17.07 PM.png\" style=\"width: 75px\"> \n* From the screen dropdown menu at the top right of the app window click *New Screen*. \n\nMake screen1 white and screen2 black. **Set the background color for a screen in the Properties tab**.  Make sure to rename the screens with appropriate IDs.",
        "CSPU5_U3 - Design Mode -Recreate Beyond Buttons_markdown_instruction": "# Improved Chaser Game\n\nNow lets improve the \"Chaser Game\".  This is where you get to use your creativity. Make it look nice!\n\nIn addition you will notice a new command in the toolbox: `playsound`! Read the documentation about how to add sounds.\n\n**Note:** Your code from before has been provided for you.\n\n# Do This:\n\n* **Create a Welcome Screen** that explains the rules of the game. Include a \"Start Game\" button.\n\n* Update the your code so that the **image jumps to a new location when it is clicked**. \n\n* **Play a sound** each time the image is clicked.\n\n* **Add a Game Over Screen** with a lose message and button to start over. The Start Over Button should direct back to the Welcome Screen.\n\n* **Make the user lose**, by sending them to the Game Over Screen, when the background is clicked.\n\n\n",
        "CSPU5_U3 - High Low - Debug_markdown_instruction": "# Debug Conditionals\n\n\"Help! I was trying to give the player a hint when their guess was within 2 of the secret number but the code I wrote isn't working. **Can you fix it?**\"\n\nThis picture shows what the message should be based on the difference between the secret number and the player's guess:\n\n![](https://images.code.org/8b6e60db87e3c704ae5209c8c608f5d5-image-1481691055804.png)\n\n* Run the code to identify when the program is not working correctly (try guessing numbers 1-6)\n* Fix the problem with the order of the conditionals.\n\n**Hint:** \n* The major problem here is that **conditional statements run in order from top to bottom**. \n* Remember you have to check the smallest/most narrow case first, and work up from there.\n* The conditions might be slightly non-intuitive at first glance.\n* If you want to re-arrange the conditions it might be easier if you **switch to text mode**\n\n<details><summary>Check out the flow chart for the logic I wanted. [Click to Expand]</summary>\n\n<a href=\"https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png\" target=\"_blank\">\n<img src=\"https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png\" style=\"width: 350px;\">\nClick image to open larger in a new tab</a>\n</details>\n\n",
        "CSPU5_U3 - High Low - Debug_2018_markdown_instruction": "# Debug Conditionals\n\n\"Help! I was trying to give the player a hint when their guess was within 2 of the secret number but the code I wrote isn't working. **Can you fix it?**\"\n\nThis picture shows what the message should be based on the difference between the secret number and the player's guess:\n\n![](https://images.code.org/8b6e60db87e3c704ae5209c8c608f5d5-image-1481691055804.png)\n\n* Run the code to identify when the program is not working correctly (try guessing numbers 1-6)\n* Fix the problem with the order of the conditionals.\n\n**Hint:** \n* The major problem here is that **conditional statements run in order from top to bottom**. \n* Remember you have to check the smallest/most narrow case first, and work up from there.\n* The conditions might be slightly non-intuitive at first glance.\n* If you want to re-arrange the conditions it might be easier if you **switch to text mode**\n\n<details><summary>Check out the flow chart for the logic I wanted. [Click to Expand]</summary>\n\n<a href=\"https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png\" target=\"_blank\">\n<img src=\"https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png\" style=\"width: 350px;\">\nClick image to open larger in a new tab</a>\n</details>\n\n",
        "CSPU5_U3 - High Low - Dropdown_markdown_instruction": "# Dropdown\n\nOn the last level we used `promptNum` to get the user's guess. However, we had no way to limit them to the numbers we wanted. They could have typed 11 even though we told them not to. A better way to get input with a limited set of options is the dropdown. The <img src=\"https://images.code.org/3b21b4288a2a155d1e9a3c2cf3a5b09b-image-1446229368079.28.23 PM.png\" style=\"width: 75px\"> is in your Design Mode Toolbox. You can control the list of options users can choose and then use `getText` to get the chosen number.\n\nWe are going to need an event handler in order to do this. The event handler will detect when the user has changed the value of the dropdown. \n\n# Do This:\n\n* **Add a dropdown** for their guess instead of `promptNum`. Make sure to give it a good ID.\n\n<img src=\"https://images.code.org/fea164f6e53d1ce0c50981565e066d4c-image-1446229598357.gif\" style=\"width: 350px\">\n\n* Under properties **find the Options** and change it to the **numbers 1 to 10**\n\n<img src=\"https://images.code.org/0cfecbcdcfb95fc30876155ec6a3a021-image-1446229593687.gif\" style=\"width: 250px\">\n\n* Add an event handler to detect the `change` event on your dropdown.<br><br>\n<img src=\"https://images.code.org/48cffda5b7ff3a446116a39b4dbcbe8c-image-1446232308751.gif\" style=\"width: 150px; float: right\">\n* Move your `if` statement inside the event handler so it will check each time the dropdown is changed.<br><br>\n* When the dropdown is changed **use `getText` to find out the user's guess**. Save the guess using a variable. **Don't forget about scope!**<br><br>\n* Test your app -- it should work like the demo.",
        "CSPU5_U3 - High Low - Else if_markdown_instruction": "# Guess the Secret Number with *else-if*\n\nIn this guess-the-number game, the starting code tells the user whether they were right or wrong.  Let's help the user out even more by telling them if they guessed correctly or if their guess was too high or too low. \n\nThere are **only 3 possible cases:**\n\n* They were right.\n* Their guess was higher than the number.\n* Their guess was lower than the number.\n\nUse a conditional with and `if`, `else-if`, and a final `else` to implement this.\n\n**Remember:**  You can create an `else-if` statement by hitting the <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12 PM.png\" style=\"width: 40px\"> at the bottom of an `if` statement. The first <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12 PM.png\" style=\"width: 40px\"> will add an `else`, the second will add an `else-if`.\n\n\n# Do This:\n\n* **Add an `else-if` statement to accommodate the 3 conditions.**\n\n* **Update the conditions** using `<`, `>`, and `==` to tell the user if their guess was correct, high, or low.\n\n* **Test out the program** to make sure your updates worked.\n\n<details><summary>Visual Explanation [Click to expand]</summary>\n<li>Sometimes it's helpful to see how the program should flow with a flow chart.  The flow chart below depicts what should happen </li>\n\n<img src=\"https://images.code.org/f7e483414dfe1d4585841e653e44d8b0-image-1446169181724.png\" style=\"width: 500px\">\n</details>",
        "CSPU5_U3 - High Low - Else if_2018_markdown_instruction": "# Guess the Secret Number with *else-if*\n\nIn this guess-the-number game, the starting code tells the user whether they were right or wrong.  Let's help the user out even more by telling them if they guessed correctly or if their guess was too high or too low. \n\nThere are **only 3 possible cases:**\n\n* They were right.\n* Their guess was higher than the number.\n* Their guess was lower than the number.\n\nUse a conditional with and `if`, `else-if`, and a final `else` to implement this.\n\n**Remember:**  You can create an `else-if` statement by hitting the <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12 PM.png\" style=\"width: 40px\"> at the bottom of an `if` statement. The first <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12 PM.png\" style=\"width: 40px\"> will add an `else`, the second will add an `else-if`.\n\n\n# Do This:\n\n* **Add an `else-if` statement to accommodate the 3 conditions.**\n\n* **Update the conditions** using `<`, `>`, and `==` to tell the user if their guess was correct, high, or low.\n\n* **Test out the program** to make sure your updates worked.\n\n<details><summary>Visual Explanation [Click to expand]</summary>\n<li>Sometimes it's helpful to see how the program should flow with a flow chart.  The flow chart below depicts what should happen </li>\n\n<img src=\"https://images.code.org/f7e483414dfe1d4585841e653e44d8b0-image-1446169181724.png\" style=\"width: 500px\">\n</details>",
        "CSPU5_U3 - High Low - Else_markdown_instruction": "# *else*\n\n<img src=\"https://images.code.org/b7942d778a54465ad6f9f19fbab8d1ef-image-1446237289306.34.23 PM.png\" style=\"width: 150px; float: right\">\n\nLet's add an `else` statement so we can tell the user when they are right and when they are wrong.\n\n**Note:**  You can create an `else` statement by hitting the <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12 PM.png\" style=\"width: 40px\"> at the bottom of an `if` statement.  There is also an `if-else` block in the toolbox. \n\n\n# Do This:\n\n* **Add an `else` statement**\n\n* **Move your `setText` inside the `else` statement.** So it should say \"Nope that's not it. Guess again.\" when the user does not guess the secret number.",
        "CSPU5_U3 - High Low - If_markdown_instruction": "# *if* Statement\n\n<img src=\"https://images.code.org/040c8364e3795252194b816623e949e5-image-1446227663554.54.03 PM.png\" style=\"width: 100px; float: right\">\n\nThe boolean expression we tested on the last level allows us to make decisions. In order to make these decisions we need to use something called a conditional. **Conditionals check if a boolean expression is true and then will execute the code inside of the `if` statement.** \n\n<img src=\"https://images.code.org/84123a7c317c63d8876b6b56086d717e-image-1446228290588.png\" style=\"width: 150px; float: right\">\n\nOver the number couple levels we are going to be creating a **Guess My Number game**. The starter code uses `promptNum` to ask the user for a number from 1 to 10. The `if` statement checks if the user guess is equal to the secret number.  Right now nothing happens when they guess the right number. Can you fix that?\n\n# Do This:\n\n* Read the code to identify the boolean expression.\n* Add a text label to the screen. Have it start out with \"Guess my secret number!\"\n* **Set the text label to say \"You got it right!\" from inside the `if` statement**. This will tell them they get it right only when that condition is true!\n* **Test your code out** to make sure it works.\n\n<img src=\"https://images.code.org/2f3487ec7a8d7cec1605f3da830c83f8-image-1446227512726.gif\" style=\"width: 350px\">",
        "CSPU5_U3 - Keys - Demo App_markdown_instruction": "# Making our App an Image Scroller\n\nOver the course of this lesson we are going to be working towards improving our \"My Favorite Things\" app to add some new features. Our improved app will be able to:\n\n* Respond to **key events**.\n* **Display images** by storing their URLs.\n\nWe'll call this new kind of app an **image scroller** but feel free to call it anything you like.\n\n# Do This:\n\n* Close these instructions.\n* **Experiment with the improved \"My Favorite Things\" app** to understand the new features we'll be adding.  \n* Make sure you try clicking the **left and right arrow keys!**\n\nOnce you think you've experimented enough, continue on to the next level.",
        "CSPU5_U3 - Keys - Demo App_2018_markdown_instruction": "# Making our App an Image Scroller\n\nOver the course of this lesson we are going to be working towards improving our \"My Favorite Things\" app to add some new features. Our improved app will be able to:\n\n* Respond to **key events**.\n* **Display images** by storing their URLs.\n\nWe'll call this new kind of app an **image scroller** but feel free to call it anything you like.\n\n# Do This:\n\n* Close these instructions.\n* **Experiment with the improved \"My Favorite Things\" app** to understand the new features we'll be adding.  \n* Make sure you try clicking the **left and right arrow keys!**\n\nOnce you think you've experimented enough, continue on to the next level.",
        "CSPU5_U3 - Keys - Final Image Scroller_markdown_instruction": "# Final Image Scroller\n\nYou're now ready to add key event functionality to your app! As you are doing so, keep an eye out for places where you need to **refactor** old code in order to prevent redundancy. **Create functions** that carry out repeated tasks and make other changes to keep your code **readable and consistent**. \n\nIf you want a reminder of how key events work, you can always go back to the example from earlier in this lesson.  You will need to add `if` statements to check for which keys were pressed, just as before.\n\n# Do This:\n\n* Add the ability to respond to **key events** to your app.\n\n* **Refactor your old code** to remove redundant portions.\n\n* Keeping adding to your program. What other features do you want to include?",
        "CSPU5_U3 - Keys - Functions_markdown_instruction": "# Refactoring Code\n\nOn the last level, we copied a few lines of code to a different part of our program. **Hopefully warning bells went off in your head!** Any time you are copying portions of code from one area of your program to another, it's a good indication that you should write a function to capture that behavior in one place. \n\nWhen you add new features to your code **you will often create redundancies**. To keep your code readable and consistent, you may need to rewrite old pieces of code. This process of restructuring existing code without changing its external behavior is called **refactoring**. It is an important process when developing software that improves code readability and reduces complexity. As a result, code is much easier to maintain.\n\n# Do This:\n\n* **Create a function called `doUpArrow`**. \n* Move the code from the `upArrow` event handler to the function.\n* **Call `doUpArrow`** from both your button and key event handlers. (The animation below shows the steps above.)\n* Repeat the same process for the down arrow / button by creating a function called `doDownArrow`.\n* Once you have **removed these redundancies from your code** test your app to make sure it still works!\n\n![](https://images.code.org/f47a98a8c9ca169848c682b3e61293cd-image-1448300634062.gif)",
        "CSPU5_U3 - Keys - Functions_2018_markdown_instruction": "# Refactoring Code\n\nOn the last level, we copied a few lines of code to a different part of our program. **Hopefully warning bells went off in your head!** Any time you are copying portions of code from one area of your program to another, it's a good indication that you should write a function to capture that behavior in one place. \n\nWhen you add new features to your code **you will often create redundancies**. To keep your code readable and consistent, you may need to rewrite old pieces of code. This process of restructuring existing code without changing its external behavior is called **refactoring**. It is an important process when developing software that improves code readability and reduces complexity. As a result, code is much easier to maintain.\n\n# Do This:\n\n* **Create a function called `doUpArrow`**. \n* Move the code from the `upArrow` event handler to the function.\n* **Call `doUpArrow`** from both your button and key event handlers. (The animation below shows the steps above.)\n* Repeat the same process for the down arrow / button by creating a function called `doDownArrow`.\n* Once you have **removed these redundancies from your code** test your app to make sure it still works!\n\n![](https://images.code.org/f47a98a8c9ca169848c682b3e61293cd-image-1448300634062.gif)",
        "CSPU5_U3 - Keys - Multiple Keys_markdown_instruction": "# Multiple Keys\n\nIf you want your program to respond differently to a couple different keys, you will need to use chained conditional statements (`if` and `else-if`). \n\nLet's set up the program to **play a different sound for the down key.**\n\n# Do This:\n**We've added another sound** to the app, but it's just sitting at the top of the code.\n\n* Add an `else-if` statement to check if the **down arrow** was pressed.\n\n<img src=\"https://images.code.org/996914e436cca050f62d5b851899eda9-image-1447215275417.gif\" style=\"width: 350px\">\n\n* Move the `playSound` command from the top of the program inside the `else-if`. (Notice that in the example, we switch to block mode to move this line because it's easier to move blocks around that way. You can just copy/paste the text too.)\n\n<img src=\"https://images.code.org/42b2df84b4cd98267068592218ac96ed-image-1447215267891.gif\" style=\"width: 350px\">\n\n* **Test the program:** it should play one sound when the **up** arrow is pressed and a different sound if the **down** arrow is pressed.  It shouldn't make any sound if any other keys are pressed. ",
        "CSPU5_U3 - Keys - Multiple Keys_2018_markdown_instruction": "# Multiple Keys\n\nIf you want your program to respond differently to a couple different keys, you will need to use chained conditional statements (`if` and `else-if`). \n\nLet's set up the program to **play a different sound for the down key.**\n\n# Do This:\n**We've added another sound** to the app, but it's just sitting at the top of the code.\n\n* Add an `else-if` statement to check if the **down arrow** was pressed.\n\n<img src=\"https://images.code.org/996914e436cca050f62d5b851899eda9-image-1447215275417.gif\" style=\"width: 350px\">\n\n* Move the `playSound` command from the top of the program inside the `else-if`. (Notice that in the example, we switch to block mode to move this line because it's easier to move blocks around that way. You can just copy/paste the text too.)\n\n<img src=\"https://images.code.org/42b2df84b4cd98267068592218ac96ed-image-1447215267891.gif\" style=\"width: 350px\">\n\n* **Test the program:** it should play one sound when the **up** arrow is pressed and a different sound if the **down** arrow is pressed.  It shouldn't make any sound if any other keys are pressed. ",
        "CSPU5_U3 - Loops - 1_markdown_instruction": "# *while* Loops\n\n<img src=\"https://images.code.org/bfb82e4caecc3ad1338177e05064ef72-image-1446669721477.41.28 PM.png\" style=\"width: 100px; float: right\">\n\n **The `while` loop uses a boolean condition to repeatedly run a block of code.**  It checks the expression, and if it is true it runs the block of code contained within it. This process of checking the condition and running the block of code is repeated as long as the boolean condition remains true. **Once the boolean expression becomes false it will stop.**\n\nWe are going to start exploring a `while` loop by **modifying the condition on which a `while` loop runs and using `console.log` to ensure it is correctly evaluating its condition**.\n\n# Do This:\n\n* **Starter code** is provided which creates a `while` loop that repeatedly moves the turtle around the screen.\n* **Add a `console.log` command** inside the loop after `num` is assigned a random number. This way you can see the value the loop is based on.\n![](https://images.code.org/1da444fd5c6533ad1cc0de3c593bf92d-image-1446825127341.gif)\n* **Run the program a couple times** and look at the results.\n* **Change the condition for the `while` loop** to check if the variable **`num` is less than 90**. Your output might look like the example below.\n\n![](https://images.code.org/97df98c23c0c03a7ce480108a92627a5-image-1448296906193.41.17 AM.png)",
        "CSPU5_U3 - Loops - 10_markdown_instruction": "# Writing a Loop From English\n\nAlright it’s your turn. Can you translate the English into code? This problem also involves an \"until loop\" problem.\n# Do This:\n\nTake this statement in English and translate it into code: \n\n**“Write a program that simulates the rolling of two dice. Keep rolling the dice UNTIL the sum of the dice is either a 7 OR an 11.\"**  Your program should display the results of each roll.  \n\n**NOTE**: this one is a *little* tricky.  Hint: In English we sometimes say \"or\" when in cold hard logic we mean \"and\".\n\nHere is a sample output:\n\n![](https://images.code.org/706279a3c167d8c76068a7ded5146eed-image-1456434365077.png)",
        "CSPU5_U3 - Loops - 10_2018_markdown_instruction": "# Writing a Loop From English\n\nAlright it’s your turn. Can you translate the English into code? This problem also involves an \"until loop\" problem.\n# Do This:\n\nTake this statement in English and translate it into code: \n\n**“Write a program that simulates the rolling of two dice. Keep rolling the dice UNTIL the sum of the dice is either a 7 OR an 11.\"**  Your program should display the results of each roll.  \n\n**NOTE**: this one is a *little* tricky.  Hint: In English we sometimes say \"or\" when in cold hard logic we mean \"and\".\n\nHere is a sample output:\n\n![](https://images.code.org/706279a3c167d8c76068a7ded5146eed-image-1456434365077.png)",
        "CSPU5_U3 - Loops - 11_markdown_instruction": "# Debugging: Complex Logic\n\nIn this challenge you need to find and fix a bug in a program that simulates rolling one die.  \n\nThe given code accidentally loops infinitely, so something must be wrong with the condition. Can you figure out how to fix it?\n\n# Do This:\n\n* **Fix the condition** so that it keeps rolling the die as long as the value is **not a 2 or a 3.**\n\n* **Hint:** Think about other ways you can express this idea in English. \n\n",
        "CSPU5_U3 - Loops - 11_2018_markdown_instruction": "# Debugging: Complex Logic\n\nIn this challenge you need to find and fix a bug in a program that simulates rolling one die.  \n\nThe given code accidentally loops infinitely, so something must be wrong with the condition. Can you figure out how to fix it?\n\n# Do This:\n\n* **Fix the condition** so that it keeps rolling the die as long as the value is **not a 2 or a 3.**\n\n* **Hint:** Think about other ways you can express this idea in English. \n\n",
        "CSPU5_U3 - Loops - 12_markdown_instruction": "# Repeat Specific Number of Times\n\nInstead of writing code that makes the loop run a random number of times, we can control the `while` loop by changing the variable used in the boolean expression differently. Let’s try just printing a string 5 times.\n\n# Do This:\n\n* **Starter Code:** Right now the code prints a string \"Hi\" twice.\n* **Change the code** so that it prints the string \"Hi\" 5 times.\n* **Notice** how `count` is being re-assigned each time through the loop.",
        "CSPU5_U3 - Loops - 12_2018_markdown_instruction": "# Repeat Specific Number of Times\n\nInstead of writing code that makes the loop run a random number of times, we can control the `while` loop by changing the variable used in the boolean expression differently. Let’s try just printing a string 5 times.\n\n# Do This:\n\n* **Starter Code:** Right now the code prints a string \"Hi\" twice.\n* **Change the code** so that it prints the string \"Hi\" 5 times.\n* **Notice** how `count` is being re-assigned each time through the loop.",
        "CSPU5_U3 - Loops - 14_markdown_instruction": "# Defensive Loop Conditions\n\nTake a look at the starting code. Instead of counting by 3's we had decided to count by 4's. \n\nBut this will run us into a problem. Can you see why?\n\nWe wanted to stop counting at 30, but when you count by 4 you will actually never hit 30. It would go... 24, 28, 32, 36...  What we really want to do is stop when the number is **greater than 30**. This is an important defensive programming strategy. Make the condition catch more cases than you think you need so that if for some reason something does not go exactly as you planned it will hit the stop condition and not go infinitely.\n\n\n# Do This:\n\n* **Change the loop condition** to prevent the infinite loop and stop counting once the count is past 30.",
        "CSPU5_U3 - Loops - 14_2018_markdown_instruction": "# Defensive Loop Conditions\n\nTake a look at the starting code. Instead of counting by 3's we had decided to count by 4's. \n\nBut this will run us into a problem. Can you see why?\n\nWe wanted to stop counting at 30, but when you count by 4 you will actually never hit 30. It would go... 24, 28, 32, 36...  What we really want to do is stop when the number is **greater than 30**. This is an important defensive programming strategy. Make the condition catch more cases than you think you need so that if for some reason something does not go exactly as you planned it will hit the stop condition and not go infinitely.\n\n\n# Do This:\n\n* **Change the loop condition** to prevent the infinite loop and stop counting once the count is past 30.",
        "CSPU5_U3 - Loops - 1_2018_markdown_instruction": "# *while* Loops\n\n<img src=\"https://images.code.org/bfb82e4caecc3ad1338177e05064ef72-image-1446669721477.41.28 PM.png\" style=\"width: 100px; float: right\">\n\n **The `while` loop uses a boolean condition to repeatedly run a block of code.**  It checks the expression, and if it is true it runs the block of code contained within it. This process of checking the condition and running the block of code is repeated as long as the boolean condition remains true. **Once the boolean expression becomes false it will stop.**\n\nWe are going to start exploring a `while` loop by **modifying the condition on which a `while` loop runs and using `console.log` to ensure it is correctly evaluating its condition**.\n\n# Do This:\n\n* **Starter code** is provided which creates a `while` loop that repeatedly moves the turtle around the screen.\n* **Add a `console.log` command** inside the loop after `num` is assigned a random number. This way you can see the value the loop is based on.\n![](https://images.code.org/1da444fd5c6533ad1cc0de3c593bf92d-image-1446825127341.gif)\n* **Run the program a couple times** and look at the results.\n* **Change the condition for the `while` loop** to check if the variable **`num` is less than 90**. Your output might look like the example below.\n\n![](https://images.code.org/97df98c23c0c03a7ce480108a92627a5-image-1448296906193.41.17 AM.png)",
        "CSPU5_U3 - Loops - 2_markdown_instruction": "# Infinite *while* Loops\n\n`while` loops run until their condition becomes false, which raises an interesting question.  **What happens if the condition never becomes false**? In these cases the program enters what is called an **infinite loop** over the commands in the `while` loop, and it never reaches the rest of your program. **We normally avoid infinite loops in our programs**, but let's try it out to see what happens.\n\n# Do This:\n\n* **Starter code** is provided which creates a `while` loop to move the turtle around the screen.\n* **Change the `while` loop condition to something that will always be true.** The easiest way to do this is to change 50 to be a number that randomNumber will never generate such as 200. \n* **Run the program.** Notice that it will never stop running. You may even get an error from your browser.\n* **Hit reset to stop it.** Your computer may actually stop running as you expect if you let an infinite loop run for too long. **It's possible you may even need to close the browser window and reload the page. If you hit reset early enough you can usually avoid this problem.**\n* **Find a condition using `<` or `>` that will also cause an infinite loop.**",
        "CSPU5_U3 - Loops - 2_2018_markdown_instruction": "# Infinite *while* Loops\n\n`while` loops run until their condition becomes false, which raises an interesting question.  **What happens if the condition never becomes false**? In these cases the program enters what is called an **infinite loop** over the commands in the `while` loop, and it never reaches the rest of your program. **We normally avoid infinite loops in our programs**, but let's try it out to see what happens.\n\n# Do This:\n\n* **Starter code** is provided which creates a `while` loop to move the turtle around the screen.\n* **Change the `while` loop condition to something that will always be true.** The easiest way to do this is to change 50 to be a number that randomNumber will never generate such as 200. \n* **Run the program.** Notice that it will never stop running. You may even get an error from your browser.\n* **Hit reset to stop it.** Your computer may actually stop running as you expect if you let an infinite loop run for too long. **It's possible you may even need to close the browser window and reload the page. If you hit reset early enough you can usually avoid this problem.**\n* **Find a condition using `<` or `>` that will also cause an infinite loop.**",
        "CSPU5_U3 - Loops - 4_markdown_instruction": "# Debug Commands\n\n<img src=\"https://images.code.org/c6322845b96b70c9083a6c62736048e5-image-1446739268136.00.34 AM.png\" style=\"width: 200px; float: right\">\n\nCheck out the new **Debug Commands toolbox** that has appeared next to the Debug Console! These powerful tools allow us to **pause a program at a certain point** while it’s running and then execute lines one at a time. \n\nUsing these tools we can investigate the state of variables and other elements of the program at any point, mid-execution. This makes it much easier to see what’s happening while the programming is actually running!\n\nIn order to use the debug commands, you first have to indicate which line you want the program to pause at.  This is called adding a “breakpoint” (see animation below).\n\n# Do This:\n\n* **Add a breakpoint** on the line where the `while` loop starts. (**Just click the line number.**)\n* **Use the <img src=\"https://images.code.org/eb07da547abe4afcd745f3bb44102fdf-image-1490808274422.24.13 PM.png\" style=\"width: 75px\"> button** to execute each line one at a time.\n* Each time you hit the breakpoint, **use the console to check value of `num`**. \n* **NOTE:** If you hit <img src=\"https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48 AM.png\" style=\"width: 75px\"> it will \"continue\" executing the program normally, unless of course it hits another breakpoint. \n\n![](https://images.code.org/68f8e185914c8cc127aa9573ae37f687-image-1446835628580.gif)",
        "CSPU5_U3 - Loops - 4_2018_markdown_instruction": "# Debug Commands\n\n<img src=\"https://images.code.org/c6322845b96b70c9083a6c62736048e5-image-1446739268136.00.34 AM.png\" style=\"width: 200px; float: right\">\n\nCheck out the new **Debug Commands toolbox** that has appeared next to the Debug Console! These powerful tools allow us to **pause a program at a certain point** while it’s running and then execute lines one at a time. \n\nUsing these tools we can investigate the state of variables and other elements of the program at any point, mid-execution. This makes it much easier to see what’s happening while the programming is actually running!\n\nIn order to use the debug commands, you first have to indicate which line you want the program to pause at.  This is called adding a “breakpoint” (see animation below).\n\n# Do This:\n\n* **Add a breakpoint** on the line where the `while` loop starts. (**Just click the line number.**)\n* **Use the <img src=\"https://images.code.org/eb07da547abe4afcd745f3bb44102fdf-image-1490808274422.24.13 PM.png\" style=\"width: 75px\"> button** to execute each line one at a time.\n* Each time you hit the breakpoint, **use the console to check value of `num`**. \n* **NOTE:** If you hit <img src=\"https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48 AM.png\" style=\"width: 75px\"> it will \"continue\" executing the program normally, unless of course it hits another breakpoint. \n\n![](https://images.code.org/68f8e185914c8cc127aa9573ae37f687-image-1446835628580.gif)",
        "CSPU5_U3 - Loops - 5_markdown_instruction": "# Update Condition\n\nIn order for a `while` loop to stop at some point, the code inside the loop **must change something about the state of the program** - usually the value of a variable - so that eventually the boolean expression becomes false.  Otherwise you'd have an infinite loop!\n\n# Do This:\n**Starter Code:** The starter code runs an infinite loop. \n* **Run the code** to see the problem in action. Remember to hit the reset button to stop the infinite loop.\n* **Add code inside the `while` loop** which will **update the variable `num` so that the condition will eventually become false.**\n* **TIP:** you can use the debugging tools if you think they would be helpful.",
        "CSPU5_U3 - Loops - 5_2018_markdown_instruction": "# Update Condition\n\nIn order for a `while` loop to stop at some point, the code inside the loop **must change something about the state of the program** - usually the value of a variable - so that eventually the boolean expression becomes false.  Otherwise you'd have an infinite loop!\n\n# Do This:\n**Starter Code:** The starter code runs an infinite loop. \n* **Run the code** to see the problem in action. Remember to hit the reset button to stop the infinite loop.\n* **Add code inside the `while` loop** which will **update the variable `num` so that the condition will eventually become false.**\n* **TIP:** you can use the debugging tools if you think they would be helpful.",
        "CSPU5_U3 - Loops - 6_markdown_instruction": "# Starting Condition\n\nWe have seen that loops can run infinitely. On the last level we saw that there is also the **chance that the loop never runs at all!** If the condition of the `while` loop starts out false then the loop will never run.\n\nWe fixed this problem in the last exercise by displaying the value of `num` in two places: before the loop and in the loop. Duplicating code is generally a bad strategy, so the question is: can we be a little clever and get into the loop without missing any values?  The answer is yes.\n\n**The solution** is to initialize the values used in our boolean expression so that we are **certain** it will evaluate to true the first time the loop checks it.  **For example, if your loop condition is: `while (num != 6)` you could initialize `num` to anything other than 6 and you'd know that you get into the loop**.  \n\nIf you use this technique though...\n1. You need to make sure you set the value of `num` right away inside the loop.\n2. You probably want to use a nonsense value like -1, so that if you ever see that displayed it will be obvious something is wrong and be easier to debug.\n\n# Do This:\n\n* **Starter code** is provided which creates a `while` loop that never runs.\n* **Run the program** once to see that the loop is never entered.\n* **Fix** the problem by changing the initial value of `num` to a nonsense value such as -1.",
        "CSPU5_U3 - Loops - 6_2018_markdown_instruction": "# Starting Condition\n\nWe have seen that loops can run infinitely. On the last level we saw that there is also the **chance that the loop never runs at all!** If the condition of the `while` loop starts out false then the loop will never run.\n\nWe fixed this problem in the last exercise by displaying the value of `num` in two places: before the loop and in the loop. Duplicating code is generally a bad strategy, so the question is: can we be a little clever and get into the loop without missing any values?  The answer is yes.\n\n**The solution** is to initialize the values used in our boolean expression so that we are **certain** it will evaluate to true the first time the loop checks it.  **For example, if your loop condition is: `while (num != 6)` you could initialize `num` to anything other than 6 and you'd know that you get into the loop**.  \n\nIf you use this technique though...\n1. You need to make sure you set the value of `num` right away inside the loop.\n2. You probably want to use a nonsense value like -1, so that if you ever see that displayed it will be obvious something is wrong and be easier to debug.\n\n# Do This:\n\n* **Starter code** is provided which creates a `while` loop that never runs.\n* **Run the program** once to see that the loop is never entered.\n* **Fix** the problem by changing the initial value of `num` to a nonsense value such as -1.",
        "CSPU5_U3 - Loops - 8_markdown_instruction": "# Printing Before the Loop Starts\n\nSometimes our code will be doing the right thing but we won't be able to tell because of the way we are printing values. We need to make sure we print all the values we are interested in. \n\nThis program *should* write all the values of `num` to the screen as it runs; however it misses one - the first one generated.  \n\n# Do This:\n\n* **Run the program** a few times and notice that sometimes it just prints \"Done.\" and nothing else, even though a number was generated. The first value of `num` never gets displayed.\n* **Add a `write` statement** before the loop to print the first number. \n* **Hint:** Look at the two times `num` is assigned a value. Which one isn't being displayed? ",
        "CSPU5_U3 - Loops - 8_2018_markdown_instruction": "# Printing Before the Loop Starts\n\nSometimes our code will be doing the right thing but we won't be able to tell because of the way we are printing values. We need to make sure we print all the values we are interested in. \n\nThis program *should* write all the values of `num` to the screen as it runs; however it misses one - the first one generated.  \n\n# Do This:\n\n* **Run the program** a few times and notice that sometimes it just prints \"Done.\" and nothing else, even though a number was generated. The first value of `num` never gets displayed.\n* **Add a `write` statement** before the loop to print the first number. \n* **Hint:** Look at the two times `num` is assigned a value. Which one isn't being displayed? ",
        "CSPU5_U3 - Loops - 9_markdown_instruction": "# Boolean Operators in *while* Loops\n\nWe can create compound boolean expressions to control our `while` loops just like our `if` statements. Let's try using boolean operators in our `while` loop condition.\n\n# Do This:\n\n* Right now this code rolls two dice as long as either one of them is less than 3.  **Modify the condition so that it keeps rolling as long as *both* are less than 3.**\n\n* **HINT:** To say that both dice are less than 3 the boolean expression must say: if die1 less-than 3 AND die2 less-than 3...\n",
        "CSPU5_U3 - Loops - 9_2018_markdown_instruction": "# Boolean Operators in *while* Loops\n\nWe can create compound boolean expressions to control our `while` loops just like our `if` statements. Let's try using boolean operators in our `while` loop condition.\n\n# Do This:\n\n* Right now this code rolls two dice as long as either one of them is less than 3.  **Modify the condition so that it keeps rolling as long as *both* are less than 3.**\n\n* **HINT:** To say that both dice are less than 3 the boolean expression must say: if die1 less-than 3 AND die2 less-than 3...\n",
        "CSPU5_U3 - Loops - Typing in Console_markdown_instruction": "# Debug Console: Variable Values\n\nUp until now, if we wanted to find out the value of a variable at some point in the execution of a program, we've used `console.log`. That is still going to be a great strategy but **the Debug Console can do even more for us!**\n\n**Check this out:** We can check the value of a variable in real time (as our program executes) by typing its name into the prompt within the Debug Console and hitting \"enter\". **This is another powerful tool for debugging your programs.** \n\n![](https://images.code.org/7e7ff7aa041814cfcd69a1c9a028c439-image-1446826780896.gif)\n\n# Do This:\n\n* **Run the program.**\n\n* Use the Debug Console to **check the ending value of `num`**. You can do this by typing num in the Debug Console and hitting enter!",
        "CSPU5_U3 - Loops - Typing in Console_2018_markdown_instruction": "# Debug Console: Variable Values\n\nUp until now, if we wanted to find out the value of a variable at some point in the execution of a program, we've used `console.log`. That is still going to be a great strategy but **the Debug Console can do even more for us!**\n\n**Check this out:** We can check the value of a variable in real time (as our program executes) by typing its name into the prompt within the Debug Console and hitting \"enter\". **This is another powerful tool for debugging your programs.** \n\n![](https://images.code.org/7e7ff7aa041814cfcd69a1c9a028c439-image-1446826780896.gif)\n\n# Do This:\n\n* **Run the program.**\n\n* Use the Debug Console to **check the ending value of `num`**. You can do this by typing num in the Debug Console and hitting enter!",
        "CSPU5_U3 - Loops - minus = operator_markdown_instruction": "# Try Out the *-=* Operator\n\nThe `-=` operator works almost identically to `+=`, but instead it subtracts the value provided from the variable. Let's use this operator to **create a loop that counts down from 30 by 3's**.\n\n# Do This:\n\n* **Change the code to use `-=`** to count from *down* from 30 to 0 by 3's.",
        "CSPU5_U3 - Loops - minus = operator_2018_markdown_instruction": "# Try Out the *-=* Operator\n\nThe `-=` operator works almost identically to `+=`, but instead it subtracts the value provided from the variable. Let's use this operator to **create a loop that counts down from 30 by 3's**.\n\n# Do This:\n\n* **Change the code to use `-=`** to count from *down* from 30 to 0 by 3's.",
        "CSPU5_U3 - Loops - plus and minus = operator_markdown_instruction": "# Introducing *+=* and *-=* Operators\n\nSometimes you want to add or subtract something *other than 1* from the current value of a variable. If you wanted to add or subtract 3 for example, such as: `count = count + 3` or `count = count - 3`, `++` and `--` wouldn’t help. \n\nIt turns out this is pretty common as well so there is actually a shorthand version of `count = count + 3`. \n\n**Introducing `+=`  and `-=`**!\n\nWe can use the `+=` or `-=` operator to add or subtract any value we want to the current value of a variable. \n\nSo, the shorthand versions of `count = count + 3` and `count = count - 3` would be:\n  * `count += 3` \n  * `count -= 3`\n\n**Notice** that these 3 statements: `count = count + 1`,  `count++`, and `count += 1` all do **exactly** the same thing!\n\nWhich one you use as a programmer is your choice, and in the future you can use either version, but try out the new operator here.\n\n# Do This:\n\n* **Change the code to use `count += 3`** instead of `count = count + 3` so the program will still count up by 3. (You'll need to be in text mode to do this.) \n\n(You'll get to try out `-=` on the next level.)",
        "CSPU5_U3 - Loops - plus and minus = operator_2018_markdown_instruction": "# Introducing *+=* and *-=* Operators\n\nSometimes you want to add or subtract something *other than 1* from the current value of a variable. If you wanted to add or subtract 3 for example, such as: `count = count + 3` or `count = count - 3`, `++` and `--` wouldn’t help. \n\nIt turns out this is pretty common as well so there is actually a shorthand version of `count = count + 3`. \n\n**Introducing `+=`  and `-=`**!\n\nWe can use the `+=` or `-=` operator to add or subtract any value we want to the current value of a variable. \n\nSo, the shorthand versions of `count = count + 3` and `count = count - 3` would be:\n  * `count += 3` \n  * `count -= 3`\n\n**Notice** that these 3 statements: `count = count + 1`,  `count++`, and `count += 1` all do **exactly** the same thing!\n\nWhich one you use as a programmer is your choice, and in the future you can use either version, but try out the new operator here.\n\n# Do This:\n\n* **Change the code to use `count += 3`** instead of `count = count + 3` so the program will still count up by 3. (You'll need to be in text mode to do this.) \n\n(You'll get to try out `-=` on the next level.)",
        "CSPU5_U3 - Loops And Arrays - Divid by 2_markdown_instruction": "# Divide by 2\n\nIn the last exercise, you updated every element in an array using a `for` loop. Let's get a little bit more practice with the pattern you used in the last exercise, this time creating the loop yourself.\n\n# Do This:\n**Starter code** is provided which creates an array of random values.\n\n* Create a `for` loop that **iterates over every index in the array**.\n\n* Within your loop, add code that **divides each value in the array by 2**.\n\n* Use the provided `console.log` statements to **confirm your program runs as expected**. Below is an example of the expected outcome.\n![](https://images.code.org/04b09b795c30313c67b2242f1773b2f6-image-1447795598583.26.21 PM.png)",
        "CSPU5_U3 - Loops And Arrays - Divid by 2_2018_markdown_instruction": "# Divide by 2\n\nIn the last exercise, you updated every element in an array using a `for` loop. Let's get a little bit more practice with the pattern you used in the last exercise, this time creating the loop yourself.\n\n# Do This:\n**Starter code** is provided which creates an array of random values.\n\n* Create a `for` loop that **iterates over every index in the array**.\n\n* Within your loop, add code that **divides each value in the array by 2**.\n\n* Use the provided `console.log` statements to **confirm your program runs as expected**. Below is an example of the expected outcome.\n![](https://images.code.org/04b09b795c30313c67b2242f1773b2f6-image-1447795598583.26.21 PM.png)",
        "CSPU5_U3 - Loops And Arrays - General Search Param_markdown_instruction": "# General Search\n\nIn order to make a general search function, we should be able to **search for any value, not just 5**.  We can do this by making the value to search for a parameter as well.\n\n# Do This:\n\n* **Add a second parameter** to your `search` function to represent the item to search for. This example uses the name `searchValue`.\n\n* **Update the code inside the function to check for `searchValue` instead of 5.** \n\n* **Call your search function** to search for different values inside of each array.\n\n* The `console.log` statement **is now inaccurate**. Change it to say \"Array has searchValue: \" followed by the value in flag.\n\n(These steps are shown in the code animation below.)\n\n![](https://images.code.org/b71a0bd1cf725d58ae76836a6422ebeb-image-1447695946760.gif)",
        "CSPU5_U3 - Loops And Arrays - General Search Param_2018_markdown_instruction": "# General Search\n\nIn order to make a general search function, we should be able to **search for any value, not just 5**.  We can do this by making the value to search for a parameter as well.\n\n# Do This:\n\n* **Add a second parameter** to your `search` function to represent the item to search for. This example uses the name `searchValue`.\n\n* **Update the code inside the function to check for `searchValue` instead of 5.** \n\n* **Call your search function** to search for different values inside of each array.\n\n* The `console.log` statement **is now inaccurate**. Change it to say \"Array has searchValue: \" followed by the value in flag.\n\n(These steps are shown in the code animation below.)\n\n![](https://images.code.org/b71a0bd1cf725d58ae76836a6422ebeb-image-1447695946760.gif)",
        "CSPU5_U3 - Loops And Arrays - Make it a Function - add list param_2018_markdown_instruction": "# Generalize *search* by Making It Into a Function - Part 2\n\nRight now, our function just searches for a 5 in a global array called `testArray`.  We would like to be able to **use this function to search through any array**, so we will be adding a parameter to allow us to specify which array should be searched.\n\n# Do This:\n\n* **Add a parameter to the `search` function called `list`**.\n* **Modify the code inside the function** so that it loops over `list` (the parameter) instead of `testArray` (the global variable).\n* **Call your function** with each of the arrays provided at the top of the program.\n\n(These steps are shown in the code animation below.)\n\n![](https://images.code.org/af4cf7bd95c09f3e8e3548a3383c4a4e-image-1447693121377.gif)",
        "CSPU5_U3 - Loops And Arrays - Make it a Function - add list parameter_markdown_instruction": "# Generalize *search* by Making It Into a Function - Part 2\n\nRight now, our function just searches for a 5 in a global array called `testArray`.  We would like to be able to **use this function to search through any array**, so we will be adding a parameter to allow us to specify which array should be searched.\n\n# Do This:\n\n* **Add a parameter to the `search` function called `list`**.\n* **Modify the code inside the function** so that it loops over `list` (the parameter) instead of `testArray` (the global variable).\n* **Call your function** with each of the arrays provided at the top of the program.\n\n(These steps are shown in the code animation below.)\n\n![](https://images.code.org/af4cf7bd95c09f3e8e3548a3383c4a4e-image-1447693121377.gif)",
        "CSPU5_U3 - Loops And Arrays - Make it a Function_markdown_instruction": "# Generalize *search* by Making It Into a Function\n\nYou've just written code to search for a value in a list!  If we could generalize this behavior, it might be useful to us in the future - it's probably something that we want to do over and over again.  \n\nOver the next few levels, we'll build up a very useful, general function for searching for *any* value in *any* list.  But we'll do it one step at a time...\n\n# Do This:\n\n**Note:** We've provided **new starter code** that implements the pseudocode from the last exercise. It also **creates two more arrays** that we'll be using later for testing.  For this level just worry about `testArray`. \n\n* **Run the starter** code to verify that it works correctly.\n* **Create a new function**. Name the function `search`.\n* **Move the code that checks for a 5 inside the function.** **Note:** You must move the boolean variable inside the function as well, or it won't reset each time you call the function!\n* **Call the function** to make sure your code still works.  The actual behavior will be the same as when you ran it the first time.  The difference now is that you're calling a function to do it.\n\n(Steps are shown in code animation below.)\n\n![](https://images.code.org/dfad49ac35cd605410c52828716b712c-image-1447631609779.gif)",
        "CSPU5_U3 - Loops And Arrays - Make it a Function_2018_markdown_instruction": "# Generalize *search* by Making It Into a Function\n\nYou've just written code to search for a value in a list!  If we could generalize this behavior, it might be useful to us in the future - it's probably something that we want to do over and over again.  \n\nOver the next few levels, we'll build up a very useful, general function for searching for *any* value in *any* list.  But we'll do it one step at a time...\n\n# Do This:\n\n**Note:** We've provided **new starter code** that implements the pseudocode from the last exercise. It also **creates two more arrays** that we'll be using later for testing.  For this level just worry about `testArray`. \n\n* **Run the starter** code to verify that it works correctly.\n* **Create a new function**. Name the function `search`.\n* **Move the code that checks for a 5 inside the function.** **Note:** You must move the boolean variable inside the function as well, or it won't reset each time you call the function!\n* **Call the function** to make sure your code still works.  The actual behavior will be the same as when you ran it the first time.  The difference now is that you're calling a function to do it.\n\n(Steps are shown in code animation below.)\n\n![](https://images.code.org/dfad49ac35cd605410c52828716b712c-image-1447631609779.gif)",
        "CSPU5_U3 - Loops And Arrays - Print Array_markdown_instruction": "# Print an Array with a *for* Loop\n\nAs you know, we can use variables as indexes in an array.  We can take advantage of this fact to create a `for` **loop which visits every index in an array**.\n\n![](https://images.code.org/5aeb9986535424b1d737b8221685196f-image-1447446416081.26.01 PM.png)\n\nIn this `for` loop, the `i` eventually gets set to every possible index in the array. You are going to use a loop of this kind to display all the values in an array.\n\n# Do This:\n**Starter code** is provided that adds several random values to an array.\n\n* Create a `for` loop that uses the syntax shown below (and above) to **iterate through every index in the array**.\n\t![](https://images.code.org/930b40b3e3f204605a0fd27fee9d8b8f-image-1447346008842.gif)\n    \n* Use `console.log` to **display the contents of the array at each index**.\n\t![](https://images.code.org/43431613ea0c045411499dd0e68e7feb-image-1447345996258.gif)\n    \n* Run the program to **confirm it is displaying all the values**.\n",
        "CSPU5_U3 - Loops And Arrays - Print Array_2018_markdown_instruction": "# Print an Array with a *for* Loop\n\nAs you know, we can use variables as indexes in an array.  We can take advantage of this fact to create a `for` **loop which visits every index in an array**.\n\n![](https://images.code.org/5aeb9986535424b1d737b8221685196f-image-1447446416081.26.01 PM.png)\n\nIn this `for` loop, the `i` eventually gets set to every possible index in the array. You are going to use a loop of this kind to display all the values in an array.\n\n# Do This:\n**Starter code** is provided that adds several random values to an array.\n\n* Create a `for` loop that uses the syntax shown below (and above) to **iterate through every index in the array**.\n\t![](https://images.code.org/930b40b3e3f204605a0fd27fee9d8b8f-image-1447346008842.gif)\n    \n* Use `console.log` to **display the contents of the array at each index**.\n\t![](https://images.code.org/43431613ea0c045411499dd0e68e7feb-image-1447345996258.gif)\n    \n* Run the program to **confirm it is displaying all the values**.\n",
        "CSPU5_U3 - Loops And Arrays - Printing Single True_markdown_instruction": "# Print a Single True/False Value\n\nSometimes we don't care about the count and just want to know if the array contains a 5 or not. **Let's try to display a single true/false indicating whether the list contains a 5.** There are two cases to consider: \n\n1. The list **does not contain any 5's**; you need to display **\"false\"**.  \n2. The list **contains at least one 5**; you need to display **\"true\"**.\n\n**HINT:** one way to do this is to reference your counter variable `fiveCount` after the array has been processed.\n\n# Do This:\n**We've pulled your code from the previous level so you can continue to add to it**.\n\n* Add a **`console.log` statement to display a single \"true\" or \"false\"** indicating whether there is a 5 anywhere in the array.\n\n| Example output 1: One or more 5's | Example output 2: No 5's |\n| --- | --- |\n|![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31 PM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46 PM.png)|",
        "CSPU5_U3 - Loops And Arrays - Printing Single True_2018_markdown_instruction": "# Print a Single True/False Value\n\nSometimes we don't care about the count and just want to know if the array contains a 5 or not. **Let's try to display a single true/false indicating whether the list contains a 5.** There are two cases to consider: \n\n1. The list **does not contain any 5's**; you need to display **\"false\"**.  \n2. The list **contains at least one 5**; you need to display **\"true\"**.\n\n**HINT:** one way to do this is to reference your counter variable `fiveCount` after the array has been processed.\n\n# Do This:\n**We've pulled your code from the previous level so you can continue to add to it**.\n\n* Add a **`console.log` statement to display a single \"true\" or \"false\"** indicating whether there is a 5 anywhere in the array.\n\n| Example output 1: One or more 5's | Example output 2: No 5's |\n| --- | --- |\n|![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31 PM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46 PM.png)|",
        "CSPU5_U3 - Practice Create Performance Task_markdown_instruction": "# Practice Create Performance Task\n\nYou've finally made it to the end of the Programming Unit! We will continue some programming in the next unit, but for now we are going to use all the new concepts you have learn to create something of your own design! \n\n# Do This:\n\n* **Read the Project Overview** to understand the entire project.\n* **Follow the Project Planning Guide**.\n* **Implement your final program in this level**.",
        "CSPU5_U3 - Return Values - debuggingMaxVal_markdown_instruction": "# Debugging and Multiple Return Statements\n\n**Having multiple `return` statements in a program can lead to tricky situations**. You may use multiple return statements, but it makes it easier to introduce logical errors into your program. We're going to look at some examples of functions with return values that include logical errors and debug them. The goal is to **recognize common errors with return values now so you can avoid them when writing your own programs**.\n\nThere is a logical error somewhere in the version of `maxVal` you are about to see which uses multiple return statements. As a result, the function works correctly for some inputs but not all. You'll need to inspect the code to understand what the issue is and make changes accordingly. In particular, look closely for conditions that are *not* currently handled by the program.\n\n# Do This:\n\n* **Run the program** and identify the errors generated in the output.\n* **Inspect the logic of `maxVal`** to identify the logical error.\n* **Correct the logical error** so that the function returns the correct value for all inputs.",
        "CSPU5_U3 - Return Values - debuggingMaxVal_2018_markdown_instruction": "# Debugging and Multiple Return Statements\n\n**Having multiple `return` statements in a program can lead to tricky situations**. You may use multiple return statements, but it makes it easier to introduce logical errors into your program. We're going to look at some examples of functions with return values that include logical errors and debug them. The goal is to **recognize common errors with return values now so you can avoid them when writing your own programs**.\n\nThere is a logical error somewhere in the version of `maxVal` you are about to see which uses multiple return statements. As a result, the function works correctly for some inputs but not all. You'll need to inspect the code to understand what the issue is and make changes accordingly. In particular, look closely for conditions that are *not* currently handled by the program.\n\n# Do This:\n\n* **Run the program** and identify the errors generated in the output.\n* **Inspect the logic of `maxVal`** to identify the logical error.\n* **Correct the logical error** so that the function returns the correct value for all inputs.",
        "CSPU5_U3 - Return Values - useMinVal_markdown_instruction": "# Using Functions that Return Values\n\nWe have used functions that return values many times before, but in this exercise you will see how they are actually created by using the `return` command. The function `minVal` accepts two numbers as input and returns the minimum of the two as output. You can call this function just like any other, and **because it returns a number, you can treat the function call as if it were a number**.\n\n# Do This:\n\n* **Starter code** has been provided that creates the function `minVal` and generates two random values.\n* **Inspect the code of `minVal` to understand the logic of this function**.\n* On the `console.log` line **call the function using `rand1` and `rand2` as parameters** and ensure the minimum value is returned. You should treat the function call **as if it were a number**.\n\n<img src=\"https://images.code.org/21c2232acca1ed4a133d648982b0b042-image-1447964963356.gif\" style=\"width: 550px\">\n\n* Check that the program generates output similar to the output shown below.\n\n<img src=\"https://images.code.org/0ec446c772976ca8e75e5eb25d018b24-image-1447964535213.21.49 PM.png\" style=\"width: 350px\">\n",
        "CSPU5_U3 - Return Values - useMinVal_2018_markdown_instruction": "# Using Functions that Return Values\n\nWe have used functions that return values many times before, but in this exercise you will see how they are actually created by using the `return` command. The function `minVal` accepts two numbers as input and returns the minimum of the two as output. You can call this function just like any other, and **because it returns a number, you can treat the function call as if it were a number**.\n\n# Do This:\n\n* **Starter code** has been provided that creates the function `minVal` and generates two random values.\n* **Inspect the code of `minVal` to understand the logic of this function**.\n* On the `console.log` line **call the function using `rand1` and `rand2` as parameters** and ensure the minimum value is returned. You should treat the function call **as if it were a number**.\n\n<img src=\"https://images.code.org/21c2232acca1ed4a133d648982b0b042-image-1447964963356.gif\" style=\"width: 550px\">\n\n* Check that the program generates output similar to the output shown below.\n\n<img src=\"https://images.code.org/0ec446c772976ca8e75e5eb25d018b24-image-1447964535213.21.49 PM.png\" style=\"width: 350px\">\n",
        "CSPU5_U3 - Return Values - wrapTurtle_markdown_instruction": "# Use a Function that Returns a Value in an App - Part 2\n\nThis time, you're going to write a function that returns a value to add functionality to the turtle driver. The `updateTurtle` function now is making a call to a function called `wrap` that has not been written yet. It accepts three parameters and should work in the following way:\n\n* `input`: the input value to the function. If it is within the range it should just be returned.\n* `low`: the lower bound of the range. If `input` is below this value the output should be the value of `high`.\n* `high`: the upper bound of the range. If `input` is above this value the output should be the value of `low`.\n\nBy using this function you can create the illusion that the screen \"wraps\" around, so when the turtle leaves the top of the screen it appears again at the bottom.\n\n# Do This:\n\n* **Starter code** is provided which allows the turtle to move.\n* The `updateTurtle` function now makes two calls to `wrap`, but the function is not yet written.\n* **Write the `wrap` function** so that it implements the logic described above.\n* **Run your app** and confirm the turtle now \"wraps\" when it leaves the screen.\n\n![](https://images.code.org/ebed5130ccdd16202eac0b8cc02df959-image-1447957698820.gif)",
        "CSPU5_U3 - Return Values - wrapTurtle_2018_markdown_instruction": "# Use a Function that Returns a Value in an App - Part 2\n\nThis time, you're going to write a function that returns a value to add functionality to the turtle driver. The `updateTurtle` function now is making a call to a function called `wrap` that has not been written yet. It accepts three parameters and should work in the following way:\n\n* `input`: the input value to the function. If it is within the range it should just be returned.\n* `low`: the lower bound of the range. If `input` is below this value the output should be the value of `high`.\n* `high`: the upper bound of the range. If `input` is above this value the output should be the value of `low`.\n\nBy using this function you can create the illusion that the screen \"wraps\" around, so when the turtle leaves the top of the screen it appears again at the bottom.\n\n# Do This:\n\n* **Starter code** is provided which allows the turtle to move.\n* The `updateTurtle` function now makes two calls to `wrap`, but the function is not yet written.\n* **Write the `wrap` function** so that it implements the logic described above.\n* **Run your app** and confirm the turtle now \"wraps\" when it leaves the screen.\n\n![](https://images.code.org/ebed5130ccdd16202eac0b8cc02df959-image-1447957698820.gif)",
        "CSPU5_U3 - Return Values - writeMaxVal_markdown_instruction": "# Writing Functions that Return Values\n\nNow you are going to write your own function that returns a value, `maxVal`. This function should return the maximum of two values provided as input. The code for `minVal` is provided so that you can **replicate the pattern used in this function**.\n\n**Pattern for Functions that Return Values**\n* Use parameters to provide input.\n* Declare a variable that will be used as output, possibly initializing its value.\n* Update the value in your output variable throughout your program.\n* Return your output variable on the last line of your function.\n\nYou may actually recognize many similarities between how we wrote functions that process arrays and functions that return values. **These patterns aren't rules of programming, but they help make your code easy to read and understand**.\n\n# Do This:\n\n* **Starter code** has been provided which stubs out `maxVal` and generates two random values. `minVal` is still provided **so that you can replicate the pattern used**.\n* **Write `maxVal`**, replicating the pattern used to write `minVal`.\n* **Use `maxVal` within the `console.log` statement as if it were a number** to generate the output similar to the one shown below.\n\n![](https://images.code.org/5941ceeb27f0ad2d59819c9395d0d89a-image-1447947829448.gif)",
        "CSPU5_U3 - Return Values - writeMaxVal_2018_markdown_instruction": "# Writing Functions that Return Values\n\nNow you are going to write your own function that returns a value, `maxVal`. This function should return the maximum of two values provided as input. The code for `minVal` is provided so that you can **replicate the pattern used in this function**.\n\n**Pattern for Functions that Return Values**\n* Use parameters to provide input.\n* Declare a variable that will be used as output, possibly initializing its value.\n* Update the value in your output variable throughout your program.\n* Return your output variable on the last line of your function.\n\nYou may actually recognize many similarities between how we wrote functions that process arrays and functions that return values. **These patterns aren't rules of programming, but they help make your code easy to read and understand**.\n\n# Do This:\n\n* **Starter code** has been provided which stubs out `maxVal` and generates two random values. `minVal` is still provided **so that you can replicate the pattern used**.\n* **Write `maxVal`**, replicating the pattern used to write `minVal`.\n* **Use `maxVal` within the `console.log` statement as if it were a number** to generate the output similar to the one shown below.\n\n![](https://images.code.org/5941ceeb27f0ad2d59819c9395d0d89a-image-1447947829448.gif)",
        "CSPU5_U3 - Simulation - 1_markdown_instruction": "# Starting Small\n\nTo start, we're going to simulate flipping a coin 10 times. You might be thinking that isn't many coin flips, and that we could just do those flips in real life, but this is actually an important step in developing a simulation. At small scales we can make sure our code is working as intended because **we can still visually confirm its output**. Once we're convinced that the logic of our program is reliable we'll move up to simulating larger numbers of flips.\n\nThe core logic of our program will be focused on **a `while` loop** that simulates flipping a coin by repeatedly generating **random 0's or 1's using `randomNumber`**. This is a great opportunity to keep practicing using loops while applying your knowledge of variables, iteration, and `if` statements.\n\n# Do This:\n\n* When we want to flip a coin with a computer we will instead **generate a random number between 0 and 1**.\n* Write a program that **uses a `while` loop** to **flip a coin 10 times** and writes the value of each flip to the screen. The example below shows how your program should run.\n* **HINT:** you will need to use a counter variable in your `while` loop to keep track of how many times the coin has been flipped. \n\n![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)",
        "CSPU5_U3 - Simulation - 1_2018_markdown_instruction": "# Starting Small\n\nTo start, we're going to simulate flipping a coin 10 times. You might be thinking that isn't many coin flips, and that we could just do those flips in real life, but this is actually an important step in developing a simulation. At small scales we can make sure our code is working as intended because **we can still visually confirm its output**. Once we're convinced that the logic of our program is reliable we'll move up to simulating larger numbers of flips.\n\nThe core logic of our program will be focused on **a `while` loop** that simulates flipping a coin by repeatedly generating **random 0's or 1's using `randomNumber`**. This is a great opportunity to keep practicing using loops while applying your knowledge of variables, iteration, and `if` statements.\n\n# Do This:\n\n* When we want to flip a coin with a computer we will instead **generate a random number between 0 and 1**.\n* Write a program that **uses a `while` loop** to **flip a coin 10 times** and writes the value of each flip to the screen. The example below shows how your program should run.\n* **HINT:** you will need to use a counter variable in your `while` loop to keep track of how many times the coin has been flipped. \n\n![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)",
        "CSPU5_U3 - Simulation - 2.1_markdown_instruction": "# Changing the Loop Condition\n\nCurrently our loop condition is based on a counter variable that keeps track of the total number of flips, but our simulation should only run **while we have fewer than the target number of heads**. In this exercise you are going to change the condition used by your `while` loop so that your **simulation terminates once you have flipped 5 total heads**. At the end of the loop we will **write the total number of flips** to know how many flips it took to get 5 heads.\n\n# Do This:\n\n* Change the looping condition to use the variable you are using to keep track of the number of heads. **Your loop should run as long as you have fewer than 5 total heads**.\n* Add code after your loop that **writes the total number of flips**.\n* **Test your program** several times to make sure it works as expected. See the example below.\n* **Note:** the simulation is always terminating once it flips its 5th heads. Sometimes this means the text output runs off the screen. We will address this in the next exercise.\n\n![](https://images.code.org/878ff327142ebad8f81ecd8cdf58b14a-image-1446861064994.gif)",
        "CSPU5_U3 - Simulation - 2.1_2018_markdown_instruction": "# Changing the Loop Condition\n\nCurrently our loop condition is based on a counter variable that keeps track of the total number of flips, but our simulation should only run **while we have fewer than the target number of heads**. In this exercise you are going to change the condition used by your `while` loop so that your **simulation terminates once you have flipped 5 total heads**. At the end of the loop we will **write the total number of flips** to know how many flips it took to get 5 heads.\n\n# Do This:\n\n* Change the looping condition to use the variable you are using to keep track of the number of heads. **Your loop should run as long as you have fewer than 5 total heads**.\n* Add code after your loop that **writes the total number of flips**.\n* **Test your program** several times to make sure it works as expected. See the example below.\n* **Note:** the simulation is always terminating once it flips its 5th heads. Sometimes this means the text output runs off the screen. We will address this in the next exercise.\n\n![](https://images.code.org/878ff327142ebad8f81ecd8cdf58b14a-image-1446861064994.gif)",
        "CSPU5_U3 - Simulation - 2.5_markdown_instruction": "# 10,000 Heads!\n\nYou're ready to increase the number of heads your simulation is looking for and **test your first hypothesis**. Before we move up to the full 10,000 heads, however, we're going to perform a quick check of our program logic.  When you make changes to your program **it is possible that some portion of your programming logic will stop working as you expected**. In order to feel more confident about your model you will **first change the number of heads you are looking for to a number that we can still visually verify (7 heads)**. If our code still works after making changes then we should be confident that it should work at 10,000. We will remove the intermediate output and run the full simulation!\n\n# Do This:\n\n* **Increase the number of heads you are looking for to 7** and **visually confirm** that the code is still working as you expect.\n* If everything seems to be working, **comment out the `write` command that displays the results of each flip.** You can use `//` to comment out a single line of code. Make sure that the total count of flips still prints though!\n* **Run your simulation and find out how long it takes to get to 10,000 heads**. Then run it a few more times. What patterns are you noticing? Record your results and move on.",
        "CSPU5_U3 - Simulation - 2.5_2018_markdown_instruction": "# 10,000 Heads!\n\nYou're ready to increase the number of heads your simulation is looking for and **test your first hypothesis**. Before we move up to the full 10,000 heads, however, we're going to perform a quick check of our program logic.  When you make changes to your program **it is possible that some portion of your programming logic will stop working as you expected**. In order to feel more confident about your model you will **first change the number of heads you are looking for to a number that we can still visually verify (7 heads)**. If our code still works after making changes then we should be confident that it should work at 10,000. We will remove the intermediate output and run the full simulation!\n\n# Do This:\n\n* **Increase the number of heads you are looking for to 7** and **visually confirm** that the code is still working as you expect.\n* If everything seems to be working, **comment out the `write` command that displays the results of each flip.** You can use `//` to comment out a single line of code. Make sure that the total count of flips still prints though!\n* **Run your simulation and find out how long it takes to get to 10,000 heads**. Then run it a few more times. What patterns are you noticing? Record your results and move on.",
        "CSPU5_U3 - Simulation - 2_markdown_instruction": "# Counting Heads\n\nLet's say that a **1 is a heads**. If we want our simulation to run until we reach a certain number of heads then **we will need a way to count the number of heads that have been flipped**. In order to do this you will need to add a variable that acts **as a counter**. Initialize it to 0, and every time you flip a heads (1) **increment your counter by 1**. At the end of your program you should write the value to the screen.\n\n# Do This:\n\n* Add a variable that **counts the number of heads (1's)** and write its value to the screen after each flip.\n* Run your program severals times **and validate that the number of heads recorded is correct** by visually checking the flips you've printed to the screen.\n* **Hint:** you will also need to store your current coin flip in a variable to complete this challenge.\n\n![](https://images.code.org/0d99569cd223c63e2166d610d09fd525-image-1446859813702.gif)",
        "CSPU5_U3 - Simulation - 2_2018_markdown_instruction": "# Counting Heads\n\nLet's say that a **1 is a heads**. If we want our simulation to run until we reach a certain number of heads then **we will need a way to count the number of heads that have been flipped**. In order to do this you will need to add a variable that acts **as a counter**. Initialize it to 0, and every time you flip a heads (1) **increment your counter by 1**. At the end of your program you should write the value to the screen.\n\n# Do This:\n\n* Add a variable that **counts the number of heads (1's)** and write its value to the screen after each flip.\n* Run your program severals times **and validate that the number of heads recorded is correct** by visually checking the flips you've printed to the screen.\n* **Hint:** you will also need to store your current coin flip in a variable to complete this challenge.\n\n![](https://images.code.org/0d99569cd223c63e2166d610d09fd525-image-1446859813702.gif)",
        "CSPU5_U3 - Simulation - 3_markdown_instruction": "# Streaks of Heads\n\nWe are going to alter our simulation so that it doesn't count the total number of heads, but rather the longest **streaks of heads**. This will allow us to simulate **how many flips it takes to get 12 heads in a row**. \n\nTo begin with you will change your looping condition so that **the loop again only runs 10 times**. This will allow us to visually confirm our code is working.\n\n**Keeping Track of Streaks:** We know we need to count streaks of heads, how do we do this in code?  Do we need to keep track of all the previous flips so we know that we're on a streak?\n\nThe answer is: **no**.  We can instead just **count in a clever way** that makes our code pretty simple.  Make a variable to use as a counter and...\n\n  * every time you see heads, add 1 to a counter.\n  * every time you see tails, set the counter back to 0.\n\nHere is some psuedocode showing how it works.  You might take a minute to study and reason about why and how it works.\n\n**Pseudocode**\n```\n// Ouside loop\nheadsCount <-- 0\n\n// Inside loop\t\nIF (current flip is a heads)\n  headsCount <-- headsCount + 1\nELSE\n  headsCount <-- 0\nDISPLAY (current flip)\nDISPLAY (headsCount)\n```\n# Do This:\n\n* Change your `while` loop's condition so that **it only runs 10 times**.\n* Add code to the simulation that **displays the length of each streak of heads** following the logic described above.  Note that pseudocode should translate to JavaScript pretty easily.\n* The example below shows an example of what output from your program might look like.\n\n![](https://images.code.org/22f1a29e9b6abd558198f4704e437498-image-1446751547621.25.07 PM.png)",
        "CSPU5_U3 - Simulation - 3_2018_markdown_instruction": "# Streaks of Heads\n\nWe are going to alter our simulation so that it doesn't count the total number of heads, but rather the longest **streaks of heads**. This will allow us to simulate **how many flips it takes to get 12 heads in a row**. \n\nTo begin with you will change your looping condition so that **the loop again only runs 10 times**. This will allow us to visually confirm our code is working.\n\n**Keeping Track of Streaks:** We know we need to count streaks of heads, how do we do this in code?  Do we need to keep track of all the previous flips so we know that we're on a streak?\n\nThe answer is: **no**.  We can instead just **count in a clever way** that makes our code pretty simple.  Make a variable to use as a counter and...\n\n  * every time you see heads, add 1 to a counter.\n  * every time you see tails, set the counter back to 0.\n\nHere is some psuedocode showing how it works.  You might take a minute to study and reason about why and how it works.\n\n**Pseudocode**\n```\n// Ouside loop\nheadsCount <-- 0\n\n// Inside loop\t\nIF (current flip is a heads)\n  headsCount <-- headsCount + 1\nELSE\n  headsCount <-- 0\nDISPLAY (current flip)\nDISPLAY (headsCount)\n```\n# Do This:\n\n* Change your `while` loop's condition so that **it only runs 10 times**.\n* Add code to the simulation that **displays the length of each streak of heads** following the logic described above.  Note that pseudocode should translate to JavaScript pretty easily.\n* The example below shows an example of what output from your program might look like.\n\n![](https://images.code.org/22f1a29e9b6abd558198f4704e437498-image-1446751547621.25.07 PM.png)",
        "CSPU5_U3 - Simulation - 5_markdown_instruction": "# Streaks of Heads: 12 in a Row\n\nWe're almost ready to test **our second hypothesis** and find out how long it takes to get **12 heads in a row**. Just as before we're first going to **visually test our code with a different length streak (4)** before removing most of the visual output and running the code for a streak of 12.\n\n# Do This:\n\n* **Change your simulation to run until you get a streak of 4** and visually verify that the values calculated are accurate.\n* **Comment out** the lines of code that write the current coin flip and the current streak count. You can use `//` to comment out a single line of code.\n* **Change your simulation to run until you get a streak of 12 heads**. \n* **Run your simulation a few times and record your results!**",
        "CSPU5_U3 - Simulation - 5_2018_markdown_instruction": "# Streaks of Heads: 12 in a Row\n\nWe're almost ready to test **our second hypothesis** and find out how long it takes to get **12 heads in a row**. Just as before we're first going to **visually test our code with a different length streak (4)** before removing most of the visual output and running the code for a streak of 12.\n\n# Do This:\n\n* **Change your simulation to run until you get a streak of 4** and visually verify that the values calculated are accurate.\n* **Comment out** the lines of code that write the current coin flip and the current streak count. You can use `//` to comment out a single line of code.\n* **Change your simulation to run until you get a streak of 12 heads**. \n* **Run your simulation a few times and record your results!**",
        "CSPU5_U3 - Simulation - 6_markdown_instruction": "# Keep Experimenting!\n\nYour simulation can be updated or changed however you like. What new questions do you have? Do you want to look for longer streaks of heads? Do you want to roll a die instead of flipping a coin? Make any changes and improvements to your simulation that you like.\n",
        "CSPU5_U3 - Simulation - 6_2018_markdown_instruction": "# Keep Experimenting!\n\nYour simulation can be updated or changed however you like. What new questions do you have? Do you want to look for longer streaks of heads? Do you want to roll a die instead of flipping a coin? Make any changes and improvements to your simulation that you like.\n",
        "CSPU5_U3 - User Input - Save getText To Variable_markdown_instruction": "# Saving Text Input in Variables\n\nOften we want to save the information we pull in from the user for later use in our program. The best way to do this is to save it in a variable.\n\n# Do This:\n\n* **Create two variables inside your event handler** to store the **age** and **name** of the user.\n* **Use `getText()` to update the values** stored in each of these variables.\n* **Change your `console.log` statements to use your variable instead of `getText`**.\n\n![](https://images.code.org/ca45dcb01ae2d1956ed2f87efeda0264-image-1445976691215.11.13 PM.png)",
        "CSPU5_U3 - User Input - Save getText To Variable_2018_markdown_instruction": "# Saving Text Input in Variables\n\nOften we want to save the information we pull in from the user for later use in our program. The best way to do this is to save it in a variable.\n\n# Do This:\n\n* **Create two variables inside your event handler** to store the **age** and **name** of the user.\n* **Use `getText()` to update the values** stored in each of these variables.\n* **Change your `console.log` statements to use your variable instead of `getText`**.\n\n![](https://images.code.org/ca45dcb01ae2d1956ed2f87efeda0264-image-1445976691215.11.13 PM.png)",
        "CSPU5_U3 full clicker demo_markdown_instruction": "# Clicker Game Demo\n\nTry out this clicker game! You'll be building your own version (with a theme you choose) at the end of the lesson.\n\n# Things That Are Familiar\nYou know how to build many of the components of this game already:\n- Multiple screens.\n- Buttons that change the screen when clicked.\n- Image that moves when you click it.\n\n# Things That Are New\n- Keeping track of and displaying the __changing score__.\n- Keeping track of and displaying the __changing lives__.\n- Changing to the __win screen if the score is 25__.\n- Changing to the __lose screen if the lives is 0__.\n",
        "CSPU5_U3 full clicker demo_2018_markdown_instruction": "# Clicker Game Demo\n\nTry out this clicker game! You'll be building your own version (with a theme you choose) at the end of the lesson.\n\n# Things That Are Familiar\nYou know how to build many of the components of this game already:\n- Multiple screens.\n- Buttons that change the screen when clicked.\n- Image that moves when you click it.\n\n# Things That Are New\n- Keeping track of and displaying the __changing score__.\n- Keeping track of and displaying the __changing lives__.\n- Changing to the __win screen if the score is 25__.\n- Changing to the __lose screen if the lives is 0__.\n",
        "CSPU5_U3- Keys - Code Refactoring Exit Ticket_markdown_instruction": "# Free Response: Why Refactor?\n\nWhy is refactoring your code important?\n",
        "CSPU5_U3- Keys - Code Refactoring Exit Ticket_2018_markdown_instruction": "# Free Response: Why Refactor?\n\nWhy is refactoring your code important?\n",
        "CSPU5_U3-Design Mode-ID and Event Handler_markdown_instruction": "# Activate Your Button\nOn the last level you added a button using Design Mode. If you click it, nothing happens. Let's make the button work. \nYour button has been brought over to this level.  \n\n**Goal:** Add code using Design Mode to make the button respond to a click.\n\n# Do This:\n\n<img src=\"https://images.code.org/9ff41c3ea30ece355e91eaca5cdc1e36-image-1444417748945.gif\"  style=\"width: 250px; float: right\">\n\n* **Change ID of button** from “button1” to “redButton”.\n\n* **Insert `onEvent` from Design Mode** by clicking *Insert and show code* under the **Events Tab**.\n\n* Run the program and **look for the output in the *Debug Console*** below the workspace instead of the app window. We will discuss the *Debug Console* on the next level.",
        "CSPU5_U313 Two Buttons with Ids_markdown_instruction": "# Predict - Observe - Reflect\nHere's another one.  \n\nTo understand a new piece of code good programmers often try to **first make a prediction about what will happen before running the program**. \n\nBy forcing yourself to make a prediction (it doesn't matter if you're right or not) you are immediately alerted to any **unusual or unexpected behavior** and you can ask yourself, *\"Huh? why did it do that?  Was that supposed to happen?\"*  It might not be an error, but you gain invaluable insight and actually **learn faster**.\n\n**Predict:** For the code that is here, what will happen when the \"Forward\" button is clicked? \n\n  * **Study the code** - This program has **two event handlers** listening for events on the same button?\n  * **Force yourself to make a prediction!** - \"I don't know\" is not a prediction!. \n\nHere are some options to think about:\n\n* There will be an error in the console immediately after hitting run\n* There will be an error in the console but not until you hit the button\n* Program does nothing\n* turtle only moves forward\n* turtle only turns left\n* turtle move forward *then* turn left \n* turtle turn left *then* move forward?\n* something else? \n\n**Observe:** Once you've made a prediction, close these instructions and **run the program** to observe what happens.\n\n**Reflect:** Was your prediction correct? If not what about your mental model might need to change? Talk about it with a classmate and experiment with the code to make sure you understand what is happening.",
        "CSPU5_U313 drag Two Buttons_markdown_instruction": "# Buttons and Unique IDs\nYou may have noticed that the button command has two parameters: `button(id, text)`.  The `text` is the text that actually shows up on the button display, and the `id` (we'll typically write **ID**) is a **unique identifier** for that element in the app.\n\nEach element that appears in the app must have a **unique ID**. In fact, if you try to run a program that has two buttons with same ID you will get a warning message in the console. Watch:\n<img src=\"https://images.code.org/47ec46e0563f63641cc10ef152e9f86e-image-1444074330713.gif\" style=\"border: solid 1px black; width:500px\">\n\nNotice that even though the text on the buttons was different, the IDs were the same, which caused the error message to show up. To get rid of that error message you will have to change the ID of the button from the default `id` to something else.\n\n**Error messages happen to everyone and they are helpful!**: getting an error or warning message when you run your program is *not a big deal*. Programmers actually rely on error messages to tell them where and how to fix their code.\nSometimes error messages are bit cryptic: `WARNING: Line: 2: button() id parameter refers to an id (id) which already exists.` But a warning like this contains helpful information and clues such as the line the error occured on, or some word or command it didn't recognize. \n\n# Do This:\nThe goal here is to experience an error message in a program, study it, and fix it.\n* **Drag** two buttons into the workspace (same as shown above) with the default IDs.\n* **Run** the program to see the warning message in the console.\n* **Read** the warning message to see what it says.\n* **Change** the IDs of the buttons to make them unique. An ID must be specified in quotes. You can use double-quotes: `\"myId\"`, or single quotes: `'myId'`\n* **Re-run the program** to make sure you don't get the error.\n\nOnce you've got two buttons on the screen with different IDs and the program can run without generating the warning, move on to the next level.\n",
        "CSPU5_U3L13 - Debugging 3_markdown_instruction": "# Debugging Logical Errors\n\nSometimes you can write a program that generates no errors but still does not work as intended. \n\nThis is the result of **logical errors** in your code, and **making a prediction** can help find these nasty little buggers too.\n\nOnce again we've introduced an error or two (a logical error this time) for you to debug.\n\n1. **Investigate the code and make a prediction** - What *should* happen here?\n2. **Run the program** and experiment to see what's wrong.\n3. **Reflect** - were you right?  Why or why not?\n4. **Fix it** - make it work as intended.\n5. **Repeat as necessary**",
        "CSPU5_U3L13 - Debugging 3_2018_markdown_instruction": "# Debugging Logical Errors\n\nSometimes you can write a program that generates no errors but still does not work as intended. \n\nThis is the result of **logical errors** in your code, and **making a prediction** can help find these nasty little buggers too.\n\nOnce again we've introduced an error or two (a logical error this time) for you to debug.\n\n1. **Investigate the code and make a prediction** - What *should* happen here?\n2. **Run the program** and experiment to see what's wrong.\n3. **Reflect** - were you right?  Why or why not?\n4. **Fix it** - make it work as intended.\n5. **Repeat as necessary**",
        "CSPU5_U3L13 - Project_markdown_instruction": "# Multi Screen App\nYou will be creating your own multi-screen app to practice designing user interfaces and writing event-driven programs. \n\n**Look at the Project Guide and Planning Sheets before programming**.\n\n# Requirements Reminder\n* Your app will have at least **4 screens**.\n* Your app should include **text, images, buttons, and sound**.\n* There should be **no “getting stuck” on any screen.**  It should always be possible to navigate from a screen in your app to some other screen. \n* Your program code should follow **good style**.\n* Your user interface should be **intuitive to use**.",
        "CSPU5_U3L13 - Turtle move with button_markdown_instruction": "# Your First Interactive App!\n<img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png' style='float: right; width: 250px'> A new group of commands has been added to the toolbox called **UI Controls** (User Interface Controls) which are commands that let you interact with, and respond to, the user of your app. To keep it simple, we'll start with just two commands: \n* `onEvent` which lets you run a function in response to some event occuring (such as a button click).\n* `button` which puts a button on the screen.\n\n# Do This:\nYou will replicate the small app shown below, which makes the turtle move with a button click. You will do three things:\n* Add a `button`.\n* Add an `onEvent` block.\n* Add `moveForward` inside the onEvent function block.\n\nHere's what you should do - you can come back to watch this as many times as you need to get it right.\n<img src=\"https://images.code.org/1cdc8cfbcef2a43f84b11ebdf14aed0c-image-1444061731350.gif\" style=\"border: solid 1px black; width: 500px; margin: auto\">\n\nOnce you've created the program and gotten it to run, click **Finish** to move onto the next level.",
        "CSPU5_U3L13 Free Response Reflection_markdown_instruction": "Elements in your app are required to have **unique IDs**. Given what you now know about how event handlers work, why is it important for the IDs of page elements to be unique?\n\n",
        "CSPU5_U3L14 - Assigning Random Value_markdown_instruction": "# Other Ways to Assign Values to Variables\nPrograms become much more interesting when the values in variables change while the program is running. We can also assign to a variable the value returned by a function. For example:\n\n![](https://images.code.org/31447c1b90c925bba3ca86ead8d84a7d-image-1445892065474.png)\n\nBecause the `randomNumber` function *evaluates to a number* it means we can treat it *as though it were a number*. We've used it before by just \"plugging it in\" to some function that needed a number as a parameter like:\n![](https://images.code.org/5df0376d562bd75a1899e17c49b00144-image-1445941026356.png)\n\nBecause the `randomNumber` function generates a new and different number each time you call it, one thing we *could not* do before we had variables was generate a random number, and use that *same number* for two different things in a program. Now we can.\n\n# Do This:\n<img src=\"https://images.code.org/df3d2a8f4c1a3061981667c9f85b0071-image-1445549489133.png\" style=\"float: right; width: 350px\">Write a program that simulates the rolling of two dice and reports their individual values as well as the sum. \nThe program should:\n* Generate two random numbers between 1 and 6 and store each result in its own variable.\n* Display the individual values of the two dice.\n* Display the sum of the two dice (see right).\n* Every time you run the program the result will be a little different.\n\nWe have given you starting code that shows what to do for the first die. The *rest of the code is up to you!*  When you're done the output in the app display should look like what's above.\n\n",
        "CSPU5_U3L14 - Assigning Random Value_2018_markdown_instruction": "# Other Ways to Assign Values to Variables\nPrograms become much more interesting when the values in variables change while the program is running. We can also assign to a variable the value returned by a function. For example:\n\n![](https://images.code.org/31447c1b90c925bba3ca86ead8d84a7d-image-1445892065474.png)\n\nBecause the `randomNumber` function *evaluates to a number* it means we can treat it *as though it were a number*. We've used it before by just \"plugging it in\" to some function that needed a number as a parameter like:\n![](https://images.code.org/5df0376d562bd75a1899e17c49b00144-image-1445941026356.png)\n\nBecause the `randomNumber` function generates a new and different number each time you call it, one thing we *could not* do before we had variables was generate a random number, and use that *same number* for two different things in a program. Now we can.\n\n# Do This:\n<img src=\"https://images.code.org/df3d2a8f4c1a3061981667c9f85b0071-image-1445549489133.png\" style=\"float: right; width: 350px\">Write a program that simulates the rolling of two dice and reports their individual values as well as the sum. \nThe program should:\n* Generate two random numbers between 1 and 6 and store each result in its own variable.\n* Display the individual values of the two dice.\n* Display the sum of the two dice (see right).\n* Every time you run the program the result will be a little different.\n\nWe have given you starting code that shows what to do for the first die. The *rest of the code is up to you!*  When you're done the output in the app display should look like what's above.\n\n",
        "CSPU5_U3L14 - Mini Calculator embed_markdown_instruction": "# Getting User Input - A Simple Calculator\nPrograms become *even more interesting* when we can interact with the user. A short way to ask a user for a number is with the `promptNum` command, which pops up a dialog box asking the user to enter a number.\n\nThis very simple app demonstrates a new behavior: getting input from the user.\n**You will write code to re-create this program** on the next page.\n\n# Do This:\n* Click \"Run\" on the app.\n* You will be prompted for two numbers, one right after the other.\n* See what happens.\n* Re-run the program and enter different numbers until you get the idea.\n\nClick **Finish** to move on.",
        "CSPU5_U3L14 - Mini Calculator embed_2018_markdown_instruction": "# Getting User Input - A Simple Calculator\nPrograms become *even more interesting* when we can interact with the user. A short way to ask a user for a number is with the `promptNum` command, which pops up a dialog box asking the user to enter a number.\n\nThis very simple app demonstrates a new behavior: getting input from the user.\n**You will write code to re-create this program** on the next page.\n\n# Do This:\n* Click \"Run\" on the app.\n* You will be prompted for two numbers, one right after the other.\n* See what happens.\n* Re-run the program and enter different numbers until you get the idea.\n\nClick **Finish** to move on.",
        "CSPU5_U3L15 - Add reset button to UpDown app_markdown_instruction": "# Add a Reset Button\nIn most apps you want to provide a way to start over. \n\nTo do this without having the user quit and restart your app, you need to add code to **reset variables and text displays to initial values** so the app can effectively start over.\n\nWe've **added a button** to the \"gameOverScreen\" in the *Count Up/Down App* and **added an empty event handler** for it.  \n\nRight now clicking the \"start over\" button does nothing. You will write code to make it work.\n\n\n# Do This:\n**Add code to the startOverButton event handler to reset the app**.  <img src=\"https://images.code.org/cb1569accb6a370d2258b5b14d624424-image-1446126849891.gif\" style=\"width: 150px; float: right;\">\n\nThe app should work like the animation shown to the right. **Notice** that when the \"start over\" button is clicked it goes back to the main screen and  the count has been reset to 0. \n\nThe code should:\n\n* Set the screen to the gamePlayScreen.\n* Set the count variable to 0.\n* Set the correct text label on the gamePlayScreen to show the count is 0.\n\nOnce you get it to work, move on.",
        "CSPU5_U3L15 - Add reset button to UpDown app_2018_markdown_instruction": "# Add a Reset Button\nIn most apps you want to provide a way to start over. \n\nTo do this without having the user quit and restart your app, you need to add code to **reset variables and text displays to initial values** so the app can effectively start over.\n\nWe've **added a button** to the \"gameOverScreen\" in the *Count Up/Down App* and **added an empty event handler** for it.  \n\nRight now clicking the \"start over\" button does nothing. You will write code to make it work.\n\n\n# Do This:\n**Add code to the startOverButton event handler to reset the app**.  <img src=\"https://images.code.org/cb1569accb6a370d2258b5b14d624424-image-1446126849891.gif\" style=\"width: 150px; float: right;\">\n\nThe app should work like the animation shown to the right. **Notice** that when the \"start over\" button is clicked it goes back to the main screen and  the count has been reset to 0. \n\nThe code should:\n\n* Set the screen to the gamePlayScreen.\n* Set the count variable to 0.\n* Set the correct text label on the gamePlayScreen to show the count is 0.\n\nOnce you get it to work, move on.",
        "CSPU5_U3L15 - DEMO up down count practice app_markdown_instruction": "# All the Basics You Need\n\n<img src=\"https://images.code.org/abb09baa0b6ccc24ff141590c5b667c3-image-1446417655965.gif\" style=\"float:right; width: 150px\"> When you close these instructions, you'll get to play a little bit with the very simple app (shown at right) to demonstrate the basics of concepts involved in making the clicker game.  We'll call it the **Count Up/Down App**.  Yes, it's a boring \"game,\" but it has all the pieces of a more sophisticated game.\n\nThis app demontrates a few new concepts.  We'll step through each one, one at a time, explaining how each thing works.  Along the way, we'll also encounter some common challenges, and learn how to solve them.\n\n# Do This:\n* Keeping clicking the up arrow until something happens (something besides the number increasing).\n* Start over.\n* Click the down arrow until something happens (something besides the number decreasing).\n* Start over.\n\nOnce you think you've seen all the behavior click Finish to see the first part of how this is done.\n\n",
        "CSPU5_U3L15 - DEMO up down count practice app_2018_markdown_instruction": "# All the Basics You Need\n\n<img src=\"https://images.code.org/abb09baa0b6ccc24ff141590c5b667c3-image-1446417655965.gif\" style=\"float:right; width: 150px\"> When you close these instructions, you'll get to play a little bit with the very simple app (shown at right) to demonstrate the basics of concepts involved in making the clicker game.  We'll call it the **Count Up/Down App**.  Yes, it's a boring \"game,\" but it has all the pieces of a more sophisticated game.\n\nThis app demontrates a few new concepts.  We'll step through each one, one at a time, explaining how each thing works.  Along the way, we'll also encounter some common challenges, and learn how to solve them.\n\n# Do This:\n* Keeping clicking the up arrow until something happens (something besides the number increasing).\n* Start over.\n* Click the down arrow until something happens (something besides the number decreasing).\n* Start over.\n\nOnce you think you've seen all the behavior click Finish to see the first part of how this is done.\n\n",
        "CSPU5_U3L15 - add code to make count down work_markdown_instruction": "# Make Count Down Work\n\n<img src=\"https://images.code.org/0044a46a27f7af5da74daeae8de021f7-image-1446063781449.gif\" style=\"float: right; width: 200px\">You now know enough about using global variables (and some of the problems you might run into) to try it yourself.\n\nLet's start with an easy task. Right now clicking the up arrow works as expected; **clicking the down arrow does not**. So...\n\n# Do This:\n**Make the count go down by 1 every time the down arrow is clicked**\n\n* Study how the up arrow works, and use it as an example for writing the code for the down arrow.\n* Add and modify the code so that when the down arrow is clicked the count goes down.\n* When you're done the app should work like the animation shown to the right.\n* HINT: Don't forget to set the text of the label.\n\n",
        "CSPU5_U3L15 - add code to make count down work_2018_markdown_instruction": "# Make Count Down Work\n\n<img src=\"https://images.code.org/0044a46a27f7af5da74daeae8de021f7-image-1446063781449.gif\" style=\"float: right; width: 200px\">You now know enough about using global variables (and some of the problems you might run into) to try it yourself.\n\nLet's start with an easy task. Right now clicking the up arrow works as expected; **clicking the down arrow does not**. So...\n\n# Do This:\n**Make the count go down by 1 every time the down arrow is clicked**\n\n* Study how the up arrow works, and use it as an example for writing the code for the down arrow.\n* Add and modify the code so that when the down arrow is clicked the count goes down.\n* When you're done the app should work like the animation shown to the right.\n* HINT: Don't forget to set the text of the label.\n\n",
        "CSPU5_U3L15 - mini clicker update score_markdown_instruction": "# Using Global Variables\n\nYou'll now look at a version of the clicker game. We've set up the basic functionality to move the apple around the screen, and have __created a global variable to keep track of the score.__\n\n# Do This:\n__Add code to update the score when the apple is clicked.__ Remember that you'll have to update both the global variable _and_ the label text!\n\n<img src=\"https://images.code.org/001640fd24fc487af534ab769ed196e2-image-1446136596261.gif\" style=\"width:200px\">",
        "CSPU5_U3L15 - mini clicker update score_2018_markdown_instruction": "# Using Global Variables\n\nYou'll now look at a version of the clicker game. We've set up the basic functionality to move the apple around the screen, and have __created a global variable to keep track of the score.__\n\n# Do This:\n__Add code to update the score when the apple is clicked.__ Remember that you'll have to update both the global variable _and_ the label text!\n\n<img src=\"https://images.code.org/001640fd24fc487af534ab769ed196e2-image-1446136596261.gif\" style=\"width:200px\">",
        "CSPU5_U3L15 click add lives_markdown_instruction": "# Tracking Lives\n\nIn the game, the number of lives starts at 3 and decrements by 1 every time the background image is clicked. Add this functionality to your game!\n\n# Do This:\n- __Add your variable to keep track of lives.__\n- __Add a click handler for the background image.__ _ID: \"background\"_\n- __When the background is clicked, decrement the number of lives by 1.__\n\n<img src=\"https://images.code.org/79f1352aebb2e40c302d1900aacd31f4-image-1446138180044.gif\" style=\"width:200px;\">",
        "CSPU5_U3L15 click add lives_2018_markdown_instruction": "# Tracking Lives\n\nIn the game, the number of lives starts at 3 and decrements by 1 every time the background image is clicked. Add this functionality to your game!\n\n# Do This:\n- __Add your variable to keep track of lives.__\n- __Add a click handler for the background image.__ _ID: \"background\"_\n- __When the background is clicked, decrement the number of lives by 1.__\n\n<img src=\"https://images.code.org/79f1352aebb2e40c302d1900aacd31f4-image-1446138180044.gif\" style=\"width:200px;\">",
        "CSPU5_U3L15 spot the difference variable debugging_markdown_instruction": "Respond to the following questions about your investigation into the bug with the counting game. Feel free to go back and look at the game again (but do so in another tab or be sure to click \"Submit\" to save your work!):\n\n- From the user's perspective, what was the difference between the first version of the game and the one with the bug?\n- From looking at the code, what specifically was the difference between the two, and why is that an issue?\n- How did you fix the bug?\n",
        "CSPU5_U3L15 spot the difference variable debugging_2018_markdown_instruction": "Respond to the following questions about your investigation into the bug with the counting game. Feel free to go back and look at the game again (but do so in another tab or be sure to click \"Submit\" to save your work!):\n\n- From the user's perspective, what was the difference between the first version of the game and the one with the bug?\n- From looking at the code, what specifically was the difference between the two, and why is that an issue?\n- How did you fix the bug?\n",
        "CSPU5_U3L16 - chaserApp_markdown_instruction": "# Chaser Game\n\nYou now have all the skills you need to make a simple \"chaser\" game. A chaser game is just a game where an image runs away from your mouse.\n<img src=\"https://images.code.org/ed1e9852b33ca368cf8cd8e0b0159de7-image-1444336815528.gif\" style=\"float: right\">\n\n# Do This:\n\n**Create a \"Chaser Game\"** which includes the following components:\n\n* **Text** on the top of the screen with a title or instructions for what to do.\n* **An image** that \"runs away\" (moves randomly) based on some mouse event.\n\nOnce you have the basic functionality down feel free to spend time adding more features to your application.\n<br><br><br>\n\n",
        "CSPU5_U3L16 - chooseImages_markdown_instruction": "# Choosing Your Own Images\n\nThe second parameter of the `image` command allows you to set the image to be displayed.  There are two ways to do this:\n1. Provide the URL of an image on the web.\n2. Upload an image from your computer (by clicking \"choose...\").\n\n![](https://images.code.org/e726e56fd3e4c7cd4a0d58cba731a855-image-1444240440116.53.49 PM.png)\n\n\n# Do This:\n\n* **Read the documentation for `image`** for tips on how to find an image's URL and how to upload.\n* **Change the image** to one you've found online or from your own computer.\n\n**NOTE:** many images are bigger than the screen of your app, so it's likely you'll need to add a `setPosition` command to get it on the screen sized the way you want.",
        "CSPU5_U3L16 - doubleQuotes_markdown_instruction": "# Importance of Double Quotes\n\nYou may have noticed that the strings we've seen are **wrapped in double quotes**. These double quotes **are not part of the string**. Instead this is how you indicate that a sequence of characters **is a string and not the name of a variable**.\n\nAs you start writing programs with strings **it is common to generate errors from forgetting to place them in double quotes**. We're going to generate some of those errors now so that we can recognize them more easily later.\n\n![](https://images.code.org/89235457b9b9bf76ac4f8221cae5a62e-image-1445987270682.07.24 PM.png)\n\n# Do This:\n\n* **This program generates many errors** because strings were not placed in quotes.\n* **Run the program** before you change it to see the errors that are generated.\n* **Add double quotes** around all the strings so that the program runs without errors.\n\n",
        "CSPU5_U3L16 - doubleQuotes_2018_markdown_instruction": "# Importance of Double Quotes\n\nYou may have noticed that the strings we've seen are **wrapped in double quotes**. These double quotes **are not part of the string**. Instead this is how you indicate that a sequence of characters **is a string and not the name of a variable**.\n\nAs you start writing programs with strings **it is common to generate errors from forgetting to place them in double quotes**. We're going to generate some of those errors now so that we can recognize them more easily later.\n\n![](https://images.code.org/89235457b9b9bf76ac4f8221cae5a62e-image-1445987270682.07.24 PM.png)\n\n# Do This:\n\n* **This program generates many errors** because strings were not placed in quotes.\n* **Run the program** before you change it to see the errors that are generated.\n* **Add double quotes** around all the strings so that the program runs without errors.\n\n",
        "CSPU5_U3L16 Mad Lib Demo_markdown_instruction": "# Getting Text from the User\n\nUp until now, the event-driven apps you have created responded to the user clicking an element or typing a number when you used `promptNum`. __What if we want the user to provide _text_ instead of a number?__ You can probably think of many apps and websites that ask you to provide text in order to do something.\n\nIn programming, we have to represent text in a specific way to distinguish it from other words in our code, such as variable names. But we'll cover that later...\n\nAt the beginning of class you created a Mad Libs on paper, which takes user input in the form of nouns, adjectives, and verbs to create a unique \"How-to\" manual. You'll be translating your own Mad Libs How-to into an app in this lesson.\n\n# Do This:\n\n- __Play with this Mad Libs app__ a couple of times to see a digital version of the paper game. \n- __Think about how the final text is created__ based on the input from the user. How would you describe in words the algorithm for creating it?",
        "CSPU5_U3L16 Mad Lib Demo_2018_markdown_instruction": "# Getting Text from the User\n\nUp until now, the event-driven apps you have created responded to the user clicking an element or typing a number when you used `promptNum`. __What if we want the user to provide _text_ instead of a number?__ You can probably think of many apps and websites that ask you to provide text in order to do something.\n\nIn programming, we have to represent text in a specific way to distinguish it from other words in our code, such as variable names. But we'll cover that later...\n\nAt the beginning of class you created a Mad Libs on paper, which takes user input in the form of nouns, adjectives, and verbs to create a unique \"How-to\" manual. You'll be translating your own Mad Libs How-to into an app in this lesson.\n\n# Do This:\n\n- __Play with this Mad Libs app__ a couple of times to see a digital version of the paper game. \n- __Think about how the final text is created__ based on the input from the user. How would you describe in words the algorithm for creating it?",
        "CSPU5_U3L16 Mad Lib Student Setup_markdown_instruction": "# Back to Mad Libs: Design Your App\nNow that you've had some practice getting user text and making new strings with it, you're ready to turn your How-to Mad Libs into an app. To get started, you'll set up the layout. There are two main screens:\n\n__Screen 1: Collect User Input__  \n- On this screen, you'll use __text labels__ and __text input__ design elements to set up the different words you want the user to provide.\n- A __Next__ button takes you to Screen 2 to view the full Mad Libs.\n\n__Screen 2: View Mad Libs__  \n- On this screen, you'll use the __text area__ design element to create the space where the user's completed Mad Libs will be displayed.\n- A __Play again__ button takes you back to Screen 1.\n<br>\n<br>\n\n\n\n<table>\n<tr>\n<td>\n<strong>Screen 1:</strong>\n</td>\n<td>\n<strong>Screen 2:</strong>\n</td>\n</tr>\n<tr>\n<td>\n<img src=\"https://images.code.org/ccea092b516047dff82fafa50b47bcc7-image-1447974038265.00.17 PM.png\" style=\"width:150px;float:right;\">\n</td>\n<td>\n<img src=\"https://images.code.org/0f832e6314ad98170a3cddb317d26e41-image-1445898480304.27.45.png\" style=\"width:151px;float:right;\">\n</td>\n</tr>\n</table>\n\n# Do This:\n\n- Create the two screens for your app, including the design elements in each one.\n- Requirement: Request at least 3 separate words from the user on Screen 1.\n- Create the event handlers for the __Next__ and __Play again__ buttons to respond to clicks.\n- Use `setScreen` in the event handlers to get the screen navigation working.",
        "CSPU5_U3L16 Mad Lib Student Setup_2018_markdown_instruction": "# Back to Mad Libs: Design Your App\nNow that you've had some practice getting user text and making new strings with it, you're ready to turn your How-to Mad Libs into an app. To get started, you'll set up the layout. There are two main screens:\n\n__Screen 1: Collect User Input__  \n- On this screen, you'll use __text labels__ and __text input__ design elements to set up the different words you want the user to provide.\n- A __Next__ button takes you to Screen 2 to view the full Mad Libs.\n\n__Screen 2: View Mad Libs__  \n- On this screen, you'll use the __text area__ design element to create the space where the user's completed Mad Libs will be displayed.\n- A __Play again__ button takes you back to Screen 1.\n<br>\n<br>\n\n\n\n<table>\n<tr>\n<td>\n<strong>Screen 1:</strong>\n</td>\n<td>\n<strong>Screen 2:</strong>\n</td>\n</tr>\n<tr>\n<td>\n<img src=\"https://images.code.org/ccea092b516047dff82fafa50b47bcc7-image-1447974038265.00.17 PM.png\" style=\"width:150px;float:right;\">\n</td>\n<td>\n<img src=\"https://images.code.org/0f832e6314ad98170a3cddb317d26e41-image-1445898480304.27.45.png\" style=\"width:151px;float:right;\">\n</td>\n</tr>\n</table>\n\n# Do This:\n\n- Create the two screens for your app, including the design elements in each one.\n- Requirement: Request at least 3 separate words from the user on Screen 1.\n- Create the event handlers for the __Next__ and __Play again__ buttons to respond to clicks.\n- Use `setScreen` in the event handlers to get the screen navigation working.",
        "CSPU5_U3L19 - fix the var name syntax error v2_markdown_instruction": "<!---\n# Debugging Variables\n<img src=\"https://images.code.org/18cb0f3b0fc43def369a3329854edc2e-image-1447272068495.png\n\" style=\"float: right; border: solid 1px black; width: 350px\">\n\nOne of the most common errors that can happen when you try to run a program is `Unknown identifer`.\nThis is just the computer trying to tell you that it doesn't recognize something you wrote.  Usually it's the name of a variable or function that you're trying to write and there is a small misspelling.\n\n**The computer doesn't hate you :)** It just needs everything to be exact so it can understand what you're trying to get it to do.\n\n**App Lab** alerts you to potential errors in two ways:<img src=\"https://images.code.org/329990c2e51e1e07a16d5e550cf766f0-image-1447272337465.gif\" style=\"width: 350px; float: right; border: solid 1px black\">\n\n* Hover your mouse over the yellow triangles or red squares next to line numbers in the code to see what they say.\n* As usual, the Debug Console will also tell you about any errors while your program is running. \n--->\n\n# Do This:\nWe've given you some code with some errors in it.  Look at the error messages and try to figure out the problem.\n\n* **Run the program**.\n* **Locate and fix the error**.\n\nWhen you get it right the output to the console should look like this:\n\n![](https://images.code.org/9c7a8eb5db973f81eb2faa89713d4f30-image-1445477911014.png)\n\nAs a reminder, App Lab gives you hints about errors in two ways: \n\n* Hover your mouse over the yellow triangles or red squares next to line numbers in the code to see what they say.\n* As usual, the Debug Console will also tell you about any errors while your program is running. \n",
        "CSPU5_U3L19 - fix the var name syntax error v2_2018_markdown_instruction": "<!---\n# Debugging Variables\n<img src=\"https://images.code.org/18cb0f3b0fc43def369a3329854edc2e-image-1447272068495.png\n\" style=\"float: right; border: solid 1px black; width: 350px\">\n\nOne of the most common errors that can happen when you try to run a program is `Unknown identifer`.\nThis is just the computer trying to tell you that it doesn't recognize something you wrote.  Usually it's the name of a variable or function that you're trying to write and there is a small misspelling.\n\n**The computer doesn't hate you :)** It just needs everything to be exact so it can understand what you're trying to get it to do.\n\n**App Lab** alerts you to potential errors in two ways:<img src=\"https://images.code.org/329990c2e51e1e07a16d5e550cf766f0-image-1447272337465.gif\" style=\"width: 350px; float: right; border: solid 1px black\">\n\n* Hover your mouse over the yellow triangles or red squares next to line numbers in the code to see what they say.\n* As usual, the Debug Console will also tell you about any errors while your program is running. \n--->\n\n# Do This:\nWe've given you some code with some errors in it.  Look at the error messages and try to figure out the problem.\n\n* **Run the program**.\n* **Locate and fix the error**.\n\nWhen you get it right the output to the console should look like this:\n\n![](https://images.code.org/9c7a8eb5db973f81eb2faa89713d4f30-image-1445477911014.png)\n\nAs a reminder, App Lab gives you hints about errors in two ways: \n\n* Hover your mouse over the yellow triangles or red squares next to line numbers in the code to see what they say.\n* As usual, the Debug Console will also tell you about any errors while your program is running. \n",
        "CSPU5_U3L19 - write var and string with same name v2_markdown_instruction": "# Debugging Variables\n<img src=\"https://images.code.org/1363b1799cd0f70e383664b4c6359ef4-image-1445479475849.png\" style=\"float:right; width: 200px\">There is a simple command called `write` in the UI Controls toolbox that is a fast and easy way to display text in the app itself. The way you use it is very similar to `console.log`.  Let's debug another problem only using `write` instead of `console.log`.  \n\nYou may have already run into this problem!  But it's worth mentioning again. To display the value of a variable you *should not* use quotes. Notice the difference between these two statements - the comments next to each line explains the differences:\n``` \n write(\"score\");  // will display the literal characters s-c-o-r-e\n write(score);    // will retrieve the value of score and display it\n```\n\n# Do This:\n<img src=\"https://images.code.org/a0ff680a245dba5546183e07ebbeaef2-image-1447270477159.png\" style=\"float: right; width: 250px\">To solve these problems you **should only add or remove quotation marks**.\n* **Run the starter code**\n* **Locate and fix the problems**\n\n**GOAL:** Make the app display what's shown at right by only adding or removing quotation marks from the code given.",
        "CSPU5_U3L19 - write var and string with same name v2_2018_markdown_instruction": "# Debugging Variables\n<img src=\"https://images.code.org/1363b1799cd0f70e383664b4c6359ef4-image-1445479475849.png\" style=\"float:right; width: 200px\">There is a simple command called `write` in the UI Controls toolbox that is a fast and easy way to display text in the app itself. The way you use it is very similar to `console.log`.  Let's debug another problem only using `write` instead of `console.log`.  \n\nYou may have already run into this problem!  But it's worth mentioning again. To display the value of a variable you *should not* use quotes. Notice the difference between these two statements - the comments next to each line explains the differences:\n``` \n write(\"score\");  // will display the literal characters s-c-o-r-e\n write(score);    // will retrieve the value of score and display it\n```\n\n# Do This:\n<img src=\"https://images.code.org/a0ff680a245dba5546183e07ebbeaef2-image-1447270477159.png\" style=\"float: right; width: 250px\">To solve these problems you **should only add or remove quotation marks**.\n* **Run the starter code**\n* **Locate and fix the problems**\n\n**GOAL:** Make the app display what's shown at right by only adding or removing quotation marks from the code given.",
        "CSPU5_U3L23 Free Response Wrap Up_markdown_instruction": "Identify a global problem that a NLP (Natural Language Processing) application could be used to help solve. \n\n* Describe the problem.\n* Explain how you think a NLP app could contribute to a solution.\n* Describe how the app would interact with the user. \n* What would you name the app? \n\n",
        "CSPU5_U3L24 introIncludes_markdown_instruction": "# *includes*\n<img src=\"https://images.code.org/7373ad2ad98b0d815ce0b8196c2ec177-image-1446070324010.11.43 PM.png\" style=\"width: 250px; float:right\">\n\nWe're going to explore a new function called `includes`. This function can be used to check if one string appears anywhere inside of another. Just like `toUpperCase` and `toLowerCase` this function is called using **dot notation**.\n\n# *includes* Returns a Boolean\n**`includes` is a function that returns a boolean.** In other words, when the function runs it will **evaulate to either `true` or `false`**. This function can be used **anywhere you would normally use a boolean expression**.\n\nYou've actually **seen a few functions that return a value before this**. `randomNumber` is a function that returns a number and `getText` is a function that returns a string. In every case we've used these functions **as if they were the data type they return (or evaulate to)**. Notice that in block mode these functions don't have the connectors that other commands do since they will be used as a piece of data within another function.\n\n# Do This:\n\n* **Read the documentation** for `includes`.\n* **Starter code** has been provided which shows one instance where a string does include a `searchValue` and one where it does not.\n* **Replicate the style** of these commands to check the rest of questions provided.\n* **Create three statements of your own using `includes`** making use of the `console.log` statements provided.\n* **Once you're comfortable with this command move on.**",
        "CSPU5_U3L25 - play sound when up key_markdown_instruction": "# Play Sound With Keys\n\nYou may have noticed from the last couple of levels that the value of `event.key` is just a string which is the name of the key. As a result we can check which key was pressed with a simple conditional statement.  For example to check for the press of the **\"a\"** key we could write `if (event.key == \"a\")`.\n\n# Do This:\nThe **starter code provided** plays the sound whenever ANY key is pressed.\n\n* Use `console.log` to **find out the value of `event.key` when the up arrow is pressed.**\n\n* **Add an `if` statement** so the sound only plays when the when the **up arrow** is pressed.",
        "CSPU5_U3L25 - play sound when up key_2018_markdown_instruction": "# Play Sound With Keys\n\nYou may have noticed from the last couple of levels that the value of `event.key` is just a string which is the name of the key. As a result we can check which key was pressed with a simple conditional statement.  For example to check for the press of the **\"a\"** key we could write `if (event.key == \"a\")`.\n\n# Do This:\nThe **starter code provided** plays the sound whenever ANY key is pressed.\n\n* Use `console.log` to **find out the value of `event.key` when the up arrow is pressed.**\n\n* **Add an `if` statement** so the sound only plays when the when the **up arrow** is pressed.",
        "CSPU5_U3L25 Free Response 3_markdown_instruction": "What is the output of this code segment?\n\n\tvar phrase = \"I am so\";\n\tvar emotion = \"excited\";\n\tvar sentence = phrase + \" \" + emotion.toUpperCase() + \"!\";\n\tconsole.log(sentence);\n<br/>\n",
        "CSPU5_U3L25 Free Response 3_2018_markdown_instruction": "What is the output of this code segment?\n\n\tvar phrase = \"I am so\";\n\tvar emotion = \"excited\";\n\tvar sentence = phrase + \" \" + emotion.toUpperCase() + \"!\";\n\tconsole.log(sentence);\n<br/>\n",
        "CSPU5_basic if - DIY secret number_markdown_instruction": "# Do it yourself - What's the secret number?\n\nInsert lines of code between the \"Welcome\" and \"Goodbye\" that do the following:\n\n1. use `promptNum` to ask the user to enter the \"secret number\"\n2. add an `if` statement to check if the number is the secret (you can make up your own secret number)\n3. use `console.log` to display a message if the user guessed correctly\n\n**NOTE:** Don't go overboard here adding messages. Just get practice adding a prompt and an if-statement on your own.  Make sure it works and move on.\n",
        "CSPU5_basic if - DIY secret number_2018_markdown_instruction": "# Do it yourself - What's the secret number?\n\nInsert lines of code between the \"Welcome\" and \"Goodbye\" that do the following:\n\n1. use `promptNum` to ask the user to enter the \"secret number\"\n2. add an `if` statement to check if the number is the secret (you can make up your own secret number)\n3. use `console.log` to display a message if the user guessed correctly\n\n**NOTE:** Don't go overboard here adding messages. Just get practice adding a prompt and an if-statement on your own.  Make sure it works and move on.\n",
        "CSPU5_basic if - check driving age_markdown_instruction": "# You try it\n\nThis is only *slightly* different from the voting example you just saw.\n\n* **Add an if-statement** to the code to check the `age` to see if the person is old enough to drive. (In most states you need to be 16 or older).\n* **Display a message if the person is old enough drive.**\n\nYou can add an if-statement by dragging it out from the toolbox.  We've provided the console.log message you should use.  Just drag it inside the if-statement.  This animation shows most of what you have to do.\n\n![](https://images.code.org/4ef3562d035ffacf292daac508fea34f-image-1479746969387.gif)",
        "CSPU5_basic if - check driving age_2018_markdown_instruction": "# You try it\n\nThis is only *slightly* different from the voting example you just saw.\n\n* **Add an if-statement** to the code to check the `age` to see if the person is old enough to drive. (In most states you need to be 16 or older).\n* **Display a message if the person is old enough drive.**\n\nYou can add an if-statement by dragging it out from the toolbox.  We've provided the console.log message you should use.  Just drag it inside the if-statement.  This animation shows most of what you have to do.\n\n![](https://images.code.org/4ef3562d035ffacf292daac508fea34f-image-1479746969387.gif)",
        "CSPU5_basic if - voting examle_markdown_instruction": "# Recreate the voting example\n\n* Replace `condition` with a Boolean expression to check if the person is 18 or older.\n* Run the program a few times, entering different ages at the prompt\n* Make sure you generate the two outputs that are possible from this code.\n\n",
        "CSPU5_turtleDriver_add2ndButton_markdown_instruction": "<img src=\"https://images.code.org/7447f9f6df9a1931297e1f8fa7284f28-image-1481582422206.gif\" style=\"float: right; width: 200px\">\n\n# Practice! Add another button\n\nNow that you know the pattern try it out.  **Add a 2nd button to the screen that turns the turtle to the left when clicked.**  The finished product should look similar to the image shown here.\n\nRemember the steps:\n\n  1. **Design Mode**: drag another button onto the screen\n  2. Switch to Code Mode: **add an onEvent block** to the code\n  3. **Add code** inside the function to make the turtle turn left\n  4. Run. Test. Debug\n\n<details><summary>Need Help? [Click Here]</summary>\n\n<h3>\nHere is an example of adding other button to make the turtle turn left\n</h3> \n\n<div style=\"column-count: 3; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 100%\">\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">1.</span>\nAdd a UI element to the screen in Design Mode</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">2.</span>\nAdd another onEvent block to the code.  <strong>Note:</strong> you need new onEvent block <em>for every</em> event you want to capture.</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">3.</span>\nAdd code to the event handler function you want.</p>\n\n</div>\n\n<img src=\"https://images.code.org/f695b83911560bf628750ed2a134a38c-image-1476818017592.png\" style=\"display: block; width: 100%\">\n\n<div style=\"column-count: 1; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 33%;\">\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">4.</span>\n<strong>Debugging Tip:</strong> if you hover your mouse over a UI element while in code mode, it will show you the ID of the element.  This very useful when you have a lot of elements on the screen.\n\n</div>\n\n<div style=\"clear: both\">\n&nbsp;\n</div>\n\n\n\n\n</details>\n",
        "CSPU5_turtleDriver_add2ndButton_2018_markdown_instruction": "<img src=\"https://images.code.org/7447f9f6df9a1931297e1f8fa7284f28-image-1481582422206.gif\" style=\"float: right; width: 200px\">\n\n# Practice! Add another button\n\nNow that you know the pattern try it out.  **Add a 2nd button to the screen that turns the turtle to the left when clicked.**  The finished product should look similar to the image shown here.\n\nRemember the steps:\n\n  1. **Design Mode**: drag another button onto the screen\n  2. Switch to Code Mode: **add an onEvent block** to the code\n  3. **Add code** inside the function to make the turtle turn left\n  4. Run. Test. Debug\n\n<details><summary>Need Help? [Click Here]</summary>\n\n<h3>\nHere is an example of adding other button to make the turtle turn left\n</h3> \n\n<div style=\"column-count: 3; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 100%\">\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">1.</span>\nAdd a UI element to the screen in Design Mode</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">2.</span>\nAdd another onEvent block to the code.  <strong>Note:</strong> you need new onEvent block <em>for every</em> event you want to capture.</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">3.</span>\nAdd code to the event handler function you want.</p>\n\n</div>\n\n<img src=\"https://images.code.org/f695b83911560bf628750ed2a134a38c-image-1476818017592.png\" style=\"display: block; width: 100%\">\n\n<div style=\"column-count: 1; column-gap: 20px; column-rule: 0.5px solid #00adbc; -moz-column-count: 3; width: 33%;\">\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 200%;\">4.</span>\n<strong>Debugging Tip:</strong> if you hover your mouse over a UI element while in code mode, it will show you the ID of the element.  This very useful when you have a lot of elements on the screen.\n\n</div>\n\n<div style=\"clear: both\">\n&nbsp;\n</div>\n\n\n\n\n</details>\n",
        "CSP_U2_Shakespeare_Question_markdown_instruction": "Respond to this prompt or to another as directed by your teacher.\n\nShakespeare’s complete works have approximately 3.5 million characters.  Which is bigger in file size: Shakespeare’s complete works stored in plain ASCII text or a 4 minute song on mp3?  How much bigger?",
        "CSP_U2_Shakespeare_Question_2018_markdown_instruction": "Respond to this prompt or to another as directed by your teacher.\n\nShakespeare’s complete works have approximately 3.5 million characters.  Which is bigger in file size: Shakespeare’s complete works stored in plain ASCII text or a 4 minute song on mp3?  How much bigger?",
        "Calc Circles of Eval .1_markdown_instruction": "You’ll be writing a kind of code called Evaluation Blocks, because each block of code evaluates to a single value. Change the ??? in this code so that the block evaluates to 5.",
        "Calc Circles of Eval .2_markdown_instruction": "This Evaluation Block is a multiplication function which takes two numbers and returns the product of those numbers. Edit this block so that it multiplies 2 * 5",
        "Calc Circles of Eval .3_markdown_instruction": "Here's a function for addition which takes two numbers and returns their sum. Use this Addition Block to add 3 + 6.",
        "Calc Circles of Eval .4_markdown_instruction": "Here we've nested an Addition Block inside a Multiplication Block. Complete this code so it multiplies 3 by (4 + 1)",
        "Calc Circles of Eval 2_markdown_instruction": "Use a Multiplication Block to complete this code.",
        "Calc Circles of Eval 3_markdown_instruction": "Complete the Evaluation Blocks to match this statement.",
        "Calc Circles of Eval 4_markdown_instruction": "This code is missing a couple of Evaluation Blocks - make sure you put everything in the right order.",
        "Calc Circles of Eval 7_markdown_instruction": "Complete the Evaluation Blocks to match this statement.",
        "Calc Circles of Eval 8_markdown_instruction": "Complete the Evaluation Blocks to match this statement.",
        "Calc Circles of Eval 9_markdown_instruction": "Complete the Evaluation Blocks to match this statement.",
        "Calc Circles of Eval Free Play_markdown_instruction": "Free Play: Try using the Evaluation Blocks to write some equations of your own. How does nesting the blocks in different ways impact their evaluation?",
        "Calc Define Funcs 1_markdown_instruction": "Let's look at some more traditional algebraic functions now. Here's a function translated from the simple algebraic function `f(x) = x + 1`. What would you expect this function to output if provided an input of 15?",
        "Calc Define Funcs 2_markdown_instruction": "Write a function `f` that takes a parameter `x` and returns `x - 10`. Test your function using `f(15)`.",
        "Calc Define Funcs 3_markdown_instruction": "We don't have to call our function `f` every time; create a function called `times-ten` that should take a parameter `x` and return `x * 10`. Once you've created the function, run `times-ten(50)`.",
        "Calc Define Funcs 4_markdown_instruction": "Write a function called `half` that takes a number `x` and returns half that number. Once you've written the function, use it to calculate `half(21)`",
        "Calc Design Recipe 1_markdown_instruction": "Let's use the Design Recipe to create a function called `cube` - this function should take in a Number and return that number to the power of 3. Make sure to write two example cases! When you're done, use your new function to calculate `cube(7)`.",
        "Calc Design Recipe 2_markdown_instruction": "Your school is holding a bake sale, and you need to track the cost of making each cookie, the money paid, and the total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\nWrite the function `cost`, which takes in the number of cookies you intend to sell, and returns the cost of making those cookies.\n\n_Test your function by calculating the cost of 42 cookies_",
        "Calc Design Recipe 3_markdown_instruction": "Write the function `sales` which takes in the number of cookies sold, and produces the amount of money customers spent to buy those cookies (each cookie is sold at $1.50).\n\n_Test your function by calculating the sales for 135 cookies_",
        "Calc Design Recipe 4_markdown_instruction": "Using the two functions we just wrote, write the function `profit`, which takes in the number of cookies you sold, and gives you back the total profit you make from selling your cookies, accounting for the cost of baking them.\n\n_Test your function by calculating the total profit for 15 cookies_",
        "Calc Rocket 1_markdown_instruction": "In the last puzzle you wrote a contract for the function `rocket-height` that states it has a range of Number, domain of Number, and should return the height of the rocket traveling at 15 m/s after a given number of seconds. Let's write an example case now for the height of the rocket at 3 seconds.",
        "Calc Rocket 2_markdown_instruction": "Great, let's do one more example before writing the function - what should the rocket height be after 30 seconds?",
        "Calc Vars 1.1_markdown_instruction": "Here we've set the `age` variable to 17 years. Can you write an expression that calculates `age` in days?",
        "Calc Vars 1_markdown_instruction": "Variables allow us to name values so that we can easily refer to them repeatedly throughout our programs. Here's a variable called `age`. Set its value to your age and click run.",
        "Calc Vars 2.1_markdown_instruction": "Here's a new variable called `age-in-months`. Use the variable `age` to set `age-in-months`.",
        "Calc Vars 2_markdown_instruction": "Can you write an expression that calculates `age` in months?",
        "Challenge: Buzzer and LED_markdown_instruction": "# Challenge\n\nCheck with your teacher before starting the challenge.\n\nNow that you know how to use the LED and buzzer, try creating an app that can play a variety of different sounds and which uses the LED. You could make a keyboard or synthesizer that plays various sounds when you click different buttons.",
        "Challenge: Input and UI_markdown_instruction": "# Stop\n\nYou have reached the end of the lesson. Check in with your teacher to see if you should work on the challenge level before you start. This is an extra challenge to practice your skills if you have time. If you don't have time for it no big deal!\n\n# Challenge\n\nGo to <a href=\"https://studio.code.org/p/applab\" target=\"_blank\">Full App Lab</a> and try to make your own profile creator like the example program on this level.",
        "Challenge: Lights Picker_markdown_instruction": "# Challenge: More Patterns\n\nAdd some more patterns to your app. Find a partner and add their pattern as an option. Make sure to put each pattern into its own function.",
        "Challenge: List of Notes_markdown_instruction": "# Challenge: \n\nCheck with your teacher before starting the challenge.\n\n**Starter Code:** An array with the name of the 30 buttons on the screen (not including the New Pattern button) is provided for you. \n\n**Write Code:** Each time the New Pattern button is clicked at least one random button from the list is set to a random color.\n",
        "Challenge: Random Button Colors_markdown_instruction": "# Challenge: Random Button Colors\n\nCheck with your teacher before starting the challenge.\n\n**Starter Code:** An array with the name of the 30 buttons on the screen (not including the New Pattern button) is provided for you. \n\n**Write Code:** Each time the New Pattern button is clicked at least one random button from the list is set to a random color.\n",
        "Challenge: Sunset with Counters_markdown_instruction": "# Challenge: Nightfall\n\nThink you've got drawing with counters down? Try this challenge.\n\nThe color block can take a 4th input that controls the opacity of the color. You can click the arrows on the side of the color block to expand this 4th input.\n\n![](https://images.code.org/7844f8cb46eade7cec452b7a4d98124b-image-1484964689007.10.08 PM.png)\n\n# Do This\n\nThis is your same sunset animation from before. Can you make the scene slowly change to night?\n\n![](https://images.code.org/b055142110b0d0ed092d6496447aad6e-image-1463079830043.gif)\n\n",
        "Classroom Assessment Techniques_markdown_instruction": "The following link is a resource that presents the process of designing and using classroom assessment techniques:",
        "Classroom Management Tips for School Computer Labs_markdown_instruction": "## Strategies for Managing a Computer Lab\n\n\nIf you're new to teaching a computer lab, consider implementing some of the 7 tips for establishing strong instructional routines, outlined in this article by Angela Watson. \n\n<br><br>",
        "Collaborative Learning and Group Work: Description and Strategies_markdown_instruction": "The following link to Cornell University Center for Teaching Excellence provides a brief description of group learning along with a handful of specific techniques for designing and implementing group work activities:  ",
        "Color Blindness Filter_markdown_instruction": "# Color Blindness Filter\n\n\n\n",
        "Color Contrast Checker_markdown_instruction": "# Color Contrast\n\nPeople need to be able to see and read the content on your web page for it to be useful. Some people might have bad eye sight, others are color blind. How do you design with these differences in mind? \n\nOne of the easiest ways to insure that many people will be able to read the content on your website is to make sure their is enough contrast between the different colors you are using together on your site.\n\nhttp://gomedia.com/zine/tutorials/rule-three-contrast-contrast-contrast/\n\n\n# Do This\n\n* Use the color contrast checker to see the difference in contrast of the different colors you are using together on your site.",
        "Considerations for the 1-to-1 Classroom_markdown_instruction": "## 1-1 Classroom\n\nIf you're new to managing a classroom with computers, check out this article in Education Week, which outlines some important considerations.\n\n<br><br>",
        "Course 4 Artist 1_markdown_instruction": "Help me draw a box.   \n(Each line is 200 pixels long) \n\n<br/><br/>\n\n",
        "Course 4 Artist 11_markdown_instruction": "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\" width=\"200px\"/>\n\nNow for a challenge!  \n\nHere is a design that uses only blocks that you have already been shown.  Can you figure out how to recreate it?  Feel free to use trial and error. You are not expected to get it perfect the first time.\n\nThe repeated shape is almost identical to the one from the last puzzle, except that the length used in the first loop is a little smaller. ",
        "Course 4 Artist 12_markdown_instruction": "<img src=\"https://images.code.org/70795d84048767ae7fb65883f476b27c-image-1440050836837.01.09.png\" width=\"250px\"/>\n\nFree Play Inspiration: You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own. \n\n<br/>",
        "Course 4 Artist 13_markdown_instruction": "Still playing?  Here is a blank canvas where you can design anything you want!",
        "Course 4 Artist 2_markdown_instruction": "Can you use a loop to draw the greyed out square?  \n(Each side is 300px long)",
        "Course 4 Artist 20_markdown_instruction": "Still playing?  \n\nHere is a blank canvas where you can create whatever you want!",
        "Course 4 Artist 3_markdown_instruction": "Try to figure out what happens if you run this code (or press \"Run\" to test it).  \n\nThen, repeat it enough times to complete the drawing.",
        "Course 4 Artist 4_markdown_instruction": "How many degrees are in a circle?  \nFill in the repeat block with that number to create a circle of colors.",
        "Course 4 Artist 5_markdown_instruction": "Draw the other half of this design so it's symmetrical. \nThe triangles are equilateral and are 50 pixels long.  \n\nYou may have to run the code several times to figure out all of the blocks that need to be added.",
        "Course 4 Artist 6_markdown_instruction": "Complete the code to draw these three, equilateral triangles.",
        "Course 4 Artist 7_markdown_instruction": "Now nest this loop inside another loop to draw 10 triangles. ",
        "Course 4 Artist 8_markdown_instruction": "Draw this sun by looping this whole block of code multiple times.",
        "Course 4 Artist 8a_markdown_instruction": "Remember this shape?  Now we're going to let you build it without giving you any blocks to start!",
        "Course 4 Artist 9_markdown_instruction": "Loop this design 10 times and make sure to turn between each shape that's drawn. ",
        "Course 4 Artist Binary 1_markdown_instruction": "Here's a function that takes a binary string of 1's and 0's and instructs the artist to follow them from left to right, top to bottom.  \n\nThe artist will fill-in the squares when it sees a 1 and ignore the square when it sees a 0. \n\n**Run this code to see how the artist uses binary to draw this pattern.**",
        "Course 4 Artist Binary 1a_markdown_instruction": "Here's a function that takes a binary string of 1's and 0's and instructs the artist to follow them from left to right, top to bottom.  The artist will fill-in the squares when it sees a 1 and ignore the square when it sees a 0. \n\nRun this code to see how the artist uses binary to draw this pattern.",
        "Course 4 Artist Binary Free Play 2b_markdown_instruction": "<img src=\"https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png\" width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! \n\nIf this picture inspires you, try to make something similar. Otherwise, create something all your own. \n<br/>",
        "Course 4 Artist Binary ryan_markdown_instruction": "Binary is a way of representing information using only two options.  Here, we're going to use the options \"off\" (represented by the number 0) and \"on\" (represented by the number 1).   \n\nWe've provided you with a grid of \"pixels\" that you can walk through and make designs by turning on only certain squares.  Can you have the artist draw \"01010101\" in binary in the first row?",
        "Course 4 Artist For Loops 1_markdown_instruction": "Use a repeat block to draw this triangle that is 50 pixels wide.\n\n",
        "Course 4 Artist For Loops 10_markdown_instruction": "Free Play Time! Have fun drawing whatever you like with the blocks you have learned how to use.",
        "Course 4 Artist For Loops 11_markdown_instruction": "Remember back in a previous stage when we used a variable to control the number of sides in a shape? We are going to do the same thing with the `counter` variable now.  \n\nThis pattern starts with a triangle and adds one side at a time until it draws a decagon (10 sides). Each side should be 100 pixels long. \n\nHow will you use the `counter` variable from the `for` loop to recreate this drawing?",
        "Course 4 Artist For Loops 11a_markdown_instruction": "Let's put it all together!   \n\nUsing your knowledge of `for` loops and the `counter` variable, create this drawing where each shape has two more sides than the last.  Make sure that each side is 10 times as long as the number of sides in the polygon.\n\nVery little of the code has been provided for you.",
        "Course 4 Artist For Loops 12_markdown_instruction": "That looked pretty cool, but now I'd like to draw each shape next to the last one. This time each side is 20 pixels. Use a jump block to jump forward 40 pixels after each shape.",
        "Course 4 Artist For Loops 13_markdown_instruction": "Hmmm, those shapes are getting bigger every time! Didn't we already solve this problem with variables? How can we use the counter variable to make the sides smaller as there are more of them? Instead of moving forward by a set amount, try moving forward (100 / counter) pixels.",
        "Course 4 Artist For Loops 14_markdown_instruction": "If you turn a little bit more or less than you normally would for a shape, it creates a neat effect. \n\nTry using some of the code from the last level, but turning 89 degrees to create this twisted square spiral.",
        "Course 4 Artist For Loops 15_markdown_instruction": "**Free Play:** Try making some drawings of your own using `for loops`. We've added a few useful variables for you as well.",
        "Course 4 Artist For Loops 3_markdown_instruction": "Use the last puzzle as a reference to complete this one.  The smallest triangle has 20 pixel sides, the largest has 200 pixel sides, and each triangle is 20 pixels larger than the last.",
        "Course 4 Artist For Loops 4_markdown_instruction": "How would you modify what you've learned to draw these squares? They start at 15 pixels long, the largest is 300 pixels long, and each square is 15 pixels larger than the last. ",
        "Course 4 Artist For Loops 5_markdown_instruction": "Good job on the last puzzle! Let's use that \"counter\" variable block again to draw this cool picture. \n\n",
        "Course 4 Artist For Loops 6_markdown_instruction": "Free Play! Try using a for loop to draw a growing shape pattern of your own design.",
        "Course 4 Artist For Loops 6a_markdown_instruction": "Make three small changes to the code from the last level to get this!",
        "Course 4 Artist For Loops 8_markdown_instruction": "Just one little change to the code from the last image can create this drawing. Can you figure out what that change is?\n\nHint:  You need to remove something!  ",
        "Course 4 Artist For Loops 8a_markdown_instruction": "Just one little change to the code from the last image can create this image. Can you figure out what that change is?",
        "Course 4 Artist For Loops 9_markdown_instruction": "Can you make a spiral? Move forward from 1 to 75 pixels, increasing by 1 pixel each time.\n\n",
        "Course 4 Artist For Loops Challenge_markdown_instruction": "**Challenge:** Can you figure out how to use all of the things you've learned to create this image of polygons, all with 40 pixel sides?\n\nRemember, in order to create a spiral, you cannot close the polygon.  This means that each shape will need to have one fewer sides than usual.",
        "Course 4 Artist For Loops Challenge_a_markdown_instruction": "**Challenge:** Can you figure out how to use all of the things you've learned to create this image of polygons, all with 40 pixel sides?",
        "Course 4 Artist For Loops inspire_markdown_instruction": "<br/><br/>\n<img src=\"https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png\" width=\"250px\"/>  \n<br/><br/>\n**Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own.",
        "Course 4 Artist Functions 12.1_markdown_instruction": "Let's create a function called `draw an octagon 20` that draws an octagon where each side is 20 pixels long.",
        "Course 4 Artist Functions 13.1_markdown_instruction": "Now, let's make a function called `jump to upper right` that moves the artist to the upper-right of the octagon that you just drew so we can finish this pattern.  \n<br/>\n*Hint:  To get yourself to the upper-right corner, try jumping in a pattern that makes just 3/8 of the octagon.*  ",
        "Course 4 Artist Functions 14.1_markdown_instruction": "Now, let's make a function called `jump to upper right` that moves the artist to the top-right of the octagon that you just drew so we can finish this pattern.  ",
        "Course 4 Artist Functions Inspiration_markdown_instruction": "<img src=\"https://images.code.org/cf373e03bede480ae54aec72ce823454-image-1442951867535.54.11.png\" width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! \n\nIf this picture inspires you, try to make something similar. Otherwise, create something all your own. ",
        "Course 4 Artist Functions challenge_markdown_instruction": "<img src=\"https://images.code.org/69f1c2b415f907c86aaa6ed2534c3682-image-1442870371171.13.38.png\" width=\"250px\"/>\n\n**Challenge Level:** Use what you've learned in this stage and others to figure out how to make the drawing above.  ",
        "Course 4 Artist Inspire_markdown_instruction": "<img src=\"https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png\" width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own. ",
        "Course 4 Artist Vars 1_markdown_instruction": "Let's draw an equilateral triangle. \n\nIt has to be exactly 100 pixels long on each side.\n\n<br/>\n",
        "Course 4 Artist Vars 11_markdown_instruction": "Here’s some more complicated code using the same concepts from the last puzzle - what should you set the `sides` variable to in order to draw this picture made of squares?\n\n<p style=\"font-size:small; padding: 15px 15px 15px 40px; background-color:#dcf3f3; border-radius:10px;\">\n\tJust for fun: Try using a few different numbers to see what happens to the pattern!\n</p>",
        "Course 4 Artist Vars 13_markdown_instruction": "When a shape has lots of sides, each side needs to be shorter if you want the whole pattern to fit on the screen. \n\nLet's recreate the algorithm for this amazing pattern, but instead of manually setting the `length` variable, let's use a math block with the `sides` variable inside to make sure that each shape fits correctly.  \n\nThe perimeter of each polygon is 300 pixels.",
        "Course 4 Artist Vars 14_markdown_instruction": "**Free Play**: Check it out! Now your algorithm is nested within one more loop. Experiment with changing the values of your two variables to draw cool patterns.\n\nFor even more effect, try playing with color!  Use random colors inside loops to see how it changes your design.",
        "Course 4 Artist Vars 2_markdown_instruction": "Instead of using `move forward by 150`, the `move` block is now referencing a variable called `length`. Can you set `length` to 150 to draw this new triangle?",
        "Course 4 Artist Vars 3_markdown_instruction": "Here's a loop that draws a square, but something's missing. Can you fix it so that it uses the variable \"length\" to figure out how long each side should be? ",
        "Course 4 Artist Vars 4_markdown_instruction": "Now I want to make a rectangle that is twice as tall as it is wide. We've got a variable called `width` that needs to be set to 100. Can you use the math blocks to complete the code?",
        "Course 4 Artist Vars 6_markdown_instruction": "Here’s some code that can draw any regular polygon. \n\nThere’s a new variable called `sides` that is set to 4. \n\nCan you use the `sides` variable (along with the math block) to turn the right amount regardless of how many sides are in the polygon?",
        "Course 4 Artist Vars 7_markdown_instruction": "Use what you learned in the last puzzle to create this hexagon using the `sides` variable.\n\nSee how you could change just one value to draw a triangle,  square, pentagon, or octagon?",
        "Course 4 Artist Vars 8_markdown_instruction": "**Free Play:** Experiment with the number of sides this shape has. Can you change the algorithm so that the overall size of the shape stays the same, no matter how many sides it has? ",
        "Course 4 Artist Vars 9_markdown_instruction": "Modify this algorithm so it uses the `sides` variable instead of a fixed number to draw a triangle. Don't forget to use the `set sides to` block.",
        "Course 4 Bee 1_markdown_instruction": "The bee can't tell what's under the cloud! \n\nUse the `if` block to check whether there is a flower under the cloud. \n\nGet nectar one time, **ONLY** if there is a flower.",
        "Course 4 Bee 2_markdown_instruction": "Use the `if/else` block to check each object to see if it's a flower or a honeycomb. \n\nIf it's a flower, collect one nectar...otherwise, make one honey!",
        "Course 4 Bee 3_markdown_instruction": "The unknown object is either a flower or a honeycomb. \n\nThis time, use the `if/else` block to collect one nectar **if** it is a flower, **else** make one honey (because then it would be a honeycomb).",
        "Course 4 Bee 4_markdown_instruction": "This purple flower may have either 3, 2, or 1 nectar. \n\nHere an `if/else` block is combined with another `if/else` block to create an `if/else-if/else` statement. \n\nComplete the solution to collect the unknown amount of nectar.",
        "Course 4 Bee 5_markdown_instruction": "This purple flower may have either 3, 2, or 1 nectar. Add an `if-else` block to create an `if, else-if, else` block. Complete the solution to collect the unknown amount of nectar.",
        "Course 4 Bee 6_markdown_instruction": "This purple flower may have either 3, 2, or 1 nectar. Create an `if, else-if, else` block to collect the unknown amount of nectar.",
        "Course 4 Bee 7_markdown_instruction": "Use everything you have learned so far to collect all the nectar. The purple flower may have either 3, 2, or 1 nectar.",
        "Course 4 Bee For Loops 11_markdown_instruction": "What's wrong with this loop? See if you can fix it and make the bee collect all the nectar.",
        "Course 4 Bee Params 1_markdown_instruction": "Write a sequence to collect all of the nectar using `get 3 nectar` which turns, moves to collect the nectar, and then returns to the original location.",
        "Course 4 Bee Params 2_markdown_instruction": "Modify the `get 3 nectar` function so it makes me turn right instead of left to the flowers.",
        "Course 4 Bee Params 3_markdown_instruction": "Now there are flowers on both sides!  \n\nWe've added variables called `left` and `right` for you to use, and now there is a parameter called `direction` inside `get 3 nectar`. \n\n**Edit `get 3 nectar` so that the bee turns the correct direction when the variables `left` or `right` are passed into the function.**",
        "Course 4 Bee Params 5_markdown_instruction": "Let's start from scratch - can you create a new function called `get 5 nectar` with a direction parameter?",
        "Course 4 Bee Params 7_markdown_instruction": "Try using your new function to collect all of this nectar.\n\n<br/>\n",
        "Course 4 Bee Params 8_markdown_instruction": "**Challenge:** Now there's honey to deal with too! \n\nRewrite your function to use both the number of honey units and the number of nectar units.  How would you use those numbers to decide what you should do?",
        "Course 4 EC 1a_markdown_instruction": "**Extreme Challenge:**  No rules. No clues. Just the challenge!",
        "Course 4 EC 1b_markdown_instruction": "**Extreme Challenge:**  No rules. No clues. Just the challenge!",
        "Course 4 EC 2a_markdown_instruction": "**Extreme Challenge:**  No rules. No clues. Just the challenge!",
        "Course 4 EC 2b_markdown_instruction": "**Extreme Challenge:**  No rules. No clues. Just the challenge!",
        "Course 4 EC 2c_markdown_instruction": "**Extreme Challenge:**  No rules. No clues. Just the challenge!",
        "Course 4 EC 2d_markdown_instruction": "**Extreme Challenge:**  No rules. No clues. Just the challenge!",
        "Course 4 Maze 4_markdown_instruction": "Try the `repeat` block to use fewer blocks when solving this puzzle...",
        "Course 4 Play Lab Params 1_markdown_instruction": "Here's a function called `jump` that causes your main character to jump up 100 pixels. \n\nRun the program and use the jump function to collect all of the flags by moving the dog with the arrow keys.",
        "Course 4 Play Lab Params 2_markdown_instruction": "Now we've got flags that are too high for our current jump! Let's use both the \"up\" and \"down\" arrows so that we can have multiple jump heights.  \n\nWe need to add a parameter to our jump function called `height`.  \n- The up arrow should cause the dog to jump 200 pixels \n- The down arrow should make it jump only 100 pixels. \n",
        "Course 4 Play Lab Params 4_markdown_instruction": "Here's a function called `patrol`. \n\nEdit `patrol` to move Cat up 400 pixels and then down 400 pixels.",
        "Course 4 Play Lab Params 5_markdown_instruction": "Edit the the `patrol` function to add an `actor` parameter, so that we can call it for each of the actors on the screen. Remember, the actors correspond to numbers 1, 2, and 3.",
        "Course 4 Play Lab Params 6_markdown_instruction": "Add another parameter called `speed` to the `patrol` function. Try using a `set speed` block with the new `speed` parameter to help Penguin get both flags before the other sprites even get one.",
        "Course 4 Play Lab Params 7_markdown_instruction": "Let's have some fun! Look at the code provided to see if you can figure out what each block does.  \n\nWhen you're done, use the arrow keys to control Dog and collect all of the flags.\n\n**NOTE:** You don't need to make any changes to the program",
        "Course 4 Play Lab Params 8_markdown_instruction": "Use the `when actor touches` block to send Dog back to the top-left ONLY if Dog touches any of the other actors.",
        "Course 4 Play Lab Vars 2_markdown_instruction": "The race in that last puzzle wasn't very fair! Change the `dog_speed` variable to make sure you can collect more flags than Cat. The first to collect 10 flags wins!",
        "Course 4 Play Lab Vars 3_markdown_instruction": "Here's a new kind of game! \n\nYou don't need to change anything on this level.\n\n**Directions:** Use the left and right arrows to move, and the up arrow to jump. See if you can collect all of the flags.",
        "Course 4 Play Lab Vars 4_markdown_instruction": "Now we're using a variable called `height` to control how high the dog can jump. Update the `height` variable so that the dog can jump high enough to reach all the flags. \n",
        "Course 4 Play Lab Vars 7_markdown_instruction": "Nice, now let's make sure this game isn't too easy to play!  \n\nAny time Dog (actor 1) gets hit by a sandwich from Cat (actor 2), you should lose a point. \n\nStart with 10 points so it's not too hard. Let your score drop down from 10 to 0 to pass the level.",
        "Course 4 Play Lab Vars 9_markdown_instruction": "Free Play time! Here are all of the variables we've played with so far in this stage, as well as a few more in case you want them. \n\nNotice that there are now so many blocks in our toolbox that they need to be organized!  Here, we've put each piece into an appropriate category.  Take some time to explore everything that is available. When you're done browsing, make a game or story using repeats, variables, and events.  \n\n*Hint: scroll down to see all the commands in the workspace.*",
        "Course 4 Play Labs For Loops 1_markdown_instruction": "Let's make the dog speak every number from 1 to 100. Use a `for` loop and the counter block to speak the counter variable each time the loop is run.",
        "Course 4 Play Labs For Loops 4a_markdown_instruction": "Now, let's blend the variables from Stage 7 together with your `counter` variable to make some magic happen.   \n\nIn this puzzle, Dog will count from **0** to **1000** by `increment`.  Set the `increment` variable to **10** at the beginning of your code to see what happens.",
        "Course 4 Play Labs For Loops 5_markdown_instruction": "In the last stage we counted the square of each number. Try changing `counter ^ 2` to `counter ^ 3` to count the cube of each number (1, 8, 27, 64, 125, 216, 343…)",
        "Course 4 Play Labs For Loops 5a_markdown_instruction": "In this puzzle, Dog will be your time keeper.\n\nDog will count from **0** to **30** by `increment`.  The `increment` variable will begin with a value of **1**.\n\nCan you make it so that each time you click Dog, `increment` increases by **2**?  Click the forward arrow to run the `for loop`.  \n\n**Note:** Run the loop a couple of times, clicking Dog before each one.",
        "Course 4 Play Labs For Loops 6a_markdown_instruction": "Now that we've seen how to control our `for loop` using variables inside of our program, let's make a game!\n\nDog will still keep time by counting with our `for loop` by `increment`, but this time we will add The Wizard into the mix.  Can you change the code so that `increment` goes up by two each time The Wizard is clicked?\n\nWatch out!  The Wizard moves quickly!",
        "Course 4 Play Labs For Loops 7a_markdown_instruction": "Now we're getting somewhere!  What if we start counting how many times we can click The Wizard before Dog gets to 30?  \n\nFinish adding blocks to The Wizard so that every time he's clicked the variable `clicked` increases by one. You can ignore `increment` for now.\n\n**Note:** Dog will start counting when you click `Run`.",
        "Course 4 Play Labs For Loops 8_markdown_instruction": "Now, help the actors move as they count.  \n\nDog should move and count by adding 2 (`counter + 2`) each time.  Cat will move and count by multiplying by 2 (`counter *2`)  each time. Penguin will move and count to the power of 2 (`counter ^ 2`) each time.  Who will reach their flag first?",
        "Course 4 Playlab For Loop Freeplay_markdown_instruction": "**Freeplay:** Use everything you've learned so far to make a game that includes a `for` loop!",
        "Course 4 Playlab For Loops 4b_markdown_instruction": "Now, these two characters are going to race!  \n\nEach of them will move `counter` steps at a time, but their counters will have different values because of the `for` loops.  \n\nCan you change the **increment** in one of the loops so that the race is a tie?",
        "Course 4 Playlab For Loops 5b_markdown_instruction": "Adjust the interval on these `for` loops so that the two characters end in the exact same place.",
        "Course 4 Playlab For Loops 6b_markdown_instruction": "Now we're going to use `for` loops in a whole different way!\n\nThis game gets hard quickly because the time between disappearances shrinks fast!\n\n<hr/>\n\n**Edit this `for` loop to create a game that's fun for you to play!**  \n\n<hr/>\n\nPress \"Run\" and click Madame Unicorn as many times as you can.  Can you beat our score of 24? ",
        "Course 4 SCF 1_markdown_instruction": "**Functions Super Challenge:** Use the suggested functions to draw four rows of hexagons. Notice how our even numbered rows are shifted to the right?",
        "Course 4 SCF 1a_markdown_instruction": "**Functions Super Challenge:** Can you figure out how to collect all of this nectar with the fewest blocks possible?",
        "Course 4 SCF 1b_markdown_instruction": "**Functions Super Challenge:** Can you figure out how to collect all of this honey with the fewest blocks possible?\n",
        "Course 4 SCF 2_markdown_instruction": "**Functions Super Challenge:** Use what you learned in the previous level to draw an image like this.\n\n*Note: The code becomes more simple if you incorporate parameters.*  ",
        "Course 4 SCF 3 Fail 1_markdown_instruction": "**Functions Super Challenge #1:** \n\n",
        "Course 4 SCF 3 Fail 2_markdown_instruction": "**Functions Super Challenge #1:** \n\n",
        "Course 4 SCFL 1_markdown_instruction": "**For-Loops Super Challenge:** Solve this puzzle with the fewest number of blocks possible.",
        "Course 4 SCFL 1a_markdown_instruction": "**For Loops Super Challenge:** Can you get Scrat to his acorn using as few blocks as possible?\n",
        "Course 4 SCFL 1b_markdown_instruction": "**For Loops Super Challenge:** Can you get Scrat to his acorn using as few blocks as possible?",
        "Course 4 SCFL 2_markdown_instruction": "**For-Loops Super Challenge:** Solve this puzzle with the fewest number of blocks possible.  \n<br/>",
        "Course 4 SCFL 3_markdown_instruction": "**For-Loops Super Challenge:** Can you figure out how to re-create this drawing? \n\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\" width=\"350px\"/>",
        "Course 4 SCFL 4_markdown_instruction": "**For-Loops Super Challenge:** Can you figure out how to re-create this drawing? \n\n<img src=\"https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png\" width=\"350px\"/>",
        "Course 4 SCFL 6_markdown_instruction": "**For-Loops Super Challenge:** Can you figure out how to re-create this drawing with a single loop? \n\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\" width=\"350px\"/>",
        "Course 4 SCFL 7_markdown_instruction": "**For-Loops Super Challenge:** The artist wants to catch some waves! Can you figure out how to re-create this drawing? \n\n<img src=\"https://images.code.org/fba3423f2e9a405d4d3859de32cdb0f3-image-1446102880655.13.36.png\" width=\"350px\"/>",
        "Course 4 SCFP 1_markdown_instruction": "Create a function with parameters that allows the artist to jump backward and forward by x pixels, and also up and down by y pixels (using positive and negative numbers).",
        "Course 4 SCV 1_markdown_instruction": "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\" width=\"250px\"/>\n\n**Variables Super Challenge:** You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?",
        "Course 4 SCV 2_markdown_instruction": "<img src=\"https://images.code.org/85f0b27009edd86eff78692004b9ed52-image-1444712655590.02.32.png\" width=\"250px\"/>\n\n**Variables Super Challenge:** You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?",
        "Course 4 SCV 4_markdown_instruction": "**Variables Super Challenge:** Solve this puzzle with the fewest number of blocks possible.",
        "Course 4 SCV 5_markdown_instruction": "**Variables Super Challenge:** Solve this puzzle with the fewest number of blocks possible.",
        "Course 4 SCV 6_markdown_instruction": "<img src=\"https://images.code.org/499fc71a0a06bacb68a9789ad57f8148-image-1445574373673.16.44.png\" width=\"250px\"/>\n\n**Variables Super Challenge:** You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?  ",
        "Course 4 SCVP 1_markdown_instruction": "Create a function with parameters that allows the artist to jump backward and forward by x pixels, and also up and down by y pixels (using positive and negative numbers).",
        "Course 4 Variables Assessment_markdown_instruction": "Can you create this image using a variable for `sides`? Each line should be 50 pixels long.",
        "CourseF_PlayLab_vars10_markdown_instruction": "Free Play time! Here are all of the variables we've played with so far in this stage, as well as a few more in case you want them. \n\nNotice that there are now so many blocks in our toolbox that they need to be organized!  Here, we've put each piece into an appropriate category.  Take some time to explore everything that is available. When you're done browsing, make a game or story using repeats, variables, and events.  \n\n*Hint: scroll down to see all the commands in the workspace.*",
        "CourseF_PlayLab_vars2_markdown_instruction": "The race in that last puzzle wasn't very fair! Change the `dog_speed` variable to make sure you can collect more flags than Cat. The first to collect 10 flags wins!",
        "CourseF_PlayLab_vars3_markdown_instruction": "Here's a new kind of game! \n\nYou don't need to change anything on this level.\n\n**Directions:** Use the left and right arrows to move, and the up arrow to jump. See if you can collect all of the flags.",
        "CourseF_PlayLab_vars4_markdown_instruction": "Now we're using a variable called `height` to control how high the dog can jump. Update the `height` variable so that the dog can jump high enough to reach all the flags. ",
        "CourseF_PlayLab_vars9_markdown_instruction": "Nice, now let's make sure this game isn't too easy to play!  \n\nAny time Dog (actor 1) gets hit by a sandwich from Cat (actor 2), you should lose a point. \n\nStart with 10 points so it's not too hard. Let your score drop down from 10 to 0 to pass the level.",
        "Crack Random Substitution_markdown_instruction": "# Break a random substitution cipher!\n\nThis version of the tool gives you more information about the encrypted text and more options for how to try out different substitutions.\n\n### Different ways to analyze text\n- Play with some of the sorting options available in the Random substitution cipher tab to get different views on the letter frequencies in the input text as well as standard English text.\n![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)\n\n### Different ways to substitute\n- To substitute a letter you can drag a blue letter of the alphabet directly underneath the orange letter you want changed in the original ciphertext.\n![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)\n\n### Play.  Always play.\n- There are other ways to analyze and substitute characters that you can find by clicking on the buttons and trying out whatever you like.\n- Remember: you can't break it :)\n\nSee how long it takes you to crack the cipher! Is this a good method of encrypting secret data?\n\n<img src=\"http://code.org/api/hour/finish_encryption.png\">",
        "Crack Random Substitution_2018_markdown_instruction": "# Break a random substitution cipher!\n\nThis version of the tool gives you more information about the encrypted text and more options for how to try out different substitutions.\n\n### Different ways to analyze text\n- Play with some of the sorting options available in the Random substitution cipher tab to get different views on the letter frequencies in the input text as well as standard English text.\n![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)\n\n### Different ways to substitute\n- To substitute a letter you can drag a blue letter of the alphabet directly underneath the orange letter you want changed in the original ciphertext.\n![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)\n\n### Play.  Always play.\n- There are other ways to analyze and substitute characters that you can find by clicking on the buttons and trying out whatever you like.\n- Remember: you can't break it :)\n\nSee how long it takes you to crack the cipher! Is this a good method of encrypting secret data?",
        "Crack a Caesar Cipher_markdown_instruction": "# Crack a Caesar cipher!\n\nThis tool lets you play with text and do Caesar ciphers. You can use this to either encrypt a message or decrypt it.\n\n# Do this\n- Load a **Sample message** from the message dropdown. This will load a message that has been encrypted with a Caesar cipher.\n\n![](https://images.code.org/347139486c8c729bf3c6e72ce67da878-image-1476286380409.gif)\n\n- Using the buttons in the Caesar substitution tab, you can shift the alphabet forwards or backwards to try to unscramble the message.\n\n![](https://images.code.org/ef9ebc16d2f1442dc46fba9bd48b5d43-image-1476285966821.gif)\n\nSee how long it takes you to crack the cipher! Is this a good method of encrypting secret data?\n\n<img src=\"http://code.org/api/hour/begin_encryption.png\">\n\n",
        "Crack a Caesar Cipher_2018_markdown_instruction": "# Crack a Caesar cipher!\n\nThis tool lets you play with text and do Caesar ciphers. You can use this to either encrypt a message or decrypt it.\n\n# Do this\n- Load a **Sample message** from the message dropdown. This will load a message that has been encrypted with a Caesar cipher.\n\n![](https://images.code.org/347139486c8c729bf3c6e72ce67da878-image-1476286380409.gif)\n\n- Using the buttons in the Caesar substitution tab, you can shift the alphabet forwards or backwards to try to unscramble the message.\n\n![](https://images.code.org/ef9ebc16d2f1442dc46fba9bd48b5d43-image-1476285966821.gif)\n\nSee how long it takes you to crack the cipher! Is this a good method of encrypting secret data?\n\n<img src=\"http://code.org/api/hour/begin_encryption.png\">\n\n",
        "D_Frozen_nested4_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"What happens if we draw snowflakes on top of each other?\"_\n\nTry layering two different shapes of snowflakes on top of one another with a little turn in between - see what you get! ",
        "D_Frozen_nested5_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Get creative with shapes and angles to see what kind of new snowflakes we can draw!\"_\n",
        "D_Frozen_nested7_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Now let’s turn and go back the way we came.\"_\n\nTurn around 180 degrees and draw the exact same stair pattern again!  \n\n- The rest of this stage will be easier if you put all of your code inside of a loop to make Elsa  draw, turn around 180 degrees, draw, then turn around 180 degrees again.\n\n<hr/>\n\nHere is an example of stairs that use a 76 degree turn:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)",
        "D_Frozen_nested9_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _\"Now, what should we do? Let’s explore and create our own winter wonderland!\"_\n\nTry playing around with what you've created. Draw whatever you like!\n- What happens if you use two different angles in your stair step pattern?\n- What happens if you make your diamond pattern longer or shorter?\n- What does it look like to draw two snowflakes on top of one another?\n",
        "Dance Party 1-validated_markdown_instruction": "**Make a prediction:** Here’s a sprite called `alien1`! \n\nWhat do you think will happen when you click on it?  ",
        "Dance Party 1-validated_simple_markdown_instruction": "**Make a prediction:** Here’s a sprite called `alien1`! \n\nWhat do you think will happen when you click on it?  ",
        "Dance Party 1_markdown_instruction": "**Make a prediction:** Here’s a sprite called `alien1`! What do you think will happen when you click on her?",
        "Dance Party 2 Validated_markdown_instruction": "The alien was proud of her dancing skills on Mars, but now she can only move side-to-side. Can you change the behavior inside the `begins` block to make her start spinning around?",
        "Dance Party 2_markdown_instruction": "The alien was proud of its dancing skills on Mars, but now it can only move side-to-side.  \n\nCan you change the behavior inside the <xml> <block type=\"gamelab_addBehaviorSimple\" inline=\"true\">\n      <value name=\"SPRITE\">\n        <block type=\"sprite_variables_get\">\n          <title name=\"VAR\">alien1</title>\n        </block>\n      </value>\n    </block></xml> block to make it start spinning around?  ",
        "Dance Party 2_simple_markdown_instruction": "The alien can only move left and right.\n\nChange the behavior inside the <xml> <block type=\"gamelab_addBehaviorSimple\" inline=\"true\">\n      <value name=\"SPRITE\">\n        <block type=\"sprite_variables_get\">\n          <title name=\"VAR\">alien1</title>\n        </block>\n      </value>\n    </block></xml> block to make the alien start turning.  ",
        "Dance Party 3 - Validated_markdown_instruction": "Create a new sprite called `alien2`.  \n\nMake it do a different dance move when it's clicked.  ",
        "Dance Party 3_markdown_instruction": "Create a new sprite called `alien2`.  \n\nMake it do a different dance move when it's clicked.  ",
        "Dance Party 3_simple_markdown_instruction": "Create a new sprite called `alien2`.\n\nWhen the new sprite is clicked, it should do something.",
        "Dance Party 4 Validated_markdown_instruction": "Create a third sprite called `alien3`.  \n\nCan you set all of your aliens to stand in a straight line? It's an alien dance crew!",
        "Dance Party 4_markdown_instruction": "Create a third sprite called `alien3`.  \n\nCan you set all of your aliens to stand in a straight line? It's an alien dance crew!",
        "Dance Party 4_simple_markdown_instruction": "Create a third sprite called `alien3`.  \n\nPlace all of your aliens in a straight line. It's an alien dance party!",
        "Dance Party 5 - Validated_markdown_instruction": "We can change all kinds of things in this program when you click on the sprites.  Let’s change their color!  \n\n**Add code to change the color of each alien when it gets clicked.**",
        "Dance Party 5_markdown_instruction": "We can change all kinds of things in this program when you click on the sprites.  Let’s change their color!  \n\n**Add code to change the color of each alien when it gets clicked.**",
        "Dance Party 5_simple_markdown_instruction": "You can change many things in this program.\n\nAdd code to change the color of each alien when it gets clicked.",
        "Dance Party 6 - Validated_markdown_instruction": "These aliens are running wild!  \n\nUse the <xml><block type=\"gamelab_removeAllBehaviors\" inline=\"true\">\n      <value name=\"SPRITE\"/>\n    </block></xml> block to make each alien stop moving when it is clicked.",
        "Dance Party 6_markdown_instruction": "These aliens are running wild!  \n\nUse the <xml><block type=\"gamelab_removeAllBehaviors\" inline=\"true\">\n      <value name=\"SPRITE\"/>\n    </block></xml> block to make each alien stop moving when it is clicked.",
        "Dance Party 6_simple_markdown_instruction": "These aliens are too busy!  \n\nUse the <xml><block type=\"gamelab_removeAllBehaviors\" inline=\"true\">\n      <value name=\"SPRITE\"/>\n    </block></xml> block to make each alien stop moving when it is clicked.",
        "Dance Party 7 - Validated_markdown_instruction": "Finally, add a new bell sprite called `myBell`.  \n\nWhen you click on it, make all the aliens start doing the same dance move!",
        "Dance Party 7_markdown_instruction": "Finally, add a new bell sprite called `myBell`.  \n\nWhen you click on it, make all the aliens start doing the same dance move!",
        "Dance Party 7_simple_markdown_instruction": "Finally, add a new bell sprite called `myBell`.  \n\nWhen you click on it, make all the aliens start doing the same dance move!",
        "Dance Party Freeplay_markdown_instruction": "Now create your own alien disco! Looking for inspiration? Try these ideas:\n* Create two bell sprites, and make the aliens do a different dance move for each\n* Make the aliens do a new dance move whenever they touch each other",
        "Dance Party Freeplay_simple_markdown_instruction": "Now make a new alien dance party!  Here are some ideas:\n* Create two bell sprites, and make the aliens do a different dance move for each\n* Make the aliens do a new dance move whenever they touch each other",
        "Dance Party Predict_markdown_instruction": "**Make a prediction:** Here’s a sprite called `alien1`!   \n\nWhat do you think will happen when you click on it?  ",
        "Dance Party Predict_simple_markdown_instruction": "**What do you think?** \n\nHere’s a sprite called `alien1`!   \n\nWhen you click on it, what will it do?  ",
        "Data Visualizations 101_markdown_instruction": "## Data Visualization 101: How to design charts and graphs\n\nIn lesson 10, students evaluate a curated set of visualizations based on how effective they are at clearly and accurately communicating what they're representing. After they've done this evaluation for themselves, they explore this resource, which formally introduces the names of the different types of charts they've been seeing and goes into detail about what types of data each chart can represent most appropriately, as well as best practices for designing each type of chart.\n\n",
        "Designing Assessment Questions_markdown_instruction": "## Designing Test Questions\n\nThe following resource is from the University of North Carolina Charlotte's Center for Teaching and Learning. In it you will find a breakdown of the uses and tradeoffs for common assessment types, along with tips for writing good items.\n\n\n",
        "Discovery Learning: Definition and History_markdown_instruction": "The following link is a resource that shows some of the history behind discovery learning: ",
        "Discovery Learning: Principals and Techniques_markdown_instruction": "The following link is a resource that shows the principles and techniques of discovery learning: ",
        "Discovery Learning: Principles and Techniques_markdown_instruction": "The following link is a resource that shows the principles and techniques of discovery learning: ",
        "Discovery learning definition and history_markdown_instruction": "The following link is a resource that shows some of the history behind discovery learning: ",
        "Discovery learning techniques_markdown_instruction": "The following link is a resource that shows the principles and techniques of discovery learning: ",
        "ECS Unit 2 Challenge Selection_markdown_instruction": "# Challenge Overview > What's your Challenge? \n\n## Enter the lesson you selected for your challenge in the text box below.\n\n- Day 7-9: CSDT Cornrow Braiding\n- Day 10-12: Binary\n- Day 13-14: Linear and Binary Search (Tower Building) \n- Day 15-16: Sorting \n- Day 17: Minimal Spanning Trees\n- Day 18-21: Unit Final Project\n\nNow that you've selected a lesson, head to the forum and **share which lesson you plan to complete** for your challenge.\n\n#### <a href=\"http://forum.code.org/c/ecs/ecs-unit2\" target=_blank>Forums <i class=\"fa fa-external-link\" /></a>",
        "ECS Unit 3 Challenge Selection_markdown_instruction": "# Challenge Overview > What's your Challenge? \n\n## Enter the lesson you selected for your challenge in the text box below.\n\nHTML Beginners:\n\n- Day 3-4,5: Basic HTML - Paragraph, Header, Strong, and EM Tags\n- Day 6--7: HTML - Images\n- Day 14: HTML - Links\n\nCSS Beginners:\n\n- Day 8-10: Basic CSS \n\nMore Experienced with HTML and CSS:\n\n- Day 11-13: HTML and CSS \n- Day 17-19: HTML and CSS: Create Your Own Webpage\n- Day 22-25: Unit Final Project\n- Day 18-21 Final Unit Project\n\n\nNow that you've selected a lesson, head to the forum and **share which lesson you plan to complete** for your challenge.\n\n#### <a href=\"http://forum.code.org/c/ecs/ecs-unit3\" target=_blank>Forums <i class=\"fa fa-external-link\" /></a>",
        "ECS Unit 4 Challenge Selection_markdown_instruction": "# Challenge Overview > What's your Challenge? \n\n## Enter the lesson you selected for your challenge in the text box below.\n\nNew to Programming?\n\n- Day 2-3: Scratch - Name Project\n- Day 4: Scratch - Knock Knock Joke\n- Day 5-6: Scratch - Moving Sprites \n\nNew to Scratch:\n\n- Day 7-8: Scratch - Event Driven Programming\n- Day 9: Scratch - Broadcast Roleplay\n- Day 10-13: Scratch - Broadcasting\n\nSome Experience with Scratch and Programming:\n\n- Day 18, 19: Rock Paper Scissors and Timer\n- Day 20-23: Scratch - Timing Game\n- Day 25-30: Unit Final Project\n\n\n\nNow that you've selected a lesson, head to the forum and **share which lesson you plan to complete** for your challenge.\n\n#### <a href=\"http://forum.code.org/c/ecs/ecs-unit4\" target=_blank>Forums <i class=\"fa fa-external-link\" /></a>",
        "ECS Unit 5 Challenge Selection_markdown_instruction": "# What's your Challenge? \n\n## Enter the lesson you selected for your challenge in the text box below.\n\n- Day 1 - 3: Room data project, set up final project\n- Day 4 - 5: Developing research questions\n- Day 6 - 7: Building group norms\n- Day 8: Check in Day\n- Day 9 - 11: Maps, identifying variables, subsetting data, sorting data, frequency of types.\n- Day 12: Bubble Charts\n- Day 13: Review: Bubble Charts\n- Day 14 - 15: Bar Plots\n- Day 16: Mosaic Plots\n- Day 17: Review: Bar and Mosaic Plots\n- Day 18 - 20: Mean, Median, Minimum, Maximum, Histograms, Box Plots\n- Day 21: Review: Mean, Median, Minimum, Maximum\n- Days 22 - 24: Filtering Text data (remove punctuation, remove case, remove stop words, stemming), Analyzing word counts.\n- Day 25: Review: Text Data\n- Day 26 - 27: Incorporate  data techniques into final project\n- Day 28 - 29: Build project presentations\n- Day 30: Present final project\n\nNow that you've selected a lesson, head to the forum and **share which lesson you plan to complete** for your challenge.\n\n#### <a href=\"http://forum.code.org/c/ecs/ecs-unit5\" target=_blank>Forums <i class=\"fa fa-external-link\" /></a>",
        "ECS Unit 6 Challenge Selection_markdown_instruction": "# Unit 6 Challenge Selection\n\n## Enter the lesson you selected for your challenge in the text box below.\n \nFrom the curriculum\n\n- Day: 1 What is a robot / what makes a computer robotic?\n- Days: 2-3 Evaluate robot body designs and  algorithms that control robot behavior\n- Day: 4 Set up the Lego kit\n- Day: 5 Build robot base\n- Day: 6-7 Introduce NXT brick features\n- Day: 8-9 Introduce NXT software\n- Day: 10-13 Program robot using tutorials (using sensors for input)\n- Day: 14 Describe RoboCup & RoboCupJunior\n- Day: 15 Human robot tic-tac-toe\n- Days: 16-18 Program dancing robot\n- Days 19-23 Program rescue robot\n- Days 24-33 Final projects and presentations\n\nAlternative Topics\n\n- Online simulations\n- Physical computing options\n- Projects and portfolios\n\nNow that you've selected a challenge topic, **share what you plan to do** for your challenge.\n\n#### <a href=\"http://forum.code.org/c/ecs/ecs-unit6\" target=_blank>Head to the Forums <i class=\"fa fa-external-link-square\" /></a>",
        "ECSPD Binary Odometer_markdown_instruction": "# Binary Odometer Widget\n\nThis widget was created as part of the Code.org Computer Science Principles class. It is a great additional resource for teaching binary!\n",
        "ECSPD Fence post Q1_markdown_instruction": "## Fence Post Problem:\n\nYou need to build one side of a fence that is 12 yards long. This fence will be built with fence posts and rails that connect one fence post to another. If each fence post is 1 yard away from the next fence post, how many fence posts will be needed for this side of the fence? How many fence posts will be needed for a side of a fence that is N (where N > 0) yards long?\n",
        "ECSPD Handshake Q1_markdown_instruction": "## Handshake Problem #1:\n\nAssume there are 20 people in a room, including you. You must shake hands with everyone else in the room. How many hands will you shake? If there are N (where N>0) people in the room, how many hands will you shake?\n",
        "ECSPD Online U1D1-2 Assessment 1_markdown_instruction": "Did you have coffee this morning? If you did, odds are you used a computer. If you made the coffee yourself, your coffee maker probably had a digital clock or a programmable timer. If you bought it, the barista likely used a card reader with an electronic cash register to take your payment. Think through your day and record how many computers you used before sitting down in front of a desktop or a laptop (or whatever device you are using right now). Don't forget the computers in your car, your refrigerator, your alarm clock...\n",
        "ECSPD Online U1D1-2 Reflection_markdown_instruction": "You have experienced the lesson both online and on the first day of the in-person PD. Additionally, you have watched a video defining computers. What have you learned that you can take back to your classroom? Use this space to record your ideas for this lesson. You will have a chance to share your ideas and questions in a forum in the following level.\n",
        "ECSPD Online U1D10 Reflection_markdown_instruction": "You have experienced the lesson both online and on the first day of the in-person PD. Additionally, you have watched a TED talk about the representation of data. What have you learned that you can take back to your classroom? Use this space to record your ideas for this lesson. You will have a chance to share your ideas and questions in a forum in the following level.",
        "ECSPD Online U1D11-14 Reflection_markdown_instruction": "You have experienced part of this lesson online and have investigated other design tools. What have you learned that you can take back to your classroom? How will you tackle this lesson's unique challenges? Use this space to record your ideas for this lesson. You will have a chance to share your ideas and questions in a forum in the following level.\n",
        "ECSPD Online U1D15-16 Reflection_markdown_instruction": "You have experienced the lesson on the first day of the in-person PD and have watched a TED talk about the extent of the use of algorithms in the world. What have you learned that you can take back to your classroom? Use this space to record your ideas for this lesson. You will have a chance to share your ideas and questions in a forum in the following level.",
        "ECSPD Online U1D17-19 Assessment_markdown_instruction": "Take some time to look over the lesson and the unplugged activity. Think about your classroom and the space you have available to run the Turing Test Activity. How are you planning to set up your classroom to best facilitate the Turing Test Activity?",
        "ECSPD Online U1D17-19 Reflection_markdown_instruction": "This is the last lesson in the unit. How does it combine what was covered previously in the unit? Now that you have taken time to examine this lesson, what have you learned that you can take back to your classroom? Use this space to record your ideas for this lesson. You will have a chance to share your ideas and questions in a forum in the following level.",
        "ECSPD Online U1D3-4 Reflection_markdown_instruction": "You have experienced part of this lesson online and studied the components of computers. What have you learned that you can take back to your classroom? Use this space to record your ideas for this lesson. You will have a chance to share your ideas and questions in a forum in the following level. ",
        "ECSPD Online U1D5-7 Reflection_markdown_instruction": "You have experienced this lesson in person and have examined additional resources online. What have you learned that you can take back to your classroom? Use this space to record your ideas for this lesson. You will have a chance to share your ideas and questions in a forum in the following level.",
        "ECSPD Online U1D8-9 Assessment_markdown_instruction": "List three points either from the articles or the lesson plan that you would want to discuss with your class. Describe one strategy you plan to use to facilitate discussion.",
        "ECSPD Online U1D8-9 Reflection_markdown_instruction": "You have experienced part of this lesson online and have read a few articles regarding the impact of computers and the internet on communication. What have you learned that you can take back to your classroom? Use this space to record your ideas for this lesson. You will have a chance to share your ideas and questions in a forum in the following level.",
        "ECSPD Online U1Reflection_markdown_instruction": "## Telling the story of Unit 1\n\nNow that you've explored all of the lessons and resources from Unit 1, how would you describe the learning that happens? \n\nIn a few sentences, tell the story of Unit 1, how the lessons relate and build off one another, and what students will walk away with.\n",
        "ECSPD Personal Problem Solving Strategies_markdown_instruction": "# Problem Solving Strategies\n### Make a list of Problem Solving Strategies\n\nWe have all learned different problem solving strategies through out our lives. Some work all the time and others only in certain situations. Make a list of all the problem solving strategies you can think of. You will continue to add to this list over the course of this unit PD. You can also share strategies or find new strategies on the forum.\n\n### <strong><a href=\"http://forum.code.org/t/pd-discussion-topic-problem-solving-strategies/2086/1\" target=\"_blank\">Problem Solving Strategies>></a></strong>\n<br>\n\n**Each time you see this page pop up think about the problem solving strategies you and your students will need for the current lesson. Then add to the list if you think of new things.**\n",
        "ECSPD course goals_markdown_instruction": "# Documenting Your Course Goals\n\n## Now that you know more about the ECS curriculum, let's consider your goals\n\n**What are your goals for your ECS class?** *These goals will change over time, and we'll revisit this your response as we go through PD so we can check in on how we're progressing towards those goals.*\n\n**NOTE:** remember you can change the size of the text box by clicking and dragging the bottom-right corner of the box.\n",
        "ECSPD impact in program_markdown_instruction": "\n\n#### What connections do you think might exist between the ideas covered in the videos you just watched and the units of ECS that you learned about earlier?\n",
        "ECSPD program overlap_markdown_instruction": "\n#### Now that you've read more about the ECS program, what relationship do you see between the curriculum and Professional Development? What aspects of the two piece of the program seem most important or interesting to you?\n",
        "ECSPD strategies_markdown_instruction": "# Classroom Strategies Journal\n\nThis space is your **digital journal for documenting strategies** you've picked up during Professional Development and while teaching the course. We'll revisit this in online pd for each unit, and you should refer back to it while planning lessons to remind yourself of strategies you want to try in class. \n\n\n",
        "ECSPD your goals_markdown_instruction": "__What are your goals for your ECS class?__ *These goals will change over time, and we'll revisit this your response as we go through the course so we can check in on how we're progressing towards those goals.*\n",
        "ECSPD3-u5 pick a challenge_markdown_instruction": "# Challenge Overview > What's your Challenge? \n\n## Enter the lesson you selected for your challenge in the text box below.\n\n- Day 1 - 3: Room data project, set up final project\n- Day 4 - 5: Developing research questions\n- Day 6 - 7: Building group norms\n- Day 8: Check in Day\n- Day 9 - 11: Maps, identifying variables, subsetting data, sorting data, frequency of types.\n- Day 12: Bubble Charts\n- Day 13: Review: Bubble Charts\n- Day 14 - 15: Bar Plots\n- Day 16: Mosaic Plots\n- Day 17: Review: Bar and Mosaic Plots\n- Day 18 - 20: Mean, Median, Minimum, Maximum, Histograms, Box Plots\n- Day 21: Review: Mean, Median, Minimum, Maximum\n- Days 22 - 24: Filtering Text data (remove punctuation, remove case, remove stop words, stemming), Analyzing word counts.\n- Day 25: Review: Text Data\n- Day 26 - 27: Incorporate  data techniques into final project\n- Day 28 - 29: Build project presentations\n- Day 30: Present final project\n\nNow that you've selected a lesson, head to the forum and **share which lesson you plan to complete** for your challenge.\n\n#### <a href=\"http://forum.code.org/c/ecs/ecs-unit5\" target=_blank>Forums <i class=\"fa fa-external-link\" /></a>",
        "ECSPD3-u5 submit forum link_markdown_instruction": "# Share Out and Submit > Submit Link\n\n##  Submit the Link for your Forum Post for Review\n\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "ECSPD3-u5 submit_markdown_instruction": "# Share Out and Submit > Submit Link\n\n##  Submit the Link for your Forum Post for Review\n\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "ECSPD3-u6 pick a challenge_markdown_instruction": "# Unit 6 Challenge > What's your Challenge?\n\n## Enter the lesson you selected for your challenge in the text box below.\n \nFrom the curriculum\n\n- Day: 1 What is a robot / what makes a computer robotic?\n- Days: 2-3 Evaluate robot body designs and  algorithms that control robot behavior\n- Day: 4 Set up the Lego kit\n- Day: 5 Build robot base\n- Day: 6-7 Introduce NXT brick features\n- Day: 8-9 Introduce NXT software\n- Day: 10-13 Program robot using tutorials (using sensors for input)\n- Day: 14 Describe RoboCup & RoboCupJunior\n- Day: 15 Human robot tic-tac-toe\n- Days: 16-18 Program dancing robot\n- Days 19-23 Program rescue robot\n- Days 24-33 Final projects and presentations\n\nAlternative Topics\n\n- Online simulations\n- Physical computing options\n- Projects and portfolios\n\nNow that you've selected a challenge topic, **share what you plan to do** for your challenge.\n\n#### <a href=\"http://forum.code.org/c/ecs/ecs-unit6\" target=_blank>Head to the Forums <i class=\"fa fa-external-link-square\" /></a>",
        "ECSPD3-u6 submit forum link_markdown_instruction": "# Share Out and Submit > Submit Link\n\n##  Submit the Link to your Forum Post for Review\n\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review!\n\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below): \n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "ECSU3 Challenge Submission_markdown_instruction": "# Share Out and Submit > Submit Link\n\n##  Submit the Link for your Forum Post for Review\n\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a dirct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "ECSU4 Challenge Submission fin_markdown_instruction": "# Share Out and Submit > Submit Link\n\n##  Submit the Link for your Forum Post for Review\n\nYou've just shared your Challenge work on the forum. If you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "Escape Room Example_markdown_instruction": "# Room Escape\n\nIn today's workshop you are going to be working on making a room escape app!  This level has an example app that you should play around with to get the feel for what you will be creating.\n\n# Do This\n\n* Click RUN to start the app\n* Try to find the key that will open the door.",
        "Eval Booleans 1_markdown_instruction": "Boolean operators (like >, <, =) allow us to compare different values, returning either *true* or *false*. Click \"Run\" to see how this expression evaluates.",
        "Eval Booleans 2_markdown_instruction": "Can you set the values so that this expression evaluates as *true*?",
        "Eval Booleans 3_markdown_instruction": "The `string-length` function returns the number of characters in a string (including spaces!) - make this code evaluate to *true*.",
        "Eval Booleans 4_markdown_instruction": "Here's an Evaluation Block called `and` - it returns *true* if both of its parameters are *true*, otherwise it returns *false*. Edit the x variable so that this expression returns *true*.",
        "Eval Booleans 5_markdown_instruction": "This `or` block returns *true* if either of its parameters is *true*. Otherwise, if both parameters are *false* it will return *false*. Set the y variable to a value that will cause this expression to return *false*.",
        "Eval Booleans 6_markdown_instruction": "Here's one more boolean block called `not`. This block flips *true* to *false*, or *false* to *true*. If you wrap this block of code in a NOT block, it should return *true* (because we are asking if the two expressions do NOT produce equal values).",
        "Eval Booleans Free Play_markdown_instruction": "Free Play: Try out some creations of your own using Booleans.",
        "Eval Cond 4_markdown_instruction": "We can use the `string=?` function to make conditionals that respond to text input. Here's a function called `green shape` that takes a string for the type of shape. Complete the conditions so that the correct solid green shape is returned when the function is run with \"circle\", \"triangle\", \"square\", or \"rectangle\".",
        "Eval Cond 5_markdown_instruction": "Here's a similar function `red shape` with an additional variable for size. Complete the conditionals so the correct solid red image of a given size is drawn for \"circle\", \"triangle\", and \"star\".",
        "Eval Contracts 4_markdown_instruction": "The `scale` function returns an image that is either larger or smaller than the input image. Try scaling this circle by a factor of 10. How is the returned image different than if you'd just made a circle of that size in the first place?",
        "Eval Contracts A_markdown_instruction": "Use the `star` function to produce a solid red star with a 60 pixel radius",
        "Eval Contracts C_markdown_instruction": "Check out the `rotate` function - can you use it to rotate this 90 pixel green square by 45 degrees?",
        "Eval Contracts E_markdown_instruction": "Try using the `text` function to write this \"Hello, world!\" in teal at size 40.",
        "Eval Define Funcs 1_markdown_instruction": "Here's a new function called `green-triangle` that takes a single Number for size and produces a green triangle. Use the new function to create a 125 pixel green triangle",
        "Eval Define Funcs 2_markdown_instruction": "Let's look inside that `green-triangle` function to see how it works. Can you modify it so that the `green-triangle` function always draws outlined green triangles? **Don't forget to change the examples too!**",
        "Eval Define Funcs 3_markdown_instruction": "Here's the start of another new function called `purple-circle` with a domain of one Number (the radius) and a range of Image. The body of the function is broken though, it always draws a circle of 50 pixel radius instead of using the radius parameter. Replace the current Number with the `radius` block from the domain.\n\nWhen you've fixed the function, test your new function with a 150 pixel radius.",
        "Eval Define Funcs 4_markdown_instruction": "Create a new function called `aqua-star` that has a Domain of a single Number for radius and returns an aqua star of the given radius. Run your new function with a radius of 75.",
        "Eval Define Funcs 5_markdown_instruction": "Let's use that `aqua-star` function to make a row of different sized stars. From left to right, the stars should have radii of 25, 50, and 75.",
        "Eval Define Funcs Test_markdown_instruction": "Here's the start of another new function called `purple-circle` with a domain of one Number (the radius) and a range of Image. The body of the function is broken though, it always draws a circle of 50 pixel radius instead of using the radius parameter. Replace the current Number with the `radius` block from the domain.\n\nWhen you've fixed the function, test your new function with a 150 pixel radius.",
        "Eval Defining Vars Free Play 1_markdown_instruction": "Free Play: We've provided a function that fills your screen with `my-image`. Change `my-image` to see what patterns you can make.",
        "Eval Design Recipe .1_markdown_instruction": "Here's a Design Recipe for a function called `square-circle` with domain Number String and range Image. Click Edit to write the function definition (you will see two examples provided).",
        "Eval Design Recipe 3_markdown_instruction": "The Design Recipe for `wide-rect` already has a contract and one example. Can you write a second example and then complete the definition? The `wide-rect` function should produce a rectangle of given color that is twice as wide as it is high.",
        "Eval Design Recipe 4_markdown_instruction": "Use the Design Recipe to create a function `starburst`. When given a number of points and an outer radius, `starburst` returns a yellow radial star with given points, and an inner radius that is half the outer radius.",
        "Eval Design Recipe 5_markdown_instruction": "Write a function `striped-flag` that takes two colors and produces a flag that is 250 pixels wide, 150 pixels tall, with three even horizontal stripes of given colors, in the order color2, color1, color2.",
        "Eval Design Recipe 6_markdown_instruction": "Write a function `large-polygon` that should output a solid polygon of given sides and color that takes up most of the window, regardless of the number of sides. To make sure that the polygon doesn't get too large as you increase the number of sides, side length should be inversely proportional to side number, with a length of **(800/sides)**.",
        "Eval Design Recipe Free Play_markdown_instruction": "Free Play: Use the Design Recipe to create some functions of your own design",
        "Eval Strings Images .1_markdown_instruction": "So far we've only dealt with a single type of data, Numbers. Another type of data is a String, which is any combination of letters, numbers, or other characters wrapped in quotation marks. Run the String \"Hello, world!\" and see what happens.",
        "Eval Strings Images .2_markdown_instruction": "The `string-append` function takes two Strings and returns a single combined String. Add a String \"Universe\" to the second argument of `string-append`.",
        "Eval Strings Images 1_markdown_instruction": "The third type of data we're going to use is an Image. This `star` function takes in a Number and two Strings, and it evaluates to an Image. Use this function to make a solid red star with radius of 100.",
        "Eval Strings Images 2_markdown_instruction": "Free Play: Every Evaluation Block is color-coded to let you know which data type it returns and which types it needs for its parameters. The last parameter of the triangle function takes a String that controls its color - try some different colors to see what works.",
        "Eval Strings Images 3_markdown_instruction": "Some functions can only take a specific set of Strings, such as the second argument of this `circle` function, which controls its style. Draw this orange outline circle using the special String block with a dropdown to make sure you only use valid styles.",
        "Eval Strings Images 4_markdown_instruction": "Try using the `rectangle` block to draw this solid, red rectangle - it is 175 pixels wide and 100 pixels tall.",
        "Eval Strings Images 5_markdown_instruction": "Try using this new Evaluation Block called `overlay` to place a 100 pixel white triangle on top of a 200 pixel red circle.",
        "Eval Strings Images 6_markdown_instruction": "Use the overlay block to place a 75 pixel radius yellow star on top of a 150 pixel long blue square.",
        "Eval Strings Images 7_markdown_instruction": "The `offset` block lets you move an image relative to where it would normally be placed. Use this block to offset the square by 100 pixels on the y-axis.",
        "Eval Strings Images 8_markdown_instruction": "Here's a different kind of star block - it's called `radial-star` and it allows you to draw stars with any number of points! Use it to create a 7 point solid orange star with an inner radius of 75 pixels and an outer radius of 175 pixels.",
        "Eval Strings Images Free Play_markdown_instruction": "Free Play: Explore the blocks available to create something interesting. Make sure to share your favorite creations.",
        "Final Personal Website - OLD_markdown_instruction": "# Personal Website\n\nThis is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.\n\n# Do This\n\n* Define: Read the rubric so you know what is expected\n* Plan: Decide what you still need to work on and put those things in priority order\n* Try: Implement your improvements to your personal website.\n* Reflect: Get feedback from a classmate and decide what of that feedback to act on.\n\nDon't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website </a>.*)",
        "Final Personal Website_markdown_instruction": "# Personal Website\n\nThis is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.\n\n# Do This\n\n* Define: Read the rubric so you know what is expected\n* Plan: Decide what you still need to work on and put those things in priority order\n* Try: Implement your improvements to your personal website.\n* Reflect: Get feedback from a classmate and decide what of that feedback to act on.\n\nDon't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\">website </a>.*)",
        "Final Personal Website_2018_markdown_instruction": "# Personal Website\n\nThis is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.\n\n# Do This\n\n* Define: Read the rubric so you know what is expected\n* Plan: Decide what you still need to work on and put those things in priority order\n* Try: Implement your improvements to your personal website.\n* Reflect: Get feedback from a classmate and decide what of that feedback to act on.\n\nDon't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href=\"http://www.take-a-screenshot.org/\" target=\"_new\">website </a>.*)",
        "Final Room Escape App_markdown_instruction": "# You've done it!\n\nYou made a room escape! Now its time to customize it. \n\nConsider:\n\n* Add more style to the room\n* Adding more things users can interact with in the room\n* Try to make your secret code random\n* Adding more rooms",
        "Finalize Your Chaser Game v.1_markdown_instruction": "# Add an Image and Make a Chaser Game!\n<img src=\"https://images.code.org/ed1e9852b33ca368cf8cd8e0b0159de7-image-1444336815528.gif\" style=\"float: right\">\n\n**Now You Try it** - add an image to your app and modify the code so that the image jumps around the screen rather than the button.  Your little game should have:\n\n* **Text** on the top of the screen with a title or instructions for what to do.\n* **An image** that \"runs away\" (moves randomly) based on some mouse event.\n\n**Tips:**\n  * **Hint** - the easy way to do this is to simply change the IDs in `onEvent` and `setPosition` to respond to the image instead of the button.\n  * Remove the button from the app after the image is working.  We don't need it anymore.\n  * Change the label text so that the instructions make sense for your game.\n  * The game is even more fun if you use  the `mouseover` event instead of `click`\n\n**Optional Extensions**:\n  * Make the background interesting\n  * Add another image that runs away.\n  * See what happens with the commands `hideElement` and `showElement`\n  * Have two UI elements where interacting with one controls or does something to the other.\n\n**Finalize your \"Chaser Game v.1\"** and click Finish.\n\n  * **Note**: We'll revisit this game in the next lesson where you can improve it.  This is **just version 1**\n\n",
        "Finalize Your Chaser Game v.1_2018_markdown_instruction": "# Add an Image and Make a Chaser Game!\n<img src=\"https://images.code.org/ed1e9852b33ca368cf8cd8e0b0159de7-image-1444336815528.gif\" style=\"float: right\">\n\n**Now You Try it** - add an image to your app and modify the code so that the image jumps around the screen rather than the button.  Your little game should have:\n\n* **Text** on the top of the screen with a title or instructions for what to do.\n* **An image** that \"runs away\" (moves randomly) based on some mouse event.\n\n**Tips:**\n  * **Hint** - the easy way to do this is to simply change the IDs in `onEvent` and `setPosition` to respond to the image instead of the button.\n  * Remove the button from the app after the image is working.  We don't need it anymore.\n  * Change the label text so that the instructions make sense for your game.\n  * The game is even more fun if you use  the `mouseover` event instead of `click`\n\n**Optional Extensions**:\n  * Make the background interesting\n  * Add another image that runs away.\n  * See what happens with the commands `hideElement` and `showElement`\n  * Have two UI elements where interacting with one controls or does something to the other.\n\n**Finalize your \"Chaser Game v.1\"** and click Finish.\n\n  * **Note**: We'll revisit this game in the next lesson where you can improve it.  This is **just version 1**\n\n",
        "Fish Tank 1-validated_markdown_instruction": "**Make a prediction**: What do you think will happen when you run this code?",
        "Fish Tank 1-validated_simple_markdown_instruction": "**What do you think?**: When you run this code, what will it do?",
        "Fish Tank 1_markdown_instruction": "**Make a prediction**: What do you think will happen when you run this code?",
        "Fish Tank 2-validated_markdown_instruction": "Let's make a fish tank!  \n\nChange Dusty (the tumbleweed) to a fish.",
        "Fish Tank 2-validated_simple_markdown_instruction": "Change Petal (the flower) to a fish.",
        "Fish Tank 2_markdown_instruction": "We're going to make a fish tank. Change the Dusty the tumbleweed to a fish.",
        "Fish Tank 3-validated Ram_markdown_instruction": "The fish is getting dizzy! \n\nChange the fish's behavior so that it swims around the tank.",
        "Fish Tank 3-validated_markdown_instruction": "The fish is getting dizzy! \n\nChange the fish's behavior so that it swims around the tank.",
        "Fish Tank 3-validated_simple_markdown_instruction": "The fish should swim! \n\nMake the fish swim around the tank.",
        "Fish Tank 3_markdown_instruction": "All this spinning is going to make our fish dizzy! Change the fish's behavior to make it swim around the tank.",
        "Fish Tank 4-validated_markdown_instruction": "Our fish tank needs some water! \n\nUse <xml><block type=\"gamelab_setBackground\" inline=\"true\">\n    <value name=\"COLOR\">\n      <block type=\"colour_picker\">\n        <title name=\"COLOUR\">#0000ff</title>\n      </block>\n    </value>\n  </block></xml> to make the background blue.",
        "Fish Tank 4-validated_simple_markdown_instruction": "The fish needs water! \n\nUse <xml><block type=\"gamelab_setBackground\" inline=\"true\">\n    <value name=\"COLOR\">\n      <block type=\"colour_picker\">\n        <title name=\"COLOUR\">#0000ff</title>\n      </block>\n    </value>\n  </block></xml> to make the background blue.",
        "Fish Tank 4_markdown_instruction": "Our fish tank needs some water! Use the `set background color` block to make the background blue.",
        "Fish Tank 5-validated_markdown_instruction": "Our fish is getting a little lonely. Add another sprite to the fish tank.",
        "Fish Tank 5-validated_simple_markdown_instruction": "The fish wants a friend.   Add a new sprite.",
        "Fish Tank 5_markdown_instruction": "Our fish is getting a little lonely. Create a new sprite inside the fish tank.",
        "Fish Tank 6-validated_markdown_instruction": "What do you want your fish’s new friend to do?   \n\nAdd a behavior and watch them go!",
        "Fish Tank 6-validated_simple_markdown_instruction": "What should the new friend do?   \n\nGive the friend a new behavior!",
        "Fish Tank 6_markdown_instruction": "What do you want your fish’s friend to do? Add a behavior and watch them go!",
        "Fish Tank 7-validated_markdown_instruction": "We've added a lot of new blocks to the toolbox.   \n\nPlay with them to make your fish tank special!",
        "Fish Tank 7-validated_simple_markdown_instruction": "There are a lot of new blocks.   \n\nPlay with them to make your fish do new things!",
        "Fish Tank 7_markdown_instruction": "There are a lot of new blocks in the toolbox. Play with them to make your fish tank special.",
        "Fish Tank Predict_markdown_instruction": "**Make a prediction**: What do you think will happen when you run this code?",
        "Fish Tank Predict_simple_markdown_instruction": "**What do you think?**\n\nWhen you run this code, what will it do?",
        "Fish Tank Template_markdown_instruction": "Project Template",
        "Fish Tank Template_simple_markdown_instruction": "Project Template",
        "Formative versus Summative Assessment_markdown_instruction": "The following link is a resource that provides definitions and examples of formative and summative assessments:",
        "Frequency Analysis_markdown_instruction": "# Break a random substitution cipher!\n\nMessages encrypted with the **Caesar cipher** are very easy to crack. What if instead of shifting the whole alphabet, we mapped every letter of the alphabet to a random different letter of the alphabet? This is called a **random substitution cipher**.\n\nIn this version of the tool, you'll be interacting more with the graphs that show letter frequency. By analyzing the frequency of the letters in the encrypted input message compared to the frequency of letters in a typical piece of English prose, you can start to narrow in on what some of the letter mappings might be. Did you know that *'E'* is the most common letter used in the English language? Maybe the most common letter in your encrypted text maps to the letter *'E'*, but maybe not! You'll have to do a bit of guess and check to see if that substitution makes sense.\n\n\n# Do this\n- Load the **Sample message (hard)** from the message dropdown. This will load a message that has been encrypted with a random substitution cipher.  \n![](https://images.code.org/04c6230c9607110126581c298bc09183-image-1443569176380.gif)\n\n- You will crack the message by guessing what each letter of the alphabet contained in the original ciphertext should be changed to. You can do so by dragging the blue letters of the alphabet directly underneath the orange letter you want changed in the original ciphertext. Letters that have been changed using your guesses will no longer be highlighted orange in the message window on the left.\n![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)\n\n- Play with some of the sorting options available in the Random substitution cipher tab to get different views on the letter frequencies in the input text as well as standard English text.\n![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)\n\nSee how long it takes you to crack the cipher! Is this a good method of encrypting secret data?\n\n",
        "Function intro Ryan_markdown_instruction": "A **function** named `build bridge` is in your workspace.  All of the code you need to cross the river is built right in! \n \nSnap the small, green <xml> <block type=\"procedures_callnoreturn\" id=\"callMe\"><mutation name=\"build bridge\"/></block></xml> block into your workspace twice to fix the path and get {currentPlayerName} to the Redstone Torch [redstone_torch].",
        "GLJ_Crawl_Exemplar_1_markdown_instruction": "**Free Play**: Try using what you've learned to make something new. Make sure to explore some of the new blocks in the toolbox.",
        "GLJr_Behavior_7_markdown_instruction": "Check out these two new blocks - the green \"When dog is touching cat\" block will run everything attached to it when the dog touches the cat, and the \"Remove behavior\" block removes a behavior from a sprite.\n\nSee if you can make both the dog and cat stop moving when they run into each other.",
        "GLJr_Behavior_8_markdown_instruction": "The cat and dog are so excited to see each other that they want to have a dance party. In addition to removing their move behaviors when the two sprites touch, add the \"dance party\" behavior so they celebrate!",
        "GLJr_Behavior_9_markdown_instruction": "**Free Play**: Try using what you've learned to make something new. Make sure to explore some of the new blocks in the toolbox.",
        "GLJr_Forever_5_markdown_instruction": "Now we have two sprites! Use a loop to make the dog jittery and make the cat wander",
        "GLJr_Forever_6_markdown_instruction": "Let's try some more movement blocks - make the dog run up and make the cat run right.",
        "GLJr_Forever_7_markdown_instruction": "Check out this new \"if-else\" block - it lets you run one set of code _if_ a condition is true, and a different set of code if it's false. Inside it we're using another new block that tells you _if_ two sprites are touching.\n\nSee if you can make both the dog and cat stop moving when they run into each other.",
        "GLJr_Forever_8_markdown_instruction": "The cat and dog are so excited to see each other that they want to have a dance party. If the two sprites are touching, have each run the \"dance party\" block.",
        "GLJr_Forever_9_markdown_instruction": "**Free Play**: Try using what you've learned to make something new. Make sure to explore some of the new blocks in the toolbox.",
        "Game Lab Workshop: Random_markdown_instruction": "# Randomized Shapes\n\nLet's see how we can use randomization in our drawings. Each of the inputs from the shape blocks you've seen can be replaced with calls to `randomNumber()`. Try drawing some images that are slightly randomized each time. You might try changing the position randomly by using `randomNumber()` in place of the x or y inputs, or you could change the size of the shape itself by randomizing the length or width inputs.\n\n# Do This\n\nPick a shape command (`ellipse()`, `rect()` or `regularPolygon()`) and use `randomNumber()` in place of one or more of the inputs. Make sure you run it a few times so you can see the effect of randomization.\n",
        "GameLab Livecode Demo 1_markdown_instruction": "# Animating Sprites\n\nTo start this demo, we'll do the following:\n\n1. Create a new sprite with the `createSprite()` block\n2. Click on the Animation tab and select an image for the sprite\n3. Set the animation using the `sprite.setAnimation()` block\n4. Move the sprite by incrementing (slowly increasing) its x and y value using the draw loop\n",
        "GameLab Livecode Demo 2_markdown_instruction": "# Move With Keys\n\nNow that we've got a sprite on the screen, let's make it respond to keyboard input.\n\n1. Read through the blocks at lines 14 and 21 - what is going on?\n2. Add two more conditionals to respond to the up and left keys\n3. Experiment with some of the additional provided blocks, such as `sprite.scale` and `sprite.rotation`\n",
        "GameLab Livecode Demo 4_markdown_instruction": "# Make it Your Own\n\nNow that we've created a simple game, take some time to explore the environment on your own and add to your game. You'll notice that there are a bunch of new blocks available to you in the toolbox - take a look around and try some out!",
        "Gamelab AllTheThings Embed Level_markdown_instruction": "# How Many Counter Variables?\n\nYou can use counter variables (`x = x + 1` , `x = x - 1` , `x = x + 0.5`, etc.) to animate a scene. What happens when scenes start to get larger and more complicated? \n\nWatch this animation. With a partner: \n\n* Decide how many counter variables you would need to create this scene\n* Decide what you would name your counter variables\n* **Draw a Labels-Values-Connectors** diagram of your variables at the first frame of this scene. Don't worry about getting the values exactly correct.\n* Share your answer with another group **and be ready to share your ideas with the class**",
        "Geometric Pattern_markdown_instruction": "**Project Idea:** Create a pattern using geometric ideas like shapes. This requires persistence and planning!",
        "Geometric Sun_markdown_instruction": "**Project Idea:** Create a pattern using geometric ideas like shapes. This requires persistence and planning!",
        "Geometric Sun_2018_markdown_instruction": "**Project Idea:** Create a pattern using geometric ideas like shapes. This requires persistence and planning!",
        "Glossary O_markdown_instruction": "## Vocabulary\n\nEncouraging students to learn and use 'professional' terms enables them to communicate correctly and efficiently with others and builds their knowledge such that it can be further developed without having to relearn terms and concepts at a later time. The terms and concepts used in the unplugged lessons are defined using words that young students can understand.\n\n# TEACHING TIP\nBest practice is to introduce the terms with easy-to-understand language, relate the terms to previous experiences, use the terms repeatedly beyond the lesson itself throughout the entire course (and in other situations) when appropriate, and reinforce students' use in oral and written communication.\n\nThe following terms are introduced in an unplugged lesson as either a Vocabulary word or as a term related to the online Blockly programming interface. Terms are subsequently reinforced in the following online puzzles and activities. Most terms appear multiple times throughout the courses and lessons providing the students with many opportunities to deepen their understanding and assimilate the words into conversations, both in and outside of the classroom.\n\nThe course and lesson numbers after each term indicate the unplugged lessons in which the term is emphasized.\n\n# Look through this list of vocabulary words and then answer the prompt at the bottom of the page. You don't have to learn all the vocabulary words all right now, but you they are here so you can refer back them during this online course. \n\nabstraction\n\nPulling out specific differences to make one solution work for multiple problems students.\n\n(Course 3: Lesson 1)\n\nalgorithm\n\nA list of steps to finish a task. A set of instructions that can be performed with or without a computer. For example, the collection of steps to make a peanut butter and jelly sandwich is an algorithm.\n\n(Course 1: Lessons 1, 6 | Course 2: Lessons 1, 2 | Course 3: Lessons 1, 10)\n\nbinary\n\nA way of representing information using only two options.\n\n(Course 2: Lesson 14)\n\nBlockly\n\nThe visual programming language used in Code.org's online learning system for K-5 students. (Course 1: Lesson 3)\n\nbug\n\nAn error in a program that prevents the program from running as expected. (Course 2: Lesson 9)\n\ncode\n\nOne or more commands or algorithm(s) designed to be carried out by a computer. See Program. (Course 1: Lesson 2)\n\ncommand\n\nAn instruction for the computer. Many commands put together make up algorithms and computer programs. (Course 1: Lesson 2)\n\ncomputational thinking\n\nMental processes and strategies that include: decomposition, pattern matching, abstraction, algorithms (decomposing problems into smaller, more manageable problems, finding repeating patterns, abstracting specific differences to make one solution work for multiple problems, and creating step-by-step algorithms). (Course 3: Lesson 1)\n\ncomputer science\n\nA field in which people use the power of computers to solve big problems. (Course 1: Lesson 2)\n\nconditionals\n\nStatements that only run under certain conditions or situations. (Course 2: Lesson 12)\n\ncrowdsourcing\n\nGetting help from a large group of people to finish something faster. (Course 3: Lesson 19)\n\ndata\n\nQuantities, characters, or symbols that are the inputs and outputs of computer programs. (Course 2: Lesson 14 | Course 3: Lessons 1)\n\ndebugging\n\nFinding and fixing errors in programs. (Course 2: Lesson 9)\n\ndecompose\n\nBreak a problem down into smaller pieces. (Course 3: Lesson 1)\n\ndigital citizen\n\nSomeone who acts safely, responsibly, and respectfully online. (Course 3: Lesson 20)\n\ndigital footprint\n\nThe information about someone on the Internet. (Course 2: Lesson 18)\n\nDNS (domain name service)\n\nThe service that translates URLs to IP addresses. (Course 3: Lesson 18)\n\nDSL/cable\n\nA method of sending information using telephone or television cables. (Course 3: Lesson 18)\n\nevent\n\nAn action that causes something to happen. (Course 1: Lesson 15 | Course 2: Lesson 15)\n\nevent-handler\n\nAn action or event that is being constantly monitored for by the computer. When you write code for the computer to perform after that an action occurs, that code, the event-handler, will run every time the action is performed without having to put the commands inside of a loop. Many event-handlers are human-initiated. For example: an event handler might respond when the user clicks the mouse by making the bird flap its wings. \"When the mouse is clicked\" is an event-handler. (Course 1: Lesson 15 | Course 2: Lesson 15)\n\nfiber optic cable\n\nA connection that uses light to transmit information. (Course 3: Lesson 18)\n\nfunction\n\nA piece of code that you can easily call over and over again. Functions are sometimes called 'procedures.' A function definition is a segment of code that includes the steps performed in the function. A function call is the code segment, typically within the main logic of the program, which invokes the function. (Course 3: Lesson 4, 9)\n\nInternet\n\nA group of computers and servers that are connected to each other. (Course 1: Lesson 17 | Course 3: Lessons 18, 20)\n\nIP address\n\nA number assigned to any item that is connected to the Internet. (Course 3: Lesson 18)\n\niteration\n\nA repetitive action or command typically created with programming loops. (Course 1: Lesson 12 | Course 2: Lesson 5)\n\nloop\n\nThe action of doing something over and over again. (Course 1: Lesson 12 | Course 2: Lesson 5)\n\npackets\n\nSmall chunks of information that have been carefully formed from larger chunks of information. (Course 3: Lesson 18)\n\npattern matching\n\nFinding similarities between things. (Course 3: Lesson 1)\n\npersistence\n\nTrying again and again, even when something is very hard. (Course 1: Lesson 9)\n\nprogram\n\nA program is an algorithm that has been coded into something that can be run by a machine. (Course 1: Lesson 2 | Course 2: Lesson 1 | Course 3: Lesson 10)\n\nrun program\n\nTo have the computer execute the commands you've written in your program. (Course 1: Lesson 4)\n\nservers\n\nComputers that exist only to provide things to others. (Course 3: Lesson 18)\n\ntoolbox\n\nThe tall grey bar in the middle section of Code.org's online learning system where all the commands you can use to write your program are displayed. (Course 1: Lesson 4)\n\nURL (universal resource locator)\n\nAn easy-to-remember address for calling a web page (like www.code.org). (Course 3: Lesson 18)\n\nusername\n\nA name you make up so that you can see or do things on a website, sometimes called a \"screen name.\" (Course 1: Lesson 18)\n\nvariable\n\nA placeholder for a piece of information that can change. (Course 3: Lesson 4)\n\nWi-Fi\n\nA wireless method of sending information using radio waves. (Course 3: Lesson 18)\n\nworkspace\n\nThe white area on the right side of Code.org's online learning system where you drag and drop commands to build your program. (Course 1: Lesson 4)\n\n### What is one way you can include computer science vocabulary terms in your class?\n",
        "Hardware Accessibility_markdown_instruction": "# Hardware Accessibility: Screen Size\n\nAnother thing to consider about accessibility for different users is the size of the device they are using to view the web page. You can do a basic test for this by resizing the view area to see how the website changes with the changes in size.\n\n# Do This\n\n* Use the dragger to resize your preview area to see how your website adapts.\n* Shrink the size of the instructions area to resize how tall the web page is",
        "Harvesting_markdown_instruction": "Uh oh, I lost my map and can't remember what I planted! Every sprout could grow up to be **corn** ![picture of corn](https://images.code.org/cac3133c40781553a70066a67298b2b5-image-1472493202556.png) , **beans** ![picture of beans](https://images.code.org/5e379ff595be17722237d9685b29fd96-image-1472493220871.png) , or **pumpkins** ![picture of pumpkin](https://images.code.org/03cf76a978e0788ccb53f14e9d264695-image-1472493237148.png) . Can you write some code to pick all the crops, no matter what they are?",
        "HoCAB_labyrinth1_markdown_instruction": "Use the blocks to solve this maze!\n\n<xml><block type=\"simple_move_down\"/></xml><xml><block type=\"simple_move_up\"/></xml><xml><block type=\"simple_move_right\"/></xml><xml><block type=\"simple_move_left\"/></xml>",
        "How to: Setup your Class Data Tracker_markdown_instruction": "## Setting up your copy of the Class Data Tracker\n\nThe second chapter of unit 2 dives into data collection, analysis, and visualization. Starting in lesson 7 you will set up and use a class data tracker, which students will fill out each day until lesson 13, when they start cleaning the data they've been collecting.\n\nLesson 7 includes the following detailed guide that walks you through setting up your shared data tracker from the template provided in the curriculum. Feel free to check out this instructions and setup your tracker now! ",
        "How to: Use Google Trends_markdown_instruction": "## How to Use Google Trends\n\nIn lesson 8, students will use Google Trends as a tool to visualize the relationship between historical google search data. If you're not familiar with Google Trends, check out the following How-to guide that details how to explore trends using the tool! ",
        "If and If-Else part 2_markdown_instruction": "### Points to pay attention to:\n\n**Start** play at 1:37 \n**Stop** play at 2:20\n\nIt's all you need for the exercises that follow.  You'll watch the remainder of the video after that.\n\n* An IF statement can have an else clause, but an ELSE clause cannot exist on its own.\n* With an else clause you are *guaranteeing* that one of two portions of code will run.\n\n",
        "Inspirational Artwork_markdown_instruction": "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\" width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! \n\nIf this picture inspires you, try to make something similar. Otherwise, create something all your own.\n\nNotice: We've used the `set alpha` block to make the \"petals\" fade toward the outside.",
        "InspirationalArtwork_markdown_instruction": "You've now learned everything you need to know to make a pattern like this! \n\nIf this picture inspires you, try to make something similar. Otherwise, create something all your own.",
        "InspirationalArtwork_2018_markdown_instruction": "You've now learned everything you need to know to make a pattern like this! \n\nIf this picture inspires you, try to make something similar. Otherwise, create something all your own.",
        "Internet Accessibility_markdown_instruction": "# Internet Accessibility: Internet Speed\n\nAnother difference in how people will experience your website is in the speed of their internet connection as they try to load the content on your web page. To check this we can use the Google Chrome Developer Tools to simulate a slow internet connection.\n\n# Do This\n\n* Open this page in the Google Chrome Web Browser\n* From the _View_ menu, find _Developer_ \n\n<img src=\"https://images.code.org/c6f91de459cec7ed561b11783ea833bd-image-1475634452345.png\" style=\"width:200px\">\n\n* In the _Developer_ submenu, select _Developer Tools_ \n\n<img src=\"https://images.code.org/fb8402f57f9121c729c0880d7bf06dfa-image-1475634452345.png\" style=\"width:200px\">\n\n* The _Developer Tools_ will open as a frame at the bottom of your browser window\n\n<img src=\"https://images.code.org/95be9a273afd32305a0bc4c20b530647-image-1475634452344.png\" style=\"width:400px\">\n\n* Click the menu that says \"No throttling\" and select \"GPRS\" \n\n<img src=\"https://images.code.org/07240b96943b01a80505ba6b3900b7da-image-1475634452344.png\" style=\"width:200px\">\n\n*  Hold down _Shift_ while reloading the page (this will delete cached files so the browser has to re download them while throttled)",
        "Internet Simulator: DNS Mode_markdown_instruction": "## The Need for DNS\n\nIn this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. You can only see the hostnames of other connected computers.   \n![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\n\nThe address of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another student's address. You can keep track of the responses in the Notes section in the DNS tab.  \n![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)",
        "Internet Simulator: DNS_markdown_instruction": "## The Need for DNS\n\nIn this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. You can only see the hostnames of other connected computers.   \n![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\n\nThe address of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another student's address. You can keep track of the responses in the Notes section in the DNS tab.  \n![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)",
        "Internet Simulator: DNS_2018_markdown_instruction": "## The Need for DNS\n\nIn this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. You can only see the hostnames of other connected computers.   \n![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\n\nThe address of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another student's address. You can keep track of the responses in the Notes section in the DNS tab.  \n![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)",
        "Internet Simulator: Packets_markdown_instruction": "## Packets and Making a Reliable Internet\n\n**Challenge:** Develop a protocol for reliably sending a message across an unreliable network\n\n**An Unreliable Internet Simulator:** The current version of the Internet Simulator is modeled after some actual constraints of the Internet\n- Messages must be divided into packets which may contain <em><strong> at most eight (8) ASCII characters </em></strong>\n- Messages should be long enough to require at least 10 packets\n- Packets may not arrive in the order sent\n- Packets may be dropped while in transmission\n\n**Directions:** In a group or individually join a router in the Internet Simulator and practice sending messages given these new constraints. Once you are comfortable with the challenge, iteratively design a protocol that can reliably send a message to a partner. You and your partner should join <em><strong> DIFFERENT </strong></em> routers.\n\n**Protocol Requirements:**\n- All communication can only be done through the Internet Simulator\n- You must send a message that spans at least 10 packets (i.e. an 80 character ASCII message). \n- The protocol should account for the possibility that the characters might be entirely random (i.e. not necessarily English - do not count on human intuition to reconstruct the message. The message is not known beforehand.)\n- The sender and receiver must be confident the full message was successfully transmitted and reconstructed.",
        "Internet Simulator: Packets_2018_markdown_instruction": "## Packets and Making a Reliable Internet\n\n**Challenge:** Develop a protocol for reliably sending a message across an unreliable network\n\n**An Unreliable Internet Simulator:** The current version of the Internet Simulator is modeled after some actual constraints of the Internet\n- Messages must be divided into packets which may contain <em><strong> at most eight (8) ASCII characters </em></strong>\n- Messages should be long enough to require at least 10 packets\n- Packets may not arrive in the order sent\n- Packets may be dropped while in transmission\n\n**Directions:** In a group or individually join a router in the Internet Simulator and practice sending messages given these new constraints. Once you are comfortable with the challenge, iteratively design a protocol that can reliably send a message to a partner. You and your partner should join <em><strong> DIFFERENT </strong></em> routers.\n\n**Protocol Requirements:**\n- All communication can only be done through the Internet Simulator\n- You must send a message that spans at least 10 packets (i.e. an 80 character ASCII message). \n- The protocol should account for the possibility that the characters might be entirely random (i.e. not necessarily English - do not count on human intuition to reconstruct the message. The message is not known beforehand.)\n- The sender and receiver must be confident the full message was successfully transmitted and reconstructed.",
        "Internet Simulator: Sending Binary Messages 1_markdown_instruction": "## Coordination and Binary Messages Activity\n\n**Develop your Protocol**\nDevelop a protocol that allows you to use Internet Simulator to relay a message, i.e. one member sends a message and the other member sends the same message back. You or a teacher will say “Go” to begin the exchange but otherwise all communication must be through the widget. As you’re working, consider:\n\n- How will you know when the exchange is supposed to begin?\n- How will you know whose turn it is to send or receive the message?\n- How will you coordinate your actions?\n\nDocument your protocol on the worksheet provided, and test your protocol using the Internet Simulator",
        "Internet Simulator: Sending Binary Messages_markdown_instruction": "## Coordination and Binary Messages Activity\n\n**Develop your Protocol**\nDevelop a protocol that allows you to use Internet Simulator to relay a message, i.e. one member sends a message and the other member sends the same message back. You or a teacher will say “Go” to begin the exchange but otherwise all communication must be through the widget. As you’re working, consider:\n\n- How will you know when the exchange is supposed to begin?\n- How will you know whose turn it is to send or receive the message?\n- How will you coordinate your actions?\n\nDocument your protocol on the worksheet provided, and test your protocol using the Internet Simulator",
        "Internet Simulator: Sending Binary Messages_2018_markdown_instruction": "## Coordination and Binary Messages Activity\n\n**Develop your Protocol**\nDevelop a protocol that allows you to use Internet Simulator to relay a message, i.e. one member sends a message and the other member sends the same message back. You or a teacher will say “Go” to begin the exchange but otherwise all communication must be through the widget. As you’re working, consider:\n\n- How will you know when the exchange is supposed to begin?\n- How will you know whose turn it is to send or receive the message?\n- How will you coordinate your actions?\n\nDocument your protocol on the worksheet provided, and test your protocol using the Internet Simulator",
        "Internet Simulator: Sending Numbers_markdown_instruction": "## Sending Numbers Activity\n\n**Challenge:** Develop a protocol or set of rules for communicating a drawing to your partners using only bits.\n\n**Challenge Rules:**\nThe image will be a line drawing created by connecting points on a grid, like the one seen here.\nYou can discuss and agree on a protocol ahead of time, but the image exchange must happen without communication between the two parties other than through using the Internet Simulator.\n\n**Things to Consider:**\n- How will your points be formatted?\n- How does the recipient know when one number ends and the next begins?\n\n**Your Protocol:** Write the steps of your protocol on the worksheet provided by your teacher.\n\n![](https://images.code.org/d79263f7a6e129962f830ce0af2ed3cc-image-1434414362601.PNG)",
        "Internet Simulator: Sending Numbers_2018_markdown_instruction": "## Sending Numbers Activity\n\n**Challenge:** Develop a protocol or set of rules for communicating a drawing to your partners using only bits.\n\n**Challenge Rules:**\nThe image will be a line drawing created by connecting points on a grid, like the one seen here.\nYou can discuss and agree on a protocol ahead of time, but the image exchange must happen without communication between the two parties other than through using the Internet Simulator.\n\n**Things to Consider:**\n- How will your points be formatted?\n- How does the recipient know when one number ends and the next begins?\n\n**Your Protocol:** Write the steps of your protocol on the worksheet provided by your teacher.\n\n![](https://images.code.org/d79263f7a6e129962f830ce0af2ed3cc-image-1434414362601.PNG)",
        "Internet Simulator: Sending Text_2018_markdown_instruction": "## Sending Text\n\n**Directions:** Design an encoding system to send text using the Internet Simulator. Your teacher will provide you with a number of increasingly complex challenges that you'll need to solve.",
        "Internet Speed Test_markdown_instruction": "# Check for Internet Accessibility\n\nAnother difference in how people will experience your website is in the speed of their internet connection as they try to load the content on your web page. To check this we can use the Google Chrome Developer Tools to simulate a slow internet connection.\n\n# Do This\n\n* Open this page in the Google Chrome Web Browser\n* From the _View_ menu, find _Developer_ \n\n<img src=\"https://images.code.org/c6f91de459cec7ed561b11783ea833bd-image-1475634452345.png\" style=\"width:200px\">\n\n* In the _Developer_ submenu, select _Developer Tools_ \n\n<img src=\"https://images.code.org/fb8402f57f9121c729c0880d7bf06dfa-image-1475634452345.png\" style=\"width:200px\">\n\n* The _Developer Tools_ will open as a frame at the bottom of your browser window\n\n<img src=\"https://images.code.org/95be9a273afd32305a0bc4c20b530647-image-1475634452344.png\" style=\"width:400px\">\n\n* Click the menu that says \"No throttling\" and select \"GPRS\" \n\n<img src=\"https://images.code.org/07240b96943b01a80505ba6b3900b7da-image-1475634452344.png\" style=\"width:200px\">\n\n*  Hold down _Shift_ while reloading the page (this will delete cached files so the browser has to re download them while throttled)",
        "Introduction to App Lab and Turtle Programming_markdown_instruction": "The video below is from lesson 4, and introduces App Lab and the Turtle. ",
        "Introduction to Conditionals - Part 2.2_markdown_instruction": "### Points to pay attention to:\n\n**Start** play at 1:37 \n**Stop** play at 2:20\n\nIt's all you need for the exercises that follow.  You'll watch the remainder of the video after that.\n\n* An IF statement can have an else clause, but an ELSE clause cannot exist on its own.\n* With an else clause you are *guaranteeing* that one of two portions of code will run.\n\n",
        "Introduction to Conditionals: Boolean Expressions_markdown_instruction": "### Points to pay attention to:\n\n1. What's a *Boolean Expression?*\n2. Why is it called a \"Boolean\"?\n3. Is this a legal expression?  `10 > 25`?",
        "Introduction to Conditionals: Boolean Expressions_2018_markdown_instruction": "### Points to pay attention to:\n\n1. What's a *Boolean Expression?*\n2. Why is it called a \"Boolean\"?\n3. Is this a legal expression?  `10 > 25`?",
        "Introduction to Conditionals: Compound Boolean Expressions_markdown_instruction": "### Points to pay attention to:\n\n* The \"Boolean operators\" are AND and OR.  \n* In JavaScript you write them as `&&` for AND and `||` for OR.\n* You use them to combine boolean expressions into a single statement when you need to check multiple conditions before executing a particular segment of code.\n\n",
        "Introduction to Conditionals: Compound Boolean Expressions_2018_markdown_instruction": "### Points to pay attention to:\n\n* The \"Boolean operators\" are AND and OR.  \n* In JavaScript you write them as `&&` for AND and `||` for OR.\n* You use them to combine boolean expressions into a single statement when you need to check multiple conditions before executing a particular segment of code.\n\n",
        "Introduction to Conditionals: if-else Statements_markdown_instruction": "### Points to pay attention to:\n\n* An IF statement can have an else clause, but an ELSE clause cannot exist on its own.\n* With an else clause you are *guaranteeing* that one of two portions of code will run.\n\n",
        "Introduction to Conditionals: if-else Statements_2018_markdown_instruction": "### Points to pay attention to:\n\n* An IF statement can have an else clause, but an ELSE clause cannot exist on its own.\n* With an else clause you are *guaranteeing* that one of two portions of code will run.\n\n",
        "Introduction to Conditionals: if-else-if Statements_markdown_instruction": "### Points to pay attention to:\n\n* An if-else-if statement lets you check more than one condition at a time.\n* The **order of conditions matters**. Since conditions are checked sequentially from top to bottom, the code that gets executed will be the *first* statement to evaluate to true.\n\n",
        "Introduction to Conditionals: if-else-if Statements_2018_markdown_instruction": "### Points to pay attention to:\n\n* An if-else-if statement lets you check more than one condition at a time.\n* The **order of conditions matters**. Since conditions are checked sequentially from top to bottom, the code that gets executed will be the *first* statement to evaluate to true.\n\n",
        "Introduction to Design Mode_markdown_instruction": "**You do not need to watch this video** to understand or complete this lesson - it is merely here if you are interested in getting a general overview.  \n\nIn this lesson to get started we will only use a few of the features depicted.",
        "Introduction to Design Mode_2018_markdown_instruction": "**You do not need to watch this video** to understand or complete this lesson - it is merely here if you are interested in getting a general overview.  \n\nIn this lesson to get started we will only use a few of the features depicted.",
        "Just for Testing_markdown_instruction": "Other test instructions",
        "K-1 Bee Loops 2_markdown_instruction": "Use a `repeat` loop to move and then get the nectar and make honey!",
        "K-1 Bee Loops 3_markdown_instruction": "Use three `repeat` loops to get the nectar and make honey!",
        "K-1 Bee Loops 4_markdown_instruction": "Use `repeat` loops to get the nectar, make honey, and to move!",
        "K-1 Bee Loops 5_markdown_instruction": "Use `repeat` loops to get the nectar and honey!",
        "K-1 Bee Loops 6_markdown_instruction": "Use a `repeat` loop to get the nectar, get honey, and to move!",
        "K-1 Maze Loops 10_markdown_instruction": "Get me to the pig!   \nUsing the `repeat` loop will make it much easier.",
        "K-1 Maze Loops 11_markdown_instruction": "Get me to the pig!  \nThe `repeat` loop will make this easier.",
        "K-1 Maze Loops 12_markdown_instruction": "Get me to the pig!  \nThe `repeat` loop will make this easier.",
        "K-1 Maze Loops 2_markdown_instruction": "Use the `repeat` block to get me to the pig!",
        "K-1 Maze Loops 3_markdown_instruction": "Get me to the pig!  \nBe sure to use `repeat` loops.",
        "K-1 Maze Loops 5_markdown_instruction": "Get me to the pig!  \nBe sure to use `repeat` loops.",
        "K-1 Maze Loops 6_markdown_instruction": "Get me to the pig!  \nBe sure to use `repeat` loops.",
        "K-1 Maze Loops 7_markdown_instruction": "Get me to the pig!  \nBe sure to use `repeat` loops.",
        "K-1 Maze Loops 8_markdown_instruction": "Use `repeat` loops to get me to the pig.",
        "K-1 Maze Loops Assessment 1_markdown_instruction": "Look at all we've learned!   \nUse a `repeat` loop to get me to the pig!",
        "K2.0 sequence 1_markdown_instruction": "A bug! Fix the code to get me to the pig.\n\n![](https://images.code.org/2843193ce2d869ad2f06f0f5b114c9d0-image-1467924400663.gif)",
        "K2.0 sequence 10_markdown_instruction": "**Challenge:** Move me around the TNT to get to the pig.\n\n![](https://images.code.org/4873075cd34a942f5006d59b05422bd0-image-1467932801138.gif)",
        "K2.0 sequence 12_markdown_instruction": "Let's get that pig!\n\n![](https://images.code.org/f908ff77eb81ee85d405a7ba66cc2986-image-1467933103380.gif)\n",
        "K2.0 sequence 2_markdown_instruction": "Fix the code to get me to the pig!\n\n![](https://images.code.org/629cddc754f9ad02929f06fc68462e4d-image-1467924800613.gif)",
        "K2.0 sequence 3_markdown_instruction": "Something is not quite right. REMOVE a block to get me to the pig!\n\n![](https://images.code.org/dd6d92233199ee0f524caa4051b99275-image-1467920800577.gif)",
        "K2.0 sequence 4_markdown_instruction": "Time for a shorter puzzle!  Move one way, then another to get me to the pig.\n\n![](https://images.code.org/c2e2d7ea98a18d899c6de183ce6d82e1-image-1471385293382.gif)\n",
        "K2.0 sequence 5_markdown_instruction": "Move one way, then another to get me to the pig!\n\n![](https://images.code.org/0b324bc0f684f7a22171acd8b38c8d9f-image-1467931807767.gif)",
        "K2.0 sequence 6_markdown_instruction": "Figure out what is missing and then add blocks to get me to the pig!\n\n![](https://images.code.org/b9803e12911694d8bb18bd55304f85d5-image-1467932006704.gif)",
        "K2.0 sequence 7_markdown_instruction": "Solve this level and get me to the pig!\n\n![](https://images.code.org/1eb9139e2887083dc80b98d9aeb3bef2-image-1467932105884.gif)",
        "K2.0 sequence 8_markdown_instruction": "**Challenge:** Debug this level by adding blocks to get me to the pig!\n\n![](https://images.code.org/810d7189bcd0767d37ea82319b4c678c-image-1467932445247.gif)",
        "K2.0 sequence 9_markdown_instruction": "**Challenge:** Go around the TNT to get me to the pig!\n\n![](https://images.code.org/fa04813e9451e0bc070af50bc01d4a6b-image-1467932582838.gif)",
        "KIKI GLJ Test Response_markdown_instruction": "Look carefully at the code below.  What do you think the plane will do when you click \"Run\"?\n",
        "LaurelDebugging4Video1_markdown_instruction": "This is Laurel the Adventurer!\n\nMove her around and get as much gold as you can.",
        "Lesson 7: Teaching and Student Support Plan_markdown_instruction": "> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lesson 7: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lesson, let’s think about the types of supports students will need in order to successfully complete it. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n<br><Br>\n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. ",
        "Lesson 9: Teaching and Student Support Plan_markdown_instruction": "> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lesson 9 Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lesson, let’s think about the types of supports students will need in order to successfully complete it. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n<br><Br>\n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. ",
        "Lessons 12 - 13: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 12 - 13: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n<br>\n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "Limited Quantity of Blocks Test_markdown_instruction": "Get me to the pig by adding only one block.",
        "Luigi's Pizza 1_markdown_instruction": "Welcome to Luigi's Pizza! To order a pizza, type the name of a topping into the `cost` function, and we'll return the price of that pizza. Try ordering a pepperoni pizza to start.",
        "Luigi's Pizza 2_markdown_instruction": "Right now there are only four choices available at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional block in the `cost` function. Once you've added your toppings, test out the function to make sure it works.",
        "Luigi's Pizza 3_markdown_instruction": "That's better, everyone loves more variety in their pizza toppings! But you still can't please everyone, and folks are coming in to order toppings that Luigi doesn't have. Instead of saying no to those people, could you update the _else_ clause so that we charge them a premium for toppings that we don't normally offer? Let's charge $10,000 for a topping we don't carry.",
        "Luigi's Pizza 4_markdown_instruction": "Free Play: What can you do to make Luigi's cost function even more useful? Try one (or more) of the following:  \n\n- Create a new function to display an image of the chosen pizza\n- Create a function that allows for ordering multiple pizzas (the same, or with different toppings)\n- Create a function that allows you to add a coupon code for a 30% discount",
        "MC Agent Freeplay_markdown_instruction": "**Freeplay:** Now it's up to you! Use the Agent's code to help you explore this world.",
        "MC HOC 2016 SCORE LEVEL_markdown_instruction": "Some games let you keep score. Play tag with these Iron Golems and use the <xml>  <block type=\"craft_addScore\">\n    <title name=\"SCORE\">1</title>\n  </block></xml> block to give yourself a point when you tag them.  \n  \n  Reach five points to win!",
        "MC_2017_Ryan_02_markdown_instruction": "Code like this can be made even shorter using loops!  \n\nNow get the Agent to the pressure plate using a `repeat` loop to help him move forward.",
        "MC_HOC_2017 Agent Test_markdown_instruction": "Click \"Run\" to move the player using the **arrow keys**.  \n\nTo pass this level, you will need to get to the door and open it (using the **space bar**) so you can get to the orange square inside.",
        "MC_HOC_2017_01_markdown_instruction": "Click \"Run\" to move the player using the **arrow keys**.  \n\nTo pass this level, you will need to get to the door and open it (using the **space bar**) so you can get to the orange square inside.",
        "MC_HOC_2017_01_Cole_markdown_instruction": "You need to collect all the tools on this journey. Move around using the **arrow keys**, and get to the chest on the path to win",
        "MC_HOC_2017_01_Kiki_markdown_instruction": "To play this level, click the orange \"Run\" button beneath the play space, then move the player around using the **arrow keys**.  ",
        "MC_HOC_2017_01_RETRY_markdown_instruction": "The door is locked, but the Agent is here to help!\n\nSnap a `move forward` block to the bottom of the `when run` block in the workspace to get the Agent to the pressure plate [PressurePlate_Up], then press \"Run\" and use the arrow keys to move out of the house to collect the **chest** [chest].",
        "MC_HOC_2017_02_markdown_instruction": "The player needs to get into that secret grove.  Help The Agent open the gate by writing code to get him to the pressure plate.",
        "MC_HOC_2017_02_Cole_markdown_instruction": "{currentPlayerName} is headed on an adventure! To help, get the **map** [map_empty] behind the locked door on the right. \n \nSnap the code into the workspace to move the Agent to the pressure plate [PressurePlate_Up] so that {currentPlayerName} can get through. ",
        "MC_HOC_2017_02_Kiki_markdown_instruction": "The player is headed out on an adventure, but first they have to get the torch that is hidden on the other side of that locked door. \n\nProgram the Agent to move forward twice to follow the white path and get to the pressure plate so he can open the door for the player.",
        "MC_HOC_2017_02_Will_markdown_instruction": "To finish this level, the player needs to get to the orange square inside of the Secret Grove, which is behind the locked door.  \n\nThe code in the workspace will make the Agent move forward twice to get to the pressure plate and open the door for Alex or Steve.",
        "MC_HOC_2017_03_Cole_markdown_instruction": "{currentPlayerName} continues on the adventure and needs the **compass** [compass] to prepare for the trip.  \n   \nCode the Agent to open the gate. ",
        "MC_HOC_2017_03_Kiki_markdown_instruction": "The player's adventure will begin behind the locked door, in the Secret Grove!  \n\n\nHelp The Agent open the door by writing code to get him to the pressure plate.",
        "MC_HOC_2017_04_markdown_instruction": "Change the loop from the last puzzle to help the Agent make a path over the wider part of this river.",
        "MC_HOC_2017_04POINT5_Cole_markdown_instruction": "You made it out of the swamp!  Now, get the player safely to the orange square.\n\nHelp The Agent clear the path by finding a simple pattern and using loops to cross the first two pressure plates.",
        "MC_HOC_2017_04POINT5_RYAN_markdown_instruction": "You made it across! \n\nNow, get {currentPlayerName} safely through the maze to collect the **axe** [diamond_axe]",
        "MC_HOC_2017_04_Cole_markdown_instruction": "The Agent can move across water!  \n \nUse a `repeat` loop to solve this puzzle and help {currentPlayerName} get to the **bucket** [bucket_empty] behind the door. ",
        "MC_HOC_2017_04_Kiki_markdown_instruction": "The entry to the Secret Grove led to this beautiful Oasis!  To pass this level, the player needs to get to the orange square in the cabana.  \n\nUse a `repeat` loop to help the Agent get all the way up to the pressure plate, which opens the cabana door.",
        "MC_HOC_2017_05_markdown_instruction": "Loops are not always helpful.\n\nThese cacti are not growing in an obvious pattern, so a loop would not clear them correctly.  Instead, we've given you a function called `destroy and move` that will do the hard work for you each time the Agent gets to an obstacle.",
        "MC_HOC_2017_05_Cole_markdown_instruction": "Oh no, the bridge is out! \n\nCode the Agent to rebuild the bridge using the <xml>  <block type=\"craft_placeBlock\">\n    <title name=\"TYPE\">       </title>\n  </block></xml> block so that {currentPlayerName} can get to the **shovel** [diamond_shovel].",
        "MC_HOC_2017_05_Josh_markdown_instruction": "Oh no, the bridge is out!\n\nHelp the Agent rebuild the bridge so that the player can get to the **shovel**.",
        "MC_HOC_2017_05_Kiki_markdown_instruction": "It's time for the player to leave the Secret Grove and continue the adventure, but the bridge is out! \n\nHelp the Agent rebuild the bridge, then move to the wooden plank so that the player can get to the orange square.",
        "MC_HOC_2017_06_Cole_markdown_instruction": "Another river, but this one is much wider! \n \nFix this code to help the Agent build a bridge so that {currentPlayerName} can get to the **pickaxe** [diamond_pickaxe]. ",
        "MC_HOC_2017_06_Josh_markdown_instruction": "Another river, but this one is much wider!  \n\nFix this code to help the Agent build a bridge across this river.",
        "MC_HOC_2017_06_Kiki_markdown_instruction": "Another river, but this one is much wider!  \n\nFix this code to help the Agent build a bridge across the water.",
        "MC_HOC_2017_07_Cole_markdown_instruction": "There's ice in the way!  \n \nThe `clear path` function can help you destroy the ice and get {currentPlayerName} to the Minecart [minecart_normal]! ",
        "MC_HOC_2017_07_Kiki_markdown_instruction": "Loops are not the only way to repeat code!  \n\nHere, we've given you a function called `clear cacti` that will do the hard work of clearing three cacti every time you use it.  Use two `clear cacti` blocks to clear the path to the orange square. ",
        "MC_HOC_2017_07a_Kiki_markdown_instruction": "Now, edit this loop to help the Agent clear a path to the orange square.",
        "MC_HOC_2017_08_Cole_markdown_instruction": "Now, instead of destroying before you move, you will need to place a block.  \n\nChange the provided function to work for the desert.",
        "MC_HOC_2017_08_Kiki_markdown_instruction": "Now, instead of destroying cacti, you will need to place stone over lava, then destroy standstone.  \n\nChange the function to work for this level.",
        "MC_HOC_2017_08_RY_markdown_instruction": "Now there are **TWO** functions to choose from!\n\nUse these functions to quickly build a bridge across the lava for {currentPlayerName}.",
        "MC_HOC_2017_08_Will_markdown_instruction": "Now there are **TWO** functions to choose from!\n\nUse these functions to quickly build a bridge across the lava for the player.",
        "MC_HOC_2017_09_Cole_markdown_instruction": "Use functions to help the Agent destroy the giant blocks of dirt that are blocking the player's path to the pressure plate.",
        "MC_HOC_2017_09_Kiki_markdown_instruction": "This starting code cannot be removed.\n\nAdd commands to the `create trail` function so that the program in the workspace will get the Agent to the pressure plate. ",
        "MC_HOC_2017_09_RS_CLONE_markdown_instruction": "Fix this function to fill in the holes, then step on the pressure plate to clear a path to the torch.",
        "MC_HOC_2017_10_Cole_markdown_instruction": "Use the functions to clear a path for the mine cart, and walk into the Nether Portal.",
        "MC_HOC_2017_10_Cole_old_markdown_instruction": "Try building a function from the beginning that will make it easier for the Agent to finish this minecart and get the player to the orange square.",
        "MC_HOC_2017_10_Kiki_markdown_instruction": "Try building a function from the beginning that will make it easier for the Agent to finish this minecart and get the player to the orange square.",
        "MC_HOC_2017_10_RYAN_markdown_instruction": "Try building functions from the beginning that will make it easier for the Agent to finish this minecart and get the player to the orange square.",
        "MC_HOC_2017_10_RYAN2_markdown_instruction": "Try building functions from the beginning that will make it easier for the Agent to finish this minecart and get the player to the orange square.",
        "MC_HOC_2017_11_Kiki_markdown_instruction": "Now it's up to you! See what you can create around this frozen lake.",
        "MC_HOC_2017_13_Cole_markdown_instruction": "**Freeplay:** Now it's up to you! Use the Agent's code to help you explore this world.",
        "MC_HOC_2017_4.5v2_markdown_instruction": "You made it out of the swamp!  Now, get the player safely to the orange square.\n\nHelp The Agent clear the path by finding a simple pattern and using loops to cross the first two pressure plates.",
        "MC_HOC_2017_Ali_markdown_instruction": "Look at the functions below.  How can you use them to avoid the Ghasts and help {currentPlayerName} make it safely to the **Enchanted Book** [book_enchanted]?  ",
        "MC_HOC_2017_FP10x10_markdown_instruction": "**Freeplay:** Now it's up to you! Can you challenge yourself to collect all of the diamonds in this level? ",
        "MC_HOC_2017_FP10x10_RE_markdown_instruction": "**Freeplay:** Now it's up to you! Can you challenge yourself to collect all of the diamonds in this level? ",
        "MC_HOC_2017_FP20x20_markdown_instruction": "**Freeplay:** Now it's up to you! Use the Agent's code to help you explore this world.",
        "MC_HOC_2017_Ryan_03_markdown_instruction": "Did you know that you can put more than one piece of code into a loop?  \n\nUse a `repeat` loop to help the Agent build a bridge over the river by placing blocks in the water.",
        "MC_HOC_2017_Ryan_05_markdown_instruction": "Sometimes you need to knock down things that get in the way of your player.  \nUse the `destroy` block to clear all of the cactii between the Agent and the pressure plate.",
        "MC_HOC_Kiki_02_markdown_instruction": "Someone needs to be on the pressure plate before the side door will open.  Help the Agent get to the plate so the player can leave the house.",
        "MSM Defining Vars 1_markdown_instruction": "Write a program that produces a 50 pixel solid green triangle.",
        "MSM Defining Vars 2_markdown_instruction": "If we wanted to make fifty green triangles, it would be a pain to repeat that block of code 50 times. Let's create a variable called `my-shape` and put the code for a 50 pixel solid green triangle inside.",
        "MSM Defining Vars 3_markdown_instruction": "Take your `my-shape` variable and use it with this provided code to draw two identical green triangles that are 50 pixels in size.",
        "MSM Defining Vars 4_markdown_instruction": "Edit your `my-shape` variable so that it draws 75 pixel solid red stars.",
        "Making Music_markdown_instruction": "Today you’re going to learn how to use and create **functions**.\n\nCreating a function lets you make your own blocks! There are two parts to a function: \n\nMaking a newly named block that has all of the code you want to run inside of it. \n-xml of function definition- \n\nThe single green block itself that you use, or call, to run the function you created.\n-xml of function call-\n\nPrepare to get familiar with functions, learn how to edit them, and create your own!",
        "Making Music_2018_markdown_instruction": "Today you’re going to learn how to use and create **functions**.\n\nCreating a function lets you make your own blocks! There are two parts to a function: \n\nMaking a newly named block that has all of the code you want to run inside of it. \n-xml of function definition- \n\nThe single green block itself that you use, or call, to run the function you created.\n-xml of function call-\n\nPrepare to get familiar with functions, learn how to edit them, and create your own!",
        "Matt Test Level_markdown_instruction": "Do 0 bits weigh less than 1 bits?\n",
        "Middle School Hackathon Pt 1_markdown_instruction": "# MS Hackathon: Fancy Drawing\n\nThe blocks you've been provided are those that a student in CS Discoveries would likely have available after a week or so of using Game Lab. No sprites yet, but you've **just been introduced to some powerful programming constructs like generating random numbers, storing values in a variable, and looping.** You'll also be pretty familiar with the drawing commands at this point.\n\n# Do This\n\n* Using only the tools provided to you, **make something awesome!!**\n* The likely project at this point would be an **animated card** but feel free to go other directions if you like.\n* **Avoid complex variable arithmetic** if you can. You \"don't know it\" yet.\n* **Avoid referencing the iterator in your for loops**. At this point it's just a repeat loop.",
        "Middle School Hackathon Pt 2_markdown_instruction": "# MS Hackathon: Sprites and Interactivity\n\nYou now can **create sprites, add images, manipulate their properties, and perform simple variable arithmetic to update their values (e.g. `sprite.scale = sprite.scale + 1;`)**. You've also been introduced to conditional statements and know how to use them to get some interactive behavior with the mouse and keyboard.\n\n# Do This\n\n* Using only the tools provided to you **make something awesome!**\n* The likely target project here might be a **simple game** or **interactive visualization**.\n* You don't yet know about **groups, loops, collisions**, or more magical properties like **velocity or rotationSpeed**\n\n**These commands are not in the block palette but feel free to use**\n\n* `mySprite.mouseActive = true;` will make your sprite track mouse events\n* `mySprite.mouseIsOver` and `mySprite.mouseIsPressed` are booleans you can now use to sense mouse-to-sprite interactions.\n\n**To add sprites to images follow the pattern below**\n\n```\nvar spriteImage, sprite;\n\n//You'll need to create a preload function to load the image.\nfunction preload(){\t\t\t\n    spriteImage = loadImage(\"imageURL\");\n}\n\n//Create your sprite and add the image\nfunction setup(){\n    sprite = createSprite(200,200,10,10);\n    sprite.addImage(\"someName\", spriteImage);\n}\n\n//Draw your sprites.\nfunction draw(){\n\tbackground(255,255,255);\n\tdrawSprites();\n}\n```",
        "Mike Pair Programming_markdown_instruction": "Here are markdown instructions",
        "Mike Test Bee Conditionals 1_markdown_instruction": "This cloud is blocking my view! \n\nCheck to see if there's a flower under the cloud, and only get nectar if there's a flower.   \nBe careful, it can change!",
        "Mike Test Bee Conditionals 2_markdown_instruction": "**Assessment:** Collect all of the nectar.  \nBe careful not to try to collect nectar from a purple flower if it doesn't have any.",
        "MikeTest1_markdown_instruction": "Markdown",
        "Modular Arithmetic_markdown_instruction": "# Modular Arithmetic\n\n\nThe modulo operation (which gives you the remainder of dividing two integers) is important in computer science and it turns out to be useful in many contexts including encryption. It’s actually not computationally intensive to compute a single modulo on a computer; it’s as fast as dividing two numbers. The commutative properties of modulo and numbers with large exponents were discovered to be the key ingredients for modern day asymmetric encryption.\n\n\nThe link below introduces the concept of modular arithmetic, and explains the Diffie-Hellman key exchange (described in lesson 7 using an analogy with Alice, Eve, and Bob).",
        "NEW Course 4 Artist Functions 1_markdown_instruction": "Can you draw a square that is 100 pixels in length, using a repeat loop?\n\n",
        "NEW Course 4 Artist Functions 10.1_markdown_instruction": "Use the functions from the previous puzzles to draw this pattern.",
        "NEW Course 4 Artist Functions 10_markdown_instruction": "Click \"edit\" to fill out the blocks in the function definition to make a 40 pixel square.\n\n",
        "NEW Course 4 Artist Functions 11_markdown_instruction": "Now we want to create a new function called `draw a line of squares` that draws six squares all in a row.  \n\nCan you build this function using this `draw a square 20` function that we created for you?\n<br/><br/>\n\n*Note: See that we've changed the pen to be much thinner. Click \"edit\" on the `draw a square 20` function to see how!*",
        "NEW Course 4 Artist Functions 12_markdown_instruction": "Use the `draw a line of squares` function from the last puzzle to draw this pattern.",
        "NEW Course 4 Artist Functions 13_markdown_instruction": "Can you draw a star shape using the `draw a line of squares` function?  \n\n(Be sure to `move forward` 60 pixels before you turn 144 degrees!)",
        "NEW Course 4 Artist Functions 14_markdown_instruction": "It's free-play time! Draw anything you like!",
        "NEW Course 4 Artist Functions 2_markdown_instruction": "Can you draw 3 squares 20 pixels apart from one another? \n\nEach square is 100 pixels in size.",
        "NEW Course 4 Artist Functions 3_markdown_instruction": "Here is a new type of Block. It is called a `function` block. Click \"edit\" then fill it with the code for drawing a square with 100 pixel sides. \n\nWhen you're done editing the function, click \"Close\" to go back to your program.",
        "NEW Course 4 Artist Functions 4_markdown_instruction": "Use the `draw a square` function to draw this pattern. ",
        "NEW Course 4 Artist Functions 6_markdown_instruction": "Using the \"draw a square\" function block, can you draw this picture? Hint: each square is 20 pixels apart.\n\n",
        "NEW Course 4 Artist Functions 7_markdown_instruction": "Are you getting the hang of how to use function blocks? Let's modify `draw a square` so that it draws squares that are 200 pixels in size. \n\nClick on \"edit\" to enter the `draw a square` function editor.\n\nRemember to click on \"Close\" to get out of the function editor. ",
        "NEW Course 4 Artist Functions 8_markdown_instruction": "We have created a new function for you called `draw a triangle`.  Can you edit the function definition to draw a triangle with 100 pixel sides?",
        "NEW Course 4 Artist Functions 9_markdown_instruction": "Can you solve this by adding only one block?",
        "NEW Course 4 Artist Functions inspire_markdown_instruction": "<img src=\"https://images.code.org/5e50e6ef0cafb40a8b697ea158047412-image-1441260841174.11.12.png\" width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! \n\nIf this picture inspires you, try to make something similar. Otherwise, create something all your own. \n\n",
        "NEW Course 4 Artist Params 1_markdown_instruction": "Let's define this function to draw a square with 50 pixel sides. Click \"edit\" to get started.\n\n",
        "NEW Course 4 Artist Params 10_markdown_instruction": "Create a `draw a hexagon` function block with a length parameter. \n\nThis hexagon has sides that are 100 pixels in length.",
        "NEW Course 4 Artist Params 11_markdown_instruction": "Can you figure out how to draw this shape? \n\nEdit the function to use the `sides` parameter.",
        "NEW Course 4 Artist Params 12_markdown_instruction": "Can you complete this drawing? \n\nThe sides of all the shapes are 100 pixels long.",
        "NEW Course 4 Artist Params 12a_markdown_instruction": "This image is similar to the last.  \n\nCan you use a `for` loop with your function to make this design?",
        "NEW Course 4 Artist Params 14_markdown_instruction": "Edit `draw a spiral edge` to use `length` and `sides` parameters, then recreate these shapes.\n\n- The smallest side length of the square is 5 pixels.\n- The smallest side length of the triangle is 10 pixels.\n- The smallest side length of the hexagon is 2 pixels.\n- All increase to 100 pixels.  ",
        "NEW Course 4 Artist Params 15_markdown_instruction": "**Freeplay:** Here are the functions you've written, and some more for you to play with. Play with the pen width to see how different your drawings look!",
        "NEW Course 4 Artist Params 2_markdown_instruction": "Create a `draw triangle` function from scratch that makes a triangle with  50 pixel sides.",
        "NEW Course 4 Artist Params 3_markdown_instruction": "Now let's use the function to draw 5 triangles in a row. \n\nEach triangle is 30 pixels apart.",
        "NEW Course 4 Artist Params 4_markdown_instruction": "Do you notice anything different about these function blocks? Click “Run” to see what happens.",
        "NEW Course 4 Artist Params 5_markdown_instruction": "Replace the `???` in the `length` parameter input block. \n\nThe pentagon has 100 pixel sides.",
        "NEW Course 4 Artist Params 6_markdown_instruction": "Fill in the `length` parameter to draw these shapes by replacing the `???` with the right numbers.  \n\nThe square and triangle have 100 pixel sides.  \nThe hexagon sides are 75 pixels long. ",
        "NEW Course 4 Artist Params 7_markdown_instruction": "Can you complete this drawing? \n\nThe sides of each triangle are 25 pixels larger than the last.  \nThe first triangle has 25 pixel sides.",
        "NEW Course 4 Artist Params 8_markdown_instruction": "The code for this triangle function is broken. \n\nCan you edit the function to fix it, and then make triangles of length 25, 50, and 75?",
        "NEW Course 4 Artist Params 9_markdown_instruction": "Click \"edit\" to fill in the function definition of `draw a square` and add a parameter.  \nIt should take a length parameter just like the triangle. \n\n**This time, draw 3 squares:** 25, 50 and 75 pixels in length. The lefthand corners are each 100 pixels away from the last.",
        "NEW Course 4 Artist Params inspire_markdown_instruction": "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\" width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! \n\nIf this picture inspires you, try to make something similar. Otherwise, create something all your own.\n\nNotice: We've used the `set alpha` block to make the \"petals\" fade toward the outside.",
        "NEW Course 4 Artist Vars 12_markdown_instruction": "Now, recreate the algorithm from the last level and create a pentagon with sides of length 150.",
        "NEW Course 4 Artist Vars 2_markdown_instruction": "Drag a number block to the `set length` block and to the `repeat _ times` block to draw a set of 50 pixel triangles. ",
        "NEW Course 4 Artist Vars 4_markdown_instruction": "Let's try it again! \n\nCan you set the `length` variable to 60 to make this cool design with hexagons?",
        "NEW Course 4 Artist Vars 6_markdown_instruction": "Draw this pattern of pentagons with 100 pixel sides by setting the right value for `length` and dropping the `length` variable into all of the the correct places. \n\nSee how you only have to set the value for `length` once, and the code uses the right value everywhere?",
        "NEW Course 4 Bee For Loops 10a_markdown_instruction": "Ready for a challenge?  Take what you've learned about loops and try to solve this problem. \n\nRemember: You may have to run through solutions multiple times before you figure out all of the steps.\n",
        "NEW Course 4 Bee For Loops 2_markdown_instruction": "Add the code necessary to make sure the bee collects all the nectar. \n\nLook at how much code you need for this puzzle!   \n(We'll learn a simpler way in the next puzzle.)",
        "NEW Course 4 Bee For Loops 3_markdown_instruction": "Ah, the `for loop` makes this much easier! All the code you need is here, take a look at how it is put together then click `Run` to see how it works. ",
        "NEW Course 4 Bee For Loops 4 4_markdown_instruction": "Now we need to `move forward` `counter` times, then `get nectar` `counter` times.  Can you use two `repeat` loops to solve this challenge?",
        "NEW Course 4 Bee For Loops 4_markdown_instruction": "Replace the ??? in the `for loop` with the largest amount of nectar the bee has to collect. ",
        "NEW Course 4 Bee For Loops 5 5_markdown_instruction": "Are you getting the hang of using the `for loop`? Let's help the bee get the rest of the nectar.",
        "NEW Course 4 Bee For Loops 5_markdown_instruction": "You can also use a `for loop` to count down. Try gathering this nectar by counting down from 5 to 1 by 1.",
        "NEW Course 4 Bee For Loops 6_markdown_instruction": "The last number in your for loop is called the `increment`.  Each time the loop is run, the counter variable changes by the value of the increment. \n\nTry collecting these flowers using an increment of 2.",
        "NEW Course 4 Bee For Loops 8_markdown_instruction": "You've got this!  \n\nWhat should your increment be to collect 3, 6, 9, 12, 15 nectar?\n\n",
        "NEW Course 4 Bee For Loops 95_markdown_instruction": "Take a look at each piece of the `for loop` that you have just created.  Can you figure out which numbers you need to double to solve this puzzle? Why does it work?",
        "NEW Course 4 Play Lab Params 11_markdown_instruction": "It's free play time! Have fun with all the blocks in your tool box.  \n<br/>\n\n<h5>\n<details>\n<summary><b>Need some ideas?</b></summary>\n\t<br/>\n\t<h5>\n\t\t<ul>\n        \t<li><strong>Tag</strong> - Have character 2 patrol and use your arrow keys to make character 1 chase until they collide. </li>\n            <li><strong>Whack-a-Sprite</strong> - Have a character constantly pop up at a random location. Award points for clicking the sprite before it disappears. </li>\n            <li><strong>Best Guess</strong> - Make both characters disappear, change location to a random spot, then reappear as a random character.  Click on the first one and get a point...but if you click on the second one you LOSE a point! </li>\n        </ul>\n\t</h5>\n</details>\n</h5>\n",
        "NEW Course 4 Play Labs For Loops 8a_markdown_instruction": "**Challenge:** How would you use the `for loop` to go from top to bottom and get every character to say their actor number, then vanish from the screen? ",
        "NetSim Standalone Automatic DNS_markdown_instruction": "# Domain Name System (DNS)\n\nIn this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. You can only see the hostnames of other connected computers.   \n![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\n\nThe address of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another student's address. You can keep track of the responses in the Notes section in the DNS tab.  \n![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)\n\nYour teacher will hand out more specific instructions for this activity.",
        "NetSim Standalone Broadcast_markdown_instruction": "# Broadcast messages in the Internet Simulator\n\nIn this version of the Internet Simulator, you can connect to up to 5 other people in a room. When you send messages in the room, everyone receives them. What are some of the challenges of this system, and how might you solve them?\n\nYour teacher will hand out more specific instructions for this activity.",
        "NetSim Standalone Classroom Routers_markdown_instruction": "# Routing messages \n\nIn this version of the Internet Simulator, everyone connects to a router and has a specific address. To send messages, you have to address your message to the specific address of the recipient, and the router will take care of delivering it to the right computer. If there are other routers created in your class, ask for the address of one of your classmates and send them a message! View the Log Router to see the path the messages have taken through the network.\n\nYour teacher will hand out more specific instructions for this activity.",
        "NetSim Standalone Freeplay_markdown_instruction": "# Internet Simulator Freeplay\n\nIn this version of the Internet Simulator, most of the options are turned on and are configurable. Messages can be sent to any router within the class, and messages will take different paths to reach their destination.\n\nYour teacher will hand out more specific instructions for this activity.",
        "NetSim Standalone Manual DNS_markdown_instruction": "# Introduction to DNS\n\nIn this version of the simulator you can't see the other students' addresses.  Instead, one of you must act as a name service, to help share addresses with each other. From the DNS tab in the left column, one person can take over as DNS.\n\nYour teacher will hand out more specific instructions for this activity.",
        "NetSim Standalone Packets TCP_markdown_instruction": "# Packets and Making a Reliable Internet\n\nMessages on the Internet can take many paths to get to their destination, and sometimes along the way the message gets dropped. In this version of the Internet Simulator:\n\n- There is a 10% chance of a packet being dropped\n- Multiple packets may take different paths to the destination\n- The default max packet size is set to 6 additional characters\n\nYour teacher will hand out more specific instructions for this activity.",
        "NetSim Standalone SendAB_markdown_instruction": "# Sending bits with the Internet Simulator\n\nYou and your partner share a single wire that can only be in state A or state B. You can set the wire to either state at any time, and you can read the state of the wire at any time. Can you figure out a way to effectively communicate with just this system?\n\nYour teacher will hand out more specific instructions for this activity.",
        "NetSim Standalone Sending Numbers Ascii_markdown_instruction": "# Sending Text with the Internet Simulator\n\nNow that you've transmitted information represented as decimal numbers, you can map those numbers to text characters to send text-based information back and forth. With a text-based protocol, you can easily represent and communicate all kinds of information. \n\nYour teacher will hand out more specific instructions for this activity.",
        "NetSim Standalone Sending Numbers_markdown_instruction": "# Sending Numbers with the Internet Simulator\n\nYou and your partner can now reliably send messages back and forth without extra coordination! While you're always sending bits back and forth, you can also represent those bits as decimal numbers. What kinds of information can you represent with this system? \n\nYour teacher will hand out more specific instructions for this activity.",
        "NetSim_Variant2_markdown_instruction": "## NetSim: Variant 2\n\nStudents connect directly to one another and send entire packets back and forth, exploring systems of encoding data.",
        "New Minecraft Hero Project_markdown_instruction": "**Freeplay:** Now it's up to you! Use the Agent's code to help you explore this world.",
        "Nike Example Brand Book_markdown_instruction": "# Brand Book\n\nCheck out the example of a brand book\n\n",
        "October15 JoL 1_markdown_instruction": "Program the artist to design a face for your jack-o-lantern!\n\n",
        "October15 bat_markdown_instruction": "Freeplay: Here are the functions you've written, and some more for you to play with. Play with the pen width to see how different your drawings look!\n\n",
        "October15 ghost 1_markdown_instruction": "Give the ghost eyes, using the `draw a circle` function.\n\n",
        "October15 pumpkin 1_markdown_instruction": "Finish this jack-o-lantern by drawing the eyes and nose in any style you would like.\n\n",
        "October15 stars 1_markdown_instruction": "Use loops and the `random integer` block to fill the night sky with stars of different shapes and sizes.",
        "Open text response example_markdown_instruction": "# Open text response example\n\nThis is an example Markdown content header.\n\n## YouTube video\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nKIu9yen5nc\" frameborder=\"0\" allowfullscreen></iframe>\n\nWhat did you think of the video?\n",
        "Overworld Chop Tree_markdown_instruction": "Wood is a very important resource. Many things are made from it. Walk to the tree and use the `destroy` block command to chop it down.",
        "Overworld Chop Tree_2018_markdown_instruction": "Wood is a very important resource. Many things are made from it. Walk to the tree and use the `destroy` block command to chop it down.",
        "Overworld House Frame Chosen_markdown_instruction": "Build the rest of your house from any material you'd like. The `repeat` command will come in handy.",
        "Overworld House Frame Chosen_2018_markdown_instruction": "Build the rest of your house from any material you'd like. The `repeat` command will come in handy.",
        "Overworld Move to Sheep_markdown_instruction": "Add a second `move forward` block to reach the sheep.",
        "Overworld Move to Sheep_2018_markdown_instruction": "Add a second `move forward` block to reach the sheep.",
        "Overworld Place Wall_markdown_instruction": "Every house starts with a wall. Build the first part of your house by putting the `place` and `move forward` commands inside the repeat loop.",
        "Overworld Place Wall_2018_markdown_instruction": "Every house starts with a wall. Build the first part of your house by putting the `place` and `move forward` commands inside the repeat loop.",
        "Overworld Shear Sheep_markdown_instruction": "Sheep-shearing time! Use the `shear` command to gather wool from both sheep.",
        "Overworld Shear Sheep_2018_markdown_instruction": "Sheep-shearing time! Use the `shear` command to gather wool from both sheep.",
        "PDAlg 13-16 Sam Extension Puzzle_markdown_instruction": "Add a second parameter to `onscreen?` for Sam's y coordinate and update the function so it keeps him safe on all four sides.",
        "PDAlg 17-20 Luigi Extension Puzzle_markdown_instruction": "Without modifying your existing `cost` function, create a new `coupon` function that takes a pizza topping and coupon code and returns the cost of a pizza with that topping. If the coupon code is correct (you get to decide what it is), apply a 30% discount to the pizza.",
        "PDAlg 8-12 Rocket Height Puzzle_markdown_instruction": "Let's write a `rocket-height` function with simple acceleration. Write a function that ensures the rocket is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.",
        "PDAlg 8-12 ex dr 2_markdown_instruction": "This student has created two examples for the function `apples` but something's not quite right. How would you direct this student to correct their mistake?",
        "PDAlg Big Game History_markdown_instruction": "Now that you've played through a Big Game level you should see a new entry in your history. Click the _Version History_ button and you should see at least one version. Each time you go back to a Big Game level you'll get a new record in your version history that you can revert back to.\n\nMake sure to click _Run_ and _Finish_ to move on to the next puzzle.",
        "PDAlg Big Game Remix_markdown_instruction": "Here's your Big Game as you last left it. Try clicking the _Remix_ button to spin off a new remix of your project. Any changes you make after you click _Remix_ will be saved on your new remix and not on your main Big Game.\n\n**Clicking Remix will take you to a new page** - make sure you come back here and click _Run_ and _Finish_ after you've made a remix.",
        "PDAlg Classroom Culture 2_markdown_instruction": "### Strategies for facilitating an engaged computer science classroom:\n\n- Be open to learning from your students. This is a very valid way for you to learn something new and if the students see you learning from others; they'll feel more comfortable to do it themselves.\n- Be calm yet persistent when problems arise (which they will) because your reaction sets the tone for students. If at the first sign of an issue, you proclaim \"I'm terrible at technology. I give up,\" your students will think it's okay to do that too. \n- Implement the \"Ask 3 and then me\" rule in your classroom, which is when students have to ask 3 classmates for help before they can ask the teacher that same question. This reduces the number of students that you have to answer individually and promotes peer learning.\n- Take pride in their programs. Show it off, put it to work, post it online. This is a big accomplishment for you and your students that should be celebrated.\n- Your students may not need you in the way you think they need you. You don't need to be the expert. Ask probing questions to a student (even if you don't know the answer to the questions). Or ask the class if anyone has the answer. Or say \"I don't know; let's figure this out together\"\n- Ask probing questions to help a student instead of taking their mouse away to solve the puzzle for them. Students will be more engaged if they have to move the mouse themselves. Also, make it a classroom rule that if a student is helping another student at a computer, they can't take the mouse from them either. \n- Understanding how to get the help you need is an important part of becoming a successful facilitator of a computer science classroom. There are a variety of ways to get questions answered: online groups, the person sitting next to you, email to a mentor or peer, Code.org community forums, or other computer science educators in your district.\n\nIt's possible that you might find something that's broken, unusable, or missing on our website, which in the computer science world is called a \"bug\". Take a screenshot of what happened, and describe the problem in an email to pd@code.org. Also include what operating system and browser version you're using (example: Windows 7, Internet explorer 9). We really appreciate teachers and users sending us bug reports.\n\n### How will you foster a healthy CS classroom environment?\nNow that you know more about our curriculum, what practices do you want to use to promote a healthy atmosphere in your computer science classroom?'\n",
        "PDAlg DR Text 1_markdown_instruction": "Here's the same contract from the last page. What could you ask this student to help them identify and correct their error?\n\n### Question\n\nIf you have a budget in dollars, can you write a function `treats` that returns the number of treats you could afford at 50 cents each?\n\n### Contract\n\n`treats: Number Number -> Number`\n",
        "PDAlg Design Recipe Delete_markdown_instruction": "When developing complex programs it's not uncommon to end up with functions that you no longer want, which used to just crowd your functions drawer, but now you can **delete** them. Click the **delete** button to get rid of this function, then try creating and deleting a few of your own.",
        "PDAlg Design Recipe Required_markdown_instruction": "In addition to testing examples, we can also _require_ that students use examples in their functions. Complete the Design Recipe for the `eggs` function, making sure to create and test your examples. (You can ignore creating examples if you want to see the error message.)",
        "PDAlg Prep on Paper_markdown_instruction": "# Lesson Prep > Thinking on Paper\n\nAs you learned in the summer PD, thinking through the Design Recipe on paper is an essential step for success, particularly when it comes to solving complex or novel problems. Print out a copy of the [Design Recipe worksheet](https://code.org/curriculum/docs/algebra/worksheets/design_recipe.pdf) and go through your chosen word problem as if you were a student.\n\n## Put on your student hat\n\nViewing these problems as your students will can help you identify potential pain points, lack of clarity, or misconceptions. It's sometimes difficult to drop our teacher assumptions and expectations, but the more authentically you can wear your student hat, the more you will learn about the possible difficulties in your plan.\n\n## What's tough about this problem?\n\nAfter you complete your Design Recipe on paper, think about the difficult elements of your particular word problem. Where might students stumble, and what can you do to support them in that struggle? The goal here is not necessarily to remove the struggle (as that's where we learn the most), but to prepare for it.",
        "PDAlg Updates Cond_markdown_instruction": "When you went to PD in the summer, the **Conditional** block that you were introduced to was black and allowed any data type to be used. This proved to be confusing, given that every other function we've seen always produces the same type of data. To help make conditionals clearer and more consistent we've replaced the single black block with a separate block for each data type.\n\n![conditional blocks](//studio.code.org/script_assets/pd/newcond.png)",
        "PDAlg Updates Errors_markdown_instruction": "Few things in programming are as frustrating as ambiguous or unclear error messages. When things go wrong in a program we rely on helpful error messages for direction, so we've spend a lot of time creating error messages that help direct students to solve their own problems.\n\nRun the provided program and use the error messages to try and track down the bugs.",
        "PDAlg Updates Space_markdown_instruction": "Making use of limited programming space (especially on small screens) is challenging with a block based language. To help with this we've added a few features:\n\n- A draggable bar (three vertical dots) between the programming space and the game space allowing you to shrink the game space for more room to code.\n- A handful of redesigned blocks that take up less horizontal space (check out the new `overlay` block.)\n- The programming space will scroll vertically when the blocks extend past the visible screen space.\n- Zoom in and out using Cmd +/- (Mac) or Ctrl +/- (Windows)\n\nExperiment with this provided code to see how the space can be manipulated to deal with larger programs.",
        "PDAlg course goals_markdown_instruction": "# Documenting Your Course Goals\n\n**Now that you've learned more about the CS in Algebra Professional Learning Program and curriculum, let's consider your goals**\n\n  - What are your goals for your CS in Algebra class?\n  - How do you you see it integrating into your class, and what do you hope that you and your students get out of the experience?\n\n*These goals will change over time, and we'll revisit your response as we go through the course so we can check in on how we're progressing towards those goals.*\n",
        "PDK5 Challenges_markdown_instruction": "What are your biggest challenges to implementing Code.org's curriculum in your classroom?\n",
        "PDK5 Classroom Culture 2_markdown_instruction": "### Strategies for facilitating an engaged computer science classroom:\n\n- Be open to learning from your students. This is a very valid way for you to learn something new and if the students see you learning from others; they'll feel more comfortable to do it themselves.\n- Be calm yet persistent when problems arise (which they will) because your reaction sets the tone for students. If at the first sign of an issue, you proclaim \"I'm terrible at technology. I give up,\" your students will think it's okay to do that too. \n- Implement the \"Ask 3 and then me\" rule in your classroom, which is when students have to ask 3 classmates for help before they can ask the teacher that same question. This reduces the number of students that you have to answer individually and promotes peer learning.\n- Take pride in their programs. Show it off, put it to work, post it online. This is a big accomplishment for you and your students that should be celebrated.\n- Your students may not need you in the way you think they need you. You don't need to be the expert. Ask probing questions to a student (even if you don't know the answer to the questions). Or ask the class if anyone has the answer. Or say \"I don't know; let's figure this out together\"\n- Ask probing questions to help a student instead of taking their mouse away to solve the puzzle for them. Students will be more engaged if they have to move the mouse themselves. Also, make it a classroom rule that if a student is helping another student at a computer, they can't take the mouse from them either. \n- Understanding how to get the help you need is an important part of becoming a successful facilitator of a computer science classroom. There are a variety of ways to get questions answered: online groups, the person sitting next to you, email to a mentor or peer, Code.org community forums, or other computer science educators in your district.\n\nIt's possible that you might find something that's broken, unusable, or missing on our website, which in the computer science world is called a \"bug\". Take a screenshot of what happened, and describe the problem in an email to support@code.org. Also include what operating system and browser version you're using (example: Windows 7, Internet explorer 9). We really appreciate teachers and users sending us bug reports.\n\n### How will you foster a healthy CS classroom environment?\nNow that you know more about our curriculum, what practices do you want to use to promote a healthy atmosphere in your computer science classroom?'\n",
        "PDK5 Course Descriptions_markdown_instruction": "The courses use a spiraling curriculum design, in which concepts and skills are revisited in each course while delving deeper each time.\n\nEach course experience is a blend of online activities and \"unplugged\" activities, which are lessons where students learn computing concepts without a computer. The online experiences are composed of self-guided and self-paced tutorials, which use scaffolded sets of programming instructions to explore and practice algorithmic thinking. The unplugged lessons take a hands-on, often kinesthetic approach, making use of physical manipulatives to model computational concepts.\n\nEach course consists of about 18 to 20 lessons, each lasting between 25 and 45 minutes. They can be taught at a comfortable pace whether in consecutive days as a sub-unit or one day a week for 18 weeks. The content of each course builds conceptually on the previous course, so that a student can progress through all three experiences learning new concepts along the way.\n\nCode.org's K-5 curriculum aligns to CSTA Computer Science Standards and ISTE standards, while some lessons also integrate national Math, English Language Arts, and Science standards.\n\nAcross the entire K-5 curriculum, the use of *Computer Science Themes* scaffolds the development of ideas and recognizes the continual construction of knowledge:\n\n- Algorithms\n- Data\n- Abstraction\n- Computing Practice and Programming (Use of computational tools)\n- Computers and Communication Devices (Elements of computing devices and networks)\n- Community, Global, and Ethical Impacts\n\nAcross the entire K-5 curriculum, students will develop the skills of a computer scientist through the development of *Computational Thinking Practices*:\n\n- Creativity\n- Collaboration\n- Communication\n- Persistence\n- Problem Solving\n\n### Concepts Learned in each Course\n\nBy the end of **Course 1**, students will learn the following computer science concepts:\n\n- Sequence\n- Loops\n- Events\n- Debugging\n- Internet safety\n\nBy the end of **Course 2**, students will learn the following computer science concepts:\n\n- Sequence\n- Loops and nested loops\n- Conditionals\n- Introductory binary\n- Events\n- Debugging\n- Internet safety\n\nBy the end of **Course 3**, *which has a pre-requisite of Course 2*, students will learn the following computer science concepts:\n\n- Steps of computational thinking\n- Using and creating functions\n- Nested conditionals\n- While loops\n- Crowdsourcing\n- Methods of Internet data transmission\n- Digital Citizenship\n\n#### Which course is appropriate for the students you'll be working with?\n",
        "PDK5 Difficulty_markdown_instruction": "Was programming as hard as you expected? Explain why or why not. How does this impact your teaching of computer science?",
        "PDK5 Foundation_markdown_instruction": "Do you see computer science as a foundational skill for your students? Why or why not?",
        "PDK5 Goals_markdown_instruction": "What are your goals or intentions for integrating Code.org in your classroom?\n",
        "PDK5 Impact 1_markdown_instruction": "Do you think your students will find the online activities in the K-5 courses fun and engaging? Why or Why not?",
        "PDK5 Impact 2_markdown_instruction": "Does computer science connect to other topics or subjects your students are learning about? Explain why or why not.",
        "PDK5 Impact 3_markdown_instruction": "Does learning about computer science help students grow into the kind of citizens you are preparing them to be? Explain why or why not.",
        "PDK5 Loops 2_markdown_instruction": "In the last puzzle, you used a loop to get the bird to the pig with 2 blocks instead of using 5 \"move forward\" blocks. Why do you think it's important to write computer programs efficiently?\n",
        "PDK5 Promo Video 2_markdown_instruction": "<iframe width=\"640\" height=\"390\" src=\"https://youtubeeducation.com/embed/rNIM1fzJ8u0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<br>\n\n**[Can't see the video? Click here.](https://www.dropbox.com/s/q85v0y83rws4yd1/k5-affiliate-video-09032014.mp4?dl=0)**\n\n<br>\n\n\n#### What are your first impressions of Code Studio?\n",
        "PDK5 Promo Video_markdown_instruction": "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rNIM1fzJ8u0\" frameborder=\"0\" allowfullscreen></iframe>\n\n### What are your first impressions of Code Studio?\n",
        "PDK5 Strategies O_markdown_instruction": "Is teaching _computer science_ different than teaching other subjects like math or reading? Read this list of strategies and comment below on some of the differences you think you'll encounter when teaching computer science versus other subjects.\n\n[This worksheet](http://code.org/curriculum/docs/k-5/ClassroomStrategies.pdf) is also available in the Teacher Dashboard in the \"Lesson Plans and Resources\" tile. \n\n![image](//code.org/images/strategiesforteachingcs.png)\n\n</br>\n\n\n\n",
        "PDK5 Test5_markdown_instruction": "## What did you think about things?\n\nWhat are your thoughts?\n",
        "PS - test - pixelation_markdown_instruction": "# Do This\n\nComplete the \"X\" shape by typing 0s and 1s. You can always click \"Readable Format\" if you want to clean up your work.",
        "PS FR test 7-25_markdown_instruction": "Here is *some* **markdown**",
        "PS Log test - Define and use turnAround_markdown_instruction": "# Do This:\n**Define** a function called `turnAround` which turns the turtle around. Once you've defined the function **call** it to make sure it works as you expect and then move the turtle forward, as shown below. \n\n![](https://images.code.org/4c31307ec14cc6dfd65589f2a813120e-image-1447884881189.gif)",
        "PS copy - CSD U3 Variables Predict Where XY Embed_markdown_instruction": "# Predict\n\nIn which corner of the screen will the circle be drawn?\n\n_Hint: Click the \"Show grid\" box to help you find the exact coordinates on the screen._ [Show me where](#triggercallout=code_triggered)",
        "PS copy - CSD U3 Variables change circle size_markdown_instruction": "\n\n# Debug: Using Variables\n\nThis program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.\n\n# Do This\n\n* Change the value assigned to `circleSize` so that the circle takes up the entire screen.",
        "PS copy 2-3 Bee Conditionals 5_markdown_instruction": "These magic purple flowers change!\n\nEach time you try the puzzle, purple flowers can have either 1 nectar or none at all...but you won't know the number until you run the code! \n\nBe careful not to collect nectar from a purple flower if it doesn't have any. \nYou must first check if the nectar is equal to 1 using the `if nectar` block.",
        "PS fr prediction q1_markdown_instruction": "What do *you* think will happen? ",
        "Peer Review Level 1 - Tuesday Report_markdown_instruction": "Vacations are really fun. Please document a short and amusing story about a recent vacation.\n\nSome guidelines\n\n* Pics or it didn't happen\n* Keep it to 4 sentences or less please\n* Puns are strictly prohibited",
        "Peer Review Level 2 - Wednesday Report_markdown_instruction": "Cats are the best. Dogs are pretty cool as well. What do you like more, and why?\n\nSome guidelines\n\n* Cats are awesome\n* Cats don't give a what\n* Cats make for better GIFs\n* Pictures are great",
        "Peer Review: Personal Website_markdown_instruction": "# Peer Review\n\nToday you are going to have other people look at your website and give feedback on it.\n\n# Do This\n\n* Leave this open on your screen so your peer reviewers can look at your work",
        "Pixel Filterator_markdown_instruction": "# Free Play\n\nDo as you will, make something awesome",
        "Pixelation - AllTheThings 4_markdown_instruction": "# Pixelation: AllTheThings 4\nThis pixelation level demonstrates the use of the `hide_encoding_controls` option.  Notice that the level displays the image data in hexadecimal and does not let you change it back to binary.\n            ",
        "Pixelation - AllTheThings 5_markdown_instruction": "# Pixelation: AllTheThings 5\nThis pixelation level demonstrates the use of the \"Hide sliders\" option.  Notice that the width and height sliders are not available, and the width and height fields are not editable.",
        "Pixelation - Lesson 14 - Fix bit offset v.2_markdown_instruction": "Something happened to the bits in this image! Find the error and fix it! Hint: a few extra bits were added. You should only need to remove some bits.",
        "Pixelation - Lesson 14 - Fix bit offset_markdown_instruction": "# Oh no! An image got messed up during transmission!\n\n<img src = \"https://images.code.org/1f78b53ad4892dc8f9b50111fce35c7e-image-1439474859998.17.43 PM.png\" align=right width=200 hspace=20>\n\n**The problem:** A single extra bit was inserted into the stream of bits that make up the C of the Code.org logo. <br>That extra bit bumps all of the other bits down the line which makes the logo look messed up.\n<br>**Your task:** Hunt down the extra bit and remove it to fix the Code.org logo. \n<br>**HINT:** One bit early on would make it look like many bits were out of order. \n",
        "Pixelation - Lesson 14 - Fix bit offset_2018_markdown_instruction": "# Oh no! An image got messed up during transmission!\n\n<img src = \"https://images.code.org/1f78b53ad4892dc8f9b50111fce35c7e-image-1439474859998.17.43 PM.png\" align=right width=200 hspace=20>\n\n**The problem:** A single extra bit was inserted into the stream of bits that make up the C of the Code.org logo. <br>That extra bit bumps all of the other bits down the line which makes the logo look messed up.\n<br>**Your task:** Hunt down the extra bit and remove it to fix the Code.org logo. \n<br>**HINT:** One bit early on would make it look like many bits were out of order. \n",
        "Pixelation - Lesson 14 - Fix the error_markdown_instruction": "Something happened to the bits in this image!  Find error and fix it!  Hint: a few extra bits were added.  You should only need to remove some bits.",
        "Pixelation - Lesson 14 - Make your own B and W Image_markdown_instruction": "# Make your own image of any size\n\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\n\n\n**Directions:**\n\n* Encode an image of anything you like.\n* You might want to do some planning and sketching with graph paper first.\n* DO NOT simply make an abstract pattern, like a checkerboard. \n* Depict something, perhaps your name written out, your initials, an icon or logo of some sort.\n* Get creative! The image doesn't have to be a perfect square, it can be long and skinny.\n* Optional: for fun, send your image bits to a friend using the <a href =\"https://studio.code.org/s/cspunit1/stage/11/puzzle/2\" target=\"_blank\">sending bits widget.</a> *(note: this is just a link to the sending formatted text level from a couple of classes ago)*\n\n\n",
        "Pixelation - Lesson 15 - Color Free Play_markdown_instruction": "# Personal Favicon\n**Requirements:**\n<img src = \"https://images.code.org/28fc33ea82996a10863688702af55e65-image-1439596268865.png\" align=right hspace=20>\n\n* The icon must be 16x16 pixels. \n* You must use the Pixelation Widget to encode the bits of color information.\n* The image must be encoded with at least 12 bits per pixel.\n\n",
        "Pixelation - Lesson 15 - Color Shades_markdown_instruction": "# Color Pixelation: Task 2\n**Directions:**\n<img src='https://images.code.org/548d1daa698a17b1005b1747f152587f-image-1439476855059.png' style=\"width: 150px;\" align=right>We start you out with the row of shades of red that Maddie created in the video. Experiment with 6-bit color by filling in the bottom row of the image with shades of a different color.  Here is an example with some shades of blue.  Try your own color!",
        "Pixelation - Lesson 15 - Color Shades_2018_markdown_instruction": "# Color Pixelation: Task 2\n**Directions:**\n<img src='https://images.code.org/548d1daa698a17b1005b1747f152587f-image-1439476855059.png' style=\"width: 150px;\" align=right>We start you out with the row of shades of red that Maddie created in the video. Experiment with 6-bit color by filling in the bottom row of the image with shades of a different color.  Here is an example with some shades of blue.  Try your own color!",
        "Pixelation - Lesson 15 - Complete 3-bit color_markdown_instruction": "# Color Pixelation: Task 1\n**Directions:**\n\n* We start you with the 4x2 image Maddie was creating, but we've left out the last two squares. \n* Finish off the image by figuring out which two colors are missing and encode them.\n",
        "Pixelation - Lesson 15 - Complete 3-bit color_2018_markdown_instruction": "# Color Pixelation: Task 1\n**Directions:**\n\n* We start you with the 4x2 image Maddie was creating, but we've left out the last two squares. \n* Finish off the image by figuring out which two colors are missing and encode them.\n",
        "Pixelation 2_markdown_instruction": "Something happened to the bits in this image!  Find error and fix it!",
        "Pixelation 4x4 Empty_markdown_instruction": "The width and height are now encoded in the pixel data. Can you figure out how to adjust the dimensions?",
        "Pixelation Bee_markdown_instruction": "# Example of 12 bits per pixel\n* This larger image of a bee encodes color with 12 bits per pixel, but viewing in hex makes it easier to see the color of each pixel.\n* If you switch to binary mode - hold on to your hat - it's a lot of bits.\n* Here's another mind-blowing thing to try: slide the bits per pixel up to 24 bits per pixel. What happens? Can you explain this behavior?",
        "Pixelation Bee_2018_markdown_instruction": "# Example of 12 bits per pixel\n* This larger image of a bee encodes color with 12 bits per pixel, but viewing in hex makes it easier to see the color of each pixel.\n* If you switch to binary mode - hold on to your hat - it's a lot of bits.\n* Here's another mind-blowing thing to try: slide the bits per pixel up to 24 bits per pixel. What happens? Can you explain this behavior?",
        "Pixelation Flappy_markdown_instruction": "# Example of more bits per pixel\nHere is a bigger image at 9 bits per pixel. With 9 bits per pixel you can express 512 different colors. Click through to see the next image which is even more sophisticated, but easier to understand.",
        "Pixelation Flappy_2018_markdown_instruction": "# Example of more bits per pixel\nHere is a bigger image at 9 bits per pixel. With 9 bits per pixel you can express 512 different colors. Click through to see the next image which is even more sophisticated, but easier to understand.",
        "Pizza on a Plate_markdown_instruction": "**Project Idea:** Create a picture of something familiar from the real world. This requires persistence and planning!",
        "Play Lab Rocket 2_markdown_instruction": "We've started the Design Recipe for `rocket-height` using the contract and examples you just wrote. Complete the function definition for `rocket-height` and run your animation.",
        "Play Lab Rocket 3_markdown_instruction": "Awesome, now can you update that function so that our rocket moves more quickly? Make sure to update the purpose statement, examples, and function definition to launch a rocket at 40 meters per second.",
        "Play Lab Rocket Free Play_markdown_instruction": "Free Play: Experiment with your `rocket-height` function to make the rocket fly in different ways. Click \"Finish\" when you are done.",
        "Poorva-test_markdown_instruction": "# Header 1\n## Header 2\n### Header 3\n#### Header 4\n##### Header 5\n\nThis is regular text, **bolded text** and *italicized text*. ",
        "Practice Create Performance Task_markdown_instruction": "# Practice Create Performance Task\n\nYou've finally made it to the end of the Building Apps Unit! We will continue some programming in the next unit, but for now we are going to use all the new concepts you have learn to create something of your own design! \n\n# Do This:\n\n* **Read the Project Overview** to understand the entire project.\n* **Follow the Project Planning Guide**.\n* **Implement your final program in this level**.",
        "Practice Create Performance Task_2018_markdown_instruction": "# Create Performance Task\n\nIt's time to complete the Create Performance Task. Complete it here.",
        "Predict Loop I_markdown_instruction": "# Predict\n\nWhat will print as a result of this loop?",
        "Predict Loop I_2018_markdown_instruction": "# Predict\n\nWhat will print as a result of this loop?",
        "Project - Final Image Scroller_markdown_instruction": "# Final Image Scroller\n\nYou're now ready to add key event functionality to your app! As you are doing so, keep an eye out for places where you need to **refactor** old code in order to prevent redundancy. **Create functions** that carry out repeated tasks and make other changes to keep your code **readable and consistent**. \n\nIf you want a reminder of how key events work, you can always go back to the example from earlier in this lesson.  You will need to add `if` statements to check for which keys were pressed, just as before.\n\n# Do This:\n\n* Add the ability to respond to **key events** to your app.\n\n* **Refactor your old code** to remove redundant portions.\n\n* Keeping adding to your program. What other features do you want to include?",
        "Project - Final Image Scroller_2018_markdown_instruction": "# Final Image Scroller\n\nYou're now ready to add key event functionality to your app! As you are doing so, keep an eye out for places where you need to **refactor** old code in order to prevent redundancy. **Create functions** that carry out repeated tasks and make other changes to keep your code **readable and consistent**. \n\nIf you want a reminder of how key events work, you can always go back to the example from earlier in this lesson.  You will need to add `if` statements to check for which keys were pressed, just as before.\n\n# Do This:\n\n* Add the ability to respond to **key events** to your app.\n\n* **Refactor your old code** to remove redundant portions.\n\n* Keeping adding to your program. What other features do you want to include?",
        "Project - Finish your canvas app_markdown_instruction": "# Create Your Own Effect!\n\nYou've just seen several ways that we can process our array `eventList` in order to create different effects. Now it's time to make your own! **Extend the functionality of one of the effects you just created, or create an entirely new one**. What else could you do with the information you've stored in your array? How else might you combine the programming tools you've developed?\n\n# Do This:\n\n* **Extend the functionality of one of the effects, or create an entirely new one of your own!**",
        "Project - Your Own Multi Screen App_markdown_instruction": "# Multi Screen App\nYou will be creating your own multi-screen app to practice designing user interfaces and writing event-driven programs. \n\n**Look at the Project Guide and Planning Sheets before programming**.\n\n# NOTE: Bigger toolbox\n\n* You may notice that we've included all of the commands you know so far in the coding toolbox **plus a few more**\n* Remember you can hover over a command to see documentation for it.\n* You can also just try it out to see what it does.\n\n# Requirements Reminder\n* Your app must have a purpose\n* Your app will have at least **4 screens**.\n* Your app should include **text, images, buttons, and sound**.\n* There should be **no “getting stuck” on any screen.**  It should always be possible to navigate from a screen in your app to some other screen. \n* Your program code should follow **good style**.\n* Your user interface should be **intuitive to use**.",
        "Project - Your Own Multi Screen App_2018_markdown_instruction": "# Multi Screen App\nYou will be creating your own multi-screen app to practice designing user interfaces and writing event-driven programs. \n\n**Look at the Project Guide and Planning Sheets before programming**.\n\n# NOTE: Bigger toolbox\n\n* You may notice that we've included all of the commands you know so far in the coding toolbox **plus a few more**\n* Remember you can hover over a command to see documentation for it.\n* You can also just try it out to see what it does.\n\n# Requirements Reminder\n* Your app must have a purpose\n* Your app will have at least **4 screens**.\n* Your app should include **text, images, buttons, and sound**.\n* There should be **no “getting stuck” on any screen.**  It should always be possible to navigate from a screen in your app to some other screen. \n* Your program code should follow **good style**.\n* Your user interface should be **intuitive to use**.",
        "Project: Finish Color Sleuth_markdown_instruction": "# Challenge - Pick a way for the game to end and implement it\n\nYour challenge now is to add some code completely on your own.  Use what you've learned so far, and Alexis and Michael's discussion to help you.\n\n**This is the last programming level**\n\n* Make all changes and additions to the program that you want here\n* When you're done hit **Submit**\n\n**Goal:** Add code that provides a way for the game to end which:\n* Switches to the `gameOver_screen`\n* Shows which player won the game by showing `player1Win_label` or `player2Win_label`\n\n*We've provided `gameOver_screen` as part of the template for this project -- Switch to Design Mode to take a look at what's there*\n\n**Suggestions**\n* If you're stuck for ideas, try to implement the end game condition of \"first to 10\" - first player to reach a score of 10 wins.\n* You should use the suggestion from the discussion to add a function like `checkGameOver()` and call it from `checkCorrect`\n\n<details><summary><strong>Above and Beyond: optional extra options for your project [Click to expand]</strong></summary>\n\n<p>\nHere are a bunch of ways you can add to or extend the project:\n\n</p>\n<ul>\n\n\n<li>Add \"start over\" button on the last screen, which should reset everything, and go back to the game play screen\n</li>\n<li>Add a welcome screen that explains the rules and invites the player to start the game (make it the default screen)\n</li>\n<li>Make the game more difficult:</li>\n<uL>\n<li>Make the colors more similar (we added 20 to every RGB value, try 15 or 10).</li>\n    <li>Or make the difficulty variable - you can generate a random number between 5 and 20 and add that to the RGB values. </li>\n    <li>Or make it get progressively more difficult - use a variable to keep track of how much to add to each RGB value and decrease it over time.</li>\n\t<li>Or on a welcome screen ask if the player wants to play easy, medium, or hard.</li>\n</uL>\n\n<li>Add a timing element - lookup the documentation for setTimeout which calls a function after a certain amount of time. (Note: you may need to remix the project in as a free-play App Lab project to do this).\n</li>\n<li>You can also use <code>getTime()</code> at the beginning and end of your code to figure out how long it took for the game to end, which you could use to adjust the score.</li>\n</ul>\n</details>\n",
        "Project: Finish Color Sleuth_2018_markdown_instruction": "# Challenge - Pick a way for the game to end and implement it\n\nYour challenge now is to add some code completely on your own.  Use what you've learned so far, and Alexis and Michael's discussion to help you.\n\n**This is the last programming level**\n\n* Make all changes and additions to the program that you want here\n* When you're done hit **Submit**\n\n**Goal:** Add code that provides a way for the game to end which:\n* Switches to the `gameOver_screen`\n* Shows which player won the game by showing `player1Win_label` or `player2Win_label`\n\n*We've provided `gameOver_screen` as part of the template for this project -- Switch to Design Mode to take a look at what's there*\n\n**Suggestions**\n* If you're stuck for ideas, try to implement the end game condition of \"first to 10\" - first player to reach a score of 10 wins.\n* You should use the suggestion from the discussion to add a function like `checkGameOver()` and call it from `checkCorrect`\n\n<details><summary><strong>Above and Beyond: optional extra options for your project [Click to expand]</strong></summary>\n\n<p>\nHere are a bunch of ways you can add to or extend the project:\n\n</p>\n<ul>\n\n\n<li>Add \"start over\" button on the last screen, which should reset everything, and go back to the game play screen\n</li>\n<li>Add a welcome screen that explains the rules and invites the player to start the game (make it the default screen)\n</li>\n<li>Make the game more difficult:</li>\n<uL>\n<li>Make the colors more similar (we added 20 to every RGB value, try 15 or 10).</li>\n    <li>Or make the difficulty variable - you can generate a random number between 5 and 20 and add that to the RGB values. </li>\n    <li>Or make it get progressively more difficult - use a variable to keep track of how much to add to each RGB value and decrease it over time.</li>\n\t<li>Or on a welcome screen ask if the player wants to play easy, medium, or hard.</li>\n</uL>\n\n<li>Add a timing element - lookup the documentation for setTimeout which calls a function after a certain amount of time. (Note: you may need to remix the project in as a free-play App Lab project to do this).\n</li>\n<li>You can also use <code>getTime()</code> at the beginning and end of your code to figure out how long it took for the game to end, which you could use to adjust the score.</li>\n</ul>\n</details>\n",
        "Raw Data Podcast: Data Confidential_markdown_instruction": "## Raw Data Podcast: Data Confidential <i class=\"fa fa-volume-up\" aria-hidden=\"true\"></i>\n\nRaw Data is a podcast from the Stanford Cyber Initiative that explores the uses and impact of data. This episode explores some of the practical implications and needs for having access to secure communication online. \n\nCheck out the Episode via the link below: ",
        "Raw Data Podcast: Gold or Pyrite_markdown_instruction": "## Raw Data Podcast: Gold or Pyrite <i class=\"fa fa-volume-up\" aria-hidden=\"true\"></i>\n\nRaw Data is a podcast from the Stanford Cyber Initiative that explores the uses and impact of data. This episode explores some of the ways companies can use the data they collect about us, and guests explore how our future might look.\n\nCheck out the Episode via the link below: ",
        "Repeat Predict Contained_markdown_instruction": "# Predict\n\nHow many times will the for loop below run?",
        "Revisiting the Counter Pattern_markdown_instruction": "Today you’re going to learn how to use and create **functions**.\n\nCreating a function lets you make your own blocks! There are two parts to a function: \n\nMaking a newly named block that has all of the code you want to run inside of it. \n-xml of function definition- \n\nThe single green block itself that you use, or call, to run the function you created.\n-xml of function call-\n\nPrepare to get familiar with functions, learn how to edit them, and create your own!",
        "Revisiting the Counter Pattern_2018_markdown_instruction": "Today you’re going to learn how to use and create **functions**.\n\nCreating a function lets you make your own blocks! There are two parts to a function: \n\nMaking a newly named block that has all of the code you want to run inside of it. \n-xml of function definition- \n\nThe single green block itself that you use, or call, to run the function you created.\n-xml of function call-\n\nPrepare to get familiar with functions, learn how to edit them, and create your own!",
        "Robot Doodle_markdown_instruction": "**Project Idea:** Create a picture of something familiar from the real world. This requires persistence and planning!",
        "Robot Doodle_2018_markdown_instruction": "**Project Idea:** Create a picture of something familiar from the real world. This requires persistence and planning!",
        "Robot Drawing_markdown_instruction": "**Project Idea:** Create a picture of something familiar from the real world. This requires persistence and planning!",
        "Robot_markdown_instruction": "**Project Idea:** Create a picture of something familiar from the real world. This requires persistence and planning!",
        "Rocket Height Course A_markdown_instruction": "Follow the Design Recipe to create a function `rocket-height` which produces the height of a rocket traveling at 15 meters per second.",
        "Room Escape Workshop - 1_markdown_instruction": "# Setting Up Rooms\n\n<img src=\"https://images.code.org/9d103d74f7c2da05aeccd5fc317e6ab6-image-1490368234432.08.44 AM.png\" style=\"width:200px; float:right\">\n\nIn order to make your room escape you will need to set up the room the user will be able to adventure around in. Some of the work has already been done for you.  You just need to decide what the different parts of the room will look like by picking pictures!\n\n# Do This\n\n* The level starts in Design Mode\n* For each image element that is blank (gray rectangle) add an appropriate image. For example you will need a door image for the image element labeled door.\n* An example of what the room might look like are on the right.",
        "Room Escape Workshop - 10_markdown_instruction": "# Door Open\n\n<img src=\"https://images.code.org/3651f7d5306bdcfd2d9a3d9bb842626e-image-1491066778787.12.36 PM.png\" style=\"width:200px;float:right\">\n\nGetting close! Lets set up the door to get ready for opening it.\n\n# Do This\n\n* Add image for the outdoors\n* Give it a good ID (maybe *outside*)\n* Hide the image for the outdoors (It will be shown when door opens)",
        "Room Escape Workshop - 11_markdown_instruction": "# Got Key\n\nIn order to make sure the user got the key before trying to open the door we will need a variable to keep track of if they got the key.\n\n# Do This\n\n* Add a variable at the top of the program called gotKey and set the right side of the gotKey variable to the word false\n<img src=\"https://images.code.org/58e88b028ee9190b0288c7fcbabe389f-image-1490371419468.02.50 PM.png\" style=\"width:300px\">\n\n* Inside the `onEvent` command for the key in the safe set gotKey to true to indicate they got the key.\n\n<img src=\"https://images.code.org/def02108cabc85383129c5bb29b3af4f-image-1490371463514.04.10 PM.png\" style=\"width:400px\">\n\n* You will use this to set up the door on the next level",
        "Room Escape Workshop - 2_markdown_instruction": "# Connecting Rooms\n\nLets make it so the user can go between the rooms. There is an arrow button in each room which will be used to move between rooms. To make buttons react to your click you will need an event handler for each button.\n\n# Do This\n\n* Add an `onEvent` block for each of the arrow buttons\n* Inside each `onEvent` block use the `setScreen` command to say which screen to switch to",
        "Room Escape Workshop - 3_markdown_instruction": "# Hide the Code\n\n<img src=\"https://images.code.org/6fa80456a39d9b6417545f5f66ec83a5-image-1490368827625.png\" style=\"width:400px;float:right\">\n\n1. In Design Mode Click on the white square where it says \"CODE\". Change it to show a secret code of your choice\n2. Drag the picture down to cover the secret code\n\n![]()",
        "Room Escape Workshop - 5_markdown_instruction": "# Checking the Secret Code\n\nNow that you have collected a guess of the secret code from the user you will need to check if it is correct! We can do this using an `if` statement. An if statement checks if a condition is true, in this case it will check if the number the user entered is equal to the secret code\n\n# Do This\n\n* Inside the `onEvent` block for the safe below the prompt command add an <img src=\"https://images.code.org/5e9a434b1ad6b8f010db928b668127a5-image-1491061131564.37.01 AM.png\" style=\"width:100px\"> statement \n* Create the condition by pulling out the <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08 AM.png\" style=\"width:100px\"> block which will check if two things are equal\n* On one side of <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08 AM.png\" style=\"width:100px\"> put *guess* (the name of the value we used to store the users guess)\n* On the other side put the value for your secret code",
        "Room Escape Workshop - 9_markdown_instruction": "# Click Key\n\n<img src=\"https://images.code.org/349cff555af4337118791d84acf1a5b2-image-1490371172781.59.08 AM.png\" style=\"width:200px;float:right\">\n\nOnce a user clicks the key you will want to show they are holding it. You can do this by adding a key at the bottom corner of the room. \n\n# Do This\n\n* Add a key image at the bottom right corner of the room\n* Set the key to hidden in Design Mode",
        "Room Escape Workshop - free play_markdown_instruction": "# You've done it!\n\nYou made a room escape! Now its time to customize it. \n\nConsider:\n\n* Adding more rooms\n* Adding more things users can interact with in the rooms\n* Add more style to the rooms",
        "Ryan Test Locked Blocks_markdown_instruction": "Here's a function called `patrol`. Edit it to move the Cat up 400 pixels and then down 400 pixels.",
        "SG Add Subgoals practice_markdown_instruction": "# Now you try adding subgoals!\n\nThis time we have provided you with an empty workspace and new problem. To solve it this time you'll **start** by adding subgoals first, *then* adding the code.\n\nThe *benefit* of using subgoals is that you can lay out a solution to your problem ahead of time before getting overwhelmed or stuck in the code.  Once you've solved a subgoal, you can move on to the next one.\n\n# Do this\n<img src=\"https://images.code.org/4bc7896538039f1904699eba35bcd5e3-image-1508447681081.png\" style=\"float: right\">\n\n**Goal**: make the turtle draw two steps (shown at right).\n\nAfter you have understood and thought about the problem you should:\n\n1. **Start by dragging subgoals into the workspace** that you think express a solution to the problem.\n2. **Then** start filling it in with turtle blocks\n3. You should **test incrementally** as you go - add the commands to complete one goal, run the code, fix if it doesn't work, then add commands to complete the next goal and so on.\n\nWhen you think you're done click `Finish` and move on.\n\n**Stuck?** This animation shows a programmer adding goals and then code.\n\n![expandable](https://images.code.org/1805d750cb4e653ebf505f4a8a2c7840-image-1508447936880.gif)",
        "SG U3L01 Assessment1_markdown_instruction": "Consider the algorithm you designed for today’s activity. Identify two instances where there may be multiple ways to interpret your instructions and suggest improvements that could be made to improve their clarity.\n",
        "SG U3L01 Assessment3_markdown_instruction": "Describe the features of a programming language that make it different from the language you typically use in everyday life. Explain why a programming language must be created in this way.\n",
        "SG U3L02 Assessment_markdown_instruction": "This lesson introduced the notion of \"efficiency\" in programming, and that it might mean different things at different times.  Think of an example *outside* of computer science in which you have heard the term “efficiency” and compare it to the ways we talked about efficiency in programming.  \n\nIn what ways is the meaning of \"efficiency\" the same? In what ways is it different?",
        "SG U3L02 Free Response Getting Started_markdown_instruction": "In this lesson we solved a series of problems with a limited set of commands (only 2). Give at least one reason why it's useful to learn how to solve and program solutions with a limited set of commands.\n\nIn this lesson we solved a series of problems using the `Move turtle` and `Orient turtle` subgoals. Give at least one reason that breaking problems down into subgoals is a good approach to solving problems.",
        "SG U3L02 Free Response Wrap Up_markdown_instruction": "Summarize your experiences with this first App Lab lesson by answering the following questions:\n\n\n* Were you able to be creative with such a limited set of tools?\n* What was most frustrating about this activity? If you could add one additional block, what would it be and why? What subgoal would that block achieve?",
        "SG U3L03 - draw rect function_markdown_instruction": "This is your code from the previous level.  Did you know that you can write functions that call your other functions?\n\nTake the code that draws the rectangle and move it into a new function called `drawRectangle()`. The first line of your program should be a single call to `drawRectangle()`. The rest of the code should just be function definitions, including your definition for **right**.\n\nYou'll only need one subgoal for this, `//Define function`.\n\nNOTE: your program will still do the same thing.  We are just changing the way it is written to demonstrate that you can use functions you've already written as building blocks in new functions.\n\n![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)",
        "SG U3L03 - draw step_markdown_instruction": "We are going to walk you through a process that shows you the benefit of thinking about programming tasks in terms of writing functions.\n\n* Over the next 3 levels we are going to write a program that draws the figure shown at right which sort of looks like a jagged diamond shape. <img src=\"https://images.code.org/53679cc10ff90b6120184d93ad012797-image-1441770558200.png\" align='right'>\n\n* If you look at this image you might recognize elements that repeat: this is a 4-sided figure, and each side is made up of some zig-zag steps.\n\n* We're going to break the programming down into useable parts and then use those parts as building blocks to make this more complex drawing.\n\n* First let's **define** a function that *draws just one of these zig-zag steps.*  We've started you out with a definition of `right()` that you can use...\n\n# Do This:\n\n**Define** and call a function named `drawStep()` which makes the turtle move forward and left as shown. \n\n**Note**: at the end the turtle should be facing the same direction it started.\n\n\nYou'll use four subgoals for this. First, you'll **define a function** (`//Define function`), which will include **moving the turtle** (`//Move turtle`) and **orienting the turtle** (`//Orient turtle`). Last, don't forget to **call the function** (`//Call function`). If you get stuck, plan your solution with subgoals.\n\n![](https://images.code.org/4fa605353695afa0cd01ec01a1e2c709-image-1441772033658.gif)",
        "SG U3L03 Define and use turnAround_markdown_instruction": "# Do This:\n**Define** a function called `turnAround()` which turns the turtle around. Once you've defined the function **call** it to make sure it works as you expect and then move the turtle forward, as shown below. \n\n![](https://images.code.org/4c31307ec14cc6dfd65589f2a813120e-image-1447884881189.gif)\n\n**Remember** typically, you call a function in lines of code *above* the function definition - this might make you  feel like you are working in reverse, since you first write the code to define the function and *then* add a line to call it.  Here is the `moveTwice` example from the video. You should do something similar for turnAround:\n\n![](https://images.code.org/3faf16575757ffae616dffd761085ab5-image-1467818996127.gif)\n\nYou'll use four subgoals to solve this problem (sort of). First you'll `//Define function`, which will include `//Orient turtle`. As you will start to see, even subgoals can be broken down into subgoals sometimes. This will be helpful when you start creating more complex functions. \n\nThen you'll `//Call function` and `//Move turtle`.\n\nDon't forget to name your functions.",
        "SG U3L03 Draw a T using turnAround_markdown_instruction": "# Do This:\nGet some more practice **calling** a function by using `turnAround()` along with your old friend the `moveForward()` function to create a plus sign that is centered at the turtle's first position, as shown below. Even though you just wrote this function, we've already **defined** `turnAround()` for you. \n\nRemember, add lines of code that call the function *above* the definition. The function definition is after the function call to support **abstraction**. If you don't need to know how the function works inside, you never have to look at it, you can just call it.\n\n*NOTE: the turtle should end where it started, which is also the middle of the plus sign, as shown below. Each of the four segments of the plus sign are one `moveForward()` long.* \n\n![](https://images.code.org/9d6c2d7d69c2f1c68c5b273bdbae65c7-image-1441296690812.11.14 AM.png)\n\n\nYou'll use three subgoals for this problem: `//call function`, `//orient turtle`, and `//move turtle`. Defining the function is already done for you. We've put subgoals for the first few steps in already. Plan the rest of the code with subgoal blocks (in the **Goals** tab) to get the most efficient path before filling it in with blocks.",
        "SG U3L03 Free Response Wrap Up_markdown_instruction": "In your own words, explain at least one reason why programming languages have functions.  Include an example of something you did in this lesson that demonstrates the reason you describe.\n",
        "SG U3L03 define turnRight and draw a rectangle_markdown_instruction": "# Draw a rectangle with right\n\nAs you know, in order to turn right we have to call `turnLeft()` three times.  We've started you out with a stub that **defines** a function called `right()`.  Start by adding code inside the function definition that will turn the turtle to the right (by turning left three times) when called. \n\nThen **use** this function in some code to draw a rectangle, as shown below.  Make sure the turtle ends facing the same direction and in the same location it started. The rectangle below is 2 `moveForward`s tall and 1 `moveForward` wide.\n\n![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)\n\n**Note**: Your program will still do the same thing. We are just changing the way it is written to demonstrate that you can use functions you've already written as building blocks in new functions.\n\nYou'll use three subgoals to solve the problem: `//Orient turtle`, `//Move turtle`, and `//Call function`. `//Define function` is already done for you. Notice that we haven't filled the subgoals in for you (for the right function or drawing the rectangle). If you are having trouble finding the solution, plan your approach with subgoals before filling it in with blocks. If you're not having trouble, feel free to skip the subgoals.",
        "SG U3L03 draw diamond_markdown_instruction": "# Do This:\nWe're finally ready to make our diamond! **Define** a function named `function drawDiamond()` that **calls** `drawSide()` multiple times in order to complete the drawing. Your final solution should be triggered by **a single call** to `drawDiamond()`. \n\n<table>\n<tr>\n<td><img src=\"https://s3.amazonaws.com/uploads.hipchat.com/65395/961892/NoxVhFlLf9HlybZ/upload.png\" width=200></td>\n<td><img src=\"https://images.code.org/dca51c5b17a8c0778787337c3609557c-image-1441802821237.gif\" width=200></td>\n</tr>\n</table>\n\n<hr>\n\n**Notes**:\n\nIn the end you will have 4 functions defined:\n\n* drawDiamond()\n* drawSide()\n* drawStep()\n* right()\n\nThese 4 functions work sort of like a hierarchy of top-down design.  At the top is `drawDiamond()` which makes calls to `drawSide()`, which makes calls to `drawStep()` and `right()`.\n\nFor most programming problems that you face, the problem won't be broken down into pieces like it was for this series of puzzles. You'll have to figure out your own hierarchy of functions based on which patterns you want to use multiple times. This is why planning your solution ahead of time can make your code more efficient. \n\nSubgoals will help you do this. Once you recognize that the diamond can be drawn using the same function repeated 4 times, you can note with a subgoal comment that you'll need to define and call a function for `drawSide()`. Then you can figure out that one side can be drawn using the same function 3 times plus a couple of steps, you can make note to define and call `drawStep()`. Once you've planned the solution, you can fill in blocks to complete it.",
        "SG U3L04 - 3 by 3 with functions_markdown_instruction": "# Do This:\n\nWe're going to revisit a familiar problem, **drawing the 3x3 square as efficiently as possible**. The only difference is that this time you are armed with the ability to create **layers of functions** to help you design more elegant and efficient solutions. Use the techniques you've learned for **breaking down problems into layers of functions** in order to improve upon your previous solution. Think about how to combine functions to use as few blocks as possible.\n\nYou'll need 4 subgoals for this task. Think about how you can `//Define function` and `//Call function` to draw most of the square, then fill in the rest using `//Move turtle` and `//Orient turtle`.\n\n![](https://images.code.org/121251ed82b4986848062abacdef6963-image-1441824892425.54.18 PM.png)",
        "SG U3L04 - snowflake_markdown_instruction": "# Do This:\n\nYou should have already worked with a partner to break down the design below into its multiple layers of functions. Now you'll have an opportunity to program your solution. Here are a few things to keep in mind:\n\n* Identify useful patterns that can be reused and give them **their own functions**.\n* Remember: The functions you design **can call one another**. This is how you create layers of abstraction.\n* Functions should be given names that are **descriptive and meaningful**.\n* Your program should be kicked off with a single call to a function that makes calls to subsequent functions.\n\nYou'll use four subgoals for this: `//Define function` and `//Call function` and `//Move turtle` and `//Orient turtle`. If you don't already have a plan somewhere else, plan out your program with subgoals first.\n\n\n![](https://images.code.org/afed66de9dc3cdb10f627a176139c58f-image-1441822234028.09.33 PM.png)",
        "SG U3L04 Assessment1_markdown_instruction": "Consider the figure below.  Use top-down thinking to design a solution to the problem.  In the space provided write a list of **just the names** of the functions that you would write in a program that draws this figure.  (Assume that the long line segments are 6 turtle moves long).\n\n![](https://images.code.org/43895f8ceccb12f72e7f5ba03152a6e6-image-1441914144956.png)\n",
        "SG U3L04 Free Response Wrap Up_markdown_instruction": "In the Create Performance Task, you will be asked to identify an abstraction in your program and explain how it helps manage the complexity of the program. Functions are a form of abstraction. Pick a function you wrote in your solution to the 3x3 square problem and explain how it helps manage the complexity of your program.",
        "SG U3L06 - moveForwardwithParams_markdown_instruction": "# A New Way to Move the Turtle\nThe `moveForward()` turtle command that we've used so far moves the turtle the same amount every time (25 pixels in fact). Similarly, `turnLeft()` turns the turtle to the left exactly 90 degrees. Today we are going to see how some functions can **accept input**, such as a number, to be used more flexibly. For example, you can write `moveForward(103)` to move the turtle forward exactly 103 pixels if you like.\n\n# Do This:\n\n**How far is it to the top edge of the screen?**\n\nRun the program to see the new version of `moveForward()` in action. Then **changing only the number supplied to `moveForward()`**, move the turtle to the top edge of the screen. Experiment to find out the distance in pixels between where the turtle starts and the top edge of the screen.\n\nOnce you've found it, compare with a neighbor to see that you're seeing the same thing and click **Finish** to move on.\n\nYou'll only use one subgoal - `//Move turtle` -but now you have more flexibility in how this subgoal is achieved.\n\n**Note:** There might be slight differences depending on whether you get the turtle to just touch the edge, or go off the screen entirely.",
        "SG U3L06 Assessment_markdown_instruction": "It is said that *functions with parameters generalize the behavior of a more specific command and allow programmers to use functions instead of duplicated code.* Explain what this means to you using the difference between turnLeft() and turnLeft(angle) as an example.\n",
        "SG U3L06 Challenge 2 purple square_markdown_instruction": "# Do This:\n\n**Draw the square:** Use pen color and width functions to draw the thick blue square shown below.  The size of the square doesn't matter.\n\nIn addition to the usual `//Move turtle` and `//Orient turtle` (and `//Define function` and `//Call function` if you want to be extra efficient), you'll also need to use the new subgoal `//Set pen properties`.\n\n<img src=\"https://images.code.org/6ed36a408e568a0410f10d017550843f-image-1441904430698.png\" style=\"height: 250px\">\n\n**Remember:** If you get stuck on what a specific block does, you can read through the documentation by **hovering over** `penColor()` and `penWidth()` which let you set the color and size of the pen your turtle uses to draw. \n\n",
        "SG U3L06 Challenge 3 fill pink_markdown_instruction": "# Drawing with Dots\n\nWe've added a new command called `dot()`.  \n\n**Read the documentation** for the `dot()` command.\n\n**Make a \"snowman\"**\n\n1. Set the pen color to some new color (we made ours pink)\n\t* Note: even if you just want the default dot color - black - explicitly set the color to black here.\n\n2. Using that color, make a dot so big that it fills the screen.\n\n3. In a different color, make 3 dots in a row, each one smaller than the next. (We made our dots white to look like a snowman)\n\nYou might want to go back to the documentation for `penColor()` to look up other colors to use.\n\n![](https://images.code.org/e63f3cf801abf22c01c475031c46ff66-image-1441992129690.gif)\n\nYou'll need two subgoals for this: `//Set pen properties` and `//Move Turtle`. Because you need to make two dots at the beginning without moving the turtle, you're really doing `//Set pen properties` twice in a row. Because this problem will take a little bit of experimentation to get the dots the right size, we've already outlined the problem solution with subgoals.",
        "SG U3L06 Challenge 8 make your own_markdown_instruction": "# The Full Turtle API\n\nWe've added a few more commands to the toolbox. At this point you have access to every turtle command provided by App Lab. As we've already seen with our exploration of functions you can combine these commands to create more complex functionality, but at the lowest level all of your code will be making use of the set of commands provided by App Lab.\n\n<img src=\"https://images.code.org/7648c5293d04a57e4f715b5c08899ff9-image-1441996324573.png\" style=\"height: 250px; float: left; margin: 10px\">\n\nCode you write will always be based upon the commands that are provided by the programming language you are using. When several commands are provided in a logical chunk, like the set of turtle commands, we refer to them collectively as a **library** of functions. The total set of commands that a language provides access to is called the **application program interface**, or simply an **API**. \n\nAs you gain more experience you will gain familiarity with the API for the language you are using, but you will still want to return to the **API documentation** from time to time to remind yourself what functionality a language offers.\n\nCongratulations, you've really come a long way as a turtle artist! \n\n# Do This:\n\n**Draw whatever you like!**  The only requirements are:\n\n* use at least 3 different colors\n* use moveTo\n\nExplore the documentation for any new commands you see and use your skills as both an artist and user of **API documentation** to **draw something of your own choosing.** Don't forget to plan it out using subgoal labels.\n\nIf in doubt: try to re-create \"I [heart] CS\" drawing shown here.",
        "SG U3L07 - Free Play Loops and Random_markdown_instruction": "# Free Play!\n(Optional)\n\nMess around with your \"Under the Sea\" scene to make it do different things.  \n\n**Ideas:**\n* Make different amounts of each component.\n* Play with the ranges of random values.\n* Add other creatures.\n* Play with color values to give the scene a different feel (nighttime? red dawn?).\n* Get creative!\n\n# Don't Worry... You Can't Screw It Up\n* Play around as much as you want - you can **always go back to a previous version**.\n* Each time you hit \"Run\" your code is saved in a way that lets you get back to it.\n* Notice that there is button at the top of the page called **Version History** that lets you see and use any previous version of your code.\n\n![](https://images.code.org/881d72d190c0637705f8021369962701-image-1443117323816.gif)",
        "SG U3L07 - createTriangleParam_markdown_instruction": "# Defining Functions with Parameters\n\nThis time you're going to write your own function with parameters to complete an image. Two function calls to `drawTriangle()` have been placed at the top of the program but the function itself needs to be defined.  The program should draw this:\n\n![](https://images.code.org/4a96eff03ba79b881b98137048140953-image-1442523578705.59.20 PM.png)\n\n# Do This:\n**Complete** the function definition for `drawTriangle(sideLength)` . Notice that you have already been given a **descriptive and meaningful parameter name**, `sideLength`, but you can change it if you wish.\n\n**Hint:** you should put the pen down and pick it up as part of the definition of `drawTriangle()` - that way you guarantee that a call to drawTriangle will always actually draw. Picking the pen up as the last act of the function is a nice thing to do for any other code that might not be expecting drawTriangle to have a side effect of putting the pen down.\n\nAs a reminder of how to use a parameter within the function here is a correct version of `drawSquare(size)` for reference.\n\n![](https://images.code.org/ead2720df19b117cae753c4397dd832d-image-1442868072299.png)\n\nWhen we used the subgoal `//Define function` before, we only gave the function a name and then filled it in with blocks. In this problem the subgoal `//Define function` includes giving the function a name, defining the parameters, and filling it in with blocks. For this puzzle, we've done the first two steps for you, but you'll be doing it all in the coming puzzles.\n\n",
        "SG U3L07 - fish_markdown_instruction": "# Add Fish\n\nThe next high-level function you will write is `drawAllFish`. A version of `drawFish` with parameters has been provided for you to use.\n\n# Do This:\n\n* **Read** the `drawFish` function to know how it works and what **parameters** it accepts.\n\n* **Add a loop** to `drawAllFish`.\n\n* **Place the commands already inside the function in your loop.** This way your code will **move the turtle randomly** around the **top 360 pixels** of the image and draw **15 fish** of random size between **5 and 20** using `drawFish`.\n\n* Once you have your loop working try calling `drawFish` with random values for its `red`, `green`, and `blue` parameters to get differently colored fish.\n\n![](https://images.code.org/cbbb8e02c14cbc2d199ede4531090513-image-1443046439253.12.35 PM.png)",
        "SG U3L07 - randomDots1_markdown_instruction": "# Looping with Random Values\n\n<img src=\"https://images.code.org/520e45a90988b04bb0ff3baa184f080a-image-1443108426597.png\" style=\"width: 100px; float: right;\">\n\nIf you add some randomness to turtle behavior inside a loop, the program will run a little differently every time which can make for some cool effects.\n\nYou're about to see a program in which the turtle **moves to a random location** each iteration of the loop, and **draws a randomly-sized dot** that also has a **random color**.  We've also made the dot semi-transparent by setting the alpha value to 0.5 (50% transparency).\n\n# Do This:\n\n**Figure out how many iterations** (number of times the loop runs) you need to consistently fill the screen entirely with dots so none of the background is showing.  It will be a little different every time so you'll need to experiment.\n\n**Compare what you found** with a neighbor to see how close your results are.  Then **move on**.",
        "SG U3L07 - randomSquare_markdown_instruction": "# Practice Using Loops - Part 2\n\nLet's look at the second example from the video. \n\nUse a `for` loop to call a function that you wrote.  We've provided the code for the `drawSquare()` function for you. \n\n**Drag out** a `for` loop.\n\n**Inside the loop** add a call to `drawSquare()`, and a call to `turnRight()`.\n\n**Run the program** to see what's happening.\n\n# Do This:\nChange the number of loop iterations to draw a lot of squares.  Try to create the figure shown below (or something similar).  HINT: the image below has 72 squares in it.\n\n![](https://images.code.org/e4d3f180b2f1e421a96d40ecacce029a-image-1443104869913.gif)\n\nOnce you've played enough to get the hang of calling a function from inside a loop then **move on**.\n\nTo solve the problem, you'll achieve the subgoal `//Write a loop` and within your loop, you'll use `//Call function` and `//Orient turtle`.",
        "SG U3L07 - seaStar_markdown_instruction": "# Add Sea Stars\n\nWe're now ready to add sea stars to our image by writing `drawAllSeaStars`. Recall that we've already written loops to draw much more complex stars. \n\n# Do This:\n\n* **Read** the `drawSeaStar` function to know how it works and what **parameters** it accepts.\n\n* **First: Update** `drawSeaStar` to use a `for` loop \n\n\t* `drawSeaStar` has a portion of code that uses a longer sequence of repetitious single commands.  \n    * Find the pattern and \"wrap a loop\" around it so that the repetition is done with a loop rather than many lines of declarative function calls.\n\n* **Second: Add a loop** to `drawAllSeaStars`.\n    \n\t* **Place the commands already inside the function in your loop.** This way your code will **move the turtle randomly** around the **bottom pixels (y values between 360 and 450)** of the image.\n\n* **Draw 5 sea stars** of random size between **10 and 30** using `drawSeaStar`.\n\n![](https://images.code.org/1aadf83bcecaf5ca6c505e46d43e5f45-image-1443046811335.20.04 PM.png)",
        "SG U3L07 Free Response Reflection_markdown_instruction": "When breaking a problem down, you often encounter elements that you want to use repeatedly in your code. Sometimes it's appropriate to write a new function; at other times it's appropriate to write a loop.  \n\nThere is no hard-and-fast rule as to which is better, but what do you think?  What kinds of circumstances would lead you to writing a function versus using a loop?\n\n",
        "SG U3L07 More Subgoals_markdown_instruction": "# More New Commands: Pen Properties\n\nTwo powerful new commands have been added to the toolbox, `penColor()` and `penWidth()`. These both serve the new subgoal `//Set pen properties`. By changing the properties of the pen, you are no longer limited to just a thin black line. \n\n# Documentation\nAs we move forward you are going to see more and more (and more!) commands added to the toolbox.  What happens if you see a command and don't understand it, or you forget how it works?  Don't worry, this happens to professional programmers all the time! No one actually memorizes long lists of commands.  Most programming environments have ways to quickly look up documentation about the commands of the language you're using.  **Good news: App Lab has documentation too!**\n\n![](https://images.code.org/3fe10e1b65edb37306099098161be001-image-1441990727053.gif)\n\nWhen you **hover your mouse over a non-subgoal command** in the block palette a bubble pops up with a quick reminder of what a function does, and what its parameters are. If you click \"See examples\", you will be taken to more detailed documentation of the command which includes **code examples** that you can even copy and paste.\n\n**Read the documentation:** Read through the documentation by **hovering over** `penColor()` and `penWidth()` which let you set the color and size of the pen your turtle uses to draw. The documentation for `penColor()` has a lot in it!  For now just look at the **named colors**, things like \"red\", \"green\", etc.  Don't worry, you'll get a lot of opportunities to practice with colors in a variety of ways.  We're just getting started!\n\n# Do This\nYou should explore some of the documentation. Then Run the code and click Finish.",
        "SG U3L08 - digitalScene_markdown_instruction": "# Design Your Digital Scene\n\nThis is the final project that you will submit.\n\n# Do This:\n\n**Copy** all of the individual functions you and your group members have written at the bottom of this program.\n\n**Design your scene** using these functions, placing your calls at the top of the file.",
        "SG U3L08 - fish_markdown_instruction": "# Adding parameters to functions: *drawFish*\n\nLet's update our `drawFish()` function to accept a parameter. Currently `drawFish()` can only draw a fish of size 30.\n\n**Add a parameter** to the function definition for `drawFish()` that allows you to control its size (Note: the pen width is important here.) Make sure your parameter has a **descriptive and meaningful** name.\n\n**Update your function calls** to use your new version of `drawFish()` and change the size of the fish in your image.\n\n![](https://images.code.org/35f9a55244004dad62781f4ae0ce7eb2-image-1442608034411.26.55 PM.png)",
        "SG U3L08 - freePlay_markdown_instruction": "# Keep Going!\n\nAt this point you've seen how parameters can help **generalize the behavior of a function** to perform a variety of tasks, not just one. This will prove to be a very useful skill as we continue to develop as programmers.\n\nFor now, **keep adding to your drawing**. Make more function calls and see if you can continue to use **random numbers** to add variety to your drawings.\n\n![](https://images.code.org/514994b00554eac86c2a762177b77493-image-1442611547075.58.11 PM.png)",
        "SG U3L08 - individualCode_markdown_instruction": "# Design Your Component\n\nWith your **group** you should have already identified and assigned the high-level functions that should be used to create your digital scene. \n\n# Do This:\nUse the space here to design your functions. Once you're done you can **share** this project with your groupmates.",
        "SG U3L08 - multiParamFish_markdown_instruction": "# Multiple Parameters\n\nLet's make our drawings even more interesting by adding some variety to the color.\n\n**Add** three more parameters called `red` , `green` , and `blue` to your function definition for `drawFish` which allow you to set the color of the fish when you call the function. Remember to separate them with commas!\n\n**Note:** this means that drawFish will now have 4 parameters total: size, red, green, and blue. Remember that identifying these parameters are all part of the subgoal `//Define function`.\n\n**HINT:** inside drawFish just replace the numbers of the penRGB values with the parameters of your function.\n\n**Change** the function calls at the top your code to draw different colored fish.\n\n![](https://images.code.org/14b52d152c818903b0fc87061126f0f8-image-1442608501173.34.30 PM.png)",
        "SG U3L08 - paramsToStarfish_markdown_instruction": "# Adding Parameters to Functions: *drawStarfish*\n\nWe want to make our picture more interesting by adding some variety. Currently the `drawStarfish()` function can only draw a starfish of size 60.\n\n**Add a parameter** to the function definition for `drawStarfish()` that allows you to control its size - like `drawStarfish(size)`. Make sure your parameter has a **descriptive and meaningful** name. Also make sure to change the blocks within the function to use the parameter name that you chose.\n\n**Update your function calls** to use your new version of `drawStarfish()` and change the size of your starfish.\n\n![](https://images.code.org/320485cb05b50bcdb8aa8d13c0164502-image-1442606362191.59.12 PM.png)",
        "SG U3L08 - randomInput_markdown_instruction": "# Random Input\n\nYou have a new block that allows you to generate a random number. You can use this instead of hard-coding in values every time you call a function.\n\n![](https://images.code.org/5ff13bfdf582692f009b787570d467d0-image-1470145136252.png)\n\n**Read the documentation** for the randomNumber block.\n\n# Do This\n**Use randomNumber to provide random input** to *all three* of your drawing functions.  Just insert the call to randomNumber where you would otherwise put numbers.  \n\nLike this:\n![](https://images.code.org/ad87d7d122ac585a6de9e46a49736228-image-1470146652402.png)\n\nUse randomNumber in calls to all three of your drawing functions:\n\n* drawStarfish\n* drawSeagrass\n* drawFish\n\nThis is a great way to **test** out functions and also get some **interesting looking images**. Every time you run the program you can get slightly different looking scenes like the ones below.\n\n![](https://images.code.org/d2031f555ed23bcfa4a6a6165074b559-image-1442852053630.png)",
        "SG U3L08 - seaGrass_markdown_instruction": "# Adding Parameters to Functions: *drawSeagrass*\n\nTo keep adding variety to our image let's keep adding parameters to our functions. Currently the `drawSeagrass()` function can only draw a piece of seagrass with arcs of radius 100.\n\n**Add a parameter** to the function definition for `drawSeagrass()` that allows you to control its size. (You'll only need to change the radius of each arc.) Make sure your parameter has a **descriptive and meaningful** name.\n\n**Update your function calls** to use your new version of `drawSeagrass()` and change the size of the seagrass in your image.\n\n![](https://images.code.org/0b7d1750101a4c81ef8d77d8668f94f2-image-1442606862829.07.30 PM.png)",
        "SG U3L08 - squareTwoParams_markdown_instruction": "# Calling Functions with Multiple Parameters\n\nHere is a new definition for `drawSquare()` that has two parameters: `drawSquare(size, borderWidth)` Notice how **multiple parameters are separated by commas**.\n\n![](https://images.code.org/c9766f914d59531614c753e9147d29dd-image-1447801298794.01.15 PM.png)\n\n# Do This:\nAdd to the code to **make two calls** to the new two-parameter version of `drawSquare()` to make an image similar to this one.\n\n![](https://images.code.org/ddd85deb33ff82f3c257d25cdc9e6384-image-1442526350229.45.38 PM.png)\n\nJust like for the subgoal `//Define function`, the subgoal `//Call function` used to involve only identifying the function's name. Now when you call a function, you need to identify the function's name and the value of the parameters for the function.",
        "SG U3L08 Assessment2_markdown_instruction": "“Abstraction” is often used to focus on a general case and ignore a specific instance of a problem. \n\nGiven this meaning of the word, how are functions with parameters an example of abstraction?",
        "SG U3L08 comments_markdown_instruction": "# Commenting code for yourself and for collaboration\n\nProgrammers write comments into their code for two main reasons: (1) sharing code with other programmers (2) remembering their own thoughts or plans for code they write.  \n\nFor both cases a programmers **write comments into their code to explain their thinking to the reader.**\n\nThe subgoal comments you've seen are a specific type of commenting meant to help you learn.  As you get more experience  programming, comments you write can be in addition to, or simply replace your subgoal comments.\n\n<details><summary ><b>More: Why write comments?</b></summary>\n<div style=\"background-color: #e9f7f7; margin-left: 20px; padding: 10px\">\n<p>\nWhen sharing code with others, comments are useful to point out sections of code you might want help with, or to explain a complicated section of code that's hard to reason about.  It's useful for example to write a comment like: <code>//This function assumes that the fish have already been drawn</code> because it helps the reader understand when, where, why that section of code might be executed.\n</p>\n<p></p>\n<p>\nWhen writing comments for yourself, it might be a note about how you plan to solve a problem, or jotting down the reason you did something to remind yourself later when you come back to it.  For example you might write a comment like: <code>//to do: make a function to handle this code below</code>\n  </p>\n  <p>\n  Many programmers, when starting from scratch, like to write out a high level plan for the code they want to write in comments, and then go in starting writing code to fill in the plan. This is particularly useful if you're facing a large problem that needs to be broken down into parts.  You can think about the big picture to start and write out a strategy in comments so you don't forget it later -- which happens -- because once you start writing code you'll run into lots of micro-hurdles that might take time to solve or work out the bugs and you need your brain space to work on those.  A plan for drawing an under the sea scene might look like this:\n<pre>\n    // setup for drawing\n    // draw background with color and bubbles\n    // draw all the fish\n    // draw all the seagrass\n    // draw bubbles again\n </pre>\n</p>\n</div>\n</details>\n\n# Do This\n\n**Add your own comments** to the code that you've been working on. Imagine that you are describing the purpose of the code to one of your classmates.  Or find the most complicated part and try to explain it.\n\nThe way that you add comments is with the `// Comment` block, which is in the **Functions** tab of the toolbox.\n\n**See how:** ![expandable](https://images.code.org/fc29157949ee10369cb8a8db280b886f-image-1508515330684.gif)",
        "SG U3L08 how to add comments_markdown_instruction": "# Now you try it - Add a comment\n\nThe starting code provided has some comments already in it.\n\n# Do This\n\nInsert a comment that says `// Draw a starfish at specific location` just above the section of code that will draw the starfish. \n\nThe way that you add comments is with the `// Comment` block, which is in the **Functions** tab of the toolbox ([Show me](#triggercallout=show_comment)).\n\n**See how:** ![expandable](https://images.code.org/fc29157949ee10369cb8a8db280b886f-image-1508515330684.gif)\n\n**Add more comments** to the code that explain what each section of code is for. Imagine that you are describing the purpose of the code to one of your classmates.  Or find the most complicated part and try to explain it.\n\n**Click finish** once you've added the comment.  And keep adding comments as you go!!!",
        "SG U3L2 Using Simple Commands_markdown_instruction": "# Now you try it!\n\nWe'll be learning how to code with subgoals throughout this unit.\n\nTypically, you'll solve problems by dragging blocks from the toolbox to the workspace. Sometimes we'll put subgoals that solve the problem into the workspace, and sometimes you'll have to identify the subgoals yourself.\n\nHere we've added a series of `// Move turtle` and `// Orient turtle` subgoals into the workspace that describe how to solve the 1x1 square problem...but it's incomplete.\n\n# Do This: \n\n* Complete the code for the the 1x1 square solution we've started below.\n* Drag each turtle block beneath the proper subgoal in the code. \n\n**Click here to see how** ![expandable](https://images.code.org/5818d0b6080e3a30dc081a166cfbffcb-image-1508437404576.gif)\n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" align=right>\n\n* Reminder: the turtle should end up in its original position, facing its original direction.\n\nOnce you think you have a solution, click the `Finish` button.",
        "SG U3L2_Add-subgoals_markdown_instruction": "# New challenge <img src=\"https://images.code.org/c15fee1f27c817a352a521c7ddcb5006-image-1436282127747.png\" style=\"float: right\">\n\nDraw a 3x3 grid to the *front* and *right* of the turtle *as efficiently* as possible.\n\nWhat does “efficient” mean? In computer science it can actually mean several different things depending on the situation. For this problem let's say that efficient means: **using the fewest turtle commands possible**\n\n# Do this\n\n1. This problem presents some subtle challenges. Before you start creating the program, you might want to test your ideas on paper for faster brainstorming. Work with your partner to discuss possible solutions or strategies. Try more than one.\n\n2. Once you have a solution, **start** by identifying the subgoals and drag them from the **Goals** tab into the workspace. \n\n3. Then start filling it in with turtle blocks, and **testing** it out as you go by adding a few commands, then running the program, adding a few more, run again, and so on.\n\nWhen you think you're done click `Finish` and move on.\n",
        "SG U3L2_Turtle3by3Grid_markdown_instruction": "# New challenge <img src=\"https://images.code.org/c15fee1f27c817a352a521c7ddcb5006-image-1436282127747.png\" style=\"float: right\">\n\nDraw a 3x3 grid to the *front* and *right* of the turtle *as efficiently* as possible.\n\nWhat does “efficient” mean? In computer science it can actually mean several different things depending on the situation. For this problem let's say that efficient means: **using the fewest turtle commands possible**\n\n**note:** From now on, the 4 turtle commands mentioned in the video will always be in toolbox.  You don't necessarily need `penUp()` and `penDown()` for this challenge, but in the future you might want to use them. ([Show me where](#triggercallout=show_penup))\n\n# Do this\n\n1. This problem presents some subtle challenges. Before you start creating the program, you might want to test your ideas on paper for faster brainstorming. Work with your partner to discuss possible solutions or strategies. Try more than one.\n\n2. Once you have a solution, **start** by identifying the subgoals and drag them from the **Goals** tab into the workspace. ([Show me where](#triggercallout=show_goals))\n\n3. Then start filling it in with turtle blocks, and **testing** it out as you go by adding a few commands, then running the program, adding a few more, run again, and so on.\n\nWhen you think you're done click `Finish` and move on.",
        "SG U3L2_TurtleSquare_right_markdown_instruction": "# New problem <img src=\"https://images.code.org/ad48e7224312a6c41f4fc5727af53cc0-image-1436287265071.png\" align=right> \n\nThis time, draw a 1 x 1 square, so the square is above and to the right of the turtle.  This means you need to draw it by moving and *turning right*.  **But there there is no command to turn right!** \n\nHow do you turn right when the only command you have is `turnLeft()`?  You need to figure it out.\n\n## One Subgoal - multiple lines of code <img src=\"https://images.code.org/ae8ac9b14b7c016437455d07fdbb6a7c-image-1508440383741.png\" style=\"float: right\">\nSometimes a single subgoal like `// Orient Turtle` might require several lines of code to accomplish. \n\nFor example in this problem the *goal* of orienting the turtle for each right turn means turning left a few times.  So you would add multiple `turnLeft()` commands under a single `//Orient Turtle` subgoal. (shown at right).\n\n<div style=\"clear: both\"> </div>\n\n# Do this\n\n\n* We've again added subgoals to solve this problem into the workspace.  Notice that we still only use `Move turtle` and `Orient turtle`.\n* Add code beneath each subgoal, to draw a 1 x 1 square by moving and *turning right*.\n* Reminder: The program should stop with turtle in its original position, facing its original direction.\n\nWhen you're done click the `Finish` button to move onto the next problem.\n\n",
        "SG csp_U3_plan_code_FR_markdown_instruction": "<img src=\"https://images.code.org/01d3b0664443216b4363ec31914e592a-image-1506460763004.png\" style=\"float: right\">\n\n<br>\n\nIn this lesson we talked about top-down design for building up solutions to larger programming problems.  Plan the code that you would use to draw this image (shown at right). Describe each of the functions that you would create. You should not write all the code, only the names of the functions that you would create with a brief description of what each function would do. \n\nWrite your plan following the format:\n\n<div style=\"clear: both\"> </div>\n\n    Name of function - description of what it does\n\n    Name of function 2 - description of what it does\n    ...",
        "SG csp_U3_square_v_rect_FR_markdown_instruction": "<img src=\"https://images.code.org/2f9b8b6a1c42b7c6c881f89867352907-image-1506460228029.png\" style=\"float: right\">\n\nIn this lesson you wrote code to make the turtle draw squares. Briefly describe how the code for drawing a rectangle would be different than drawing a square.  (Example rectangle at right)",
        "SG subgoals_U3_turtle_prediction_FR_markdown_instruction": "## Code Trace\n\nIn 1-2 sentences, explain what you think the following code does.\n\n![](https://images.code.org/5bc66acc4712cf1c835daac0c45422a8-image-1506532056958.png)",
        "SG subgoals_u3_top_down_FR_markdown_instruction": "# Design a program\n\nDescribe, using a top-down approach, how you would create a program to draw a white snowflake on a blue background that uses random numbers, so the snowflake will be unique every time you run the code. \n\nYou don’t need to write the exact code or blocks that you would use, but you should describe what functions you would need to create, where you would or would not use loops, and where you would or would not use random numbers.",
        "SGU3L07 - randomDots1_markdown_instruction": "# Looping with Random Values\n\n<img src=\"https://images.code.org/520e45a90988b04bb0ff3baa184f080a-image-1443108426597.png\" style=\"width: 100px; float: right;\">\n\nIf you add some randomness to turtle behavior inside a loop, the program will run a little differently every time which can make for some cool effects.\n\nYou're about to see a program in which the turtle **moves to a random location** each iteration of the loop, and **draws a randomly-sized dot** that also has a **random color**.  We've also made the dot semi-transparent by setting the alpha value to 0.5 (50% transparency).\n\n# Do This:\n\n**Figure out how many iterations** (number of times the loop runs) you need to consistently fill the screen entirely with dots so none of the background is showing.  It will be a little different every time so you'll need to experiment.\n\n**Compare what you found** with a neighbor to see how close your results are.  Then **move on**.",
        "SGU3L2A Introducing Subgoals_markdown_instruction": "# Introducing Subgoals\nWriting code is fun, but as you write longer programs that solve more complex problems it's useful to think at a higher level about the **series of subgoals** that build toward the solution.\n\nIn App Lab we have provided special blocks called [`Goals`](#triggercallout=goals_palette) to help you think about the **subgoals** of the problems you're solving. ([Show me](#triggercallout=goals_palette))\n\nThese subgoal blocks are known as \"comments\" which programmers use to make notes to themselves or other people who might view the code. You can drag these blocks into your code to help label things and stay organized, but they won't do anything when you run the program.  Try it out.\n\n# Do This:\n\n* Don't add any code, just click `Run` and notice the following:\n* In the workspace we've added the subgoals `//Move turtle` and `//Orient turtle` a few places in the code. ([Show me](#triggercallout=show_code)) \n* Underneath each subgoal, we've added the blocks to complete the subgoal.\n* The point is to simply notice that the subgoals don't change the drawing or what the turtle does.\n* The turtle is still only controlled by the blue turtle command blocks\n\nAfter running the program, click `Finish` to move on to try it yourself.\n\n\n<!--\n\nThis is how we'll be using App Lab throughout this unit. You'll get several puzzles to solve by dragging blocks from the toolbox to the workspace. Sometimes the workspace will tell you the subgoals of the puzzle, and sometimes you'll have to identify the subgoals yourself.\n\nThe first step of every puzzle will be to put the subgoals of the problem in the workspace (if they aren't already there). Then you'll put the blocks that solve the subgoals underneath.\n\nIn the workspace below, we've added two subgoals, Move turtle and Orient turtle. Underneath each subgoal, we've added the blocks to complete the subgoal.\n\nThe subgoals are described in comment blocks. This means that the subgoal comment will be visible in your code, but they won't do anything when you run the code. Comments are purely to make notes to yourself or other people who might view the code.\n\nDo This:\n\nPress the Run button to `run` the code. Notice that the subgoals don't show up in the drawing. Only the blocks will make the turtle do something.\n\n-->",
        "Sam the Butterfly 2_markdown_instruction": "Sam's mom wants to make sure that she can always see at least a bit of him, so lets write some functions that help make sure he doesn't go too far out of the yard. Here's a function called `safe-left?` - it should take a Number for its domain that represents Sam's x-coordinates and return *true* if he's completely visible on screen. If your function works, Sam shouldn't be able to leave the yard from the left side.",
        "Sam the Butterfly 3_markdown_instruction": "In the last puzzle we kept Sam from leaving on the left, now let's do the same thing on the right. Complete the `safe-right?` function to make sure Sam can't go off the right side of the screen.",
        "Sam the Butterfly 4_markdown_instruction": "Huh, we can keep Sam from leaving on the left, or we can keep him from leaving on the right, but how can we keep him safe from leaving both directions? Try using the `and` block to program the function `on-screen?` to check if Sam is `safe-left?` and `safe-right?`",
        "Sam the Butterfly 5_markdown_instruction": "Free Play: Awesome, we've kept Sam safe on the left and right! Use this free play stage to experiment with your functions and further improve `onscreen?`",
        "Sample Free Response_markdown_instruction": "In this module, you learned about how information gets shuttled from place-to-place on the internet, and the major steps along the way.  **Write a lesson plan for your students about how packets are constructed.**\n\n### How this task is reviewed\nThis task is peer-reviewed by 2 peers, using the following rubric:\n\n  - Lesson includes lecture\n  - Lesson includes activity on network simulator",
        "Screen Size_markdown_instruction": "# Hardware Accessibility: Screen Size\n\nAnother thing to consider about accessibility for different users is the size of the device they are using to view the web page. You can do a basic test for this by resizing the view area to see how the website changes with the changes in size.\n\n# Do This\n\n* Use the dragger to resize your preview area to see how your website adapts.\n* Shrink the size of the instructions area to resize how tall the web page is",
        "Standalone_Artist_1_markdown_instruction": "Welcome to Artist! First off, let's try to make a simple square using the turn right block and move forward block. Each side should be 100 pixels long.\n\n",
        "Standalone_Artist_2_markdown_instruction": "Draw this diamond with 120 and 60 degree angles and 150 pixel long sides.\n\n",
        "Standalone_Artist_3_markdown_instruction": "Can you draw this hexagon with 100 pixel sides and 60 degree turns?\n\n",
        "Standalone_Artist_4_markdown_instruction": "Now you've got a new block to play with, the loop. This will repeat a set of commands. What happens if you loop these commands 6 times?\n\n",
        "Standalone_Artist_5.5_markdown_instruction": "Notice how we simplified the diamond code by turning it into a loop. You can loop that whole sequence 12 times to draw the flower. Hint: You'll need to turn 30 degrees after your diamond loop so you don't keep drawing over the same diamond.\n\n",
        "Standalone_Artist_5_markdown_instruction": "How many times do you need to loop this diamond to draw the flower?\n\n",
        "Standalone_Artist_6_markdown_instruction": "Loop this hexagon code 6 times to create the design. How many degrees will you need to turn each time? Hint: divide the number of degrees in a circle by the number of times you are looping.\n\n",
        "Standalone_Artist_7_markdown_instruction": "A function is another programming tool to help you avoid repeating yourself. This function draws a flower, so you can use it any time you want to draw a flower. Use this and the new jump block to draw these flowers. Hint: The flowers are 150 pixels apart\n\n",
        "Standalone_Artist_8_markdown_instruction": "Here's a function called `Draw a shape` that we've programmed to draw hexagons. Run the code to see what it does and then experiment with the function to see what happens. Can you make it draw a pattern of squares, triangles, or octagons?\n\n",
        "Standalone_Artist_9_markdown_instruction": "Now go ahead and make whatever picture you'd like! You've even got an empty function that you can make do whatever you want!\n\n",
        "Stop: List Review_markdown_instruction": "## Choose: Array or Variable?\n\nYour app needs to store the following information. For each type of information, decide whether you would use an array or a variable to store it:\n \n* All the messages a user has sent\n* The highest score a user has ever reached on the app\n* A username and password to unlock the app\n\n",
        "Stop: Review Getters and Setters_markdown_instruction": "# Reflection\n\nQuestions:\n\n* What is the difference between getters and setters?\n* Why would you want to save the information from a getter in a variable?",
        "Task: ASCII Representation of your Name_markdown_instruction": "# TASK: Write your name in ASCII\n\nUse the ASCII Table below to write your name in the decimal and binary representations: \n<br><br>\n\n![](https://images.code.org/8dc285b920911bdfb8c53db74db5c272-image-1474246518064.54.59 PM.png)\n\n<br><br>\nThe full ASCII table can be found <a href=\"https://upload.wikimedia.org/wikipedia/commons/d/dd/ASCII-Table.svg\" target=_blank> here</a>.\n\n",
        "Teaching Practice Plan: Assessing Student Learning_markdown_instruction": "> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 1. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Teaching Practice Plan: Assessing Student Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for assessing student learning throughout unit 1. Your plan should address the following: \n\n- Using what’s in the curriculum\n \n  - How do you plan to use the assessment opportunities that have been provided in the curriculum? Your response should include how you plan to use formative lessons questions (blue bubbles in code studio), project rubrics, AP-style questions (following lesson 7 and lesson 14), practice performance task (lesson 14)\n\n\n- Making your own assessments\n\n  - What types of assessments might you need to create or use on top of those provided in the curriculum? \n  - What is your strategy for developing assessment opportunities that are consistent with the philosophy of the curriculum and activities? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n",
        "Teaching Practice Plan: Discovery Learning_markdown_instruction": "> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 1. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Teaching Practice Plan: Discovery Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for building and supporting a culture of discovery learning in your classroom throughout unit 1. Your plan should address the following: \n\n- For lessons that call for students to discover a key computer science concept, how do you plan to balance your time frontloading content instruction with students’ time completing the activity and constructing their own knowledge? \n- What is your strategy for supporting students who struggle with this model of teaching and learning, and look to you to ‘just give them the answer’?\n- How do you plan to make sure students leave a lesson having discovered the underlying concept(s)? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n\n\n",
        "Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction": "> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 1. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n\n# Teaching Practice Plan: Group Work and Peer Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for supporting group work throughout unit 1. Your plan should address the following things: \n\n- What is your plan for supporting students who are struggling to engage in group work, either because they prefer to work alone, or because they are having issues collaborating with their partner(s)? \n- How do you plan to help make sure all members of the team have a voice in their groups’ discussions?\n- How can you help students understand and appreciate the importance of learning through and from one another? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n\n\n\n",
        "Teaching Practice Plan: Group Work and Peer Learning`_markdown_instruction": "> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 1. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n\n# Teaching Practice Plan: Group Work and Peer Learning`\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for supporting group work throughout unit 1. Your plan should address the following things: \n\n- What is your plan for supporting students who are struggling to engage in group work, either because they prefer to work alone, or because they are having issues collaborating with their partner(s)? \n- How do you plan to help make sure all members of the team have a voice in their groups’ discussions?\n- How can you help students understand and appreciate the importance of learning through and from one another? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n\n\n\n",
        "Teaching and Student Support Plan_markdown_instruction": "> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Teaching and Student Support plan\n## Task Description\n\nNow that you have a better sense of this lesson, let’s think about the types of supports students will need in order to successfully complete it. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n<br><Br>\n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. ",
        "Test Contained Free Response_markdown_instruction": "My free response markdown instructions",
        "Test Free Response Assessment Question_markdown_instruction": "Imagine that you have to send a list of 10 numbers to friend in binary using the bit-sending widget. The numbers are all between 0 and 100. Describe the issues or problems that you and your friend would encounter in trying to do this. How would you address these problem?\n\n### Hello!\n",
        "Test Markdown level_markdown_instruction": "Enter prompt here\n\n# Test Markdown title\n\nTest Markdown prompt\n\n\n",
        "Test embedded K1 Blockly in instructions_markdown_instruction": "Use <xml><block type=\"maze_moveWest\"/></xml> **three** times to get the harvester to the corn! Don't forget to use <xml><block type=\"harvester_corn\"/></xml> to pick the corn!",
        "Test of comment block_markdown_instruction": "## instructions\n\nDrag out the subgoal label block you want.",
        "Testing Quantum Farmer_markdown_instruction": "Wow, look at that! \n\nI don't know how many shovelfuls of dirt this hole needs.  \nCan you write a program that keeps using the `fill` block until the ground is even?  ",
        "Text Compression 1_markdown_instruction": "Look for patterns (repeated words or phrases) in the text. Enter the patterns you see into the dictionary on the right. As you type entries into the dictionary, the symbol for the entry is inserted into the text in place of the pattern.\n\n<img src=\"http://code.org/api/hour/begin_text_compression.png\">",
        "The Accelerometer_markdown_instruction": "Today you’re going to learn how to use and create **functions**.\n\nCreating a function lets you make your own blocks! There are two parts to a function: \n\nMaking a newly named block that has all of the code you want to run inside of it. \n-xml of function definition- \n\nThe single green block itself that you use, or call, to run the function you created.\n-xml of function call-\n\nPrepare to get familiar with functions, learn how to edit them, and create your own!",
        "The Accelerometer_2018_markdown_instruction": "Today you’re going to learn how to use and create **functions**.\n\nCreating a function lets you make your own blocks! There are two parts to a function: \n\nMaking a newly named block that has all of the code you want to run inside of it. \n-xml of function definition- \n\nThe single green block itself that you use, or call, to run the function you created.\n-xml of function call-\n\nPrepare to get familiar with functions, learn how to edit them, and create your own!",
        "The Internet: IP Addresses & DNS_markdown_instruction": "[Video guide and questions](https://docs.google.com/document/d/1ngw37cKFH4Dl_lhWXuXROH5WDdgHatz3gJo3pAdpqkg/edit?usp=sharing)",
        "The Internet: IP Addresses & DNS_2018_markdown_instruction": "[Video guide and questions](https://docs.google.com/document/d/1ngw37cKFH4Dl_lhWXuXROH5WDdgHatz3gJo3pAdpqkg/edit?usp=sharing)",
        "The Internet: Wires, Cables, and Wifi_markdown_instruction": "[Video guide and questions](https://docs.google.com/document/d/1k-qKthfOewieVcWgsAP8v2hW-dh3CbK-f7oXlHpF6Cs/edit)",
        "The Internet: Wires, Cables, and Wifi_2018_markdown_instruction": "[Video guide and questions](https://docs.google.com/document/d/1k-qKthfOewieVcWgsAP8v2hW-dh3CbK-f7oXlHpF6Cs/edit)",
        "The Official Peer Instruction Blog_markdown_instruction": "The following link is to a recent blog post describing the basic approach to and benefits of peer learning: ",
        "The Vigenere Cipher Widget_markdown_instruction": "# Encrypt and decrypt a message with the Vigenère cipher\n\nThis is an interactive version of the Vigenère cipher that animates the encryption and decryption as it’s happening, given a piece of text to encrypt or decrypt and the key.\n\n# Do this\n### Encrypt a message\nClick Step several times, and trace what’s happening. Pay attention to:\n\n- How the ciphertext is being produced\n- What happens when you get to the last character of the key\n- After you’ve stepped through a few characters click Play to watch the rest animate\n- Hit Restart and play the animation again. You can use the speed slider to speed it up or slow it down  \n\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\n\n### Decrypt a message\nEncrypt a message as above, then:  \n\n- Highlight and copy the ciphertext\n- Paste it into the plaintext area. Note: Don’t change the key\n- Change the Encrypt/Decrypt toggle to Decrypt\n- Hit Step a few times, and then Play\n\nYou should see the original text emerge.  \n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\n\n\nHow hard would it be to crack a message encrypted with this cipher? Does the length of the key make a difference?",
        "The Vigenere Cipher Widget_2018_markdown_instruction": "# Encrypt and decrypt a message with the Vigenère cipher\n\nThis is an interactive version of the Vigenère cipher that animates the encryption and decryption as it’s happening, given a piece of text to encrypt or decrypt and the key.\n\n# Do this\n### Encrypt a message\nClick Step several times, and trace what’s happening. Pay attention to:\n\n- How the ciphertext is being produced\n- What happens when you get to the last character of the key\n- After you’ve stepped through a few characters click Play to watch the rest animate\n- Hit Restart and play the animation again. You can use the speed slider to speed it up or slow it down  \n\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\n\n### Decrypt a message\nEncrypt a message as above, then:  \n\n- Highlight and copy the ciphertext\n- Paste it into the plaintext area. Note: Don’t change the key\n- Change the Encrypt/Decrypt toggle to Decrypt\n- Hit Step a few times, and then Play\n\nYou should see the original text emerge.  \n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\n\n\nHow hard would it be to crack a message encrypted with this cipher? Does the length of the key make a difference?",
        "The Vigenere Cipher_markdown_instruction": "# Encrypt and decrypt a message with the Vigenère cipher\n\nThis is an interactive version of the Vigenère cipher that animates the encryption and decryption as it’s happening, given a piece of text to encrypt or decrypt and the key.\n\n# Do this\n### Encrypt a message\nClick Step several times, and trace what’s happening. Pay attention to:\n\n- How the ciphertext is being produced\n- What happens when you get to the last character of the key\n- After you’ve stepped through a few characters click Play to watch the rest animate\n- Hit Restart and play the animation again. You can use the speed slider to speed it up or slow it down  \n\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\n\n### Decrypt a message\nEncrypt a message as above, then:  \n\n- Highlight and copy the ciphertext\n- Paste it into the plaintext area. Note: Don’t change the key\n- Change the Encrypt/Decrypt toggle to Decrypt\n- Hit Step a few times, and then Play\n\nYou should see the original text emerge.  \n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\n\n\nHow hard would it be to crack a message encrypted with this cipher? Does the length of the key make a difference?",
        "Top-Down Design_markdown_instruction": "## What is Top-Down Design? \n\nIn lesson 6 students are introduced to the concept of `Top-Down Design` which is a planning process we use here to help students break their ideas down into parts. It might sound like a complex idea, but really the focus is just on starting at a high level and stating the elements you want to put into your program, then grouping concepts that are similar and using abstraction (functions) to put a label on those like parts. For example, you might say that you want to create a turtle drawing that has dogs, cats, and bikes. Then you would need to go one step further and describe how each of those components of your drawing are composed.\n\nCheck out the resource below for a non-programming example of how this grouping might work. ",
        "Total Artist Clone Me_markdown_instruction": "Freeplay: Here are the functions you've written, and some more for you to play with. Play with the pen width to see how different your drawings look!\n\n",
        "Trent Test Level_markdown_instruction": "More questions!\n",
        "Tuesday Report: Balancing Teachers and Tools in Unit 1_markdown_instruction": "So far we've seen four lessons from unit 1 — two model lessons delivered by facilitators and two lessons by participants. With your partner, consider:\n\n- How have people wearing teacher hats been balancing their time leading or guiding with the student-hat’s time to get into activities and tools?\n- What strategies have been effective for managing the transition to tools? What strategies are effective in getting peoples’ attention once they’re lost in a tool?\n- What are your  current thoughts about the appropriate balance of teacher-guided time VS time in the tools or with the activities?\n\nUse the space below to record any thoughts, recommendations, or commentary.",
        "Tuesday Report: Discovery Learning in Unit 1_markdown_instruction": "So far we've seen four lessons from unit 1 — two model lessons delivered by facilitators and two lessons by participants. With your partner, consider:\n\n- What opportunities have you seen for learners to discover concepts for themselves?\n- How did the process of engaging in discovery activities change the pacing, flow, or outcome of the lesson?\n- What benefits and pitfalls did you see in discovery activities?\n\nUse the space below to record any thoughts, recommendations, or commentary.",
        "Tuesday Report: Group Work and Peer Learning in Unit 1_markdown_instruction": "So far we've seen four lessons from unit 1 — two model lessons delivered by facilitators and two lessons by participants. With your partner, consider:\n\n- Where did you see group work and peer learning in these lessons? \n- What are the benefits of using group work and peer learning here? \n- How does using peer learning and group work as a strategy in the lesson impact how the activities run? \n\nUse the space below to record any thoughts, recommendations, or commentary.",
        "Tuesday Report: Measuring Student Learning in Unit 1_markdown_instruction": "So far we've seen four lessons from unit 1 — two model lessons delivered by facilitators and two lessons by participants. With your partner, consider:\n\n- What opportunities have you seen for assessing learners’ knowledge (prior knowledge, knowledge gained during the lesson, etc)?\n- What assessments are available in the curriculum?\n- What strategies would be effective for checking in on what students know?\n\nUse the space below to record any thoughts, recommendations, or commentary.",
        "Tuesday Report: discovery learning_markdown_instruction": "So far we've seen four lessons from unit 1 -- two model lessons delivered by facilitators and two lessons by participants. With your partner, consider:\n\n- What opportunities have you seen for learners to discover concepts for themselves? \n- How did the process of engaging in discovery activities change the pacing, flow, or outcome of the lesson? \n- What benefits and pitfalls did you see in discovery activities? \n\nUse the space below to record any thoughts, recommendations, or commentary",
        "U1L1 - FR computer science word association_markdown_instruction": "**Directions:**\n\nYou're in a class called *Computer Science Principles*.\n\nYou might not know anything about computer science right now.  You might know a few things.  We're going to take the pulse of the class to see on the first day what we think computer science involves, and we'll revisit this occasionally.\n\n**Do this:**\n\n**Without using the words _computer_ or *science* write 5 to 10 words or phrases** that come to mind when you hear the term \"computer science\". What do you think about?\n\n\n\n",
        "U1L10 Assessment Free Response_markdown_instruction": "Many languages do not use the characters of U.S. English. Suppose you wanted to be able to encode the characters of every language on earth within a single protocol. Guess how many characters would need to be encoded and calculate the number of bits that would be required per character. Then discuss the benefits and drawbacks of using this single unified system.\n",
        "U1L10 Assessment Free Response_2018_markdown_instruction": "Many languages do not use the characters of U.S. English. Suppose you wanted to be able to encode the characters of every language on earth within a single protocol. Guess how many characters would need to be encoded and calculate the number of bits that would be required per character. Then discuss the benefits and drawbacks of using this single unified system.\n",
        "U1L10 Journal Free Response_markdown_instruction": "Respond to this prompt or to another as directed by your teacher.\n\nDescribe the steps involved in getting a text message from an idea in your head to your friend's computer screen.\n",
        "U1L10 NetSim numbers with decimal_markdown_instruction": "**Instructions**:\n\nInvent and test a protocol for encoding and sending text messages. Your protocol must include the letters a-z, spaces, and common punctuation marks. You may add additional characters if you wish. See the worksheet handed out by your teacher for more detailed instructions!",
        "U1L11 Abstraction Reflection_2018_markdown_instruction": "An abstraction is a simplified representation of something that is more complex. Decimal numbers were a useful abstraction in the context of today's lesson. Write a short response to both questions below.\n\n* What is the underlying complexity decimal numbers were used to represent.\n* How were decimal numbers helpful in designing a system to represent text in bits?",
        "U1L11 Collaboration Reflection_markdown_instruction": "What problems arose in your efforts to create a working protocol? How did you think about the problem(s) in order to solve it?\n\nDescribe one instance in which collaboration with a partner influenced the final protocol your team produced.\n",
        "U1L11 Collaboration Reflection_2018_markdown_instruction": "What problems arose in your efforts to create a working protocol? How did you think about the problem(s) in order to solve it?\n\nDescribe one instance in which collaboration with a partner influenced the final protocol your team produced.\n",
        "U1L11 Reflection Free Response_markdown_instruction": "Respond to this prompt or to another as directed by your teacher.\n\nHow long did it take to send a formatted text message using your protocol? \n\nHow many extra bits did your encoding scheme need to communicate the text?  Calculate the percentage of bits that were used for formatting instead of sending the actual text message. \n\npercent = (formatting bits)/(total bits) * 100\n\n\n",
        "U1L11 Reflection Free Response_2018_markdown_instruction": "Respond to this prompt or to another as directed by your teacher.\n\nHow long did it take to send a formatted text message using your protocol? \n\nHow many extra bits did your encoding scheme need to communicate the text?  Calculate the percentage of bits that were used for formatting instead of sending the actual text message. \n\npercent = (formatting bits)/(total bits) * 100\n\n\n",
        "U1L11 Reflection Multiple Representations_2018_markdown_instruction": "\"The binary pattern `01000001` represents the number 65.\"\n\nWrite a brief response explaining whether you believe this statement is always true. Explain your reasoning.",
        "U1L12 Reflection Free Response_markdown_instruction": "Respond to this prompt or to another as directed by your teacher.\n\nThe salesperson in a cell phone store is telling me that the phone I'm considering has 8GB of memory, which means I can save 10,000 photos taken with the phone's camera! \n\nIs the salesperson telling me the truth? Why or why not?\n",
        "U1L12 Reflection Free Response_2018_markdown_instruction": "Respond to this prompt or to another as directed by your teacher.\n\nThe salesperson in a cell phone store is telling me that the phone I'm considering has 8GB of memory, which means I can save 10,000 photos taken with the phone's camera! \n\nIs the salesperson telling me the truth? Why or why not?\n",
        "U1L13 Assess Text Compression amount_markdown_instruction": "Here's the same compressed text that you saw on the last level, but now we also see the size of the original, uncompressed text. On the previous level you reconstructed the text by tracing back through the dictionary. Now we're going to think about if this is a \"good\" compression rate.\n\n![](https://images.code.org/ffb941527193cd04c02ff2ce392d02e6-image-1439479301236.20.23 AM.png)\n\nIn the text box below, answer the following two questions:\n\n- What is the compression rate, or the compressed text size + dictionary size compared to the original text size? (as a percentage) \n- Is this a \"good\" compression rate? Why or why not? \n\n\n",
        "U1L13 Assess Text Compression amount_2018_markdown_instruction": "Here's the same compressed text that you saw on the last level, but now we also see the size of the original, uncompressed text. On the previous level you reconstructed the text by tracing back through the dictionary. Now we're going to think about if this is a \"good\" compression rate.\n\n![](https://images.code.org/ffb941527193cd04c02ff2ce392d02e6-image-1439479301236.20.23 AM.png)\n\nIn the text box below, answer the following two questions:\n\n1. What is the compression rate? The compression rate says by how much the text was compressed from the original as a percentage. Don't forget that the compressed version of the text is the compressed text size + dictionary size. (see note below) \n\n2. Is this a \"good\" compression rate? Why or why not? \n\n\n(*NOTE: to calculate, the compression rate is slightly different than simply stating the compressed size as a fraction of the original. It's just opposite sides of the same coin.  For example: if you find the compressed text + dictionary size is 70% of the original, that means the text was compressed by 30%.*)\n",
        "U1L13 Assessment 1_markdown_instruction": "Why do you want to compress anything? What's the point?\n",
        "U1L13 Assessment 1_2018_markdown_instruction": "Why do you want to compress anything? What's the point?\n",
        "U1L13 Assessment 2_markdown_instruction": "Why is compression a \"hard problem\" for computers?  Draw on your own experience compressing text with the text compression widget. Is there a way to know when you've compressed it the most? Explain why you can or can't know.\n",
        "U1L13 Assessment 2_2018_markdown_instruction": "Why is compression a \"hard problem\" for computers?  Draw on your own experience compressing text with the text compression widget. Is there a way to know when you've compressed it the most? Explain why you can or can't know.\n",
        "U1L13 Reflection 1_markdown_instruction": "What made compressing text hard to do?",
        "U1L13 Reflection 2_markdown_instruction": "Describe the thinking process you used in solving this challenge.",
        "U1L13 Reflection Free Response_markdown_instruction": "If you send a compressed segment of text would your friend will be able to read it?  \n\nWhy is the dictionary important?\n",
        "U1L13 Text Compression_markdown_instruction": "Look for patterns (repeated words or phrases) in the text. Enter the patterns you see into the dictionary on the right. As you type entries into the dictionary, the symbol for the entry is inserted into the text in place of the pattern.",
        "U1L14 - Assessment 2_markdown_instruction": "What would happen if we didn't include width and height bits in our protocol?\n\nAssume your friend just sent you 32 bits of pixel data (just the 0s and 1s for black and white pixels). Could you recover the original image? If so, how? If not, why not?\n\n\n",
        "U1L14 - Assessment 2_2018_markdown_instruction": "What would happen if we didn't include width and height bits in our protocol?\n\nAssume your friend just sent you 32 bits of pixel data (just the 0s and 1s for black and white pixels). Could you recover the original image? If so, how? If not, why not?\n\n\n",
        "U1L14 Assessment 1_markdown_instruction": "Please answer the following 3 questions in the space below.\n\n1. What are the **dimensions** (width and height) of the **largest image** we can make with the pixelation widget? \n\n2. How many **total bits** would there be in the the largest possible image we could make with the pixelation widget (assuming 1 bit per pixel)?\n\n3. How many **total bits** bits would it take to represent **the smallest possible image** (i.e. an image with one pixel)?\n",
        "U1L14 Assessment 1_2018_markdown_instruction": "Please answer the following 3 questions in the space below.\n\n1. What are the **dimensions** (width and height) of the **largest image** we can make with the pixelation widget? \n\n2. How many **total bits** would there be in the the largest possible image we could make with the pixelation widget (assuming 1 bit per pixel)?\n\n3. How many **total bits** would it take to represent **the smallest possible image** (i.e. an image with one pixel)?\n",
        "U1L16 Reflection Free Response_markdown_instruction": "Respond to this prompt or to another as directed by your teacher.\n\nIf you had the opportunity to repeat this lesson, what would you do differently?\n\nDescribe something you learned in this unit that will impact your future work in this class.\n\n\n",
        "U1L2 Free response assessment question_markdown_instruction": "Provide an example of a question that could NOT be answered with a single binary message. Explain why this is the case, making reference to the definition of a binary message. \n\n",
        "U1L2 Free response assessment question_2018_markdown_instruction": "Provide an example of a question that could NOT be answered with a single binary message. Explain why this is the case, making reference to the definition of a binary message. \n\n",
        "U1L2 Free response reflection question_markdown_instruction": " Modify your question so that it could be answered with a binary message. Explain why it can now be answered with a binary message.\n\n\n",
        "U1L3 Free Response_markdown_instruction": "How did collaboration impact the development of your protocol? What challenges did working in a group present and in what ways did it positively impact your final product?",
        "U1L3 Free Response_2018_markdown_instruction": "How did collaboration impact the development of your protocol? What challenges did working in a group present and in what ways did it positively impact your final product?",
        "U1L3 Free response reflection question_markdown_instruction": "Recall when you built your binary message sending device. Why did we decide to send a message as a sequence of states (A and B) rather than modifying our devices to represent more states (State C, State D, State E, ...)?\n",
        "U1L3 Free response reflection question_2018_markdown_instruction": "Recall when you built your binary message sending device. Why did we decide to send a message as a sequence of states (A and B) rather than modifying our devices to represent more states (State C, State D, State E, ...)?\n",
        "U1L4 Free Response Reflection_markdown_instruction": "A binary message was recorded as a wave as shown in the image below. Can you decode the message? Explain what information you would need in order to successfully decode the message into A’s and B’s.\n\n![](https://images.code.org/c8ba0db14fabb778dc034ac4656259fa-image-1434429617999.png)\n\n",
        "U1L4 Free Response Reflection_2018_markdown_instruction": "A binary message was recorded as a wave as shown in the image below. Can you decode the message? Explain what information you would need in order to successfully decode the message into A’s and B’s.\n\n![](https://images.code.org/c8ba0db14fabb778dc034ac4656259fa-image-1434429617999.png)\n\n",
        "U1L4 Free response reflection question_markdown_instruction": "Complete the Lesson 2 Rubric.\n\nA binary message consisting of four bits was sent to you by a friend. The message was supposed to be ABAB. Unfortunately, your friend sent the message at 1/2 the bit rate you agreed upon. What message did you receive instead?\n",
        "U1L4 NetSim SendAB_markdown_instruction": "## Coordination and Binary Messages Activity\n\n**Develop your Protocol**\nDevelop a protocol that allows you to use Internet Simulator to relay a message, i.e. one member sends a message and the other member sends the same message back. You or a teacher will say “Go” to begin the exchange but otherwise all communication must be through the widget. As you’re working, consider:\n\n- How will you know when the exchange is supposed to begin?\n- How will you know whose turn it is to send or receive the message?\n- How will you coordinate your actions?\n\nDocument your protocol on the worksheet provided, and test your protocol using the Internet Simulator",
        "U1L5 Free Response Assessment_markdown_instruction": "Complete the rubric for Lesson 5. Then respond to this prompt using approximately 100 words.\n\nReflect on the progress of communication innovations. \n\nWhat do you notice across the variety of systems? \n\nSpeculate on the next phase of communication innovations.\n",
        "U1L5 Free Response Lesson Review_markdown_instruction": "Complete these three sentences.\n\nThree big ideas from the lesson today are _____ and _____ and _____ . \nBut the most important or interesting thing I learned today is _____. \n\nAt the beginning of the class, I thought _______ but now i know _______.\n",
        "U1L5 How the Internet Works - Video_markdown_instruction": "[Video guide and questions](https://docs.google.com/document/d/1YviZiL1VjpUa9Gbe3j_4lETKyoZqEW14_RG7EEWEwgU/edit)",
        "U1L6 Free Response Assessment_markdown_instruction": "If you had to represent numbers with A/B states from sending-bits widget, could you?\n\nWrite a represent of the numbers 0 through 15 using only the letters A and B.\n\n\n",
        "U1L6 Free Response Reflection_markdown_instruction": " In 50 words or less, describe the concept of a number system. \n\nWhy are rules required for a number system to be useful?\n",
        "U1L6 Free Response Reflection_2018_markdown_instruction": " In 50 words or less, describe the concept of a number system. \n\nWhy are rules required for a number system to be useful?\n",
        "U1L7 Free Response Assessment_markdown_instruction": "In 100 words or less describe how place value is used in the binary number system. How is it similar or different from the way place value is used in the base 10 number system.\n",
        "U1L7 Free Response Assessment_2018_markdown_instruction": "In 100 words or less describe how place value is used in the binary number system. How is it similar or different from the way place value is used in the base 10 number system.\n",
        "U1L7 Free Response Reflection_markdown_instruction": "Reflect on your learning in this lesson. In the space below, enter:\n\n3 recollections (things you remember), \n\n2 observations (things you noticed), and \n\n1 insight (something you fully understand the significance of).\n",
        "U1L7 Free Response Reflection_2018_markdown_instruction": "Reflect on your learning in this lesson. In the space below, enter:\n\n3 recollections (things you remember), \n\n2 observations (things you noticed), and \n\n1 insight (something you fully understand the significance of).\n",
        "U1L8 Free Response Getting Started_markdown_instruction": "Respond to the following question.\n\nList two or three challenges you faced when trying to send multi-bit messages using the bit-sending widget during previous classes?\n",
        "U1L8 Free Response Reflection_markdown_instruction": "<strong>Complete the Sending Numbers Rubric (on the second page of the <a href= \"https://docs.google.com/document/d/1cSlWYnxOciDQut0OAUcsddmM56bveHely71LUb_CHkM/edit\" target=\"_blank\">Sending Number activity guide</a>) and then respond to the following prompt.</strong>\n\nWhat problems arose in your efforts to create a working protocol? How did you think about the problem(s) in order to solve it?\n",
        "U1L8 Free Response Reflection_2018_markdown_instruction": "<strong>Complete the Sending Numbers Rubric (on the second page of the Sending Numbers activity guide</a>) and then respond to the following prompt.</strong>\n\nWhat problems arose in your efforts to create a working protocol? How did you think about the problem(s) in order to solve it?\n",
        "U1L8 Free Response2_markdown_instruction": "How did collaboration play a role in the creation of your protocol?",
        "U1L8 NetSim numbers with decimal_markdown_instruction": "## Sending Numbers Activity\n\n**Challenge:** Develop a protocol or set of rules for communicating a drawing to your partners using only bits.\n\n**Challenge Rules:**\nThe image will be a line drawing created by connecting points on a grid, like the one seen here.\nYou can discuss and agree on a protocol ahead of time, but the image exchange must happen without communication between the two parties other than through using the Internet Simulator.\n\n**Things to Consider:**\n- How will your points be formatted?\n- How does the recipient know when one number ends and the next begins?\n\n**Your Protocol:** Write the steps of your protocol on the worksheet provided by your teacher.\n\n![](https://images.code.org/d79263f7a6e129962f830ce0af2ed3cc-image-1434414362601.PNG)",
        "U1L9 Free Response Assessment_markdown_instruction": "Choose one of the topics you most enjoyed learning about today. Describe what new information you learned and how it relates to the way we create and use number systems.\n",
        "U2 L 1 - 2: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 1 - 2: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U2 L1 - 2: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 1 - 2: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U2 L11 - 15: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 11 - 15: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U2 L3 - 4: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 3 - 4: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U2 L5 - 6: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 5 - 6: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U2 L7 - 10: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 7 - 10: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U2 The Internet: Cybersecurity and Crime - Video_markdown_instruction": "[Video guide and questions](https://drive.google.com/open?id=1Qv4lgMMtP42sRlofUmGtElViD1AJ7yETvQ4pCh0rDjw)",
        "U2 Vigenere_markdown_instruction": "# Encrypt and decrypt a message with the Vigenère cipher\n\nThis is an interactive version of the Vigenère cipher that animates the encryption and decryption as it’s happening, given a piece of text to encrypt or decrypt and the key.\n\n# Do this\n### Encrypt a message\nClick Step several times, and trace what’s happening. Pay attention to:\n\n- How the ciphertext is being produced\n- What happens when you get to the last character of the key\n- After you’ve stepped through a few characters click Play to watch the rest animate\n- Hit Restart and play the animation again. You can use the speed slider to speed it up or slow it down  \n\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\n\n### Decrypt a message\nEncrypt a message as above, then:  \n\n- Highlight and copy the ciphertext\n- Paste it into the plaintext area. Note: Don’t change the key\n- Change the Encrypt/Decrypt toggle to Decrypt\n- Hit Step a few times, and then Play\n\nYou should see the original text emerge.  \n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\n\n\nHow hard would it be to crack a message encrypted with this cipher? Does the length of the key make a difference?\n",
        "U2 frequency caesar_markdown_instruction": "# Break a Caesar cipher!\n\nThis tool lets you play with text and do substitution ciphers. It also shows you a frequency analysis of the input text. (We’ll look at that more in a later lesson.) You can use this to either encrypt a message or decrypt it.\n\n# Do this\n- Load the **Sample message (easy)** from the message dropdown. This will load a message that has been encrypted with a Caesar cipher.\n\n![](https://images.code.org/336a6a68cc34636df21fe5ad9f43992c-image-1443566879847.gif)\n\n- Using the buttons in the Caesar substitution tab, you can shift the alphabet forwards or backwards to try to unscramble the message.\n\n![](https://images.code.org/1783d62a944fd758cc19c5d0f73ec2c4-image-1443567014825.gif)\n\nSee how long it takes you to crack the cipher! Is this a good method of encrypting secret data?\n",
        "U2 frequency random sub_markdown_instruction": "# Break a random substitution cipher!\n\nThis version of the tool gives you more information about the encrypted text and more options for how to try out different substitutions.\n\n### Different ways analyze text\n- Play with some of the sorting options available in the Random substitution cipher tab to get different views on the letter frequencies in the input text as well as standard English text.\n![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)\n\n### Different ways to substitute\n- To substitute a letter you can drag a blue letter of the alphabet directly underneath the orange letter you want changed in the original ciphertext.\n![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)\n\n### Play.  Always play.\n- There are other ways to analyze and substitute characters that you can find by clicking on the buttons and trying out whatever you like.\n- Remember: you can't break it :)\n\nSee how long it takes you to crack the cipher! Is this a good method of encrypting secret data?",
        "U2 vigenere cipher_markdown_instruction": "# Encrypt and decrypt a message with the Vigenère cipher\n\nThis is an interactive version of the Vigenère cipher that animates the encryption and decryption as it’s happening, given a piece of text to encrypt or decrypt and the key.\n\n# Do this\n### Encrypt a message\nClick Step several times, and trace what’s happening. Pay attention to:\n\n- How the ciphertext is being produced\n- What happens when you get to the last character of the key\n- After you’ve stepped through a few characters click Play to watch the rest animate\n- Hit Restart and play the animation again. You can use the speed slider to speed it up or slow it down  \n\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\n\n### Decrypt a message\nEncrypt a message as above, then:  \n\n- Highlight and copy the ciphertext\n- Paste it into the plaintext area. Note: Don’t change the key\n- Change the Encrypt/Decrypt toggle to Decrypt\n- Hit Step a few times, and then Play\n\nYou should see the original text emerge.  \n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\n\n\nHow hard would it be to crack a message encrypted with this cipher? Does the length of the key make a difference?",
        "U2L01 Assessment 4_markdown_instruction": "## The Internet is for Everyone: Assessment 4\n\nExplain one challenge raised by Vint Cerf in “The Internet is for Everyone - but it won’t be if….” and give one example of it that you know about.\n",
        "U2L01 Assessment 4_2018_markdown_instruction": "## The Internet is for Everyone: Assessment 4\n\nExplain one challenge raised by Vint Cerf in “The Internet is for Everyone - but it won’t be if….” and give one example of it that you know about.\n",
        "U2L02 Assessment 5_markdown_instruction": "Even with a good protocol, what are some privacy and security challenges while playing battleship on the Internet Simulator?",
        "U2L02 Assessment 5_2018_markdown_instruction": "Even with a good protocol, what are some privacy and security challenges while playing battleship on the Internet Simulator?",
        "U2L02 Assessment1_markdown_instruction": "Why was it necessary to include the sender's and recipient's names in the NetSim version of Battleship, but not in the face-to-face game?\n",
        "U2L02 Assessment2_markdown_instruction": "\nIf the messaging scheme your group designed was really used on the internet, what could go wrong in terms of security and privacy?\n\n*In your response, think about what a malicious person could do. What if the messages sent weren't about a game but about something more personal like a conversation with a friend, or communicating with a bank?*\n\n\n",
        "U2L02 Free Response Getting Started_markdown_instruction": "Have you ever played the game of Battleship? \n\nWhat rules did you follow? \n\nDid you have a strategy for winning?\n",
        "U2L02 Free Response Reflection_markdown_instruction": "Describe the addressing system your group devised.\n\nHow did your group decide upon a system for sending messages in the Battleship simulator? \n\nWere there disagreements or problems? How were they resolved?\n\n\n",
        "U2L02 Free Response Reflection_2018_markdown_instruction": "Describe the addressing system your group devised.\n\nHow did your group decide upon a system for sending messages in the Battleship simulator? \n\nWere there disagreements or problems? How were they resolved?\n\n\n",
        "U2L04 Assessment2_markdown_instruction": "Describe the relative benefits of routing over a broadcast style of communication. Is routed traffic more secure than broadcasting? Justify your answer.\n",
        "U2L04 Assessment2_2018_markdown_instruction": "Describe the relative benefits of routing over a broadcast style of communication. Is routed traffic more secure than broadcasting? Justify your answer.\n",
        "U2L04 Assessment3_markdown_instruction": "Can you know in advance the path a message will take between you and another computer on the Internet? Justify your answer.\n",
        "U2L04 Assessment3_2018_markdown_instruction": "Can you know in advance the path a message will take between you and another computer on the Internet? Justify your answer.\n",
        "U2L04 Free Response Wrap Up_markdown_instruction": "How do you think the routers are physically connected? Does it matter to you? Why or why not?\n",
        "U2L05 - NetSim - Packets and Building TCP_markdown_instruction": "## Packets and Making a Reliable Internet\n\n**Challenge:** Develop a protocol for reliably sending a message across an unreliable network\n\n**An Unreliable Internet Simulator:** The current version of the Internet Simulator is modeled after some actual constraints of the Internet\n- Messages must be divided into packets which may contain <em><strong> at most eight (8) ASCII characters </em></strong>\n- Messages should be long enough to require at least 10 packets\n- Packets may not arrive in the order sent\n- Packets may be dropped while in transmission\n\n**Directions:** In a group or individually join a router in the Internet Simulator and practice sending messages given these new constraints. Once you are comfortable with the challenge, iteratively design a protocol that can reliably send a message to a partner. You and your partner should join <em><strong> DIFFERENT </strong></em> routers.\n\n**Protocol Requirements:**\n- All communication can only be done through the Internet Simulator\n- You must send a message that spans at least 10 packets (i.e. an 80 character ASCII message). \n- The protocol should account for the possibility that the characters might be entirely random (i.e. not necessarily English - do not count on human intuition to reconstruct the message. The message is not known beforehand.)\n- The sender and receiver must be confident the full message was successfully transmitted and reconstructed.",
        "U2L05 Lossy vs. Lossless FR 1_2018_markdown_instruction": "# When to use lossy compression?\n\nIn general, what are reasons that someone would choose to use lossy compression? Write a brief response below including at least one example of a situation when lossy compression would be appropriate.",
        "U2L05 Reflection 1_markdown_instruction": "In your own words, what were the primary obstacles you needed to overcome in today’s challenge? How do these obstacles mirror actual problems encountered on the Internet?\n",
        "U2L05 Reflection 1_2018_markdown_instruction": "In your own words, what were the primary obstacles you needed to overcome in today’s challenge? How do these obstacles mirror actual problems encountered on the Internet?\n",
        "U2L07 Assessment5_markdown_instruction": "When analyzing algorithms why doesn't the amount of real time (clock time) tell us very much about the algorithm's \"efficiency\"?\n",
        "U2L08 Assessment 0_markdown_instruction": "## Router Table: Assessment\n\nIn this activity you filled in a routing table by visiting other routers you were directly connected to find out what paths they were using. Why do routers need to use this method of talking to their direct neighbors in order to fill in their routing tables?\n",
        "U2L08 Free Response 1_markdown_instruction": "How is creating a router table similar to finding the shortest path in a graph?  How is it different?\n",
        "U2L08 Free Response 2_markdown_instruction": "Why do routers store information about neighbors and costs, rather than the whole path from themselves to another router? \n",
        "U2L08 Free Response 3_markdown_instruction": "Why does a router keep track of the cost to a destination through multiple routers instead of only the fastest one?\n\n",
        "U2L09 Assessment2_markdown_instruction": "Why do computers need to periodically check the DNS for websites you have already visited?\n",
        "U2L09 Assessment2_2018_markdown_instruction": "Why do computers need to periodically check the DNS for websites you have already visited?\n",
        "U2L09 Free Response Wrap Up_markdown_instruction": "Why don’t we need to know the IP addresses for our favorite sites?\n",
        "U2L09 Free Response Wrap Up_2018_markdown_instruction": "Why don’t we need to know the IP addresses for our favorite sites?\n",
        "U2L10 Assessment3_markdown_instruction": "Why do multiple websites at your school and the computers in your classroom all have IP addresses that start with the same two sets of numbers?\n",
        "U2L10 FR describe what you made from lesson prompt_markdown_instruction": "What was the most interesting visualization you were able to create with the data set provided? What did it help you discover about the data?\n\nMake sure that your response includes the following:\n\n1. What type of chart it was\n2. What specific data it plotted\n3. What it helped you discover and/or *why* it was the most interesting to you\n\nTry to keep your response to 150 words or less (5-7 sentences).",
        "U2L10 FR describe what you made from lesson prompt_2018_markdown_instruction": "What was the most interesting visualization you were able to create with the data set provided? What did it help you discover about the data?\n\nMake sure that your response includes the following:\n\n1. What type of chart it was\n2. What specific data it plotted\n3. What it helped you discover and/or *why* it was the most interesting to you\n\nTry to keep your response to 150 words or less (5-7 sentences).",
        "U2L10 FR why best worst viz_markdown_instruction": "\nChoose the visualization that you thought was the best or worst (pick one) from the ones you saw in class and do the following:\n\n1. Describe the visualization so the reader knows which one you are talking about (example: \"Collection A #2 -- Average divorce rates in America\")\n\n2. Say whether this was the best or worst visualization for you and *and why*.  Justify your opinion by citing principles of visualizations that you have learned about.  Use the visualization 101 guide as a resource. \n\nTry to keep your response to around 100 words (about 3-5 sentences).\n",
        "U2L10 FR why best worst viz_2018_markdown_instruction": "\nChoose the visualization that you thought was the best or worst (pick one) from the ones you saw in class and do the following:\n\n1. Describe the visualization so the reader knows which one you are talking about (example: \"Collection A #2 -- Average divorce rates in America\")\n\n2. Say whether this was the best or worst visualization for you and *and why*.  Justify your opinion by citing principles of visualizations that you have learned about.  Use the visualization 101 guide as a resource. \n\nTry to keep your response to around 100 words (about 3-5 sentences).\n",
        "U2L10 Free Response Getting Started_markdown_instruction": "Explain the similarities between DNS and the Postal Service.  Describe their analogous hierarchical structure.\n",
        "U2L10 Free Response Wrap Up_markdown_instruction": "Complete this sentence.\n\nI learned three things today about DNS: ______(1)______ , ______(2)______ , and ______(3)______. \n\nHowever, the most important thing I learned is ______(4)______.\n",
        "U2L10 NetSim Automatic DNS_markdown_instruction": "## The Need for DNS\n\nIn this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. You can only see the hostnames of other connected computers.   \n![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)\n\nThe address of the DNS is always &lt;yourRouterNumber&gt;.15. Send a message with protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another student's address. You can keep track of the responses in the Notes section in the DNS tab.  \n![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)",
        "U2L11 Free Response_markdown_instruction": "The definition of HTTP makes use of the ASCII character set without reference to how these characters are encoded. Explain why this is an example of abstraction.\n",
        "U2L11 Free Response_2018_markdown_instruction": "The definition of HTTP makes use of the ASCII character set without reference to how these characters are encoded. Explain why this is an example of abstraction.\n",
        "U2L12 FR reflection on collaboration_markdown_instruction": "*NOTE: The following is modification of one of the prompts given on the AP Create Performance task.*\n\nDescribe the development process of discovering your data story and creating a visualization.  Describe the difficulties and/or opportunities you encountered along the way, and describe the collaborative process between you and your partner.\n\nPlease limit your response to about 200 words.",
        "U2L12 FR reflection on collaboration_2018_markdown_instruction": "*NOTE: The following is modification of one of the prompts given on the AP Create Performance task.*\n\nDescribe the development process of discovering your data story and creating a visualization.  Describe the difficulties and/or opportunities you encountered along the way, and describe the collaborative process between you and your partner.\n\nPlease limit your response to about 200 words.",
        "U2L13 Assessment1_markdown_instruction": "What is a Caesar cipher?  As part of your answer demonstrate encrypting the plaintext messages: `CS IS COOL` with a caesar cipher.\n",
        "U2L13 Assessment1_2018_markdown_instruction": "What is a Caesar cipher?  As part of your answer demonstrate encrypting the plaintext messages: `CS IS COOL` with a caesar cipher.\n",
        "U2L13 Assessment2_markdown_instruction": "What makes one encryption better than another?\n",
        "U2L13 FR Reflection data analysis objective_markdown_instruction": "In order to analyze data with a computer, we need to clean the data first. Based on your experience today, would you say that data analysis is a perfectly objective process? Why or why not? (Limit to about 100 words)\n",
        "U2L13 FR Reflection data analysis objective_2018_markdown_instruction": "In order to analyze data with a computer, we need to clean the data first. Based on your experience today, would you say that data analysis is a perfectly objective process? Why or why not? (Limit to about 100 words)\n",
        "U2L13 Free Response Getting Started_markdown_instruction": "In what situations on the Internet do you typically want to keep information secret? \n\nFrom whom do you want to keep it to be secret? \n\nHow do you think your privacy is maintained on the Internet now?\n\n\n",
        "U2L13 Free Response Getting Started_2018_markdown_instruction": "In what situations on the Internet do you typically want to keep information secret? \n\nFrom whom do you want to keep it to be secret? \n\nHow do you think your privacy is maintained on the Internet now?\n\n\n",
        "U2L13 Free Response Wrap Up_markdown_instruction": "List 3 characteristics of the ideal encryption scheme.\n",
        "U2L13 Free Response Wrap Up_2018_markdown_instruction": "List 3 characteristics of the ideal encryption scheme.\n",
        "U2L14 Assessment2_markdown_instruction": "Using the Vigenere cipher, does the length of the key matter? \nFor example, if one key is length 5 and another is 20, does one produce a “better” encrypted message than the other, or is it basically the same? Yes or no? Explain your reasoning.",
        "U2L14 Assessment2_2018_markdown_instruction": "Using the Vigenere cipher, does the length of the key matter? \nFor example, if one key is length 5 and another is 20, does one produce a “better” encrypted message than the other, or is it basically the same? Yes or no? Explain your reasoning.",
        "U2L14 Free Response Getting Started_markdown_instruction": "What is the difference is between “cracking” a code and “decrypting” a message?\n",
        "U2L14 Free Response Getting Started_2018_markdown_instruction": "What is the difference is between “cracking” a code and “decrypting” a message?\n",
        "U2L14 Free Response Wrap Up_markdown_instruction": "Knowing what you know now about frequency analysis, would you feel comfortable sending your password over the Internet using a substitution cipher?\n\nWhy or why not?\n",
        "U2L14 Free Response Wrap Up_2018_markdown_instruction": "Knowing what you know now about frequency analysis, would you feel comfortable sending your password over the Internet using a substitution cipher?\n\nWhy or why not?\n",
        "U2L14 frequency random_markdown_instruction": "# Break a Caesar cipher!\n\nThis tool lets you play with text and do substitution ciphers. It also shows you a frequency analysis of the input text. (We’ll look at that more in a later lesson.) You can use this to either encrypt a message or decrypt it.\n\n# Do this\n- Load the \"Sample message (easy)\" from the message dropdown. This will load a message that has been encrypted with a Caesar cipher\n\n![](https://images.code.org/336a6a68cc34636df21fe5ad9f43992c-image-1443566879847.gif)\n\n- Using the buttons in the Caesar substitution tab, you can shift the alphabet forwards or backwards to try to unscramble the message.\n\n![](https://images.code.org/1783d62a944fd758cc19c5d0f73ec2c4-image-1443567014825.gif)\n\nSee how long it takes you to crack the cipher! Is this a good method of encrypting secret data?",
        "U2L15 Assessment2_markdown_instruction": "What problems exist with encryption schemes such as the Vigenere cipher even when strong encryption keys are used?\n",
        "U2L15 Free Response Getting Started_markdown_instruction": "Why do you think Internet hacking becomes \"really big news\" when it occurs?\n",
        "U2L15 Free Response Wrap Up_markdown_instruction": "Companies and organizations commonly require users to change their passwords frequently. Websites have password length and complexity requirements. \n\nIs it better to change your password frequently or to have a longer password? \n\nWhat level of security is appropriate to require of end users? Does this change, depending on the context (for example, employee or customer)?\t\n",
        "U2L16 Free Response Assessment 3_markdown_instruction": "Why are computationally-hard problems important in encryption strategies?",
        "U2L16 Free Response assessment 2_markdown_instruction": "What do people do who need solutions to large computationally-hard problems?",
        "U2L16 Free response assessment 1_markdown_instruction": "What does \"computationally hard\" mean?",
        "U2L17 Assessment 1_markdown_instruction": "Describe what it means for a problem to be “computationally hard.”",
        "U2L17 Assessment 2_markdown_instruction": "What strategies do people use to solve large computationally-hard problems?",
        "U2L17 Free Response Getting Started_markdown_instruction": "What kinds of problems do you think are “computationally hard\"?",
        "U2L17 Free Response Wrap Up_markdown_instruction": "If the TSP is unsolvable for finding an exact solution, how do you think package delivery companies optimize their delivery routes?",
        "U2L18 Assessment_markdown_instruction": "How is the Wireless Hotspot problem different from another “hard” problem you saw, the Traveling Salesman problem?\n",
        "U2L18 FR why is asymmetric encryption useful_markdown_instruction": "* In symmetric encryption the same key is used to encrypt and decrypt a message.\n* In **a**symmetric encryption different keys are used to encrypt and decrypt.\n\n#### Give at least one reason (more are welcome) why **a**symmetric encryption is useful?\n",
        "U2L18 Free Response Assessment 1_markdown_instruction": "In symmetric encryption the same key is used to encrypt and decrypt a message. In asymmetric encryption different keys are used to encrypt and decrypt. Give at least one reason why asymmetric encryption is useful",
        "U2L18 Free Response Assessment 1_2018_markdown_instruction": "In symmetric encryption the same key is used to encrypt and decrypt a message. In asymmetric encryption different keys are used to encrypt and decrypt. Give at least one reason why asymmetric encryption is useful",
        "U2L18 Free Response Assessment 3_markdown_instruction": "List other examples of one-way functions. Can you think of a one-way function in real life?",
        "U2L18 Free Response Getting Started_markdown_instruction": "Given that the Travelling Salesman Problem and the Wireless Hotspot Problem are computationally hard to solve, why might the Wireless Hotspot Problem be a more ideal candidate for using an encryption method? Make reference to properties of the two problems in your answer.\n",
        "U2L18 Free Response Wrap Up_markdown_instruction": "Mixing paint is an easy-to-understand example of a one-way function. The process is clear -- mix together a few colors to get a new color -- but it's difficult to \"un-mix\" the paint to get back to the original colors used.\n\nHow is this related to encryption?\n\n\n",
        "U2L19 Assessment_markdown_instruction": "Explain how modulo acts as a one-way function?\n",
        "U2L19 Free Response Getting Started_markdown_instruction": "Explain in your own words what the modulo operation does.  You may use the analogy of a clock in your answer if you like.\n",
        "U2L19 Free Response Getting Started_2018_markdown_instruction": "Explain in your own words what the modulo operation does.  You may use the analogy of a clock in your answer if you like.\n",
        "U2L19 Free Response Wrap Up_markdown_instruction": "Describe to a person who knows nothing about encryption why public key encryption is secure and is hard to crack.\n",
        "U2L19 Free Response Wrap Up_2018_markdown_instruction": "Describe to a person who knows nothing about encryption why public key encryption is secure and is hard to crack.\n",
        "U2L20 - Free Response - exploited technology_markdown_instruction": "## Security and Hacking in the Real World: Written Response\n*Answer this prompt below with 200 words or less.*\n\n**Prompt:** Identify and explain how some Internet technologies are exploited, circumvented, or allow for the cyber threat. Refer to technologies you've learned about in this unit.\n\n",
        "U2L20 Free Response Getting Started_markdown_instruction": "Why do you think Internet hacking becomes \"really big news\" when it occurs?\n",
        "U2L20 Free Response Wrap Up 2_markdown_instruction": "## Security and Hacking in the Real World: Written Response\n*Answer this prompt below with 200 words or less.*\n\n**Prompt:** Explain how the information covered in your visual artifact is related to one of the topics below. Use relevant terminology in your answer. Include specific references to lessons and activities.\n\nEncryption and Algorithms <br>\nCracking an Encryption with Heuristics (i.e. Frequency Analysis)<br>\nSymmetric Encryption (i.e. Caesar)<br>\nHarder to Crack Encryption (i.e. Vigenere)<br>\nAsymmetric Encryption (Alice and Bob)<br>\nComputationally Hard Problems<br>\nPublic Key Encryption<br>\nOne-way Functions<br>\nOpen Standards<br>\nCertificate Authorities<br>\n\n",
        "U2L20 Free Response Wrap Up_markdown_instruction": "## Security and Hacking in the Real World: Written Response\n*Answer this prompt below with 200 words or less.*\n\n**Prompt:** Clearly describe the computing tools, techniques, and development process used to create the artifact such that someone can reproduce the artifact.\n",
        "U2L3 Assessment 4_markdown_instruction": "Why does it not make sense for users to be identified by their real names on the Internet?",
        "U2L3 Free Response Getting Started_markdown_instruction": "What are the benefits of using a phone number instead of a person's name? How many total phone numbers are there?\n",
        "U2L3 Free Response Wrap Up_markdown_instruction": "Why does it make more sense to use IP addresses for online accounts instead of users' real names?\n",
        "U2L3 NetSim Hub Mode_markdown_instruction": "# Test It Out! (Optional)\n\nAfter you've finished developing your protocol feel free to test it out using the Internet Simulator. Does your protocol work as well as you thought?",
        "U2L3: IP DNS Video_markdown_instruction": "[Video guide and questions](https://docs.google.com/document/d/1ngw37cKFH4Dl_lhWXuXROH5WDdgHatz3gJo3pAdpqkg/edit?usp=sharing)",
        "U2L4 Free Response Getting Started_markdown_instruction": "Imagine that you want to send a postcard to a friend in a city on the far side of the country. After you write a message, you address it, add a return address, put a stamp on it, and drop it in the mail.\n\nThen what happens? What is the route that postcard takes to get to your friend? \n\nList the steps that you think it takes for a postcard gets from you to your friend. Include each of the potential stops along the way and how it gets transported from one place to another.\n\n\n",
        "U2L5 FR brighten darken image_markdown_instruction": "Imagine that you have an image that is too dark or too bright. Describe how you would alter the RGB settings to brighten or darken it. Give an example.\n",
        "U2L5 FR brighten darken image_2018_markdown_instruction": "Imagine that you have an image that is too dark or too bright. Describe how you would alter the RGB settings to brighten or darken it. Give an example.\n",
        "U2L8 google trends hypothesis_markdown_instruction": "Consider the Google Trends graph of dogs and cats below (same graph as previous question).\n\nGive a plausible explanation or hypothesis for the spike in dog searches that occurred between 2014 and 2015 that would lead to further investigation or research. Give your explanation and what you would want to investigate next.\n\n<a href=\"https://images.code.org/bd40b81c105978fe26ff787a6bf82795-image-1469633006237.png\" target=_blank><img src=\"https://images.code.org/bd40b81c105978fe26ff787a6bf82795-image-1469633006237.png\"><br>Click to Enlarge</a>",
        "U2L8 google trends hypothesis_2018_markdown_instruction": "Consider the Google Trends graph of dogs and cats below (same graph as previous question).\n\nGive a plausible explanation or hypothesis for the spike in dog searches that occurred between 2014 and 2015 that would lead to further investigation or research. Give your explanation and what you would want to investigate next.\n\n<a href=\"https://images.code.org/bd40b81c105978fe26ff787a6bf82795-image-1469633006237.png\" target=_blank><img src=\"https://images.code.org/bd40b81c105978fe26ff787a6bf82795-image-1469633006237.png\"><br>Click to Enlarge</a>",
        "U2L9 FR digital divide issue_markdown_instruction": "Consider the following statement from the CS Principles course framework:\n\n```\n7.4.1C The global distribution of computing resources raises issues of equity, access, and power.\n```\n\nBriefly describe one of these issues that you learned about in the lesson and how it affects your life or the lives of people you know.  Keep your response to about 100 words (about 3-5 sentences).",
        "U2L9 FR digital divide issue_2018_markdown_instruction": "Consider the following statement from the CS Principles course framework:\n\n```\n7.4.1C The global distribution of computing resources raises issues of equity, access, and power.\n```\n\nBriefly describe one of these issues that you learned about in the lesson and how it affects your life or the lives of people you know.  Keep your response to about 100 words (about 3-5 sentences).",
        "U2L9 Free Response Getting Started_markdown_instruction": "On the Internet, computers can only communicate with each other through IP addresses. Typically, you will know the name (or URL) of a computer you wish to talk to, but not its IP address. \n\nList two impacts that would result if you HAD TO KNOW IP addresses to get to websites?\n",
        "U3 - Arrays - Wrap Up 1_markdown_instruction": "## Choose: Array or Variable?\n\nYour app needs to store the following information. For each type of information, decide whether you would use an array or a variable to store it:\n \n* All the messages a user has sent\n* The highest score a user has ever reached on the app\n* A username and password to unlock the app\n\n",
        "U3 - Arrays - Wrap Up 2_markdown_instruction": "## Free Response: Choosing Array or Variable\n\nIn general, when do you think you should store information in an array, and when should you use a variable?\n",
        "U3 - Arrays - appendItem_markdown_instruction": "# Adding Items to an Array\n\n<img src=\"https://images.code.org/c9244eb598416b5a3d9baac088bbaca8-image-1447267168567.39.06 PM.png\" style=\"width: 250px; float: right\">\n\nIn our last exercise we created our array and initialized it with some values. Another way to do this is to **add items to your array on separate lines**. The simplest way to do this is to add a new item to the end of your array using the `appendItem` command.\n\n<img src=\"https://images.code.org/74a2f2660d5aea8dec7dc4933f2c68d3-image-1447185901732.04.50 PM.png\" style=\"width: 250px; float:right; border: solid 1px black\">\n\nTo append means to add or to join. When you append an item to an array you actually add a new location to the end of the array that contains the new value, so that the total size of the array grows by one.  Since you can always add items to an array after creating it, it is very common to  **create an empty array and then add values in subsequent portions of your program**.\n\n# Do This:\n\n* **Read the documentation** for `appendItem`.\n* Create an **empty array** called `oddNumbers`.\n* Use `appendItem` to add the odd numbers 1-11 to your array.\n\n![](https://images.code.org/41883beff3cb9810fed37ae684dc1fe8-image-1448312407634.gif)\n\n* **Use `console.log`** to confirm your array is holding the correct values. The output should look like the example below.\n\n<img src=\"https://images.code.org/60d41e3ea1927edbee9cfc1cc408bbb5-image-1447187862124.37.01 PM.png\" style=\"width: 150px\">\n\n",
        "U3 - Arrays - assignment_markdown_instruction": "# Setting Values by Index\n\nEach location in an array can be treated like its own variable. We've already seen how we can use bracket notation to reference values stored at specific locations in an array. Just like with variables, **we can assign the value of a specific location in an array using `=`** (the assignment operator).\n\n**Example:** The value at index 0 of this array is set to 10.\n\n![](https://images.code.org/d0bf9901deeffb1cd6553c27c38046a4-image-1447172887059.27.25 AM.png)\n\n# Do This:\n\n<img src=\"https://images.code.org/cfa8d82d89e5227f22e3afe5f9c49698-image-1447366432447.13.11 PM.png\" style=\"width: 200px; float: right\">\n\nStarter code is provided that creates an array of 0's and 1's. **Set all the values in this array to be 0**. \n\n* Use **indexes** and the **assignment operator** `=` to **set all the 1's to be 0**.\n* Check the output of the `console.log` to confirm **the array only contains 0's**. Example shown on the right.\n\n",
        "U3 - Arrays - assignment2_markdown_instruction": "# Array Values: Arithmetic\n\nYou can reference locations in arrays in arithmetic expressions, just like you might a variable.\n\n![](https://images.code.org/a7d11342d8c72b34f2268e4104e43fbd-image-1447189790574.09.32 PM.png)\n\nThe starter code **creates an empty array and adds three random values to it**. \n\n![](https://images.code.org/51b7c713ae398299a85ee8c0b9ee04f3-image-1447190702799.23.46 PM.png)\n\nYou will be adding code to your program that calculates the sum of the values in the array.\n\n# Do This:\n\n* **Add a variable** to your program to hold the sum of the array values.\n* Assign the value of the variable to **the sum of the three array values**.\n* Use `console.log` to confirm that you have correctly calculated the sum of the values. Below is sample output from one run of the program.\n\n![](https://images.code.org/a9ca48808e8e833d92b3bcdebc7b0bd4-image-1447189975738.12.31 PM.png)",
        "U3 - Arrays - assignment3_markdown_instruction": "# Reassigning Array Values\n\nWe've already seen many examples of how **a location in an array can be treated identically to a variable**. The last exercise we'll perform to prove this point is **reassigning array values**. The syntax for reassigning values stored in an array is identical to that used when reassigning variables. Even the `++` notation to increase a value by one works!\n\n![](https://images.code.org/3cbd11c69e42daddce28e059388097db-image-1464228660945.png)\n\nThe program you're about to see **creates an empty array and adds three random values to it**. You will be adding code to the program that **increases each value by one**.\n\n# Do This:\n\n* Add code to the program that **increases the value stored at each location in the array by one**.\n* Use `console.log` to confirm that you have correctly increased the values. Below is sample output from one run of the program.\n\n![](https://images.code.org/42ca1f874a8a7b71e29b2ffd80ec31c3-image-1447191826756.43.37 PM.png)\n\n",
        "U3 - Arrays - createFirstArray_markdown_instruction": "# Creating an Array\n\nArrays have many features which make them different from variables, but **most of what you've learned about variables also applies to arrays**. For example, just like a variable:\n\n* Arrays should be given a **descriptive and meaningful** name.\n* Arrays are created using `var`.\n* Arrays can be initialized/set using `=`.\n\n**Example: Creating an Array**\n\n![](https://images.code.org/0b7d201db2990f0189963bb6a565a057-image-1447097600773.33.08 PM.png)\n\nThis array contains 3 values: 100, 250, 500. Notice that the values are separated with commas `,` and that the entire array is enclosed in brackets `[ ]` . We can use `console.log` to display the contents of an array just like we would a variable.\n\n![](https://images.code.org/7d4be70330108e3e5d6325fa4e721ef4-image-1447097904253.38.18 PM.png)\n\n# Do This:\n\n* Following the format described above **create an array** which contains **the even numbers from 0 to 10**.\n\n<img src=\"https://images.code.org/872be32ff4ba4e9c733435d524a95c9e-image-1448311800271.gif\" width=450px>\n\n* Make sure your array has a **descriptive and meaningful name**.\n* Use `console.log` to display the contents of your array. Below is an example of the output your program should generate.\n\n![](https://images.code.org/230d988cf99556db04a8a4ad6a8d8a47-image-1447364062049.33.53 PM.png)\n\n",
        "U3 - Arrays - expressionsAsIndexes_markdown_instruction": "# Expressions as Indexes: Using Variables\n\nWe can use **any expression that evaluates to a number** as an index in an array. Here are some examples:\n\n![](https://images.code.org/6d4ecc9249dc9f3a845196b04d833c1a-image-1447268711944.24.53 PM.png)\n\n# Do This:\n\n* **Starter code** has been provided which creates an array of colors.\n* **Write code** that logs **a random color from this list** to the console by generating a value for a random index. Try to write your program using `list.length` rather than hard-coding the length of the list.\n\n![](https://images.code.org/d0463c0f2528e04c396f3b9cf219c3ed-image-1447370139548.gif)",
        "U3 - Arrays - favThings bounds_markdown_instruction": "# *if* Statements: Staying in Bounds\n\nCurrently the user can increase or decrease the value in the global index **past the bounds of your array**. As a result you've probably already seen that errors are generated.\n\nTo prevent this from happening, we're going to **add `if` statements** to the event handlers on the \"Next\" and \"Last\" buttons. They should check the value of the global index variable before changing it. If the user is about to step out of the bounds of your array they should either:\n\n* **Block:** Do not change the index if it will result in a value that is out of bounds.\n* **Wrap:** Set the index to be the other end of the array. In other words, going past the end of the array moves the index back to 0 and going past the beginning of the array sets the index to the last in the array (`list.length` will be helpful here).\n\n# Do This:\n\n* **Add `if` statements** to the event handlers on the \"Next\" and \"Last\" buttons that **prevent the global index from going out of bounds** using one of the two strategies described above.\n* Run your program to confirm that the user **cannot go out of bounds** and that the output displayed is correct.",
        "U3 - Arrays - favThings createArray_markdown_instruction": "# Create Your Array\n\nNow that we've dealt with our design elements we'll need to start writing the actual code of our app. This app keeps track of a list of items, so we know that **we'll need to create an array** to store them. \n\n# Do This:\n\n* **Create an array** that will hold your list of favorite things.\n* **Add three of your own favorite things to your array.**",
        "U3 - Arrays - favThings giveIDs_markdown_instruction": "# Getting Started: Creating IDs\n\nTo get your application off the ground we've provided **the user interface elements that you will use in your application**. Unfortunately they all currently have **default IDs** which don't reflect how the elements will be used.\n\n# Do This:\n\n* **Create a descriptive and meaningful ID** for each element in your app.",
        "U3 - Arrays - favThings keepPlaying_markdown_instruction": "# Keeping Going!\n\nYour app should now be fully functional - nice job! There are of course plenty of new pieces of functionality to add. If you have time feel free to make any improvements you wish. Here are some ideas:\n\n* Allow the user to **append items** rather than add them at the current location.\n* Give the user the ability to **remove** the item at the current index. This can be a little tricky if you **remove the item at the end of the list** so see if you can account for that.\n* Only add words **if they are not blank**.\n* **Improve the appearance** of the app.",
        "U3 - Arrays - favThings template_markdown_instruction": "# Getting Started: Creating IDs\n\nTo get your application off the ground we've provided **the user interface elements that you will use in your application**. Unfortunately they all currently have **default IDs** which don't reflect how the elements will be used.\n\n# Do This\n\n* **Create a descriptive and meaningful** for each element in your app.",
        "U3 - Arrays - favThings template_2018_markdown_instruction": "# Getting Started: Creating IDs\n\nTo get your application off the ground we've provided **the user interface elements that you will use in your application**. Unfortunately they all currently have **default IDs** which don't reflect how the elements will be used.\n\n# Do This\n\n* **Create a descriptive and meaningful** for each element in your app.",
        "U3 - Arrays - globalVariableIndex_markdown_instruction": "# Getting Started: Creating IDs\n\nTo get your application off the ground we've provided **the user interface elements that you will use in your application**. Unfortunately they all currently have **default IDs** which don't reflect how the elements will be used.\n\n# Do This\n\n* **Create a descriptive and meaningful** for each element in your app.",
        "U3 - Arrays - indexPractice_markdown_instruction": "# Index Practice\n\nIt will take some practice to get comfortable using array indexes. We'll do a couple of exercises to build your confidence.\n\n# Do This:\n\n<img src=\"https://images.code.org/4d52429f1d6f8e7812e14d73e2a89c45-image-1447366245418.08.51 PM.png\" style=\"width: 150px; float: right\">\n\n**Starter code** has been provided that creates an array called `myNumbers`.\n\n* Use `console.log` and array indexes to write the contents of `myNumbers` to the screen in order, as shown to the right. Your commands should be of the form `console.log(myNumbers[index])`.\n\n",
        "U3 - Arrays - insertingItems_markdown_instruction": "# Inserting Items: Array Indexes\n\nIf you want to add elements in the middle of your array you can use `insertItem` to specify an **index** at which an item should be inserted.\n\n![](https://images.code.org/46815edd373b9fe51c4efcf145474ecc-image-1447252675635.37.24 AM.png)\n\nJust like `appendItem`, `insertItem` creates a new location in the array. However `insertItem` allows you to insert an item anywhere in the array, not just at the end, and it shifts all elements at or after its index one location over.\n\n# Do This:\n\n* **Read the documentation** for `insertItem`.\n* **Starter code** has been provided which appends some strings to an array, but right now they don't form a complete sentence.\n* Use `insertItem` to **individually insert strings to your array** to form a complete sentence.\n* Use `console.log` to confirm you succesfully created your sentence.\n\n![](https://images.code.org/a77efe777082d387f64c4761d890c560-image-1447254451590.06.59 AM.png)",
        "U3 - Arrays - insertionErrors_markdown_instruction": "# Out of Bounds\n\nIn many languages trying to access indexes of an array that don't exist will create an error. **JavaScript allows for some strange behavior** with arrays that it's useful to see, even though **you will likely never use this functionality**.\n\n**Warning:** some of this code will generate errors or work in unexpected ways. Don't spend a long time trying to understand weird results. The point to take from this is **referencing indexes that are out of bounds will almost never do what you intend**, and we'll be learning ways to avoid this as we move forward.\n\n# Do This:\n\n* **Starter code** has been provided which creates an array with three elements.\n* Uncomment the **first command that references indexes that are out of bounds** and run the code.\n* **Examine the output** and try to understand what is happening.\n* Reset and then **recomment** the line after you've used it. \n* **Repeat the process for all the lines.**\n\n**Note:** We have used a different style of comment in this program. `/* long block comment */` is used when you want to write a multiple-line comment. ",
        "U3 - Arrays - introIndex_markdown_instruction": "# Accessing Items in an Array\n\nAn array is comprised of many locations. You can individually set or reference the information at each location of your array just like a variable. To tell your locations apart each has a separate number, or **index**, that identifies it.\n\nArrays in JavaScript are **zero-indexed** which means the first index is 0. This is similar to binary number systems which begin counting at 0. For example an array of 10 items would have indexes 0-9. As a result **the last index is always one less than the length of the array**.\n\n**Accessing Array Items by Index:** If you know the index of the item you wish to access you can reference it using square brackets `list[index]` . The example below prints the value of the 4th element in the array.  \n\n![](https://images.code.org/8b2da597fccaeeafb30b04991074cd8b-image-1447365422277.56.45 PM.png)\n\n# Do This:\n\n**Starter code** has been provided which creates an array of the numbers 1 through 10\n\n* Use `console.log` to display the first item in your array.\n* Use `console.log` to display the last item  in your array.\n* Use `console.log` to display the number 5 from the array.",
        "U3 - Arrays - length_markdown_instruction": "# *Array.length*\n\nAs we saw in the last exercise, there are many strange behaviors that can result from referencing array indexes that are less than 0 or greater than the highest index in your array. **If want to avoid these kinds of errors then it is useful to know how long your array is,** especially since we've seen that arrays can grow and shrink during the course of our program.\n\n![](https://images.code.org/419a610bedaaf709d400c51a6399f482-image-1447263621427.40.15 AM.png)\n\nYou can always check the current length of your array using the command `list.length` where \"list\" is the name of your array. It evaluates to a number indicating how many items are in your array.\n\n# Do This:\n\n* **Starter code** has been provided which creates several long arrays.\n* **Use `list.length` and `console.log`** to determine how many items are in each array. An example of the output is below.\n\n<img src=\"https://images.code.org/f309b94e58f252599de709dd568441fd-image-1447690174179.08.29 AM.png\" style=\"width: 250px\">",
        "U3 - Arrays - lengthMinus1_markdown_instruction": "# Expressions as Indexes: *list.length - 1*\n\nWe have been accessing information in an array by using numbers, but we can actually use **any expression that evaluates to a number as an index in our array**. The first example of this we will explore is accessing the last item in our array.\n\nArrays are **zero-indexed**, which means that the first index is 0. Therefore an array with a length of 3 will have indexes 0, 1, and 2. Notice that **the last index is 1 less than the length**. This will always be the case, and so we can use this expression to access the last element in any array:\n\n![](https://images.code.org/4b9d62e451188ea00a58102110e447f6-image-1447267224677.28.31 PM.png)\n\n# Do This:\n\n* **Starter code** has been provided that which creates several arrays.\n* Use the syntax provided above and `console.log` to display the final item in each list.\n",
        "U3 - Arrays - remove_markdown_instruction": "# Removing Items\n\nSometimes we want to remove something from an array. In order to do so you'll need to specify the **index** of the item that should be removed.\n\n<img src=\"https://images.code.org/350e3dfe234b1ce1e47e11bc0629b47d-image-1447272428285.06.40 PM.png\" style=\"width: 250px\">\n\n**Note:** `removeItem` removes the location in the array at the index provided. As a result **the array is one location shorter and all the indexes after the index provided will have their index decreased by one**.\n\n# Do This:\n\n* **Read the documentation** for `removeItem`.\n* **Starter code** has been provided which creates an array of strings.\n* Use `removeItem` to **individually remove all the \"REMOVE\" strings in your array** to form a complete sentence. \n* Use `console.log` to confirm you succesfully created your sentence.\n\n**Note:** Keep an eye out; your indexes will shift as you remove items.\n\n![](https://images.code.org/5ba2247cafcfcb5d8be80db32126105e-image-1447273315312.21.17 PM.png)",
        "U3 - Arrays - stringsInArrays_markdown_instruction": "# Arrays Can Hold Strings\n\nSo far we have been using arrays to hold numbers, but each location in an array could hold a string instead.\n\n![](https://images.code.org/5088def6c9aa8c114fc415bf25d83511-image-1447195709238.48.13 PM.png)\n\n**Note:** It is possible for an array to hold both strings and numbers, but **typically you will only want your arrays to hold one type of data**.\n\n# Do This:\n\n* Create an **empty array**.\n* Use `appendItem` to **individually add strings to your array**, forming a sentence of at least **5 words**.\n* Use `console.log` to confirm you succesfully created your sentence.\n\n![](https://images.code.org/75fc0b55a44d02e2366c60b30aeb28d1-image-1447252397993.33.06 AM.png)",
        "U3 - Basic Conditionals - 1_markdown_instruction": "0-  True and False statement\n\nif ( 1 < 5) {\n  console.log(\"Hello\");\n}",
        "U3 - Basic Conditionals - 2_markdown_instruction": "# Greater and Less Than\nIn the last level we saw a simple if statement. If statements are just simple questions. The answer to questions in if statements are either True or False. This is just another place where we see binary in computer science. If the expressoin inside the if statement is true than the code inside the brackets excutes. If its false then it won't execute.\n\nBelow is an if statement. Can you change the expression to be true?\n\n**Remember:** A good trick for remembering how greater than and less than work is to think of it like a gator with its mouth open. The gator always wants to eat the bigger number.\n\n# Do This\n\n* Fix the expression inside the if statement to be true so the message will print",
        "U3 - Basic Conditionals - 3_markdown_instruction": "Adding a variable\n\nvar x = 8;\nif( 3 < x){\n console.log(“Is this working?”)\n}\n\nits the same thing with a variable just the x stands for the 5!\n",
        "U3 - Basic Conditionals - 4_markdown_instruction": "User input\n\nvar x = prompt(“Enter number”)\nif( 3 < x){\n console.log(“Bigger”)\n}\n",
        "U3 - Basic Conditionals - 5_markdown_instruction": " Random number\nvar dice = randomNumber(1,6)\nif( 3 < dice){\n console.log(“Bigger”)\n}",
        "U3 - Canvas - appendToArray_markdown_instruction": "# Store Your Dots\n\nNow we're going to get into the core of the activity. We will be **creating a record of every dot your user draws**.\n\nTo do this, we will append *every* `event` parameter to an array as events are generated. When we store every mouse location in an array, we can make many interesting effects and redraw the image in different ways, by looping over the array. First let's just make sure we can capture them all.\n\n# Do This:\n\n* Create a new array outside the event handler function: `var eventList = []`.\n\n* In your event handler, before you call the `circle` command, use `appendItem` to add the `event` parameter to `eventList`.\n![](https://images.code.org/98f98c0895fafa87b8f6617e5b4629af-image-1448080702748.gif)\n\n* **Run the program** and draw some dots.\n\n* In the Debug Console type `console.log(eventList)` and inspect the contents. You should have a record of every event parameter used to draw a dot! (It might be a lot.)\n![](https://images.code.org/425bdde5f2d87b34c037b533600f19b4-image-1448080857409.gif)",
        "U3 - Canvas - clickToAdd_markdown_instruction": "# Click to Add Dots\n\nLoops are one way of quickly adding dots to our canvas, but now we're going to change our app so that the user can decide when and how many dots to add. The canvas is a UI element, so **you can attach event handlers to it just like you would any other element**. We're going to move the circle command inside of a click event handler so that the user can click to add individual dots.\n\n![](https://images.code.org/ecd25d3ff2bb50f0555ebd012e5c3b88-image-1448078111902.gif)\n\n# Do This:\n\n* **Add an `onEvent` handler**; set its ID to your canvas ID.\n* **Move the `circle` command out of your `for` loop and into your new event handler**.\n* **Remove the `for` loop from your program.**\n* **Run your program** and confirm that a single dot is added everytime a user clicks your canvas.\n\n![](https://images.code.org/0064f8ac406a9f09dc742c81d8510f16-image-1448244621879.gif)",
        "U3 - Canvas - delete_markdown_instruction": "# Delete Button\n\nWe are finally going to use those buttons! Each one will trigger an event handler that **processes the array `eventList` to create a visual effect** with the mouse data you have stored. **The first effect we are going to create is delete.**\n\nYou may want to provide your user with a way to start over with their drawing. In order to do this, you will need to *both* **clear the canvas** and **delete all items from `eventList`.**  The easiest way to delete everything from the list is to simply set the value of `eventList` to be a new empty list.\n\n# Do This:\n\n<img src=\"https://images.code.org/f8fca0d889ae9ddc3ac9b33ba27fadce-image-1448311933871.gif\" style=\"width: 200px; float: right\">\n\n* In Design Mode, set the styling and text of one button to indicate it's the \"delete\" or \"start over\" button. Give your button **a descriptive ID**.\n\n* **Add a click event handler** to your button.\n\n* Within the event handler call `clearCanvas`.\n\n* Set `eventList` to the empty array (i.e., `eventList = []`).\n\n**Test your program** to make sure that starting over works the way it should.  \n",
        "U3 - Canvas - draw at click point_markdown_instruction": "# Drawing Dots at Click\n\nCurrently the user can click to add dots, but they're drawn at random locations around the canvas. We're going to use information stored in the `event` parameter of the event handler function **to place dots wherever the user clicks the mouse on the canvas**.\n\nThe event parameter has two critical pieces of information we'll want, which are `event.offsetX` and `event.offsetY`. These hold **the location (relative to the top left corner of the canvas) that was clicked**. \n\n# Do This:\n\n<img src=\"https://images.code.org/1c6109cfc1b02c3ba737519d3f01d1b4-image-1448301532145.gif\" style=\"width: 200px; float: right\">\n\n* **Remove (or comment out) the `console.log` statement**.\n* Replace the `x` and `y` parameters of the `circle` command with `event.offsetX` and `event.offsetY`.\n* **Run your program** to confirm that dots are being drawn anywhere the user clicks the mouse.",
        "U3 - Canvas - freePlay_markdown_instruction": "# Create Your Own Effect!\n\nYou've just seen several ways that we can process our array `eventList` in order to create different effects. Now it's time to make your own! **Extend the functionality of one of the effects you just created, or create an entirely new one**. What else could you do with the information you've stored in your array? How else might you combine the programming tools you've developed?\n\n# Do This:\n\n* **Extend the functionality of one of the effects, or create an entirely new one of your own!**",
        "U3 - Canvas - movementFunction fix Orig_markdown_instruction": "# Fix the \"Original\" Button\n\nOur \"Original\" button is now slightly broken because the effect it renders doesn't match our new free-form drawing which takes the movement of the mouse into account - it just draws fixed-size cricles.\n\nLet's fix the \"Original\" button.\n\n# Do This:\n\nIn the event handler function for the \"Original\" button:\n\n* Change the value used for the radius from a fixed value to the same thing calculated for the free-form drawing. Since you wrote a function to do this calculation, it should be easy to call it from this code as well!\n* The **slight difference will be that you will be looping over the array of events.**  So the line of code that draws the circle might look like the one below. This line of code is certainly a mouthful, but it's basically the same as the line of code in your `mousemove` event handler; **it just references the event in the list instead.** <br><img src=\"https://images.code.org/dbb4cd9b98eba70aa2919a93544c1e03-image-1448314845862.40.21 PM.png\" style=\"width: 600px\">\n* **Test your program** to confirm that clicking the \"Original\" button creates the same effect that occurs when doing free-form drawing.\n\n![](https://images.code.org/4fcf033e87dc407d337941a7adc4766b-image-1448394246410.gif)",
        "U3 - Canvas - redrawRandom_markdown_instruction": "# Redraw Random - Part 1\n\nThe next effect we are going to create is **\"random.\"** We will be redrawing the image but with randomly sized dots.\n\nWe'll be doing this in two steps. For now, all you need to do is **change the first button in the row to have the proper styling and attach a click event handler to it**. **In addition, clear the canvas from inside the event handler** so we are ready to redraw our new image.  We don't want to delete all the items from the array though, as we will use them to redraw. Once you've done that, move on to the next exercise where we'll write the actual code in our event handler.\n\n# Do This:\n\n<img src=\"https://images.code.org/0116a787b989df18b077cb4657a5d379-image-1448312365660.58.05 PM.png\" style=\"width: 200px; float: right\">\n\n* In Design Mode, **pick a button to use for Random. Set the styling and text of the button**. The image below shows one possible option, but you can style it however you like.\n\n* Give your button **a descriptive ID**.\n\n* **Add a click event handler** to your button.\n\n* **Call `clearCanvas`** from inside the event handler so the canvas is ready for the redraw.",
        "U3 - Canvas - redrawRandom2_markdown_instruction": "# Redraw Random - Part 2\n\nNow we're ready to write the code for our \"Random\" effect. To do this, we will be clearing the canvas and then processing the array `eventList` to redraw all the dots with a random radius. \n\nYou already set up the clear canvas, so next we'll need to process our array in order to find out the event information for each dot. You'll need to create a `for` loop that iterates through every index in `eventList` (recall the `length` command). Within your loop, you will be drawing dots referencing items stored in the array. \n\nAs you write this code, remember that **you can treat an individual element of an array exactly like the kind of data it stores**. Inside a `for` loop, the event at index `i` can be accessed with the notation `eventList[i]` and the `offsetX` of that event can be accessed with `eventList[i].offsetX`. Again, you are essentially treating the array element as if it were the data it contains.\n\n![](https://images.code.org/8ce01658ab31ce5f05101e58e3413681-image-1448250618520.gif)\n\n# Do This:\n\n<img src=\"https://images.code.org/6e081911348f3c1b07d17f83bd402249-image-1448312722857.gif\" style=\"width: 200px; float: right\">\n\n(**NOTE:** Everything listed below is shown in code animation above.)\n\n**Inside the \"Random\" button event handler...**\n* **Add a `for` loop** that runs `i` from 0 up to `eventList.length` to process over the array.\n* **Add a `circle`** command inside your loop.\n* **Set the x and y parameters** of the `circle` to `eventList[i].offsetX` and `eventList[i].offsetY`, respectively.\n* **Set the `radius` parameter** to some `randomNumber`. Pick any range you like. You can always change it later.\n* **Test your program** by drawing a figure and then hitting your \"Randomize\" button. It should be the same drawing, but now with randomly sized dots!",
        "U3 - Canvas - shiftKey_markdown_instruction": "# Draw When a Key is Pressed\n\nThis app now lets the user draw, but they have no control of whether the pen is up or down. Let's give the user the ability to **choose when to put down the pen**. We won't even need to add a new event handler to our app! \n\nYou may have noticed that the **`event` parameter includes information about whether certain keys were pressed when the event fired**. They are stored in variables with names like `shiftKey` or `altKey` and are stored as boolean values (true / false). We are going to use the `shiftKey` variable to decide when we should draw circles. \n\n# Do This:\n<img src=\"https://images.code.org/1a4b8f12645e5e88dee96d5542933c84-image-1448248202626.gif\" style=\"float:right\">\n\n* **Add an `if` statement inside your event handler function** where the condition is based on the value stored in `event.shiftKey`: **If `shiftKey` is true, then draw the circle.** <img src=\"https://images.code.org/a542766e8e52fed5ca992f2434ace086-image-1448307484936.37.32 PM.png\" width=\"200\">\n\n* You might want to **decrease the radius of your circle** (for example to 5).\n\n* **Run the program and confirm that dots are only drawn when the shift key is pressed.**\n\t* The effect should be that the user can pick up and put down the pen to draw.\n\t* Hold the shift key down and move the mouse to draw.\n\t* Release the shift key to stop drawing.\n\n(**NOTE:** If you wish, use `console.log` to display the values in `event` again. You'll see `event.shiftKey` is one of the values stored.)\n",
        "U3 - Canvas - usingOffsetXY_markdown_instruction": "# The Event Parameter for Mouse Events\n\nWe'd like to change the app so that when the user clicks on the canvas we draw a circle right where they clicked. To do that, we need to learn more about the **parameter passed by our event handler function, which by default is called `event`**.\n\nRecall that when we wanted to know what key the user pressed on a `keyPress` event, we checked the value stored in `event.key`. **The event parameter actually stores a great deal more information about each event**. \n\nWhen using the mouse, the event parameter carries information like the location of the mouse, how fast it's moving, and some other things as well. \n\nLet's get acquainted with the event parameter and what we can find out about the mouse.\n\n# Do This:\n\n* Add a `console.log` command inside the function of your event handler. Use it to display the `event` parameter.\n* Run your program and click your canvas. **The full contents of the `event` parameter should be displayed in the console**. \n* **Which values do you think hold the x and y coordinates**?  What else is there?\n* We won't use all of these, but it's interesting to see just how much is available.\n* Once you have experimented a little, move to the next level.\n![](https://images.code.org/a6875e27019cb938a9576f0485648ca9-image-1448041792987.49.30 AM.png)\n",
        "U3 - Conditional Basics - 6_markdown_instruction": "# What happens after an *if* ?\n\nYou may have noticed that our flowchart for our game so far only does something if the condition is true. What happens after the `if` statement? Let's find out.\n\n<img src=\"https://images.code.org/90b7a527091704a6ab4612b9f84db305-image-1446234882661.png\" style=\"width: 200px\">\n\n# Do This:\n\n* **Add a `setText` after the `if` statement** to \"Nope. Guess again.\"\n\n<img src=\"https://images.code.org/f5c5de1b77a9caf16027e65ed24f91ec-image-1446234785600.gif\" style=\"width: 450px\">\n\n* **Run the program** a couple times to **look for a bug**. We will fix this on the next level.",
        "U3 - Conditionals - Combine AND OR Simple_markdown_instruction": "# Combining AND and OR\n\nYou can express more complex conditions by combining **AND** and **OR** in one statement.  Here is the example from the previous page which you can use as a reference. This statement will evaluate to **true** if the day is Tuesday or Thursday AND their age is 15 or 16.\n\n![](https://images.code.org/3f3aba7828abd88fdbd90eda60611bd3-image-1448062956405.06.36.png)\n\n#  Do This:\nWe've provided you with starting code that prompts the user to enter a **day** and their **age** and stores the result in variables.\n\n**Add an `if` statement that uses both AND and OR operators**\n\n  * The app should write \"Sleep in!\" if it's a weekend and the user is a teenager.\n  * Otherwise it should write \"Uh oh. Have to wake up.\"\n \n\nTry it out!\n",
        "U3 - Conditionals - Simple AND_markdown_instruction": "# AND Operator\n\n<img src=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24 PM.png\" style=\"width: 100px; float: right\">\n\nAgain you will see the JavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You can drag them out or simply type them.\n\nLet's now try out using an **AND** operator. As a reminder: **if both statements are true** then AND evaluates to **true**.  **If either (or both) are false** the AND operator will evaluate to **false**.\n\n<img src=\"https://images.code.org/4a461db916ded2acccfcdb9a75ef8838-image-1446483668310.png\" style=\"width: 250px; float: right\">\n\n# Do This:\nWe've provided you with starting code that prompts the user to enter their **age** and stores it in a variable.\n\n**Add an `if` statement that uses an AND operator (`&&`)**\n\n  * The app should write \"You are a teenager.\" if the age is between 13 and 19.\n  * Otherwise it should write \"You are not a teenager.\"\n",
        "U3 - Design Mode - Multi Screens 2_markdown_instruction": "# Switching Screens\n\nIn the last level you made two screens, a black one and a white one. However when you ran the app you probably noticed that you had no way to see the second screen. Let's fix that.\n\nIn order to switch between screens we have added a new command: `setScreen`. Read the documentation to figure out how this command works.\n\n<img src=\"https://images.code.org/152f45b312da467f0b553efc9fba20a7-image-1444354703453.gif\" style=\"width: 250px; float: right\">\n\n**Goal:** Make a 2 screen app which can switch back and forth between a black screen and a white screen using buttons.\n\n# Do This:\n\n* **Put a button on each screen**.  \n\n* **Set up event handlers** for each of your buttons. \n\n* **Use the `setScreen` block to switch screens** when the buttons are clicked.\n\n* Test out your app to make sure you can switch back and forth between the two screens.",
        "U3 - Design Mode - Multi Screens_markdown_instruction": "# Second Screen\n\nUp until now our apps have only been able to have one view. With Design Mode we can now make multiple screens and switch between them!\n\n**Goal:** Make a 2 screen app with a black screen and a white screen. \n\n<img src=\"https://images.code.org/e35a6f494cf6f0c57c66a1aef651cdb0-image-1444353622241.gif\" style=\"width: 250px; float: right\">\n\n# Do This:\n\nSwitch to Design Mode and **add a second screen**. There are two ways to add a second screen: \n\n* Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39 PM.png\" style=\"width: 50px\"> from the Design Toolbox. Check out the screen dropdown menu at the top right of the app window. You should now have two screens!  <img src=\"https://images.code.org/b48d978335701888b744702f25f11b28-image-1444353746012.17.07 PM.png\" style=\"width: 75px\"> \n* From the screen dropdown menu at the top right of the app window click *New Screen*. \n\nMake screen1 white and screen2 black. **Set the background color for a screen in the Properties tab**.  Make sure to rename the screens with appropriate IDs.",
        "U3 - Design Mode -Recreate Beyond Buttons_markdown_instruction": "# Improved Chaser Game\n\nNow lets improve the \"Chaser Game\".  This is where you get to use your creativity. Make it look nice!\n\nIn addition you will notice a new command in the toolbox: `playsound`! Read the documentation about how to add sounds.\n\n**Note:** Your code from before has been provided for you.\n\n# Do This:\n\n* **Create a Welcome Screen** that explains the rules of the game. Include a \"Start Game\" button.\n\n* Update the your code so that the **image jumps to a new location when it is clicked**. \n\n* **Play a sound** each time the image is clicked.\n\n* **Add a Game Over Screen** with a lose message and button to start over. The Start Over Button should direct back to the Welcome Screen.\n\n* **Make the user lose**, by sending them to the Game Over Screen, when the background is clicked.\n\n\n",
        "U3 - Design Mode 1_markdown_instruction": "# Design Mode\n\n<img src=\"https://images.code.org/ec23eb303d31fcd8274fac6c2c0f7b9a-image-1444330773327.32.34 AM.png\" style=\"width: 150px; float: right\">\n\nYou now have Design Mode!  Check out the new button at the top of your App window. Design Mode will allow you to easily add UI elements to your projects and style them the way you want!\n\n**Goal:** Add a large red button to your app using Design Mode.\n\n# Do This:\n\n* **Switch to Design Mode:** the switch appears above your app window on the left.\n\n* **Find <img src=\"https://images.code.org/278f146396c80c97d0b5d73f24d48aec-image-1444335461720.png\"> in the Design Toolbox** and drag out a button and resize it. \n\n* **Change the button text** to say \"Click Me\".\n\n* **Set the color for the button** to be red.\n\n<img src=\"https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif\" style=\"width: 500px; float: middle\">\n",
        "U3 - High Low - Dropdown_markdown_instruction": "# Dropdown\n\nOn the last level we used `promptNum` to get the user's guess. However, we had no way to limit them to the numbers we wanted. They could have typed 11 even though we told them not to. A better way to get input with a limited set of options is the dropdown. The <img src=\"https://images.code.org/3b21b4288a2a155d1e9a3c2cf3a5b09b-image-1446229368079.28.23 PM.png\" style=\"width: 75px\"> is in your Design Mode Toolbox. You can control the list of options users can choose and then use `getText` to get the chosen number.\n\nWe are going to need an event handler in order to do this. The event handler will detect when the user has changed the value of the dropdown. \n\n# Do This:\n\n* **Add a dropdown** for their guess instead of `promptNum`. Make sure to give it a good ID.\n\n<img src=\"https://images.code.org/fea164f6e53d1ce0c50981565e066d4c-image-1446229598357.gif\" style=\"width: 350px\">\n\n* Under properties **find the Options** and change it to the **numbers 1 to 10**\n\n<img src=\"https://images.code.org/0cfecbcdcfb95fc30876155ec6a3a021-image-1446229593687.gif\" style=\"width: 250px\">\n\n* Add an event handler to detect the `change` event on your dropdown.<br><br>\n<img src=\"https://images.code.org/48cffda5b7ff3a446116a39b4dbcbe8c-image-1446232308751.gif\" style=\"width: 150px; float: right\">\n* Move your `if` statement inside the event handler so it will check each time the dropdown is changed.<br><br>\n* When the dropdown is changed **use `getText` to find out the user's guess**. Save the guess using a variable. **Don't forget about scope!**<br><br>\n* Test your app -- it should work like the demo.",
        "U3 - High Low - Else if_markdown_instruction": "# *else-if*\n\nLet's help the user even more by telling them if they were right or if their guess was high or low. There are **only 3 possible cases:** \n* They were right.\n* Their guess was higher than the number.\n* Their guess was lower than the number. \n\nTherefore, we can use a conditional set with one `if`, one `else-if`, and one `else` to implement this. Check out the flowchart below to see the logic. In order to check if something is high remember you can use the greater than `>` symbol.\n\n**Remember:**  You can create an `else-if` statement by hitting the <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12 PM.png\" style=\"width: 40px\"> at the bottom of an `if` statement. The first <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12 PM.png\" style=\"width: 40px\"> will add an `else`, the second will add an `else-if`.\n\n\n# Do This:\n\n* **Add an `else-if` statement to accommodate the 3 conditions.**\n\n* **Update the conditions** using `<`, `>`, and `==` to tell the user if their guess was correct, high, or low.\n\n* **Test out the program** to make sure your updates worked.\n\n<img src=\"https://images.code.org/f7e483414dfe1d4585841e653e44d8b0-image-1446169181724.png\" style=\"width: 100%\">",
        "U3 - High Low - Else_markdown_instruction": "# *else*\n\n<img src=\"https://images.code.org/b7942d778a54465ad6f9f19fbab8d1ef-image-1446237289306.34.23 PM.png\" style=\"width: 150px; float: right\">\n\nLet's add an `else` statement so we can tell the user when they are right and when they are wrong.\n\n**Note:**  You can create an `else` statement by hitting the <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12 PM.png\" style=\"width: 40px\"> at the bottom of an `if` statement.  There is also an `if-else` block in the toolbox. \n\n\n# Do This:\n\n* **Add an `else` statement**\n\n* **Move your `setText` inside the `else` statement.** So it should say \"Nope that's not it. Guess again.\" when the user does not guess the secret number.",
        "U3 - High Low - If_markdown_instruction": "# *if* Statement\n\n<img src=\"https://images.code.org/040c8364e3795252194b816623e949e5-image-1446227663554.54.03 PM.png\" style=\"width: 100px; float: right\">\n\nThe boolean expression we tested on the last level allows us to make decisions. In order to make these decisions we need to use something called a conditional. **Conditionals check if a boolean expression is true and then will execute the code inside of the `if` statement.** \n\n<img src=\"https://images.code.org/84123a7c317c63d8876b6b56086d717e-image-1446228290588.png\" style=\"width: 150px; float: right\">\n\nOver the number couple levels we are going to be creating a **Guess My Number game**. The starter code uses `promptNum` to ask the user for a number from 1 to 10. The `if` statement checks if the user guess is equal to the secret number.  Right now nothing happens when they guess the right number. Can you fix that?\n\n# Do This:\n\n* Read the code to identify the boolean expression.\n* Add a text label to the screen. Have it start out with \"Guess my secret number!\"\n* **Set the text label to say \"You got it right!\" from inside the `if` statement**. This will tell them they get it right only when that condition is true!\n* **Test your code out** to make sure it works.\n\n<img src=\"https://images.code.org/2f3487ec7a8d7cec1605f3da830c83f8-image-1446227512726.gif\" style=\"width: 350px\">",
        "U3 - Keys - Demo App_markdown_instruction": "# Making our App an Image Scroller\n\nOver the course of this lesson we are going to be working towards improving our \"My Favorite Things\" app to add some new features. Our improved app will be able to:\n\n* Respond to **key events**.\n* **Display images** by storing their URLs.\n\nWe'll call this new kind of app an **image scroller** but feel free to call it anything you like.\n\n# Do This:\n\n* Close these instructions.\n* **Experiment with the improved \"My Favorite Things\" app** to understand the new features we'll be adding.  \n* Make sure you try clicking the **left and right arrow keys!**\n\nOnce you think you've experimented enough, continue on to the next level.",
        "U3 - Keys - Final Image Scroller_markdown_instruction": "# Final Image Scroller\n\nYou're now ready to add key event functionality to your app! As you are doing so, keep an eye out for places where you need to **refactor** old code in order to prevent redundancy. **Create functions** that carry out repeated tasks and make other changes to keep your code **readable and consistent**. \n\nIf you want a reminder of how key events work, you can always go back to the example from earlier in this lesson.  You will need to add `if` statements to check for which keys were pressed, just as before.\n\n# Do This:\n\n* Add the ability to respond to **key events** to your app.\n\n* **Refactor your old code** to remove redundant portions.\n\n* Keeping adding to your program. What other features do you want to include?",
        "U3 - Keys - Functions_markdown_instruction": "# Refactoring Code\n\nOn the last level, we copied a few lines of code to a different part of our program. **Hopefully warning bells went off in your head!** Any time you are copying portions of code from one area of your program to another, it's a good indication that you should write a function to capture that behavior in one place. \n\nWhen you add new features to your code **you will often create redundancies**. To keep your code readable and consistent, you may need to rewrite old pieces of code. This process of restructuring existing code without changing its external behavior is called **refactoring**. It is an important process when developing software that improves code readability and reduces complexity. As a result, code is much easier to maintain.\n\n# Do This:\n\n* **Create a function called `doUpArrow`**. \n* Move the code from the `upArrow` event handler to the function.\n* **Call `doUpArrow`** from both your button and key event handlers. (The animation below shows the steps above.)\n* Repeat the same process for the down arrow / button by creating a function called `doDownArrow`.\n* Once you have **removed these redundancies from your code** test your app to make sure it still works!\n\n![](https://images.code.org/f47a98a8c9ca169848c682b3e61293cd-image-1448300634062.gif)",
        "U3 - Keys - Multiple Keys_markdown_instruction": "# Multiple Keys\n\nIf you want your program to respond differently to a couple different keys, you will need to use chained conditional statements (`if` and `else-if`). \n\nLet's set up the program to **play a different sound for the down key.**\n\n# Do This:\n**We've added another sound** to the app, but it's just sitting at the top of the code.\n\n* Add an `else-if` statement to check if the **down arrow** was pressed.\n\n<img src=\"https://images.code.org/996914e436cca050f62d5b851899eda9-image-1447215275417.gif\" style=\"width: 350px\">\n\n* Move the `playSound` command from the top of the program inside the `else-if`. (Notice that in the example, we switch to block mode to move this line because it's easier to move blocks around that way. You can just copy/paste the text too.)\n\n<img src=\"https://images.code.org/42b2df84b4cd98267068592218ac96ed-image-1447215267891.gif\" style=\"width: 350px\">\n\n* **Test the program:** it should play one sound when the **up** arrow is pressed and a different sound if the **down** arrow is pressed.  It shouldn't make any sound if any other keys are pressed. ",
        "U3 - Loops -  9 Part 2_markdown_instruction": "# Boolean Operators in While Loops Part 2\n\nWe just saw that you can create more complex boolean expressions for our while loops just like our for loops. Lets try something a little more complex. \n\nRight now this code rolls two dice as long as either one of them is less than 3.   Modify the condition so that both dice have to be greater than 3 for the loop to stop.\n\n# Do This\n\n* **Change the boolean expression** for the while loop so that it will roll until both dice are greater than 3. **Hint:** A NOT( `!`) operator might be helpful for this one.",
        "U3 - Loops - 1_markdown_instruction": "# *while* Loops\n\n<img src=\"https://images.code.org/bfb82e4caecc3ad1338177e05064ef72-image-1446669721477.41.28 PM.png\" style=\"width: 100px; float: right\">\n\n **The `while` loop uses a boolean condition to repeatedly run a block of code.**  It checks the expression, and if it is true it runs the block of code contained within it. This process of checking the condition and running the block of code is repeated as long as the boolean condition remains true. **Once the boolean expression becomes false it will stop.**\n\nWe are going to start exploring a `while` loop by **modifying the condition on which a `while` loop runs and using `console.log` to ensure it is correctly evaluating its condition**.\n\n# Do This:\n\n* **Starter code** is provided which creates a `while` loop that repeatedly moves the turtle around the screen.\n* **Add a `console.log` command** inside the loop after `num` is assigned a random number. This way you can see the value the loop is based on.\n![](https://images.code.org/1da444fd5c6533ad1cc0de3c593bf92d-image-1446825127341.gif)\n* **Run the program a couple times** and look at the results.\n* **Change the condition for the `while` loop** to check if the variable **`num` is less than 90**. Your output might look like the example below.\n\n![](https://images.code.org/97df98c23c0c03a7ce480108a92627a5-image-1448296906193.41.17 AM.png)",
        "U3 - Loops - 10_markdown_instruction": "# Writing a Loop From English\n\nAlright it’s your turn. Can you translate the English into code? This problem also involves an \"until loop\" problem.\n# Do This:\n\nTake this statement in English and translate it into code: \n\n**“Write a program that simulates the rolling of two dice. Keep rolling the dice UNTIL the sum of the dice is either a 7 OR an 11.\"**  Your program should display the results of each roll.  \n\n**NOTE**: this one is a *little* tricky.  Hint: In English we sometimes say \"or\" when in cold hard logic we mean \"and\".\n\nHere is a sample output:\n\n![](https://images.code.org/706279a3c167d8c76068a7ded5146eed-image-1456434365077.png)",
        "U3 - Loops - 11_markdown_instruction": "# Debugging: Complex Logic\n\nIn this challenge you need to find and fix a bug in a program that simulates rolling one die.  \n\nThe given code accidentally loops infinitely, so something must be wrong with the condition. Can you figure out how to fix it?\n\n# Do This:\n\n* **Fix the condition** so that it keeps rolling the die as long as the value is **not a 2 or a 3.**\n\n* **Hint:** Think about other ways you can express this idea in English. \n\n",
        "U3 - Loops - 12_markdown_instruction": "# Repeat Specific Number of Times\n\nInstead of writing code that makes the loop run a random number of times, we can control the `while` loop by changing the variable used in the boolean expression differently. Let’s try just printing a string 5 times.\n\n# Do This:\n\n* **Starter Code:** Right now the code prints a string \"Hi\" twice.\n* **Change the code** so that it prints the string \"Hi\" 5 times.\n* **Notice** how `count` is being re-assigned each time through the loop.",
        "U3 - Loops - 14_markdown_instruction": "# Defensive Loop Conditions\n\nTake a look at the starting code. Instead of counting by 3's we had decided to count by 4's. \n\nBut this will run us into a problem. Can you see why?\n\nWe wanted to stop counting at 30, but when you count by 4 you will actually never hit 30. It would go... 24, 28, 32, 36...  What we really want to do is stop when the number is **greater than 30**. This is an important defensive programming strategy. Make the condition catch more cases than you think you need so that if for some reason something does not go exactly as you planned it will hit the stop condition and not go infinitely.\n\n\n# Do This:\n\n* **Change the loop condition** to prevent the infinite loop and stop counting once the count is past 30.",
        "U3 - Loops - 16_markdown_instruction": "# Changing Loop Conditions\n\nWe want to find out how many times you have to roll to get the sum of 7 100 times. In order to do this we still need to keep track of the number of times we get a sum of 7 as well as the number of times we have rolled so far. The code will be similar to what we had before.\n\n# Do This\n\n* Update the while loop condition to **stop when the sum of 7 has come up 100 times**.\n\n* Update the code to **print the number of rolls it took to get the sum of 7 100 times**.",
        "U3 - Loops - 2_markdown_instruction": "# Infinite *while* Loops\n\n`while` loops run until their condition becomes false, which raises an interesting question.  **What happens if the condition never becomes false**? In these cases the program enters what is called an **infinite loop** over the commands in the `while` loop, and it never reaches the rest of your program. **We normally avoid infinite loops in our programs**, but let's try it out to see what happens.\n\n# Do This:\n\n* **Starter code** is provided which creates a `while` loop to move the turtle around the screen.\n* **Change the `while` loop condition to something that will always be true.** The easiest way to do this is to change 50 to be a number that randomNumber will never generate such as 200. \n* **Run the program.** Notice that it will never stop running. You may even get an error from your browser.\n* **Hit reset to stop it.** Your computer may actually stop running as you expect if you let an infinite loop run for too long. **It's possible you may even need to close the browser window and reload the page. If you hit reset early enough you can usually avoid this problem.**\n* **Find a condition using `<` or `>` that will also cause an infinite loop.**",
        "U3 - Loops - 4_markdown_instruction": "# Debug Commands\n\n<img src=\"https://images.code.org/c6322845b96b70c9083a6c62736048e5-image-1446739268136.00.34 AM.png\" style=\"width: 200px; float: right\">\n\nCheck out the new **Debug Commands toolbox** that has appeared next to the Debug Console! These powerful tools allow us to **pause a program at a certain point** while it’s running and then execute lines one at a time. \n\nUsing these tools we can investigate the state of variables and other elements of the program at any point, mid-execution. This makes it much easier to see what’s happening while the programming is actually running!\n\nIn order to use the debug commands, you first have to indicate which line you want the program to pause at.  This is called adding a “breakpoint” (see animation below).\n\n# Do This:\n\n* **Add a breakpoint** on the line where the `while` loop starts. (**Just click the line number.**)\n* **Use the <img src=\"https://images.code.org/bd8f1a67242e64e6b3740eac79f881e8-image-1446748421345.33.09 PM.png\" style=\"width: 75px\"> button** to execute each line one at a time.\n* Each time you hit the breakpoint, **use the console to check value of `num`**. \n* **NOTE:** If you hit <img src=\"https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48 AM.png\" style=\"width: 75px\"> it will \"continue\" executing the program normally, unless of course it hits another breakpoint. \n\n![](https://images.code.org/68f8e185914c8cc127aa9573ae37f687-image-1446835628580.gif)",
        "U3 - Loops - 5_markdown_instruction": "# Update Condition\n\nIn order for a `while` loop to stop at some point, the code inside the loop **must change something about the state of the program** - usually the value of a variable - so that eventually the boolean expression becomes false.  Otherwise you'd have an infinite loop!\n\n# Do This:\n**Starter Code:** The starter code runs an infinite loop. \n* **Run the code** to see the problem in action. Remember to hit the reset button to stop the infinite loop.\n* **Add code inside the `while` loop** which will **update the variable `num` so that the condition will eventually become false.**\n* **TIP:** you can use the debugging tools if you think they would be helpful.",
        "U3 - Loops - 6_markdown_instruction": "# Starting Condition\n\nWe have seen that loops can run infinitely. On the last level we saw that there is also the **chance that the loop never runs at all!** If the condition of the `while` loop starts out false then the loop will never run.\n\nWe fixed this problem in the last exercise by displaying the value of `num` in two places: before the loop and in the loop. Duplicating code is generally a bad strategy, so the question is: can we be a little clever and get into the loop without missing any values?  The answer is yes.\n\n**The solution** is to initialize the values used in our boolean expression so that we are **certain** it will evaluate to true the first time the loop checks it.  **For example, if your loop condition is: `while (num != 6)` you could initialize `num` to anything other than 6 and you'd know that you get into the loop**.  \n\nIf you use this technique though...\n1. You need to make sure you set the value of `num` right away inside the loop.\n2. You probably want to use a nonsense value like -1, so that if you ever see that displayed it will be obvious something is wrong and be easier to debug.\n\n# Do This:\n\n* **Starter code** is provided which creates a `while` loop that never runs.\n* **Run the program** once to see that the loop is never entered.\n* **Fix** the problem by changing the initial value of `num` to a nonsense value such as -1.",
        "U3 - Loops - 8_markdown_instruction": "# Printing Before the Loop Starts\n\nSometimes our code will be doing the right thing but we won't be able to tell because of the way we are printing values. We need to make sure we print all the values we are interested in. \n\nThis program *should* write all the values of `num` to the screen as it runs; however it misses one - the first one generated.  \n\n# Do This:\n\n* **Run the program** a few times and notice that sometimes it just prints \"Done.\" and nothing else, even though a number was generated. The first value of `num` never gets displayed.\n* **Add a `write` statement** before the loop to print the first number. \n* **Hint:** Look at the two times `num` is assigned a value. Which one isn't being displayed? ",
        "U3 - Loops - 9_markdown_instruction": "# Boolean Operators in *while* Loops\n\nWe can create compound boolean expressions to control our `while` loops just like our `if` statements. Let's try using boolean operators in our `while` loop condition.\n\n# Do This:\n\n* Right now this code rolls two dice as long as either one of them is less than 3.  **Modify the condition so that it keeps rolling as long as *both* are less than 3.**\n\n* **HINT:** To say that both dice are less than 3 the boolean expression must say: if die1 less-than 3 AND die2 less-than 3...\n",
        "U3 - Loops - Typing in Console_markdown_instruction": "# Debug Console: Variable Values\n\nUp until now, if we wanted to find out the value of a variable at some point in the execution of a program, we've used `console.log`. That is still going to be a great strategy but **the Debug Console can do even more for us!**\n\n**Check this out:** We can check the value of a variable in real time (as our program executes) by typing its name into the prompt within the Debug Console and hitting \"enter\". **This is another powerful tool for debugging your programs.** \n\n![](https://images.code.org/7e7ff7aa041814cfcd69a1c9a028c439-image-1446826780896.gif)\n\n# Do This:\n\n* **Run the program.**\n\n* Use the Debug Console to **check the ending value of `num`**. You can do this by typing num in the Debug Console and hitting enter!",
        "U3 - Loops - minus = operator_markdown_instruction": "# Try Out the *-=* Operator\n\nThe `-=` operator works almost identically to `+=`, but instead it subtracts the value provided from the variable. Let's use this operator to **create a loop that counts down from 30 by 3's**.\n\n# Do This:\n\n* **Change the code to use `-=`** to count from *down* from 30 to 0 by 3's.",
        "U3 - Loops - plus and minus = operator_markdown_instruction": "# Introducing *+=* and *-=* Operators\n\nSometimes you want to add or subtract something *other than 1* from the current value of a variable. If you wanted to add or subtract 3 for example, such as: `count = count + 3` or `count = count - 3`, `++` and `--` wouldn’t help. \n\nIt turns out this is pretty common as well so there is actually a shorthand version of `count = count + 3`. \n\n**Introducing `+=`  and `-=`**!\n\nWe can use the `+=` or `-=` operator to add or subtract any value we want to the current value of a variable. \n\nSo, the shorthand versions of `count = count + 3` and `count = count - 3` would be:\n  * `count += 3` \n  * `count -= 3`\n\n**Notice** that these 3 statements: `count = count + 1`,  `count++`, and `count += 1` all do **exactly** the same thing!\n\nWhich one you use as a programmer is your choice, and in the future you can use either version, but try out the new operator here.\n\n# Do This:\n\n* **Change the code to use `count += 3`** instead of `count = count + 3` so the program will still count up by 3. (You'll need to be in text mode to do this.) \n\n(You'll get to try out `-=` on the next level.)",
        "U3 - Loops And Arrays - Divid by 2_markdown_instruction": "# Divide by 2\n\nIn the last exercise, you updated every element in an array using a `for` loop. Let's get a little bit more practice with the pattern you used in the last exercise, this time creating the loop yourself.\n\n# Do This:\n**Starter code** is provided which creates an array of random values.\n\n* Create a `for` loop that **iterates over every index in the array**.\n\n* Within your loop, add code that **divides each value in the array by 2**.\n\n* Use the provided `console.log` statements to **confirm your program runs as expected**. Below is an example of the expected outcome.\n![](https://images.code.org/04b09b795c30313c67b2242f1773b2f6-image-1447795598583.26.21 PM.png)",
        "U3 - Loops And Arrays - Find Max_markdown_instruction": "# Reusing a function pattern: find maximum\n\nLet's use this pattern one more time. This time we'll provide you less guidance, but you can go back and look at old exercise if you like. You'll need to **write a function that finds the maximum value in an array**.\n\n**Basic Function Pattern**\n* Create a **function that accepts an array** as input\n* **Create a \"flag\" variable** and set its default value before looping through the array\n* Loop through your array with a `for` loop that **visits every index in the array**\n* **Update your flag** as necessary with every iteration of your loop\n* **Display your flag** at the end of the loop.\n\n# Do This\n\n* **Starter code** has been provided which outlines and calls `findMaxVal` with different inputs. Your job will be to finish writing the function.\n* **Finish writing the function** so that it finds the maximum value in the array. Use the pattern outlined above to guide you, or go back to previous exercise if you need.\n* **Run the code** to ensure it is working as you intend.\n\n![](https://images.code.org/6abb5efba9b4d179db8aa0d6df471665-image-1447878763623.32.23 PM.png)",
        "U3 - Loops And Arrays - Functions that Return Value_markdown_instruction": "# Using functions that return values\n\nWe have used functions that return values many times before, but in this exercise you will see how they are actually created by using the `return` command. The function `minVal` accepts two numbers as input and returns the minimum of the two as output. You can call this function just like any other, and **because it returns a number you can treat the function call as if it were a number**\n\n# Do This\n\n* **Starter code** has been provided which creates the function `findMin` and generates two random values.\n* **Inspect the code of `findMin` to understand the logic of this function**.\n* **Call the function with the values provided** and ensure the minimum value is returned. You should treat the function call **as if it were a number** to generate the output shown below.\n\n![](https://images.code.org/32ddaacdc9c0f820b9b58514b55dcbba-image-1447946068945.gif)",
        "U3 - Loops And Arrays - General Search Param_markdown_instruction": "# General Search\n\nIn order to make a general search function, we should be able to **search for any value, not just 5**.  We can do this by making the value to search for a parameter as well.\n\n# Do This:\n\n* **Add a second parameter** to your `search` function to represent the item to search for. This example uses the name `searchValue`.\n\n* **Update the code inside the function to check for `searchValue` instead of 5.** \n\n* **Call your search function** to search for different values inside of each array.\n\n* The `console.log` statement **is now inaccurate**. Change it to say \"Array has searchValue: \" followed by the value in flag.\n\n(These steps are shown in the code animation below.)\n\n![](https://images.code.org/b71a0bd1cf725d58ae76836a6422ebeb-image-1447695946760.gif)",
        "U3 - Loops And Arrays - Make it a Function - add list parameter_markdown_instruction": "# Generalize *search* by Making It Into a Function - Part 2\n\nRight now, our function just searches for a 5 in a global array called `testArray`.  We would like to be able to **use this function to search through any array**, so we will be adding a parameter to allow us to specify which array should be searched.\n\n# Do This:\n\n* **Add a parameter to the `search` function called `list`**.\n* **Modify the code inside the function** so that it loops over `list` (the parameter) instead of `testArray` (the global variable).\n* **Call your function** with each of the arrays provided at the top of the program.\n\n(These steps are shown in the code animation below.)\n\n![](https://images.code.org/af4cf7bd95c09f3e8e3548a3383c4a4e-image-1447693121377.gif)",
        "U3 - Loops And Arrays - Make it a Function_markdown_instruction": "# Generalize *search* by Making It Into a Function\n\nYou've just written code to search for a value in a list!  If we could generalize this behavior, it might be useful to us in the future - it's probably something that we want to do over and over again.  \n\nOver the next few levels, we'll build up a very useful, general function for searching for *any* value in *any* list.  But we'll do it one step at a time...\n\n# Do This:\n\n**Note:** We've provided **new starter code** that implements the pseudocode from the last exercise. It also **creates two more arrays** that we'll be using later for testing.  For this level just worry about `testArray`. \n\n* **Run the starter** code to verify that it works correctly.\n* **Create a new function**. Name the function `search`.\n* **Move the code that checks for a 5 inside the function.** **Note:** You must move the boolean variable inside the function as well, or it won't reset each time you call the function!\n* **Call the function** to make sure your code still works.  The actual behavior will be the same as when you ran it the first time.  The difference now is that you're calling a function to do it.\n\n(Steps are shown in code animation below.)\n\n![](https://images.code.org/dfad49ac35cd605410c52828716b712c-image-1447631609779.gif)",
        "U3 - Loops And Arrays - Multiple Returns_markdown_instruction": "# Multiple Returns\n\nYou can actually include multiple return statements in a function.  Our function for findMax could be written like this:\n\n<img src=\"https://images.code.org/bfc70bf49e97f7aa9354ba867076284c-image-1447380154324.02.17 PM.png\" style=\"width: 270px; float:right\">\n\nThis functions returns a value **as soon as it knows the result of the boolean condition**. As a result **some lines of code may never run**. This can lead to some very devious errors in which statements effectively become unreachable because of small mistakes in logic. Having many return statements within a larger function can make it very difficult to understand how a function works. Some tips to avoid these issues are below.\n\n**Best practices when writing Functions with returns:** \n\n* Calculate whatever you need\n* Store it in a variable\n* Return that variable at the end of the function\n\n**Note:** You may sometimes break the process described above,  but for now this is a way to help you think about what your code needs to do.\n\n\n# Do This\n\n* Check out the example of a function that accepts two numbers and returns the larger the two.\n\n* **Call the function with a couple different sets of numbers. `console.log` the results.**",
        "U3 - Loops And Arrays - Print Array_markdown_instruction": "# Print an Array with a *for* Loop\n\nAs you know, we can use variables as indexes in an array.  We can take advantage of this fact to create a `for` **loop which visits every index in an array**.\n\n![](https://images.code.org/5aeb9986535424b1d737b8221685196f-image-1447446416081.26.01 PM.png)\n\nIn this `for` loop, the `i` eventually gets set to every possible index in the array. You are going to use a loop of this kind to display all the values in an array.\n\n# Do This:\n**Starter code** is provided that adds several random values to an array.\n\n* Create a `for` loop that uses the syntax shown below (and above) to **iterate through every index in the array**.\n\t![](https://images.code.org/930b40b3e3f204605a0fd27fee9d8b8f-image-1447346008842.gif)\n    \n* Use `console.log` to **display the contents of the array at each index**.\n\t![](https://images.code.org/43431613ea0c045411499dd0e68e7feb-image-1447345996258.gif)\n    \n* Run the program to **confirm it is displaying all the values**.\n",
        "U3 - Loops And Arrays - Printing Single True_markdown_instruction": "# Print a Single True/False Value\n\nSometimes we don't care about the count and just want to know if the array contains a 5 or not. **Let's try to display a single true/false indicating whether the list contains a 5.** There are two cases to consider: \n\n1. The list **does not contain any 5's**; you need to display **\"false\"**.  \n2. The list **contains at least one 5**; you need to display **\"true\"**.\n\n**HINT:** one way to do this is to reference your counter variable `fiveCount` after the array has been processed.\n\n# Do This:\n**We've pulled your code from the previous level so you can continue to add to it**.\n\n* Add a **`console.log` statement to display a single \"true\" or \"false\"** indicating whether there is a 5 anywhere in the array.\n\n| Example output 1: One or more 5's | Example output 2: No 5's |\n| --- | --- |\n|![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31 PM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46 PM.png)|",
        "U3 - Loops And Arrays - Return Index_markdown_instruction": "# Search with Return Value of Index\n\nThe search function you were working on before is back. We are going to try a new challenge. **Instead of returning true or false, return the index at which the value was found.**  \n\n**What if the value doesn't exist?** You should return -1.  The reason for returning -1 is that when you write a function that returns a value it's expected that it will return one type of data.  So if we're returning a number for the index, we should also return a number that indicates it wasn't found. Since -1 (or any negative number) is not a possible index for an array, we can use -1 to indicate that whatever we're looking for wasn't found.\n\n# Do This\n\n* **Update the function search(list, val) to return the index at which the value was found.** If the value is not found return -1. (**Note:** If the value appears more than once you can return any of the indexes at which it appears.)",
        "U3 - Loops And Arrays - Return Value_markdown_instruction": "# Use a function that returns a value in an app\n\nWe create functions to **contain blocks of code that will be used multiple times within our program**. The same is true with functions that return values. Let's see an example of how we might use one of the functions we've written.\n\nThis exercise comes with starter code that creates a **simple turtle driver app**. The x and y location of the turtle are stored in the variables `xloc` and `yloc`. An event handler is used to update these values when the arrow keys are pressed, and then a separate `updateTurtle` function is called to draw the turtle on the screen.\n\nCurrently the turtle can drive off the screen. If we are clever about how we use our `constrain` function, however, we can prevent this from happening.\n\n# Do This\n\n* **Starter code** is provided which allows the turtle to move. Additionally a **working version of `constrain`** is provided.\n* **Use the `constrain` function** within the `updateTurtle` function to prevent the values of `xloc` and `yloc` from going outside the size of the screen. Recall the screen is **320 by 450 pixels**.\n* **Run your app** and confirm the turtle cannot leave the screen.",
        "U3 - Loops And Arrays - Search and Remove_markdown_instruction": "# Search and Remove\n\nWhen search returns the index of the item we can use that information to do some useful things. One thing we can do is  search for a value and remove it. \n\n# Do This\n\n* Use search to **find the index of 5.**\n\n* **Save the index in a variable.**\n\n* **Remove the saved item at the index as long as the value is not -1.**",
        "U3 - Loops And Arrays - useFindMin_markdown_instruction": "# Using functions that return values\n\nWe have used functions that return values many times before, but in this exercise you will see how they are actually created by using the `return` command. The function `minVal` accepts two numbers as input and returns the minimum of the two as output. You can call this function just like any other, and **because it returns a number you can treat the function call as if it were a number**\n\n# Do This\n\n* **Starter code** has been provided which creates the function `findMin` and generates two random values.\n* **Inspect the code of `findMin` to understand the logic of this function**.\n* **Call the function with the values provided** and ensure the minimum value is returned. You should treat the function call **as if it were a number** to generate the output shown below.\n\n![](https://images.code.org/32ddaacdc9c0f820b9b58514b55dcbba-image-1447946068945.gif)",
        "U3 - Practice Create Performance Task_markdown_instruction": "# Practice Create Performance Task\n\nYou've finally made it to the end of the Programming Unit! We will continue some programming in the next unit, but for now we are going to use all the new concepts you have learn to create something of your own design! \n\n# Do This:\n\n* **Read the Project Overview** to understand the entire project.\n* **Follow the Project Planning Guide**.\n* **Implement your final program in this level**.",
        "U3 - Read Record - 1.2_markdown_instruction": "# Callback Functions\n\nIn the last exercise you **read records from a remote database back into your app**. There are a few steps that happened in that process.\n\n* Your program called `readRecords`, **sending a request for data across the Internet** to your remote database.\n* The database collects the requested records, places them in an array of objects, and **sends that array back across the Internet**.\n* Your program **receives the array of objects**.\n* Your program **calls the callback function of the `readRecords` command**, placing that array **in the `records` parameter** of that callback function.\n\nThere's actually a **delay between when your program calls `readRecords` and when the callback function is called**. We can even see this delay in App Lab.\n\n# Do This\n\n**Your code from the previous exercise** is provided.\n\n* **The speed on App Lab has been set to its slowest setting**. This won't change the way your program runs, but it makes it easier to see the order in which commands are run.\n* **After your `readRecords` command place another `console.log` statement**\n* **Run the program** and pay close attention to **the order in which the commands run**. You can **check the Debug Console** to see which `console.log` command ran first.",
        "U3 - Read Record - 1.5_markdown_instruction": "# Data Commands are Slow\n\nTypically we think of programs running one command after the other in the order they are written. This makes it easy to keep track of what is happening in your program. Since commands running locally on your computer happen **essentially instantaneously**, you never get \"stuck\" waiting for one command to finish before running the next one.\n\n**Data commands take a long time to run**. Once your computer sends a request to your database it needs to wait for the response to be sent across the Internet. We're going to see **how much slower the data commands are**.\n\nThe `getTime()` block returns the current time on your computer. It is stored as a number which counts **how many milliseconds have passed since January 1st, 1970**. By repeatedly calling this command you can determine how long different commands take to run.\n\n# Do This\n\n**Starter code has been provided** that displays the current time at multiple points in your program\n\n* Run the program. Notice that the same information from the table is printed in the console.",
        "U3 - Read Record - 1_markdown_instruction": "# Reading Records\n\nYou have learned how `createRecord` can be used to create permanent copies of your data in a remote database. This allows your app to save information it has collected across multiple runs of your program. **In order to use this data you'll need a way to read it out of your database and back into your app**.\n\n<img src=\"https://images.code.org/ac5fb29d4935df7b5825f4cabd6b89e8-image-1449502640243.35.37 AM.png\" style=\"width: 350px; float: right\">\n\nCheck out the new command `readRecords`. This command **requests all of the records stored in one of the tables of your database**. Follow the instructions below to try running this command before moving on to learn more about how it works.\n\nWhen the database has collected all the records it responds by the sending an array of objects back to your program, one object for every record in the table. Your system will then **call the callback function of the `readRecords` command, placing this array of objects in the `records` parameter**.\n\n# Do This\n\n**Your database already contains data** in a table named 'myTable'\n\n* **Open the Data Viewer** to look at the data in 'myTable'\n* **Add a `readRecords` command** to your app.\n* **Add a `console.log` command** inside the callback function of `readRecords` to **display the `records`**\n* Run the program and **confirm that the same information you saw in the Data Viewer is displayed in the console**.\n\n![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)",
        "U3 - Read Record - 2_markdown_instruction": "# Changing the Table\n\nThe first parameter in the `readRecords` command is the name of the table you wish to read records from.\n\n![](https://images.code.org/9f809d3a5e5c43871dd237dbc0ca66dc-image-1449515754521.png)\n\nYou have been using the name \"myTable\", but just like variables and IDs **your tables should be given descriptive and meaningful names**.\n\n# Do This\n\n**Starter code is provided** which calls `readRecords` for a table that does not exist. \n**The database already includes a table**\n\n* Open the Data Viewer to **find the name of the new tables**\n* **Change the table parameter** to pull the records from the new table\n* Run the program.  Your output should look like below.\n\n![](https://images.code.org/adaca79af4c7b521674b58f721eed0c0-image-1449516148398.21.43 PM.png)",
        "U3 - Read Record - 4.1_markdown_instruction": "# Using Your Records\n\nThe `records` parameter in your callback function is **an array of objects**, just like you have used before in this class. You can use reference **the indexes of the array and properties of each object** just like before. Just remember, **you only can use the `records` parameter** within the callback function, and **the callback function is not called immediately**.\n\n# Do This\n\n**Starter code is provided** which reads records from a table called \"myMovies\"\n\n* **Add code** inside the callback function of `readRecords` that only displays the first movie in the array\n* **Run the program** and confirm that you are displaying the correct movie.\n\n![](https://images.code.org/827a410730369edf42ca7e21f0fa6b01-image-1449517957324.51.38 PM.png)",
        "U3 - Read Record - 4_markdown_instruction": "# Reading Records: Printing Individual Records\n\nUsually we want to pull out each record individually. We have already seen that records is an array of objects. Therefore we can do this by using the array notation to access each object by its index.\n\n# Do This\n\nThe data from the last level has been provided. \n\n* Add a call to `readRecords`\n* Set the table name to the movies table.\n* Inside the callback function add a `for` loop to loop over the records.\n* Inside the for loop add a console.log statment to print out the current object using its location in the array.\n* Run the program. Your output should look like below.\n\n![](https://images.code.org/827a410730369edf42ca7e21f0fa6b01-image-1449517957324.51.38 PM.png)",
        "U3 - Read Record - 5 and half_markdown_instruction": "# Reading Records: Printing Individual Records\n\nSometimes we want to get even more specific than printing out the whole object. We already say we can get each individual object using array notation. So we can then use dot notation to get the value of a specific property. Let's print out just the names of the movies.\n\n# Do This\n\n<img src=\"https://images.code.org/fc419dc05837b049e40e50c04166e0b8-image-1449518323083.58.00 PM.png\" style=\"width: 250px; float: right\">\n\nStarter code has been provided that prints out each object in the array. The data from the last level has also been provided. \n\n* Update the console.log inside the `for` loop to print out the names of each individual movie.\n* Run the program",
        "U3 - Read Record - 5_markdown_instruction": "# Reading Records: Looping over the Array\n\nWe can loop over the `records` array just like any other array. This allows us to **perform the same action for every object in the array**. Recall that the standard way of doing this is to use a `for` loop, as in.\n\n`for(var i = 0; i < records.length; i++)`\n\n# Do This\n**Starter code is provided** which reads records from a table called \"topMovies\"\n\n**Your database already includes a table called \"topMovies\"**\n\n* Add a `for` loop to the callback function of the `readRecords` command\n* Add code to your `for` loop that displays **only the title of every movie in the list**.\n\n![](https://images.code.org/5b13735c52308f57241e7c34707c82e6-image-1449783907117.44.02 PM.png)",
        "U3 - Return Values - debuggingMaxVal_markdown_instruction": "# Debugging and Multiple Return Statements\n\n**Having multiple `return` statements in a program can lead to tricky situations**. You may use multiple return statements, but it makes it easier to introduce logical errors into your program. We're going to look at some examples of functions with return values that include logical errors and debug them. The goal is to **recognize common errors with return values now so you can avoid them when writing your own programs**.\n\nThere is a logical error somewhere in the version of `maxVal` you are about to see which uses multiple return statements. As a result the function works correctly for some inputs but not all. You'll need to inspect the code to understand what the issue is and make changes accordingly.\n\n# Do This:\n\n* **Run the program** and identify the errors generated in the output.\n* **Inspect the logic of `maxVal`** to identify the logical error.\n* **Correct the logical error** so that the function returns the correct value for all inputs.",
        "U3 - Return Values - debuggingReturns_markdown_instruction": "# Debugging and multiple return values\n\n**It is generally bad form to use multiple `return` statements in a program**. You may do so, but it makes it easier to introduce logical errors into your program. We're going to look at some examples of functions with return values that include logical errors and debug them. The goal is to **recognize bad patterns early so you don't repeat them**.\n\nThere is a logical error somewhere in the version of `maxVal` you are about to see which uses multiple return values. As a result the function works correctly for some inputs but not all. You'll need to inspect the code to understand what the issue is and make changes accordingly.\n\n# Do This\n\n* **Run the program** and identify the errors generated in the output.\n* **Inspect the logic of `maxVal`** to identify the logical error.\n* **Correct the logical error** so that the function returns the correct value for all inputs.",
        "U3 - Return Values - increase1_markdown_instruction": "# Use a function that returns a value\n\nThe return command allows functions to generate output that you can use elsewhere in your code. You've already used functions that return values many times, but you've never seen how they're actually made. This exercise includes a simple function that returns a value. For now you're just going to practice **using it like the type of value it returns** which in this case is a number.\n\n# Do This\n\n* **Starter code** is provided which creates a function called `increase` that accepts a number as input and returns twice that number as output.\n* Call the function within the `moveForward`, `write`, `console.log` functions provided.\n* **Run your program** and confirm the output is what you expected.",
        "U3 - Return Values - increase2_markdown_instruction": "# Alter a function that returns a value\n\nIn the last exercise you should have used the `increase` function at multiple places within your code. If we were to change the way that `increase` processes input to generate output, you would immediately be able to make use of this change at every place your function was called.\n\n# Do This\n\n* **Alter the `increase` function** so that it now multiplies input values by **3 rather than 2**. \n* **Run your program** and confirm that the change has affected the output from `moveForward` , `write` , and `console.log`",
        "U3 - Return Values - min1_markdown_instruction": "# Use a function that returns a value\n\nThe return command allows functions to generate output that you can use elsewhere in your code. You've already used functions that return values many times, but you've never seen how they're actually made. This exercise includes a simple function that returns a value. For now you're just going to practice **using it like the type of value it returns** which in this case is a number.\n\n# Do This\n\n* **Starter code** is provided which creates a function called `increase` that accepts a number as input and returns twice that number as output.\n* Call the function within the `moveForward`, `write`, `console.log` functions provided.\n* **Run your program** and confirm the output is what you expected.",
        "U3 - Return Values - useFindMin_markdown_instruction": "# Using functions that return values\n\nWe have used functions that return values many times before, but in this exercise you will see how they are actually created by using the `return` command. The function `minVal` accepts two numbers as input and returns the minimum of the two as output. You can call this function just like any other, and **because it returns a number you can treat the function call as if it were a number**\n\n# Do This\n\n* **Starter code** has been provided which creates the function `findMin` and generates two random values.\n* **Inspect the code of `findMin` to understand the logic of this function**.\n* **Call the function with the values provided** and ensure the minimum value is returned. You should treat the function call **as if it were a number** to generate the output shown below.\n\n![](https://images.code.org/32ddaacdc9c0f820b9b58514b55dcbba-image-1447946068945.gif)",
        "U3 - Return Values - useMinVal_markdown_instruction": "# Using Functions that Return Values\n\nWe have used functions that return values many times before, but in this exercise you will see how they are actually created by using the `return` command. The function `minVal` accepts two numbers as input and returns the minimum of the two as output. You can call this function just like any other, and **because it returns a number, you can treat the function call as if it were a number**.\n\n# Do This:\n\n* **Starter code** has been provided that creates the function `minVal` and generates two random values.\n* **Inspect the code of `minVal` to understand the logic of this function**.\n* On the `console.log` line **call the function using `rand1` and `rand2` as parameters** and ensure the minimum value is returned. You should treat the function call **as if it were a number**.\n\n<img src=\"https://images.code.org/21c2232acca1ed4a133d648982b0b042-image-1447964963356.gif\" style=\"width: 550px\">\n\n* Check that the program generates output similar to the output shown below.\n\n<img src=\"https://images.code.org/0ec446c772976ca8e75e5eb25d018b24-image-1447964535213.21.49 PM.png\" style=\"width: 350px\">\n",
        "U3 - Return Values - wrapTurtle_markdown_instruction": "# Use a Function that Returns a Value in an App - Part 2\n\nThis time, you're going to write a function that returns a value to add functionality to the turtle driver. The `updateTurtle` function now is making a call to a function called `wrap` that has not been written yet. It accepts three parameters and should work in the following way:\n\n* `input`: the input value to the function. If it is within the range it should just be returned.\n* `low`: the lower bound of the range. If `input` is below this value the output should be the value of `high`.\n* `high`: the upper bound of the range. If `input` is above this value the output should be the value of `low`.\n\nBy using this function you can create the illusion that the screen \"wraps\" around, so when the turtle leaves the top of the screen it appears again at the bottom.\n\n# Do This:\n\n* **Starter code** is provided which allows the turtle to move.\n* The `updateTurtle` function now makes two calls to `wrap`, but the function is not yet written.\n* **Write the `wrap` function** so that it implements the logic described above.\n* **Run your app** and confirm the turtle now \"wraps\" when it leaves the screen.\n\n![](https://images.code.org/ebed5130ccdd16202eac0b8cc02df959-image-1447957698820.gif)",
        "U3 - Return Values - writeMaxVal_markdown_instruction": "# Writing Functions that Return Values\n\nNow you are going to write your own function that returns a value, `maxVal`. This function should return the maximum of two values provided as input. The code for `minVal` is provided so that you can **replicate the pattern used in this function**.\n\n**Pattern for Functions that Return Values**\n* Use parameters to provide input.\n* Declare a variable that will be used as output, possibly initializing its value.\n* Update the value in your output variable throughout your program.\n* Return your output variable on the last line of your function.\n\nYou may actually recognize many similarities between how we wrote functions that process arrays and functions that return values. **These patterns aren't rules of programming, but they help make your code easy to read and understand**.\n\n# Do This:\n\n* **Starter code** has been provided which stubs out `maxVal` and generates two random values. `minVal` is still provided **so that you can replicate the pattern used**.\n* **Write `maxVal`**, replicating the pattern used to write `minVal`.\n* **Use `maxVal` within the `console.log` statement as if it were a number** to generate the output similar to the one shown below.\n\n![](https://images.code.org/5941ceeb27f0ad2d59819c9395d0d89a-image-1447947829448.gif)",
        "U3 - Search Terms - 1_markdown_instruction": "# Printing Specific Records\n\nSometimes we want to search through the records in the table to find certain records. For instance let's search through the records for all the movies made in 2008.\n\nloop over element in the array returned from readRecord and print out only the ones that meet a certain criteria - uses if statement and forshadows to search terms\n\n# Do This\n\nThe data from the last level has also been provided. \n\n* Add a call to readRecords to get the most current version of the data table.\n* Make a global array which will hold the movies that match our search\n* Add a for loop to loop over all the records in the array\n* As you loop over the array check each object to see if the year is equal to 2008\n* If the movie was made in 2008 add the whole object to our global array.\n* After you have checked all the items in the array print out the array of movies matching the search.",
        "U3 - Search Terms - 2_markdown_instruction": "# Search Terms\n\nThat was a lot of work just to find the records which matched 1 search criteria! Well good news! There is an easier way! We haven't talked about the second parameter in readRecords, the search terms. Up until now we have given it an empty object. This means it will return all the records beacuse it does not filter records based on any criteria. However if we want to search for something like all the movies made in 2008. We can easily do this by providing an object with those search criteria!\n\nThe object will contain just the key value pairs to look for. Any record that contains those key value pairs will be returned as part of the records to the readRecords call.  The key of the key value pair will be the column name to look under for a certain value. For example to look for movies made in 2008 in our table we would pass an object that looked like this:\n\n`{year: 2008}`\n\n# Do This\n\nThe data from the last level has also been provided. \n\n* Add a call to readRecords\n* Change the table to read from the movies table\n* Change the search terms to look for movies with the year 2008\n* Print the records returned as the parameter to the callback function.\n* Notice that it is the same list from the last level!",
        "U3 - Search Terms - 4_markdown_instruction": "# Searching With Multiple Criteria\n\nWhat if we want to search with more specific criteria?  We can add more criteria to the search terms object.\n\nFor example we can search for the city in California with population of 2,000,000.  We would use: `{state: \"California\", population: 2,000,000}` as the object for the search criteria.\n\n# Do This\n\nThe data from the last level has also been provided. \n\n* Add a call to readRecords\n* Change the table to read from the cities table\n* Change the search terms to look for cities in California with population 2,000,000\n* Print out the records match the search results. ",
        "U3 - Simple Drawing - Color_markdown_instruction": "# RGB Color\n\nJust like in HTML and CSS we can use RGB values to determine the color.\n\nIn game lab we do this with the color block\n\n\n# Do This\n\n* Make each rectangle a different color using the rgb color functions",
        "U3 - Simple Drawing - Comments_markdown_instruction": "# Comments and White Space\n\nIn HTML and CSS you learned about commenting and white space as important practices. You can comment in Game Lab using `//` before our comment.  For example <img src=\"https://images.code.org/c5e94b8bc9e0160e2c98c3adff2ac53f-image-1461101058517.02.55 PM.png\" style=\"width:110px\">. You have already seen examples of this in some of the past levels. The comment block can be found in the most tabs. However it may be easier to switch to text mode and type in comments yourself. If you haven't tried it yet click <img src=\"https://images.code.org/d7811c0d29028daa74ae9e9561e01bee-image-1461101470090.30.45 PM.png\" style=\"width:110px\"> and try using Game Lab in text mode. It is actually impossible to add white space without switching to text mode, so in order to group your code using white space, you will have to switch to text mode. \n\n# Do This\nYou are going to practice using comments and white space in your rainbow program. \n\n* Separate each band of the rainbow and the grass into its own block of code\n* Put a comment before the block to tell which color band it is\n\nFor example your first couple lines of code should look like this:\n\n<img src=\"https://images.code.org/cfd27e7132ab45757713b7234fa06ae0-image-1460643736548.21.24 AM.png\" style=\"width:250px\">",
        "U3 - Simple Drawing - Fill_markdown_instruction": "# Fill\n\nNow, let's add some color to your rectangles! You can do that with the `fill` block.  Setting the `fill` is like picking the color of pen you are going to draw with, and using only that color of pen until you choose a different one.\n\n* When you set `fill`, everything that is drawn after that point will have that fill color. \n* You need to set `fill` **before** the shape you want it to apply to. \n\nThe color of the pen is specified by a lowercase word inside `\" \"` and is the name of the color. You can use any color name you have used in CSS. For example `fill(\"blue\")` will set the fill color to blue.  A full list of names can be found at <a href=\"http://www.w3schools.com/colors/colors_names.asp\" target=\"_blank\">W3 Schools - Colors</a>. \n\n# Do This\n\nIf you run the program, you will notice that all the rectangles are set to red. Make each rectangle a different color:\n\n* Add 3 more fill statements - one before each rectangle\n* Change the fill colors so that each rectangle is a different color",
        "U3 - Simple Drawing - Many Rects_markdown_instruction": "# Many Rects\n\nWe can have more than one rect on the screen at a time\n\ncurrently there are 4 rectangles on the screen but its hard to tell\n\n\n\n# Do This\n\n* Make each rectangle a different color\n* Make the rects each take up one corner of the screen like such\n\n<img src=\"https://images.code.org/8dd4caff4b06c5d0738c47a0601be445-image-1460483873266.57.23 PM.png\" width=200>",
        "U3 - Simple Drawing - No Fill_markdown_instruction": "# Stroke Weight, No Fill and No Stroke\n\nAlright, now that you have made the outlines the correct colors, let's remove the gray fill. You can remove the fill with the command <img src=\"https://images.code.org/15b0024a999ac91e0be7b45e702cd0da-image-1461100870733.20.55 PM.png\" style=\"width:110px\">.  This is similar to fill in that it has to go before the things you want to not have fill. \n\nAnother new block you are going to leverage is <img src=\"https://images.code.org/9c872b32bffc3a6cdb5e37f2a678e6eb-image-1461100747419.02.37 PM.png\" style=\"width:150px\">. This allows you to make the outline you create thicker. The value you input is the thickness.\n\nLastly, you can use <img src=\"https://images.code.org/377cc0c5890eac0756c46e36cbdf8b2e-image-1461100823984.02.44 PM.png\" style=\"width:110px\"> to remove the stroke. You are going to want this for the grass as you just want a green rectangle with no outline. \n\n# Do This\n\n<img src=\"https://images.code.org/d39b81417cb5e2bd64539e9e21c88395-image-1460642887253.07.50 AM.png\" style=\"width:150px; float:right\">\n\nThe final product is shown to the right. In order to get there:\n\n* Add `noFill` as the first line in the program so that the gray middle of all the shapes disappears\n* Make the `strokeWeight` large enough that the bands all touch (25)\n* Notice that the fill disappeared for the grass. Add `fill` for grass\n* Remove the border on the grass by using `noStroke`\n",
        "U3 - Simple Drawing - Oval_markdown_instruction": "# Oval\n\nEllipse is just a fancy name for oval.  You can use the `ellipse` block to draw an oval.  The values for ellipse are very similar to rectangle but have one major difference. Can you figure out the difference?\n\n# Do This\n\n* Add a `rect` command\n* Add an `ellipse` command\n* Give `ellipse` the same input values you give `rect`\n* What do you think might happen?\n* What do you notice?",
        "U3 - Simple Drawing - Personal Drawing_markdown_instruction": "# Your Own Drawing\n\nIt is your turn to create your own drawing. You should have drawn out your plan on paper first.\n\n# Do This\nAs a reminder make sure you hit the objectives:\n\n* Creates an identifiable and named object or design (i.e. no random splatters of shapes)\n* Uses at least 10 shapes or text items (rect, ellipse, regularPolygon, text)\n* Uses at least 4 different color fills\n* Uses at least 2 different color outlines\n* Contains at least 3 different logical blocks of code with comments\n",
        "U3 - Simple Drawing - Rectangle Width and Height_markdown_instruction": "# Drawing Rules\n\nSo, what did you discover on the last level?\n\n* What do each of the four openings control?\n\n\t* First Opening - controls the **location of the rectangle from left to right** - call this the **x position**\n    * Second Opening - controls the **location of the rectangle from top to bottom** - call this the **y position**\n    * Third Opening - controls the **width** of the rectangle\n    * Fourth Opening - controls the **height** of the rectangle\n\n* What is the size of the drawing area?\n\n\t* Width: 400\n    * Height: 400\n\n* Where is (0,0) or x = 0 and y = 0?\n\n\t* The **upper left corner of the grid!**\n\n# Do This\n\nThere is code provided for a rectangle that draws in the upper left corner when you run the program. Using your new knowledge of the workspace and the inputs for a rectangle:\n\n* **Change the width and height of the rectangle so that it fills the whole drawing area**\n* **HINT:** Remember that the rectangle block is `rect(x, y, width, height)`, in that order",
        "U3 - Simple Drawing - Road Ellipse_markdown_instruction": "# Clouds and Sun\n\nNext, you are going to add the clouds and sun to our picture. Here is an example of what your work could look like at the end of the level, but use some creativity as you create your sun and clouds.\n\n<img src=\"https://images.code.org/c3a26070e316d0fda19caba59af710ba-image-1460644884454.41.10 AM.png\" width=200>\n\n# Do This\n* Add ellipses for clouds and the sun.\n* Make sure there is no outline on the clouds and sun\n* Set the colors of the clouds and sun. ",
        "U3 - Simple Drawing - Simple Shape Drawing_markdown_instruction": "# Simple Drawing\n\n<img src=\"https://images.code.org/47dce1fc1ac728bcc523909573812099-image-1461787179482.59.14 PM.png\" style=\"width:200px; float:right\">\n\nThis is a mess! Can you help debug this program? All the necessary lines of code are here, but they are not in the correct order to draw the picture on the right.\n\n# Do This\n\n* Re-order the code to produce the picture\n\n*Note: You don't need to add any new lines of code*\n\n",
        "U3 - Simple Drawing - Stroke and Stroke Weight_markdown_instruction": "# Stroke\n\nLet's start adding color to the rainbow. You may have noticed that all the shapes have a middle color and an outline color. The middle is gray and the outline is black by default. **For the rainbow, you are going to change the OUTLINE color. This will allow you to get the arch shape without the middle fill.** \n\nYou can change the look of the outline using `stroke()` which sets the color of the outline.  Stroke takes names of colors ('red', 'orange', etc) just like fill. However, you will want to be more specific about the colors of the rainbow.\n\n# Color\nYou can set colors using RGB values just like you did in HTML and CSS. We do this by using the `rgb()` block in place of the color name. For example `stroke(rgb(255,0,0))`. Like fill, you need to set stroke before drawing the object you want to have that stroke.\n\n# Do This\n<img src=\"https://images.code.org/023bd330cc9ccced5c665330c5e997b4-image-1485287796998.56.13 PM.png\" style=\"width: 250px; float: right\">\n\n* Use `stroke()` to make each ring of the rainbow the appropriate color. \n* The final picture should look like the one shown to the right. You will continue to improve it on the next level.\n\n| Color | RGB Values |\n|---|---|\n| red | (255,0,0)|\n| orange | (255,127,0) |\n| yellow | (255, 255, 0) |\n| green | (0,255,0) |\n| blue | (0, 0, 255) |\n| indigo | (75, 0, 130) |\n| violet | (139, 0, 255) | ",
        "U3 - Simple Drawing - X and Y values_markdown_instruction": "# Bugs\n\nNot every program you write in computer science works perfectly or even well the first time. The things that go wrong with a computer program are called **bugs**.  The process of fixing those bugs is called **debugging**. Computer scientists do a lot of debugging, so it is a very valuable skill. Because of this, you are going to do many levels that help you practice debugging strategies.\n\n# Do This\n\n<img src=\"https://images.code.org/70f4ce3f9362d8dbb361e36906617d32-image-1460733825166.23.26 AM.png\" style=\"width:200px; float:right\">\n\nYou are going to debug a problem. In the code there is a rectangle block, but when you run the program the rectangle is nowhere to be found! Can you fix the problem?\n\n* Figure out why the rectangle is not showing. **HINT** What are the biggest x and y positions that will show on the canvas?\n* **Move the rectangle to the lower left corner of the drawing area** as in the example on the right.",
        "U3 - Simple Drawing - regular polygon_markdown_instruction": "# Regular Polygons\n\nYou are now going to add the stop sign.\n\n<img src=\"https://images.code.org/0ea048eca4b3a7f3263cf8e0a9882d2b-image-1460646035610.53.20 AM.png\" style=\"width:200px\">\n\nIn order to create a stop sign you are going to need a new block. The `regularPolygon()` block draws any shape with sides that are all the same length.  Some examples are:\n\ntriangle (3 sides) <img src=\"https://images.code.org/9bcbae86518007a3141ae5dbde5f1305-image-1460750039357.52.36 PM.png\" style=\"width:100px\"> square (4 sides) <img src=\"https://images.code.org/1def6a4326b78b76a5fcf95c6ec33b8b-image-1460750039357.52.53 PM.png\" style=\"width:100px\"> pentagon (5 sides) <img src=\"https://images.code.org/ba7262caf5ad0f9ec926027a2d281ceb-image-1460750039358.53.05 PM.png\" style=\"width:100px\"> \n\nThe `regularPolygon` has 4 parameters x, y, number of sides, and the radius. x and y specify the center of the shape. The radius is the distance from the center to the end of each of the sides.\n\nTo make a stop sign you are going to need an octagon, which has 8 sides. <img src=\"https://images.code.org/4e8c23c88e33aa5e06ed3e5ca702e3ab-image-1460750174518.56.05 PM.png\" style=\"width:100px\">\n\n# Do This\n\n* Add a pole for the stop sign\n* Add an octagon (8 sided shape) for the sign. Hint: The center of the octagon should be at the top of the pole.\n* Set the color of the objects.\n* Make the stroke white and make the outline thicker",
        "U3 - Simple Drawing - text_markdown_instruction": "# Text\n\nThe last step is to add text to our stop sign. You can add text with the <img src=\"https://images.code.org/302a9fa63cce41d49ce101df08a378f3-image-1472661577637.39.29.png\" style=\"width:150px\"> block. The `text()` block has 3 parameters: `text`, `x` and `y`. `text` is the string of text you want to print on the screen.  This text needs to go inside `' '` so that the computer knows it's a string.  `x` and `y` are the x and y coordinates of the bottom left corner of the text.\n\nAlso, don't forget to comment your code and use white space to block out connected lines. \n\n# Do This\n* Add text to the center of the sign\n* Make sure the text has no stroke and that the fill is white\n\n<img src=\"https://images.code.org/86a9f34aadf57bb8e3b897b8c6ddf52e-image-1460646615062.09.59 AM.png\" width=200>",
        "U3 - Simulation - 1_markdown_instruction": "# Starting Small\n\nTo start, we're going to simulate flipping a coin 10 times. You might be thinking that isn't many coin flips, and that we could just do those flips in real life, but this is actually an important step in developing a simulation. At small scales we can make sure our code is working as intended because **we can still visually confirm its output**. Once we're convinced that the logic of our program is reliable we'll move up to simulating larger numbers of flips.\n\nThe core logic of our program will be focused on **a `while` loop** that simulates flipping a coin by repeatedly generating **random 0's or 1's using `randomNumber`**. This is a great opportunity to keep practicing using loops while applying your knowledge of variables, iteration, and `if` statements.\n\n# Do This:\n\n* When we want to flip a coin with a computer we will instead **generate a random number between 0 and 1**.\n* Write a program that **uses a `while` loop** to **flip a coin 10 times** and writes the value of each flip to the screen. The example below shows how your program should run.\n* **HINT:** you will need to use a counter variable in your `while` loop to keep track of how many times the coin has been flipped. \n\n![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)",
        "U3 - Simulation - 2.1_markdown_instruction": "# Changing the Loop Condition\n\nCurrently our loop condition is based on a counter variable that keeps track of the total number of flips, but our simulation should only run **while we have fewer than the target number of heads**. In this exercise you are going to change the condition used by your `while` loop so that your **simulation terminates once you have flipped 5 total heads**. At the end of the loop we will **write the total number of flips** to know how many flips it took to get 5 heads.\n\n# Do This:\n\n* Change the looping condition to use the variable you are using to keep track of the number of heads. **Your loop should run as long as you have fewer than 5 total heads**.\n* Add code after your loop that **writes the total number of flips**.\n* **Test your program** several times to make sure it works as expected. See the example below.\n* **Note:** the simulation is always terminating once it flips its 5th heads. Sometimes this means the text output runs off the screen. We will address this in the next exercise.\n\n![](https://images.code.org/878ff327142ebad8f81ecd8cdf58b14a-image-1446861064994.gif)",
        "U3 - Simulation - 2.5_markdown_instruction": "# 10,000 Heads!\n\nYou're ready to increase the number of heads your simulation is looking for and **test your first hypothesis**. Before we move up to the full 10,000 heads, however, we're going to perform a quick check of our program logic.  When you make changes to your program **it is possible that some portion of your programming logic will stop working as you expected**. In order to feel more confident about your model you will **first change the number of heads you are looking for to a number that we can still visually verify (7 heads)**. If our code still works after making changes then we should be confident that it should work at 10,000. We will remove the intermediate output and run the full simulation!\n\n# Do This:\n\n* **Increase the number of heads you are looking for to 7** and **visually confirm** that the code is still working as you expect.\n* If everything seems to be working, **comment out the `write` command that displays the results of each flip.** You can use `//` to comment out a single line of code. Make sure that the total count of flips still prints though!\n* **Run your simulation and find out how long it takes to get to 10,000 heads**. Then run it a few more times. What patterns are you noticing? Record your results and move on.",
        "U3 - Simulation - 2_markdown_instruction": "# Counting Heads\n\nLet's say that a **1 is a heads**. If want our simulation to run until we reach a certain number of heads then **we will need a way to count the number of heads that have been flipped**. In order to do this you will need to add a variable that acts **as a counter**. Initialize it to 0, and every time you flip a heads (1) **increment your counter by 1**. At the end of your program you should write the value to the screen.\n\n# Do This:\n\n* Add a variable that **counts the number of heads (1's)** and write its value to the screen after each flip.\n* Run your program severals times **and validate that the number of heads recorded is correct** by visually checking the flips you've printed to the screen.\n* **Hint:** you will also need to store your current coin flip in a variable to complete this challenge.\n\n![](https://images.code.org/0d99569cd223c63e2166d610d09fd525-image-1446859813702.gif)",
        "U3 - Simulation - 3_markdown_instruction": "# Streaks of Heads\n\nWe are going to alter our simulation so that it doesn't count the total number of heads, but rather the longest **streaks of heads**. This will allow us to simulate **how many flips it takes to get 12 heads in a row**. \n\nTo begin with you will change your looping condition so that **the loop again only runs 10 times**. This will allow us to visually confirm our code is working.\n\n**Keeping Track of Streaks:** We know we need to count streaks of heads, how do we do this in code?  Do we need to keep track of all the previous flips so we know that we're on a streak?\n\nThe answer is: **no**.  We can instead just **count in a clever way** that makes our code pretty simple.  Make a variable to use as a counter and...\n\n  * every time you see heads, add 1 to a counter.\n  * every time you see tails, set the counter back to 0.\n\nHere is some psuedocode showing how it works.  You might take a minute to study and reason about why and how it works.\n\n**Pseudocode**\n```\n// Ouside loop\nheadsCount <-- 0\n\n// Inside loop\t\nIF (current flip is a heads)\n  headsCount <-- headsCount + 1\nELSE\n  headsCount <-- 0\nDISPLAY (current flip)\nDISPLAY (headsCount)\n```\n# Do This:\n\n* Change your `while` loop's condition so that **it only runs 10 times**.\n* Add code to the simulation that **displays the length of each streak of heads** following the logic described above.  Note that pseudocode should translate to JavaScript pretty easily.\n* The example below shows an example of what output from your program might look like.\n\n![](https://images.code.org/22f1a29e9b6abd558198f4704e437498-image-1446751547621.25.07 PM.png)",
        "U3 - Simulation - 5_markdown_instruction": "# Streaks of Heads: 12 in a Row\n\nWe're almost ready to test **our second hypothesis** and find out how long it takes to get **12 heads in a row**. Just as before we're first going to **visually test our code with a different length streak (4)** before removing most of the visual output and running the code for a streak of 12.\n\n# Do This:\n\n* **Change your simulation to run until you get a streak of 4** and visually verify that the values calculated are accurate.\n* **Comment out** the lines of code that write the current coin flip and the current streak count. You can use `//` to comment out a single line of code.\n* **Change your simulation to run until you get a streak of 12 heads**. \n* **Run your simulation a few times and record your results!**",
        "U3 - Simulation - 6_markdown_instruction": "# Keep Experimenting!\n\nYour simulation can be updated or changed however you like. What new questions do you have? Do you want to look for longer streaks of heads? Do you want to roll a die instead of flipping a coin? Make any changes and improvements to your simulation that you like.\n",
        "U3 - Simulation - App_markdown_instruction": "# More Flips\n\nIf your code is working well for 10 flips then we should be reasonably confident that it will continue working for more. You will now want to **run your full simulation on 10,000 flips**.\n\nPrior to this we have been printing our output after every flip. This is a useful form of **debugging** but we will not want our programs to print 10,000 different coins flips. **We only want the final output**.\n\n# Do This\n\n* **Change your program to flip 20 coins** and visually verify that the values calculated are accurate\n* **Comment out** the lines of code that print each coin flip and the current streak count. You can use `//` to comment out a line of code.\n* **Change your program to flip 10,000 coins, predict what the longest streak will be, and run your program**.\n* Rerun it a few times. **Does the answer stay fairly consistent? Are you surprised by the result?**",
        "U3 - Simulation - Template_markdown_instruction": "# Simulating Coin Flips\n\nOver the next several exercises we are going to be building a program that simulates flipping 10,000 coins, or even more if you like. Along the way we're going to be keeping track of the patterns that develop and hopefully learning something about the patterns that develop.\n\nThis is a great problem to simulate on a computer. If you wanted to flip 10 coins you'd probably just do it by hand. Flipping 10,000 coins would take significantly longer (about 3 hours if you flip one per second) and so **we'd much rather use a program to do the work for us.** Not only is it a lot faster to write the program, but once you're done you can run your program over and over, repeating the experiment. As we'll see, **simulations like this make it much easier to quickly notice patterns, test hypotheses, and develop new ideas to investigate**.\n\n**Starting Small:** Our simulations are going to start small. We'll actually only be flipping 10 coins to begin with, and then developing programs that keep track of patterns in this smaller set of data. That way we'll be able to visually confirm that our programs are working as intended. **Once we've verified that our programs work at a smaller scale we'll gradually increaese the number of flips our program is working on until we're at the full 10,000.**\n\n# Do This\n\n* When we want to flip a coin with a computer we will instead **generate a random number between 0 and 1**\n* Write a program that **uses a while loop** that **flips 10 coins** and writes their values to the screen\n\n![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)",
        "U3 - Simulation - Template_2018_markdown_instruction": "# Simulating Coin Flips\n\nOver the next several exercises we are going to be building a program that simulates flipping 10,000 coins, or even more if you like. Along the way we're going to be keeping track of the patterns that develop and hopefully learning something about the patterns that develop.\n\nThis is a great problem to simulate on a computer. If you wanted to flip 10 coins you'd probably just do it by hand. Flipping 10,000 coins would take significantly longer (about 3 hours if you flip one per second) and so **we'd much rather use a program to do the work for us.** Not only is it a lot faster to write the program, but once you're done you can run your program over and over, repeating the experiment. As we'll see, **simulations like this make it much easier to quickly notice patterns, test hypotheses, and develop new ideas to investigate**.\n\n**Starting Small:** Our simulations are going to start small. We'll actually only be flipping 10 coins to begin with, and then developing programs that keep track of patterns in this smaller set of data. That way we'll be able to visually confirm that our programs are working as intended. **Once we've verified that our programs work at a smaller scale we'll gradually increaese the number of flips our program is working on until we're at the full 10,000.**\n\n# Do This\n\n* When we want to flip a coin with a computer we will instead **generate a random number between 0 and 1**\n* Write a program that **uses a while loop** that **flips 10 coins** and writes their values to the screen\n\n![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)",
        "U3 - Sprites - Intro Sprites_markdown_instruction": "# Sprites\n\nYou are going to start creating animations with **sprites**. A sprite is like a character in your animations. Your program will control how your sprite moves and appears on the screen.\n\n**Creating Sprites:** The first step to using a sprite is creating the sprite. In order to do that you'll need to give it a label, just like a variable. This block will create a new sprite for you and let you choose its label.\n\n![](https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png)\n\n**Drawing Sprites:** The next step to using a sprite is to draw it on the screen. Whenever you call the ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png) command all the sprites in your animation will be drawn on the screen.\n\n# Do This\n\nThis program creates a sprite but it doesn't draw it on the screen\n\n* **Add a ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png) command** after you've created a sprite so it will actually draw\n* **Run the code** to draw your first sprite on the screen. Right now sprites just look like gray rectangles but soon they'll do a lot more.",
        "U3 - Sprites -Draw Sprites_markdown_instruction": "# Draw Sprites\n\nThis program is supposed to draw two sprites but when the program is run they don't show up on screen. `createSprites` only creates the sprite but does not draw it on the game area. In order draw your sprite on the display you need another block that was in the draw loop on the last level.\n\nCan you fix it? \n\n# Do This\n\n* Run the program and see what happens\n* Take a look back at the last level to see what is missing\n* Fix the program so that both sprites show up",
        "U3 - Sprites and Mod - Create  and Draw Sprite_markdown_instruction": "# Sprites\n\n# Do This\n* Create spirte\n* Change the name of your sprite\n* call drawsprites in draw loop",
        "U3 - Sprites and Mod - Debug DrawSprites_markdown_instruction": "# Debug\n\nThis program is supposed to create a sprite that changes to a random color and moves randomly around the screen. It's not working. Can you figure out why its not working?\n\nHint: There are two bugs in this program.  Sometimes when you fix one problem it may look like you made the initial problem worse. Don't worry. Remember the things you have learned so far. How would you write the code for this level?\n\n# Do This\n\n* Run the program to see what is happening\n* Debug the program. ",
        "U3 - Sprites and Mod - Debug Name Sprite_markdown_instruction": "# Debug\n\nThis program is supposed to create a sprite that changes to a random color, width and height. It's not working. Can you figure out why its not working?\n\n# Do This\n\n* Run the program to see what is happening\n* Debug the program. Hint: You do not need to add any new commands to make this work.",
        "U3 - Sprites and Mod - Free Play_markdown_instruction": "# Make Something\n\nYou've now learned a bunch sprites, properties, and objects. What kind of animation can you create with what you have learned?\n\nSprite Properties\n\n* x\n* y\n* width\n* height\n* shapeColor\n\n# Do This\n\nUse the properties you have learned in this lesson to create an animation.\n\nStuck on ideas? Try one of these.\n\n* Create a sprite in the middle of the screen that grows and rotates",
        "U3 - Sprites and Mod - Mouse Width and Height_markdown_instruction": "# Random Around Point",
        "U3 - Sprites and Mod - Move Across_markdown_instruction": "# Moving Animation\n\nYou are going to practice using the x and y properties of a sprite. Don't forget that they designate the center of the rectangle. This may seems strange right now while sprites are just rectangles but in the future sprites will be able to be any image you want.  When you use an image with weird edges its a little less clear where the upper left corner is. In addition, for things such as rotation its much easier to have the x and y at the center because thats the point around which is rotates.\n\n# Do This\n\nCreate two sprites. One that moves from left to right and one that moves from top to bottom. \n\n* Create a sprite that draw on the screen\n* Increment the x property of one to get movement from left to right\n* Increment the y property of the other to get the movement from top to bottom",
        "U3 - Sprites and Mod - Rand Shape Color_markdown_instruction": "# Properties\n\nIn past levels you created rectangles and then made a bunch of variables to keep track of different qualities about that rectangles such as its position and color. Sprites take away the need to make lots of separate variables because those qualities can be controlled by built in variables. The first built in variable we are going to try is `shapeColor`.  In order to access the built in variable you need to type something like `sprite.shapeColor` where sprite is the name of the sprite you are setting the color of.\n\n# Do This\n\nThe shape color of the first sprite is set for you. Can you set the color of the second sprite?\n\n* Add a command to set the `shapeColor` of the second sprite\n* Run the program and test it out.",
        "U3 - Sprites and Mod - Shape Color_markdown_instruction": "# Predict\n\nWhat do you think this code will do?\n",
        "U3 - Sprites and Mod - Sprite Rotation Command_markdown_instruction": "# Rotation\n\nOne of the cool things about properties are there are new things you can control about a sprite that you could not about a shape! \n\nOne of those things you can control about a sprite is its rotation.  The `rotation` property sets the angle in degrees that the sprite should be turned to. With this you can angle a sprite to a certain orientation.\n\n# Do This\nRotate the gears so they sockets don't overlap.\n\n* Add a command for top and bottom gears to set the rotation property of the sprite\n* Play with the value of the rotation until you get it to look like the picutre on the right.",
        "U3 - Sprites and Mod - Sprite Rotation_markdown_instruction": "<img src=\"https://images.code.org/dfdc813b35a6773684e77618cffb04c9-image-1465570394783.gif\" alt=\"wheel spinning\" style=\"width:200px;float:right\" >\n\n# Rotation\n\nYou can control sprites in ways you never could with just shapes.\n\nOne of those things you can control about a sprite is its rotation.  The **`rotation` property sets the angle in degrees that the sprite should be turned to**. With this you can angle a sprite to a certain orientation or make it spin!\n\n# Do This\nYou are going to start creating a spinner wheel similar to one you might find at a carnival.\n\n* Create a **new sprite**\n* **Set the image** of the sprite to the provided wheel.png\n* Use the **`rotation` property as a counter** by 1 to produce a spinning effect\n* Test it out\n* Play with the increment amount to find a speed you like\n\n# Till The Animation Tab Works\n\n* <a href=\"https://images.code.org/60ce4d33daafb50996f53597b4f1547e-image-1466193542771.png\"> Wheel</a>",
        "U3 - Sprites and Mod - Width and Height Rand_markdown_instruction": "# Width and Height\n\nSprites have other properties. There are properties for width and height of the sprite. The property names are `width` and `height`. So to access the width of a sprite named `cat` you would say `cat.width`.\n\n# Do This\n\nThe provided code draws a sprite that changes colors. Can you change the initial size of the sprite?\n\n* Set the width and height of the sprite before the draw loop using properties",
        "U3 - Sprites and Mod - Wrap Many Squares_markdown_instruction": "# Stuff",
        "U3 - Sprites and Mod - X and Y Prop_markdown_instruction": "# Predict\n\nWhat do you think this program will do when we run it?",
        "U3 - Sprites and Mod - two sprites_markdown_instruction": "# Two Sprites\n\ntwo rects - make one move on the left side of the screen and one on the right side of the screen\n\n",
        "U3 - User Input - Save getText To Variable_markdown_instruction": "# Saving Text Input in Variables\n\nOften we want to save the information we pull in from the user for later use in our program. The best way to do this is to save it in a variable.\n\n# Do This:\n\n* **Create two variables inside your event handler** to store the **age** and **name** of the user.\n* **Use `getText()` to update the values** stored in each of these variables.\n* **Change your `console.log` statements to use your variable instead of `getText`**.\n\n![](https://images.code.org/ca45dcb01ae2d1956ed2f87efeda0264-image-1445976691215.11.13 PM.png)",
        "U3 - Variables - Clicker Game_markdown_instruction": "### 'Chaser-game' Continued\n\nNow, you'll finally get to modify your 'chaser-game'.  Making the minimum requirement might be pretty easy at this point.  Consider some of the enhancements suggested.\n\n#### Minimum requirement - Clicker version 1\n\n* Starting from your previous clicker app and use a variable to store a click counter. \n* Declare and initialize your counter variable as a global variable\n* update your counter variable within the click event handler. \n* A textLabel can be updated on each click to output the click counter value along with a message. \n\n#### Enhancements\n\nThere are lots of ways to enhance this app.  Here are some things you can do in no particular order...\n\n* Add a big image which can serve as a background image. If the player clicks on the background image they lose a point. \n* Add a button that lets the user start over - reset the score.\n* Add another image that jumps around randomly, or appears and disappears that the user can click\n* Use arithmetic to change how the score is calculated with each click (e.g. rather than losing a point for doing something wrong, divide the score by 2).  \n* Add more and different event handlers that alter the score in different ways.\n* Use arithmetic to change the size of the image you need to click based on the score.  For example, make the image smaller and smaller as the score gets higher.\n* Make the size of the image change to a random value each time\n* Make the score go up and down by a random value",
        "U3 - Variables - Debug Scope_markdown_instruction": "# Debugging Variables: Part 4\n\nWe have the same starting code as last time with a few things added to it. I'm trying to change the value of foo to 4. It seems to be 4 in some places but not others?  Can you fix it?\n\n# Do This\n\n* **Run the program**\n\n* **Add console log statements to try to figure out the value of the variable at different points**\n\n* Take a guess at what the problem is. We will discuss it on the next level.",
        "U3 - Variables - Debugging with Turtle_markdown_instruction": "# Practice Debugging\n\nOn the last two levels you learned two different common variable problems\n\n1. Foo vs foo\n2. \"foo\" vs foo\n\nOn this level there are a bunch of errors you will need trace down to get the program to run correctly.\n\n# Do This\n\n<img src=\"https://images.code.org/256c4c3a041b107b4f2a6a743b963bf5-image-1445204671406.44.21 PM.png\" style=\"width: 150px; float: right; border: solid 1px black\">\n\n* **Run the program**\n\n* **Locate the errors**\n\n* **Fix the program**. The final product should look like the image on the right.",
        "U3 - Variables - Decrement_markdown_instruction": "# Decrementing Variables\n\nIn last level we increased the value of our variable. Now what if we want to decrease it. Well you probably guessed it. Its just subtraction instead of addition!\n\nHint: You may find it easier to edit the code in Text Mode instead of Block Mode. Text Mode allows you to type code instead of dragging blocks out. It is very helpful for changing certain parts of your code and you should feel free to use it whenever you feel it helps you. You can always switch back to Block Mode at any point! You can find Text Mode by clicking <img src=\"https://images.code.org/8020c9f5f3766a2d82c2376d6df1b896-image-1444966181885.04.50 PM.png\" width=\"100px\"> in the upper right corner of the Code Workspace.\n\n# Do This\n\n* Update the program to decrement the value of the variable instead of increment.\n\n* Use console.log statements to check your work.",
        "U3 - Variables - Incrementing Variables_markdown_instruction": "# Incrementing Variables\n\nWe have brought back the turtle level we looked at before. You may notice that we repeat a lot of the same code in this example and the only thing that changes during the programm is the value of the variables. Your mind should be scream loop.  That would be a great thing but how do we deal with updating the variables?\n\nWell take a look at the variable.\n\nmoveAmount goes up by 25 each time. So we could use incrementing!\n\n# Do This\n\n* **Run the code** and to see what it does. We want to recreate the same behavior with the loop\n\n* **Create a repeat loop for the repeated code**\n\n* **Increment moveAmount by 25 to create the same program you started with but with less code!**",
        "U3 - Variables - Read Using Turtle_markdown_instruction": "# Multiple Ways to Read\n\nReading the value of a variable doesnt just have to be console.log\nBring back turtle\n\n# Do This\nxPosition\nyPosition\nmoveTo for Turtle\n",
        "U3 - Variables - Set to Expression with Other Variables and Turtle_markdown_instruction": "# Turtle Level for Expressions with variables",
        "U3 - image - Rotation Random Amount_markdown_instruction": "<img src=\"https://images.code.org/a7697b89e2c6ea67ae453410a1da6d47-image-1465572156435.gif\" alt=\"wheel spinning\" style=\"width:200px;float:right\" >\n\n# Random Rotation\n\nUsing random numbers with rotation can add interesting animation effects. One effect you can use rotation for is shaking. **An object can look like its shaking a little when you set its rotation to a small random number repeatedly.**\n\n# Do This\nYou are going to start creating a spinner wheel similar to one you might find at a carnival. You set up the wheel on the last level so you are just adding the clicker at the top.\n\n* Create a clicker sprite.\n* Set the sprite to the provided clicker image.\n* Set the rotation to a random number between -5 and 5.\n* Test it out.",
        "U3 - image - wheel free play_markdown_instruction": "# Wheel Free Play\n\nHere is the spinning wheel you created so far. Continue to improve it.\n\n# Do This\n\n* Create a background scene for the wheel to go in.\n* Resize the wheel to fit the scene.\n* Add at least 1 other sprite to the scene and give it some movement.\n* Add your own ideas!",
        "U3 - images - bee free play_markdown_instruction": "# Bee Free Play\n\nHere is the swarm of bees you have been working on. Continue to improve the animation!\n\n# Do This\n* Add a background.\n* Add a flower or hive sprite.\n* Make the flower or hive sprite move.\n* Add more ideas of your own!",
        "U3 - images - gears conditionals_markdown_instruction": "# Gears Conditionals\n\nThe gears are back! Lets change the direction of spinning based on some conditions!\n\n# Do This\n\n",
        "U3 - images - gears free play_markdown_instruction": "# Gears Free Play\n\nHere are the spinning gears you have been working on. Continue to improve the animation!\n\n# Do This\n\n* Add more gears of different sizes.\n* Make the gears line up and spin with the existing ones.\n* Create a background for the gears.\n* Add more ideas of your own!",
        "U3 AnimationsMulti Play Defender_markdown_instruction": "# Defend Your Cake!\n\nIn this lesson you will be learning to make a \"Defender\" style game. Push the ladybugs out of the way to prevent them from getting the cake. Once you lose 3 candles the game is over!",
        "U3 Digital_markdown_instruction": "Time to make your own specialized digital assistant! We'll be working with this a lot, so make it personalized and fun!\n\n### Instructions:\n\n* Choose a topic you want your digital assistant to specialize in. It should be something you are interested in and know a lot about. Examples: Country Music, Sushi, College Football, Comedy Movies\n\n* Create your digital assistant\n\n\t* Your digital assistant should read the user's input and display it back to them along with some default response.\n    \n    * Anyone should be able to easily distinguish between the text that the user typed and the response from the digital assistant.\n",
        "U3 L1 - 3: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 1 - 3: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U3 L4 - 6: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 4 - 6: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U3 L7 - 9: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 7 - 9: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U3 Variables consolelog_markdown_instruction": "# Console.log\n\nThe **Debug Console** is an area below your code. Your user will never see the debug console. It is useful for **displaying information only you want to see, especially while debugging your program**.\n\nThe `console.log` command can be used with **numbers, text, and the labels of a variable**, and will display the information provided on a new line in the Debug Console.\n\n```\nvar size = 100;\nconsole.log(\"The value of size is\"); //displays this text on a line\nconsole.log(size);                   //displays the value of size (100)\n```\n\n# Do This\n\n* **Use the `console.log` command** to display the random value currently stored in `size`",
        "U3 Variables gray square_markdown_instruction": "# Drawing with Variables\n\n**Get excited because you're about to see your first variable used in a program!** This program uses a variable in three separate ways.\n\n* `var size;` Creates a new variable with the label size\n* `size = 50;` Assigns the value 50 to size\n* `rect(200, 200, size, size);` Uses the value in size to draw a rectangle with equal width and height.\n\n# Do This\n\n* Run the program once to see how it works\n* **Change the value assigned to size in line 2** and rerun the program to see what changed.",
        "U3 Variables misconceptions 1_markdown_instruction": "# Test Your Predictions\n\nIf you haven't already, **make a prediction for the output of each of the 4 programs**.\n\n# Do This\n\n* Put your predictions in the answer box below.\n* Run this program and examine the results.\n* Compare the results to your predictions.\n\n**With a partner talk through:**\n\n* Whether your predictions matched the output\n* Why you think you see the output you do\n* Any misconceptions you might need to avoid in the future.",
        "U3 Variables misconceptions 2_markdown_instruction": "What will Program 2 output?",
        "U3 Variables misconceptions 3_markdown_instruction": "What will Program 3 output?",
        "U3 Variables misconceptions 4_markdown_instruction": "What will Program 4 output?",
        "U3 Variables misconceptions try it_markdown_instruction": "# Test Your Predictions\n\nIf you haven't already, **make a prediction for the output of each of the 4 programs**.\n\n# Do This\n\n* Run this program and examine the results\n* Compare the results to your predictions\n\n**With a partner talk through:**\n* Whether your predictions matched the output\n* Why you think you see the output you do\n* Any misconceptions you might need to avoid in the future.",
        "U3 Variables randomize your square_markdown_instruction": "# Multiple Assignments\n\nA variable contains a single piece of information called its **value**. To use that value in a program you need an easy way to tell your program which variable to use. Each variable has a **label** or name to let you refer to it. In your last program, the variable had the label `size` and originally had a **value** of `10`. **Here's a summary of what each command does**\n\n![](https://images.code.org/a8d2c5a88a8fbb8284a18bcb7464cb9b-image-1462301535506.51.32 PM.png) **Create a new variable** with the label `size`\n\n![](https://images.code.org/d2a2578e6d0190f7db69872c1ad64572-image-1462301539050.51.43 PM.png) **Assign the value `10`** to the variable `size`\n\n![](https://images.code.org/84b01d13b210c8cca8a71934b77acc56-image-1462301542169.51.53 PM.png) **Use the value in `size`** to determine the width and height of the rectangle.\n\n# Do This\n\nThis program is similar to the first but it assigns multiple values to `size` before drawing the rectangle.\n\n* **Run the program once** to see how it works\n* **Change the values in each of the assignments commands ![](https://images.code.org/d2a2578e6d0190f7db69872c1ad64572-image-1462301539050.51.43 PM.png) to something new**\n* **Run the program again**. Which of your assignments is being used? How can you tell?",
        "U3 Variables write_markdown_instruction": "# Displaying a Variable's Value\n\nOften you want to see the exact value contained in a variable, especially if it was randomly generated. Both `console.log` and `text` can be used with variables to specifically see their values. This is an important skill when **debugging** your programs.\n\n# Do This\n\nThis program uses a variable `size` to draw a square with a randomly generated value.\n\n* **Use the `text` command** to display the value of `size` on the screen.\n* **Use the `console.log` command** to display the value of `size` in the debug console.",
        "U3 full clicker demo_markdown_instruction": "# Clicker Game Demo\n\nTry out this clicker game! You'll be building your own version (with a theme you choose) at the end of the lesson.\n\n# Things That Are Familiar\nYou know how to build many of the components of this game already:\n- Multiple screens.\n- Buttons that change the screen when clicked.\n- Image that moves when you click it.\n\n# Things That Are New\n- Keeping track of and displaying the __changing score__.\n- Keeping track of and displaying the __changing lives__.\n- Changing to the __win screen if the score is 25__.\n- Changing to the __lose screen if the lives is 0__.\n",
        "U3- Keys - Code Refactoring Exit Ticket_markdown_instruction": "# Free Response: Why Refactor?\n\nWhy is refactoring your code important?\n",
        "U3- Variables - Assign Random For Turtle Draw_markdown_instruction": "# Putting random numbers into variables\nWe can also store things in variables besides hard-coded numbers. The whole point of variables is to use them as placeholders for values that might be different each time you run the program.\n\nLet's assign a random nubmer to a variable.  Sometimes you want to generate a randomNumber but then use that same number repeatedly - so you need to store the number that was generated and use it several times in the code.\n\nWe can assign a variable the result of an expression, or in the case where a function returns a value, like randomNUmber.  For example:\n\nvar randSize = randomNumber(5,30);\n\n",
        "U3-Design Mode-ID and Event Handler_markdown_instruction": "# Activate Your Button\nOn the last level you added a button using Design Mode. If you click it, nothing happens. Let's make the button work. \nYour button has been brought over to this level.  \n\n**Goal:** Add code using Design Mode to make the button respond to a click.\n\n# Do This:\n\n<img src=\"https://images.code.org/9ff41c3ea30ece355e91eaca5cdc1e36-image-1444417748945.gif\"  style=\"width: 250px; float: right\">\n\n* **Change ID of button** from “button1” to “redButton”.\n\n* **Insert `onEvent` from Design Mode** by clicking *Insert and show code* under the **Events Tab**.\n\n* Run the program and **look for the output in the *Debug Console*** below the workspace instead of the app window. We will discuss the *Debug Console* on the next level.",
        "U3-Design Mode-ID_markdown_instruction": "# Baker note: we might not need this level, or the message about IDs being important might be able to shift to another level (stays here for now...pending).\n\n# IDs Are Still Important\n\n\n# Do This\n\nTry updating the ID name and then update the code to match. \n\n**Switch to Design Mode** and **edit the ID** to be more descriptive. You can edit it from either the Properties tab or the Events tab.\n\n**Switch to Code Mode** and check out the **dropdown ID menu**. Your new ID should be in the dropdown list!\n\n**Test it out** to make sure it works.\n<img src=\"https://images.code.org/43e3536af5af3ff17b0972a1c6c2a300-image-1444333589342.gif\" style=\"width: 500px;\">\n",
        "U313 Two Buttons with Ids_markdown_instruction": "# Make a Prediction - Learning to Code Better, Faster\nResearch has shown that when you encounter a new piece of code you learn faster by simply **making a prediction about what will happen before you run the program**. It's not actually important if your prediction is correct, but the act of predicting allows you to construct a stronger mental model for how code works and then test your understanding when you run the code.\n\nGood programmers do this all the time. **They don't expect their code is correct the first time they write it.** Instead they get in the habit of running their code, checking their assumptions, and making changes as needed. Programming isn't a fixed set of steps. It's a creative and continuous cycle of writing, testing, and improving code.\n\n# Predict - Observe - Reflect\n<img src=\"https://images.code.org/5fc24f3f3e1ceae4bb196f1005d9e866-image-1444083405061.png\" align=right>This program creates a button and **two event handlers** which listen for a click on that button. \n\n**Predict:** What will happen when the \"Forward\" button is clicked? Force yourself to make a prediction about what the turtle will do! **\"I don't know\" is not a prediction**. Think about the options and talk about it with a classmate: Will it..\n* move forward?\n* turn left?\n* turn left *and* move forward?\n* do nothing?\n* move forward *and* turn left?\n* cause an error?\n* something else? \n\n**Observe:** Once you've made a prediction, close these instructions and **run the program** to observe what happens.\n\n**Reflect:** Was your prediction correct? If not what about your mental model might need to change? Talk about it with a classmate and experiment with the code to make sure you understand what is happening.\n",
        "U313 drag Two Buttons_markdown_instruction": "# Buttons and Unique IDs\nYou may have noticed that the button command has two parameters: `button(id, text)`.  The `text` is the text that actually shows up on the button display, and the `id` (we'll typically write **ID**) is a **unique identifier** for that element in the app.\n\nEach element that appears in the app must have a **unique ID**. In fact, if you try to run a program that has two buttons with same ID you will get a warning message in the console. Watch:\n<img src=\"https://images.code.org/47ec46e0563f63641cc10ef152e9f86e-image-1444074330713.gif\" style=\"border: solid 1px black; width:500px\">\n\nNotice that even though the text on the buttons was different, the IDs were the same, which caused the error message to show up. To get rid of that error message you will have to change the ID of the button from the default `id` to something else.\n\n**Error messages happen to everyone and they are helpful!**: getting an error or warning message when you run your program is *not a big deal*. Programmers actually rely on error messages to tell them where and how to fix their code.\nSometimes error messages are bit cryptic: `WARNING: Line: 2: button() id parameter refers to an id (id) which already exists.` But a warning like this contains helpful information and clues such as the line the error occured on, or some word or command it didn't recognize. \n\n# Do This:\nThe goal here is to experience an error message in a program, study it, and fix it.\n* **Drag** two buttons into the workspace (same as shown above) with the default IDs.\n* **Run** the program to see the warning message in the console.\n* **Read** the warning message to see what it says.\n* **Change** the IDs of the buttons to make them unique. An ID must be specified in quotes. You can use double-quotes: `\"myId\"`, or single quotes: `'myId'`\n* **Re-run the program** to make sure you don't get the error.\n\nOnce you've got two buttons on the screen with different IDs and the program can run without generating the warning, move on to the next level.\n",
        "U313 eventsDetails_markdown_instruction": "# Buttons and Unique Ids\nYou may have noticed that the button command has two parameters: `button(id, text)`.  The 'text' is the text that actually shows up on the button display, and the 'id' (which is shorthand for I.D.) is a **unique identifier** for that element in the app.\n\nEach element that appears in the app must have a **unique id**. In fact, if you try to run a program that has two buttons with same id you will get a warning message in the console. Watch:\n<img src=\"https://images.code.org/47ec46e0563f63641cc10ef152e9f86e-image-1444074330713.gif\" style=\"border: solid 1px black; width:500px\">\n\nNotice that even though the text on the buttons was different, the ids were the same, which caused the error message to show up. To get rid of that error message you will have to change the default button ID of `\"id\"`.\n\n# Do This\nThe only goal here is to experience this kind of warning message. It's not a big deal if it happens to you. It's a very common thing to happen and the computer is trying to tell you how to fix your code.\n\n* **Drag** two buttons into the workspace (same as shown above)\n* **Run** the program with the default values to see the warning message in the console.\n* **Read** the warning message to see what it says.\n* **Change** the ids of the buttons to make them unique, and re-run the program to make sure you don't get the error.\n* **NOTE:** an id must be specified in quotes. You can use double-quotes: `\"myId\"`, or single quotes: `'myId'` \n\n\n",
        "U3L01 Assessment1_markdown_instruction": "Consider the algorithm you designed for today’s activity. Identify two instances where there may be multiple ways to interpret your instructions and suggest improvements that could be made to improve their clarity.\n\n",
        "U3L01 Assessment1_2018_markdown_instruction": "Consider the algorithm you designed for today’s activity. Identify two instances where there may be multiple ways to interpret your instructions and suggest improvements that could be made to improve their clarity.\n\n",
        "U3L01 Assessment3_markdown_instruction": "Describe the features of a programming language that make it different from the language you typically use in everyday life. Explain why a programming language must be created in this way.\n\n",
        "U3L01 Assessment3_2018_markdown_instruction": "Describe the features of a programming language that make it different from the language you typically use in everyday life. Explain why a programming language must be created in this way.\n\n",
        "U3L01 Free Response Getting Started_markdown_instruction": "Complete the \"thinking\" portion of a Think-Pair-Share activity here. \n\nPlay the part of a \"lazy worker.\" \n\n* What task do you dislike doing that you can imagine a computer program could take over for you? \n* List a few important steps that a computer program would have to complete. \n* Do you think this would be an easy or hard task to program? Why?\n",
        "U3L01 Free Response Wrap Up_markdown_instruction": "* Describe the instructions you followed in the block sculpture algorithm that were the most helpful?\n* What do you think is the hardest part of writing a useful algorithm? \n* If you were to repeat this activity, how would you improve the algorithm you wrote? \n\n\n",
        "U3L02 Assessment_markdown_instruction": "This lesson introduced the notion of \"efficiency\" in programming, and that it might mean different things at different times.  Think of an example *outside* of computer science in which you have heard the term “efficiency” and compare it to the ways we talked about efficiency in programming.  \n\nIn what ways is the meaning of \"efficiency\" the same? In what ways is it different?\n",
        "U3L02 Assessment_2018_markdown_instruction": "This lesson introduced the notion of \"efficiency\" in programming, and that it might mean different things at different times.  Think of an example *outside* of computer science in which you have heard the term “efficiency” and compare it to the ways we talked about efficiency in programming.  \n\nIn what ways is the meaning of \"efficiency\" the same? In what ways is it different?\n",
        "U3L02 Free Response Getting Started_markdown_instruction": "Today we solved a series of problems with a limited set of commands (only 4). Give at least one reason why it's useful to learn how to solve and program solutions with a limited set of commands.  \n",
        "U3L02 Free Response Getting Started_2018_markdown_instruction": "Today we solved a series of problems with a limited set of commands (only 4). Give at least one reason why it's useful to learn how to solve and program solutions with a limited set of commands.  \n",
        "U3L02 Free Response Wrap Up_markdown_instruction": "Summarize your experiences with this first App Lab lesson by answering the following questions:\n\n* What surprised you about programming with such a small set of basic commands?\n* Were you able to be creative with such a limited set of tools?\n* What was most frustrating about this activity? If you could add one additional simple command, what would it be and why?\n\n\n",
        "U3L02 Free Response Wrap Up_2018_markdown_instruction": "Summarize your experiences with this first App Lab lesson by answering the following questions:\n\n* What surprised you about programming with such a small set of basic commands?\n* Were you able to be creative with such a limited set of tools?\n* What was most frustrating about this activity? If you could add one additional simple command, what would it be and why?\n\n\n",
        "U3L03 - draw rect function_markdown_instruction": "This is your code from the previous level.  Did you know that you can write functions that call your own functions?\n\nTake the code that draws the rectangle and move into a new function called `drawRectangle()`. The first line of your program should be a single call to `drawRectangle()`. The rest of the code should just be function definitions. \n\nNOTE: your program will still do the same thing.  We are just changing the way it is written to demonstrate that you can use functions you've already written as building blocks in new functions.\n\n![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)",
        "U3L03 - draw rect function_2018_markdown_instruction": "This is your code from the previous level.  Did you know that you can write functions that call your own functions?\n\nTake the code that draws the rectangle and move into a new function called `drawRectangle()`. The first line of your program should be a single call to `drawRectangle()`. The rest of the code should just be function definitions. \n\nNOTE: your program will still do the same thing.  We are just changing the way it is written to demonstrate that you can use functions you've already written as building blocks in new functions.\n\n![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)",
        "U3L03 - draw step_markdown_instruction": "We are going to walk you through a process that shows you the benefit of thinking about programming tasks in terms of writing functions.\n\n* Over the next 3 levels we are going to write a program that draws the figure shown at right which sort of looks like a jagged diamond shape. <img src=\"https://images.code.org/53679cc10ff90b6120184d93ad012797-image-1441770558200.png\" align='right'>\n\n* If you look at this image you might recognize elements that repeat: this is a 4-sided figure, and each side is made up of some zig-zag steps.\n\n* We're going to break the programming down into useable parts and then use those parts as building blocks to make this more complex drawing.\n\n* First let's **define** a function that *draws just one of these zig-zag steps.*  We've started you out with a definition of `right()` that you can use...\n\n# Do This:\n\n**Define** a function named `function drawStep()` which makes the turtle move forward and left as shown. \n\n**Note**: at the end the turtle should be facing the same direction it started.\n\n![](https://images.code.org/4fa605353695afa0cd01ec01a1e2c709-image-1441772033658.gif)",
        "U3L03 - draw step_2018_markdown_instruction": "We are going to walk you through a process that shows you the benefit of thinking about programming tasks in terms of writing functions.\n\n* Over the next 3 levels we are going to write a program that draws the figure shown at right which sort of looks like a jagged diamond shape. <img src=\"https://images.code.org/53679cc10ff90b6120184d93ad012797-image-1441770558200.png\" align='right'>\n\n* If you look at this image you might recognize elements that repeat: this is a 4-sided figure, and each side is made up of some zig-zag steps.\n\n* We're going to break the programming down into useable parts and then use those parts as building blocks to make this more complex drawing.\n\n* First let's **define** a function that *draws just one of these zig-zag steps.*  We've started you out with a definition of `right()` that you can use...\n\n# Do This:\n\n**Define** a function named `function drawStep()` which makes the turtle move forward and left as shown. \n\n**Note**: at the end the turtle should be facing the same direction it started.\n\n![](https://images.code.org/4fa605353695afa0cd01ec01a1e2c709-image-1441772033658.gif)",
        "U3L03 Define and use turnAround_markdown_instruction": "# Do This:\n**Define** a function called `turnAround` which turns the turtle around. Once you've defined the function **call** it to make sure it works as you expect and then move the turtle forward, as shown below. \n\n![](https://images.code.org/4c31307ec14cc6dfd65589f2a813120e-image-1447884881189.gif)\n\n**Remember** typically, you call a function in lines of code *above* the function definition - this might make you  feel like you are working in reverse, since you first write the code to define the function and *then* add a line to call it.  Here is the `moveTwice` example from the video. You should do something similar for turnAround:\n\n![](https://images.code.org/3faf16575757ffae616dffd761085ab5-image-1467818996127.gif)",
        "U3L03 Define and use turnAround_2018_markdown_instruction": "# Do This:\n**Define** a function called `turnAround` which turns the turtle around. Once you've defined the function **call** it to make sure it works as you expect and then move the turtle forward, as shown below. \n\n![](https://images.code.org/4c31307ec14cc6dfd65589f2a813120e-image-1447884881189.gif)\n\n**Remember** typically, you call a function in lines of code *above* the function definition - this might make you  feel like you are working in reverse, since you first write the code to define the function and *then* add a line to call it.  Here is the `moveTwice` example from the video. You should do something similar for turnAround:\n\n![](https://images.code.org/3faf16575757ffae616dffd761085ab5-image-1467818996127.gif)",
        "U3L03 Draw a T using turnAround_markdown_instruction": "# Do This:\nGet some more practice **calling** a function by using `turnAround()` along with your old friend the `moveForward()` function to create a plus sign that is centered at the turtle's first position, as shown below. Even though you just wrote this function, we've already **defined** `turnAround()` for you. Remember, add lines of code that call the function *above* the definition.\n\n*NOTE: the turtle should end where it started, which is also the middle of the plus sign, as shown below. Each of the four segments of the plus sign are one `moveForward()` long.* \n\n![](https://images.code.org/9d6c2d7d69c2f1c68c5b273bdbae65c7-image-1441296690812.11.14 AM.png)",
        "U3L03 Draw a T using turnAround_2018_markdown_instruction": "# Do This:\nGet some more practice **calling** a function by using `turnAround()` along with your old friend the `moveForward()` function to create a plus sign that is centered at the turtle's first position, as shown below. Even though you just wrote this function, we've already **defined** `turnAround()` for you. Remember, add lines of code that call the function *above* the definition.\n\n*NOTE: the turtle should end where it started, which is also the middle of the plus sign, as shown below. Each of the four segments of the plus sign are one `moveForward()` long.* \n\n![](https://images.code.org/9d6c2d7d69c2f1c68c5b273bdbae65c7-image-1441296690812.11.14 AM.png)",
        "U3L03 Free Response Getting Started_markdown_instruction": "In the previous lesson we created simple turtle drawings using only four commands. At some point you probably wished that more commands were available to you. Describe a command you wanted to be able to use and explain why you wanted to use it. If you have time try to brainstorm additional commands as well.\n",
        "U3L03 Free Response Reflection_markdown_instruction": "Respond to your teacher's prompt in the space below.\n",
        "U3L03 Free Response Wrap Up_markdown_instruction": "In your own words, explain at least one reason why programming languages have functions.  Include an example of something you did in this lesson that demonstrates the reason you describe.\n\n",
        "U3L03 Free Response Wrap Up_2018_markdown_instruction": "In your own words, explain at least one reason why programming languages have functions.  Include an example of something you did in this lesson that demonstrates the reason you describe.\n\n",
        "U3L03 define turnRight and draw a rectangle_markdown_instruction": "# Draw a rectangle with right\n\nAs you know, in order to turn right we have to call `turnLeft()` three times.  We've started you out with a stub that **defines** a function called `right()`.  Start by adding code inside the function definition that will turn the turtle to the right (by turning left three times) when called. \n\nThen **use** this function in some code to draw a rectangle, as shown below.  Make sure the turtle ends facing the same direction and in the same location it started. *Note that the rectangle below is 2 moveForwards tall and 1 moveForward wide*\n\n![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)\n\n**Note**: Your program will still do the same thing. We are just changing the way it is written to demonstrate that you can use functions you've already written as building blocks in new functions.",
        "U3L03 define turnRight and draw a rectangle_2018_markdown_instruction": "# Draw a rectangle with right\n\nAs you know, in order to turn right we have to call `turnLeft()` three times.  We've started you out with a stub that **defines** a function called `right()`.  Start by adding code inside the function definition that will turn the turtle to the right (by turning left three times) when called. \n\nThen **use** this function in some code to draw a rectangle, as shown below.  Make sure the turtle ends facing the same direction and in the same location it started. *Note that the rectangle below is 2 moveForwards tall and 1 moveForward wide*\n\n![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)\n\n**Note**: Your program will still do the same thing. We are just changing the way it is written to demonstrate that you can use functions you've already written as building blocks in new functions.",
        "U3L03 draw diamond_markdown_instruction": "# Do This:\nWe're finally ready to make our diamond! **Define** a function named `function drawDiamond()` that **calls** `drawSide()` multiple times in order to complete the drawing. Your final solution should be triggered by **a single call** to `drawDiamond()`. \n\n<table>\n<tr>\n<td><img src=\"https://s3.amazonaws.com/uploads.hipchat.com/65395/961892/NoxVhFlLf9HlybZ/upload.png\" width=200></td>\n<td><img src=\"https://images.code.org/dca51c5b17a8c0778787337c3609557c-image-1441802821237.gif\" width=200></td>\n</tr>\n</table>\n\n<hr>\n\n**Notes**:\n\nIn the end you will have 4 functions defined:\n\n* drawDiamond()\n* drawSide()\n* drawStep()\n* right()\n\nThese 4 functions work sort of like a hierarchy of top-down design.  At the top is `drawDiamond()` which makes calls to `drawSide()`, which makes calls to `drawStep()` and `right()`.\n\n\n",
        "U3L03 draw diamond_2018_markdown_instruction": "# Do This:\nWe're finally ready to make our diamond! **Define** a function named `function drawDiamond()` that **calls** `drawSide()` multiple times in order to complete the drawing. Your final solution should be triggered by **a single call** to `drawDiamond()`. \n\n<table>\n<tr>\n<td><img src=\"https://s3.amazonaws.com/uploads.hipchat.com/65395/961892/NoxVhFlLf9HlybZ/upload.png\" width=200></td>\n<td><img src=\"https://images.code.org/dca51c5b17a8c0778787337c3609557c-image-1441802821237.gif\" width=200></td>\n</tr>\n</table>\n\n<hr>\n\n**Notes**:\n\nIn the end you will have 4 functions defined:\n\n* drawDiamond()\n* drawSide()\n* drawStep()\n* right()\n\nThese 4 functions work sort of like a hierarchy of top-down design.  At the top is `drawDiamond()` which makes calls to `drawSide()`, which makes calls to `drawStep()` and `right()`.\n\n\n",
        "U3L04 - 3 by 3 with functions_markdown_instruction": "# Do This:\n\nWe're going to revisit a familiar problem, **drawing the 3x3 square as efficiently as possible**. The only difference is that this time you are armed with the ability to create **layers of functions** to help you design more elegant and efficient solutions. Use the techniques you've learned for **breaking down problems into layers of functions** in order to improve upon your previous solution.\n\n![](https://images.code.org/121251ed82b4986848062abacdef6963-image-1441824892425.54.18 PM.png)",
        "U3L04 - 3 by 3 with functions_2018_markdown_instruction": "# Do This:\n\nWe're going to revisit a familiar problem, **drawing the 3x3 square as efficiently as possible**. The only difference is that this time you are armed with the ability to create **layers of functions** to help you design more elegant and efficient solutions. Use the techniques you've learned for **breaking down problems into layers of functions** in order to improve upon your previous solution.\n\n![](https://images.code.org/121251ed82b4986848062abacdef6963-image-1441824892425.54.18 PM.png)",
        "U3L04 - six by six lines_markdown_instruction": "Code a solution to the highway lines problem.  Your solution should use functions to reduce clutter and improve readability of your solution.\n\n![](https://images.code.org/23a714face9925e1eb8dfe3c133eb22d-image-1441815998620.png)",
        "U3L04 - snowflake_markdown_instruction": "# Do This:\n\nYou should have already worked with a partner to break down the design below into its multiple layers of functions. Now you'll have an opportunity to program your solution. Here are a few things to keep in mind:\n\n* Identify useful patterns that can be reused and give them **their own functions**.\n* Remember: The functions you design **can call one another**. This is how you create layers of abstraction.\n* Functions should be given names that are **descriptive and meaningful**.\n* Your program should be kicked off with a single call to a function that makes calls to subsequent functions.\n\n\n![](https://images.code.org/afed66de9dc3cdb10f627a176139c58f-image-1441822234028.09.33 PM.png)",
        "U3L04 - snowflake_2018_markdown_instruction": "# Do This:\n\nYou should have already worked with a partner to break down the design below into its multiple layers of functions. Now you'll have an opportunity to program your solution. Here are a few things to keep in mind:\n\n* Identify useful patterns that can be reused and give them **their own functions**.\n* Remember: The functions you design **can call one another**. This is how you create layers of abstraction.\n* Functions should be given names that are **descriptive and meaningful**.\n* Your program should be kicked off with a single call to a function that makes calls to subsequent functions.\n\n\n![](https://images.code.org/afed66de9dc3cdb10f627a176139c58f-image-1441822234028.09.33 PM.png)",
        "U3L04 Assessment1_markdown_instruction": "Consider the figure below.  Use top-down thinking to design a solution to the problem.  In the space provided write a list of **just the names** of the functions that you would write in a program that draws this figure.  (Assume that the long line segments are 6 turtle moves long).\n\n![](https://images.code.org/43895f8ceccb12f72e7f5ba03152a6e6-image-1441914144956.png)\n\n",
        "U3L04 Assessment1_2018_markdown_instruction": "Consider the figure below.  Use top-down thinking to design a solution to the problem.  In the space provided write a list of **just the names** of the functions that you would write in a program that draws this figure.  (Assume that the long line segments are 6 turtle moves long).\n\n![](https://images.code.org/43895f8ceccb12f72e7f5ba03152a6e6-image-1441914144956.png)\n\n",
        "U3L04 Free Response Getting Started_markdown_instruction": "Define the term \"abstraction.\" \n\nWhy is abstraction an important concept in computer science?\n",
        "U3L04 Free Response Reflection_markdown_instruction": "Respond to your teacher's prompt below.\n",
        "U3L04 Free Response Wrap Up_markdown_instruction": "In the Create Performance Task, you will be asked to identify an abstraction in your program and explain how it helps manage the complexity of the program. Functions are a form of abstraction. Pick a function you wrote in your solution to the 3x3 square problem and explain how it helps manage the complexity of your program.\n",
        "U3L04 Free Response Wrap Up_2018_markdown_instruction": "In the Create Performance Task, you will be asked to identify an abstraction in your program and explain how it helps manage the complexity of the program. Functions are a form of abstraction. Pick a function you wrote in your solution to the 3x3 square problem and explain how it helps manage the complexity of your program.\n",
        "U3L05 Assessment2_markdown_instruction": "Describe the trade-offs of writing highly efficient code. Give an example.\n",
        "U3L05 Assessment3_markdown_instruction": "How can functions be used to make code more readable?\n",
        "U3L05 Assessment4_markdown_instruction": "How can functions be used to make code more efficient in effort, space, or time?\n",
        "U3L05 Free Response Getting Started_markdown_instruction": "Efficiency means different things depending upon the activity. What does it mean to be efficient in these activities?\n\n* Doing homework\n* Packing a bag \n* Getting from one place to another \n* Doing household chores \n* Driving a car \n* Managing a budget \n\n\n",
        "U3L05 Free Response Reflection_markdown_instruction": "In less than 50 words, summarize what efficiency means in programming.\n",
        "U3L06 - moveForwardwithParams_markdown_instruction": "# A New Way to Move\nThe `moveForward()` turtle command that we've used so far moves the turtle the same amount every time (25 pixels in fact). Similarly, `turnLeft()` turns the turtle to the left exactly 90 degrees. Today we are going to see how some functions can **accept input**, such as a number, to more exactly control behavior. For example, you can write `moveForward(103)` to move the turtle exactly 103 pixels if you like.\n\n# Do This:\n\n**How far is it to the top edge of the screen?**\n\nRun the program to see the new version of `moveForward()` in action. Then **changing only the number supplied to `moveForward()`**, move the turtle to the top edge of the screen. Experiment to find out the distance in pixels between where the turtle starts and the top edge of the screen.\n\nOnce you've found it, compare with a neighbor to see that you're seeing the same thing and click **Finish** to move on.  \n\n**Note:** There might be slight differences depending on whether you get the turtle to just touch the edge, or go off the screen entirely.",
        "U3L06 - moveForwardwithParams_2018_markdown_instruction": "# A New Way to Move\nThe `moveForward()` turtle command that we've used so far moves the turtle the same amount every time (25 pixels in fact). Similarly, `turnLeft()` turns the turtle to the left exactly 90 degrees. Today we are going to see how some functions can **accept input**, such as a number, to more exactly control behavior. For example, you can write `moveForward(103)` to move the turtle exactly 103 pixels if you like.\n\n# Do This:\n\n**How far is it to the top edge of the screen?**\n\nRun the program to see the new version of `moveForward()` in action. Then **changing only the number supplied to `moveForward()`**, move the turtle to the top edge of the screen. Experiment to find out the distance in pixels between where the turtle starts and the top edge of the screen.\n\nOnce you've found it, compare with a neighbor to see that you're seeing the same thing and click **Finish** to move on.  \n\n**Note:** There might be slight differences depending on whether you get the turtle to just touch the edge, or go off the screen entirely.",
        "U3L06 Assessment_markdown_instruction": "It is said that *functions with parameters generalize the behavior of a more specific command and allow programmers to use functions instead of duplicated code.* Explain what this means to you using the difference between turnLeft() and turnLeft(angle) as an example.\n\n",
        "U3L06 Assessment_2018_markdown_instruction": "It is said that *functions with parameters generalize the behavior of a more specific command and allow programmers to use functions instead of duplicated code.* Explain what this means to you using the difference between turnLeft() and turnLeft(angle) as an example.\n\n",
        "U3L06 Challenge 2 purple square_markdown_instruction": "# Documentation\nAs we move forward you are going to see more and more (and more!) commands added to the toolbox.  What happens if you see a command and don't understand it, or you forget how it works?  Don't worry, this happens to professional programmers all the time! No one actually memorizes long lists of commands.  Most programming environments have ways to quickly look up documentation about the commands of the language you're using.  **Good news: App Lab has documentation too!**\n\n![](https://images.code.org/3fe10e1b65edb37306099098161be001-image-1441990727053.gif)\n\nWhen you **hover your mouse over a command** in the block palette a bubble pops up with a quick reminder of what a function does, and what its parameters are. If you click \"See examples\", you will be taken to more detailed documentation of the command which includes **code examples** that you can even copy and paste.\n\n# More New Commands: Color and Width\n\nTwo powerful new commands have been added to the toolbox, `penColor()` and `penWidth()`. \n\n**Read the documentation:** Read through the documentation for `penColor()` and `penWidth()` which let you set the color and size of the pen your turtle uses to draw. The documentation for `penColor()` has a lot in it!  For now just look at the **named colors**, things like \"red\", \"green\", etc.  Don't worry, you'll get a lot of opportunities to practice with colors in a variety of ways.  We're just getting started!\n\n# Do This:\n\n**Draw the square:** Use pen color and width functions to draw the thick blue square shown below.  The size of the square doesn't matter.\n\n<img src=\"https://images.code.org/6ed36a408e568a0410f10d017550843f-image-1441904430698.png\" style=\"height: 250px\">\n",
        "U3L06 Challenge 2 purple square_2018_markdown_instruction": "# Documentation\nAs we move forward you are going to see more and more (and more!) commands added to the toolbox.  What happens if you see a command and don't understand it, or you forget how it works?  Don't worry, this happens to professional programmers all the time! No one actually memorizes long lists of commands.  Most programming environments have ways to quickly look up documentation about the commands of the language you're using.  **Good news: App Lab has documentation too!**\n\n![](https://images.code.org/3fe10e1b65edb37306099098161be001-image-1441990727053.gif)\n\nWhen you **hover your mouse over a command** in the block palette a bubble pops up with a quick reminder of what a function does, and what its parameters are. If you click \"See examples\", you will be taken to more detailed documentation of the command which includes **code examples** that you can even copy and paste.\n\n# More New Commands: Color and Width\n\nTwo powerful new commands have been added to the toolbox, `penColor()` and `penWidth()`. \n\n**Read the documentation:** Read through the documentation for `penColor()` and `penWidth()` which let you set the color and size of the pen your turtle uses to draw. The documentation for `penColor()` has a lot in it!  For now just look at the **named colors**, things like \"red\", \"green\", etc.  Don't worry, you'll get a lot of opportunities to practice with colors in a variety of ways.  We're just getting started!\n\n# Do This:\n\n**Draw the square:** Use pen color and width functions to draw the thick blue square shown below.  The size of the square doesn't matter.\n\n<img src=\"https://images.code.org/6ed36a408e568a0410f10d017550843f-image-1441904430698.png\" style=\"height: 250px\">\n",
        "U3L06 Challenge 3 fill pink_markdown_instruction": "# Drawing with Dots\n\nWe've added a new command called `dot()`.  \n\n**Read the documentation** for the `dot()` command.\n\n**Make a \"snowman\"**\n\n1. Set the pen color to some new color (we made ours pink)\n\t* Note: even if you just want the default dot color - black - explicitly set the color to black here.\n\n2. Using that color, make a dot so big that it fills the screen.\n\n3. In a different color, make 3 dots in a row, each one smaller than the next. (We made our dots white to look like a snowman)\n\nYou might want to go back to the documentation for `penColor()` to look up other colors to use.\n\n![](https://images.code.org/e63f3cf801abf22c01c475031c46ff66-image-1441992129690.gif)",
        "U3L06 Challenge 3 fill pink_2018_markdown_instruction": "# Drawing with Dots\n\nWe've added a new command called `dot()`.  \n\n**Read the documentation** for the `dot()` command.\n\n**Make a \"snowman\"**\n\n1. Set the pen color to some new color (we made ours pink)\n\t* Note: even if you just want the default dot color - black - explicitly set the color to black here.\n\n2. Using that color, make a dot so big that it fills the screen.\n\n3. In a different color, make 3 dots in a row, each one smaller than the next. (We made our dots white to look like a snowman)\n\nYou might want to go back to the documentation for `penColor()` to look up other colors to use.\n\n![](https://images.code.org/e63f3cf801abf22c01c475031c46ff66-image-1441992129690.gif)",
        "U3L06 Challenge 8 make your own_markdown_instruction": "# The Full Turtle API\n\nWe've added a few more commands to the toolbox. At this point you have access to every turtle command provided by App Lab. As we've already seen with our exploration of functions you can combine these commands to create more complex functionality, but at the lowest level all of your code will be making use of the set of commands provided by App Lab.\n\n<img src=\"https://images.code.org/7648c5293d04a57e4f715b5c08899ff9-image-1441996324573.png\" style=\"height: 250px; float: left; margin: 10px\">\n\nCode you write will always be based upon the commands that are provided by the programming language you are using. When several commands are provided in a logical chunk, like the set of turtle commands, we refer to them collectively as a **library** of functions. The total set of commands that a language provides access to is called the **application program interface**, or simply an **API**. \n\nAs you gain more experience you will gain familiarity with the API for the language you are using, but you will still want to return to the **API documentation** from time to time to remind yourself what functionality a language offers.\n\nCongratulations, you've really come a long way as a turtle artist! \n\n# Do This:\n\n**Draw whatever you like!**  The only requirements are:\n\n* use at least 3 different colors\n* use moveTo\n\nExplore the documentation for any new commands you see and use your skills as both an artist and user of **API documentation** to **draw something of your own choosing.**\n\nIf in doubt: try to re-create \"I [heart] CS\" drawing shown here.",
        "U3L06 Challenge 8 make your own_2018_markdown_instruction": "# The Full Turtle API\n\nWe've added a few more commands to the toolbox. At this point you have access to every turtle command provided by App Lab. As we've already seen with our exploration of functions you can combine these commands to create more complex functionality, but at the lowest level all of your code will be making use of the set of commands provided by App Lab.\n\n<img src=\"https://images.code.org/7648c5293d04a57e4f715b5c08899ff9-image-1441996324573.png\" style=\"height: 250px; float: left; margin: 10px\">\n\nCode you write will always be based upon the commands that are provided by the programming language you are using. When several commands are provided in a logical chunk, like the set of turtle commands, we refer to them collectively as a **library** of functions. The total set of commands that a language provides access to is called the **application program interface**, or simply an **API**. \n\nAs you gain more experience you will gain familiarity with the API for the language you are using, but you will still want to return to the **API documentation** from time to time to remind yourself what functionality a language offers.\n\nCongratulations, you've really come a long way as a turtle artist! \n\n# Do This:\n\n**Draw whatever you like!**  The only requirements are:\n\n* use at least 3 different colors\n* use moveTo\n\nExplore the documentation for any new commands you see and use your skills as both an artist and user of **API documentation** to **draw something of your own choosing.**\n\nIf in doubt: try to re-create \"I [heart] CS\" drawing shown here.",
        "U3L06 Free Response Getting Started_markdown_instruction": "Brainstorm a new command you would like to include in a turtle drawing program. \n\n* Would you choose to improve a commands you have already used or something entirely new? \n* How would it work? \n* Would the command need any additional information to successfully execute the instructions?\n",
        "U3L06 Free Response Reflection_markdown_instruction": "Respond to your teacher's prompt in the space below.\n",
        "U3L06 Free Response Wrap Up_markdown_instruction": "List 3 interesting functions you discovered in the AppLab API. \n\nSelect one of them and describe how you think you might want to use it in a future programming project.\n",
        "U3L07 - Free Play Loops and Random_markdown_instruction": "# Free Play!\n(Optional)\n\nMess around with your \"Under the Sea\" scene to make it do different things.  \n\n**Ideas:**\n* Make different amounts of each component.\n* Play with the ranges of random values.\n* Add other creatures.\n* Play with color values to give the scene a different feel (nighttime? red dawn?).\n* Get creative!\n\n# Don't Worry... You Can't Screw It Up\n* Play around as much as you want - you can **always go back to a previous version**.\n* Each time you hit \"Run\" your code is saved in a way that lets you get back to it.\n* Notice that there is button at the top of the page called **Version History** that lets you see and use any previous version of your code.\n\n![](https://images.code.org/881d72d190c0637705f8021369962701-image-1443117323816.gif)",
        "U3L07 - Free Play Loops and Random_2018_markdown_instruction": "# Free Play!\n(Optional)\n\nMess around with your \"Under the Sea\" scene to make it do different things.  \n\n**Ideas:**\n* Make different amounts of each component.\n* Play with the ranges of random values.\n* Add other creatures.\n* Play with color values to give the scene a different feel (nighttime? red dawn?).\n* Get creative!\n\n# Don't Worry... You Can't Screw It Up\n* Play around as much as you want - you can **always go back to a previous version**.\n* Each time you hit \"Run\" your code is saved in a way that lets you get back to it.\n* Notice that there is button at the top of the page called **Version History** that lets you see and use any previous version of your code.\n\n![](https://images.code.org/881d72d190c0637705f8021369962701-image-1443117323816.gif)",
        "U3L07 - Starry Night Starter Code_markdown_instruction": "You are going to use loops and random numbers to generate an image of starry night sky similar to one shown here.  We have given you some starter code to generate the ground and sky (just two giant dots), you will add code to this project to make the stars, grass, and moon.  All of the effects are clever applications of turtle dots, lines, and colors.  To get started, follow the series of steps suggested in the accompanying worksheet. \n\n<img src=\"https://images.code.org/0f42e475e7600ac33d31bdf5dee70726-image-1459547325746.gif\" style=\"width: 250px\">",
        "U3L07 - createTriangleParam_markdown_instruction": "# Defining Functions with Parameters\n\nThis time you're going to write your own function with parameters to complete an image. Two function calls to `drawTriangle` have been placed at the top of the program but the function itself needs to be defined.  The program should draw this:\n\n![](https://images.code.org/4a96eff03ba79b881b98137048140953-image-1442523578705.59.20 PM.png)\n\n# Do This:\n**Complete** the function definition for `drawTriangle(sideLength)` . Notice that you have already been given a **descriptive and meaningful parameter name**, `sideLength`, but you can change it if you wish.\n\n**Hint:** you should put the pen down and pick it up as part of the definition of `drawTriangle` - that way you guarantee that a call to drawTriangle will always actually draw. Picking the pen up as the last act of the function is a nice thing to do for any other code that might not be expecting drawTriangle to have a side effect of putting the pen down.\n\nAs a reminder of how to use a parameter within the function here is a correct version of `drawSquare(size)` for reference.\n\n![](https://images.code.org/ead2720df19b117cae753c4397dd832d-image-1442868072299.png)",
        "U3L07 - createTriangleParam_2018_markdown_instruction": "# Defining Functions with Parameters\n\nThis time you're going to write your own function with parameters to complete an image. Two function calls to `drawTriangle` have been placed at the top of the program but the function itself needs to be defined.  The program should draw this:\n\n![](https://images.code.org/4a96eff03ba79b881b98137048140953-image-1442523578705.59.20 PM.png)\n\n# Do This:\n**Complete** the function definition for `drawTriangle(sideLength)` . Notice that you have already been given a **descriptive and meaningful parameter name**, `sideLength`, but you can change it if you wish.\n\n**Hint:** you should put the pen down and pick it up as part of the definition of `drawTriangle` - that way you guarantee that a call to drawTriangle will always actually draw. Picking the pen up as the last act of the function is a nice thing to do for any other code that might not be expecting drawTriangle to have a side effect of putting the pen down.\n\nAs a reminder of how to use a parameter within the function here is a correct version of `drawSquare(size)` for reference.\n\n![](https://images.code.org/ead2720df19b117cae753c4397dd832d-image-1442868072299.png)",
        "U3L07 - fish_markdown_instruction": "# Add Fish\n\nThe next high-level function you will write is `drawAllFish`. A version of `drawFish` with parameters has been provided for you to use.\n\n# Do This:\n\n* **Read** the `drawFish` function to know how it works and what **parameters** it accepts.\n\n* **Add a loop** to `drawAllFish`.\n\n* **Place the commands already inside the function in your loop.** This way your code will **move the turtle randomly** around the **top 360 pixels** of the image and draw **15 fish** of random size between **5 and 20** using `drawFish`.\n\n* Once you have your loop working try calling `drawFish` with random values for its `red`, `green`, and `blue` parameters to get differently colored fish.\n\n![](https://images.code.org/cbbb8e02c14cbc2d199ede4531090513-image-1443046439253.12.35 PM.png)",
        "U3L07 - fish_2018_markdown_instruction": "# Add Fish\n\nThe next high-level function you will write is `drawAllFish`. A version of `drawFish` with parameters has been provided for you to use.\n\n# Do This:\n\n* **Read** the `drawFish` function to know how it works and what **parameters** it accepts.\n\n* **Add a loop** to `drawAllFish`.\n\n* **Place the commands already inside the function in your loop.** This way your code will **move the turtle randomly** around the **top 360 pixels** of the image and draw **15 fish** of random size between **5 and 20** using `drawFish`.\n\n* Once you have your loop working try calling `drawFish` with random values for its `red`, `green`, and `blue` parameters to get differently colored fish.\n\n![](https://images.code.org/cbbb8e02c14cbc2d199ede4531090513-image-1443046439253.12.35 PM.png)",
        "U3L07 - randomDots1_markdown_instruction": "# Now try it: Looping with Random Values\n\n<img src=\"https://images.code.org/520e45a90988b04bb0ff3baa184f080a-image-1443108426597.png\" style=\"width: 100px; float: right;\">\n\nIf you add some randomness to turtle behavior inside a loop, the program will run a little differently every time which can make for some cool effects.\n\nYou're about to see a program in which the turtle **moves to a random location** each iteration of the loop, and **draws a randomly-sized dot** that also has a **random color**.  We've also made the dot semi-transparent by setting the alpha value to 0.5 (50% transparency).\n\n# Do This:\n\n**Figure out how many iterations** (number of times the loop runs) you need to consistently fill the screen entirely with dots so none of the background is showing.  It will be a little different every time so you'll need to experiment.\n\n**Compare what you found** with a neighbor to see how close your results are.  Then **move on**.",
        "U3L07 - randomDots1_2018_markdown_instruction": "# Now try it: Looping with Random Values\n\n<img src=\"https://images.code.org/520e45a90988b04bb0ff3baa184f080a-image-1443108426597.png\" style=\"width: 100px; float: right;\">\n\nIf you add some randomness to turtle behavior inside a loop, the program will run a little differently every time which can make for some cool effects.\n\nYou're about to see a program in which the turtle **moves to a random location** each iteration of the loop, and **draws a randomly-sized dot** that also has a **random color**.  We've also made the dot semi-transparent by setting the alpha value to 0.5 (50% transparency).\n\n# Do This:\n\n**Figure out how many iterations** (number of times the loop runs) you need to consistently fill the screen entirely with dots so none of the background is showing.  It will be a little different every time so you'll need to experiment.\n\n**Compare what you found** with a neighbor to see how close your results are.  Then **move on**.",
        "U3L07 - randomSquare_markdown_instruction": "# Practice Using Loops - Part 2\n\nLet's look at the second example from the video. \n\nUse a `for` loop to call a function that you wrote.  We've provided the code for the `drawSquare` function for you. \n\n**Drag out** a `for` loop.\n\n**Inside the loop** add a call to `drawSquare`, and a call to `turnRight`.\n\n![](https://images.code.org/c4037292ac237ac60919fae2c24790db-image-1443104130552.gif)\n\n**Run the program** to see what's happening.\n\n# Do This:\nChange the number of loop iterations to draw a lot of squares.  Try to create the figure shown below (or something similar).  HINT: the image below has 72 squares in it.\n\n![](https://images.code.org/e4d3f180b2f1e421a96d40ecacce029a-image-1443104869913.gif)\n\nOnce you've played enough to get the hang of calling a function from inside a loop then **move on**.",
        "U3L07 - randomSquare_2018_markdown_instruction": "# Practice Using Loops - Part 2\n\nLet's look at the second example from the video. \n\nUse a `for` loop to call a function that you wrote.  We've provided the code for the `drawSquare` function for you. \n\n**Drag out** a `for` loop.\n\n**Inside the loop** add a call to `drawSquare`, and a call to `turnRight`.\n\n![](https://images.code.org/c4037292ac237ac60919fae2c24790db-image-1443104130552.gif)\n\n**Run the program** to see what's happening.\n\n# Do This:\nChange the number of loop iterations to draw a lot of squares.  Try to create the figure shown below (or something similar).  HINT: the image below has 72 squares in it.\n\n![](https://images.code.org/e4d3f180b2f1e421a96d40ecacce029a-image-1443104869913.gif)\n\nOnce you've played enough to get the hang of calling a function from inside a loop then **move on**.",
        "U3L07 - seaStar_markdown_instruction": "# Add Sea Stars\n\nWe're now ready to add sea stars to our image by writing `drawAllSeaStars`. Recall that we've already written loops to draw much more complex stars. \n\n# Do This:\n\n* **Read** the `drawSeaStar` function to know how it works and what **parameters** it accepts.\n\n* **First: Update** `drawSeaStar` to use a `for` loop \n\n\t* `drawSeaStar` has a portion of code that uses a longer sequence of repetitious single commands.  \n    * Find the pattern and \"wrap a loop\" around it so that the repetition is done with a loop rather than many lines of declarative function calls.\n\n* **Second: Add a loop** to `drawAllSeaStars`.\n    \n\t* **Place the commands already inside the function in your loop.** This way your code will **move the turtle randomly** around the **bottom pixels (y values between 360 and 450)** of the image.\n\n* **Draw 5 sea stars** of random size between **10 and 30** using `drawSeaStar`.\n\n![](https://images.code.org/1aadf83bcecaf5ca6c505e46d43e5f45-image-1443046811335.20.04 PM.png)",
        "U3L07 - seaStar_2018_markdown_instruction": "# Add Sea Stars\n\nWe're now ready to add sea stars to our image by writing `drawAllSeaStars`. Recall that we've already written loops to draw much more complex stars. \n\n# Do This:\n\n* **Read** the `drawSeaStar` function to know how it works and what **parameters** it accepts.\n\n* **First: Update** `drawSeaStar` to use a `for` loop \n\n\t* `drawSeaStar` has a portion of code that uses a longer sequence of repetitious single commands.  \n    * Find the pattern and \"wrap a loop\" around it so that the repetition is done with a loop rather than many lines of declarative function calls.\n\n* **Second: Add a loop** to `drawAllSeaStars`.\n    \n\t* **Place the commands already inside the function in your loop.** This way your code will **move the turtle randomly** around the **bottom pixels (y values between 360 and 450)** of the image.\n\n* **Draw 5 sea stars** of random size between **10 and 30** using `drawSeaStar`.\n\n![](https://images.code.org/1aadf83bcecaf5ca6c505e46d43e5f45-image-1443046811335.20.04 PM.png)",
        "U3L07 Free Response Getting Started_markdown_instruction": "Run the program: <a href=\"http://studio.code.org/p/applab#eUmMCRRJNxJk9EheYznD6w\" target=\"_blank\">\n Starry Night </a> several times. \n \n* What's \"weird\" or \"different\" about this program from previous ones we've seen?\n* How do you think this effect is produced?\n\n\n",
        "U3L07 Free Response Reflection_markdown_instruction": "When breaking a problem down, you often encounter elements that you want to use repeatedly in your code. Sometimes it's appropriate to write a new function; at other times it's appropriate to write a loop.  \n\nThere is no hard-and-fast rule as to which is better, but what do you think?  What kinds of circumstances would lead you to writing a function versus using a loop?\n\n\n",
        "U3L07 Free Response Reflection_2018_markdown_instruction": "When breaking a problem down, you often encounter elements that you want to use repeatedly in your code. Sometimes it's appropriate to write a new function; at other times it's appropriate to write a loop.  \n\nThere is no hard-and-fast rule as to which is better, but what do you think?  What kinds of circumstances would lead you to writing a function versus using a loop?\n\n\n",
        "U3L08 - Enchantment Under the Sea_markdown_instruction": "You have been provided with starter code for an “Under the Sea” scene which includes three functions, one each for the starfish, seagrass, and fish. Create versions of these functions which accept parameters to allow you to add more variation to your scene.  The student worksheet provides more details and guidance.\n\n<img src=\"https://levelbuilder-studio.code.org/script_assets/k_1_images/instruction_gifs/csp/U3L08%20-%20Under%20the%20sea.gif\" style=\"width: 250px\">",
        "U3L08 - digitalScene_markdown_instruction": "# Design Your Digital Scene\n\nThis is the final project that you will submit.\n\n# Do This:\n\n**Copy** all of the individual functions you and your group members have written at the bottom of this program.\n\n**Design your scene** using these functions, placing your calls at the top of the file.",
        "U3L08 - digitalScene_2018_markdown_instruction": "# Design Your Digital Scene\n\nThis is the final project that you will submit.\n\n# Do This:\n\n**Copy** all of the individual functions you and your group members have written at the bottom of this program.\n\n**Design your scene** using these functions, placing your calls at the top of the file.",
        "U3L08 - drawSquaresWithParams_markdown_instruction": "# Duplicating functions\n\nThis program is supposed to draw two squares, a big one and a small one. The function definition for `drawBigSquare()` is written but `drawSmallSquare()` is empty.\n\n**Write** `drawSmallSquare()` to draw a square with sides 25 pixels long.\n\n**Run the code** to match the image below\n\n**Hint:** Copy-Paste might be a useful approach here!\n\n![](https://images.code.org/b1cf1767df98f6b7eacdc8a10c5674a7-image-1442417274907.26.34 AM.png)",
        "U3L08 - fish_markdown_instruction": "# Adding parameters to functions: *drawFish*\n\nLet's update our `drawFish` function to accept a parameter. Currently `drawFish` can only draw a fish of size 30.\n\n**Add a parameter** to the function definition for `drawFish` that allows you to control its size (Note: the pen width is important here.) Make sure your parameter has a **descriptive and meaningful** name.\n\n**Update your function calls** to use your new version of `drawFish` and change the size of the fish in your image.\n\n![](https://images.code.org/35f9a55244004dad62781f4ae0ce7eb2-image-1442608034411.26.55 PM.png)",
        "U3L08 - fish_2018_markdown_instruction": "# Adding parameters to functions: *drawFish*\n\nLet's update our `drawFish` function to accept a parameter. Currently `drawFish` can only draw a fish of size 30.\n\n**Add a parameter** to the function definition for `drawFish` that allows you to control its size (Note: the pen width is important here.) Make sure your parameter has a **descriptive and meaningful** name.\n\n**Update your function calls** to use your new version of `drawFish` and change the size of the fish in your image.\n\n![](https://images.code.org/35f9a55244004dad62781f4ae0ce7eb2-image-1442608034411.26.55 PM.png)",
        "U3L08 - freePlay_markdown_instruction": "# Keep Going!\n\nAt this point you've seen how parameters can help **generalize the behavior of a function** to perform a variety of tasks, not just one. This will prove to be a very useful skill as we continue to develop as programmers.\n\nFor now, **keep adding to your drawing**. Make more function calls and see if you can continue to use **random numbers** to add variety to your drawings.\n\n![](https://images.code.org/514994b00554eac86c2a762177b77493-image-1442611547075.58.11 PM.png)",
        "U3L08 - freePlay_2018_markdown_instruction": "# Keep Going!\n\nAt this point you've seen how parameters can help **generalize the behavior of a function** to perform a variety of tasks, not just one. This will prove to be a very useful skill as we continue to develop as programmers.\n\nFor now, **keep adding to your drawing**. Make more function calls and see if you can continue to use **random numbers** to add variety to your drawings.\n\n![](https://images.code.org/514994b00554eac86c2a762177b77493-image-1442611547075.58.11 PM.png)",
        "U3L08 - individualCode_markdown_instruction": "# Design Your Component\n\nWith your **group** you should have already identified and assigned the high-level functions that should be used to create your digital scene. \n\n# Do This:\nUse the space here to design your functions. Once you're done you can **share** this project with your groupmates.",
        "U3L08 - individualCode_2018_markdown_instruction": "# Design Your Component\n\nWith your **group** you should have already identified and assigned the high-level functions that should be used to create your digital scene. \n\n# Do This:\nUse the space here to design your functions. Once you're done you can **share** this project with your groupmates.",
        "U3L08 - multiParamFish_markdown_instruction": "# Multiple Parameters\n\nLet's make our drawings even more interesting by adding some variety to the color.\n\n**Add** three more parameters called `red` , `green` , and `blue` to your function definition for `drawFish` which allow you to set the color of the fish when you call the function. Remember to separate them with commas!\n\n**Note:** this means that drawFish will now have 4 parameters total: size, red, green, and blue.\n\n**HINT:** inside drawFish just replace the numbers of the penRGB values with the parameters of your function.\n\n**Change** the function calls at the top your code to draw different colored fish.\n\n![](https://images.code.org/14b52d152c818903b0fc87061126f0f8-image-1442608501173.34.30 PM.png)",
        "U3L08 - multiParamFish_2018_markdown_instruction": "# Multiple Parameters\n\nLet's make our drawings even more interesting by adding some variety to the color.\n\n**Add** three more parameters called `red` , `green` , and `blue` to your function definition for `drawFish` which allow you to set the color of the fish when you call the function. Remember to separate them with commas!\n\n**Note:** this means that drawFish will now have 4 parameters total: size, red, green, and blue.\n\n**HINT:** inside drawFish just replace the numbers of the penRGB values with the parameters of your function.\n\n**Change** the function calls at the top your code to draw different colored fish.\n\n![](https://images.code.org/14b52d152c818903b0fc87061126f0f8-image-1442608501173.34.30 PM.png)",
        "U3L08 - multipleLayersofParams_markdown_instruction": "# Multiple levels of functions\n\nIn this example pay very close attention to how the functions have been declared. `drawPlusSign()` accepts a parameter called `size`.\n\n![](https://images.code.org/aec14185c20a890db6023ebf8ee214b0-image-1442583027015.30.10 AM.png)\n\nInside of the function this value is used to make a call to `drawSingleSide()` \n\n![](https://images.code.org/d74c79f74c2f1b0721d014580f69233f-image-1442583086099.31.17 AM.png)\n\n`drawSingleSide()` is defined in the code below and also accepts a parameter called `lengthOfSide`\n\n![](https://images.code.org/52320237a7c952bafef31635a8581f7d-image-1442583208640.33.21 AM.png)\n\nNotice that these functions accept the same **value** when they're called but they give them **different names**. Each function can decide what it will call its parameters. Even if one function calls another, **each function is treated as a separate logical unit of code.** In fact, you **could name their parameters** the same, but they would still be separate blocks of code.\n\nIn programming we call these blocks of code the **scope** of the function. It is a complex concept but one that will eventually make programming a much simpler process. The benefit of each function being able to name its own parameters is that you only need to look at that function to know which parameters it is using and what they are called.\n\n**Call `drawplusSign()`** twice in the spaces provided to draw the image below.\n\n",
        "U3L08 - paramsToStarfish_markdown_instruction": "# Adding Parameters to Functions: *drawStarfish*\n\nWe want to make our picture more interesting by adding some variety. Currently the `drawStarfish` function can only draw a starfish of size 60.\n\n**Add a parameter** to the function definition for drawStarfish that allows you to control its size - like `drawStarfish(size)`. Make sure your parameter has a **descriptive and meaningful** name.\n\n**Update your function calls** to use your new version of `drawStarfish` and change the size of your starfish.\n\n![](https://images.code.org/320485cb05b50bcdb8aa8d13c0164502-image-1442606362191.59.12 PM.png)",
        "U3L08 - paramsToStarfish_2018_markdown_instruction": "# Adding Parameters to Functions: *drawStarfish*\n\nWe want to make our picture more interesting by adding some variety. Currently the `drawStarfish` function can only draw a starfish of size 60.\n\n**Add a parameter** to the function definition for drawStarfish that allows you to control its size - like `drawStarfish(size)`. Make sure your parameter has a **descriptive and meaningful** name.\n\n**Update your function calls** to use your new version of `drawStarfish` and change the size of your starfish.\n\n![](https://images.code.org/320485cb05b50bcdb8aa8d13c0164502-image-1442606362191.59.12 PM.png)",
        "U3L08 - randomInput_markdown_instruction": "# Random Input\n\nYou have a new block that allows you to generate a random number. You can use this instead of hard-coding in values every time you call a function.\n\n![](https://images.code.org/5ff13bfdf582692f009b787570d467d0-image-1470145136252.png)\n\n**Read the documentation** for the randomNumber block.\n\n# Do This\n**Use randomNumber to provide random input** to *all three* of your drawing functions.  Just insert the call to randomNumber where you would otherwise put numbers.  \n\nLike this:\n![](https://images.code.org/ad87d7d122ac585a6de9e46a49736228-image-1470146652402.png)\n\nUse randomNumber in calls to all three of your drawing functions:\n\n* drawStarfish\n* drawSeagrass\n* drawFish\n\nThis is a great way to **test** out functions and also get some **interesting looking images**. Every time you run the program you can get slightly different looking scenes like the ones below.\n\n![](https://images.code.org/d2031f555ed23bcfa4a6a6165074b559-image-1442852053630.png)",
        "U3L08 - randomInput_2018_markdown_instruction": "# Random Input\n\nYou have a new block that allows you to generate a random number. You can use this instead of hard-coding in values every time you call a function.\n\n![](https://images.code.org/5ff13bfdf582692f009b787570d467d0-image-1470145136252.png)\n\n**Read the documentation** for the randomNumber block.\n\n# Do This\n**Use randomNumber to provide random input** to *all three* of your drawing functions.  Just insert the call to randomNumber where you would otherwise put numbers.  \n\nLike this:\n![](https://images.code.org/ad87d7d122ac585a6de9e46a49736228-image-1470146652402.png)\n\nUse randomNumber in calls to all three of your drawing functions:\n\n* drawStarfish\n* drawSeagrass\n* drawFish\n\nThis is a great way to **test** out functions and also get some **interesting looking images**. Every time you run the program you can get slightly different looking scenes like the ones below.\n\n![](https://images.code.org/d2031f555ed23bcfa4a6a6165074b559-image-1442852053630.png)",
        "U3L08 - seaGrass_markdown_instruction": "# Adding Parameters to Functions: *drawSeagrass*\n\nTo keep adding variety to our image let's keep adding parameters to our functions. Currently the `drawSeagrass` function can only draw a piece of seagrass with arcs of radius 100.\n\n**Add a parameter** to the function definition for `drawSeagrass` that allows you to control its size. (You'll only need to change the radius of each arc.) Make sure your parameter has a **descriptive and meaningful** name.\n\n**Update your function calls** to use your new version of `drawSeagrass` and change the size of the seagrass in your image.\n\n![](https://images.code.org/0b7d1750101a4c81ef8d77d8668f94f2-image-1442606862829.07.30 PM.png)",
        "U3L08 - seaGrass_2018_markdown_instruction": "# Adding Parameters to Functions: *drawSeagrass*\n\nTo keep adding variety to our image let's keep adding parameters to our functions. Currently the `drawSeagrass` function can only draw a piece of seagrass with arcs of radius 100.\n\n**Add a parameter** to the function definition for `drawSeagrass` that allows you to control its size. (You'll only need to change the radius of each arc.) Make sure your parameter has a **descriptive and meaningful** name.\n\n**Update your function calls** to use your new version of `drawSeagrass` and change the size of the seagrass in your image.\n\n![](https://images.code.org/0b7d1750101a4c81ef8d77d8668f94f2-image-1442606862829.07.30 PM.png)",
        "U3L08 - squareTwoParams_markdown_instruction": "# Calling Functions with Multiple Parameters\n\nYou're about to see a new definition for `drawSquare` that has two parameters: `drawSquare(size, borderWidth)` Notice how **multiple parameters are separated by commas**.\n\n![](https://images.code.org/c9766f914d59531614c753e9147d29dd-image-1447801298794.01.15 PM.png)\n\n# Do This:\nAdd to the code to **make two calls** to the new two-parameter version of `drawSquare` to make an image similar to this one.\n\n![](https://images.code.org/ddd85deb33ff82f3c257d25cdc9e6384-image-1442526350229.45.38 PM.png)\n\n",
        "U3L08 - squareTwoParams_2018_markdown_instruction": "# Calling Functions with Multiple Parameters\n\nYou're about to see a new definition for `drawSquare` that has two parameters: `drawSquare(size, borderWidth)` Notice how **multiple parameters are separated by commas**.\n\n![](https://images.code.org/c9766f914d59531614c753e9147d29dd-image-1447801298794.01.15 PM.png)\n\n# Do This:\nAdd to the code to **make two calls** to the new two-parameter version of `drawSquare` to make an image similar to this one.\n\n![](https://images.code.org/ddd85deb33ff82f3c257d25cdc9e6384-image-1442526350229.45.38 PM.png)\n\n",
        "U3L08 - triangleTwoParams_markdown_instruction": "# Calling functions with multiple parameters\n\nWe've already called many functions with multiple parameters but it can still be helpful to see an example of how it will look when you've defined those functions yourself.\n\n**Look at the function definition** for `drawSquare()` . Notice in particular how **multiple parameters are separated by commas** in the definition.\n\n![](https://images.code.org/a9c29d49444af73851d34445c686e3ba-image-1442526639409.50.19 PM.png)\n\n**Call** `drawSquare()` in the spaces above to complete the image. Don't worry about exact value, but the larger square should have thinner lines.\n\n![](https://images.code.org/ddd85deb33ff82f3c257d25cdc9e6384-image-1442526350229.45.38 PM.png)",
        "U3L08 Assessment2_markdown_instruction": "“Abstraction” is often used to focus on a general case and ignore a specific instance of a problem. \n\nGiven this meaning of the word, how are functions with parameters an example of abstraction?\n",
        "U3L08 Assessment2_2018_markdown_instruction": "“Abstraction” is often used to focus on a general case and ignore a specific instance of a problem. \n\nGiven this meaning of the word, how are functions with parameters an example of abstraction?\n",
        "U3L08 Free Response Getting Started_markdown_instruction": "In previous lessons, you used parameterized functions. \n\n* In what situations are parameterized functions useful? \n* What problems do parameterized functions solve?\n",
        "U3L08 Free Response Wrap Up_markdown_instruction": "How are parameterized functions involved in the children's game \"Simon Says?\"\n",
        "U3L08 how to add comments_markdown_instruction": "# Now you try it - Add a comment\n\nThe starting code provided has some comments already in it.\n\n# Do This\n\nInsert a comment that says `// Draw all the starfish` just above the first call to `drawStarfish()`. \n\n* The `// Comment` block is in the Functions toolbox ([Show me](#triggercallout=show_comment))\n* **See how:**\n![expandable](https://images.code.org/1f97df1d6fc1ca2d5bd371ad7b0f76a3-image-1508960669302.gif)\n\n**Click finish** once you've added the comment.  And keep adding comments as you go!!!",
        "U3L08 how to add comments_2018_markdown_instruction": "# Now you try it - Add a comment\n\nThe starting code provided has some comments already in it.\n\n# Do This\n\nInsert a comment that says `// Draw all the starfish` just above the first call to `drawStarfish()`. \n\n* The `// Comment` block is in the Functions toolbox ([Show me](#triggercallout=show_comment))\n* **See how:**\n![expandable](https://images.code.org/1f97df1d6fc1ca2d5bd371ad7b0f76a3-image-1508960669302.gif)\n\n**Click finish** once you've added the comment.  And keep adding comments as you go!!!",
        "U3L09 Free Response Getting Started_markdown_instruction": "In computer science, when programmers break a big job into several smaller jobs, it's called decomposition.\n\nWhen programmers think about tasks in the general terms about what is going to be accomplished (not specifically about how every step will be accomplished), it's called abstraction. \n\nWhat non-CS task have you worked on lately that involved decomposition? Explain.\n\nWhat non-CS task have you worked on lately that involved abstraction? Explain.\n\n\n",
        "U3L09 Free Response Wrap Up_markdown_instruction": "Describe how your team \"decomposed\" the design of the digital scene project.\n\nDescribe the \"levels of abstraction\" that were included in the component you were responsible for.\n\n\n",
        "U3L1 - Simulation - Template_markdown_instruction": "# Simulating Coin Flips\n\nOver the next several exercises we are going to be building a program that simulates flipping 10,000 coins, or even more if you like. Along the way we're going to be keeping track of the patterns that develop and hopefully learning something about the patterns that develop.\n\nThis is a great problem to simulate on a computer. If you wanted to flip 10 coins you'd probably just do it by hand. Flipping 10,000 coins would take significantly longer (about 3 hours if you flip one per second) and so **we'd much rather use a program to do the work for us.** Not only is it a lot faster to write the program, but once you're done you can run your program over and over, repeating the experiment. As we'll see, **simulations like this make it much easier to quickly notice patterns, test hypotheses, and develop new ideas to investigate**.\n\n**Starting Small:** Our simulations are going to start small. We'll actually only be flipping 10 coins to begin with, and then developing programs that keep track of patterns in this smaller set of data. That way we'll be able to visually confirm that our programs are working as intended. **Once we've verified that our programs work at a smaller scale we'll gradually increaese the number of flips our program is working on until we're at the full 10,000.**\n\n# Do This\n\n* When we want to flip a coin with a computer we will instead **generate a random number between 0 and 1**\n* Write a program that **uses a while loop** that **flips 10 coins** and writes their values to the screen\n\n![](https://images.code.org/970622047b06af13ea7bdd50ee86bcbf-image-1446739178483.gif)",
        "U3L10 Free Response Getting Started_markdown_instruction": "* What is your personal goal for this project? \n\n* How will your personal goal impact the larger collaborative project?\n\n\n",
        "U3L10 Free Response Wrap Up_markdown_instruction": "What issues have arisen during this collaborative project? \n\nHow were they resolved?\n",
        "U3L11 Free Response Getting Started_markdown_instruction": "What can you learn by reflecting on your independent work in this project and on your contributions to an effective team effort?\n",
        "U3L11 Free Response Reflection_markdown_instruction": "What was the most important skill you developed in this project?\n\nHow will you be able to apply that skill to future projects both in and out of computer science?\n\n\n",
        "U3L12 - Reflection - Mission Unsortable_markdown_instruction": "Activity Reflection\n\n**Prompt:** \nThinking back on the \"Mission Unsortable\" activity, describe a time when one person's mission conflicted with another person's mission. \n\nWhat happened? Describe how you might modify the missions so that the problem occur.\n",
        "U3L12 Free Response Getting Started_markdown_instruction": "Respond to the following prompt\n\nIn the programs you have written so far, lines of code and functions execute in a predictable order - the order in which you program them to execute. \n\nWhat if someone came along and said, \"This is hard to read. I'm going to re-arrange the lines of code so that they are ordered by length from shortest to longest.\" \n\nIs that a good idea or a bad idea? Explain your reasoning.\n\n\n",
        "U3L12 Free Response Reflection_markdown_instruction": "How did your personal mission contribute and/or detract from the overall goal of sorting the cards? \n\nHow could your group have sorted the cards more efficiently, assuming that everyone still needed to execute the actions as prescribed in their missions? \n\nIf your group was not the first to finish, what slowed your progress?\n\n\n",
        "U3L13 - Debug Id plus logic problem_markdown_instruction": "# Debugging 1",
        "U3L13 - Project_markdown_instruction": "# Multi Screen App\nYou will be creating your own multi-screen app to practice designing user interfaces and writing event-driven programs. \n\n**Look at the Project Guide and Planning Sheets before programming**.\n\n# Requirements Reminder\n* Your app will have at least **4 screens**.\n* Your app should include **text, images, buttons, and sound**.\n* There should be **no “getting stuck” on any screen.**  It should always be possible to navigate from a screen in your app to some other screen. \n* Your program code should follow **good style**.\n* Your user interface should be **intuitive to use**.",
        "U3L13 - Turtle move with button_markdown_instruction": "# Your First Interactive App!\n<img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png' style='float: right; width: 250px'> A new group of commands has been added to the toolbox called **UI Controls** (User Interface Controls) which are commands that let you interact with, and respond to, the user of your app. To keep it simple, we'll start with just two commands: \n* `onEvent` which lets you run a function in response to some event occuring (such as a button click).\n* `button` which puts a button on the screen.\n\n# Do This:\nYou will replicate the small app shown below, which makes the turtle move with a button click. You will do three things:\n* Add a `button`.\n* Add an `onEvent` block.\n* Add `moveForward` inside the onEvent function block.\n\nHere's what you should do - you can come back to watch this as many times as you need to get it right.\n<img src=\"https://images.code.org/1cdc8cfbcef2a43f84b11ebdf14aed0c-image-1444061731350.gif\" style=\"border: solid 1px black; width: 500px; margin: auto\">\n\nOnce you've created the program and gotten it to run, click **Finish** to move onto the next level.",
        "U3L13 Free Response Getting Started_markdown_instruction": "Give three examples of familiar applications that respond to you, the user. \n\nFor each, describe the actions (means of input) you use to \"talk to the program.\" \n\nIf directed by your teacher, work with a partner to sketch a mock-up of an app with multiple means of input.\n\n\n",
        "U3L13 Free Response Reflection_markdown_instruction": "Elements in your app are required to have **unique IDs**. Given what you now know about how event handlers work, why is it important for the IDs of page elements to be unique?\n\n",
        "U3L13 eventsDetails_markdown_instruction": "# How Do Events Work?\nEvent-driven apps are made up of elements that can trigger events (such as buttons) and pieces of code called **event handlers**. Event handlers are commands that \"watch\" for certain events to occur in your program, and then run some function when an event occurs.\n\n<img src=\"https://images.code.org/96abf7d54a0be221a8b8eda80c696bf4-image-1444142010683.png\" style=\"float: right; width: 250px\">The `onEvent(id, type, callback)` command creates an **event handler** in your app. The three parameters are:\n* **id** - the ID of the element in the app you want to \"watch\", one that might trigger an event\n* **type** - the type of event to \"watch\" for (e.g. a click, a key press, a mousemove, etc.)\n* **callback** - a **callback function** is only different from a normal function in that you don't call it directly from your code. Instead it gets *called by the system at the time the specified event occurs*. You put the code into this function just like you would any other, and it will run when the event occurs.\n\nOnce created, the event handler will always \"watch\" that element as long as it exists. \n\n# Do This:\nThe program you are going to see has a button with a new ID but no event handler that is attached to it.\n* **Add an `onEvent` handler** that watches for a click on the button and *moves the turtle forward* when it happens. \n* **Run the program** to make sure it works.\n* **Try changing the event type** to something like \"mouseover\" and see what happens.  Not all event types will work with buttons but it's fun to play a little bit.\n\nOnce you've got the program responding to some event, move on to the next problem.\n\n",
        "U3L14 - Assigning Random Value_markdown_instruction": "# Other Ways to Assign Values to Variables\nPrograms become much more interesting when the values in variables change while the program is running. We can also assign to a variable the value returned by a function. For example:\n\n![](https://images.code.org/31447c1b90c925bba3ca86ead8d84a7d-image-1445892065474.png)\n\nBecause the `randomNumber` function *evaluates to a number* it means we can treat it *as though it were a number*. We've used it before by just \"plugging it in\" to some function that needed a number as a parameter like:\n![](https://images.code.org/5df0376d562bd75a1899e17c49b00144-image-1445941026356.png)\n\nBecause the `randomNumber` function generates a new and different number each time you call it, one thing we *could not* do before we had variables was generate a random number, and use that *same number* for two different things in a program. Now we can.\n\n# Do This:\n<img src=\"https://images.code.org/df3d2a8f4c1a3061981667c9f85b0071-image-1445549489133.png\" style=\"float: right; width: 350px\">Write a program that simulates the rolling of two dice and reports their individual values as well as the sum. \nThe program should:\n* Generate two random numbers between 1 and 6 and store each result in its own variable.\n* Display the individual values of the two dice.\n* Display the sum of the two dice (see right).\n* Every time you run the program the result will be a little different.\n\nWe have given you starting code that shows what to do for the first die. The *rest of the code is up to you!*  When you're done the output in the app display should look like what's above.\n\n",
        "U3L14 - Assigning User Input_markdown_instruction": "# Assigning user input to variables\nPrograms become *even more interesting* when we can interact with the user. A short way to ask a user for a number is with the `promptNum` command.\n\n`var userInput = promptNum(\"Enter a number?\")`\n\n`promptNum` is similar to `randomNumber` in that it is a function that *evaluates to a number*. The difference here is that promptNum pops up an input dialog box and waits for the user to type a number.  Once they do and hit 'Ok' the number they typed is returned and we can store it in a variable to use in our our programs.\n\n\n# Do This:\nWrite a program that acts as a simple calculator.\n* Ask the user to enter one number\n* Then ask for a second number\n* Display the result of some calculation.\n* An example output is shown at right.\n\nWe have given you starting code that shows you how to get the first number.  The rest of the code is up to you.\n\n",
        "U3L14 - Journal Favorite Event_markdown_instruction": "Pick one of the two prompts below to answer.  Start by copy/pasting the prompt you're responding to.\n\n**Pick one:**\n\n* Think back a few lessons to the \"Mission: Unsortable\" card sorting activity. Relate something that happened in that activity to something you found with event-driven programming in this lesson. Were there any \"unfortunate events\" in the card sorting activity that were similar to \"unfortunate events\" while programming in this lesson?  \n\n* What was your favorite event type? Explain what the event type is and how you might use it in an app that you want to write.  \n\nWrite your response below in 100 words or less.\n",
        "U3L15 - Add reset button to UpDown app_markdown_instruction": "# Add a Reset Button\nIn most apps you want to provide a way to start over. \n\nTo do this without having the user quit and restart your app, you need to add code to **reset variables and text displays to initial values** so the app can effectively start over.\n\nWe've **added a button** to the \"gameOverScreen\" in the *Count Up/Down App* and **added an empty event handler** for it.  \n\nRight now clicking the \"start over\" button does nothing. You will write code to make it work.\n\n\n# Do This:\n**Add code to the startOverButton event handler to reset the app**.  <img src=\"https://images.code.org/cb1569accb6a370d2258b5b14d624424-image-1446126849891.gif\" style=\"width: 150px; float: right;\">\n\nThe app should work like the animation shown to the right. **Notice** that when the \"start over\" button is clicked it goes back to the main screen and  the count has been reset to 0. \n\nThe code should:\n\n* Set the screen to the gamePlayScreen.\n* Set the count variable to 0.\n* Set the correct text label on the gamePlayScreen to show the count is 0.\n\nOnce you get it to work, move on.",
        "U3L15 - DEMO up down count practice app_markdown_instruction": "# All the Basics You Need\n\n<img src=\"https://images.code.org/abb09baa0b6ccc24ff141590c5b667c3-image-1446417655965.gif\" style=\"float:right; width: 150px\"> When you close these instructions, you'll get to play a little bit with the very simple app (shown at right) to demonstrate the basics of concepts involved in making the clicker game.  We'll call it the **Count Up/Down App**.  Yes, it's a boring \"game,\" but it has all the pieces of a more sophisticated game.\n\nThis app demontrates a few new concepts.  We'll step through each one, one at a time, explaining how each thing works.  Along the way, we'll also encounter some common challenges, and learn how to solve them.\n\n# Do This:\n* Keeping clicking the up arrow until something happens (something besides the number increasing).\n* Start over.\n* Click the down arrow until something happens (something besides the number decreasing).\n* Start over.\n\nOnce you think you've seen all the behavior click Finish to see the first part of how this is done.\n\n",
        "U3L15 - add code to make count down work_markdown_instruction": "# Make Count Down Work\n\n<img src=\"https://images.code.org/0044a46a27f7af5da74daeae8de021f7-image-1446063781449.gif\" style=\"float: right; width: 200px\">You now know enough about using global variables (and some of the problems you might run into) to try it yourself.\n\nLet's start with an easy task. Right now clicking the up arrow works as expected; **clicking the down arrow does not**. So...\n\n# Do This:\n**Make the count go down by 1 every time the down arrow is clicked**\n\n* Study how the up arrow works, and use it as an example for writing the code for the down arrow.\n* Add and modify the code so that when the down arrow is clicked the count goes down.\n* When you're done the app should work like the animation shown to the right.\n* HINT: Don't forget to set the text of the label.\n\n",
        "U3L15 - clicker update score_markdown_instruction": "# Using global variables\n\nYou'll now look at a version of the clicker game. We've set up the basic functionality to move the apple around the screen, and have __created a global variable to keep track of the score.__\n\n# Do this\n__Add code to update the score when the apple is clicked.__ Remember that you'll have to update both the global variable _and_ the label text!\n\n<img src=\"https://images.code.org/001640fd24fc487af534ab769ed196e2-image-1446136596261.gif\" style=\"width:200px\">",
        "U3L15 - mini clicker update score_markdown_instruction": "# Using Global Variables\n\nYou'll now look at a version of the clicker game. We've set up the basic functionality to move the apple around the screen, and have __created a global variable to keep track of the score.__\n\n# Do This:\n__Add code to update the score when the apple is clicked.__ Remember that you'll have to update both the global variable _and_ the label text!\n\n<img src=\"https://images.code.org/001640fd24fc487af534ab769ed196e2-image-1446136596261.gif\" style=\"width:200px\">",
        "U3L15 click add lives_markdown_instruction": "# Tracking Lives\n\nIn the game, the number of lives starts at 3 and decrements by 1 every time the background image is clicked. Add this functionality to your game!\n\n# Do This:\n- __Add your variable to keep track of lives.__\n- __Add a click handler for the background image.__ _ID: \"background\"_\n- __When the background is clicked, decrement the number of lives by 1.__\n\n<img src=\"https://images.code.org/79f1352aebb2e40c302d1900aacd31f4-image-1446138180044.gif\" style=\"width:200px;\">",
        "U3L15 spot the difference variable debugging_markdown_instruction": "Respond to the following questions about your investigation into the bug with the counting game. Feel free to go back and look at the game again (but do so in another tab or be sure to click \"Submit\" to save your work!):\n\n- From the user's perspective, what was the difference between the first version of the game and the one with the bug?\n- From looking at the code, what specifically was the difference between the two, and why is that an issue?\n- How did you fix the bug?\n",
        "U3L16 - chaserApp_markdown_instruction": "# Chaser Game\n\nYou now have all the skills you need to make a simple \"chaser\" game. A chaser game is just a game where an image runs away from your mouse.\n<img src=\"https://images.code.org/ed1e9852b33ca368cf8cd8e0b0159de7-image-1444336815528.gif\" style=\"float: right\">\n\n# Do This:\n\n**Create a \"Chaser Game\"** which includes the following components:\n\n* **Text** on the top of the screen with a title or instructions for what to do.\n* **An image** that \"runs away\" (moves randomly) based on some mouse event.\n\nOnce you have the basic functionality down feel free to spend time adding more features to your application.\n<br><br><br>\n\n",
        "U3L16 - chooseImages_markdown_instruction": "# Choosing Your Own Images\n\nThe second parameter of the `image` command allows you to set the image to be displayed.  There are two ways to do this:\n1. Provide the URL of an image on the web.\n2. Upload an image from your computer (by clicking \"choose...\").\n\n![](https://images.code.org/e726e56fd3e4c7cd4a0d58cba731a855-image-1444240440116.53.49 PM.png)\n\n\n# Do This:\n\n* **Read the documentation for `image`** for tips on how to find an image's URL and how to upload.\n* **Change the image** to one you've found online or from your own computer.\n\n**NOTE:** many images are bigger than the screen of your app, so it's likely you'll need to add a `setPosition` command to get it on the screen sized the way you want.",
        "U3L16 - doubleQuotes_markdown_instruction": "# Importance of Double Quotes\n\nYou may have noticed that the strings we've seen are **wrapped in double quotes**. These double quotes **are not part of the string**. Instead this is how you indicate that a sequence of characters **is a string and not the name of a variable**.\n\nAs you start writing programs with strings **it is common to generate errors from forgetting to place them in double quotes**. We're going to generate some of those errors now so that we can recognize them more easily later.\n\n![](https://images.code.org/89235457b9b9bf76ac4f8221cae5a62e-image-1445987270682.07.24 PM.png)\n\n# Do This:\n\n* **This program generates many errors** because strings were not placed in quotes.\n* **Run the program** before you change it to see the errors that are generated.\n* **Add double quotes** around all the strings so that the program runs without errors.\n\n",
        "U3L16 - setupMoveToRandom_markdown_instruction": "# New Elements and Events: Random Movement\n\nOver the next several exerises we will be exploring several new user interface elements and event types. Your code will be pulled forward as you progress through the exercises.\n\n# Do This\n\n**Starter Code:** To begin you have been provided a single button and event handler which moves the turtle forward.\n\n**Modify** the program so that when the button is clicked the turtle moves to a random location on the screen.\n\n**Change the ID** of the button to something descriptive and meaningful.\n\n**Note:** Recall the screen is **320 by 450 pixels**. You'll likely want to use `moveTo` and `randomNumber`\n\n![](https://images.code.org/a4172e43b6707a3170e4eaf54a2a7b1d-image-1444335577799.gif)",
        "U3L16 Assessment Free Response_markdown_instruction": "Self-assess your clicker game project using the rubric, then respond to this prompt:\n\nIn 100 words, summarize what you learned in this activity and how you might be able to use your new knowledge in future projects.\n\n\n",
        "U3L16 Free Response Getting Started_markdown_instruction": "Until today, you have only learned how to add buttons to a program. \n\nWhat other elements, in addition to buttons, do you interact with in familiar applications? \n\nBesides clicking on buttons, in what other ways can you get information to the program or tell the computer to do things?\n\n\n",
        "U3L16 Free Response Wrap Up_markdown_instruction": "In the next lesson, you will enhance the clicker game to make it more interesting and more fun.\n\nWhat features would you like to add to your program?\n",
        "U3L16 Mad Lib Demo_markdown_instruction": "# Getting Text from the User\n\nUp until now, the event-driven apps you have created responded to the user clicking an element or typing a number when you used `promptNum`. __What if we want the user to provide _text_ instead of a number?__ You can probably think of many apps and websites that ask you to provide text in order to do something.\n\nIn programming, we have to represent text in a specific way to distinguish it from other words in our code, such as variable names. But we'll cover that later...\n\nAt the beginning of class you created a Mad Libs on paper, which takes user input in the form of nouns, adjectives, and verbs to create a unique \"How-to\" manual. You'll be translating your own Mad Libs How-to into an app in this lesson.\n\n# Do This:\n\n- __Play with this Mad Libs app__ a couple of times to see a digital version of the paper game. \n- __Think about how the final text is created__ based on the input from the user. How would you describe in words the algorithm for creating it?",
        "U3L16 Mad Lib Student Setup_markdown_instruction": "# Back to Mad Libs: Design Your App\nNow that you've had some practice getting user text and making new strings with it, you're ready to turn your How-to Mad Libs into an app. To get started, you'll set up the layout. There are two main screens:\n\n__Screen 1: Collect User Input__  \n- On this screen, you'll use __text labels__ and __text input__ design elements to set up the different words you want the user to provide.\n- A __Next__ button takes you to Screen 2 to view the full Mad Libs.\n\n__Screen 2: View Mad Libs__  \n- On this screen, you'll use the __text area__ design element to create the space where the user's completed Mad Libs will be displayed.\n- A __Play again__ button takes you to back Screen 1.\n<br>\n<br>\n\n\n\n<table>\n<tr>\n<td>\n<strong>Screen 1:</strong>\n</td>\n<td>\n<strong>Screen 2:</strong>\n</td>\n</tr>\n<tr>\n<td>\n<img src=\"https://images.code.org/ccea092b516047dff82fafa50b47bcc7-image-1447974038265.00.17 PM.png\" style=\"width:150px;float:right;\">\n</td>\n<td>\n<img src=\"https://images.code.org/0f832e6314ad98170a3cddb317d26e41-image-1445898480304.27.45.png\" style=\"width:151px;float:right;\">\n</td>\n</tr>\n</table>\n\n# Do This:\n\n- Create the two screens for your app, including the design elements in each one.\n- Requirement: Request at least 3 separate words from the user on Screen 1.\n- Create the event handlers for the __Next__ and __Play again__ buttons to respond to clicks.\n- Use `setScreen` in the event handlers to get the screen navigation working.\n",
        "U3L17 - getAndSetKeyValue_markdown_instruction": "# Incrementing a Key Value Pair\n\nIn order to increment a key value pair you must first know what value it contains. In other words, you will need to **first read from and then write to** the same key value pair. \n\nYou are going to build a simple app in which users can like a photo on the screen. **The number of likes the image has received** will be stored in a key value pair so that it is persistent and **multiple users can like the image**.\n\n# Do This\n\n* **Choose an image** for your app by changing the URL in design mode\n* A key value pair called **totalLikes** is already added to the app\n* **Add an event handler** to the **Like** button that increments **totalLikes**. Note you'll need to use `getKeyValue` , `setKeyValue` , and **callback functions** in order to make this properly work.",
        "U3L17 - getKeyValue_markdown_instruction": "# Reading from Key Value Pairs\n\nSo far we have focused on how to create and update key value pairs. Now we will learn how to read from them.\n\n`getKeyValue` can be used to read the value stored in a key value pair. The value is actually returned to your program as **a parameter of the callback function**. This actually makes sense since you should only be able to use the value retrieved from the server once you've actually received a response. As a result **any code that uses the value read from a key value pair must appear in the callback function**.\n\n![](https://images.code.org/c6457cacaa9fdba39fe28da5353547d9-image-1445368281726.10.05 PM.png)\n\nIn the example you are about to see `getKeyValue` is used to read from two key value pairs. The first demonstrates how to use the parameter from the callback function to access the returned value. **You can name the value returned in the callback function anything you want**.\n\n# Do This\n\n* Using the starter code to guide you, **add code to the callback function** of the second `getKeyValue` command to log the value stored in `userScore`, as in the example below.\n\n![](https://images.code.org/b253ed77df628cceab40474a12893dd9-image-1445368291498.11.07 PM.png)",
        "U3L17 - introCallbacks_markdown_instruction": "# Callback Functions\n\nMaking requests to a remote server makes sequencing a set of commands more challenging, if not impossible. In order to address this issue the data commands include **an optional third parameter** called a **callback function**. A callback function is a function which **will run only after you've received confirmation from the server that it has received a request.**\n\n![](https://images.code.org/f82d29612f31ca3ec90353b8bc804f0a-image-1445364087348.01.13 PM.png)\n\n# Ordering setKeyValue Commands\n\nThe program you are about to see contains two `setKeyValue` commands which update the same key value pair, called `predictableBit`. Currently we cannot predict the sequence in which the commands will run, but if we use the **callback functions** each now includes we can. \n\n# Do This\n\n* **Alter the program** so that the second `setKeyValue` command appears within the **callback function** of the first, as in the image below.\n* **Run the program multiple times** and check the results in the **Data Viewer** to ensure that the requests are now consistently arriving in the correct order.\n* **Alter the program** so that instead of always setting `predictableBit` to **0 and then 1** it always sets it to **1 and then 0**\n\nBefore | After\n---|---\n![](https://images.code.org/b3b56f9070fdb9d5f7e6b57aa09bfdf3-image-1445365075454.17.42 PM.png) | ![](https://images.code.org/04ad6f1a70df9ef01b3b826eb265035b-image-1445363861130.57.13 PM.png)",
        "U3L17 - setKeyValue_markdown_instruction": "# Creating and Updating Key Value Pairs\n\nThe Data Viewer is a useful way to check and interact with the key value pairs in your app, but you'll also want to control them with code. The commands to control the remote data in your app can be found in the **Data** tab which has been added to your toolbox.\n\nThe first command we are going to explore is the `setKeyValue`. This command is used both to **create** and **update** a key value pair. \n\n![](https://images.code.org/0d1055cf3a5c707e6a4ebcf49bbb359d-image-1445361975963.26.00 PM.png)\n\nThe **key parameter** indicates the key of the key value pair you wish to update (make sure you put the name in quotes). The **value parameter** is used to indicate what value should be stored.\n\n# Do This\n\n* This app **already contains** a key value pair called `myFavoriteNumber` with a value of **10**. You can use the **Data Viewer** to confirm this.\n* **Update** the key value pair `myFavoriteNumber` to have a value of **20**\n* **Create a key value pair** called `mySecondFavoriteNumber` with a value of **100**\n* **Confirm your code worked** by checking in the **Data Viewer**\n\n![](https://images.code.org/1dfaff43c28185b44dd014fed0cdb8f4-image-1445288326270.58.13 PM.png)",
        "U3L17 - twoSetKeyValue_markdown_instruction": "# Unpredictability with setKeyValue\n\nKey value pairs are **stored remotely** on a network of servers. When you set a key value you are actually **sending data across the Internet**, a process which **takes an unpredictable amount of time**. We actually cannot assume that requests will arrive in the order they are sent.\n\nThe program you are about to see contains two `setKeyValue` commands which update the same key value pair, called `unpredictableBit`.\n\n![](https://images.code.org/0343bc61aab6e14940a6af559074a35a-image-1445353609544.06.13 AM.png)\n\nGiven the order of the commands you'd expect `unpredictableBit` would be set to 0 and then 1. That said, it is possible that the requests arrive **out of order**, leaving the value as 0 instead.\n\n# Do This\n\n* **Run the program**\n* **Open the Data Viewer** to see what value `unpredictableBit` was set to.\n* **Record** what value `unpredictableBit` was set to (0 or 1)\n* **Repeat the experiment** a few more times (5-10). You'll need to **refresh the Data Viewer** each time by reloading the tab it is in.\n* **About what percent of the time do the `setKeyValue` requests arrive out of order?**",
        "U3L18 Free Response Wrap Up_markdown_instruction": "Over the next few lessons, you will be gathering skills and knowledge to create a clicker game of your own design. \nYou probably have some very cool ideas about what you want to design. And obviously, you will gather new ideas and will need to learn some new programming skills. \n\nGet ready for the tasks ahead of you by assessing what you already know, and thinking about what you want to know. \nIn the space below:\n\n1.  List at least 3 things you already know that will be useful in designing your clicker game.\n\n2.  Based upon the initial ideas of your game design, list at least 3 things you want to know.\n\n\n",
        "U3L18 comparison operators_markdown_instruction": "# Explore Comparison Operators\n\nTrue/false decisions are made using boolean expressions. A __boolean expression__ is an expression that only evaluates to TRUE or FALSE, and you can use __comparison operators__ to craft boolean expressions.  \n\n# Do This:\n\nUse `console.log` to **print out the different boolean expressions below to see what information they return**.\n\n| Boolean Expressions |\n| --- |\n| 3 > 2 |\n| 2 > 3 |\n| 5 + 3 < 10 |\n| ‘a’ < ‘b’ |\n| ‘j’ > ‘c’ |\n| 2 == 2 |\n| 2 != 2 |\n| true == false |\n| \"x\" == x |\n| \"Blue\" == \"blue\" |\n| x < 10 |",
        "U3L18 comparison operators_for_video_markdown_instruction": "# Explore Comparison Operators\n\nTrue/false decisions are made using boolean expressions. A __boolean expression__ is an expression that only evaluates to TRUE or FALSE, and you can use __comparison operators__ to craft boolean expressions.  \n\n# Do This\n\nUse `console.log` to **print out the different boolean expressions below to see what information they return**.\n\n| Boolean Expressions |\n| --- |\n| 3 > 2 |\n| 2 > 3 |\n| 5 + 3 < 10 |\n| ‘a’ < ‘b’ |\n| ‘j’ > ‘c’ |\n| 2 == 2 |\n| 2 != 2 |\n| true == false |\n| \"blue\" == blue |\n| \"Blue\" == \"blue\" |\n| x < 10 |",
        "U3L19 - DEMO up down count practice app_markdown_instruction": "# All the basics you need\n\nWe're going to use this very simple app to demonstrate the basics of concepts involved in making the clicker game.  Yes, it's a dumb \"game\", but it has all the pieces of a more sophisticated game.\n\nThis app demontrates a few new concepts.  We'll step through each one, one at a time, explaining how each thing works.  Along the way, we'll also encounter some common challenges, and learn how to solve them.\n\n# Do This\n* Click the up arrow until something happens\n* Start over\n* Click the down arrow until something happens\n* Start over\n\nOnce you think you've seen all the behavior click Finish to see the first part of how this is done.\n\n",
        "U3L19 - Debugging with consoleLog_markdown_instruction": "# Debugging Variables: Part 4\n\n`console.log()` is not just useful at the end of programs. It is really helpful when we want to check the value of variables part way through the running of a program. Since we can't see the value of the variable change on the screen we need to find another way to get that information.\n\n# Do This\n\n* **Starter Code:** We started you off with the same problem from the last level with `console.log()` statements at the beginning and end of the program to check the starting and ending values\n\n* **Add `console.log()` statements** to find out the value of a and b after the first reassignment statement `a = b;`",
        "U3L19 - Target Clicker App_markdown_instruction": "# The Goal\n\nWe have seen a couple different versions of this app before. At the end of the design mode lesson we made something very similar to this app. There are a couple new elements in the app now. Study how those new elements work. \n\n# Do This\n* Run the example program\n* Investigate: What happens when you **click on the Code.org logo**? \n* Investigate: What happens when you **click somewhere else**? \n* Investigate: What happens when you hit the **reset button**.   ",
        "U3L19 - final prompt_markdown_instruction": "Respond to your teacher's prompt below",
        "U3L19 - fix the var name syntax error v2_markdown_instruction": "# Debugging Variables\n<img src=\"https://images.code.org/18cb0f3b0fc43def369a3329854edc2e-image-1447272068495.png\n\" style=\"float: right; border: solid 1px black; width: 350px\">\n\nOne of the most common errors that can happen when you try to run a program is `Unknown identifer`.\nThis is just the computer trying to tell you that it doesn't recognize something you wrote.  Usually it's the name of a variable or function that you're trying to write and there is a small misspelling.\n\n**The computer doesn't hate you :)** It just needs everything to be exact so it can understand what you're trying to get it to do.\n\n**App Lab** alerts you to potential errors in two ways:<img src=\"https://images.code.org/329990c2e51e1e07a16d5e550cf766f0-image-1447272337465.gif\" style=\"width: 350px; float: right; border: solid 1px black\">\n\n* Hover your mouse over the yellow triangles or red squares next to line numbers in the code to see what they say.\n* As usual, the Debug Console will also tell you about any errors while your program is running. \n\n# Do This:\nWe've given you some code with some errors in it.  Look at the error messages and try to figure out the problem.\n\n* **Run the program**.\n* **Locate and fix the error**.\n\nWhen you get it right the output to the console should look like this:\n\n![](https://images.code.org/9c7a8eb5db973f81eb2faa89713d4f30-image-1445477911014.png)\n",
        "U3L19 - fix the var name syntax error_markdown_instruction": "# Debugging Variables:\n<img src=\"https://images.code.org/e65caa6cd2f3572dc38d09d6caaeb067-image-1445477367690.png\n\" style=\"float: right; border: solid 1px black\">\n\nOne of the most common errors that can happen when you try to run a program is `Unkonwn identifer`.\nThis is just the computer trying to tell you that it doesn't recognize something you wrote.  Usually it's the name of a variable or function that you're trying to write and there is a small misspelling.\n\n**The computer doesn't hate you :)** It just needs everything to be exact so it can understand what you're trying to get it to do.\n\n**App Lab** alerts you to potential errors in two ways:<img src=\"https://images.code.org/f8cb1bb7d4c8989d67faa3e72e6d1d15-image-1445477022928.gif\" style=\"width: 350px; float: right; border: solid 1px black\">\n\n* Hover your mouse over the yellow triangles or red squares next to line numbers in the code to see what they say.\n* As usual, the Debug Console will also tell you about any errors while your program is running. \n\n# Do This\nWe've given you some code with some errors in it.  Look at the error messages snd try to figure out the problem\n\n* **Run the program**\n* **Locate and fix the error**\n* When you get it right the output to console should look like this:\n\n![](https://images.code.org/9c7a8eb5db973f81eb2faa89713d4f30-image-1445477911014.png)",
        "U3L19 - variable scope problem 2_markdown_instruction": "# Debugging Variables: Part 5\n\n\n# Do This\n* First run the program to see the problem.  \n\n* You don't need to write code to solve any problem here. But you do need to investigate the code and come up with an explanation for WHY what's happening is happening. \n\t* Why aren't 3 things being written to the screen?  \n    * Why does the variable foo seem to exist once but not the other times?  \n    * If you switch to code mode you'll see some warning messages next to two lines of code -- why do you get those messages? \n    \n* Once you think you have a good answer, continue to the next page.",
        "U3L19 - write var and string with same name v2_markdown_instruction": "# Debugging Variables\n<img src=\"https://images.code.org/1363b1799cd0f70e383664b4c6359ef4-image-1445479475849.png\" style=\"float:right; width: 200px\">There is a simple command called `write` in the UI Controls toolbox that is a fast and easy way to display text in the app itself. The way you use it is very similar to `console.log`.  Let's debug another problem only using `write` instead of `console.log`.  \n\nYou may have already run into this problem!  But it's worth mentioning again. To display the value of a variable you *should not* use quotes. Notice the difference between these two statements - the comments next to each line explains the differences:\n``` \n write(\"score\");  // will display the literal characters s-c-o-r-e\n write(score);    // will retrieve the value of score and display it\n```\n\n# Do This:\n<img src=\"https://images.code.org/a0ff680a245dba5546183e07ebbeaef2-image-1447270477159.png\" style=\"float: right; width: 250px\">To solve these problems you **should only add or remove quotation marks**.\n* **Run the starter code**\n* **Locate and fix the problems**\n\n**GOAL:** Make the app display what's shown at right by only adding or removing quotation marks from the code given.\n\n![]()",
        "U3L19 - write var and string with same name_markdown_instruction": "# Debugging Variables\n<img src=\"https://images.code.org/1363b1799cd0f70e383664b4c6359ef4-image-1445479475849.png\" style=\"float:right; width: 200px\">There is a simple command called `write` in the UI Controls toolbox that is a fast and easy way to display text in the app itself. The way you use it is very similar to `console.log`.  Let's debug another problem only using `write` instead of `console.log`.  \n\nYou may have already run into this problem!  But it's worth mentioning again. To display the value of a variable you *should not* use quotes. Notice the difference between these two statements - the comments next each line explains the differnece:\n``` \n write(\"score\");  // will display the literal characters s-c-o-r-e\n write(score);    // will retrieve the value of score and display it\n```\n\n# Do This\n<img src=\"https://images.code.org/a0ff680a245dba5546183e07ebbeaef2-image-1447270477159.png\" style=\"float: right; width: 250px\">To solve these problems you **should only add or remove quotation marks**\n* **Run the starter code**\n* **Locate and Fix the problems**\n\n**GOAL:** Make the app display what's shown at right by only adding or removing quotation marks from the code given.\n\n![]()",
        "U3L2 Free Response Reflection_markdown_instruction": "Respond to your teacher's prompt in the space below.\n",
        "U3L2 Using Simple Commands (no tooltips)_markdown_instruction": "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\" align=right>**Directions:** Given only 4 turtle commands, write code in App Lab to complete the drawings in each of the challenges below.  Your goal is to write code that solves the problem as efficiently as possible using only the commands provided.  \n\nWhat does “efficient” mean?  In computer science it can actually mean several different things depending on what you’re talking about.  Work on these challenges, try to solve them in a way that you think is best and we’ll ask about efficiency at the end.\n\n<img src=\"https://levelbuilder-studio.code.org/script_assets/k_1_images/instruction_gifs/csp/U3L02-leftSquare.gif\" align=right>**Warm up 1:** Draw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the Finish button - it will appear once you run the program.",
        "U3L20 Assessment4_markdown_instruction": "How do you know if a program needs a conditional statement?\n",
        "U3L20 Assessment5_markdown_instruction": "How do you decide when to use an \"if\" statement or \"if-else\" statement?\n",
        "U3L20 Assessment6_markdown_instruction": "When using an \"if\" statement, what line of code is executed if the condition is false?\n",
        "U3L20 Assessment7_markdown_instruction": "How do you know if the conditionals in your code are working correctly?\n",
        "U3L20 Assessment8_markdown_instruction": "What is the result of a Boolean expression?\n\n\n",
        "U3L20 Free Response Getting Started_markdown_instruction": "Think about these statements. Are they true or false?\n\n    There are 7 days in the week. \n    Candy Crush is a fun app.\n    2 + 1 = 4\n    A beach vacation is the best.\n\nIn 50 words, speculate on what you think it means to be true or false in a computer compared to true or false in life.\n\n\n",
        "U3L20 Free Response Wrap Up_markdown_instruction": "Share your game with a partner. \nExamine the conditional and help each other resolve any problems.\n\nWhat help or suggestions did you provide to your partner? \n\nWhat suggestions did your partner offer to you that improved the decision making in your game?\n\n\n",
        "U3L21 Assessment Wrap Up_markdown_instruction": "Revisit and examine the Clicker Game Enhancement list from Lesson 18 - Controlling Memory and Program Flow. \n\nWhat enhancements do you now have the knowledge and skills - related to variables and conditionals - necessary to implement?\n\n\n",
        "U3L22 Assessment_markdown_instruction": "Why is an inline function used in your clicker game to get or set a key/value pair?\n",
        "U3L22 Free Response Getting Started_markdown_instruction": "In the previous lesson, you added a \"best score\" feature to your clicker game. It worked fine for multiple plays in one game-playing session. \n\nWhy doesn't it save your best score from one session to the next?\"\n",
        "U3L22 Reflection_markdown_instruction": "Use the rubric to assess your Clicker Game project. Then, reflect on your learning by answering the following questions.\n\nAnswer in 100 words:\n\n* What are you most proud of in this project? Why?\n\n* What problems did you have?\n\n* How did you resolve them? \n\n* What did you learn from the problems? \n\n* Were some of the problems avoidable? How? \n\n* If you were to do this activity again, what would you do differently?\n",
        "U3L23 Chatbot Intro 4_markdown_instruction": "Congrats! You've made a basic personal assistant!\n\nUse this level to continue to make your personal assistant look and work better. \n\n#### Some things you can do\n\n* Required: Add a comment before each of your functions describing what they do\n* Change the coloring of each object\n* Change the text color\n* Update the prompt and default response to seem more conversational\n\nIn the next lesson, we will start to make your personal assistant smarter.",
        "U3L23 Chatbot Intro_markdown_instruction": "Time to make your own specialized digital assistant! We'll be working with this a lot, so make it personalized and fun!\n\n### Instructions:\n\n* Choose a topic you want your digital assistant to specialize in. It should be something you are interested in and know a lot about. Examples: Country Music, Sushi, College Football, Comedy Movies\n\n* Create your digital assistant\n\n\t* Your digital assistant should read the user's input and display it back to them along with some default response.\n    \n    * Anyone should be able to easily distinguish between the text that the user typed and the response from the digital assistant.\n",
        "U3L23 Free Response Wrap Up 2_markdown_instruction": "\"Age Bot\" is a personal assistant that gives information about age-related milestones in a person's life. Write an algorithm so Age Bot can answer the question \"What is the voting age in the United States?\"\n",
        "U3L23 Free Response Wrap Up_markdown_instruction": "Identify a global problem that a NLP (Natural Language Processing) application could be used to help solve. \n\n* Describe the problem.\n* Explain how you think a NLP app could contribute to a solution.\n* Describe how the app would interact with the user. \n* What would you name the app? \n\n",
        "U3L24 Assessment 3_markdown_instruction": "\nHow do you prove that your digital assistant works the way you want it to work? You need to provide a series of test cases that will allow anyone to test your digital assistant and verify that it works correctly. \n\n<strong>This is a required section for your digital assistant</strong>\n\nIn the space below, record all keywords and keyword combinations that will cause your digital assistant to produce a unique output. Use the following format:\n\n<br/>\n<table style=\"width:100%;\">\n  <tr>\n    <th>Format</th>\n    <th>Example</th> \n  </tr>\n<tr>\n<td style=\"vertical-align: text-top; border-right:1px solid #000; width:40%;\">\nSpecialty = &lt;digital assistant's specialty here><br/><br/>\n&lt;keyword>: &lt;output sentence here><br/><br/>\n&lt;keyword1 AND keyword2>: &lt;output sentence here><br/><br/>\n&lt;\"key word phrase 3\">: &lt;output sentence here><br/><br/>\n&lt;keyword5 OR keyword6>: &lt;output sentence here><br/><br/>\nDefault response: &lt;my default response here><br/><br/>\n</td>\n<td style=\"padding-left:20px;\">\nSpecialty = Revolutionary War<br/><br/>\nWashington: General George Washington was commander in chief of the Continental Army and became our first president.<br/><br/>\n\"Fourth of July\" OR \"4th of July\":  In July 1776, the Continental Congress officially declared independence from Britain.<br/><br/>\nsoldiers AND train: General Friedrich Wilhelm von Steuben trained many of the soldiers in the Continental Army.<br/><br/>\nsoldiers AND hardship: Soldiers fought through cold weather, poor supplies, and diseases.<br/><br/>\nDefault response: I don't know much about that. Try asking about George Washington or the soldiers.<br/><br/>\n</td>\n</tr>\n</table>\n\n<br/>\n\n*You will be given several opportunities update this section as you add more features to your digital assistant.*\n\n<br/>\n\n",
        "U3L24 Chatbot Conditionals 2_markdown_instruction": "## If/else statement warm-up\n\nNow the Color Bot only responds to the input blue! This isn't really an improvement from the bot that always had a default response for anything. Luckily, we can add that default response back in by using an `else` statement.\n\n### Instructions\n\n* Turn the `if` statement into an `if/else` statement to make the bot respond \"I don't know that color.\" if the user types anything besides blue.",
        "U3L24 Chatbot Keyword Record_markdown_instruction": "Now it's time to catch the bugs in your own digital assistant. Your code might be working correctly right now, but you have to be able to **prove** it. Use the next level to record the keywords/phrases that your digital assistant responds to. \n\nYou will have many chances to add to this record over the next few days. Remember, you will not be able to earn full credit on the digital assistant project without a comprehensive record of your keywords.",
        "U3L24 Nested Conditionals Bugs 3_markdown_instruction": "## #3: Nested Conditional Remix\n\nWe've updated \"Synonym Bot\" to \"Word Bot.\" It now recognizes the subtopics \"synonym\" and \"define\"! Unfortunately, Word Bot doesn't work correctly just yet.\n\n### Instructions\n\n* Use the \"Activity Guide - Debugging Conditionals\"\n* Expose the bugs that still exist in this program by typing inputs into the user-input box. \n* Track which inputs cause unexpected outputs.\n* Fix these bugs and prove that the program now works as expected.",
        "U3L24 introIncludes_markdown_instruction": "# *includes*\n<img src=\"https://images.code.org/7373ad2ad98b0d815ce0b8196c2ec177-image-1446070324010.11.43 PM.png\" style=\"width: 250px; float:right\">\n\nWe're going to explore a new function called `includes`. This function can be used to check if one string appears anywhere inside of another. Just like `toUpperCase` and `toLowerCase` this function is called using **dot notation**.\n\n# *includes* Returns a Boolean\n**`includes` is a function that returns a boolean.** In other words, when the function runs it will **evaulate to either `true` or `false`**. This function can be used **anywhere you would normally use a boolean expression**.\n\nYou've actually **seen a few functions that return a value before this**. `randomNumber` is a function that returns a number and `getText` is a function that returns a string. In every case we've used these functions **as if they were the data type they return (or evaulate to)**. Notice that in block mode these functions don't have the connectors that other commands do since they will be used as a piece of data within another function.\n\n# Do This:\n\n* **Read the documentation** for `includes`.\n* **Starter code** has been provided which shows one instance where a string does include a `searchValue` and one where it does not.\n* **Replicate the style** of these commands to check the rest of questions provided.\n* **Create three statements of your own using `includes`** making use of the `console.log` statements provided.\n* **Once you're comfortable with this command move on.**",
        "U3L25 - play sound when up key_markdown_instruction": "# Play Sound With Keys\n\nYou may have noticed from the last couple of levels that the value of `event.key` is just a string which is the name of the key. As a result we can check which key was pressed with a simple conditional statement.  For example to check for the press of the **\"a\"** key we could write `if (event.key == \"a\")`.\n\n# Do This:\nThe **starter code provided** plays the sound whenever ANY key is pressed.\n\n* Use `console.log` to **find out the value of `event.key` when the up arrow is pressed.**\n\n* **Add an `if` statement** so the sound only plays when the when the **up arrow** is pressed.",
        "U3L25 Assessment_markdown_instruction": "Write a compound conditional/nested if statement to fit the situation:\n\nHenry and Milton flip a coin twice. \n\nIf the coin lands on the same side twice, Henry wins. \n\nIf the coin lands on different sides for each flip, Milton wins.\n",
        "U3L25 Free Response 1_markdown_instruction": "What is the output of this code segment?\n\n\tvar sentence = \"This sentence contains five words?\";\n\tvar spaceIndex = sentence.indexOf(\" \");\n\tvar smallerSentence = sentence.substring(spaceIndex + 1, sentence.length);\n\tconsole.log(smallerSentence);\n\n<br/>\n",
        "U3L25 Free Response 2_markdown_instruction": "What is the output of this code segment?\n\n    var str = \"Hello World\";\n\tvar worldIndex = str.indexOf(\"World\");\n\tvar answer = str.substring(worldIndex, worldIndex + \"World\".length);\n\tconsole.log(answer);\n\n<br/>\n",
        "U3L25 Free Response 3_markdown_instruction": "What is the output of this code segment?\n\n\tvar phrase = \"I am so\";\n\tvar emotion = \"excited\";\n\tvar sentence = phrase + \" \" + emotion.toUpperCase() + \"!\";\n\tconsole.log(sentence);\n<br/>\n",
        "U3L25 Free Response Getting Started_markdown_instruction": "Examine these three sentences.\n\n1. If you have the letter S in your name, please stand.\n\n2. If you play an instrument or sing in the choir, please put your head down on your desk.\n\n3. If the number of your home address is an even number please stand, otherwise please put your head down on your desk.\n\nDescribe how they are logically different.\n\n\n",
        "U3L25 Free Response Wrap Up_markdown_instruction": "Give 2 reasons why Boolean statements are important in writing efficient programs.\n",
        "U3L25 String Parsing 1_markdown_instruction": "## Challenge 1\n\nGiven the string <samp>\"Wisdom begins with wonder.\"</samp> what is the index of the following characters <samp>W</samp>, <samp>t</samp>, <samp>w</samp>, <samp>.</samp>, <samp>d</samp>, and <samp>k</samp>? Confirm your expectation using the <samp>string.indexOf()</samp> function.",
        "U3L25 String Parsing 2_markdown_instruction": "## Challenge 2.1\n\nUse <samp>str.length</samp> to find the length of the following strings:\n\n1. <samp>“Hello World”</samp>\n\n1. <samp>“Computer science rocks!\"</samp>\n\n1. <samp>“I promise to do my homework every day.”</samp>\n",
        "U3L25 String Parsing 3_markdown_instruction": "## Challenge 2.2\n\nWrite a password length checker that writes “yes” to the console if a string has a length greater than 10, or “no” if its length is less than or equal to 10.\n\nTest your function using two strings, one that will satisfy each conditional option.",
        "U3L25 String Parsing 4_markdown_instruction": "## Challenge 3\n\nYou are given the string <samp>\"Wisdom begins with wonder.\"</samp> Use the <samp>string.substring(begin, end)</samp> function to print \"begin\" and \"nder\" to the console.",
        "U3L25 String Parsing 7_markdown_instruction": "## Challenge 5: \n\nOther string functions include <samp>str.toUpperCase()</samp> and <samp>str.toLowerCase()</samp>. \n\n### Instructions\nYou are given the string <samp>var shakespeare = \"The earth has music for those who listen\";</samp>. \n* Use each of the above functions on the string <samp>shakespeare</samp>\n* Output the result to the console\n* Record the result on your activity guide",
        "U3L26 Chatbot Compound Conditionals_markdown_instruction": "Here's your digital assistant again! Time to make it a little smarter.\n\n### Instructions\n\n* Add a compound conditional to your digital assistant\n* Your digital assistant should include at least one each of AND, OR, and NOT\n* As you make updates in your digital assistant, record those changes on the next level\n\nDon't stay here too long. We still have lots to do!",
        "U3L26 Chatbot Final_markdown_instruction": "Here's your digital assistant again! Time to make it a little smarter.\n\n### Instructions\n\n* Add a compound conditional to your digital assistant\n* Your digital assistant should include at least one each of AND, OR, and NOT\n\nDon't stay here too long. We still have lots to do!",
        "U3L26 Free Response Getting Started_markdown_instruction": "Think about interactions you have experienced in conversations.\n\nHow do you know when someone you're talking to is engaged in the conversation? \n\nWhat do they say that indicates that they are paying attention?\n\n\n",
        "U3L26 Free Response Wrap Up_markdown_instruction": "What is the output of this code segment?\n\n\tvar str = \"Hello World\";\n\tvar worldIndex = str.indexOf(\"World\");\n\tconsole.log(worldIndex);\n\n<br/>\n",
        "U3L27 Assessment1_markdown_instruction": "Assess your digital assistant using the rubric.\n\nDiscuss how you incrementally developed your program. What did you create first? What came next? What problems did you encounter and solve? (100 words max)\n",
        "U3L27 Assessment2_markdown_instruction": "What was the most significant feedback you provided that helped other students review and revise their programs? (100 words max)\n\n",
        "U3L27 Assessment3_markdown_instruction": "What was the most significant feedback another student provided that helped you review and revise your program? (100 words max)\n",
        "U3L27 Chatbot Final_markdown_instruction": "Here's your digital assistant one last time.\n\n### Instructions\n\n* Make your digital assistant awesome!\n* When you are finished, ask one of your classmates to test it for you using the activity guide.\n* Remember: as you add features to your digital assistant, track them on the next level",
        "U3L27 Free Response Getting Started_markdown_instruction": "Record the first step in the Think-Pair-Share activity here. \n\nThink of three ways to use strings within your chatbot to make it respond more ‘intelligently’ or expand its ‘personality.’\n\nRecord your ideas here and then share with another classmate.\n",
        "U3L28 Free Response Getting Started_markdown_instruction": "A while loop is a process that continues as long as some condition is true. \nWe experience many of them every day in our normal activities. \n\nDescribe a real-world example of a while loop that you personally experience in your daily life. \n\nWhat is the condition that causes the loop to continue?\n",
        "U3L28 Free Response Wrap Up_markdown_instruction": "In your own words, describe how a while loop works. \n\nExplain two things to pay attention to when creating while loops.  \n\nIn your response justify why the name \"while loop\" accurately describes the behavior of this new programming construct.\n",
        "U3L29 Free Response Getting Started_markdown_instruction": "***Think about gathering data from a coin flip game.*** In addition to the number of heads and tails, what other data might be interesting to gather?\n",
        "U3L29 Free Response Wrap Up_markdown_instruction": "***Describe another game that depends upon random numbers.*** List three statistics that might be interesting to collect from 10,000 plays of that game?\n",
        "U3L2_Turtle3by3Grid_markdown_instruction": "# Do This: \nDraw a 3x3 grid to the *front* and *right* of the turtle as efficiently as possible. The turtle should end at its original location, facing its original direction.\n\n![](https://images.code.org/c15fee1f27c817a352a521c7ddcb5006-image-1436282127747.png)\n\n**HINT:** This problem presents some subtle challenges. Work with your partner to discuss possible solutions. Try more than one path. Testing your ideas on paper might be a faster way to brainstorm.\n\n",
        "U3L2_Turtle3by3Grid_2018_markdown_instruction": "# Do This: \nDraw a 3x3 grid to the *front* and *right* of the turtle as efficiently as possible. The turtle should end at its original location, facing its original direction.\n\n![](https://images.code.org/c15fee1f27c817a352a521c7ddcb5006-image-1436282127747.png)\n\n**HINT:** This problem presents some subtle challenges. Work with your partner to discuss possible solutions. Try more than one path. Testing your ideas on paper might be a faster way to brainstorm.\n\n",
        "U3L30 Free Response Getting Started_markdown_instruction": "Why do you think human beings create lists? \n\nWhat types of lists have you created? \n\nHow do you use lists?\n",
        "U3L31 Assessment1_markdown_instruction": "Assess your photo album project with the rubric. Then answer the following questions.\n\nDiscuss how you incrementally developed your program. (100 words max)\n\n* What did you create first? \n* What came next? \n* What problems did you encounter and solve?\n",
        "U3L31 Assessment2_markdown_instruction": "Describe how the feedback you gave to another student was helpful.(100 words max)\n\n* What was the most significant feedback you provided that helped a peer review, revise and improve the program? \n* How did your suggestions contribute to the improvement?\n",
        "U3L31 Assessment3_markdown_instruction": "What was the most significant feedback another student provided to your project that helped you review, revise, and improve your program? (100 words max)\n",
        "U3L31 Free Response Getting Started_markdown_instruction": "List three reasons why you think that electronic photo albums are so popular.\n",
        "U3L32 Free Response Getting Started_markdown_instruction": "Did you ever own a \"lite-brite\" toy as a child? Describe how an image is created with this toy. What would you have to do to change everything that is red to blue?\n",
        "U3L33 Free Response Getting Started_markdown_instruction": "Describe the visual impact of each of the following effects. What do you have to do to the image to create the desired effect?\n\n* Make an image \"warmer\"\n* Make an image \"cooler\"\n* Make an image \"brighter\"\n* Make an image \"darker\"\n* Make an image \"gray scale\"\n\n\n",
        "U3L34 Free Response Getting Started_markdown_instruction": "Have you ever seen hidden-image stereograms...an image hidden within what appears to be a colorful geometric pattern? See an example <a href=\"http://www.vision3d.com/sghidden.html\" target=\"_blank\"> here.\n\n</a>How do you think stereograms are created?\n",
        "U4 - Charts - Export Data_markdown_instruction": "# Exporting Data\n\nIn the last level, you saw that **remixing a project doesn’t copy over the data** from the original project’s database. But what happens if you want to keep that data and use it in your remixed app? To do that, you need to **export the data** from your original app.\n\n**Exporting data is the opposite process of importing data.** Remember that when you imported data, you provided App Lab with a CSV file of the records you wanted to add to your database. Inversely, when you export data, **App Lab will collect all the records that are already in your database and put them in a CSV file** which then downloads to your computer.\n\nOnce you have the CSV file, you can import it into your new project using the method you learned previously.\n\n# Do This:\n\n* **Open the data viewer** for the “ages” table.\n* **Click the “Export” button** above the table. This will download the data from your table as a CSV file.\n\n<img src=\"https://images.code.org/a613c249b75af817ed2468b97ee06b1f-image-1450391880690.27.00.png\" style=\"display:block; margin-left:auto; margin-right: auto;\">\n\n* **Remix the app** again, and then **import the CSV file** you just downloaded.\n* Run the app and **verify that the data was successfully loaded** into your table. Then **come back here.**\n\n",
        "U4 - Charts - Export Data_2018_markdown_instruction": "# Exporting Data\n\nIn the last level, you saw that **remixing a project doesn’t copy over the data** from the original project’s database. But what happens if you want to keep that data and use it in your remixed app? To do that, you need to **export the data** from your original app.\n\n**Exporting data is the opposite process of importing data.** Remember that when you imported data, you provided App Lab with a CSV file of the records you wanted to add to your database. Inversely, when you export data, **App Lab will collect all the records that are already in your database and put them in a CSV file** which then downloads to your computer.\n\nOnce you have the CSV file, you can import it into your new project using the method you learned previously.\n\n# Do This:\n\n* **Open the data viewer** for the “ages” table.\n* **Click the “Export” button** above the table. This will download the data from your table as a CSV file.\n\n<img src=\"https://images.code.org/a613c249b75af817ed2468b97ee06b1f-image-1450391880690.27.00.png\" style=\"display:block; margin-left:auto; margin-right: auto;\">\n\n* **Remix the app** again, and then **import the CSV file** you just downloaded.\n* Run the app and **verify that the data was successfully loaded** into your table. Then **come back here.**\n\n",
        "U4 - Charts - Import Data - 1_markdown_instruction": "We can import data\n\nGiven a csv file, have students import it and then go look at in the data viewer",
        "U4 - Charts - Import Data 2_markdown_instruction": "# Using Imported Data\nOnce you’ve imported a CSV file, **you can use the data in your app using the data commands you already learned.**\n\n# Do This:\n\n* Practice using your newly-imported data by **calling `readRecords` on “mytable.\"**\n* In the callback function for `readRecords`, **print each record to the console.**",
        "U4 - Charts - Import Data 2_2018_markdown_instruction": "# Using Imported Data\nOnce you’ve imported a CSV file, **you can use the data in your app using the data commands you already learned.**\n\n# Do This:\n\n* Practice using your newly-imported data by **calling `readRecords` on “mytable.\"**\n* In the callback function for `readRecords`, **print each record to the console.**",
        "U4 - Charts - drawChartFromRecords Options 2_markdown_instruction": "There are still **several other chart properties that you can manipulate** using the `options` parameter of `drawChartFromRecords`. You can use these properties to change the colors in your chart, hide the legend, and much more! **Remember, when customizing your chart, it’s less about making a pretty chart and more about manipulating your data so that it’s easier for others to read and understand.**\n\n# Do This:\n\n* **Open the API** for the `drawChartFromRecords` block.\n* Read through and **pick some of the other interesting options properties to customize** for your chart.",
        "U4 - Charts - drawChartFromRecords Options 2_2018_markdown_instruction": "There are still **several other chart properties that you can manipulate** using the `options` parameter of `drawChartFromRecords`. You can use these properties to change the colors in your chart, hide the legend, and much more! **Remember, when customizing your chart, it’s less about making a pretty chart and more about manipulating your data so that it’s easier for others to read and understand.**\n\n# Do This:\n\n* **Open the API** for the `drawChartFromRecords` block.\n* Read through and **pick some of the other interesting options properties to customize** for your chart.",
        "U4 - Charts - drawChartsFromRecords 1_markdown_instruction": "Instead of using the table to read out the entire table, let's visualize it by using a chart. Here's a new block called drawChartsFromRecords [insert image]. We're going to use this new block to create a scatter plot [how do they choose those options?]\n\nLOADING DATA: (just use default table name, column names, so all they have to do is drag and drop the block, w/o messing with the parameters)\n\n# Do This:\n\nAdd a screen element for charts\n\nPull out the drawCharts block\n\nMake the ID match the ID they gave the screen element\n\nRun the program to see what happens!\n",
        "U4 - CreateRecord - 1_markdown_instruction": "# Permanent Data Storage\n\nUp to now, all the data created in our app disappears or gets lost each time we re-run the app.  You were probably frustrated, for example, that a new contact added by the user didn't save permanently to the list.  We can change that!\n\n# App Lab's Data Tools\n<img src=\"https://images.code.org/5d596107387e3edcb35aa3d317b0e9f5-image-1448992686641.46.54 PM.png\" style=\"width: 100px; float: right\"> App Lab has a set of commands for storing data permanently in a database! You can write code to save data and then retrieve it later, even if the app has been stopped and re-started. All together we call this set of commands **App Lab's Data Tools**, and they have their own toolbox category called \"Data\".\n\n\"What's a database? Where is it? How do I use it?\" It's easier to show you these things than explain it all at once.  So let's get started, and we'll explain everything you need to know along the way.\n\n# Do This:\n\n* **Drag out the `createRecord` command**. It has some default code provided.\n* **Run the program**. After a brief pause, you should see the message in the console: **\"Success! Created record.\"**\n* **What happened? What was created? Where is it?** After you've seen the \"success\" message, click finish to move to the next level.  We'll explain there.\n\n![](https://images.code.org/fa1c0d6f399ba181d4179838205b93e3-image-1449164742176.gif)",
        "U4 - CreateRecord - 1_2018_markdown_instruction": "# Permanent Data Storage\n\nUp to now, all the data created in our app disappears or gets lost each time we re-run the app.  You were probably frustrated, for example, that a new contact added by the user didn't save permanently to the list.  We can change that!\n\n# App Lab's Data Tools\n<img src=\"https://images.code.org/5d596107387e3edcb35aa3d317b0e9f5-image-1448992686641.46.54 PM.png\" style=\"width: 100px; float: right\"> App Lab has a set of commands for storing data permanently in a database! You can write code to save data and then retrieve it later, even if the app has been stopped and re-started. All together we call this set of commands **App Lab's Data Tools**, and they have their own toolbox category called \"Data\".\n\n\"What's a database? Where is it? How do I use it?\" It's easier to show you these things than explain it all at once.  So let's get started, and we'll explain everything you need to know along the way.\n\n# Do This:\n\n* **Drag out the `createRecord` command**. It has some default code provided.\n* **Run the program**. After a brief pause, you should see the message in the console: **\"Success! Created record.\"**\n* **What happened? What was created? Where is it?** After you've seen the \"success\" message, click finish to move to the next level.  We'll explain there.\n\n![](https://images.code.org/fa1c0d6f399ba181d4179838205b93e3-image-1449164742176.gif)",
        "U4 - CreateRecord - 2.5_markdown_instruction": "# Databases and Tables\n\nA **database** is an organized collection of data that you access and modify.  \nA **table** is one collection of data in a database made up of rows and columns.\n\n<img src=\"https://images.code.org/7d5b39f1e9d718ae8274ecf2f12941de-image-1449503932339.58.24 AM.png\" style=\"block:left; width: 300px\">\n\nA table is very similar to a spreadsheet (like the one show above) in which individual pieces of information can be referenced by a row and column. **A database in App Lab is just a collection of many tables**. Using App Lab's data commands you can add to and modify the tables in your database.\n\nThe **first parameter** of `createRecord` specifies the name of the table you want to add a record to.\n\n  * If you give a table name that **already exists** - App Lab will **add the data to that table**.\n  * If you give a table name that **does not exist** - App Lab will **create a new table** with that name and add data to it.\n \nYou can see this in your own app by changing the name of the table in your createRecord command.\n\n# Do This:\n<img src=\"https://images.code.org/a8aff3906ed413464f6f224a163f7325-image-1449176473237.gif\" style=\"float: right; width: 300px\">\n\n**Your code from the previous excercise** is provided.\n\n* **Change the name of \"mytable\"** to something else.\n* **Run the app.**\n* **Check the Data Viewer** to see the new table has been added to your database.\n* **Note:** If the Data Viewer was already open you will need to refresh the page to see the changes.",
        "U4 - CreateRecord - 2.5_2018_markdown_instruction": "# Databases and Tables\n\nA **database** is an organized collection of data that you access and modify.  \nA **table** is one collection of data in a database made up of rows and columns.\n\n<img src=\"https://images.code.org/7d5b39f1e9d718ae8274ecf2f12941de-image-1449503932339.58.24 AM.png\" style=\"block:left; width: 300px\">\n\nA table is very similar to a spreadsheet (like the one show above) in which individual pieces of information can be referenced by a row and column. **A database in App Lab is just a collection of many tables**. Using App Lab's data commands you can add to and modify the tables in your database.\n\nThe **first parameter** of `createRecord` specifies the name of the table you want to add a record to.\n\n  * If you give a table name that **already exists** - App Lab will **add the data to that table**.\n  * If you give a table name that **does not exist** - App Lab will **create a new table** with that name and add data to it.\n \nYou can see this in your own app by changing the name of the table in your createRecord command.\n\n# Do This:\n<img src=\"https://images.code.org/a8aff3906ed413464f6f224a163f7325-image-1449176473237.gif\" style=\"float: right; width: 300px\">\n\n**Your code from the previous excercise** is provided.\n\n* **Change the name of \"mytable\"** to something else.\n* **Run the app.**\n* **Check the Data Viewer** to see the new table has been added to your database.\n* **Note:** If the Data Viewer was already open you will need to refresh the page to see the changes.",
        "U4 - CreateRecord - 2_markdown_instruction": "# Data Viewer\n\n**Where did that data go?** App Lab's database is \"remote\" which means the data is stored separately from the app code on a server. A common term for this is \"cloud storage\".\n\nTo see the data you have to use the **Data Viewer**. You may have noticed a button right above the app display that looks like this. <img src=\"https://images.code.org/a816694aad344a14dd44fb14b26a5c64-image-1497459608411.50.42 PM.png\" style=\"width: 80px\">\n \n* Click **View Data** to see all of the \"tables\" in your database (We'll explain what a table is later).\n* You should see one table called **mytable**.  \n* Click **view** to see all of the data stored in that table.\n* **Notice** that an **id number was automatically generated** for every row in the table.\n![](https://images.code.org/48994996542a35a3473a14d2f99d45e2-image-1449168371760.gif)\n \n# Do This:\n<img src=\"https://images.code.org/dffe4d9d3b8541189242aa95913ecfee-image-1449168144127.gif\" style=\"width: 300px; float: right\">\n\n* In the code, **change \"Alice\" to a different name** in the call to `createRecord`.\n* **Run the app** a few times by repeatedly clicking \"Run\" and \"Reset.\"\n* **Check the Data Viewer** to make sure it worked! \n* **Note:** If you already had the Data Viewer open you will need to **refresh the page** to see the changes.",
        "U4 - CreateRecord - 2_2018_markdown_instruction": "# Data Viewer\n\n**Where did that data go?** App Lab's database is \"remote\" which means the data is stored separately from the app code on a server. A common term for this is \"cloud storage\".\n\nTo see the data you have to use the **Data Viewer**. You may have noticed a button right above the app display that looks like this. <img src=\"https://images.code.org/a816694aad344a14dd44fb14b26a5c64-image-1497459608411.50.42 PM.png\" style=\"width: 80px\">\n \n* Click **View Data** to see all of the \"tables\" in your database (We'll explain what a table is later).\n* You should see one table called **mytable**.  \n* Click **view** to see all of the data stored in that table.\n* **Notice** that an **id number was automatically generated** for every row in the table.\n![](https://images.code.org/48994996542a35a3473a14d2f99d45e2-image-1449168371760.gif)\n \n# Do This:\n<img src=\"https://images.code.org/dffe4d9d3b8541189242aa95913ecfee-image-1449168144127.gif\" style=\"width: 300px; float: right\">\n\n* In the code, **change \"Alice\" to a different name** in the call to `createRecord`.\n* **Run the app** a few times by repeatedly clicking \"Run\" and \"Reset.\"\n* **Check the Data Viewer** to make sure it worked! \n* **Note:** If you already had the Data Viewer open you will need to **refresh the page** to see the changes.",
        "U4 - CreateRecord - 3_markdown_instruction": "# Records are Objects\n\n**What's a record?**\nIn database terminology, each item that is stored in table is called a **record**.  This is why the command is called `createRecord`. In App Lab, a **record is an object**, and a data table is essentially a collection of JavaScript objects stored in the cloud.\n\n**The second parameter** of `createRecord` is the object you are storing in the database.\n\n* As you have seen you can specify the object using notation like this: `{name:\"Alice\"}`\n* But you can **also provide an object variable** and the whole object will be stored.\n* App Lab **creates a column for each property of the object.**\n\n# Do This:\n\n**Starter code is provided** that creates a simple JavaScript object representing a song.\n\n* Drag out the `createRecord` command.  \n* **Set the table name** (the first parameter) to something descriptive like \"mySongs\".\n* **Set the second parameter** to the name of the object you want to store, in this case `song`.\n* **Run the program.**\n* In the Data tab **verify that a new table was created and that the `song` object was added as a record**.\n\n![](https://images.code.org/d587a1bc977f54d132acafa63764d813-image-1449241390939.gif)",
        "U4 - CreateRecord - 3_2018_markdown_instruction": "# Records are Objects\n\n**What's a record?**\nIn database terminology, each item that is stored in table is called a **record**.  This is why the command is called `createRecord`. In App Lab, a **record is an object**, and a data table is essentially a collection of JavaScript objects stored in the cloud.\n\n**The second parameter** of `createRecord` is the object you are storing in the database.\n\n* As you have seen you can specify the object using notation like this: `{name:\"Alice\"}`\n* But you can **also provide an object variable** and the whole object will be stored.\n* App Lab **creates a column for each property of the object.**\n\n# Do This:\n\n**Starter code is provided** that creates a simple JavaScript object representing a song.\n\n* Drag out the `createRecord` command.  \n* **Set the table name** (the first parameter) to something descriptive like \"mySongs\".\n* **Set the second parameter** to the name of the object you want to store, in this case `song`.\n* **Run the program.**\n* In the Data Viewer **verify that a new table was created and that the `song` object was added as a record**.\n\n![](https://images.code.org/d587a1bc977f54d132acafa63764d813-image-1449241390939.gif)",
        "U4 - CreateRecord - 4_markdown_instruction": "# Messing Around with Data\n\n**The third parameter** of `createRecord` is a callback function.  **What does it do?**\n\n![](https://images.code.org/9a89cca8257b7dc807a1637efe121442-image-1449245629915.png)\n\n* Data commands **must be sent across the Internet to a remote server**.\n* The database follows a **protocol** in which it **responds to every data command with a message**. This message might be a piece of data you requested, or it could be an error message.\n* You might need to use the contents of this response in your program, but because of **delays caused by sending information back and forth across the Internet** you don't know when you will receive it.\n* Therefore, you create a **callback function that will be called by the system when the response comes back** (in other words when the database \"calls back\"). The parameter of the **callback function** contains the data being sent back.\n\nFor `createRecord` the database **responds by sending back a copy of the object that was stored**. The `record` parameter of the callback function contains that object.\n\n**Analogy**: When you made an event handler using `onEvent`, you also specified a callback function.  That function got called **when the user triggered the specific event you were watching for**.  The callback function of a database command like `createRecord` gets triggered **when the database sends a message back**.  \n \n# Do This:\n\n**Starter code is provided** that adds a song object to the database.\n\n* **Run the program.**\n* **Look at the Data Viewer** to verify that the object you just stored is actually in the database (along with a few extra songs we added to start you out).\n* **Notice:** The callback function now displays the copy of the record that was returned by the database.\n\n",
        "U4 - CreateRecord - 4_2018_markdown_instruction": "# Messing Around with Data\n\n**The third parameter** of `createRecord` is a callback function.  **What does it do?**\n\n![](https://images.code.org/9a89cca8257b7dc807a1637efe121442-image-1449245629915.png)\n\n* Data commands **must be sent across the Internet to a remote server**.\n* The database follows a **protocol** in which it **responds to every data command with a message**. This message might be a piece of data you requested, or it could be an error message.\n* You might need to use the contents of this response in your program, but because of **delays caused by sending information back and forth across the Internet** you don't know when you will receive it.\n* Therefore, you create a **callback function that will be called by the system when the response comes back** (in other words when the database \"calls back\"). The parameter of the **callback function** contains the data being sent back.\n\nFor `createRecord` the database **responds by sending back a copy of the object that was stored**. The `record` parameter of the callback function contains that object.\n\n**Analogy**: When you made an event handler using `onEvent`, you also specified a callback function.  That function got called **when the user triggered the specific event you were watching for**.  The callback function of a database command like `createRecord` gets triggered **when the database sends a message back**.  \n \n# Do This:\n\n**Starter code is provided** that adds a song object to the database.\n\n* **Run the program.**\n* **Look at the Data Viewer** to verify that the object you just stored is actually in the database (along with a few extra songs we added to start you out).\n* **Notice:** The callback function now displays the copy of the record that was returned by the database.\n\n",
        "U4 - CreateRecord - 5_markdown_instruction": "# What Happens When You Change the Object?\n\nLet's experiment by adding a property to the object and storing it again.\n\n# Do This:\n\n* **Add a property** to the song object: `song.artist = \"Beyonce\"`. It should now have 3 properties: title, seconds, and artist.\n* **Run the program** so that your updated object is added to the database. You shouldn't need to change anything about the call to `createRecord`.\n* In the Data Viewer, **confirm the new record was added to the table**. You'll learn more about the changes you see in the next exercise.",
        "U4 - CreateRecord - 5_2018_markdown_instruction": "# What Happens When You Change the Object?\n\nLet's experiment by adding a property to the object and storing it again.\n\n# Do This:\n\n* **Add a property** to the song object: `song.artist = \"Beyonce\"`. It should now have 3 properties: title, seconds, and artist.\n* **Run the program** so that your updated object is added to the database. You shouldn't need to change anything about the call to `createRecord`.\n* In the Data Viewer, **confirm the new record was added to the table**. You'll learn more about the changes you see in the next exercise.",
        "U4 - Import Data - 1_markdown_instruction": "We can import data\n\nGiven a csv file, have students import it and then go look at in the data viewer",
        "U4 - Objects - Template Contacts_markdown_instruction": "![](https://images.code.org/53a5bdfb7f4ec83174756c8e094558fd-image-1449518131328.png)",
        "U4 - Objects - Template Contacts_2018_markdown_instruction": "![](https://images.code.org/53a5bdfb7f4ec83174756c8e094558fd-image-1449518131328.png)",
        "U4 - Objects - accessingPropertiesInArray_markdown_instruction": "# Manipulating Objects in an Array\n\nWhen objects are in an array, we can still **access the individual properties of each object**. In order to do so, you will need to combine the bracket notation used with arrays and the dot notation we've just practiced with objects.\n\n**Example:** `students[2].name` would access the name of the student at index 2 of the \"students\" array.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* Use the syntax shown above **to display the `name` and `grade` of the first student in your students array.**\n* Use the syntax shown above **to display the `name` and `onTimeToClass` for the last student in your students array.**\n\n\n![](https://images.code.org/2ef563646d857aa975c7970e83bf054f-image-1449517968011.52.36 PM.png)",
        "U4 - Objects - accessingPropertiesInArray_2018_markdown_instruction": "# Manipulating Objects in an Array\n\nWhen objects are in an array, we can still **access the individual properties of each object**. In order to do so, you will need to combine the bracket notation used with arrays and the dot notation we've just practiced with objects.\n\n**Example:** `students[2].name` would access the name of the student at index 2 of the \"students\" array.\n\n# Do This:\n\n**You code from the previous exercise** is provided.\n\n* Use the syntax shown above **to display the `name` and `grade` of the first student in your students array.**\n* Use the syntax shown above **to display the `name` and `onTimeToClass` for the last student in your students array.**\n\n\n![](https://images.code.org/2ef563646d857aa975c7970e83bf054f-image-1449517968011.52.36 PM.png)",
        "U4 - Objects - appendObject_markdown_instruction": "# Append Object\n\n# Do This",
        "U4 - Objects - arraysOfObjects_markdown_instruction": "# Arrays of Objects\n\nOnce you have a collection of objects with the same properties you'll want to do more interesting things to process that data.  In this case, an easy structure to use is an array.  You can make **arrays of objects**.\n\n<img src='https://images.code.org/46bf33a97d4c6c89191bc15864891477-image-1449087125215.11.52 PM.png'>\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* Create an **empty array** called `students` to hold your student objects.\n* **Use `appendItem`** to add your student objects to the array.\n* **Display** the `students` array with a single `console.log` statement.\n\n![](https://images.code.org/b0e08217f5c87194feda9d48cee89090-image-1449152727737.22.28 AM.png)",
        "U4 - Objects - arraysOfObjects_2018_markdown_instruction": "# Arrays of Objects\n\nOnce you have a collection of objects with the same properties you'll want to do more interesting things to process that data.  In this case, an easy structure to use is an array.  You can make **arrays of objects**.\n\n<img src='https://images.code.org/46bf33a97d4c6c89191bc15864891477-image-1449087125215.11.52 PM.png'>\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* Create an **empty array** called `students` to hold your student objects.\n* **Use `appendItem`** to add your student objects to the array.\n* **Display** the `students` array with a single `console.log` statement.\n\n![](https://images.code.org/b0e08217f5c87194feda9d48cee89090-image-1449152727737.22.28 AM.png)",
        "U4 - Objects - createContactObject_markdown_instruction": "# Create an Object and Add To Your Array\n\nNow that you have the values provided by the user, you'll need to actually need to save them in your app. Within your event handler for the \"Save Contact\" button, you'll need to write code that creates that object and then appends it to your `contacts` array.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* Within the event handler you created for the \"Save Contact\" button, **add code that creates a new object using the values you have pulled from the user interface elements**.\n* Append this newly created object to the `contacts` array.\n* **Run your code** and try to **add a new contact**. When you go back to your `showContactsScreen` you should be able to scroll to your newly added contact.\n* **Debug your program** if there are any errors you observe.\n\n![](https://images.code.org/b226e1559dbeeb23aece57e78c3ecfa8-image-1449529119829.gif)",
        "U4 - Objects - createContactObject_2018_markdown_instruction": "# Create an Object and Add To Your Array\n\nNow that you have the values provided by the user, you'll need to actually need to save them in your app. Within your event handler for the \"Save Contact\" button, you'll need to write code that creates that object and then appends it to your `contacts` array.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* Within the event handler you created for the \"Save Contact\" button, **add code that creates a new object using the values you have pulled from the user interface elements**.\n* Append this newly created object to the `contacts` array.\n* **Run your code** and try to **add a new contact**. When you go back to your `showContactsScreen` you should be able to scroll to your newly added contact.\n* **Debug your program** if there are any errors you observe.\n\n![](https://images.code.org/b226e1559dbeeb23aece57e78c3ecfa8-image-1449529119829.gif)",
        "U4 - Objects - createContactsData_markdown_instruction": "# Create Data\n\nThis app will need sample data for you to use while you're building the rest of its functionality. At the top of the starter code, three objects for holding contact information are created. The first one is filled in with some dummy values, and the other two are left for you to fill in.\n\n![](https://images.code.org/6cbf53690c40d94d8cb12dbd0f143df1-image-1449519452051.png)\n\n**Note:** The `imageURL` property should use a link to an actual image you upload to the app or find online.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* **Provide values** for the three contact objects at the top of the starter code. Make sure you use **fake information. Do not enter real contact information for you or your friends.**\n* Make sure you are using **the same properties** in all three contacts.\n* Use `appendItem` to **add these contacts to the `contacts` array** (the first one is done for you).\n* Display the `contacts` array with `console.log` to verify all values are in the array.\n\n",
        "U4 - Objects - createContactsData_2018_markdown_instruction": "# Create Data\n\nThis app will need sample data for you to use while you're building the rest of its functionality. At the top of the starter code, three objects for holding contact information are created. The first one is filled in with some dummy values, and the other two are left for you to fill in.\n\n![](https://images.code.org/6cbf53690c40d94d8cb12dbd0f143df1-image-1449519452051.png)\n\n**Note:** The `imageURL` property should use a link to an actual image you upload to the app or find online.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* **Provide values** for the three contact objects at the top of the starter code.\n* Make sure you are using **the same properties** in all three contacts.\n* Use `appendItem` to **add these contacts to the `contacts` array** (the first one is done for you).\n* Display the `contacts` array with `console.log` to verify all values are in the array.\n\n",
        "U4 - Objects - createEventHandlers_markdown_instruction": "# Create Event Handlers\n\n# Do This",
        "U4 - Objects - createObject_markdown_instruction": "# Creating Your Own Objects\n\nWe've been using objects in our programs, but now we're going to start making objects of our own.\n\n**Syntax for Creating Objects**\n\n* Curly braces are placed around the contents of an object `{}`\n* Properties of the object are given a name and a value which are separated by a colon `:`\n* Properties are separated from one another by commas `,`\n* Names must be strings and should be written in double quotes `\"`. If they are not they will be coerced to strings, possibly creating unpredictable behavior.\n* **Example:** `var user = {\"userName\":\"Ada\", \"password\":\"csIsAwesome\", \"yearBorn\":1815};`\n\n# Do This\n\n**Starter code** is provided which creates an empty object and displays its value.\n\n* Modify the code **using the syntax above** to create an object of your own. Experiment with including **value of different types (string, number, and boolean)**.\n* **Run the program** and confirm all values in your object appear as you expected.\n\n![](https://images.code.org/f3812eb1ff896a1876d2f2abdf021ba4-image-1449080488321.21.14 PM.png)",
        "U4 - Objects - dotNotation_markdown_instruction": "# Objects\n\nFor our purposes, you can **think of an object as a collection of variables**.\n\n# Properties and Dot Notation\n\nThe variables contained in an object are called its **properties.**  Just like a variable, a property has a **descriptive name and contains a value**.\n\nIn JavaScript we use **dot notation** to access individual **properties** of an object. You have seen this before with the event object, when you wrote something like `event.offsetX` or `event.key`.\n\n# Do This:\n\n**Starter code** is provided which has event handlers for both \"click\" and \"keydown\" events. You will need to use **dot notation** to display individual properties of the event object.\n\n  * **Add code** to the \"click\" event handler that uses `console.log` to display the `offsetX` and `offsetY` properties of the event object.\n  * **Add code** to the \"keydown\" event handler that displays the `key` property of the event object.\n  * **Run your program** and confirm the correct information is being displayed in the console.  It should look something like the picture below.\n\n![](https://images.code.org/b56d0370a35d11918c754c7132f57ba1-image-1449072748156.12.13 AM.png)",
        "U4 - Objects - dotNotation_2018_markdown_instruction": "# Objects\n\nFor our purposes, you can **think of an object as a collection of variables**.\n\n# Properties and Dot Notation\n\nThe variables contained in an object are called its **properties.**  Just like a variable, a property has a **descriptive name and contains a value**.\n\nIn JavaScript we use **dot notation** to access individual **properties** of an object. You have seen this before with the event object, when you wrote something like `event.offsetX` or `event.key`.\n\n# Do This:\n\n**Starter code** is provided which has event handlers for both \"click\" and \"keydown\" events. You will need to use **dot notation** to display individual properties of the event object.\n\n  * **Add code** to the \"click\" event handler that uses `console.log` to display the `offsetX` and `offsetY` properties of the event object.\n  * **Add code** to the \"keydown\" event handler that displays the `key` property of the event object.\n  * **Run your program** and confirm the correct information is being displayed in the console.  It should look something like the picture below.\n\n![](https://images.code.org/b56d0370a35d11918c754c7132f57ba1-image-1449072748156.12.13 AM.png)",
        "U4 - Objects - eventHandlersToSwitchScreen_markdown_instruction": "# Switching Screens\n\nYour Contacts App now lets you view and scroll through your contacts, but you can't add any new ones. A second screen in your app called `addContactsScreen` was included as part of the starter code you were provided, as are some UI elements. You will be writing the code that pulls values from the text inputs provided here in order to add contacts to your app. The first step will be allowing the user to switch between these screens.\n\n# Do This\n\n**Your code from the previous exercise** is provided here.\n\n* In Design Mode **give meaningful IDs** to the \"Add Contact\" and \"Go Back\" buttons that can be found on each screen.\n* Use these IDs **to attach event handlers to each button that switch the current screen**, as shown below.",
        "U4 - Objects - loopingArray_markdown_instruction": "# Looping with Arrays of Objects\n\nThe benefit of placing objects in an array is that we can easily loop over them and perform the same action with each. This is also why it is important that we used the same names for each property. The more standardized our data is, the easier it is process with a computer.\n\nThe first way we will process our array of students is to display only the names of every student. In order to do this we will need to loop over the array using a `for` loop, and then access the name property of each student.\n\n![](https://images.code.org/4d3851cf4dc30afb44e8713d232946b6-image-1449156157996.22.30 AM.png)\n\n# Do This\n\n**You code from the previous exercise** is provided.\n\n* **Remove** your `console.log` command from the previous exercise.\n* Use a `for` loop to display **only the names** of every student in your array.\n\n![](https://images.code.org/2e9e5cd620471161e2d0118e1a03ca23-image-1449156697004.31.21 AM.png)",
        "U4 - Objects - loopingArray2_markdown_instruction": "# Looping with Arrays of Objects: Multiple Properties\n\nLet's display more information about our students. This time when you loop through you should display both the name and the grade of each student. Use the syntax from the previous exercise as reference.\n\n# Do This\n\n**You code from the previous exercise** is provided.\n\n* Add code to the `for` loop from the previous exercise so that both the name and grade of each student is displayed.\n\n![](https://images.code.org/82d42710c76e556c20e82e598c09866c-image-1449157086594.37.46 AM.png)",
        "U4 - Objects - loopingCompoundConditions_markdown_instruction": "# Looping with Compound Conditionals\n\nLet's do one final exercise looping over our array of objects. You'll need to use compound conditional statements to print the information of students who are present in class and in the 11th grade.\n\n# Do This\n\n**You code from the previous exercise** is provided.\n\n* **Modify** your `if` statement so that only students who are present in class AND in the 11th grade have their information displayed.\n* **Run your program** and confirm only the students who are in class AND in the 11th grade have their information displayed.\n\n![](https://images.code.org/31c6cdf55587a533d98a28b4889a089d-image-1449161272150.47.12 AM.png)",
        "U4 - Objects - loopingConditions_markdown_instruction": "# Looping with Conditionals\n\nLet's start doing some more complex processing of our array of students. Suppose we only wanted to display the names of students who are present in class that day. We can reference the properties of each student within a conditional statement to only display the names of students whose `inClass` property is \"true\".\n\n![](https://images.code.org/da0a7645805675f77cf1fec04cad4c4c-image-1449157900984.51.34 AM.png)\n\nSince **`inClass` is stored as a boolean** we can directly reference its value without doing a boolean comparison.\n\n\n# Do This\n\n**You code from the previous exercise** is provided.\n\n* **Add an `if` statement** to your `for` loop that checks whether the student is in class before displaying their information.\n* **Run your program** and confirm only the students who are in class have their information displayed.\n\n![](https://images.code.org/e4dc84243a97f393d2cfde0f6258b67a-image-1449160488833.34.42 AM.png)",
        "U4 - Objects - pullValues_markdown_instruction": "# Getting Data From the User\n\nThe `addContactsScreen` is where the user can input information about a new contact. We'll treat building its functionality as a three-step process. The first step is to make sure you can access the values in each input by displaying them in the console.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* In Design Mode, **go look at the IDs already given to the 4 text inputs**.\n* Add a \"click\" event handler for the \"Save Contact\" button.\n* Write code within your event handler that **displays the contents of all 4 text inputs using `console.log`**. This will let you know that you are properly accessing each value.\n\n<img src=\"https://images.code.org/1bf71fcf3d2f5978618536527acad710-image-1449528040863.39.22 PM.png\" style=\"float:left; width:200px\">\n\n<img src=\"https://images.code.org/e8f6c1838f2d5c596b2dce275ee1becc-image-1449528044430.39.35 PM.png\" style=\"float:left; width:150px\">",
        "U4 - Objects - pullValues_2018_markdown_instruction": "# Getting Data From the User\n\nThe `addContactsScreen` is where the user can input information about a new contact. We'll treat building its functionality as a three-step process. The first step is to make sure you can access the values in each input by displaying them in the console.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* In Design Mode, **go look at the IDs already given to the 4 text inputs**.\n* Add a \"click\" event handler for the \"Save Contact\" button.\n* Write code within your event handler that **displays the contents of all 4 text inputs using `console.log`**. This will let you know that you are properly accessing each value.\n\n<img src=\"https://images.code.org/1bf71fcf3d2f5978618536527acad710-image-1449528040863.39.22 PM.png\" style=\"float:left; width:200px\">\n\n<img src=\"https://images.code.org/e8f6c1838f2d5c596b2dce275ee1becc-image-1449528044430.39.35 PM.png\" style=\"float:left; width:150px\">",
        "U4 - Objects - showContact3_markdown_instruction": "# Show Contact Image\n\nThe last piece of information to display for each contact is their image, which should be saved in the `imageURL` property of each contact.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* The main image on the \"showContactsScreen\" has the ID \"contactImage\".\n* **Add code** to the `showCurrentContact` function that sets the URL of \"contactImage\" to the `imageURL` property of the contact being displayed. You can use the `setImageURL` command.\n\n![](https://images.code.org/a606d057df3e5c34fc2908d598c3a9ff-image-1449526996613.23.06 PM.png)",
        "U4 - Objects - showContact3_2018_markdown_instruction": "# Show Contact Image\n\nThe last piece of information to display for each contact is their image, which should be saved in the `imageURL` property of each contact.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* The main image on the \"showContactsScreen\" has the ID \"contactImage\".\n* **Add code** to the `showCurrentContact` function that sets the URL of \"contactImage\" to the `imageURL` property of the contact being displayed. You can use the `setImageURL` command.\n\n![](https://images.code.org/a606d057df3e5c34fc2908d598c3a9ff-image-1449526996613.23.06 PM.png)",
        "U4 - Objects - showSampleImage_markdown_instruction": "# Show Sample Image\n\nIn Design Mode, you'll notice that an image called \"previewImage\" is included on the \"addContactsScreen\". This is there so that the user can see what the image will look like before adding it to the contacts list.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* **Add an event handler** for `URLinput` that responds to a new event type called **\"input\"**. This event is triggered every time the input text changes.\n* Use `setImageURL` within the event handler to change the URL of the image to whatever is currently in `URLinput`.\n* Run the app and confirm that **the image updates when a valid image URL is given**.\n\n![](https://images.code.org/955fa56473d949ed7bd326aa87c96e0f-image-1449525666366.gif)",
        "U4 - Objects - showSampleImage_2018_markdown_instruction": "# Show Sample Image\n\nIn Design Mode, you'll notice that an image called \"previewImage\" is included on the \"addContactsScreen\". This is there so that the user can see what the image will look like before adding it to the contacts list.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* **Add an event handler** for `URLinput` that responds to a new event type called **\"input\"**. This event is triggered every time the input text changes.\n* Use `setImageURL` within the event handler to change the URL of the image to whatever is currently in `URLinput`.\n* Run the app and confirm that **the image updates when a valid image URL is given**.\n\n![](https://images.code.org/955fa56473d949ed7bd326aa87c96e0f-image-1449525666366.gif)",
        "U4 - Objects - writeWrap_markdown_instruction": "# Wrapping Indexes\n\nCurrently you can press the left and right arrow key to change the index of the contact you'd like to show. When `showCurrentContact` is called that contact is then shown on the screen. Unfortunately right now it is possible to set `currentIndex` to a value that is out of bounds. As a result your program will generate an error and stop running.\n\n# Do This\n\n**Your code from the previous exercise** is provided.\n\n* **Use the wrap function** provided in the starter code within `showCurrentContact` to reset `currentIndex` to a value that is \"in bounds\" before showing the contact.\n* **Run your program** and confirm that you can now scroll through every contact and that the contacts list \"wraps around\"",
        "U4 - Read Record - 1.2_markdown_instruction": "# Callback Functions\n\nIn the last exercise, you **read records from a remote database back into your app**. There are a few steps that happened in that process.  When you `readRecords` you can think of it as triggering a 4-step process as shown in the diagram below.\n\n![](https://images.code.org/b8c366da4d02776920cfbb229b108c40-image-1450104325687.png)\n\nBecause the Internet is involved, there's actually a **delay between when your program calls `readRecords` and when the callback function is called**. We can even see this delay in App Lab.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n**NOTE:** The speed on App Lab has been set to its slowest setting; this will make it easier to see the sequence of events in the program.  You can set the speed to the fastest setting and it will function the same.\n\n* **Add another `console.log` statement after your `readRecords` command**.\n* **Run the program** and pay close attention to **the sequence of events**. \n* **Check the Debug Console** to see which `console.log` command ran first.\n\n![](https://images.code.org/7c2a7362736e0796aa191b03760552c3-image-1449687909231.gif)\n\n",
        "U4 - Read Record - 1.2_2018_markdown_instruction": "# Callback Functions\n\nIn the last exercise, you **read records from a remote database back into your app**. There are a few steps that happened in that process.  When you `readRecords` you can think of it as triggering a 4-step process as shown in the diagram below.\n\n![](https://images.code.org/b8c366da4d02776920cfbb229b108c40-image-1450104325687.png)\n\nBecause the Internet is involved, there's actually a **delay between when your program calls `readRecords` and when the callback function is called**. We can even see this delay in App Lab.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n**NOTE:** The speed on App Lab has been set to its slowest setting; this will make it easier to see the sequence of events in the program.  You can set the speed to the fastest setting and it will function the same.\n\n* **Add another `console.log` statement after your `readRecords` command**.\n* **Run the program** and pay close attention to **the sequence of events**. \n* **Check the Debug Console** to see which `console.log` command ran first.\n\n![](https://images.code.org/7c2a7362736e0796aa191b03760552c3-image-1449687909231.gif)\n\n",
        "U4 - Read Record - 1_markdown_instruction": "# Reading Records\nYou have learned how `createRecord` can be used to create permanent copies of your data in a remote database. \n\n**In order to use this data, you'll need a way to read it out of your database and back into your app**.\n\n<img src=\"https://images.code.org/ac5fb29d4935df7b5825f4cabd6b89e8-image-1449502640243.35.37 AM.png\" style=\"width: 350px; float: right\">\n\nCheck out the new command `readRecords`. This command **requests from the database *all* the records stored in one table.**. \n\nThe database responds by the sending an **array of objects** back to your program - one object for every record in the table.  As with `createRecord`, the data sent back by the database will come through **callback function in the `records` parameter**.\n\n# Do This:\n\n**NOTE**: the database with a table called \"myTable\" already contains some data.\n\n* **Open the Data Viewer** to look at the data in \"myTable.\"\n* **Add a `readRecords` command** to your app.\n* **Add a `console.log` command** inside the callback function of `readRecords` to **display the `records`**.\n* Run the program and **confirm that the data from the database is being displayed in the console log.**\n\n![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)",
        "U4 - Read Record - 1_2018_markdown_instruction": "# Reading Records\nYou have learned how `createRecord` can be used to create permanent copies of your data in a remote database. \n\n**In order to use this data, you'll need a way to read it out of your database and back into your app**.\n\n<img src=\"https://images.code.org/ac5fb29d4935df7b5825f4cabd6b89e8-image-1449502640243.35.37 AM.png\" style=\"width: 350px; float: right\">\n\nCheck out the new command `readRecords`. This command **requests from the database *all* the records stored in one table.**. \n\nThe database responds by the sending an **array of objects** back to your program - one object for every record in the table.  As with `createRecord`, the data sent back by the database will come through **callback function in the `records` parameter**.\n\n# Do This:\n\n**NOTE**: the database with a table called \"myTable\" already contains some data.\n\n* **Open the Data Viewer** to look at the data in \"myTable.\"\n* **Add a `readRecords` command** to your app.\n* **Add a `console.log` command** inside the callback function of `readRecords` to **display the `records`**.\n* Run the program and **confirm that the data from the database is being displayed in the console log.**\n\n![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)",
        "U4 - Read Record - 2_markdown_instruction": "# Changing the Table\n\nThe first parameter in the `readRecords` command is the name of the table you wish to read records from.\n\n![](https://images.code.org/9f809d3a5e5c43871dd237dbc0ca66dc-image-1449515754521.png)\n\nYou have been using the name \"myTable,\" but - just like variables and IDs - **your tables should be given descriptive and meaningful names**.\n\n# Do This:\n**Note:** We've given you a new database that already includes a table with some data in it.\n\n  * Open the Data Viewer to **find the name of the table.**\n  * Drag out `readRecords` and **change the table name parameter** to pull the records from the new table.\n  * Run the program.  Your output should look like below.\n\n![](https://images.code.org/ba9812734a1d82fc6866841c3dab0f58-image-1449871040409.png)",
        "U4 - Read Record - 2_2018_markdown_instruction": "# Changing the Table\n\nThe first parameter in the `readRecords` command is the name of the table you wish to read records from.\n\n![](https://images.code.org/9f809d3a5e5c43871dd237dbc0ca66dc-image-1449515754521.png)\n\nYou have been using the name \"myTable,\" but - just like variables and IDs - **your tables should be given descriptive and meaningful names**.\n\n# Do This:\n**Note:** We've given you a new database that already includes a table with some data in it.\n\n  * Open the Data Viewer to **find the name of the table.**\n  * Drag out `readRecords` and **change the table name parameter** to pull the records from the new table.\n  * Run the program.  Your output should look like below.\n\n![](https://images.code.org/ba9812734a1d82fc6866841c3dab0f58-image-1449871040409.png)",
        "U4 - Read Record - 4_markdown_instruction": "# Reading Records: Printing Individual Records\n\nUsually we want to pull out each record individually. We have already seen that records is an array of objects. Therefore we can do this by using the array notation to access each object by its index.\n\n# Do This\n\nThe data from the last level has been provided. \n\n* Add a call to `readRecords`\n* Set the table name to the movies table.\n* Inside the callback function add a `for` loop to loop over the records.\n* Inside the for loop add a console.log statment to print out the current object using its location in the array.\n* Run the program. Your output should look like below.\n\n![](https://images.code.org/827a410730369edf42ca7e21f0fa6b01-image-1449517957324.51.38 PM.png)",
        "U4 - Read Record - part 1 - template_markdown_instruction": "# Reading Records\nYou have learned how `createRecord` can be used to create permanent copies of your data in a remote database. \n\n**In order to use this data you'll need a way to read it out of your database and back into your app**.\n\n<img src=\"https://images.code.org/ac5fb29d4935df7b5825f4cabd6b89e8-image-1449502640243.35.37 AM.png\" style=\"width: 350px; float: right\">\n\nCheck out the new command `readRecords`. This command **requests from the database *all* the records stored in one table.**. \n\nThe database responds by the sending an **array of objects** back to your program -- one object for every record in the table.  As with createRecord, the data sent back by the database will come through **callback function of the `readRecords`, with array of objects in the `records` parameter**.\n\n# Do This\n\n**NOTE**: the database with at table called 'myTable' already contains some data.\n\n* **Open the Data Viewer** to look at the data in 'myTable'\n* **Add a `readRecords` command** to your app.\n* **Add a `console.log` command** inside the callback function of `readRecords` to **display the `records`**\n* Run the program and **confirm that the same information you saw in the Data Viewer is displayed in the console**.\n\n![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)",
        "U4 - Read Record - part 1 - template_2018_markdown_instruction": "# Reading Records\nYou have learned how `createRecord` can be used to create permanent copies of your data in a remote database. \n\n**In order to use this data you'll need a way to read it out of your database and back into your app**.\n\n<img src=\"https://images.code.org/ac5fb29d4935df7b5825f4cabd6b89e8-image-1449502640243.35.37 AM.png\" style=\"width: 350px; float: right\">\n\nCheck out the new command `readRecords`. This command **requests from the database *all* the records stored in one table.**. \n\nThe database responds by the sending an **array of objects** back to your program -- one object for every record in the table.  As with createRecord, the data sent back by the database will come through **callback function of the `readRecords`, with array of objects in the `records` parameter**.\n\n# Do This\n\n**NOTE**: the database with at table called 'myTable' already contains some data.\n\n* **Open the Data Viewer** to look at the data in 'myTable'\n* **Add a `readRecords` command** to your app.\n* **Add a `console.log` command** inside the callback function of `readRecords` to **display the `records`**\n* Run the program and **confirm that the same information you saw in the Data Viewer is displayed in the console**.\n\n![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)",
        "U4 - ReadRecords - Contacts App 4_markdown_instruction": "# Create a Delete Button\n\nNow that you can add new contacts to your app, you might want to add functionality to remove them. Let's **create a new button the user can click to delete the current contact.**\n\n# Do This:\n**Your code and database for the Contacts App are provided.**\n\n  * In Design Mode, **shrink the \"Add Contact\" button** on the \"showContactsScreen\".\n \n  * **Add a new button for delete** in the space you created.\n \n  * Set the style of the button, change its text, and give it a descriptive ID.\n\n![](https://images.code.org/e390ba49c28b447279bc20dd2b7eef91-image-1449865822878.14.31 PM.png)",
        "U4 - ReadRecords - Contacts App 4_2018_markdown_instruction": "# Create a Delete Button\n\nNow that you can add new contacts to your app, you might want to add functionality to remove them. Let's **create a new button the user can click to delete the current contact.**\n\n# Do This:\n**Your code and database for the Contacts App are provided.**\n\n  * In Design Mode, **shrink the \"Add Contact\" button** on the \"showContactsScreen\".\n \n  * **Add a new button for delete** in the space you created.\n \n  * Set the style of the button, change its text, and give it a descriptive ID.\n\n![](https://images.code.org/e390ba49c28b447279bc20dd2b7eef91-image-1449865822878.14.31 PM.png)",
        "U4 - ReadRecords - Contacts App 5 make delete work_markdown_instruction": "# Making the Delete Button Work\n\nYou are keeping the index of the current object as a global variable called `currentIndex`.\n\nThus, the **current object on the \"showContactsScreen\"** is found at `records[currentIndex]`.\n\nTo make the delete button work, we can simply send the object we want to delete to `deleteRecord`. \n  * Notice that because `records[currentIndex]` **contains the \"id\" of the object you hope to delete, you don't need to make any changes to the object before sending it**.\n\n# Do This:\n**Your code should end up looking similar to the code depicted in the image**. \n\nHere are the steps: <img src=\"https://images.code.org/c2b534a6178801a829d62fd7f99690d5-image-1455914106048.png\" style=\"width: 350px; float: right\">\n  * **Add an event handler** for the delete button.\n  * **Make a variable called `objToDelete` that's a copy of the object at the current index**.\n  * **Add a call to `deleteRecord`** in the event handler. \n  * First Parameter: Make sure to set the table name to your contacts table.\n  * Second Parameter: Set to `objToDelete`.\n  * **Add a call to `refreshLocalData`** in the callback function of `deleteRecord`.\n  * **Run your app**.\n  * Confirm you can now delete contacts and that your local and remote data agree.\n",
        "U4 - ReadRecords - Contacts App 5 make delete work_2018_markdown_instruction": "# Making the Delete Button Work\n\nYou are keeping the index of the current object as a global variable called `currentIndex`.\n\nThus, the **current object on the \"showContactsScreen\"** is found at `records[currentIndex]`.\n\nTo make the delete button work, we can simply send the object we want to delete to `deleteRecord`. \n  * Notice that because `records[currentIndex]` **contains the \"id\" of the object you hope to delete, you don't need to make any changes to the object before sending it**.\n\n# Do This:\n**Your code should end up looking similar to the code depicted in the image**. \n\nHere are the steps: <img src=\"https://images.code.org/c2b534a6178801a829d62fd7f99690d5-image-1455914106048.png\" style=\"width: 350px; float: right\">\n  * **Add an event handler** for the delete button.\n  * **Make a variable called `objToDelete` that's a copy of the object at the current index**.\n  * **Add a call to `deleteRecord`** in the event handler. \n  * First Parameter: Make sure to set the table name to your contacts table.\n  * Second Parameter: Set to `objToDelete`.\n  * **Add a call to `refreshLocalData`** in the callback function of `deleteRecord`.\n  * **Run your app**.\n  * Confirm you can now delete contacts and that your local and remote data agree.\n",
        "U4 - add createRecord to contacts App_markdown_instruction": "# Save Your Contacts in the Cloud!\n\nNow that you know how to save objects to the database, you can make your contacts app save things permanently.\n\nRight now you'll add the ability for the app to save contacts to the database. In the next lesson, you'll learn how to pull data from the database back into the app.\n\n# Do This:\n\n**The contacts app you created in the previous lesson** is provided.\n\n  * Drag the `createRecord` block into the event handler code for the \"saveContactButton\" and add it as the last lines of the function.\n  * Set the **first parameter** to be a descriptive table name like \"myContacts.\"\n  * Set the **second parameter** to object you created for the new contact (in the example the variable is called `newContact`.\n  * Run the app and **add a new contact**.\n  * In the Data Viewer, **confirm a new table was created and that it contains the contact you created**.\n\n![](https://images.code.org/36dd0fc06e93b1988a9df72a62c3f99f-image-1449266720880.gif)",
        "U4 - add createRecord to contacts App_2018_markdown_instruction": "# Save Your Contacts in the Cloud!\n\nNow that you know how to save objects to the database, you can make your contacts app save things permanently.\n\nRight now you'll add the ability for the app to save contacts to the database. In the next lesson, you'll learn how to pull data from the database back into the app.\n\n# Do This:\n\n**The contacts app you created in the previous lesson** is provided.\n\n  * Drag the `createRecord` block into the event handler code for the \"createContactButton\" and add it as the last lines of the function.\n  * Set the **first parameter** to be a descriptive table name like \"myContacts.\"\n  * Set the **second parameter** to object you created for the new contact (in the example the variable is called `newContact`.\n  * Run the app and **add a new contact**.\n  * In the Data Viewer, **confirm a new table was created and that it contains the contact you created**.\n\n![](https://images.code.org/36dd0fc06e93b1988a9df72a62c3f99f-image-1449266720880.gif)",
        "U4 - debug column names are case sensitive_markdown_instruction": "# Are Properties Case-Sensitive?\n\nYou saw that if you add a property to an object and then store it in the database, the database will add a column to accommodate the new data value.  \n\nIf you end up with columns in your table that you don't want, you can delete them\n![](https://images.code.org/baecadc168954c794212b419d441679b-image-1449262524542.gif)\n\nLet's do another quick experiment to test the behavior of the data table. **What happens if you change how a property is spelled?**\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* Change `song.title` to `song.Title` (capital T) where you create your song object.\n* **Run the program**, then go to the Data Viewer to see what happened.\n* If there are problems created by the change in spelling, **delete unnecessary columns and change your code back**.",
        "U4 - debug column names are case sensitive_2018_markdown_instruction": "# Are Properties Case-Sensitive?\n\nYou saw that if you add a property to an object and then store it in the database, the database will add a column to accommodate the new data value.  \n\nIf you end up with columns in your table that you don't want, you can delete them\n![](https://images.code.org/baecadc168954c794212b419d441679b-image-1449262524542.gif)\n\nLet's do another quick experiment to test the behavior of the data table. **What happens if you change how a property is spelled?**\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* Change `song.title` to `song.Title` (capital T) where you create your song object.\n* **Run the program**, then go to the Data Viewer to see what happened.\n* If there are problems created by the change in spelling, **delete unnecessary columns and change your code back**.",
        "U4 - deleteRecords 2_markdown_instruction": "# Deleting Records\n\nGo look at the data.  See the ids.  When you try to edit you can't.  Why? Because id's are unique, but for all time.  Each record that gets  added gets assigned a unique id.  That id will never be used again, even if you delete it. ![](https://images.code.org/352bbbd91c14aa8a4a37fcc309f29d93-image-1449782149871.gif)\n\nYou can delete a record using the data viewer by clicking the delete button (duh).\n\nTo do it with code you use the delete record block.  It works similarly to the other data tools.\n\n[screen cap diagram - table name, object, callback]\n\nHowever, deleteRecord is different because the object *only* needs to contain the id of the record you want to delete. You can \n\n# Do This\n  * Drag out the delete records block - set the id to the one you found.\n  * Run the code - verify that you deleted the right record\n\n",
        "U4 - fix contacts by hand in data table_markdown_instruction": "# Add Contacts to the Data Table by Hand\n\nWhen you originally created this app, you hard-coded at least **three contacts\"** that were added to your contacts list every time the program started running. You'll want to move their information into the database as well.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* In the Data Viewer, go to the table you are using to store your contacts.\n* Add rows to the table and copy in the url, name, phone number, etc. for each of the hard-coded contacts in your app.\n* **Don't actually delete your hard-coded contacts from your code.**",
        "U4 - fix contacts by hand in data table_2018_markdown_instruction": "# Add Contacts to the Data Table by Hand\n\nWhen you originally created this app, you hard-coded at least **three contacts\"** that were added to your contacts list every time the program started running. You'll want to move their information into the database as well.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* In the Data Viewer, go to the table you are using to store your contacts.\n* Add rows to the table and copy in the url, name, phone number, etc. for each of the hard-coded contacts in your app.\n* **Don't actually delete your hard-coded contacts from your code.**",
        "U4 - last stage test adding contcts_markdown_instruction": "# Test the App\n\nIf you run your app now, you can add contacts and they will be saved to the database, but they will also show up \"locally\" in your app.  That is, until you restart it.\n\n**When you restart the app, it only reloads the hard-coded contacts. This is okay for now.**  In the **next lesson** you'll learn how to pull data from the database back into the app.\n\nAs a final step for now...\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n  * **Add a few new contacts to your app and confirm you can scroll through them**.\n  * In the Data Viewer, **confirm those contacts were added to your database**.\n  * Restart your app. Confirm that **the newly added contacts are no longer stored locally in your app, but they still exist in the database**.\n  * In the Data Viewer confirm those **\"lost\" contacts are still stored in your database**.",
        "U4 - last stage test adding contcts_2018_markdown_instruction": "# Test the App\n\nIf you run your app now, you can add contacts and they will be saved to the database, but they will also show up \"locally\" in your app.  That is, until you restart it.\n\n**When you restart the app, it only reloads the hard-coded contacts. This is okay for now.**  In the **next lesson** you'll learn how to pull data from the database back into the app.\n\nAs a final step for now...\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n  * **Add a few new contacts to your app and confirm you can scroll through them**.\n  * In the Data Viewer, **confirm those contacts were added to your database**.\n  * Restart your app. Confirm that **the newly added contacts are no longer stored locally in your app, but they still exist in the database**.\n  * In the Data Viewer confirm those **\"lost\" contacts are still stored in your database**.",
        "U4 L1 - 4: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 1 - 4: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U4 L5 - 7: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 5 - 7: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U4 L8 - 9: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 8 - 9: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U4 Model App_markdown_instruction": "# This is the template for the U4 model app",
        "U4 Model App_2018_markdown_instruction": "# This is the template for the U4 model app",
        "U4 Model Program 1_markdown_instruction": "# Adding a New Screen\n\nTo complete your app, you're going to need more than than just a home screen. Each card that you created in your paper prototype is represented by a \"screen\" in App Lab. To create more screens, just click the dropdown at the top of the app display and select \"New Screen...\"\n\n<img src=\"https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png\" style=\"width: 200px\">\n\n# Do This\n\n* **Create a New Screen** and give it the ID \"about\".",
        "U4 Model Program 1_2018_markdown_instruction": "# Adding a New Screen\n\nTo complete your app, you're going to need more than than just a home screen. Each card that you created in your paper prototype is represented by a \"screen\" in App Lab. To create more screens, just click the dropdown at the top of the app display and select \"New Screen...\"\n\n<img src=\"https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png\" style=\"width: 200px\">\n\n# Do This\n\n* **Create a New Screen** and give it the ID \"about\".",
        "U4 Model Program 2.5_markdown_instruction": "# Contact Screen Import\n\nYet another student created a Contact screen that you can import into your app. Their share link is **<a href =\"https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/\" target=\"_blank\">https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**\n\n# Do This\n\n* **Select \"Import Screen...** from the screens dropdown.\n* **Copy and paste the above url** into the import screens dialog.\n* **Select the screen** you wish to import.\n* **Click Import** to import the screen.\n* **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.",
        "U4 Model Program 2.5_2018_markdown_instruction": "# Contact Screen Import\n\nYet another student created a Contact screen that you can import into your app. Their share link is **<a href =\"https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/\" target=\"_blank\">https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**\n\n# Do This\n\n* **Select \"Import Screen...** from the screens dropdown.\n* **Copy and paste the above url** into the import screens dialog.\n* **Select the screen** you wish to import.\n* **Click Import** to import the screen.\n* **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.",
        "U4 Model Program 5_markdown_instruction": "# Wire Up the Other Buttons\n\nNow that you've made one button work, just follow the same pattern for all of your others.\n\n# Do This\n\n* **Add an `onEvent` block** for each button.\n* **Select the button ID** from the \"id\" dropdown.\n* **Add a `setScreen` block** inside each `onEvent` block.\n* **Select the screen ID** from each `setScreen` dropdown.\n* **Run your app** and test that all of the buttons work.",
        "U4 Model Program 5_2018_markdown_instruction": "# Wire Up the Other Buttons\n\nNow that you've made one button work, just follow the same pattern for all of your others.\n\n# Do This\n\n* **Add an `onEvent` block** for each button.\n* **Select the button ID** from the \"id\" dropdown.\n* **Add a `setScreen` block** inside each `onEvent` block.\n* **Select the screen ID** from each `setScreen` dropdown.\n* **Run your app** and test that all of the buttons work.",
        "U4 vigenere cipher 2_markdown_instruction": "# Simple Markdown?",
        "U4L01 Free Response_markdown_instruction": "This is the free response question text.\n",
        "U4L02 - Objects - Template1_markdown_instruction": "# Template",
        "U4L02 - Objects - Template1_2018_markdown_instruction": "# Template",
        "U4L02 - Objects - createObject_markdown_instruction": "# Creating Your Own Objects\n\n**Objects are unordered collections of name value pairs**. Like an array they can hold many pieces of information, but where arrays use a numeric index to reference specific pieces of information, objects use a descriptive name. We lose the \"ordered\" nature of our data, but we gain the ability to describe the purpose of each piece of data within a collection.\n\nConsider the event objects you just looked at. An array can just as easily store all the information they contain, but it would be difficult to determine what any of the values represent.\n\n**The syntax for creating objects of your own is shown below**\n\n* Curly braces are placed around the contents of an object `{}`\n* Names are separated from values with a colon `:`\n* Name value pairs are separated by commas `,`\n* Names must be strings. If they are not they will be coerced to strings, possibly creating unpredictable behavior.\n* **Example:** `var user = {\"userName\":\"Ada\", \"password\":\"csIsAwesome\", \"yearBorn\":1815};`\n\n# Do This\n\n**Starter code** is provided which creates an empty object and displays its value.\n\n* Modify the code **using the syntax above** to create an object of your own. Your object should contain **at least 5 pieces of information including both strings and numbers**.\n* **Run the program** and confirm all values in your object appear as you expected.",
        "U4L02 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L03 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L04 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L05 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L06 Data Storage 1_markdown_instruction": "## Create Record\n\n#### Fill in your name instead of \"Enter Your Name\", run the app and click the button. Run it multiple times with different names! Watch the console and use the ‘View Data” button to see how the table is updated. *As you play around make sure you can explain the purpose of each of the circled parts of the diagram.*\n\n![](https://images.code.org/2768f0e65aa2167da70d24aa3975588a-image-1441998331790.52.01 PM.png)",
        "U4L06 Data Storage 3_markdown_instruction": "## Clear the Textbox\n\nWe want to improve the user experience. Once they have submitted their data for storage, it would be nice to clear the textbox.  Update your app to clear the textbox after the data is stored.",
        "U4L06 Data Storage 5_markdown_instruction": "## Data Collection From Other Design Elements\nThere are other design elements we could use to collect data from a user. Check out radio buttons and checkboxes. Lets add a couple radio buttons or checkboxes to our app. Then find a way to collect the data from those. **Hint** This may take a few more steps than the data we have collected before. ",
        "U4L06 Data Storage 6_markdown_instruction": "## Non-User Provided Data\n\nThere are ways to collect data without having a user enter data. Two ways to collect data not provided by the user are the getTime() and getUserId() blocks. Use one of these blocks to collect additional data. ",
        "U4L06 Data Storage 7_markdown_instruction": "For your data collection app you may need to collect data over multiple screens. Add a second screen to the sample app we have been building to capture an image from a user. Return to screen 1 after the JSON object has been stored in the table.",
        "U4L06 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L07 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L08 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L09 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L10 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L11 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L12 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L13 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L14 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L15 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L15 Read Data 1_markdown_instruction": "## Reading Data\n\nWe have looked closely at createRecord. Now we are going to to learn how to readRecords out of a table. This can be useful for instances where you want to display stored data back to your user.\n\n1. Look at the code and write down on paper what you think it will do.  Think back to createRecord as you make your guess.\n1. Run the level\n1. Open the data view\n1. Take a look at the outcome and see if you connect the code to the output.\n1. Make it print a different column of information.\n",
        "U4L15 Read Data 2_markdown_instruction": "Student should create a sentence which puts together all the pieces from a record\n\n**Name** is **Age** years old and like **Food**",
        "U4L15 Read Data 4_markdown_instruction": "Now instead of the first record, we want a random record from the list of records.  Can you figure out how to make this happen?\n\n**HINT**\n1. Find out the length of the records\n1. Make a variable that holds a random number\n1. Use it to get a random record",
        "U4L16 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L17 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L18 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L19 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L2 - FR Practice AP response about data_markdown_instruction": "## AP Practice\n\nThe AP *Explore Performance task* requires you to provide short written responses about an innovation that you research.  Here are portions of the AP writing prompts to consider:\n\n\tUsing specific details, describe:\n    • the data your innovation uses;\n    • how the innovation consumes (as input), produces (as output), and/or transforms data\n\nPractice an AP response by responding the prompt above, summarizing the data innovation you researched for this lesson. Your first sentence should name the innovation you are writing about.\n",
        "U4L2 - FR Practice AP response about data_2018_markdown_instruction": "## AP Practice\n\nThe AP *Explore Performance task* requires you to provide short written responses about an innovation that you research.  Here are portions of the AP writing prompts to consider:\n\n\tUsing specific details, describe:\n    • the data your innovation uses;\n    • how the innovation consumes (as input), produces (as output), and/or transforms data\n\nPractice an AP response by responding the prompt above, summarizing the data innovation you researched for this lesson. Your first sentence should name the innovation you are writing about.\n",
        "U4L20 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L21 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L22 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L23 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L24 Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U4L3 - FR Identifying people_markdown_instruction": "Consider the following scenario:\n\n*In order to dampen the effect of a potential data breach or accidental release of records a health care company has decided to remove a lot of personally identifiable information in its health records, like names, phone numbers and so on.  In its place, along with all medical information, they plan to store ONLY the gender, age, and zip code of the patient.*\n\n**Give your opinion**: Is this health care company doing enough to protect the personal information of patients? If yes, explain why this is the best they can do. If no, explain what they should do instead.  (Limit your response to a few sentences).",
        "U4L3 - FR Identifying people_2018_markdown_instruction": "Consider the following scenario:\n\n*In order to dampen the effect of a potential data breach or accidental release of records a health care company has decided to remove a lot of personally identifiable information in its health records, like names, phone numbers and so on.  In its place, along with all medical information, they plan to store ONLY the gender, age, and zip code of the patient.*\n\n**Give your opinion**: Is this health care company doing enough to protect the personal information of patients? If yes, explain why this is the best they can do. If no, explain what they should do instead.  (Limit your response to a few sentences).",
        "U4L4 - FR cost of free_markdown_instruction": "## AP Practice\n\nThe AP *Explore Performance task* requires you to provide short written responses about an innovation that you research.  Here are portions of the prompts to consider:\n\n\n1. *Explain at least one beneficial effect and at least one harmful effect the computing innovation has had, or has the potential to have, on society, economy, or culture.*\n\n2. *Using specific details, describe: at least one data storage concern, data privacy concern, or data security concern directly related to the computing innovation.*\n\n\nRespond to both of those prompts in light of what you learned about data privacy policies in this lesson. The \"innovation\" you choose could be narrow, like a specific app, or if it makes sense broad, like an entire company.  \n\nThe main objectives of your response are to:\n\n* Name one benefit (or potential benefit)\n* Name one harmful effect (or potentially harmful)\n* Be specific about the data that (presumably) leads to the harmful effect.\n\nLimit your response to a few sentences for each point above.",
        "U4L4 - FR cost of free_2018_markdown_instruction": "## AP Practice\n\nThe AP *Explore Performance task* requires you to provide short written responses about an innovation that you research.  Here are portions of the prompts to consider:\n\n\n1. *Explain at least one beneficial effect and at least one harmful effect the computing innovation has had, or has the potential to have, on society, economy, or culture.*\n\n2. *Using specific details, describe: at least one data storage concern, data privacy concern, or data security concern directly related to the computing innovation.*\n\n\nRespond to both of those prompts in light of what you learned about data privacy policies in this lesson. The \"innovation\" you choose could be narrow, like a specific app, or if it makes sense broad, like an entire company.  \n\nThe main objectives of your response are to:\n\n* Name one benefit (or potential benefit)\n* Name one harmful effect (or potentially harmful)\n* Be specific about the data that (presumably) leads to the harmful effect.\n\nLimit your response to a few sentences for each point above.",
        "U4LXX Free Response_markdown_instruction": "Free response prompt here.\n\n",
        "U5 Booleans_markdown_instruction": "### Points to pay attention to:\n\n1. What's a *Boolean Expression?*\n2. Why is it called a \"Boolean\"?\n3. Is this a legal expression?  `10 > 25`?",
        "U5 Check Password if-else string_markdown_instruction": "<img src=\"https://images.code.org/e878b414d7f8ce4fd96a2c160602e07e-image-1479830181568.gif\" style=\"float: right\">\n\n## You try it - adding else to the password checker\n\nIf we add an else clause to the password checker we can make it act a little fancier - study the animation at right.\n\n**Add an `if-else` statement to the *login_btn* event handler that:**\n\n  * Shows the unlock and displays \"Access Granted\" if the user enters the password correctly.  \n  * Otherwise, show the lock and display \"Access Denied\"\n\nNote the setup:\n\n* Again we have two images - a lock and an unlock - but this time *both* are hidden at the start.\n* There is also a text label at the bottom where we'll display a message, but it starts empty as well\n\nThere are **two event handlers**\n\n* The first event handler - on *login_btn* \"click\" - is where you should add your `if-else` statement\n\t* We've provided the statements you need to add into the appropriate clause\n\n* The second event handler - on password_input \"click\" -- acts as a reset\n\t* You do not need to modify anything in this event handler\n    * It simply hides all images and sets the message text to `\"\"`\n\n\n<details><summary>HINT: [click to expand]</summary>\n<br>\nYour if-else statement is going to use the same boolean expression as before.  The structure of it should look like this:\n<pre>\nif( getText(\"password_input\") == \"some secret\" ){\n   // show green unlock\n   // display \"Access Granted\"\n} else {\n\t// show red lock\n   // display \"Access DENIED\"\n}\n</pre>\n</details>",
        "U5 Check Password if-else string_2018_markdown_instruction": "<img src=\"https://images.code.org/e878b414d7f8ce4fd96a2c160602e07e-image-1479830181568.gif\" style=\"float: right\">\n\n## You try it - adding else to the password checker\n\nIf we add an else clause to the password checker we can make it act a little fancier - study the animation at right.\n\n**Add an `if-else` statement to the *login_btn* event handler that:**\n\n  * Shows the unlock and displays \"Access Granted\" if the user enters the password correctly.  \n  * Otherwise, show the lock and display \"Access Denied\"\n\nNote the setup:\n\n* Again we have two images - a lock and an unlock - but this time *both* are hidden at the start.\n* There is also a text label at the bottom where we'll display a message, but it starts empty as well\n\nThere are **two event handlers**\n\n* The first event handler - on *login_btn* \"click\" - is where you should add your `if-else` statement\n\t* We've provided the statements you need to add into the appropriate clause\n\n* The second event handler - on password_input \"click\" -- acts as a reset\n\t* You do not need to modify anything in this event handler\n    * It simply hides all images and sets the message text to `\"\"`\n\n\n<details><summary>HINT: [click to expand]</summary>\n<br>\nYour if-else statement is going to use the same boolean expression as before.  The structure of it should look like this:\n<pre>\nif( getText(\"password_input\") == \"some secret\" ){\n   // show green unlock\n   // display \"Access Granted\"\n} else {\n\t// show red lock\n   // display \"Access DENIED\"\n}\n</pre>\n</details>",
        "U5 ColorSleuth add score variables and update with console_markdown_instruction": "Fun part - hide/show player highlight in app.\n\nDO THIS:\n\n* in nextTurn() hide both player highlights\n* in if statement show the correct one in \n\n[anigif showing functionality]\n\n",
        "U5 ColorSleuth checkCorrect make global var_markdown_instruction": "## Step 1 - Make randButtonId a global variable\n\nMaking `randButtonId` global means modifying the code to declare/create it *outside* of any function and then setting its value *inside* setBoard().\n\n* Create a new variable on line 1: `var randButtonId`;\n* **Switch to text-mode** \n* Inside the setBoard() function, delete the `var` in front of `randButtonId` so that rather than re-creating the variable, we set the value of the global one.\n\nUpdated code should look like this (new or updated lines have `<--` arrows)\n\n\tvar randButtonId;     <-- declare as global variable\n    setBoard();\n    function setBoard(){\n    \t\n        //...set board code...\n        \n        randButtonId = \"button\"+randomNumber(1,4);    <-- remove \"var\" from assignment\n        \n    }\n\n**Testing it out**\n\nUnfortunately, there is not much to test here other than to determine your code still functions.  This is just a step that doesn't really change any functionality.\n\n* If it works the same as before, it's probably right, move on.\n* If it's broken or doesn't run double-check the changes you made.\n",
        "U5 ColorSleuth checkCorrect make global var_2018_markdown_instruction": "## Step 1 - Make randButtonId a global variable\n\nMaking `randButtonId` global means modifying the code to declare/create it *outside* of any function and then setting its value *inside* setBoard().\n\n* Create a new variable on line 1: `var randButtonId`;\n* **Switch to text-mode** \n* Inside the setBoard() function, delete the `var` in front of `randButtonId` so that rather than re-creating the variable, we set the value of the global one.\n\nUpdated code should look like this (new or updated lines have `<--` arrows)\n\n\tvar randButtonId;     <-- declare as global variable\n    setBoard();\n    function setBoard(){\n    \t\n        //...set board code...\n        \n        randButtonId = \"button\"+randomNumber(1,4);    <-- remove \"var\" from assignment\n        \n    }\n\n**Testing it out**\n\nUnfortunately, there is not much to test here other than to determine your code still functions.  This is just a step that doesn't really change any functionality.\n\n* If it works the same as before, it's probably right, move on.\n* If it's broken or doesn't run double-check the changes you made.\n",
        "U5 ColorSleuth implement end game_markdown_instruction": "# Challenge - Pick a way for the game to end and implement it\n\nYour challenge now is to add some code completely on your own.  Use what you've learned so far, and Alexis and Michael's discussion to help you.\n\n**This is the last programming level**\n\n* Make all changes and additions to the program that you want here\n* When you're done hit **Submit**\n\n**Goal:** Add code that provides a way for the game to end which:\n* Switches to the `gameOver_screen`\n* Shows which player won the game by showing `player1Win_label` or `player2Win_label`\n\n*We've provided `gameOver_screen` as part of the template for this project -- Switch to Design Mode to take a look at what's there*\n\n**Suggestions**\n* If you're stuck for ideas, try to implement the end game condition of \"first to 10\" - first player to reach a score of 10 wins.\n* You should use the suggestion from the discussion to add a function like `checkGameOver()` and call it from `checkCorrect`\n\n<details><summary><strong>Above and Beyond: optional extra options for your project [Click to expand]</strong></summary>\n\n<p>\nHere are a bunch of ways you can add to or extend the project:\n\n</p>\n<ul>\n\n\n<li>Add \"start over\" button on the last screen, which should reset everything, and go back to the game play screen\n</li>\n<li>Add a welcome screen that explains the rules and invites the player to start the game (make it the default screen)\n</li>\n<li>Make the game more difficult:</li>\n<uL>\n<li>Make the colors more similar (we added 20 to every RGB value, try 15 or 10).</li>\n    <li>Or make the difficulty variable - you can generate a random number between 5 and 20 and add that to the RGB values. </li>\n    <li>Or make it get progressively more difficult - use a variable to keep track of how much to add to each RGB value and decrease it over time.</li>\n\t<li>Or on a welcome screen ask if the player wants to play easy, medium, or hard.</li>\n</uL>\n\n<li>Add a timing element - lookup the documentation for setTimeout which calls a function after a certain amount of time. (Note: you may need to remix the project in as a free-play App Lab project to do this).\n</li>\n<li>You can also use <code>getTime()</code> at the beginning and end of your code to figure out how long it took for the game to end, which you could use to adjust the score.</li>\n</ul>\n</details>\n",
        "U5 ColorSleuth nextTurn pt1 update UI to indicate turn_markdown_instruction": "Fun part - hide/show player highlight in app.\n\nDO THIS:\n\n* in nextTurn() hide both player highlights\n* in if statement show the correct one in \n\n[anigif showing functionality]\n\n",
        "U5 ColorSleuth nextTurn pt2 update UI to indicate turn_markdown_instruction": "## Update the UI to indicate whose turn it is\n\n<img src=\"https://images.code.org/214101a637c0100af7dd17ff9ec5250e-image-1481211801440.gif\" style=\"float: right\">\n\nA choice has been made for you in the design of the app to indicate whose turn it is in the UI.\n\n* Notice in the design that there are two gray rectangles behind the player scores with ids `player1_highlight` and `player2_highlight`.  `player2_highlight` starts out hidden.\n\nDo this:\n* Add code to the `if` statement in `switchPlayer`\n* Use the `hideElement` and `showElement` commands (found in the UI controls toolbox) to show and hide these rectangles as a way of indicating whose turn it is.\n* For example if it's player 1's turn, then show `player1_highlight` and hide `player2_highlight`\n\nWhen you're done you should see the player highlight alternate like the graphic above.\n\n**TIP**: Make the `player2_highlight` start out hidden by checking the \"hidden\" box for it in design mode.\n\n\n\n",
        "U5 ColorSleuth nextTurn pt2 update UI to indicate turn_2018_markdown_instruction": "## Update the UI to indicate whose turn it is\n\n<img src=\"https://images.code.org/214101a637c0100af7dd17ff9ec5250e-image-1481211801440.gif\" style=\"float: right\">\n\nA choice has been made for you in the design of the app to indicate whose turn it is in the UI.\n\n* Notice in the design that there are two gray rectangles behind the player scores with ids `player1_highlight` and `player2_highlight`.  `player2_highlight` starts out hidden.\n\nDo this:\n* Add code to the `if` statement in `switchPlayer`\n* Use the `hideElement` and `showElement` commands (found in the UI controls toolbox) to show and hide these rectangles as a way of indicating whose turn it is.\n* For example if it's player 1's turn, then show `player1_highlight` and hide `player2_highlight`\n\nWhen you're done you should see the player highlight alternate like the graphic above.\n\n**TIP**: Make the `player2_highlight` start out hidden by checking the \"hidden\" box for it in design mode.\n\n\n\n",
        "U5 ColorSleuth part 2 small color change_markdown_instruction": "# Let's make one square slightly different\n\nAdd two lines to the bottom of the code you have that look like something like this.\n\n![](https://images.code.org/abec0079a632f5e6ad7be28beb30763a-image-1490105722035.png)\n\nWhat does this do? We're doing two things...\n\n1. Creating a variable to hold the RGB string of a different color, and \n2. Overwriting the background color of one of the buttons after having just set it a few lines earlier\n\nYes, this means your code will change the background color of one of the buttons a few lines after you just set the color in the first place but it will happen so fast you won't notice, and doing it this way will be useful later on.\n\n",
        "U5 ColorSleuth part 2 small color change_2018_markdown_instruction": "# Let's make one square slightly different\n\nAdd two lines to the bottom of the code you have that look like something like this.\n\n![](https://images.code.org/abec0079a632f5e6ad7be28beb30763a-image-1490105722035.png)\n\nWhat does this do? We're doing two things...\n\n1. Creating a variable to hold the RGB string of a different color, and \n2. Overwriting the background color of one of the buttons after having just set it a few lines earlier\n\nYes, this means your code will change the background color of one of the buttons a few lines after you just set the color in the first place but it will happen so fast you won't notice, and doing it this way will be useful later on.\n\n",
        "U5 ColorSleuth part 3 pick random button_markdown_instruction": "# You try it - Pick a button at random to make a different color\n\nWe've included the code discussed on the previous page below. \n\nThe last lines of your code should look something like this:\n\n\n    var diffColor = rgb(250, 175, 20);\n    var randButtonId = \"button\"+randomNumber(1,4);   // create a random button Id\n    setProperty(randButtonId, \"background-color\", diffColor);  // set its color to diffColor\n\n\nNotice that there is really only one new line - to make the `randButtonID` variable.  \nThe other change is to replace *\"button3\"* as the id in setProperty with *randButtonID*.\n\nSuggestion:\nAdd `console.log(randButtonId)` somewhere after you generate the button ID so you can see which button is supposed to have the different color.  It might be hard to spot!",
        "U5 ColorSleuth part 3 pick random button_2018_markdown_instruction": "# You try it - Pick a button at random to make a different color\n\nWe've included the code discussed on the previous page below. \n\nThe last lines of your code should look something like this:\n\n\n    var diffColor = rgb(250, 175, 20);\n    var randButtonId = \"button\"+randomNumber(1,4);   // create a random button Id\n    setProperty(randButtonId, \"background-color\", diffColor);  // set its color to diffColor\n\n\nNotice that there is really only one new line - to make the `randButtonID` variable.  \nThe other change is to replace *\"button3\"* as the id in setProperty with *randButtonID*.\n\nSuggestion:\nAdd `console.log(randButtonId)` somewhere after you generate the button ID so you can see which button is supposed to have the different color.  It might be hard to spot!",
        "U5 ColorSleuth part 4 make setBoard function_markdown_instruction": "You should now have code that sets the color of the buttons and picks one at random to make a slightly different color.  \n\nThis is good functionality that, now that it's working means we can move onto the next problem. But for the game we're going to want to do this multiple times so that's a clue we should make a function\n\nDO THIS:\n\n* Define a new function called `setBoard`.\n* Move all of the code that sets the colors of the buttons inside the function [licecap]\n* add a call to `setBoard` to verify that it works",
        "U5 ColorSleuth part 5 make random RGB string_markdown_instruction": "We can use the *same technique* to generate a random color.\n\nall colors are defined as strings with only difference being the numbers that are used.\n\nWe just learned how to do this for ids.  Same principle for colors it just gets nasty looking.\n\n\"rgb(\"+random=\", \"+random...",
        "U5 L1 - 3: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lessons work. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 1 - 3: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U5 L11 - 14: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lessons work. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 11 - 14: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U5 L15 - 17: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lessons work. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 15 - 17: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U5 L4 - 6: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lessons work. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 4 - 6: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U5 L7 - 10: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the lesson resources in this module, and have a good sense of how the lessons work. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 7 - 10: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, let’s think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. It’s important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs you’ll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n<br><br>",
        "U5 Video compound booleans_markdown_instruction": "### Points to pay attention to:\n\n* The \"Boolean operators\" are AND and OR.  \n* In JavaScript you write them as `&&` for AND and `||` for OR.\n* You use them to combine boolean expressions into a single statement when you need to check multiple conditions before executing a particular segment of code.\n\n",
        "U5 compound boolean museum example_markdown_instruction": "## You Try It\n\n**Recreate the museum price example from the video.**\n\n* We've setup everything for you **except the boolean expression in the *if* statement is incomplete**\n\n**Modify the boolean expression** (it just says `age < 21` right now) to use combinations of `&&` and `||` to reflect the following condition:\n\n* IF *It's Tuesday or Thursday or the age is between 12 and 21* they get a discount\n* ELSE they pay full price\n\n**TIP:** switching to text mode might make this easier to compose.",
        "U5 compound boolean museum example_2018_markdown_instruction": "## You Try It\n\n**Recreate the museum price example from the video.**\n\n* We've setup everything for you **except the boolean expression in the *if* statement is incomplete**\n\n**Modify the boolean expression** (it just says `age < 21` right now) to use combinations of `&&` and `||` to reflect the following condition:\n\n* IF *It's Tuesday or Thursday or the age is between 12 and 21* they get a discount\n* ELSE they pay full price\n\n**TIP:** switching to text mode might make this easier to compose.",
        "U5 if-else simple movie ratings example_markdown_instruction": "## You Try It\n\n**Recreate the simple movie age example from the video.**\n\n* We've provided the first line to prompt the user to enter their age.\n* Add and `if-else` statement that checks to see if the age is `>=` 13 and \n* Use `console.log` to display appropriate messages\n\nHere is pseudocode for what you should add\n\n```\nIF age >= 13\n    DISPLAY \"You can see a PG-13 movie alone\"\nELSE\n    DISPLAY \"You are not old enough to see a PG-13 movie alone\"\n```\n\n\n",
        "U5 if-else simple movie ratings example_2018_markdown_instruction": "## You Try It\n\n**Recreate the simple movie age example from the video.**\n\n* We've provided the first line to prompt the user to enter their age.\n* Add and `if-else` statement that checks to see if the age is `>=` 13 and \n* Use `console.log` to display appropriate messages\n\nHere is pseudocode for what you should add\n\n```\nIF age >= 13\n    DISPLAY \"You can see a PG-13 movie alone\"\nELSE\n    DISPLAY \"You are not old enough to see a PG-13 movie alone\"\n```\n\n\n",
        "U5 video Booleans_markdown_instruction": "### Points to pay attention to:\n\n1. What's a *Boolean Expression?*\n2. Why is it called a \"Boolean\"?\n3. Is this a legal expression?  `10 > 25`?",
        "Underground Avoiding Lava_markdown_instruction": "Lava is hiding beneath some of these blocks, which you'll need to cover up before moving forward. An `if` command will come in handy here. Add a `move forward` command in the correct place to mine these blocks.",
        "Underground Avoiding Lava_2018_markdown_instruction": "Lava is hiding beneath some of these blocks, which you'll need to cover up before moving forward. An `if` command will come in handy here. Add a `move forward` command in the correct place to mine these blocks.",
        "Underground If Statements_markdown_instruction": "Now things are getting tricky. Mine 3 redstone, but don’t fall in the lava. Use an `if` command to place cobblestone over any lava you uncover.",
        "Underground If Statements_2018_markdown_instruction": "Now things are getting tricky. Mine 3 redstone, but don’t fall in the lava. Use an `if` command to place cobblestone over any lava you uncover.",
        "Unit 2 Teaching Practice Plan: Assessing Student Learning_markdown_instruction": "> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 2. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Unit 2 Teaching Practice Plan: Assessing Student Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for assessing student learning throughout unit 2. Your plan should address the following: \n\n- Using what’s in the curriculum\n \n  - How do you plan to use the assessment opportunities that have been provided in the curriculum? Your response should include how you plan to use formative lessons questions (blue bubbles in code studio), project rubrics, AP-style questions (following lesson 6 and lesson 17), practice performance tasks (lessons 6 and 15)\n\n\n- Making your own assessments\n\n  - What types of assessments might you need to create or use on top of those provided in the curriculum? \n  - What is your strategy for developing assessment opportunities that are consistent with the philosophy of the curriculum and activities? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n",
        "Unit 2 Teaching Practice Plan: Discovery Learning_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 2. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Unit 2 Teaching Practice Plan: Discovery Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for building and supporting a culture of discovery learning in your classroom throughout unit 2. Your plan should address the following: \n\n- For lessons that call for students to discover a key computer science concept, how do you plan to balance your time frontloading content instruction with students’ time completing the activity and constructing their own knowledge? \n- What is your strategy for supporting students who struggle with this model of teaching and learning, and look to you to ‘just give them the answer’?\n- How do you plan to make sure students leave a lesson having discovered the underlying concept(s)? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n\n\n",
        "Unit 2 Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 2. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n\n# Unit 2 Teaching Practice Plan: Group Work and Peer Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for supporting group work throughout unit 2. Your plan should address the following things: \n\n- What is your plan for supporting students who are struggling to engage in group work, either because they prefer to work alone, or because they are having issues collaborating with their partner(s)?\n- How do you plan to help make sure all members of the team have a voice in their groups’ discussions?\n- How can you help students understand and appreciate the importance of learning through and from one another? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n\n\n\n",
        "Unit 3 Teaching Practice Plan: Assessing Student Learning_markdown_instruction": "> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 3. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Unit 3 Teaching Practice Plan: Assessing Student Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for assessing student learning throughout unit 3. Your plan should address the following: \n\n- Using what’s in the curriculum\n \n  - How do you plan to use the assessment opportunities that have been provided in the curriculum? Your response should include how you plan to use formative lessons questions (blue bubbles in code studio), project rubrics, AP-style questions, practice performance tasks (lesson 10).\n\n\n- Making your own assessments\n\n  - What types of assessments might you need to create or use on top of those provided in the curriculum? \n  - What is your strategy for developing assessment opportunities that are consistent with the philosophy of the curriculum and activities? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n",
        "Unit 3 Teaching Practice Plan: Discovery Learning_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 3. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Unit 3 Teaching Practice Plan: Discovery Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for building and supporting a culture of discovery learning in your classroom throughout unit 3. Your plan should address the following: \n\n- For lessons that call for students to discover a key computer science concept, how do you plan to balance your time frontloading content instruction with students’ time completing the activity and constructing their own knowledge? \n- What is your strategy for supporting students who struggle with this model of teaching and learning, and look to you to ‘just give them the answer’?\n- How do you plan to make sure students leave a lesson having discovered the underlying concept(s)? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n\n\n",
        "Unit 3 Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 3. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n\n# Unit 3 Teaching Practice Plan: Group Work and Peer Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for supporting group work throughout unit 3. Your plan should address the following things: \n\n- What is your plan for supporting students who are struggling to engage in group work, either because they prefer to work alone, or because they are having issues collaborating with their partner(s)?\n- How do you plan to help make sure all members of the team have a voice in their groups’ discussions?\n- How can you help students understand and appreciate the importance of learning through and from one another? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n\n\n\n",
        "Unit 4 Teaching Practice Plan: Assessing Student Learning_markdown_instruction": "> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 4. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Unit 4 Teaching Practice Plan: Assessing Student Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for assessing student learning throughout unit 4. Your plan should address the following: \n\n- **Using what’s in the curriculum** How do you plan to use the assessment opportunities that have been provided in the curriculum? Your response should include how you plan to use:\n  - formative lessons questions (blue bubbles in code studio), \n  - project rubrics, \n  - AP-style questions (following lesson 9), \n  - practice performance tasks (lesson 9).\n\n- **Making your own assessments**\n  - What types of assessments might you need to create or use on top of those provided in the curriculum? \n  - What is your strategy for developing assessment opportunities that are consistent with the philosophy of the curriculum and activities? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n",
        "Unit 4 Teaching Practice Plan: Balancing Teacher and Tools_markdown_instruction": "> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 4. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n\n# Unit 4 Teaching Practice Plan: Balancing Teacher and Tools\n\n<img src=\"https://images.code.org/1cc3effc2c7fbd1003ecb8a8561f893e-image-1481692026401.38.35 PM.png\" style=\"float:right; margin-left:30px; width:45%\">\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your general plan for managing technology throughout unit 4, as well as a specific plan for one of the technology-dependent lessons highlighted in unit overview on the right. Note that lessons with a solid red boarder leverage primarily external tools, while lessons with the dashed line use custom-made widgets and tools that are housed within Code Studio. \n\n\nYour plan should be broken into two parts, and address the following things: \n\n- General strategies that you’ll apply throughout unit 4\n  - Throughout unit 4, what classroom and technology management techniques will you use to help students stay focused on the lesson tasks? \n\n- Strategies specific to a selected lesson\n  - Which of the highlighted lessons on the right are you discussing? \n  - What is your plan for managing transitions between your instruction and students being in the tool? *Note: your response should include specifics about the lesson*\n  - How do you plan to introduce the lesson challenge and the tool that students will use to complete the challenge? *Note: your response should include specifics about the lesson*\n\n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n \n\n",
        "Unit 4 Teaching Practice Plan: Discovery Learning_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 4. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Unit 4 Teaching Practice Plan: Discovery Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for building and supporting a culture of discovery learning in your classroom throughout unit 4. **While students will do a lot of hands on discovery work throughout unit 4, lessons 5 - 7 are particularly dependent on discovery as the mechanism that students use to explore concepts.**  Your plan should address the following: \n\n- For lessons that call for students to discover a key computer science concept, how do you plan to balance your time frontloading content instruction with students’ time completing the activity and constructing their own knowledge? \n- What is your strategy for supporting students who struggle with this model of teaching and learning, and look to you to ‘just give them the answer’?\n- How do you plan to make sure students leave a lesson having discovered the underlying concept(s)? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n\n\n",
        "Unit 4 Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 4. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n\n# Unit 4 Teaching Practice Plan: Group Work and Peer Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for supporting group work throughout unit 4. Your plan should address the following things: \n\n- What is your plan for supporting students who are struggling to engage in group work, either because they prefer to work alone, or because they are having issues collaborating with their partner(s)?\n- How do you plan to help make sure all members of the team have a voice in their groups’ discussions?\n- How can you help students understand and appreciate the importance of learning through and from one another? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n\n\n\n",
        "Unit 5 Teaching Practice Plan: Assessing Student Learning_markdown_instruction": "> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 5. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Unit 5 Teaching Practice Plan: Assessing Student Learning\n\nFor this task you’re going to develop and submit a Teaching Practice Plan, which details your plan for assessing student learning throughout unit 5. Your plan should address the following: \n\n- **Using what’s in the curriculum** How do you plan to use the assessment opportunities that have been provided in the curriculum? Your response should include how you plan to use:\n  - code students write while learning about a concept (not the final projects that they build towards)\n  - submittable projects (which typically come after a set of 2-3 lessons and pull together multiple concepts)\n  - AP-style questions (following lessons 5, 10, 14, and 17), \n  - practice performance tasks (lesson 18).\n\n- **Making your own assessments**\n  - What types of assessments might you need to create or use on top of those provided in the curriculum? \n  - What is your strategy for developing assessment opportunities that are consistent with the philosophy of the curriculum and activities? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n",
        "Unit 5 Teaching Practice Plan: Balancing Teacher and Tools_markdown_instruction": "> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 5. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n\n# Unit 5 Teaching Practice Plan: Balancing Teacher and Tools\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your general plan for managing technology throughout unit 4, as well as a specific plan for a computer-based lesson (which for unit 5, is almost every lesson).\n\nYour plan should be broken into two parts, and address the following: \n\n- General strategies that you’ll apply throughout unit 5\n  - Throughout unit 4, what classroom and technology management techniques will you use to help students stay focused on the lesson tasks? \n\n- Strategies specific to a selected lesson\n  - Which lesson are you discussing? \n  - What is your plan for managing transitions between your instruction and students being in App Lab? *Note: your response should include specifics about the lesson*\n  - How do you plan to introduce the lesson challenge as well as any new features or programming concepts that have been added to App Lab since the last lesson? *Note: your response should include specifics about the lesson*\n\n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n \n\n",
        "Unit 5 Teaching Practice Plan: Discovery Learning_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 5. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n# Unit 5 Teaching Practice Plan: Discovery Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for building and supporting a culture of discovery learning in your classroom throughout unit 5. Your plan should address the following: \n\n- How do you plan to balance your time frontloading content instruction with students’ time experimenting with new programming concepts introduced in the unit? \n- How do you plan to evaluate students' understanding of the programming concepts they're supposed to leran in the unit? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n\n\n",
        "Unit 5 Teaching Practice Plan: Group Work and Peer Learning_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this task, make sure you’ve reviewed the resources in this module, and have a good sense of the connections to unit 5. If you haven’t already reviewed the materials, do that now and come back to this task later.**\n\n\n# Unit 5 Teaching Practice Plan: Group Work and Peer Learning\n\nFor this task, you’re going to develop and submit a Teaching Practice Plan, which details your plan for supporting group work throughout unit 5. Your plan should address the following things: \n\n- What is your plan for supporting students who are struggling to engage in group work, either because they prefer to work alone, or because they are having issues collaborating with their partner(s)?\n- How do you plan to help make sure all members of the team have a voice in their groups’ discussions?\n- How can you help students understand and appreciate the importance of learning through and from one another? \n- What recommendations will you give students about collaboration on their Create Performance Task? \n\nYou can type out your teaching practice plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your “focus area”, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how this practice will fit into your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once it’s available. \n\n\n\n\n",
        "Using Accelerometer Events_markdown_instruction": "Today you’re going to learn how to use and create **functions**.\n\nCreating a function lets you make your own blocks! There are two parts to a function: \n\nMaking a newly named block that has all of the code you want to run inside of it. \n-xml of function definition- \n\nThe single green block itself that you use, or call, to run the function you created.\n-xml of function call-\n\nPrepare to get familiar with functions, learn how to edit them, and create your own!",
        "Using Accelerometer Events_2018_markdown_instruction": "Today you’re going to learn how to use and create **functions**.\n\nCreating a function lets you make your own blocks! There are two parts to a function: \n\nMaking a newly named block that has all of the code you want to run inside of it. \n-xml of function definition- \n\nThe single green block itself that you use, or call, to run the function you created.\n-xml of function call-\n\nPrepare to get familiar with functions, learn how to edit them, and create your own!",
        "Valentine_artist_01_markdown_instruction": "Help the artist finish his llama heart to change it from llame to llovely! How many llamas does the artist still need to draw?",
        "Valentine_playlab_01_markdown_instruction": "Kiki the Soccer Girl wants to make sure her friends are loved on Valentine's Day! Program Kiki (Actor 1) to move left and right when the left and right arrows are pressed. When Kiki is clicked, she should throw hearts towards her friends. \n\n---\nClick \"Run\" and play the game to find out how many friends she has to send love to in order to win!",
        "Video - Cybersecurity and Crime - Video_markdown_instruction": "[Video guide and questions](https://drive.google.com/open?id=1Qv4lgMMtP42sRlofUmGtElViD1AJ7yETvQ4pCh0rDjw)",
        "Video - Cybersecurity and Crime_markdown_instruction": "[Video guide and questions](https://drive.google.com/open?id=1Qv4lgMMtP42sRlofUmGtElViD1AJ7yETvQ4pCh0rDjw)",
        "Video - Cybersecurity and Crime_2018_markdown_instruction": "[Video guide and questions](https://drive.google.com/open?id=1Qv4lgMMtP42sRlofUmGtElViD1AJ7yETvQ4pCh0rDjw)",
        "Video. Introduction to Conditionals - Part 1_markdown_instruction": "### Points to pay attention to:\n\n1. What's a *Boolean Expression?*\n2. Why is it called a \"Boolean\"?\n3. Is this a legal expression?  `10 > 25`?",
        "Video. Introduction to Conditionals - Part 2.2_markdown_instruction": "### Points to pay attention to:\n\n**Start** play at 1:37 \n**Stop** play at 2:20\n\nIt's all you need for the exercises that follow.  You'll watch the remainder of the video after that.\n\n* An IF statement can have an else clause, but an ELSE clause cannot exist on its own.\n* With an else clause you are *guaranteeing* that one of two portions of code will run.\n\n",
        "Vigenere_markdown_instruction": "# Encrypt and decrypt a message with the Vigenère cipher\n\nThis is an interactive version of the Vigenère cipher that animates the encryption and decryption as it’s happening, given a piece of text to encrypt or decrypt and the key.\n\n# Do this\n### Encrypt a message\nClick Step several times, and trace what’s happening. Pay attention to:\n\n- How the ciphertext is being produced\n- What happens when you get to the last character of the key\n- After you’ve stepped through a few characters click Play to watch the rest animate\n- Hit Restart and play the animation again. You can use the speed slider to speed it up or slow it down  \n\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\n\n### Decrypt a message\nEncrypt a message as above, then:  \n\n- Highlight and copy the ciphertext\n- Paste it into the plaintext area. Note: Don’t change the key\n- Change the Encrypt/Decrypt toggle to Decrypt\n- Hit Step a few times, and then Play\n\nYou should see the original text emerge.  \n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\n\n\nHow hard would it be to crack a message encrypted with this cipher? Does the length of the key make a difference?\n",
        "Virtual Pet 1 Predict_markdown_instruction": "**Make a prediction:** This is Geraldine, your new pet giraffe.\n\nWhat do you think will happen if you press \"▶ Run\" and then click on her?\n",
        "Virtual Pet 1 Predict_simple_markdown_instruction": "**What do you think?** \n\nThis giraffe is called Geraldine.  \n\nWhen you click on her, what will she do?",
        "Virtual Pet 1-validated_markdown_instruction": "This is Geraldine, your new pet giraffe. What do you think will happen if you press run and then click on her?",
        "Virtual Pet 1_markdown_instruction": "This is Geraldine, your new pet giraffe.  \n\nWhat do you think will happen if you press \"▶ Run\" and then click on her?",
        "Virtual Pet 1_simple_markdown_instruction": "This is Geraldine, your new pet giraffe.  \n\nWhat do you think will happen if you press \"▶ Run\" and then click on her?",
        "Virtual Pet 2 - Validated (Ram)_markdown_instruction": "There's a mud puddle over in the corner.  \n\nCreate an **event** so that when Geraldine touches the puddle, her color changes to brown.",
        "Virtual Pet 2 - Validated_markdown_instruction": "There's a mud puddle over in the corner.  \n\nCreate an **event** so that when Geraldine touches the puddle, her color changes to brown.",
        "Virtual Pet 2_markdown_instruction": "There's a mud puddle over in the corner.  \n\nCreate an **event** so that when Geraldine touches the puddle, her color changes to brown.",
        "Virtual Pet 2_simple_markdown_instruction": "There is brown dirt in the corner.\n\nCreate an **event** so that when Geraldine touches the dirt, her color changes to brown.",
        "Virtual Pet 2_simple_clone_markdown_instruction": "There is brown dirt in the corner.\n\nCreate an **event** so that when Geraldine touches the dirt, her color changes to brown.",
        "Virtual Pet 4_markdown_instruction": "We don't want to wait for the giraffe to clean itself every time.  \n\nAdd a behavior to your soap to make it draggable, then drag it over to clean the giraffe!\n",
        "Virtual Pet 4_simple_markdown_instruction": "We want to bring the soap to the giraffe.\n\nAdd a behavior to your soap to make it draggable, then drag it over to clean the giraffe!\n",
        "Virtual Pet 5 - Validated_markdown_instruction": "All of this play takes energy!  \n\nAdd actions to each event so the giraffe gets a little smaller (shrinks by 5) each time it collides with another sprite.  \n",
        "Virtual Pet 5_markdown_instruction": "All of this play takes energy!  \n\nAdd actions to each event so the giraffe gets a little smaller (shrinks by 5) each time it collides with another sprite.  \n",
        "Virtual Pet 5_simple_markdown_instruction": "The giraffe is too big!  \n\nAdd actions to each event so the giraffe gets smaller each time it touches another sprite.  \n",
        "Virtual Pet 6_markdown_instruction": "A balanced diet is important! We have to feed the giraffe to get its strength back.  \n\nAdd an apple to the scene and have it return the giraffe back to regular size when the two sprites touch.  \n",
        "Virtual Pet 6_simple_markdown_instruction": "The giraffe is hungry!\n\nAdd an apple and use an action to make the giraffe its normal size when the apple and giraffe touch.  \n",
        "Virtual Pet Freeplay_markdown_instruction": "Freeplay: What more can you make your giraffe do? \n\n- Can you add more special items for your virtual pet?  \n- Can you give her some friends?  ",
        "Virtual Pet Freeplay_simple_markdown_instruction": "Freeplay: What more can you make your giraffe do? \n\n- Can you add more special items for your giraffe?  \n- Can you give her some friends?  ",
        "Virtual Pet Predict_markdown_instruction": "**Make a prediction:** This is Geraldine, your new pet giraffe. What do you think will happen if you press run and then click on her?",
        "Web Lab 1_markdown_instruction": "Make an awesome web page!\n\n1. Look at the web page we gave you to start with. Look how lame it is. 1996 just called and wants its web page back. But don't get depressed - YOU can fix it!\n2. Add a background-color attribute in the body style in style.css to make the page background color 'darkcyan'\n3. Add a text-align attribute to the body style in style.css to center the image and text horizontally\n4. Change index.html to include an inspiring hashtag\n5. Add a color attribute to the p style in style.css to make the inspiring hashtag white\n6. Add a font-size attribute to the p style in style.css to make your inspiring hashtag REALLY BIG! (Try 24px and 3em and see what happens.)",
        "Website Comparison_markdown_instruction": "# Comparing Websites\n\n**Prompt:** Imagine you have a new puppy at home who has chewed through her old leash. Decide between which of these two websites you would ultimately decide to buy your puppy’s new leash. Why?\n\n* Website 1: <a href=\"https://thimbleprojects.org/nickianselmo/84613/\"> Uncle Joe's Pet Store</a>\n* Website 2: <a href=\"http://www.petsmart.com/\"> PetSmart</a>\n\nWrite your answer in the box below. When you are done wait for directions from your teacher before moving on.",
        "Website: Data Breaches_markdown_instruction": "## Website: Data Breaches\n\nIn lesson 3 students begin to explore the types of security breakdowns that have happened over time, and consider what information is actually out there about them. The lessons starts with an exploration of an interactive data visualization website, linked below: ",
        "Wednesday Report: Balancing Teachers and Tools in Unit 1_markdown_instruction": "At this point you've seen 7 of the 14 lessons from unit 1. Thinking about those lessons, and looking across the other lessons in <a href=\"//curriculum.code.org/csp/unit1/\" target=_blank>unit 1</a>. Again, consider the following questions with your partner:\n\n- How have people wearing teacher hats been balancing their time leading or guiding with the student-hat’s time to get into activities and tools?\n- What strategies have been effective for managing the transition to tools? What strategies are effective in getting peoples’ attention once they’re lost in a tool?\n- What are your current thoughts about the appropriate balance of teacher-guided time VS time in the tools or with the activities?\n\n<br>\n\nOnce you've had a chance to think about what you've seen today,  work with your partner to develop a set of recommendations about balancing the teacher and the tools in Unit 1. Your recommendations might include:\n\n- Which lessons or activities present the biggest challenges with balancing teachers and tools? \n- What recommendations do you have related to balancing teachers and tools in Unit 1?  \n\n<br>\n\nUse the space below to record your recommendations (you'll share them tomorrow). ",
        "Wednesday Report: Discovery Learning in Unit 1_markdown_instruction": "At this point you've seen 7 of the 14 lessons from unit 1. Think about those lessons, and look across the other lessons in <a href=\"//curriculum.code.org/csp/unit1/\" target=_blank>unit 1</a>. Again, consider the following questions with your partner:\n\n- What opportunities have you seen for learners to discover concepts for themselves? \n- How did the process of engaging in discovery activities change the pacing, flow, or outcome of the lesson? \n- What benefits and pitfalls did you see in discovery activities? \n\n<br>\n\nOnce you've had a chance to think about what you've seen today,  work with your partner to develop a set of recommendations about balancing the teacher and the tools in Unit 1. Your recommendations should include:\n\n- Which lessons or activities provide opportunities for discovery learning? \n- What recommendations do you have for using discovery learning in Unit 1?  \n\n<br><br>\nUse the space below to record your recommendations (you'll share them tomorrow). ",
        "Wednesday Report: Group Work and Peer Learning in Unit 1_markdown_instruction": "At this point you've seen 7 of the 14 lessons from unit 1. Thinking about those lessons, and looking across the other lessons in <a href=\"//curriculum.code.org/csp/unit1/\" target=_blank>unit 1</a> Again, consider the following questions with your partner:\n\n- Where did you see group work and peer learning in these lessons?\n- What are the benefits of using group work and peer learning here?\n- How does using peer learning and group work as a strategy in the lesson impact how the activities run?\n\n<br>\n\nOnce you've had a chance to think about what you've seen today,  work with your partner to develop a set of recommendations about group work and peer learning in Unit 1. Your recommendations might include:\n\n- Which lessons or activities provide opportunities for group work and peer learning?\n- What recommendations do you have for using group work and peer learning in Unit 1 lessons?\n\n<br>\n\nUse the space below to record any recommendations or commentary you have for others.",
        "Wednesday Report: Measuring Student Learning in Unit 1_markdown_instruction": "At this point you've seen 7 of the 14 lessons from unit 1. Thinking about those lessons, and looking across the other lessons in <a href=\"//curriculum.code.org/csp/unit1/\" target=_blank>unit 1</a>. Again, consider the following questions with your partner:\n\n- What opportunities have you seen for assessing learners’ knowledge (prior knowledge, knowledge gained during the lesson, etc)? \n- What assessments are available in the curriculum? \n- What strategies would be effective for checking in on what students know? \n\n<br>\n\nOnce you've had a chance to think about what you've seen today,  work with your partner to develop a set of recommendations about balancing the teacher and the tools in Unit 1. Your recommendations should include:\n\n- Which lessons or activities present the biggest challenge with assessing student learning?\n- What recommendations do you have for assessing student learning in Unit 1?  \n\n<br>\n\nUse the space below to record your recommendations (you'll share them tomorrow). ",
        "What is the difference between formative and summative assessment?_markdown_instruction": "The following link is a resource that provides definitions and examples of formative and summative assessments:",
        "WhileAdventure_markdown_instruction": "Our adventurer wants to collect coins.  But she can only use 4 blocks to get them.  \n\nCan you help her grab as many as she can using just 4 blocks?",
        "Widget: Black and White Pixelation_markdown_instruction": "# Make your own image of any size\n\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\n\n\n**Directions:**\n\n* Encode an image of anything you like.\n* You might want to do some planning and sketching with graph paper first.\n* DO NOT simply make an abstract pattern, like a checkerboard. \n* Depict something, perhaps your name written out, your initials, an icon or logo of some sort.\n* Get creative! The image doesn't have to be a perfect square, it can be long and skinny.\n* Optional: for fun, send your image bits to a friend using the <a href =\"https://studio.code.org/s/cspunit1/stage/11/puzzle/2\" target=\"_blank\">sending bits widget.</a> *(note: this is just a link to the sending formatted text level from a couple of classes ago)*\n\n\n",
        "Widget: Black and White Pixelation_2018_markdown_instruction": "# Make your own image of any size\n\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\n\n\n**Directions:**\n\n* Encode an image of anything you like.\n* You might want to do some planning and sketching with graph paper first.\n* DO NOT simply make an abstract pattern, like a checkerboard. \n* Depict something, perhaps your name written out, your initials, an icon or logo of some sort.\n* Get creative! The image doesn't have to be a perfect square, it can be long and skinny.\n* Optional: for fun, send your image bits to a friend using the <a href =\"https://studio.code.org/s/cspunit1/stage/11/puzzle/2\" target=\"_blank\">sending bits widget.</a> *(note: this is just a link to the sending formatted text level from a couple of classes ago)*\n\n\n",
        "Widget: Color Pixelation_markdown_instruction": "# Personal Favicon\n**Requirements:**\n<img src = \"https://images.code.org/28fc33ea82996a10863688702af55e65-image-1439596268865.png\" align=right hspace=20>\n\n* The icon must be 16x16 pixels. \n* You must use the Pixelation Widget to encode the bits of color information.\n* The image must be encoded with at least 12 bits per pixel.\n\n",
        "Widget: Color Pixelation_2018_markdown_instruction": "# Personal Favicon\n**Requirements:**\n<img src = \"https://images.code.org/28fc33ea82996a10863688702af55e65-image-1439596268865.png\" align=right hspace=20>\n\n* The icon must be 16x16 pixels. \n* You must use the Pixelation Widget to encode the bits of color information.\n* The image must be encoded with at least 12 bits per pixel.\n\n",
        "Widget: Text Compression_markdown_instruction": "Look for patterns (repeated words or phrases) in the text. Enter the patterns you see into the dictionary on the right. As you type entries into the dictionary, the symbol for the entry is inserted into the text in place of the pattern.",
        "Widget: Text Compression_2018_markdown_instruction": "Look for patterns (repeated words or phrases) in the text. Enter the patterns you see into the dictionary on the right. As you type entries into the dictionary, the symbol for the entry is inserted into the text in place of the pattern.",
        "aE3alternate_markdown_instruction": "\n<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nThis alternate shows what the image would look like if the user chose pentagon napkins and modified line weight/color.\n</div>\n\n",
        "aE3alternateB_markdown_instruction": "\n<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nThis alternate shows what the image would look like if the user chose triangle napkins and got bold with the code.\n</div>\n\n",
        "aE4_markdown_instruction": "\n<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nOh No! Our napkins are too small! \n<br/><br/>\nWe need to have the napkins twice as big and still keep the tablecloth the same size. What numbers can you change to make that happen?\n<br/><br/>\n(as shown in triangles)\n</div>\n\n",
        "aE5_markdown_instruction": "\n<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nLet's pull the look together with some window decorations!\n<br/><br/>\nHere is your original code for drawing a line of napkins. Piece 4 lines together to make a pattern that goes around your window frame.\n</div>\n\n",
        "aE6_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nThe guests are going to need something to sit on!\n<br/><br/>\nThe artist has an idea to make some fun chairs. How many times do you need to loop this to draw half of a circle?\n</div>",
        "allthethings data blocks test_markdown_instruction": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
        "allthethings design mode elements_markdown_instruction": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\nEnd of instructions that are long.",
        "allthethings level dataTables_markdown_instruction": "Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
        "allthethings_U3 - Simple Drawing - Rectangle Width and Height_markdown_instruction": "# Drawing Rules\n\nSo what did you discover on the last level?\n\n* What do each of the 4 openings control?\n\n\t* First Opening - controls the **location of the rectangle from left to right** - we call this the **x position**\n    * Second Opening - controls the **location of the rectangle from top to bottom** - we call this the **y position**\n    * Third Opening - controls the **width** of the rectangle\n    * Fourth Opening - controls the **height** of the rectangle\n\n* What is the size of the drawing area?\n\n\t* Width - 400\n    * Height - 400\n\n* So where is (0,0) or x = 0 and y = 0?\n\n\t* The **upper left corner of the grid!**\n\n# Do This\n\nWe have provided you with code for a rectangle that draws in the upper left corner when you run the program. Using your new knowledge of the workspace and the inputs for a rectangle:\n\n* **Change the width and height of the rectangle so that it fills the whole drawing area**\n* **HINT:** Remember that the rectangle block is `rect(x, y, width, height)` in that order",
        "allthethings_fish_tank_markdown_instruction": "All-the-things test level.",
        "allthethings_template_backed1_markdown_instruction": "Backed by a template #1. Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script). ",
        "allthethings_template_backed2_markdown_instruction": "Backed by a template #2. Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).",
        "allthethings_ttscsd_markdown_instruction": "<img src=\"https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10 PM.png\" style=\"float:right;height:150px\">\n\n# Do This\n\n* Write code that makes an orange ellipse behind the green one.\n* Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.",
        "artistLoopsK3_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nDraw a line eight steps long. This will become the land for our kingdom!<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/c00b930eb5fb13ae946847adc51c9bd3-image-1467935631246.gif\" width=\"300\"/>\n",
        "artistLoopsK4_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nNow we need a castle with a draw bridge.  Fix the code so that the bridge lays straight instead of falling down.<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/84b93e1b9dad3ee52a46c767524d3558-image-1467935697224.gif\" width=\"300\"/>\n",
        "artistLoopsK5_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nNow we need to fix the top of the castle. Can you loop the code three times?<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/f418ccba20b7230baba1328143bd0092-image-1467935762464.gif\" width=\"300\"/>\n",
        "artistLoopsK6_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nSomeone is stuck in the tower!  Fix the stairs to set them free.<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/1efb95ca15f66b46145725769d3d279c-image-1467935856461.gif\" width=\"300\"/>\n",
        "artistLoopsK7_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nThis tower is lovely, what is downstairs? Build another staircase to find out!<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/af040c27be11c3a639e18c440c8a047c-image-1467936046481.gif\" width=\"300\"/>\n",
        "artistLoopsK8_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nWow! There's a garden over there!  Help fix these stairs so I can get to it.<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/bf368872da36217b0d19261fc6b84bf6-image-1467936147116.gif\" width=\"300\"/>\n",
        "artistLoopsKA_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nThese stones are in the wrong place.  Help me move them so I don't fall in!<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/5ba9e8e5c1524eec2b0ba3e4684b0cef-image-1467936361364.gif\" width=\"300\"/>\n",
        "artistLoopsKB_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nLook!  It's a theater.  Help me set up the chairs so we can all see the stage.<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/c4263306ebb0ad1d99fe6f200a790d0c-image-1467936424533.gif\" width=\"300\"/>\n",
        "beeDebugVideo1_markdown_instruction": "Collect all of the nectar.",
        "collector example_markdown_instruction": "Collect all the gold using the `collect` block:\n\n<xml>\n  <block type=\"collector_collect\"/></xml>",
        "collectorDebugVideo2_markdown_instruction": "*\"Sequence matters!\"*\n\nThe blocks you need are already in the workspace, but not connected.  \n\nPut these blocks in order to collect all of the gold and solve the puzzle.",
        "collectorSkinVideo1_markdown_instruction": "Move Laurel to the treasure, then use `collect` to pick it up.\n\nCollect one pile of treasure to pass this level.",
        "collectorSkinVideo2_markdown_instruction": "Move Laurel to the treasure, then use `collect` to pick it up.\n\nCollect one pile of treasure to pass this level.",
        "comment_intro_maze_2018_markdown_instruction": "*\"I'm confused. Help me remember how to solve this maze.\"*  \n\n---\n\nTo pass this puzzle, solve the maze and use the new <xml><block type=\"comment\">\n    <title name=\"TEXT\"> </title>\n  </block></xml> block to leave yourself quick reminders. They can help you remember what you were doing and why!   \n  \n\nComments are only used for **you**, they don't affect the play area.",
        "conditionals_forvideo_harvester_markdown_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "course1_artist_loops_challenge2_markdown_instruction": "Let's play a game! Draw as many X's as you can! Can you get 3 in a row?",
        "course1_artist_loops_challenge3_markdown_instruction": "**Tweet!**\n\n*\"Can you help me make two bird houses?\"*",
        "course1_artist_loops_challenge4_markdown_instruction": "*\"It's time to toss the dice! Can you help me draw these?\"*",
        "course1_maze_debugging_challenge1_markdown_instruction": "Debug this level. Remove the extra blocks, and add the missing blocks. Get the bird to the pig!",
        "course1_maze_debugging_challenge2_markdown_instruction": "Debug this level. These are the right blocks, but they're in the wrong order!",
        "course1_maze_seq_challenge2_markdown_instruction": "You can only move up to four times in each direction. Can you find a path before you run out of blocks?",
        "course1_playlab_events_challenge1_markdown_instruction": "*\"Where are my friends hiding? In this game, clicking on me will show my friend Olive the cat!\"*\n\nClicking Olive will make Robin appear! Can you write code to show the rest of the characters too?\n\nIn this puzzle, make sure to click for hints! The hints will help you do this project step-by-step!\n\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png)",
        "course1_playlab_events_challenge2_markdown_instruction": "*\"Let's have a party! Give my friends something to do when you click or tap them.\"*\n\nWhat will the animals say? What else will happen?\n\n\n\nIn this puzzle, make sure to click for hints! The hints will give you fun things to try!\n\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png)",
        "course2_artist_nestedLoops_challenge1_markdown_instruction": "Can you figure out how to make a picture like this?\n\n- Both shapes have **50 pixel sides.**\n- The *octagons* are made with **45 degree** turns.\n- The *triangles* are made with **120 degree** turns.",
        "course2_artist_nestedLoops_challenge2_markdown_instruction": "Can you figure out how to make a picture like this?\n\n- The first inner loop should make an octagon.\n- The second inner loop should make a hexagon.\n- The third inner loop should make a square.",
        "course2_artist_prog_challenge1_markdown_instruction": "Draw rooms for each of the animals. There are many different ways to solve this puzzle, so have some fun!",
        "course2_artist_prog_challenge2_markdown_instruction": "*Help me paint the yellow lines on this road!*",
        "course2_bee_conditionals_challenge1_markdown_instruction": "Collect all of the nectar or make all the honey. You can only collect nectar from flowers and make honey from honeycombs. Check any space to see if there is a flower or honeycomb.",
        "course2_bee_conditionals_challenge2_markdown_instruction": "Collect all of the nectar and make all the honey. You can collect all of the nectar in one flower by using the `while nectar > 0` loop.",
        "course2_collector_loops_challenge2_markdown_instruction": "*\"Let's hunt for treasure - using loops!\"*\n\nHelp the collector by debugging this code. Get all of the treasure!",
        "course2_collector_prog_challenge1_markdown_instruction": "Look carefully! Can you collect all **10** pieces of treasure?",
        "course2_collector_prog_challenge2_markdown_instruction": "There are **20** pieces of treasure in this cave. Collect at least half to finish the challenge!",
        "course2_harvester_loops_challenge1_markdown_instruction": "Collect all of the corn.",
        "course2_harvester_loops_challenge2_markdown_instruction": "Collect all of the lettuce. Avoid the trees and fields!",
        "course2_maze_programming_challenge1_markdown_instruction": "*\"The pig is hiding! Can you help me find a way around?\"*",
        "course2_maze_programming_challenge2_markdown_instruction": "Sometimes there is more than one way to solve the same problem. Sometimes it's faster to go backwards than it is to go forwards!",
        "course2_maze_seq_challenge2_markdown_instruction": "You can only move up to four times in each direction. Can you find a path before you run out of blocks?",
        "course3_artist_concept_challenge1_markdown_instruction": "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\" width=\"200px\"/>\n\nNow for a challenge!  \n\nHere is a design that uses only blocks that you have already been shown.  Can you figure out how to recreate it?  Feel free to use trial and error. You are not expected to get it perfect the first time.\n\nThe repeated shape is almost identical to the one from the last puzzle, except that the length used in the first loop is a little smaller. ",
        "course3_artist_functions_challenge1_markdown_instruction": "Once you define a function, you can call it over and over again - whenever and wherever you want! Try this code to see how it works, then change it to make your own impressive design!",
        "course3_artist_functions_challenge2_markdown_instruction": "Not only can you jump to some pre-set locations, like the corners of the canvas, you can also use a `jump to` command to get to absolutely any spot you like! Try this code to see how it works, then make the program your own!\n\n<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">???</title>\n    <title name=\"YPOS\">???</title>\n    </block></xml>",
        "course3_bee_debugging_challenge1_markdown_instruction": "Watch how the bee gets the nectar. Can you use the same kind of pattern to help the bee make all of the honey?",
        "course3_bee_functions_challenge1_markdown_instruction": "You are on your own for this challenge.  This could \"bee\" harder than it looks!",
        "course3_bee_functions_challenge2_markdown_instruction": "You are on your own for this challenge!",
        "course3_bee_functions_challenge3_markdown_instruction": "Create a new function to collect all the nectar and honey while there is a path ahead. Use it to complete the puzzle!",
        "course3_bee_functions_challenge4_markdown_instruction": "Use everything you have learned to complete this puzzle!",
        "course3_collector_debugging_challenge2_markdown_instruction": "Are you an expert of nested loops? Use what you have learned so far to collect all of the treasure!",
        "course3_farmer_condLoops_challenge1_markdown_instruction": "The pumpkins mark the place where you should turn. *Turn right at the pumpkins.* Otherwise keep going forward, but remember to collect all of the lettuce or corn along the way. \n\n**Each hidden crop has only one corn or lettuce.**",
        "course3_farmer_condLoops_challenge2_markdown_instruction": "*\"It's a vegetable maze!\"* \n\nTurn right at pumpkins, turn left at the lettuce. Collect everything to complete the level.",
        "course3_farmer_until_challenge2_markdown_instruction": "Use If/Else blocks to follow the curvy path. At each corner, use the `remove 1` command in a loop to clear the piles.",
        "course3_maze_debugging_challenge1_markdown_instruction": "*\"Am I just going around in circles?\"*",
        "course3_maze_debugging_challenge2_markdown_instruction": "*\"If I turn too often, I might get dizzy! Help me reach the pig with only four `turn` commands.\"*",
        "course3_maze_until_challenge1_markdown_instruction": "No hints, just challenge. Get the zombie to the sunflower.",
        "course3_playLab_challenge1_markdown_instruction": "_The **squirrels** are terrified to see that a **dinosaur** has come to town! Can the brave **knight** keep them all from panicking?_\n\nRules:\n1. *Touching the squirrels scores you points.*\n2. *Touching the dinosaur takes many points away.*\n\nHere is a different kind of game that has already been started for you! Play it to see how it works. \n\n\nSomething should happen when you get enough points or when you run out of points. Add some code to the `win game` and `lose game` functions to make the game work the way it should. \nClick the hints for ideas!",
        "course3_playlab_challenge2_markdown_instruction": "Can you figure out how this \"Fortune Teller\" app works? Try adding some of the following features to this game:\n\n* Change the \"yes\" and \"no\" answers to something more interesting.\n* Let the player ask another question after the actor says the fortune.\n* Give the witch two more things to say when she is in an `angry` or `normal` mood.\n* Give the wizard his own set of fortunes.\n* Make each actor change mood randomly.\n\nCheck the hints if you need help with these challenges!",
        "course4_artist_binary_challenge1_markdown_instruction": "You can only use each binary value (0 or 1) once each in this puzzle. Try using nested loops to complete this drawing.",
        "course4_artist_binary_challenge2_markdown_instruction": "There are 256 bits represented on this grid - that means it's easy for a small change to cause big problems. Are you persistent enough to restore this logo back to normal?\n\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)",
        "course4_artist_concept_challenge2_markdown_instruction": "Create five pinwheel designs using the code below.",
        "course4_artist_functions_challenge2_markdown_instruction": "Not only can you jump to some pre-set locations, like the corners of the canvas, you can also use a `jump to` command to get to absolutely any spot you like! Try this code to see how it works, then make the program your own!\n\n<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">???</title>\n    <title name=\"YPOS\">???</title>\n    </block></xml>",
        "course4_artist_fwp_challenge1_markdown_instruction": "Try running this program, and make changes to see what happens. Can you figure out how it works? (Or delete it and replace it with something totally different)",
        "course4_artist_variables_challenge1_markdown_instruction": "Can you create a `length` variable and use it to create this interesting pattern?",
        "course4_artist_variables_challenge2_markdown_instruction": "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\" width=\"250px\"/>\n\nYou've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?",
        "course4_bee_for_challenge1_markdown_instruction": "Use this for loop to collect all of the nectar. There are a few actions that you will want to `repeat 'counter' times`.",
        "course4_bee_fwp_challenge1_markdown_instruction": "Use one `for loop` in a function to collect all of the corn. The same `for loop` can count to different maximum values by using the `length` parameter.",
        "course4_bee_fwp_challenge2_markdown_instruction": "Let's see if you can handle this one final test! Give it everything you've got!\n\nUse one `for loop` in a function to collect all of the vegetables in the row. Make the `for loop` count to different maximum values by using the `length` parameter. Make your program as short as possible by using a second `for loop` outside the function.\n\nGood luck!",
        "course4_collector_nested_loops_challenge2_markdown_instruction": "*\"Let's hunt for treasure - using loops!\"* \n\nHelp the collector reach at least two piles of treasure using only the blocks in your toolbox. It is possible to collect all 4.",
        "course4_harvester_nested_loops_challenge1_markdown_instruction": "*\"I need some help on the farm! Help me harvest this corn using only the blocks in your toolbox.\"*",
        "course4_playlab_variables_challenge1_markdown_instruction": "Use these blocks to make the actors share a knock-knock joke. Change the punchline and setup to tell your own joke!",
        "course4_playlab_variables_challenge3_markdown_instruction": "Can you figure out how this \"Fortune Teller\" app works? Try adding some of the following features to this game:\n\n* Change the \"yes\" and \"no\" answers to something more interesting.\n* Let the player ask another question after the actor says the fortune.\n* Give the witch two more things to say when she is in an `angry` or `normal` mood.\n* Give the wizard his own set of fortunes.\n* Make each actor change mood randomly.\n\nCheck the hints if you need help with these challenges!",
        "courseA_artist_loops10_markdown_instruction": "## Time to head back to land. Help me put down stones so I don't fall in!\n\n![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)",
        "courseA_artist_loops10_2018_markdown_instruction": "## Time to head back to land. Help me put down stones so I don't fall in!\n\n![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)",
        "courseA_artist_loops11_markdown_instruction": "## Help me build steps to watch the ship sail away.\n\n![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)",
        "courseA_artist_loops11_2018_markdown_instruction": "## Help me build steps to watch the ship sail away.\n\n![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)",
        "courseA_artist_loops12_markdown_instruction": "The artist saw something funny in the distance.  Draw what you think he saw.\n\n___\n### Ideas\n\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)",
        "courseA_artist_loops12_2018_markdown_instruction": "The artist saw something funny in the distance.  Draw what you think he saw.\n\n___\n### Ideas\n\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)",
        "courseA_artist_loops2_markdown_instruction": "Help the artist draw this line two times forward.\n\n![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)",
        "courseA_artist_loops2_2018_markdown_instruction": "Help the artist draw this line two times forward.\n\n![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)",
        "courseA_artist_loops3_markdown_instruction": "Our artist is trying to draw a line five times, but can't get it right. Can you help?\n\n![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)",
        "courseA_artist_loops3_2018_markdown_instruction": "Our artist is trying to draw a line five times, but can't get it right. Can you help?\n\n![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)",
        "courseA_artist_loops4_markdown_instruction": "Now, use a <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"2-6\">5</title></block></xml> loop to draw this line five times!\n\n![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)",
        "courseA_artist_loops4_2018_markdown_instruction": "Now, use a <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"2-6\">5</title></block></xml> loop to draw this line five times!\n\n![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)",
        "courseA_artist_loops5_markdown_instruction": "## Draw a line seven steps long. This will become our horizon.\n\n![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)",
        "courseA_artist_loops5_2018_markdown_instruction": "## Draw a line seven steps long. This will become our horizon.\n\n![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)",
        "courseA_artist_loops6_markdown_instruction": "## Let's put a nice hill in the back.\n\n![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)",
        "courseA_artist_loops6_2018_markdown_instruction": "## Let's put a nice hill in the back.\n\n![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)",
        "courseA_artist_loops7_markdown_instruction": "## Use the <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loop to add waves to the water.\n\n![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)",
        "courseA_artist_loops7_2018_markdown_instruction": "## Use the <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loop to add waves to the water.\n\n![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)",
        "courseA_artist_loops7_forVideo_markdown_instruction": "## Use the <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loop to add waves to the water.\n\n![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)",
        "courseA_artist_loops8_markdown_instruction": "## We need a ladder up to the boat.\n\n![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)",
        "courseA_artist_loops8_2018_markdown_instruction": "## We need a ladder up to the boat.\n\n![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)",
        "courseA_artist_loops9_2018_markdown_instruction": "## **Challenge:** The stairs down to the dock are broken.  Help me fix them.\n\n![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)",
        "courseA_artist_loops_challenge1_markdown_instruction": "You can use a loop to draw many lines in a row.\n\nCan you draw a house? Make it look just the way you like it!  Try looking for patterns that repeat!\n\nHere are some ideas:\n\n![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)",
        "courseA_artist_loops_challenge1_2018_markdown_instruction": "You can use a loop to draw many lines in a row.\n\nCan you draw a house? Make it look just the way you like it!  Try looking for patterns that repeat!\n\nHere are some ideas:\n\n![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)",
        "courseA_artist_loops_challenge2_markdown_instruction": "**Tweet!**\n\n*\"Can you help me make two bird houses?\"*",
        "courseA_artist_loops_challenge2a_markdown_instruction": "*\"Help me get the camp site ready!\"*\n\nUse the blocks in the toolbox to draw these three tents.",
        "courseA_artist_loops_challenge2a_2018_markdown_instruction": "*\"Help me get the camp site ready!\"*\n\nUse the blocks in the toolbox to draw these three tents.",
        "courseA_bee_seq1_markdown_instruction": "Help the bee get one nectar!",
        "courseA_bee_seq10_markdown_instruction": "Try it by yourself! Get all the nectar.",
        "courseA_bee_seq11_markdown_instruction": "You've been a busy bee! Get all the nectar.",
        "courseA_bee_seq12_markdown_instruction": "Help the bee get one nectar!",
        "courseA_bee_seq13_markdown_instruction": "*Buzz buzz!*\n\nUse <xml><block type=\"maze_moveWest\"/></xml> **three** times to get the bee to the flower! Don't forget to use <xml><block type=\"maze_nectar\"/></xml> to get nectar!",
        "courseA_bee_seq14_markdown_instruction": "*Buzz buzz!*\n\nUse <xml><block type=\"maze_moveNorth\"/></xml> **three** times to get the bee to the flower! Don't forget to get nectar at the end.",
        "courseA_bee_seq2_markdown_instruction": "Add *one* block to help the bee get nectar from the flower.",
        "courseA_bee_seq3_markdown_instruction": "Can you figure out what is wrong with this code? Help the bee get to the flower!",
        "courseA_bee_seq4_markdown_instruction": "Try it yourself!",
        "courseA_bee_seq5_markdown_instruction": "You have to move in two directions to get to the flower! Help the bee pick the right direction.",
        "courseA_bee_seq6_markdown_instruction": "Now the bee needs to get nectar from two flowers!",
        "courseA_bee_seq7_markdown_instruction": "Add two blocks to finish this puzzle!",
        "courseA_bee_seq8_markdown_instruction": "This maze looks familiar... can you figure out what looks different?",
        "courseA_bee_seq9_markdown_instruction": "This bee needs nectar! Do you see a pattern?",
        "courseA_collector_loops1_markdown_instruction": "**Free Play:** This is Laurel the Adventurer! Move her around and get as much treasure as you can.\n\nDrag blocks into the workspace and try to figure out how to get treasure.  Get at least one item to pass this level.",
        "courseA_collector_loops12_markdown_instruction": "*\"Eureka!  Get as much treasure as you can!\"*  \n(You do not have to get it all.)",
        "courseA_collector_loops12_2018_markdown_instruction": "*\"Eureka!  Get as much treasure as you can!\"*  \n(You do not have to get it all.)",
        "courseA_collector_loops1_2018_markdown_instruction": "**Free Play:** This is Laurel the Adventurer! Move her around and get as much treasure as you can.\n\nDrag blocks into the workspace and try to figure out how to get treasure.  Get at least one item to pass this level.",
        "courseA_collector_loops3_markdown_instruction": "How can Laurel get all five piles of treasure using only one <xml><block type=\"maze_moveEast\"/></xml> block?",
        "courseA_collector_loops3_2018_markdown_instruction": "How can Laurel get all five piles of treasure using only one <xml><block type=\"maze_moveEast\"/></xml> block?",
        "courseA_collector_loops_challenge1_markdown_instruction": "*\"Can you help me spot some bugs? I know which way I want to go, but I'm not sure how many steps to take.\"*",
        "courseA_collector_loops_challenge1_2018_markdown_instruction": "*\"Can you help me spot some bugs? I know which way I want to go, but I'm not sure how many steps to take.\"*",
        "courseA_collector_preLoops1_markdown_instruction": "This is Laurel the Adventurer! \n\nPress \"Run\" to see her walk up to the treasure and grab it.",
        "courseA_collector_preLoops2_markdown_instruction": "Great!  Now you get to add code yourself!  \n\nSnap a ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png) block to the bottom of the program and click \"Run\"!",
        "courseA_collector_preLoops3_markdown_instruction": "To grab the treasure, snap two ![](https://images.code.org/54c206b62a02f1d7ea8f1bee52664ecb-image-1508905670742.25.37.png) blocks and one ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png) block to the bottom of the program and click \"Run\"!",
        "courseA_forVideoTest_artist_markdown_instruction": "Repeat loops work for Artist, too!",
        "courseA_harvester_forVideo_markdown_instruction": "Can you pick all the corn using only **one** move block?",
        "courseA_harvester_loops1_markdown_instruction": "Help the harvester pick all the corn!",
        "courseA_harvester_loops10_markdown_instruction": "Help the harvester pick all five ears of corn!",
        "courseA_harvester_loops11_markdown_instruction": "Try one more on your own! ",
        "courseA_harvester_loops2_markdown_instruction": "The harvester needs to pick all the corn! Do you see a pattern?",
        "courseA_harvester_loops3_markdown_instruction": "Can you pick all the corn using only **one** move block?",
        "courseA_harvester_loops4_markdown_instruction": "*\"I need help to find what's wrong!\"*\n\nCan you help the harvester find the bug in her code?",
        "courseA_harvester_loops5_markdown_instruction": "Try it yourself! Can you pick the corn at the end too?",
        "courseA_harvester_loops5a_markdown_instruction": "Look at all this corn? Can you pick it all by yourself?",
        "courseA_harvester_loops5b_markdown_instruction": "Can you change your code to make the harvester pick all the corn?",
        "courseA_harvester_loops6_markdown_instruction": "You will need **one** <xml><block type=\"maze_moveWest\"></block></xml> block and **one** <xml><block type=\"maze_moveNorth\"></block></xml> block to finish this puzzle!",
        "courseA_harvester_loops7_markdown_instruction": "Try it on your own! ",
        "courseA_harvester_loops8_markdown_instruction": "This is the same puzzle, but now you have to repeat **three** times instead of two! Use this block:\n\n<xml><block type=\"controls_repeat_simplified_dropdown\">\n    <title name=\"TIMES\" config=\"2-10\">3</title>\n  </block></xml>",
        "courseA_harvester_loops9_markdown_instruction": "Can you figure out how to pick *all* this corn?",
        "courseA_harvester_seq1_markdown_instruction": "Help the harvester pick the piece of corn!",
        "courseA_harvester_seq10_markdown_instruction": "The harvester needs to pick all the corn! Do you see a pattern?",
        "courseA_harvester_seq11_markdown_instruction": "Try it by yourself! Pick all the corn.",
        "courseA_harvester_seq12_markdown_instruction": "*Thank you for helping me!* \n\nPick all the corn.",
        "courseA_harvester_seq13_markdown_instruction": "Help the harvester pick corn!",
        "courseA_harvester_seq2_markdown_instruction": "Use <xml><block type=\"maze_moveWest\"/></xml> **three** times to get the harvester to the corn! ",
        "courseA_harvester_seq3_markdown_instruction": "Use <xml><block type=\"maze_moveNorth\"/></xml> **three** times to get the harvester to the corn! Don't forget to pick the corn at the end.",
        "courseA_harvester_seq4_markdown_instruction": "Add *one* block to help the harvester pick the corn.",
        "courseA_harvester_seq5_markdown_instruction": "Can you figure out what is wrong with this code? Help the harvester pick the corn!",
        "courseA_harvester_seq6_markdown_instruction": "Try it yourself!",
        "courseA_harvester_seq7_markdown_instruction": "You have to move in two directions to get to the corn! Help the harvester pick the right direction.",
        "courseA_harvester_seq8_markdown_instruction": "Now the harvester needs to pick corn two times!",
        "courseA_harvester_seq9_markdown_instruction": "Add two blocks to finish this puzzle!",
        "courseA_maze_ramp2_2018_markdown_instruction": "Attach both <xml><block type=\"maze_moveEast\"/></xml> blocks to <xml><block type=\"when_run\"/></xml> to finish your code, then click \"▶ Run\".",
        "courseA_maze_ramp2a_2018_markdown_instruction": "Attach both <xml><block type=\"maze_moveEast\"/></xml> blocks to <xml><block type=\"when_run\"/></xml> to finish your code, then click ![](https://images.code.org/727d03b75b490aa49ed2e23e1290fdd8-image-1522888269949.11.32.png).",
        "courseA_maze_ramp3_2018_markdown_instruction": "*\"This pig is ruffling my feathers.\"*\n\nThere is one extra block that is going to cause the bird to crash.  \nThrow it away by removing it from the other blocks and dragging it back to the toolbox.",
        "courseA_maze_ramp3a_2018_markdown_instruction": "Grab a <xml><block type=\"maze_moveNorth\"/></xml> from the toolbox and add it to the bottom of the other blocks to finish this code, then click \"▶ Run\".",
        "courseA_maze_ramp3b_2018_markdown_instruction": "There's an extra block at the end of this code!  \n\nDrag it back to the toolbox to throw it away.",
        "courseA_maze_ramp4_2018_markdown_instruction": "*\"Trace the path and lead me to the silly pig.\"* \n\nAvoid TNT or feathers will fly!",
        "courseA_maze_ramp4a_2018_markdown_instruction": "Can you figure out which block you need to add to the bottom of the other blocks to finish this code?",
        "courseA_maze_ramp5_2018_markdown_instruction": "*\"Follow this path to get me to the pig!\"*\n\nAvoid the TNT.",
        "courseA_maze_ramp5a_2018_markdown_instruction": "Try this one all by yourself!",
        "courseA_maze_seq1_markdown_instruction": "*\"Play with these blocks and try to get me to the bad pig!\"*",
        "courseA_maze_seq10_markdown_instruction": "**Challenge:** Go around the TNT to get the bird to the pig!\n\n![expandable](https://images.code.org/a656e421bc90e530a7e1ce636e507752-image-1497996976195.gif)",
        "courseA_maze_seq10_2018_markdown_instruction": "**Challenge:** Avoid the TNT to get the bird to the pig!",
        "courseA_maze_seq11_markdown_instruction": "Time for a shorter puzzle!  Move one way, then another to get the bird to the pig.\n\n![expandable](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)",
        "courseA_maze_seq11_2018_markdown_instruction": "Time for a shorter puzzle!  Move one way, then another to get the bird to the pig.\n",
        "courseA_maze_seq12_markdown_instruction": "Get that pig!\n\n![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)",
        "courseA_maze_seq12_2018_markdown_instruction": "Get that pig!",
        "courseA_maze_seq1_2018_markdown_instruction": "*\"Play with these blocks and try to get me to the bad pig!\"*",
        "courseA_maze_seq2_markdown_instruction": "*\"A bug! Fix the code to get me to the pig.\"*\n\n\n![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)",
        "courseA_maze_seq2_2018_markdown_instruction": "*\"A bug! Fix the code to get me to the pig.\"*\n\n\n![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)",
        "courseA_maze_seq3_markdown_instruction": "*\"Fix the code to get me to the pig!\"*\n\n![expandable](https://images.code.org/4adca88dc6df7378846a91d0fb0e59d1-image-1497995239069.gif)",
        "courseA_maze_seq3_2018_markdown_instruction": "*\"Fix the code to get me to the pig!\"*\n\n![expandable](https://images.code.org/4adca88dc6df7378846a91d0fb0e59d1-image-1497995239069.gif)",
        "courseA_maze_seq4_markdown_instruction": "*\"Something is not quite right.\"* \n\nREMOVE a block to get the bird to the pig!\n\n![expandable](https://images.code.org/6af44fb0ba5ac5dd5502e2538f51fb9c-image-1497996162453.gif)",
        "courseA_maze_seq4_2018_markdown_instruction": "*\"Something is not quite right.\"* \n\nREMOVE a block to get the bird to the pig!\n\n![expandable](https://images.code.org/6af44fb0ba5ac5dd5502e2538f51fb9c-image-1497996162453.gif)",
        "courseA_maze_seq5_markdown_instruction": "Try this one yourself from the beginning.\n\n![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)",
        "courseA_maze_seq5_2018_markdown_instruction": "Give this one a try.",
        "courseA_maze_seq5a_2018_markdown_instruction": "*\"Here piggy, piggy!\"*\n\nWhat can you add to the end of this code to get the bird to the pig?",
        "courseA_maze_seq6_markdown_instruction": "Move one way, then another to get the bird to the pig!\n\n![expandable](https://images.code.org/8f71c406afa60c6898937d950c670205-image-1497996506419.gif)",
        "courseA_maze_seq6_2018_markdown_instruction": "Move one way, then another to get the bird to the pig!",
        "courseA_maze_seq7_markdown_instruction": "Figure out what is missing and then add blocks to get the bird to the pig!\n\n![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)",
        "courseA_maze_seq7_2018_markdown_instruction": "Figure out what is missing and then add blocks to get the bird to the pig!\n\n![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)",
        "courseA_maze_seq8_markdown_instruction": "Solve this level and get the bird to the pig!\n\n![expandable](https://images.code.org/fb4735244f74a4e001d1fa7b5c6028f9-image-1497998330218.gif)",
        "courseA_maze_seq8_2018_markdown_instruction": "Solve this level and get the bird to the pig!",
        "courseA_maze_seq9_markdown_instruction": "**Challenge:** Debug this level by adding blocks to get the bird to the pig!\n\n![expandable](https://images.code.org/3f35068dd3cf51c420a536fa078f854d-image-1497996843105.gif)",
        "courseA_maze_seq9_2018_markdown_instruction": "**Challenge:** Debug this level by adding blocks to get the bird to the pig!\n\n![expandable](https://images.code.org/3f35068dd3cf51c420a536fa078f854d-image-1497996843105.gif)",
        "courseA_maze_seq_challenge1_markdown_instruction": "Debug this level. Remove the extra blocks, and add the missing blocks. Get the bird to the pig!",
        "courseA_maze_seq_challenge1_2018_markdown_instruction": "Debug this level. Remove the extra blocks, and add the missing blocks. Get the bird to the pig!",
        "courseA_playLab_events3_markdown_instruction": "Help Jorge the Dog get moving by connecting the <xml><block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">8</title>\n  </block></xml> block to the <xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">left</title>\n  </block></xml> event block that is already in the workspace.\n\nGet Jorge to the flag to finish this level!",
        "courseA_playLab_events3_2018_markdown_instruction": "Help Jorge the Dog get moving by connecting the <xml><block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">8</title>\n  </block></xml> block to the <xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">left</title>\n  </block></xml> event block that is already in the workspace.\n\nGet Jorge to the flag to finish this level!",
        "courseA_playLab_events4_markdown_instruction": "Now, add more blocks to get Jorge to move right when the right arrow button is clicked.",
        "courseA_playLab_events4_2018_markdown_instruction": "Now, add another event block to get Jorge to move right when the right arrow button is clicked.",
        "courseA_playLab_events5_markdown_instruction": "Add events to have Jorge move up and down when the up arrow and down arrow buttons are pressed.",
        "courseA_playLab_events5_2018_markdown_instruction": "Add events to have Jorge move up and down when the up arrow and down arrow buttons are pressed.",
        "courseA_playLab_events7_2018_markdown_instruction": "*Freeplay:* Add anything you want to this game.  Can you make the dinosaur disappear when Jorge runs into him?",
        "courseA_playlab_events_challenge1_markdown_instruction": "Clicking Olive will make Robin appear! Can you write code to show the rest of the characters too?\n\nIn this puzzle, make sure to click for hints! The hints will help you do this project step-by-step!\n\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png)",
        "courseA_playlab_events_challenge1_2018_markdown_instruction": "Clicking Olive will make Robin appear! Can you write code to show the rest of the characters too?\n\nIn this puzzle, make sure to click for hints! The hints will help you do this project step-by-step!\n\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png)",
        "courseA_playlab_events_challenge1a_markdown_instruction": "Where are my friends hiding? In this game, clicking on me will show my friend Olive the cat! Clicking Olive will make Robin appear! Can you write code to show the rest of my friends too?\n\n\nIn this puzzle, make sure to click for hints! The hints will help you do this project step-by-step!\n\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png)",
        "courseA_playlab_events_challenge2_markdown_instruction": "Give everyone something to do when you click on them. What will the animals say? What else will happen?\n\nIn this puzzle, make sure to click for hints. The hints will give you fun things to try!\n\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png)",
        "courseA_playlab_events_challenge2_2018_markdown_instruction": "Give everyone something to do when you click on them. What will the animals say? What else will happen?\n\nIn this puzzle, make sure to click for hints. The hints will give you fun things to try!\n\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png)",
        "courseA_playlab_events_challengeClone_markdown_instruction": "Where are my friends hiding? In this game, clicking on me will show my friend Olive the cat! Clicking Olive will make Robin appear! Can you write code to show the rest of my friends too?\n\n\nIn this puzzle, make sure to click for hints! The hints will help you do this project step-by-step!\n\n![](https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png)",
        "courseB_Scrat_ramp1_2018_markdown_instruction": "To get Scrat to the acorn, snap the <xml><block type=\"maze_moveEast\"/></xml> block to the bottom of the <xml><block type=\"when_run\"/></xml> block, then press \"▶ Run\"!",
        "courseB_Scrat_ramp2_2018_markdown_instruction": "Snap both <xml><block type=\"maze_moveEast\"/></xml> blocks to the bottom of the <xml><block type=\"when_run\"/></xml> block to finish your code, then click \"▶ Run\".",
        "courseB_Scrat_ramp3a_2018_markdown_instruction": "Grab a <xml><block type=\"maze_moveNorth\"/></xml> from the toolbox and add it to the bottom of the other blocks to finish this code, then click \"▶ Run\".",
        "courseB_Scrat_ramp3b_2018_markdown_instruction": "There's an extra block at the end of this code!\n\nDrag it back to the toolbox to throw it away.",
        "courseB_Scrat_ramp4a_2018_markdown_instruction": "Can you figure out which block you need to add to the bottom of the other blocks to finish this code?",
        "courseB_Scrat_ramp5a_2018_markdown_instruction": "Try this one all by yourself!",
        "courseB_artist_loops10_markdown_instruction": "Use what you have learned to draw a picture of what you think the artist saw when he got home.\n\n___\n### Ideas\n\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)",
        "courseB_artist_loops10_2018_markdown_instruction": "Use what you have learned to draw a picture of what you think the artist saw when he got home.\n\n___\n### Ideas\n\n![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\n![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\n![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\n![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)",
        "courseB_artist_loops6_markdown_instruction": "Behind the bushes there is a beautiful vine full of flowers.  Can you climb the vine and see where it goes?",
        "courseB_artist_loops6_2018_markdown_instruction": "Behind the bushes there is a beautiful vine full of flowers.  Can you climb the vine and see where it goes?",
        "courseB_artist_loops7_markdown_instruction": "**Challenge:**  It's a hidden garden! Let's walk around.",
        "courseB_artist_loops7_2018_markdown_instruction": "**Challenge:**  It's a hidden garden! Let's walk around.",
        "courseB_artist_loops_challenge1_markdown_instruction": "*\"It's time to toss the dice! Can you help me draw these?\"*",
        "courseB_artist_loops_challenge1_2018_markdown_instruction": "*\"It's time to toss the dice! Can you help me draw these?\"*",
        "courseB_artist_loops_challenge2_markdown_instruction": "Draw as many X's as you can. Can you get 3 in a row?",
        "courseB_artist_loops_challenge2_2018_markdown_instruction": "Draw as many X's as you can. Can you get 3 in a row?",
        "courseB_collector_loops1_markdown_instruction": "**Free Play:** This is Laurel the Adventurer! Move her around and get as much treasure as you can.\n\nDrag blocks into the workspace and try to figure out how to get treasure.  Get at least one item to pass this level.",
        "courseB_collector_loops1_2018_markdown_instruction": "**Free Play:** Move Laurel around and get as much treasure as you can. Get at least one item with no mistakes to pass this level.  \n\n---\n\nDrag blocks into the workspace and try to figure out how to get treasure.  ",
        "courseB_collector_loops2_markdown_instruction": "Move Laurel to the treasure, then use the<xml><block type=\"collector_collect\"/></xml>block to pick it up.\n\n\nGet all four piles to pass this level.",
        "courseB_collector_loops2_2018_markdown_instruction": "Move Laurel to the treasure, then use the<xml><block type=\"collector_collect\"/></xml>block to pick it up.\n\n\nGet all four piles to pass this level.",
        "courseB_collector_loops3_markdown_instruction": "How can Laurel get all five piles of treasure using only one <xml><block type=\"maze_moveEast\"/></xml> block?",
        "courseB_collector_loops3_2018_markdown_instruction": "How can Laurel get all five piles of treasure using only one <xml><block type=\"maze_moveEast\"/></xml> block?",
        "courseB_collector_loops3_predict1_markdown_instruction": "How can Laurel collect all five piles of gold using only one `E -->` block?",
        "courseB_collector_loops_challenge2a_markdown_instruction": "*\"Let's get the treasure!\"*\n\nHelp Laurel get at least **5** pieces of treasure to finish this puzzle.",
        "courseB_collector_loops_challenge2a_2018_markdown_instruction": "*\"Let's get the treasure!\"*\n\nHelp Laurel get at least **5** pieces of treasure to finish this puzzle.",
        "courseB_collector_prog3_markdown_instruction": "How can Laurel collect all five piles of gold using only one `E -->` block?",
        "courseB_iceage_loops1_markdown_instruction": "Help Scrat across the slippery ice to get to the acorn!",
        "courseB_iceage_loops10_markdown_instruction": "Help Scrat get all the way over to the acorn!",
        "courseB_iceage_loops11_markdown_instruction": "Help Scrat get to the acorn!",
        "courseB_iceage_loops11_forVideo_markdown_instruction": "Help Scrat get to the acorn!",
        "courseB_iceage_loops12_markdown_instruction": "Get to the acorn any way you can!",
        "courseB_iceage_loops2_markdown_instruction": "Use both <xml><block type=\"maze_moveWest\"/></xml> and <xml><block type=\"maze_moveSouth\"/></xml> blocks to get to the acorn!",
        "courseB_iceage_loops3_markdown_instruction": "Can you get to the acorn with just one <xml><block type=\"maze_moveWest\"/></xml> block? Try using a loop!",
        "courseB_iceage_loops4_markdown_instruction": "Add one more block to get Scrat all the way to the acorn!",
        "courseB_iceage_loops5_markdown_instruction": "Can you add one more loop to get to the acorn?",
        "courseB_iceage_loops6_markdown_instruction": "Can you add a loop to get to the acorn?",
        "courseB_iceage_loops7_markdown_instruction": "Scrat really wants that acorn! ",
        "courseB_iceage_loops8_markdown_instruction": "Can you fix this code? ",
        "courseB_iceage_loops9_markdown_instruction": "The acorn is so far away! Can you use loops to help Scrat get there?",
        "courseB_maze_seq3_markdown_instruction": "*\"Fix the code to get me to the pig!\"*",
        "courseB_maze_seq3_2018_markdown_instruction": "*\"Fix the code to get me to the acorn!\"*",
        "courseB_maze_seq9_markdown_instruction": "**Challenge:** Move around the TNT to get the bird to the pig.",
        "courseB_maze_seq9_2018_markdown_instruction": "**Challenge:** Move around the broken ice to get Scrat to the acorn.",
        "courseB_maze_seq9_challenge1_markdown_instruction": "*Where's that pig hiding now?*",
        "courseB_maze_seqCold_markdown_instruction": "**Challenge:** Debug this level by adding blocks to get the bird to the pig!",
        "courseB_maze_seq_challenge1_markdown_instruction": "You only have four of each move block. Can you find a path before you run out of blocks?",
        "courseB_maze_seq_challenge1_2018_markdown_instruction": "You only have four of each move block. Can you find a path before you run out of blocks?",
        "courseB_playLab_events1_markdown_instruction": "This game is called \"Play Lab\".  \n\nSee if you can figure out what each block does.",
        "courseB_playLab_events1_2018_markdown_instruction": "This game is called \"Play Lab\".  \n\nSee if you can figure out what each block does.",
        "courseB_playlab_events3_markdown_instruction": "Use an event to make Daisy the Dragon switch to a random ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png) mood when you click on her.",
        "courseB_playlab_events3_2018_markdown_instruction": "Use an event to make Daisy the Dragon switch to a random ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png) mood when you click on her.",
        "courseB_playlab_events4_markdown_instruction": "Knight time!  \n\nAdd an event so that the knight moves toward the dragon when the left arrow is clicked.",
        "courseB_playlab_events4_2018_markdown_instruction": "Knight time!  Get the dragon to finish this level.\n\nAdd an event so that the knight moves toward the dragon when the left arrow is clicked.",
        "courseB_playlab_events5_2018_markdown_instruction": "Now add an event so that the knight runs away from the dragon when you press the right arrow.  \n\nMove the knight to the right to pass this level.",
        "courseB_playlab_events6_markdown_instruction": "Help your knight get all of the flags!\n\nTo do this, you'll need to add events to help the knight move up, down, left, and right.",
        "courseB_playlab_events6_2018_markdown_instruction": "Help your knight get all of the flags!\n\nTo do this, you'll need to add events to help the knight move up, down, left, and right.",
        "courseB_playlab_events7_markdown_instruction": "Make this game fun by setting the knight to vanish when he runs into the dragon on his way to get the flags! \n\nPlay a sound when they collide to make it feel more real.\n\nVisit all of the goals, then run into the dragon to pass the level.",
        "courseB_playlab_events_challenge1_markdown_instruction": "It's time for the Great Animal Race! Make the animals move down when you press `▼`. \n\nWho will run the fastest?",
        "courseB_playlab_events_challenge1_2018_markdown_instruction": "It's time for the Great Animal Race! Make the animals move down when you press `▼`. \n\nWho will run the fastest?",
        "courseB_playlab_events_challenge2_markdown_instruction": "Let's make the animals disappear when you click on them.\nTry playing with the dog now, then help the other animals join in the fun. You can also add sounds and score points to create a game of Animal Tag!\n\n![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)",
        "courseB_playlab_events_challenge2_2018_markdown_instruction": "Let's make the animals disappear when you click on them.\nTry playing with the dog now, then help the other animals join in the fun. You can also add sounds and score points to create a game of Animal Tag!\n\n![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)",
        "courseB_starWars_prog1_markdown_instruction": "![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_\"Go get the scrap metal, BB-8!\"_\n\nWatch out for walls and crates. Scrap metal looks like this: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)",
        "courseB_starWars_prog10_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Can you get it all?\"_",
        "courseB_starWars_prog10_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Can you get it all?\"_",
        "courseB_starWars_prog11_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep going!\"_",
        "courseB_starWars_prog11_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep going!\"_",
        "courseB_starWars_prog1_2018_markdown_instruction": "![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_\"Go get the scrap metal, BB-8!\"_\n\nWatch out for walls and crates. Scrap metal looks like this: ![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)",
        "courseB_starWars_prog2_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Get all the metal.\"_",
        "courseB_starWars_prog2_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Get all the metal.\"_",
        "courseB_starWars_prog3_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep going, BB-8!\"_",
        "courseB_starWars_prog3_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep going, BB-8!\"_",
        "courseB_starWars_prog4_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Get it, BB-8!\"_",
        "courseB_starWars_prog4_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Get it, BB-8!\"_",
        "courseB_starWars_prog5_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Can you get it all?\"_",
        "courseB_starWars_prog5_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Can you get it all?\"_",
        "courseB_starWars_prog6_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"You can do it!\"_",
        "courseB_starWars_prog6_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"You can do it!\"_",
        "courseB_starWars_prog7_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Go get it!\"_",
        "courseB_starWars_prog7_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Go get it!\"_",
        "courseB_starWars_prog8_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep it up, BB-8.\"_\n\n**Challenge**: Gather all the scrap metal.",
        "courseB_starWars_prog8_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep it up, BB-8.\"_\n\n**Challenge**: Gather all the scrap metal.",
        "courseB_starWars_prog9_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"You can do it!\"_",
        "courseB_starWars_prog9_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"You can do it!\"_",
        "courseC_PlayLab_events7_markdown_instruction": "The `repeat forever` block allows you to run code over and over forever.  Use this block to move Chomp the Dino (actor 2) up and down by 400 pixels forever.\n\n![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)",
        "courseC_PlayLab_events7_2018_markdown_instruction": "The `repeat forever` block allows you to run code over and over forever.  Use this block to move Chomp the Dino (actor 2) up and down by 400 pixels forever.\n\n![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)",
        "courseC_PlayLab_events8_markdown_instruction": "Can you have Waddles (actor 1) say \"Ouch!\" and play a \"hit\" sound if he runs into Chomp? \n\nWhen you're done, play the game to make that happen.\n\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)",
        "courseC_PlayLab_events8_2018_markdown_instruction": "Can you have Waddles (actor 1) say \"Ouch!\" and play a \"hit\" sound if he runs into Chomp? \n\nWhen you're done, play the game to make that happen.\n\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)",
        "courseC_PlayLab_events_challenge1_markdown_instruction": "Use a new block to make Waddles automatically move back to the start when he runs into the Dinosaur and when he scores a point. This will make your game more challenging and fun!\n\nPlay the game and move Waddles with the arrows until you score enough points. Waddles must be moved to the `middle left` position of the screen to complete this challenge.",
        "courseC_PlayLab_events_challenge1_2018_markdown_instruction": "Use a new block to make Waddles automatically move back to the start when he runs into the Dinosaur and when he scores a point. This will make your game more challenging and fun!\n\nPlay the game and move Waddles with the arrows until you score 5 or more points. Waddles must be moved to the `middle left` position of the screen to complete this challenge.",
        "courseC_artist_loop1_markdown_instruction": "Fantastic!  \n\nLet's add some style by changing the brush using the `set pattern` block before our loop starts.",
        "courseC_artist_loop1_2018_markdown_instruction": "*\"Fantastic!\"* \n\nLet's add some style by changing the brush using the <xml><block type=\"draw_line_style_pattern\"> <title name=\"VALUE\">DEFAULT</title></block></xml> block before our loop starts.",
        "courseC_artist_loops1a_markdown_instruction": "**Free Play:** Let's build something bigger, one step at a time!  You can make anything you want, but we're going to show you how to make something like this!\n\n![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)\n\nUse the `jump to 200 over 200 down` to get the artist to the center of the play area, then use the `draw a sticker` block to make a bird appear.  \n\n---\n\nPress \"Finish\" when you are happy with what you've made.",
        "courseC_artist_loops1a_2018_markdown_instruction": "**Free Play:** Let's build something bigger, one step at a time!  \n\nUse the `jump to 200 over 200 down` to get the artist to the center of the play area, then use the `draw a sticker` block to make a bird appear.  \n\n---\n\nPress \"Finish\" when you are happy with what you've made.",
        "courseC_artist_loops2_markdown_instruction": "Now that the zombie knows his way, help him dig **25 pixel long** holes along the path to plant more flowers!\n- Each hole should be 25 pixels long\n- Each hole has 25 pixels of space before the next hole",
        "courseC_artist_loops2a_markdown_instruction": "Now, use a loop to spin your bird around 12 times with a 30 degree turn.",
        "courseC_artist_loops2a_2018_markdown_instruction": "Now, use a loop to spin your bird around 12 times with a 30 degree turn.",
        "courseC_artist_loops3a_markdown_instruction": "So much fun!  \n\nNow, add a bat sticker right after the bird to make an image like the one below.\n___\n\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)",
        "courseC_artist_loops3a_2018_markdown_instruction": "So much fun!  \n\nNow, add a bat sticker right after the bird to make an image like the one below.\n___\n\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)",
        "courseC_artist_loops4a_markdown_instruction": "Add a block to your code so that the artist jumps forward by 75 pixels between stamping the bird and the bat. In this puzzle, make sure you have `jump to 200 over 200 down` inside of your loop, so you stay in the center!\n___\n\n![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)",
        "courseC_artist_loops4a_2018_markdown_instruction": "Edit your code so that you jump forward by 75 pixels between stamping the bird and the bat. In this puzzle, make sure you have `jump to 200 over 200 down` inside of your loop, so you stay in the center!\n___\n\n![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)",
        "courseC_artist_loops5_markdown_instruction": "Great!  Now it's time to make a fence inside to keep the animals out.   \nMake any kind of fence that you want!\n\n",
        "courseC_artist_loops5a_markdown_instruction": "What happens when you replace one or both of the stickers with a different creature?\n___\n![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)",
        "courseC_artist_loops5a_2018_markdown_instruction": "What happens when you replace one or both of the stickers with a different creature?\n___\n![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)",
        "courseC_artist_loops6_markdown_instruction": "What should the zombie put inside of the garden?  \n\nDraw anything you'd like inside of the fence.  Would you like some flowers or a few bugs? \n*(See hints for more suggestions.)*\n\n\n",
        "courseC_artist_loops6a_markdown_instruction": "Add a third sticker anywhere in the loop that you want! What does it look like now?\n- Change the pattern on your brush for more variety!\n\n___\n\n![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)",
        "courseC_artist_loops6a_2018_markdown_instruction": "Add a third sticker anywhere in the loop that you want! What does it look like now?\n- Change the pattern on your brush for more variety!\n\n___\n\n![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)",
        "courseC_artist_loops8a_markdown_instruction": "Now make something on your own.  What happens when you make two separate circles of different stickers?\n___\nNeed an idea? Try making a design like this one.\n\n![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)",
        "courseC_artist_loops8a_2018_markdown_instruction": "Now make something on your own.  What happens when you make two separate circles of different stickers?\n___\nNeed an idea? Try making a design like this one.\n\n![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)",
        "courseC_artist_loopsPre1a_markdown_instruction": "Now, put this code into  a `repeat` block and loop it **6** times.\n- Notice that we have added a 60 degree turn at the end of the looped code to get a full rotation.",
        "courseC_artist_loopsPre1a_2018_markdown_instruction": "Now, put this code into  a `repeat` block and loop it **6** times.\n- Notice that we have added a 60 degree turn at the end of the looped code to get a full rotation.",
        "courseC_artist_loopsPrePre1a_markdown_instruction": "Use the <xml><block type=\"jump_to_xy\" id=\"callMe\"><title name=\"XPOS\">200</title><title name=\"YPOS\">200</title></block></xml> block to get the artist to the center of the play area.  \nThen draw a line 50 pixels long with the <xml><block type=\"draw_move_by_constant\"><title name=\"DIR\">moveForward</title><title name=\"VALUE\">50</title></block></xml> block.",
        "courseC_artist_loopsPrePre1a_2018_markdown_instruction": "### The artist is in the wrong spot!  \n\nUse the <xml><block type=\"jump_to_xy\" id=\"callMe\"><title name=\"XPOS\">200</title><title name=\"YPOS\">200</title></block></xml> block to get the artist to the center of the play area.  \nThen draw a line 50 pixels long with the <xml><block type=\"draw_move_by_constant\"><title name=\"DIR\">moveForward</title><title name=\"VALUE\">50</title></block></xml> block.",
        "courseC_artist_loopsTemplateA_markdown_instruction": "Use the `jump to 200 over 200 down` to get the artist to the center of the play area, then use the `draw a sticker` block to make a bird appear. ",
        "courseC_artist_loopsTemplateA_2018_markdown_instruction": "Use the `jump to 200 over 200 down` to get the artist to the center of the play area, then use the `draw a sticker` block to make a bird appear. ",
        "courseC_artist_prog1_markdown_instruction": "*\"Hi, I'm an artist. You can write code to make me draw almost anything.\"*\n\nPlay with the blocks in the toolbox to see what they do!",
        "courseC_artist_prog1_2018_markdown_instruction": "*\"Hi, I'm an artist. You can write code to make me draw almost anything.\"*\n\nPlay with the blocks in the toolbox to see what they do!",
        "courseC_artist_prog2_markdown_instruction": "*\"Let's make a cage for my pet monster!\"*\n\nDrag blocks onto the screen to have the artist draw over the grey lines in the picture.  \n(Each line is 100 pixels long)",
        "courseC_artist_prog2_2018_markdown_instruction": "*\"Let's make a cage for my pet monster!\"*\n\nDrag blocks onto the screen to have the artist draw over the grey lines in the picture.  \n(Each line is 100 pixels long)",
        "courseC_artist_prog3_markdown_instruction": "*\"This spaceship needs a window!\"*\n\nEach side of the inner square is 100 pixels and all of the angles are 90 degrees.",
        "courseC_artist_prog3_2018_markdown_instruction": "*\"This spaceship needs a window!\"*\n\nEach side of the inner square is 100 pixels and all of the angles are 90 degrees.",
        "courseC_artist_prog4_markdown_instruction": "*\"Oh no!  Starla's pet alien just flew away! Let's help the spacewoman!\"*\n\nFinish Starla's rocket so she can chase her pet.  \n(Each side of the triangle is 100 pixels long and has 120 degree outer angles.)",
        "courseC_artist_prog4_2018_markdown_instruction": "*\"Oh no!  Starla's pet alien just flew away! Let's help the spacewoman!\"*\n\nFinish Starla's rocket so she can chase her pet.  \n(Each side of the triangle is 100 pixels long and has 120 degree outer angles.)",
        "courseC_artist_prog5_markdown_instruction": "*\"Maybe we should make a tag for each of our pets in case they get lost!\"*\n\nFinish this tag by drawing a rectangle around the outside.  \n(The long sides are 200 pixels each and the short sides are each 100 pixels)",
        "courseC_artist_prog5_2018_markdown_instruction": "*\"Maybe we should make a tag for each of our pets in case they get lost!\"*\n\nFinish this tag by drawing a rectangle around the outside.  \n(The long sides are 200 pixels each and the short sides are each 100 pixels)",
        "courseC_artist_prog6_markdown_instruction": "*\"Now a tag for Belle!\"*\n\nDraw this diamond with 200 pixel sides.",
        "courseC_artist_prog6_2018_markdown_instruction": "*\"Now a tag for Belle!\"*\n\nDraw this diamond with 200 pixel sides.",
        "courseC_artist_prog7_markdown_instruction": "**Challenge:** This tag is a special one!  \n\nCan you figure out how to draw the outline?  \n(The long side is 150 pixels and each of the short sides are 75 pixels.)",
        "courseC_artist_prog7_2018_markdown_instruction": "**Challenge:** This tag is a special one!  \n\nCan you figure out how to draw the outline?  \n(The long side is 150 pixels and each of the short sides are 75 pixels.)",
        "courseC_artist_prog8_markdown_instruction": "One more tag.  This is a triangle for Pi.  \n(Each side is 150 pixels)",
        "courseC_artist_prog8_2018_markdown_instruction": "One more tag.  This is a triangle for Pi.  \n(Each side is 150 pixels)",
        "courseC_artist_prog_challenge1-doghouse_markdown_instruction": "Let's build a dog house for Jorge!",
        "courseC_artist_prog_challenge1_markdown_instruction": "Draw rooms for each of the animals. There are many different ways to solve this puzzle, so have some fun! Each square has a side length of 100 pixels.",
        "courseC_artist_prog_challenge1_2018_markdown_instruction": "Draw rooms for each of the animals. There are many different ways to solve this puzzle, so have some fun! Each square has a side length of 100 pixels.",
        "courseC_artist_prog_challenge2_markdown_instruction": "*Help me paint the yellow lines on this road!*",
        "courseC_artist_prog_challenge2a_markdown_instruction": "*\"Help me paint the yellow lines on this road!\"*\n\nThe three line segments have lengths of 150, 100, and 200 pixels!",
        "courseC_artist_prog_challenge2a_2018_markdown_instruction": "*\"Help me paint the yellow lines on this road!\"*\n\nThe three line segments have lengths of 150, 100, and 200 pixels!",
        "courseC_collector_loops_challenge2_markdown_instruction": "*\"Let's hunt for treasure!\"*\n\nHelp the collector get at least **5** pieces of treasure.",
        "courseC_collector_loops_challenge2_2018_markdown_instruction": "*\"Let's hunt for treasure!\"*\n\nHelp the collector get at least **5** pieces of treasure.",
        "courseC_collector_prog1_markdown_instruction": "**Free Play:** This is Laurel the Adventurer! Move her around and get as much treasure as you can. Use the `collect` block to pick up the treasure!\n\nDrag blocks into the workspace and try to figure out how to get treasure.  Get at least one item to pass this level.",
        "courseC_collector_prog1_2018_markdown_instruction": "**Free Play:** This is Laurel the Adventurer! Move her around and get as much treasure as you can. Use the `collect` block to pick up the treasure!\n\nDrag blocks into the workspace and try to figure out how to get treasure.  Get at least one item to pass this level.",
        "courseC_collector_prog2_markdown_instruction": "Move Laurel to the treasure, then use <xml><block type=\"collector_collect\"/></xml> to pick it up.",
        "courseC_collector_prog2_2018_markdown_instruction": "Move Laurel to the treasure, then use <xml><block type=\"collector_collect\"/></xml> to pick it up.",
        "courseC_collector_prog3_markdown_instruction": "*\"Sequence matters!\"* \n\nThe blocks you need are already in the workspace, but not connected.  \nOrder these blocks to collect the treasure and solve the puzzle.",
        "courseC_collector_prog3_2018_markdown_instruction": "*\"Sequence matters!\"* \n\nThe blocks you need are already in the workspace, but not connected.  \nOrder these blocks to collect the treasure and solve the puzzle.",
        "courseC_collector_prog4_markdown_instruction": "*\"Sequence matters!\"*\n\nThe blocks you need are already in the workspace, but not connected.  \n\nPut these blocks in order to collect all of the treasure and solve the puzzle.",
        "courseC_collector_prog4_2018_markdown_instruction": "*\"Sequence matters!\"*\n\nThe blocks you need are already in the workspace, but not connected.  \n\nPut these blocks in order to collect all of the treasure and solve the puzzle.",
        "courseC_collector_prog5_markdown_instruction": "*\"Help me collect each bit of treasure!\"*\n\nThese blocks are in the wrong order. Can you fix them?",
        "courseC_collector_prog5_2018_markdown_instruction": "*\"Help me collect each bit of treasure!\"*\n\nThese blocks are in the wrong order. Can you fix them?",
        "courseC_collector_prog6_markdown_instruction": "*\"Help me collect all of the treasure!\"*\n\nThese blocks are in the wrong order. Reorder them to collect all of the treasure.",
        "courseC_collector_prog6_2018_markdown_instruction": "*\"Help me collect all of the treasure!\"*\n\nThese blocks are in the wrong order. Reorder them to collect all of the treasure.",
        "courseC_collector_prog7_markdown_instruction": "**Challenge:** *\"What is going on here?\"*\n\nEven if we put these in the right order, there will still be some missing.  \nUse blocks from the toolbox to collect all of the treasure.",
        "courseC_collector_prog7_2018_markdown_instruction": "**Challenge:** *\"What is going on here?\"*\n\nEven if we put these in the right order, there will still be some missing.  \nUse blocks from the toolbox to collect all of the treasure.",
        "courseC_collector_prog8_markdown_instruction": "*\"Keep up the good work! Help me collect all of the treasure.\"*",
        "courseC_collector_prog8_2018_markdown_instruction": "*\"Keep up the good work! Help me collect all of the treasure.\"*",
        "courseC_collector_prog9_markdown_instruction": "*\"Let's get all of the treasure!\"*",
        "courseC_collector_prog9_2018_markdown_instruction": "*\"Let's get all of the treasure!\"*",
        "courseC_collector_progA_markdown_instruction": "Help Laurel collect all of the treasure.",
        "courseC_collector_progB_markdown_instruction": "You're almost done!  \n\nCollect as many coins as you can to finish the stage!",
        "courseC_collector_prog_challenge2_markdown_instruction": "There are 20 pieces of treasure in this cave. Collect at least **10** to finish the challenge!",
        "courseC_collector_prog_challenge2_2018_markdown_instruction": "There are 20 pieces of treasure in this cave. Collect at least **10** to finish the challenge!",
        "courseC_flappy_events1_markdown_instruction": "Attach the `flap a normal amount` block to the `when click` event, then press \"Run\".   \n\n---\n\nClick or tap on the play space to move Flappy to the target.",
        "courseC_flappy_events10_markdown_instruction": "Create your own Flappy game! \n\nYou can change the visuals and the rules...even the gravity! \nWhen you're done, click \"Finish\" to share with friends on their phones.",
        "courseC_flappy_events10_2018_markdown_instruction": "Create your own Flappy game! \n\nYou can change the visuals and the rules...even the gravity! \nWhen you're done, click \"Finish\" to share with friends on their phones.",
        "courseC_flappy_events1_2018_markdown_instruction": "Attach the `flap a normal amount` block to the `when click` event, then press \"Run\".   \n\n---\n\nClick or tap on the play space to move Flappy to the target.",
        "courseC_flappy_events2_markdown_instruction": "The `when run` event allows you to run code as soon as your game starts.  \n\nTry adding a block that sets the level speed when the \"Run\" button is pressed. \n\n---\n\nPlay the game and flap to the target to continue.",
        "courseC_flappy_events2_2018_markdown_instruction": "The `when run` event allows you to run code as soon as your game starts.  \n\nTry adding a block that sets the level speed when the \"Run\" button is pressed. \n\n---\n\nPlay the game and flap to the target to continue.",
        "courseC_flappy_events3_markdown_instruction": "Now we've added the ground. \n\nAttach the `end game` block to the `when hit the ground` event. \n\n---\n\nPlay the game and crash the bird into the ground to continue.",
        "courseC_flappy_events3_2018_markdown_instruction": "Now we've added the ground. \n\nAttach the `end game` block to the `when hit the ground` event. \n\n---\n\nPlay the game and crash the bird into the ground to continue.",
        "courseC_flappy_events4_markdown_instruction": "Flappy will fly right through obstacles unless you write code to make him crash. \n\nAttach a block to the `when hit an obstacle` event so that the game ends when Flappy crashes into the first set of pipes.",
        "courseC_flappy_events4_2018_markdown_instruction": "Flappy will fly right through obstacles unless you write code to make him crash. \n\nAttach a block to the `when hit an obstacle` event so that the game ends when Flappy crashes into the first set of pipes.",
        "courseC_flappy_events5_markdown_instruction": "We've added a scoreboard to count points when Flappy passes obstacles.  \n\nAdd a block to the `when pass an obstacle` event that scores a point, then press \"Run\" to fly Flappy through the first set of pipes.",
        "courseC_flappy_events5_2018_markdown_instruction": "We've added a scoreboard to count points when Flappy passes obstacles.  \n\nAdd a block to the `when pass an obstacle` event that scores a point, then press \"Run\" to fly Flappy through the first set of pipes.",
        "courseC_flappy_events6_markdown_instruction": "Click the down arrow inside of the `flap a normal amount` block to pick a different flapping power.  \n\nSee if you can still score a point after making Flappy flap either a smaller or larger amount each time you click.",
        "courseC_flappy_events6_2018_markdown_instruction": "Click the down arrow inside of the `flap a normal amount` block to pick a different flapping power.  \n\nSee if you can still score a point after making Flappy flap either a smaller or larger amount each time you click.",
        "courseC_flappy_events7_markdown_instruction": "Next, try changing the scene by attaching a block to the `when run` event.",
        "courseC_flappy_events7_2018_markdown_instruction": "Next, try changing the scene by attaching a block to the `when run` event.",
        "courseC_flappy_events8_markdown_instruction": "You can set the background under any event, not just when the game starts. \n\nTry setting a **random** scene when other events happen...for example, when passing an obstacle.",
        "courseC_flappy_events8_2018_markdown_instruction": "You can set the background under any event, not just when the game starts. \n\nTry setting a **random** scene when other events happen...for example, when passing an obstacle.",
        "courseC_flappy_events9_markdown_instruction": "To mix things up, instead of ending the game when Flappy hits an obstacle, try setting the score back to 0.",
        "courseC_flappy_events9_2018_markdown_instruction": "To mix things up, instead of ending the game when Flappy hits an obstacle, try setting the score back to 0.",
        "courseC_harvester_loops1_markdown_instruction": "Loops can be used to repeat more than moves.  \n\nUse loops to collect all four of the pumpkins.",
        "courseC_harvester_loops10_markdown_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops10_2018_markdown_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops11_markdown_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops11_2018_markdown_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops1_2018_markdown_instruction": "Loops can be used to repeat more than moves.  \n\nUse loops to collect all four of the pumpkins.",
        "courseC_harvester_loops2_markdown_instruction": "Can you combine two different loops to move toward the pumpkins, then collect them all?",
        "courseC_harvester_loops2_2018_markdown_instruction": "Can you combine two different loops to move toward the pumpkins, then collect them all?",
        "courseC_harvester_loops3_markdown_instruction": "Collect all of the pumpkins.",
        "courseC_harvester_loops3_2018_markdown_instruction": "Collect all of the pumpkins.",
        "courseC_harvester_loops4_markdown_instruction": "Now there is corn growing, too!\n\nCollect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops4_2018_markdown_instruction": "Now there is corn growing, too!\n\nCollect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops5_markdown_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops5_2018_markdown_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops6_markdown_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops6_2018_markdown_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops7_markdown_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops7_2018_markdown_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops8_markdown_instruction": "**Challenge:** Collect all of the corn and all of the pumpkins.\n\nYou can complete this challenge any way you want, but it will either take a lot of work or a lot of thinking!",
        "courseC_harvester_loops8_2018_markdown_instruction": "**Challenge:** Collect all of the corn and all of the pumpkins.\n\nYou can complete this challenge any way you want, but it will either take a lot of work or a lot of thinking!",
        "courseC_harvester_loops9_markdown_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops9_2018_markdown_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_harvester_loops_challenge1_markdown_instruction": "Collect all of the corn.",
        "courseC_harvester_loops_challenge2_markdown_instruction": "Collect all of the lettuce. Avoid the trees and fields!",
        "courseC_harvester_loops_challenge2_2018_markdown_instruction": "Collect all of the lettuce. Avoid the trees and fields!",
        "courseC_harvester_loops_forVid_markdown_instruction": "Collect all of the corn and all of the pumpkins.",
        "courseC_maze_debugging1_markdown_instruction": "This code isn't quite right!  \n\nFix the code to help Scrat get to the acorn.",
        "courseC_maze_debugging1_2018_markdown_instruction": "This code isn't quite right!  \n\nFix the code to help Scrat get to the acorn.",
        "courseC_maze_debugging3_markdown_instruction": "Something is not quite right. \n\nRemove blocks to get Scrat to the acorn!",
        "courseC_maze_debugging3_2018_markdown_instruction": "Something is not quite right. \n\nRemove blocks to get Scrat to the acorn!",
        "courseC_maze_debugging_challenge2_markdown_instruction": "If Scrat turns too often, he might get dizzy! Help him reach the acorn with only four `turn` commands.",
        "courseC_maze_debugging_challenge2_2018_markdown_instruction": "If Scrat turns too often, he might get dizzy! Help him reach the acorn with only four `turn` commands.",
        "courseC_maze_loops2_markdown_instruction": "With the `repeat` block, you can loop code over and over.\n\nCan you get the bird to the pig by creating a loop that uses only one `move forward` block inside of a `repeat`?",
        "courseC_maze_loops2_predict1_markdown_instruction": "Suddenly, a magical block appears!  \nWith the `repeat` block, you can loop code over and over.\n\nCan you get the bird to the pig by creating a loop that uses only one `move forward` block inside of a `repeat`?",
        "courseC_maze_loops3_markdown_instruction": "*\"Get me to the pig!\"*\n\nSolve this puzzle by creating a loop!",
        "courseC_maze_loops4_markdown_instruction": "In this puzzle, two `repeat` loops will help you get the bird to the pig with the fewest number of blocks!",
        "courseC_maze_loops5_markdown_instruction": "*\"Get me to the pig as quickly as possible!\"*",
        "courseC_maze_loops6_markdown_instruction": "*\"This pig is ruffling my feathers!\"*\n\nLoops even work with more than one block inside!  Can you loop this sequence?",
        "courseC_maze_loops7_markdown_instruction": "*\"Get me to the pig!\"*\n\nUse what you learned in other puzzles!",
        "courseC_maze_loops8_markdown_instruction": "**Challenge:** Combine ideas from the last few puzzles to complete this level.",
        "courseC_maze_loops_challenge2_markdown_instruction": "Let's hunt for treasure - using loops! Help the collector by debugging this code. Get all of the treasure!",
        "courseC_maze_programming1_markdown_instruction": "For this puzzle, drag all of the blocks together and click \"Run\" to watch it go!",
        "courseC_maze_programming1_2018_markdown_instruction": "For this puzzle, drag all of the blocks together and click \"Run\" to watch it go!",
        "courseC_maze_programming2_markdown_instruction": "Drag an extra <xml><block type=\"maze_moveForward\"/></xml> block out of the toolbox to finish your code.",
        "courseC_maze_programming2_2018_markdown_instruction": "Drag an extra <xml><block type=\"maze_moveForward\"/></xml> block out of the toolbox to finish your code.",
        "courseC_maze_programming3_markdown_instruction": "*\"This pig is ruffling my feathers.\"*\n\nThere is one extra block that is going to cause the bird to crash.  \nThrow it away by unhooking it from the grey blocks and dragging it back to the toolbox.",
        "courseC_maze_programming3_2018_markdown_instruction": "*\"This pig is ruffling my feathers.\"*\n\nThere is one extra block that is going to cause the bird to crash.  \nThrow it away by unhooking it from the grey blocks and dragging it back to the toolbox.",
        "courseC_maze_programming4_markdown_instruction": "*\"Trace the path and lead me to the silly pig.\"* \n\nAvoid TNT or feathers will fly!",
        "courseC_maze_programming4_2018_markdown_instruction": "*\"Trace the path and lead me to the silly pig.\"* \n\nAvoid TNT or feathers will fly!",
        "courseC_maze_programming5_markdown_instruction": "*\"Follow this path to get me to the pig!\"*\n\nAvoid the TNT.",
        "courseC_maze_programming5_2018_markdown_instruction": "*\"Follow this path to get me to the pig!\"*\n\nAvoid the TNT.",
        "courseC_maze_programming6_markdown_instruction": "*\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"*\n\nGet the bird to the pig and avoid the TNT.",
        "courseC_maze_programming6_2018_markdown_instruction": "*\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"*\n\nGet the bird to the pig and avoid the TNT.",
        "courseC_maze_programming7_markdown_instruction": "*\"It's time to get angry!\"*\n\n**Challenge:** This code has a lot of bugs. You'll need to remove some blocks and add others.",
        "courseC_maze_programming7_2018_markdown_instruction": "*\"It's time to get angry!\"*\n\n**Challenge:** This code has a lot of bugs. You'll need to remove some blocks and add others.",
        "courseC_maze_programming8_markdown_instruction": "*\"Keep calm and help me find the bad pig.\"*",
        "courseC_maze_programming8_2018_markdown_instruction": "*\"Keep calm and help me find the bad pig.\"*",
        "courseC_maze_programming8_predict1_markdown_instruction": "*\"Keep calm and help me find the bad pig.\"*",
        "courseC_maze_programming8_predict1_2018_markdown_instruction": "*\"Keep calm and help me find the bad pig.\"*",
        "courseC_maze_programming9_markdown_instruction": "*\"Now, help me sneak up on the pig any way you want to!\"*",
        "courseC_maze_programming9_2018_markdown_instruction": "*\"Now, help me sneak up on the pig any way you want to!\"*",
        "courseC_maze_programming_challenge1_markdown_instruction": "The bird needs your help! The pig is hiding, and the goal is to find it. ",
        "courseC_maze_programming_challenge1_2018_markdown_instruction": "The bird needs your help! The pig is hiding, and the goal is to find it. ",
        "courseC_maze_programming_challenge2_markdown_instruction": "Sometimes there is more than one way to solve the same problem. Sometimes it's faster to go backwards than it is to go forwards!",
        "courseC_maze_programming_challenge2_2018_markdown_instruction": "Sometimes there is more than one way to solve the same problem. Sometimes it's faster to go backwards than it is to go forwards!",
        "courseC_puppy_loops8_markdown_instruction": "**Challenge:** Combine ideas from the last few puzzles to complete this level.",
        "courseC_puppy_loops8courseC_maze_loops8_markdown_instruction": "**Challenge:** Combine ideas from the last few puzzles to complete this level.",
        "courseC_starWars_loops1_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Go get the scrap metal, BB-8!\"_ \n\nUse five of the same blocks to get the scrap metal. Scrap metal glows like this: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)",
        "courseC_starWars_loops10_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n _\"Go BB-8!\"_\n\nYou are doing great! Keep it up!",
        "courseC_starWars_loops10_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\n _\"Go BB-8!\"_\n\nYou are doing great! Keep it up!",
        "courseC_starWars_loops11_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep going, BB-8!\"_\n\nYou are almost there! This time, choose any path you like!",
        "courseC_starWars_loops11_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep going, BB-8!\"_\n\nYou are almost there! This time, choose any path you like!",
        "courseC_starWars_loops1_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Go get the scrap metal, BB-8!\"_ \n\nUse five of the same blocks to get the scrap metal. Scrap metal glows like this: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)",
        "courseC_starWars_loops2_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Go BB-8!\"_\n\nTo get all the scrap metal, try creating a loop that uses only one block inside of a `repeat` block.",
        "courseC_starWars_loops2_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Go BB-8!\"_\n\nTo get all the scrap metal, try creating a loop that uses only one block inside of a `repeat` block.",
        "courseC_starWars_loops4_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep it up, BB-8.\"_\n\nIn this puzzle, two `repeat` loops will help you get BB-8 to all of the scrap metal with the fewest number of blocks!",
        "courseC_starWars_loops4_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep it up, BB-8.\"_\n\nIn this puzzle, two `repeat` loops will help you get BB-8 to all of the scrap metal with the fewest number of blocks!",
        "courseC_starWars_loops5_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Go BB-8!\"_",
        "courseC_starWars_loops5_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Go BB-8!\"_",
        "courseC_starWars_loops6_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Can you get it all?\"_\n\nLoops even work with more than one block inside!  Can you loop this sequence?",
        "courseC_starWars_loops6_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Can you get it all?\"_\n\nLoops even work with more than one block inside!  Can you loop this sequence?",
        "courseC_starWars_loops7_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"You can do it!\"_\n\nCan you try to get all the scrap metal using just one loop? Try programming it all out then finding the repeating code to put in a loop.",
        "courseC_starWars_loops7_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"You can do it!\"_\n\nCan you try to get all the scrap metal using just one loop? Try programming it all out then finding the repeating code to put in a loop.",
        "courseC_starWars_loops8_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep it up, BB-8.\"_\n\n**Challenge:** Combine ideas from the last few puzzles to complete this level.",
        "courseC_starWars_loops8_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep it up, BB-8.\"_\n\n**Challenge:** Combine ideas from the last few puzzles to complete this level.",
        "courseC_starWars_loops9_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep going!\"_\n\nUse what you have learned to pick up all of the scrap metal!",
        "courseC_starWars_loops9_2018_markdown_instruction": "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _\"Keep going!\"_\n\nUse what you have learned to pick up all of the scrap metal!",
        "courseD_Frozen_nested1_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\n\nDraw a small shape, between **20 and 50** pixels wide.  It can be any shape that you like.  \n<hr/>\n\nYou can try making a polygon, like one of these:  \n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)  \n\n  \n  \nOr even an abstract shape, like one of these:  \n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)\n",
        "courseD_Frozen_nested2_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Now, let’s draw more than one.”_\n\nNow take your shape and draw two or three in a row by jumping forward some number of pixels.  \n\n- If you jump forward by **less** than the width of your shape, they might overlap\n- If you jump forward by **more** than the width of your shape, you will get a gap\n\n<hr/>\n\nYour row might end up straight like with these:\n\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\n<br/>  <br/>\n\n\nOr, your shapes might move around like one of these: \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)",
        "courseD_Frozen_nested4_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"What happens if we draw snowflakes on top of each other?\"_\n\nTry layering two different shapes of snowflakes on top of one another with a little turn in between - see what you get! ",
        "courseD_Frozen_nested5_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Get creative with shapes and angles to see what kind of new snowflakes we can draw!\"_\n",
        "courseD_Frozen_nested7_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Now let’s turn and go back the way we came.\"_\n\nTurn around 180 degrees and draw the exact same stair pattern again!  \n\n- The rest of this stage will be easier if you put all of your code inside of a loop to make Elsa  draw, turn around 180 degrees, draw, then turn around 180 degrees again.\n\n<hr/>\n\nHere is an example of stairs that use a 76 degree turn:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)",
        "courseD_Frozen_nested9_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _\"Now, what should we do? Let’s explore and create our own winter wonderland!\"_\n\nTry playing around with what you've created. Draw whatever you like!\n- What happens if you use two different angles in your stair step pattern?\n- What happens if you make your diamond pattern longer or shorter?\n- What does it look like to draw two snowflakes on top of one another?\n",
        "courseD_artist_1_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\n\nDraw a hexagon with 50 pixel long sides.  \n\n---\n\nTo draw a hexagon, you will need to: \n- move forward by **50** pixels\n- turn right by **60** degrees\n- repeat a total of **6** times\n\n",
        "courseD_artist_2_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Good job!”_\n\nAfter your hexagon, turn right by **60** degrees, then draw a line that is **150** pixels long.   \n\nFinish by putting Elsa back to the center of the play area, using the <xml><block type=\"jump_to\"><title name=\"VALUE\">middle center</title></block></xml> block.\n\n\n",
        "courseD_artist_3_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Let’s make a snowflake.”_\n\nTo turn this code into a snowflake, nest all of the code inside of another `repeat` loop and run it a total of **6** times.  You should only need to add one block.\n\n",
        "courseD_artist_4_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Let's make our snowflakes special!\"_\n\n**Inspiration:** Where do you need to add code if you want to draw a tiny square at the tip of each long line?\n\n---\nYou can try whatever you want in this puzzle, but here is an idea:\n\nTry making a tiny square at the end of each line\n- Each side should be 15 pixels long\n- You should turn by 90 degrees\n- Repeat those actions a total of 4 times",
        "courseD_artist_7_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Now let’s turn and go back the way we came.\"_\n\nTurn around 180 degrees and draw the exact same stair pattern again!  \n\n- The rest of this stage will be easier if you put all of your code inside of a loop to make Elsa  draw, turn around 180 degrees, draw, then turn around 180 degrees again.\n\n<hr/>\n\nHere is an example of stairs that use a 76 degree turn:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)",
        "courseD_artist_9_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _\"Now, what should we do? Let’s explore and create our own winter wonderland!\"_\n\nTry playing around with what you've created. Draw whatever you like!\n- What happens if you use two different angles in your stair step pattern?\n- What happens if you make your diamond pattern longer or shorter?\n- What does it look like to draw two snowflakes on top of one another?\n",
        "courseD_artist_binary1_markdown_instruction": "We've provided you with a grid of \"pixels\" that you can walk through and make designs by turning on only certain squares.\n\nUse the blocks below to have the artist draw \"01010101\" in binary in the first row.",
        "courseD_artist_binary1_2018_markdown_instruction": "We've provided you with a grid of \"pixels\" that you can walk through and make designs by turning on only certain squares.\n\nUse the blocks below to have the artist draw \"01010101\" in binary in the first row.",
        "courseD_artist_binary2_markdown_instruction": "Here's a function that takes a binary string of 1's and 0's and instructs the artist to follow them from left to right, top to bottom.  \n___\nThe artist will fill-in the squares when it sees a 1 and ignore the square when it sees a 0. \n___\n**Run this code to see how the artist uses binary to draw this pattern.**",
        "courseD_artist_binary2_2018_markdown_instruction": "Here's a function that takes a binary string of 1's and 0's and instructs the artist to follow them from left to right, top to bottom.  \n___\nThe artist will fill-in the squares when it sees a 1 and ignore the square when it sees a 0. \n___\n**Run this code to see how the artist uses binary to draw this pattern.**",
        "courseD_artist_binary_challenge1_markdown_instruction": "You can only use each binary value (0 or 1) once each in this puzzle. Try using nested loops to complete this drawing.",
        "courseD_artist_binary_challenge1_2018_markdown_instruction": "You can only use each binary value (0 or 1) once each in this puzzle. Try using nested loops to complete this drawing.",
        "courseD_artist_binary_challenge2_markdown_instruction": "There are 256 bits represented on this grid - that means it's easy for a small change to cause big problems. Are you persistent enough to restore this logo back to normal?\n\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)",
        "courseD_artist_binary_challenge2_2018_markdown_instruction": "There are 256 bits represented on this grid - that means it's easy for a small change to cause big problems. Are you persistent enough to restore this logo back to normal?\n\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)",
        "courseD_artist_binary_challenge3_markdown_instruction": "There are 256 bits represented on this grid - that means it's easy for a small change to cause big problems. Are you persistent enough to restore this logo back to normal?\n\n![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)",
        "courseD_artist_functions10_markdown_instruction": "This time, use lines of 8 hexagons with 25 pixel sides.\n\n- To make each hexagon, repeat the 6 times, turning 60 degrees.\n- To draw a diamond, you will need to alternate between turning 60 degrees and 120 degrees.",
        "courseD_artist_functions2_markdown_instruction": "Functions let you define new blocks! \n\nWe've moved the blocks needed for drawing a square into a function called `draw a square`. This time, use the `draw a square` function to create the glasses. \n<hr/>\n\nThe squares are 75 pixels apart.",
        "courseD_artist_functions3_markdown_instruction": "We will come back to functions shortly. Let's take a break to practice making this star. \n\nYou can make this drawing by adding a repeat block.",
        "courseD_artist_functions4_markdown_instruction": "Now that you can draw a star, try drawing four stars!\n\n- Each branch of the star is 25 pixels long\n- Turn 45 degrees between branches\n- Jump 100 pixels between each star",
        "courseD_artist_functions5_markdown_instruction": "When is drawing three stars harder than drawing four? When you also have to jump over the moon!\n\nDraw only those three stars to finish this puzzle.",
        "courseD_artist_functions6_markdown_instruction": "You are doing great! \n\nMake this window by drawing a square, then turning 90 degrees before drawing another, and so on.",
        "courseD_artist_functions8_markdown_instruction": "**Challenge:** Create as many functions as you think you need to make this drawing of 50 pixel squares.",
        "courseD_artist_functions9_markdown_instruction": "Create this image using only the blocks provided.\n\n- To draw a diamond, you will need to alternate between turning 60 degrees and 120 degrees.",
        "courseD_artist_nestedLoops1a_markdown_instruction": "Now loop the triangle 6 times. \n\nAfter each triangle, you'll need to turn 60 degrees before drawing the next. ",
        "courseD_artist_nestedLoops1a_2018_markdown_instruction": "Now loop the triangle 6 times. \n\nAfter each triangle, you'll need to turn 60 degrees before drawing the next. ",
        "courseD_artist_nestedLoops2_markdown_instruction": "This time, complete the puzzle with the fewest number of blocks possible.\n\nAfter each triangle, you'll need to turn 60 degrees before drawing the next.\nSee how much easier this is with **nested loops**?",
        "courseD_artist_nestedLoops2_2018_markdown_instruction": "This time, complete the puzzle with the fewest number of blocks possible.\n\nAfter each triangle, you'll need to turn 60 degrees before drawing the next.\nSee how much easier this is with **nested loops**?",
        "courseD_artist_nestedLoops4_markdown_instruction": "Great!  Do the same thing with these circles. \n\n- Each circle is made by moving 1 pixel before turning 1 degree, 360 times.\n- Each circle begins just 50 pixels from where the last one ended",
        "courseD_artist_nestedLoops4_2018_markdown_instruction": "Great!  Do the same thing with these circles. \n\n- Each circle is made by moving 1 pixel before turning 1 degree, 360 times.\n- Each circle begins just 50 pixels from where the last one ended",
        "courseD_artist_nestedLoops5_markdown_instruction": "What happens if you also turn 90 degrees between circles?\n\n(To get this image, you still need to jump 50 pixels between circles)",
        "courseD_artist_nestedLoops5_2018_markdown_instruction": "What happens if you also turn 90 degrees between circles?\n\n(To get this image, you still need to jump 50 pixels between circles)",
        "courseD_artist_nestedLoops7_markdown_instruction": "Use what you've learned to make this drawing.\n\n- The squares each have **100 pixel sides** and **90 degree angles**\n- You will need to turn **60 degrees between each square**. Why? Because there are 6 squares, and 360 degrees (a full turn around) divided by 6 is 60 degrees.\n- Make sure you jump **50 pixels to get to the next square**",
        "courseD_artist_nestedLoops7_2018_markdown_instruction": "Use what you've learned to make this drawing.\n\n- The squares each have **100 pixel sides** and **90 degree angles**\n- You will need to turn **60 degrees between each square**. Why? Because there are 6 squares, and 360 degrees (a full turn around) divided by 6 is 60 degrees.\n- Make sure you jump **50 pixels to get to the next square**",
        "courseD_artist_nestedLoops8_markdown_instruction": "Using what you have learned in the last couple of puzzles, build this image from the beginning.\n\n- Each hexagon has **50 pixel sides** and **60 degree turns**",
        "courseD_artist_nestedLoops8_2018_markdown_instruction": "Using what you have learned in the last couple of puzzles, build this image from the beginning.\n\n- Each hexagon has **50 pixel sides** and **60 degree turns**",
        "courseD_artist_nestedLoops9_markdown_instruction": "**Challenge:** Can you figure out how to make a picture like this?\n\n- Both shapes have **50 pixel sides**\n- Between each pair of shapes, you will need to jump forward the length of a side, and turn 45 degrees.",
        "courseD_artist_nestedLoops9_2018_markdown_instruction": "**Challenge:** Can you figure out how to make a picture like this?\n\n- Both shapes have **50 pixel sides**\n- Between each pair of shapes, you will need to jump forward the length of a side, and turn 45 degrees.",
        "courseD_artist_nestedLoops9_predict1_markdown_instruction": "**Challenge:** Can you figure out how to make a picture like this?\n\n- Both shapes have 50 pixel sides",
        "courseD_artist_nestedLoops9_predict1_2018_markdown_instruction": "**Challenge:** Can you figure out how to make a picture like this?\n\n- Both shapes have 50 pixel sides",
        "courseD_artist_nestedLoopsFP_markdown_instruction": "Now it's your turn.  Take the skills you have learned and make something that you love!\n\nNeed an idea?  Try to make one of these:\n\n![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)\n![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)\n![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)",
        "courseD_artist_nestedLoopsFP_2018_markdown_instruction": "Now it's your turn.  Take the skills you have learned and make something that you love!\n\nNeed an idea?  Try to make one of these:\n\n![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)\n![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)\n![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)",
        "courseD_artist_nestedLoops_challenge1_markdown_instruction": "Can you figure out how to make a picture like this?\n\n- Both shapes have **50 pixel sides.**\n- The *octagons* are made with **45 degree** turns.\n- The *triangles* are made with **120 degree** turns.",
        "courseD_artist_nestedLoops_challenge1_2018_markdown_instruction": "Can you figure out how to make a picture like this?\n\n- Both shapes have **50 pixel sides.**\n- The *octagons* are made with **45 degree** turns.\n- The *triangles* are made with **120 degree** turns.",
        "courseD_artist_nestedLoops_challenge2_markdown_instruction": "This code is just a little bit off!  Can you fix it to make the correct drawing in the workspace?\n\n- The first inner loop should make an octagon.\n- The second inner loop should make a hexagon.\n- The third inner loop should make a square.",
        "courseD_artist_nestedLoops_challenge2_2018_markdown_instruction": "This code is just a little bit off!  Can you fix it to make the correct drawing in the workspace?\n\n- The first inner loop should make an octagon.\n- The second inner loop should make a hexagon.\n- The third inner loop should make a square.",
        "courseD_artist_project1_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\n\nDraw a small shape, between **20 and 50** pixels wide.  It can be any shape that you like.  \n<hr/>\n\nYou can try making a polygon, like one of these:  \n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)  \n\n  \n  \nOr even an abstract shape, like one of these:  \n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)\n",
        "courseD_artist_project1_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Hi, I’m Elsa of Arendelle, help me draw a shape.”_\n\nDraw a small shape, between **20 and 50** pixels wide.  It can be any shape that you like.  \n<hr/>\n\nYou can try making a polygon, like one of these:  \n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)  \n\n  \n  \nOr even an abstract shape, like one of these:  \n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)",
        "courseD_artist_project2_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Now, let’s draw more than one.”_\n\nNow take your shape and draw two or three in a row by jumping forward some number of pixels.  \n\n- If you jump forward by **less** than the width of your shape, they might overlap\n- If you jump forward by **more** than the width of your shape, you will get a gap\n\n<hr/>\n\nYour row might end up straight like with these:\n\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\n<br/>  <br/>\n\n\nOr, your shapes might move around like one of these: \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)",
        "courseD_artist_project2_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Now, let’s draw more than one.”_\n\nNow take your shape and draw two or three in a row by jumping forward some number of pixels.  \n\n- If you jump forward by **less** than the width of your shape, they might overlap\n- If you jump forward by **more** than the width of your shape, you will get a gap\n\n<hr/>\n\nYour row might end up straight like with these:\n\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\n<br/>  <br/>\n\n\nOr, your shapes might move around like one of these: \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)",
        "courseD_artist_project2a_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Now let’s turn and go back the way we came.\"_\n\nTurn around 180 degrees and draw the exact same stair pattern again!  \n\n- The rest of this stage will be easier if you put all of your code inside of a loop to make Elsa  draw, turn around 180 degrees, draw, then turn around 180 degrees again.\n\n<hr/>\n\nHere is an example of stairs that use a 76 degree turn:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)",
        "courseD_artist_project2a_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Now let’s turn and go back the way we came.\"_\n\nTurn around 180 degrees and draw the exact same stair pattern again!  \n\n- The rest of this stage will be easier if you put all of your code inside of a loop to make Elsa  draw, turn around 180 degrees, draw, then turn around 180 degrees again.\n\n<hr/>\n\nHere is an example of stairs that use a 76 degree turn:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)",
        "courseD_artist_project4_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"What happens if we draw snowflakes on top of each other?\"_\n\nTry layering two different shapes of snowflakes on top of one another with a little turn in between - see what you get! ",
        "courseD_artist_project4_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"What happens if we draw snowflakes on top of each other?\"_\n\nTry layering two different shapes of snowflakes on top of one another with a little turn in between - see what you get! ",
        "courseD_artist_project4a_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _\"Now, what should we do? Let’s explore and create our own winter wonderland!\"_\n\nTry playing around with what you've created. Draw whatever you like!\n- What happens if you use two different angles in your stair step pattern?\n- What happens if you make your diamond pattern longer or shorter?\n- What does it look like to draw two snowflakes on top of one another?\n",
        "courseD_artist_project4a_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _\"Now, what should we do? Let’s explore and create our own winter wonderland!\"_\n\nTry playing around with what you've created. Draw whatever you like!\n- What happens if you use two different angles in your stair step pattern?\n- What happens if you make your diamond pattern longer or shorter?\n- What does it look like to draw two snowflakes on top of one another?",
        "courseD_artist_project5_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Get creative with shapes and angles to see what kind of new snowflakes we can draw!\"_\n",
        "courseD_artist_project5_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Get creative with shapes and angles to see what kind of new snowflakes we can draw!\"_",
        "courseD_artist_project_embedded_markdown_instruction": "Here's what you will soon be making!",
        "courseD_artist_ramp11_markdown_instruction": "Great!  Now let's make a square using Artist!  The blocks are a little different, but the idea is the same.\n___\nEach side of the square has a length of 200 pixels, and you will need to turn 90 degrees to make each angle.",
        "courseD_artist_ramp12_markdown_instruction": "Use what you've learned to draw this triangle inside of a square.\n___\n##### The sides are each 200 pixels long. You will need to turn 90 degrees to make the square and 120 degrees to make the triangle.",
        "courseD_bee_conditionals1_markdown_instruction": "*\"This cloud is blocking my view!\"*\n\nCheck to see if there's a flower under the cloud. If there's a flower, get nectar.",
        "courseD_bee_conditionals10_markdown_instruction": "Conditionals can be helpful, even when you know exactly what is in each spot!\n\nCollect all of the nectar and make all of the honey.",
        "courseD_bee_conditionals10_2018_markdown_instruction": "Conditionals can be helpful, even when you know exactly what is in each spot!\n\nCollect all of the nectar and make all of the honey.",
        "courseD_bee_conditionals1_predict1_markdown_instruction": "*\"This cloud is blocking my view!\"*\n\nCheck to see if there's a flower under the cloud. If there's a flower, get nectar.",
        "courseD_bee_conditionals1_predict1_2018_markdown_instruction": "*\"This cloud is blocking my view!\"*\n\nCheck to see if there's a flower under the cloud. If there's a flower, get nectar.",
        "courseD_bee_conditionals2_markdown_instruction": "More clouds! \n\nCheck underneath every cloud to see if it is hiding a flower before you get nectar. If there is a flower underneath the cloud, the bee will need to get nectar *once*.  \n\nRemember: Not all clouds hide the same thing!",
        "courseD_bee_conditionals2_2018_markdown_instruction": "More clouds! \n\nCheck underneath every cloud to see if it is hiding a flower before you get nectar. If there is a flower underneath the cloud, the bee will need to get nectar *once*.  \n\nRemember: Not all clouds hide the same thing!",
        "courseD_bee_conditionals2_test_markdown_instruction": "More clouds! \n\nCheck underneath every cloud to see if it is hiding a flower before you get nectar. If there is a flower underneath the cloud, the bee will need to get nectar *once*.  \n\nRemember: Not all clouds hide the same thing!",
        "courseD_bee_conditionals3_markdown_instruction": "You can only collect nectar from flowers, but you can check any space to see if there is a flower. If there is a flower under any of these clouds, the bee will need to collect nectar *once*.",
        "courseD_bee_conditionals3_2018_markdown_instruction": "You can only collect nectar from flowers, but you can check any space to see if there is a flower. If there is a flower under any of these clouds, the bee will need to collect nectar *once*.",
        "courseD_bee_conditionals4_markdown_instruction": "In this puzzle, we know that every flower has exactly one nectar, but the flowers aren't spaced evenly.\n\nGet all of the nectar using as few blocks as possible.",
        "courseD_bee_conditionals4_2018_markdown_instruction": "In this puzzle, we know that every flower has exactly one nectar, but the flowers aren't spaced evenly.\n\nGet all of the nectar using as few blocks as possible.",
        "courseD_bee_conditionals6_markdown_instruction": "*\"Now I just want to make honey.\"*\n\nSome of these clouds might have honeycombs under them.  Be sure to check if a honeycomb is hiding behind each cloud! If there is a honeycomb, the bee will only need to make honey *once*.",
        "courseD_bee_conditionals6_2018_markdown_instruction": "*\"Now I just want to make honey.\"*\n\nSome of these clouds might have honeycombs under them.  Be sure to check if a honeycomb is hiding behind each cloud! If there is a honeycomb, the bee will only need to make honey *once*.",
        "courseD_bee_conditionals7_markdown_instruction": "Sometimes a cloud covers a flower, sometimes it covers a honeycomb! \n\nUse the `if/else` block to collect nectar at flowers and make honey at honeycomb. Remember: if there is a flower, the bee only needs to get nectar *once*. If there is a honeycomb, the bee only needs to make honey *once*.",
        "courseD_bee_conditionals7_2018_markdown_instruction": "Sometimes a cloud covers a flower, sometimes it covers a honeycomb! \n\nUse the `if/else` block to collect nectar at flowers and make honey at honeycomb. Remember: if there is a flower, the bee only needs to get nectar *once*. If there is a honeycomb, the bee only needs to make honey *once*.",
        "courseD_bee_conditionals7_predict2_markdown_instruction": "Sometimes a cloud covers a flower, sometimes it covers a honeycomb! \n\nUse the `if/else` block to collect nectar at flowers and make honey at honeycomb. Remember: there will only ever **bee** *one* honeycomb or *one* flower behind each cloud.",
        "courseD_bee_conditionals7_predict2_2018_markdown_instruction": "Sometimes a cloud covers a flower, sometimes it covers a honeycomb! \n\nUse the `if/else` block to collect nectar at flowers and make honey at honeycomb. Remember: there will only ever be *one* honeycomb or *one* flower behind each cloud.",
        "courseD_bee_conditionals8_markdown_instruction": "**Challenge:** There will be either a flower or a honeycomb under each of those clouds!\n\nCollect nectar once if there is a flower.\nOtherwise, make honey once (because there is a honeycomb).",
        "courseD_bee_conditionals8_2018_markdown_instruction": "**Challenge:** There will be either a flower or a honeycomb under each of those clouds!\n\nCollect nectar once if there is a flower.\nOtherwise, make honey once (because there is a honeycomb).",
        "courseD_bee_conditionals9_markdown_instruction": "Collect all of the nectar or make all the honey. You can only collect nectar from flowers and make honey from honeycombs. Check any space to see if there is a flower or honeycomb. There will only ever be one flower or one honeycomb behind each cloud.",
        "courseD_bee_conditionals9_2018_markdown_instruction": "Collect all of the nectar or make all the honey. You can only collect nectar from flowers and make honey from honeycombs. Check any space to see if there is a flower or honeycomb. There will only ever be one flower or one honeycomb behind each cloud.",
        "courseD_bee_conditionals_challenge1_markdown_instruction": "Collect all of the nectar and make all of the honey. You can only collect nectar from flowers and make honey from honeycombs. Check every space to see if there is a flower or honeycomb.",
        "courseD_bee_conditionals_challenge1_2018_markdown_instruction": "Collect all of the nectar and make all of the honey. You can only collect nectar from flowers and make honey from honeycombs. Check every space to see if there is a flower or honeycomb.",
        "courseD_bee_conditionals_challenge2_markdown_instruction": "Collect all of the nectar and make all the honey. You can collect all of the nectar in one flower by using the `while nectar > 0` loop.",
        "courseD_bee_conditionals_challenge2_2018_markdown_instruction": "Collect all of the nectar and make all the honey. You can collect all of the nectar in one flower by using the `while nectar > 0` loop.",
        "courseD_bee_conditionals_challenge3_markdown_instruction": "Collect all of the nectar and make all the honey. You can collect all of the nectar in one flower by using the `while nectar > 0` loop.",
        "courseD_bee_debugging1_markdown_instruction": "*\"These blocks are really bugging me!\"*\n\nFix the error(s) to collect all of the nectar.",
        "courseD_bee_debugging2_markdown_instruction": "*\"Ooh, this one stings!\"*\n\nFix the error(s) to collect all of the nectar.",
        "courseD_bee_debugging3_markdown_instruction": "*\"This puzzle is a bit sticky.\"*\n\nFix the error(s) to collect all of the nectar and make all of the honey.",
        "courseD_bee_debugging4_markdown_instruction": "*\"This could be sweet!\"*\n\nFix the error(s) to make all of the honey.",
        "courseD_bee_debugging5_markdown_instruction": "**Challenge:** *\"This puzzle is making me loopy!\"*\n\nAll of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_bee_debugging6_markdown_instruction": "**Challenge:**  Fix the errors to collect all of the nectar and make all of the honey.",
        "courseD_bee_debugging7_markdown_instruction": "*\"Such a sticky situation!\"*\n\nHelp the bee find his mistakes.",
        "courseD_bee_debugging8_markdown_instruction": "*\"So many lovely flowers!\"*\n\nHelp the bee fix the code to get all the nectar.",
        "courseD_bee_debugging9_markdown_instruction": "*\"It's nectar-topia!\"*\n\nHelp the bee fix the code to get all the nectar.",
        "courseD_bee_debugging_challenge1_markdown_instruction": "Watch how the bees gets the nectar. Can you use the same kind of pattern to help the bee make all of the honey?",
        "courseD_bee_debugging_challenge1_2018_markdown_instruction": "Watch how the bees gets the nectar. Can you use the same kind of pattern to help the bee make all of the honey?",
        "courseD_bee_debugging_challenge1a_markdown_instruction": "*\"Buzz buzz! I know how to get nectar, now help me make honey!\"*\n\nWatch how the bee gets the nectar. Can you use the same kind of pattern to help the bee make all of the honey?",
        "courseD_bee_debugging_challenge2_markdown_instruction": "Watch how the bees gets the nectar. Can you use the same kind of pattern to help the bee make all of honey?",
        "courseD_bee_nestedLoops1_markdown_instruction": "\"_This is going to **BEE** great!_\"\n\nHelp the bee collect all of the nectar.",
        "courseD_bee_nestedLoops1_2018_markdown_instruction": "\"_This is going to **BEE** great!_\"\n\nHelp the bee collect all of the nectar.",
        "courseD_bee_nestedLoops2_markdown_instruction": "This time, help the bee collect all of the nectar using as few blocks as possible.",
        "courseD_bee_nestedLoops2_2018_markdown_instruction": "This time, help the bee collect all of the nectar using as few blocks as possible.",
        "courseD_bee_nestedLoops2_predict1_markdown_instruction": "This time, help the bee collect all of the nectar using as few blocks as possible.",
        "courseD_bee_nestedLoops2_predict1_2018_markdown_instruction": "This time, help the bee collect all of the nectar using as few blocks as possible.",
        "courseD_bee_nestedLoops3_markdown_instruction": "*\"Can you BEE-lieve all of these flowers?\"*\n\nCollect all of the nectar from each flower. ",
        "courseD_bee_nestedLoops5_markdown_instruction": "Collect all of the nectar from each flower and make honey at the honeycomb. ",
        "courseD_bee_nestedLoops6_markdown_instruction": "Make all of the nectar.",
        "courseD_bee_nestedLoops6_2018_markdown_instruction": "*\"Must eat sunflower!\"*\n\nGet the zombie to the sunflower using only the blocks available.",
        "courseD_bee_nestedLoops7_markdown_instruction": "**Challenge:** Figure out how to get all of the nectar using only the blocks available.",
        "courseD_bee_nestedLoops7_2018_markdown_instruction": "**Challenge:** Figure out how to get all of the nectar using only the blocks available.",
        "courseD_bee_nestedLoops8_markdown_instruction": "Collect all of the nectar from each flower and make honey at the honeycomb. ",
        "courseD_bee_nestedLoops8_2018_markdown_instruction": "Collect all of the nectar from each flower and make honey at the honeycomb. ",
        "courseD_bee_nestedLoops9_markdown_instruction": "Make all of the honey.",
        "courseD_bee_nestedLoops9_2018_markdown_instruction": "Make all of the honey.",
        "courseD_bee_nestedLoops9_predict2_markdown_instruction": "Make all of the honey.",
        "courseD_bee_nestedLoops9_predict2_2018_markdown_instruction": "Make all of the honey.",
        "courseD_bee_nested_loops_challenge1_markdown_instruction": "Let's hunt for treasure - using loops! Help the collector reach at least two piles of treasure using only the blocks in your toolbox.",
        "courseD_bee_nested_loops_challenge2_markdown_instruction": "Let's hunt for treasure - using loops! Help the collector reach at least two piles of treasure using only the blocks in your toolbox.",
        "courseD_bounce_events1_markdown_instruction": "Get to the flag! Attach a block to the \"when left arrow\" block and press \"Run\" to move the player to the flag.",
        "courseD_bounce_events10s_markdown_instruction": "There is now a hoop at the top.  \n\nAttach the `score point` block to the `when ball in goal` event and the `score opponent point` block to the `when ball misses hand` event to make a game. \n\n---\n\nSee how many points you can score before your opponent scores twice.",
        "courseD_bounce_events10s_2018_markdown_instruction": "There is now a hoop at the top.  \n\nAttach the `score point` block to the `when ball in goal` event and the `score opponent point` block to the `when ball misses hand` event to make a game. \n\n---\n\nSee how many points you can score before your opponent scores twice.",
        "courseD_bounce_events11s_markdown_instruction": "Now, you are in control of the ball!  Attach the `throw new ball` block in all of the places where the game needs a new ball.\n\n---\n\nSee how many points you can score before your opponent scores twice!",
        "courseD_bounce_events11s_2018_markdown_instruction": "Now, you are in control of the ball!  Attach the `throw new ball` block in all of the places where the game needs a new ball.\n\n---\n\nSee how many points you can score before your opponent scores twice!",
        "courseD_bounce_events1s_markdown_instruction": "Get the ball to the hoop!   \nAttach a block to the `when left arrow` event and press \"Run\" to move the player to the net.",
        "courseD_bounce_events1s_2018_markdown_instruction": "Get to the hoop!     \n\nAttach a block to the `when left arrow` event and press \"Run\" to move the player to the net.",
        "courseD_bounce_events2s_markdown_instruction": "Now, attach a block to the `when right event` so that the hand can get to both baskets.",
        "courseD_bounce_events2s_2018_markdown_instruction": "Now, attach a block to the `when right event` so that the hand can get to both baskets.",
        "courseD_bounce_events5s_markdown_instruction": "We're going to send a basketball flying down towards the hand.  Attach a block to the `when ball hits hand` event to ensure the ball reaches the basket.",
        "courseD_bounce_events5s_2018_markdown_instruction": "We're going to send a basketball flying down towards the hand.  Attach a block to the `when ball hits hand` event to ensure the ball reaches the basket.",
        "courseD_bounce_events6s_markdown_instruction": "Now the basket is at the top.  \n\nAttach code to make the ball bounce when it hits the wall so you can solve this puzzle.",
        "courseD_bounce_events6s_2018_markdown_instruction": "Now the basket is at the top.  \n\nAttach code to make the ball bounce when it hits the wall so you can solve this puzzle.",
        "courseD_bounce_events7s_markdown_instruction": "Attach sound blocks to make the net swish when you hit the basket and have the whistle blow when the ball misses your hand.  \n\n---\n\nBounce the ball until it hits the finish target.",
        "courseD_bounce_events7s_2018_markdown_instruction": "Attach sound blocks to make the net swish when you hit the basket and have the whistle blow when the ball misses your hand.  \n\n---\n\nBounce the ball until it hits the finish target.",
        "courseD_collector_debugging1_markdown_instruction": "*\"Oh no! I see a problem.\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging10_predict1_markdown_instruction": "*\"It's treasure island!\"*\n\nHelp Laurel fix the code to get all the treasure.",
        "courseD_collector_debugging10_predict1_2018_markdown_instruction": "*\"It's treasure island!\"*\n\nHelp Laurel fix the code to get all the treasure.",
        "courseD_collector_debugging1_2018_markdown_instruction": "*\"Oh no! I see a problem.\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging1a_markdown_instruction": "*\"Oh no! I see a problem.\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging1a_2018_markdown_instruction": "*\"Oh no! I see a problem.\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging2_markdown_instruction": "*\"You can do this!\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging2_2018_markdown_instruction": "*\"You can do this!\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging2a_markdown_instruction": "*\"You can do this!\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging2a_2018_markdown_instruction": "*\"You can do this!\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging3_markdown_instruction": "*\"Be persistent and you will figure this out.\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging3_2018_markdown_instruction": "*\"Be persistent and you will figure this out.\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging3a_markdown_instruction": "*\"Be persistent and you will figure this out.\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging3a_2018_markdown_instruction": "*\"Be persistent and you will figure this out.\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging4_markdown_instruction": "*\"Don't get frustrated. You can do it!\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging4_2018_markdown_instruction": "*\"Don't get frustrated. You can do it!\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging4a_markdown_instruction": "*\"Don't get frustrated. You can do it!\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging4a_2018_markdown_instruction": "*\"Don't get frustrated. You can do it!\"*\n\nFix the error(s) to collect all of the treasure.",
        "courseD_collector_debugging5_markdown_instruction": "*\"This puzzle is making me loopy!\"*\n\nAll of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_collector_debugging5_2018_markdown_instruction": "*\"This puzzle is making me loopy!\"*\n\nAll of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_collector_debugging5a_markdown_instruction": "*\"This puzzle is making me loopy!\"*\n\nAll of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_collector_debugging5a_2018_markdown_instruction": "*\"This puzzle is making me loopy!\"*\n\nAll of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_collector_debugging6_markdown_instruction": "**Challenge:**  All of the blocks that you need are already here...Now use your debugging skills to fix the errors and collect all of the treasure.",
        "courseD_collector_debugging6_2018_markdown_instruction": "**Challenge:**  All of the blocks that you need are already here...Now use your debugging skills to fix the errors and collect all of the treasure.",
        "courseD_collector_debugging6a_markdown_instruction": "Challenge: Use the code in the work area to get at least **6** pieces of treasure!",
        "courseD_collector_debugging6a_2018_markdown_instruction": "Challenge: Use the code in the work area to get at least **6** pieces of treasure!",
        "courseD_collector_debugging7_markdown_instruction": "**Challenge**: All of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_collector_debugging8_markdown_instruction": "*\"So much treasure!\"*\n\nHelp Laurel fix the code to get all the treasure.",
        "courseD_collector_debugging8_2018_markdown_instruction": "*\"So much treasure!\"*\n\nHelp Laurel fix the code to get all the treasure.",
        "courseD_collector_debugging8a_markdown_instruction": "*\"So much treasure!\"*\n\nHelp Laurel fix the code to get all the treasure.",
        "courseD_collector_debugging8a_2018_markdown_instruction": "*\"So much treasure!\"*\n\nHelp Laurel fix the code to get all the treasure.",
        "courseD_collector_debugging9_markdown_instruction": "*\"It's treasure island!\"*\n\nHelp Laurel fix the code to get all the treasure.",
        "courseD_collector_debugging9_2018_markdown_instruction": "*\"It's treasure island!\"*\n\nHelp Laurel fix the code to get all the treasure.",
        "courseD_collector_debugging9a_markdown_instruction": "*\"It's treasure island!\"*\n\nHelp Laurel fix the code to get all the treasure.",
        "courseD_collector_debugging9a_2018_markdown_instruction": "*\"It's treasure island!\"*\n\nHelp Laurel fix the code to get all the treasure.",
        "courseD_collector_nested_loops_challenge2_markdown_instruction": "*\"Let's hunt for treasure - using loops!\"* \n\nHelp the collector reach at least two piles of treasure using only the blocks in your toolbox. It is possible to collect all 4.",
        "courseD_collector_nested_loops_challenge2_2018_markdown_instruction": "*\"Let's hunt for treasure - using loops!\"* \n\nHelp the collector reach at least two piles of treasure using only the blocks in your toolbox. It is possible to collect all 4.",
        "courseD_collector_nested_loops_challenge2a_markdown_instruction": "*\"Let's hunt for treasure - using loops!\"* \n\nHelp Laurel collect at least two piles of treasure using only the blocks in your toolbox. It is possible to collect all 4.",
        "courseD_collector_ramp10_markdown_instruction": "Walk Laurel around this square collecting the treasure as you find it.",
        "courseD_collector_ramp8_markdown_instruction": "This puzzle is a lot like the last one, but now it stars Laurel the Adventurer!\n___\n\nTake the same path as before, but this time, use a repeat loop to collect treasure when you get to it.\n",
        "courseD_collector_ramp9_markdown_instruction": "Now there's more treasure.  Can you help Laurel collect it all?",
        "courseD_collector_until_challenge1_markdown_instruction": "Watch how the bees gets the nectar. Can you use the same kind of pattern to help the bee make all of honey?",
        "courseD_debugging_1_markdown_instruction": "*\"These blocks are really bugging me!\"*\n\nFix the error(s) to collect all of the nectar.",
        "courseD_debugging_2_markdown_instruction": "*\"Ooh, this one stings!\"*\n\nFix the error(s) to collect all of the nectar.",
        "courseD_debugging_3_markdown_instruction": "*\"These blocks are really bugging me.\"*\n\nFix the error(s) to collect all of the nectar and make all of the honey.",
        "courseD_debugging_4_markdown_instruction": "*\"This could be sweet!\"*\n\nFix the error(s) to make all of the honey.",
        "courseD_debugging_5_markdown_instruction": "**Challenge:** *\"This puzzle is making me loopy!\"*\n\nAll of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "courseD_debugging_6_markdown_instruction": "**Challenge:**  Fix the errors to collect all of the nectar and make all of the honey.",
        "courseD_farmer_condLoops1_markdown_instruction": "*\"Corn you help me harvest today?\"*\n\nHelp the harvester check her row of corn to see if anything is ready to pick.  Use conditionals to look at each sprout.  Every stalk will have either **0 or 1** pieces of corn ready to harvest.",
        "courseD_farmer_condLoops1_2018_markdown_instruction": "*\"Corn you help me harvest today?\"*\n\nHelp the harvester check her row of corn to see if anything is ready to pick.  Use conditionals to look at each sprout.  Every stalk will have either **0 or 1** pieces of corn ready to harvest.",
        "courseD_farmer_condLoops2_markdown_instruction": "*\"Lettuce collect both crops from this row!\"*\n\nThis garden is all mixed up, it has both **corn and lettuce**!  \n\nHelp the harvester pick the items that are ready for harvesting.  Each plant will have either **one** corn or **one** lettuce.",
        "courseD_farmer_condLoops2_2018_markdown_instruction": "*\"Lettuce collect both crops from this row!\"*\n\nThis garden is all mixed up, it has both **corn and lettuce**!  \n\nHelp the harvester pick the items that are ready for harvesting.  Each plant will have either **one** corn or **one** lettuce.",
        "courseD_farmer_condLoops3_markdown_instruction": "*\"Corn, lettuce, AND pumpkins! Help me harvest them all.\"*\n\nEach plant will have either one piece of corn, one head of lettuce, or one pumpkin.",
        "courseD_farmer_condLoops3_2018_markdown_instruction": "*\"Corn, lettuce, AND pumpkins! Help me harvest them all.\"*\n\nEach plant will have either one piece of corn, one head of lettuce, or one pumpkin.",
        "courseD_farmer_condLoops4_markdown_instruction": "*\"Gosh! Now the lettuce is growing in clusters!\"*  \n\nThe harvester wants to pick everything from her lettuce garden. Each plant will now have more than one head of lettuce on it, so the farmer will need to keep picking while there is still lettuce growing.  \n\n##### (Remember: This garden only has lettuce!)",
        "courseD_farmer_condLoops4_2018_markdown_instruction": "*\"Gosh! Now the lettuce is growing in clusters!\"*  \n\nThe harvester wants to pick everything from her lettuce garden. Each plant will now have more than one head of lettuce on it, so the harvester will need to keep picking while there is still lettuce growing.  \n\n##### (Remember: This garden only has lettuce!)",
        "courseD_farmer_condLoops4a_markdown_instruction": "*\"Gosh! Now the crops are growing in clusters!\"*  \n\nHelp the farmer pick all of the lettuce in each cluster before moving on to the next bunch. Keep it up until you get to the pumpkin!",
        "courseD_farmer_condLoops5_markdown_instruction": "*\"What a bountiful crop!\"*\n\nThis field has clusters of corn and lettuce growing together -- with one pumpkin at the end.  Can you harvest everything?",
        "courseD_farmer_condLoops5_2018_markdown_instruction": "*\"What a bountiful crop!\"*\n\nThis field has clusters of corn and lettuce growing together -- with one pumpkin at the end.  Can you harvest everything?",
        "courseD_farmer_condLoops6_markdown_instruction": "*\"Let's take this one step further!\"*\n\nCan you figure out how to pick the pumpkin?  Make sure to collect all of the corn along the way!",
        "courseD_farmer_condLoops6_2018_markdown_instruction": "*\"Let's take this one step further!\"*\n\nCan you figure out how to pick the pumpkin?  Make sure to collect all of the corn along the way!",
        "courseD_farmer_condLoops7_markdown_instruction": "**Challenge:** Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops7_2018_markdown_instruction": "**Challenge:** Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops8_markdown_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops8_2018_markdown_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops9_markdown_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops9_2018_markdown_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops9_predict1_markdown_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops9_predict1_2018_markdown_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "courseD_farmer_condLoops_challenge1_markdown_instruction": "The pumpkins mark the place where you should `turn right`. Otherwise keep going forward, but remember to collect all of the lettuce or corn along the way. \n\n**Each hidden crop has only one corn or lettuce.**",
        "courseD_farmer_condLoops_challenge1_2018_markdown_instruction": "The pumpkins mark the place where you should `turn right`. Otherwise keep going forward, but remember to collect all of the lettuce or corn along the way. \n\n**Each hidden crop has only one corn or lettuce.**",
        "courseD_farmer_condLoops_challenge2_markdown_instruction": "*\"It's a very varied vegetable maze!\"* \n\nTurn right at pumpkins, turn left at lettuce. Collect everything to complete the level.",
        "courseD_farmer_condLoops_challenge2_2018_markdown_instruction": "*\"It's a very varied vegetable maze!\"* \n\nTurn right at pumpkins, turn left at lettuce. Collect everything to complete the level.",
        "courseD_farmer_condLoops_challenge2_clone_markdown_instruction": "It's a vegetable maze. Turn right at pumpkins, turn left at the lettuce. Collect everything to complete the level.",
        "courseD_farmer_conditionals1_markdown_instruction": "*\"Hi, I'm a farmer. I need your help to flatten the field on my farm so it's ready for planting!\"*  \n\nMove to the pile of dirt and use the `remove` block to remove it.",
        "courseD_farmer_conditionals3_markdown_instruction": "*\"Move to the pile of dirt and tell me how many shovelfuls to remove.\"*\n\nUse as few blocks as possible to solve this puzzle.",
        "courseD_farmer_conditionals4_markdown_instruction": "*\"I don't know how much dirt is in this pile!\"*\n\nHelp the farmer remove this entire pile using a `while` loop.",
        "courseD_farmer_conditionals6_markdown_instruction": "Look at all of those holes!  Each one needs a different amount of dirt.   \n\nYou can use the `while` loop to easily fill them all!",
        "courseD_farmer_conditionals8_markdown_instruction": "**Challenge:** Fill all of these holes using as few blocks as possible. ",
        "courseD_farmer_until_challenge2_markdown_instruction": "Use `If/Else` blocks to follow the curvy path. At each corner, use the `remove 1` block in a loop to clear the piles.",
        "courseD_farmer_until_challenge2_2018_markdown_instruction": "Use `If/Else` blocks to follow the curvy path. At each corner, use the `remove 1` block in a loop to clear the piles.",
        "courseD_farmer_while1_markdown_instruction": "*\"Hi, I'm a farmer. I need your help to flatten the field on my farm so it's ready for planting!\"*  \n\nMove to the pile of dirt and use the `remove` block to remove it.",
        "courseD_farmer_while1_2018_markdown_instruction": "*\"Hi, I'm a farmer. I need your help to flatten the field on my farm so it's ready for planting!\"*  \n\nMove to the pile of dirt and use the `remove` block to remove it.",
        "courseD_farmer_while3_markdown_instruction": "*\"Move to the pile of dirt and tell me how many shovelfuls to remove.\"*\n\nUse as few blocks as possible to solve this puzzle.",
        "courseD_farmer_while3_2018_markdown_instruction": "*\"Move to the pile of dirt and tell me how many shovelfuls to remove.\"*\n\nUse as few blocks as possible to solve this puzzle.",
        "courseD_farmer_while4_markdown_instruction": "*\"I don't know how much dirt is in this pile!\"*\n\nHelp the farmer remove this entire pile using a `while` loop.",
        "courseD_farmer_while4_2018_markdown_instruction": "*\"I don't know how much dirt is in this pile!\"*\n\nHelp the farmer remove this entire pile using a `while` loop.",
        "courseD_farmer_while4_predict1_markdown_instruction": "*\"I don't know how much dirt is in this pile!\"*\n\nHelp the farmer remove this entire pile using a `while` loop.",
        "courseD_farmer_while4_predict1_2018_markdown_instruction": "*\"I don't know how much dirt is in this pile!\"*\n\nHelp the farmer remove this entire pile using a `while` loop.",
        "courseD_farmer_while6_markdown_instruction": "Look at all of those holes!  Each one needs a different amount of dirt.   \n\nYou can use the `while` loop to easily fill them all!",
        "courseD_farmer_while6_2018_markdown_instruction": "Look at all of those holes!  Each one needs a different amount of dirt.   \n\nYou can use the `while` loop to easily fill them all!",
        "courseD_farmer_while8_markdown_instruction": "**Challenge:** Fill all of these holes using as few blocks as possible. ",
        "courseD_farmer_while8_2018_markdown_instruction": "**Challenge:** Fill all of these holes using as few blocks as possible. ",
        "courseD_farmer_while_challenge1_markdown_instruction": "Fill all of the holes and remove all of the piles.",
        "courseD_farmer_while_challenge1_2018_markdown_instruction": "Fill all of the holes and remove all of the piles.",
        "courseD_farmer_while_challenge2_markdown_instruction": "Fill all of the holes and remove all of the piles.",
        "courseD_farmer_while_challenge2_2018_markdown_instruction": "Fill all of the holes and remove all of the piles.",
        "courseD_harvester_nested_loops_challenge1-broken_markdown_instruction": "*\"I need some help on the farm! Help me harvest this corn using only the blocks in your toolbox.\"*",
        "courseD_harvester_nested_loops_challenge1_markdown_instruction": "*\"I need some help on the farm! Help me harvest this corn using only the blocks in your toolbox.\"*",
        "courseD_harvester_nested_loops_challenge1_2018_markdown_instruction": "*\"I need some help on the farm! Help me harvest this corn using only the blocks in your toolbox.\"*",
        "courseD_iceage_loops1_markdown_instruction": "Help Scrat across the slippery ice to get to the acorn!",
        "courseD_iceage_loops10_markdown_instruction": "Help Scrat get all the way over to the acorn!",
        "courseD_iceage_loops11_markdown_instruction": "Help Scrat get to the acorn!",
        "courseD_iceage_loops12_markdown_instruction": "Get to the acorn any way you can!",
        "courseD_iceage_loops2_markdown_instruction": "Use a <xml><block type=\"maze_turn\">\n    <title name=\"DIR\">turnLeft</title>\n  </block></xml> block to get to the acorn!",
        "courseD_iceage_loops3_markdown_instruction": "Can you get to the acorn with just one <xml><block type=\"maze_moveForward\"/></xml> block? Try using a loop!",
        "courseD_iceage_loops4_markdown_instruction": "Add one more block to get Scrat all the way to the acorn!",
        "courseD_iceage_loops6_markdown_instruction": "Can you add a loop to get to the acorn?",
        "courseD_iceage_loops7_markdown_instruction": "Scrat really wants that acorn! ",
        "courseD_iceage_loops8_markdown_instruction": "Can you fix this code? ",
        "courseD_iceage_loops9_markdown_instruction": "The acorn is so far away! Can you use loops to help Scrat get there?",
        "courseD_maze_loops_challenge1_markdown_instruction": "Let's hunt for treasure - using loops! Help the collector reach at least two piles of treasure using only the blocks in your toolbox.",
        "courseD_maze_nestedLoops3_markdown_instruction": "*\"Zombie hungry!\"*\n\nGet the zombie to the sunflower using the fewest number of blocks possible.",
        "courseD_maze_nestedLoops3_2018_markdown_instruction": "*\"Zombie hungry!\"*\n\nGet the zombie to the sunflower using the fewest number of blocks possible.",
        "courseD_maze_nestedLoops4_markdown_instruction": "Get the zombie to the sunflower using the fewest blocks possible!  ",
        "courseD_maze_nestedLoops4_2018_markdown_instruction": "Get the zombie to the sunflower using the fewest blocks possible!  ",
        "courseD_maze_nestedLoops6_markdown_instruction": "*\"Must eat sunflower!\"*\n\nGet the zombie to the sunflower using only the blocks available.",
        "courseD_maze_nestedLoops6_2018_markdown_instruction": "*\"Must eat sunflower!\"*\n\nGet the zombie to the sunflower using only the blocks available.",
        "courseD_maze_ramp1_markdown_instruction": "For this puzzle, snap all of the blocks together and click \"Run\" to watch it go!",
        "courseD_maze_ramp1_2018_markdown_instruction": "For this puzzle, snap all of the blocks together and click \"Run\" to watch it go!",
        "courseD_maze_ramp2_markdown_instruction": "Drag an extra `move forward` block out of the toolbox, then attach all blocks to `when run` to finish your code.",
        "courseD_maze_ramp2_2018_markdown_instruction": "Drag an extra `move forward` block out of the toolbox, then attach all blocks to `when run` to finish your code.",
        "courseD_maze_ramp3_markdown_instruction": "*\"This pig is ruffling my feathers.\"*\n\nThere is one extra block that is going to cause the bird to crash.  \nThrow it away by removing it from the other blocks and dragging it back to the toolbox.",
        "courseD_maze_ramp3_2018_markdown_instruction": "*\"This pig is ruffling my feathers.\"*\n\nThere is one extra block that is going to cause the bird to crash.  \nThrow it away by removing it from the other blocks and dragging it back to the toolbox.",
        "courseD_maze_ramp4_markdown_instruction": "*\"Trace the path and lead me to the silly pig.\"* \n\nAvoid TNT or feathers will fly!",
        "courseD_maze_ramp4_2018_markdown_instruction": "*\"Trace the path and lead me to the silly pig.\"* \n\nAvoid TNT or feathers will fly!",
        "courseD_maze_ramp5_markdown_instruction": "*\"Follow this path to get me to the pig!\"*\n\nAvoid the TNT.",
        "courseD_maze_ramp5_2018_markdown_instruction": "*\"Follow this path to get me to the pig!\"*\n\nAvoid the TNT.",
        "courseD_maze_ramp5a_markdown_instruction": "Pay attention to the sequence and see if you can figure out how to get to that pig!",
        "courseD_maze_ramp5a_2018_markdown_instruction": "Pay attention to the sequence and see if you can figure out how to get to that pig!",
        "courseD_maze_ramp5b_markdown_instruction": "**Challenge:** Navigate this maze to help the bird find the pig!",
        "courseD_maze_ramp5b_2018_markdown_instruction": "**Challenge:** Navigate this maze to help the bird find the pig!",
        "courseD_maze_ramp5c_markdown_instruction": "Help the bird get to the pig.",
        "courseD_maze_ramp5c_2018_markdown_instruction": "Help the bird get to the pig.",
        "courseD_maze_ramp5d_markdown_instruction": "Get the bird to the pig.",
        "courseD_maze_ramp5d_2018_markdown_instruction": "Get the bird to the pig.",
        "courseD_maze_ramp6_markdown_instruction": "*\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"*\n\nWhen you have several of the same block in a row, try using a `repeat` loop, instead.  This will do the same thing with less code!",
        "courseD_maze_ramp6a_markdown_instruction": "*\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"*\n\nWhen you have several of the same blocks in a row, try using a `repeat` loop, instead.  This will do the same thing with less code!",
        "courseD_maze_ramp7_markdown_instruction": "*\"It's time to get angry!\"*  \n\n\nUse what you've learned to get the bird to the pig!",
        "courseD_maze_until10_markdown_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until10_2018_markdown_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until10_predict2_markdown_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until10_predict2_2018_markdown_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until2_markdown_instruction": "Now, use the `repeat until` loop to do the same thing without specifying how many times to move forward and turn.",
        "courseD_maze_until4_markdown_instruction": "*\"Dear person. Me zombie. Me hungry. Must... get... to sunflower...\"*\n\nCan you get the zombie to the sunflower using only the blocks that are available?",
        "courseD_maze_until4_2018_markdown_instruction": "*\"Dear person. Me zombie. Me hungry. Must... get... to sunflower...\"*\n\nCan you get the zombie to the sunflower using only the blocks that are available?",
        "courseD_maze_until5_markdown_instruction": "Use the `if` block to help the zombie decide when to turn, then get the zombie to the sunflower.",
        "courseD_maze_until5_2018_markdown_instruction": "Use the `if` block to help the zombie decide when to turn, then get the zombie to the sunflower.",
        "courseD_maze_until6_markdown_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until6_2018_markdown_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until7_markdown_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until7_2018_markdown_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until8_markdown_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until8_2018_markdown_instruction": "Help the zombie get to the sunflower.",
        "courseD_maze_until9_markdown_instruction": "**Challenge:** Avoid the chompers and help the zombie get to the sunflower.",
        "courseD_maze_until9_2018_markdown_instruction": "**Challenge:** Avoid the chompers and help the zombie get to the sunflower.",
        "courseD_maze_until_challenge_markdown_instruction": "No hints, just challenge. Get the zombie to the sunflower.\nMarkdown instructions",
        "courseD_maze_until_challenge1-delete-this-copy_markdown_instruction": "No hints, just challenge. Get the zombie to the sunflower.\nMarkdown instructions",
        "courseD_maze_until_challenge1_markdown_instruction": "No hints, just challenge. Get the zombie to the sunflower.",
        "courseD_maze_until_challenge1_2018_markdown_instruction": "No hints, just challenge. Get the zombie to the sunflower.",
        "courseD_maze_until_challenge2_markdown_instruction": "No hints, just challenge. Get the zombie to the sunflower.\nMarkdown instructions",
        "courseD_pixelation_markdown_instruction": "# Make your own image of any size\n\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\n\n\n**Directions:**\n\n* Encode an image of anything you like using `binary`. Type 0s and 1s below to create an image.\n* You might want to do some planning and sketching with graph paper first.\n* Get creative! What kind of drawing can you create?",
        "courseD_playLab_cond1_markdown_instruction": "To start our game, Pirate Pegleg (actor 1) needs to be able to get around in all directions.   Connect the blocks to the correct events to get Pegleg moving.  \n\n---\nHelp Pegleg gather the flags to solve this puzzle.",
        "courseD_playLab_cond1_2018_markdown_instruction": "To start our game, Pirate Pegleg (actor 1) needs to be able to get around in all directions.   Connect the blocks to the correct events to get Pegleg moving.  \n\n---\nHelp Pegleg gather the flags to solve this puzzle.",
        "courseD_playLab_cond2_markdown_instruction": "Time to add points!  \n\nEdit the code to give Pegleg (actor 1) a point when he makes it to the dragon (actor 2). ",
        "courseD_playLab_cond2_2018_markdown_instruction": "Time to add points!  \n\nEdit the code to give Pegleg (actor 1) a point when he makes it to the dragon (actor 2). ",
        "courseD_playLab_cond3_markdown_instruction": "Use a `repeat forever` loop to make the dragon (actor 2) change between random emotions every second.  ",
        "courseD_playLab_cond3_2018_markdown_instruction": "Use a `repeat forever` loop to make the dragon (actor 2) change between random emotions every second.  ",
        "courseD_playLab_cond3a_markdown_instruction": "It's time to use what we've learned about conditionals to make this game amazing. \n\nAdd code so that when Pegleg gets to the dragon, he gets two points *if* the dragon is happy. Otherwise, he should get only one point added to his score.",
        "courseD_playLab_cond3a_2018_markdown_instruction": "It's time to use what we've learned about conditionals to make this game amazing. \n\nAdd code so that when Pegleg gets to the dragon, he gets two points *if* the dragon is happy. Otherwise, he should get only one point added to his score.",
        "courseD_playLab_cond3b_markdown_instruction": "Use a `repeat forever` loop to make the dragon (actor 2) move up and down forever! Add a `wait for 1 second` block in between the `move up` and `move down` blocks for the dragon.",
        "courseD_playLab_cond4_markdown_instruction": "This is about to get interesting!\n\nAdd some code so that the ninja (actor 3) starts chasing Pegleg as soon as the game begins.  End the game as a loss if the ninja catches him.",
        "courseD_playLab_cond4_2018_markdown_instruction": "This is about to get interesting!\n\nAdd some code so that the ninja (actor 3) starts chasing Pegleg as soon as the game begins.  End the game as a loss if the ninja catches him.",
        "courseD_playLab_cond5_markdown_instruction": "Now we need a way to win.\n\nAdd a `repeat forever` loop that continuously checks **if** the score is greater than 5, then ends the game as a **win** when it is.",
        "courseD_playLab_cond5_2018_markdown_instruction": "Now we need a way to win.\n\nAdd a `repeat forever` loop that continuously checks **if** the score is greater than 5, then ends the game as a **win** when it is.",
        "courseD_playLab_cond6a_markdown_instruction": "We don't want the pirate to stay in the \"safe zone\" too long!  \n\nAdd code to the `if` statement below so that if the pirate (actor 1) is in the safe zone, the program will wait one second, then deduct a point as long as he stays beneath the octopus line.",
        "courseD_playLab_cond6a_2018_markdown_instruction": "We don't want the pirate to stay in the \"safe zone\" too long!  \n\nAdd code to the `if` statement below so that if the pirate (actor 1) is in the safe zone, the program will wait one second, then deduct a point as long as he stays beneath the octopus line.",
        "courseD_playLab_cond6cloneForTest_markdown_instruction": "Can we make this work?",
        "courseD_playLab_condFP_2018_markdown_instruction": "Now, build your own game to show off to your friends!\n\n---\n\nYou could:\n  - Have the pirate and ninja work together to get points from the octopus\n  - Have both octopuses follow the pirate, doing double damage to the ninja when they collide\n  - Have each character disappear when touched by the ninja\n  - Invent your own game!",
        "courseD_scrat_ramp1_markdown_instruction": "For this puzzle, snap all of the blocks together and click \"Run\" to watch it go!",
        "courseD_scrat_ramp1_2018_markdown_instruction": "For this puzzle, snap all of the blocks together and click \"Run\" to watch it go!",
        "courseD_scrat_ramp2_markdown_instruction": "Drag an extra `move forward` block out of the toolbox, then attach all blocks to `when run` to finish your code.",
        "courseD_scrat_ramp2_2018_markdown_instruction": "Drag an extra `move forward` block out of the toolbox, then attach all blocks to `when run` to finish your code.",
        "courseD_scrat_ramp3_markdown_instruction": "There is one extra block that is going to cause Scrat to crash.  \nThrow it away by disconnecting it from the other blocks and dragging it back to the toolbox.",
        "courseD_scrat_ramp3_2018_markdown_instruction": "There is one extra block that is going to cause Scrat to crash.  \nThrow it away by disconnecting it from the other blocks and dragging it back to the toolbox.",
        "courseD_scrat_ramp4_markdown_instruction": "Avoid the cracked ice to keep Scrat safe!",
        "courseD_scrat_ramp4_2018_markdown_instruction": "Avoid the cracked ice to keep Scrat safe!",
        "courseD_scrat_ramp5_markdown_instruction": "Avoid the cracked ice!",
        "courseD_scrat_ramp5_2018_markdown_instruction": "Avoid the cracked ice!",
        "courseD_scrat_ramp6_markdown_instruction": "Help Scrat get to the acorn using a loop!",
        "courseD_scrat_ramp6_2018_markdown_instruction": "Help Scrat get to the acorn using a loop!",
        "courseD_scrat_ramp7_markdown_instruction": "Help Scrat get to the acorn!",
        "courseD_scrat_ramp7_2018_markdown_instruction": "Help Scrat get to the acorn!",
        "courseD_scrat_ramp8_markdown_instruction": "**Challenge:** Use what you've learned to get Scrat to the acorn!",
        "courseD_scrat_ramp8_2018_markdown_instruction": "**Challenge:** Use what you've learned to get Scrat to the acorn!",
        "courseE_artist_concept1_markdown_instruction": "Recreate this image. \n\n- The hexagons have sides of 50 pixels\n- The hexagons are 100 pixels apart\n- The pen widths of the hexagons are 1 pixel, 4 pixels, and 8 pixels.",
        "courseE_artist_concept1_2018_markdown_instruction": "Recreate this image. \n\n- The hexagons have sides of 50 pixels\n- The hexagons are 100 pixels apart\n- The pen widths of the hexagons are 1 pixel, 4 pixels, and 8 pixels.",
        "courseE_artist_concept4_markdown_instruction": "Recreate this drawing. \n\nEach square has a side length of **20 pixels** and there are **15 squares per row**.",
        "courseE_artist_concept4_2018_markdown_instruction": "Recreate this drawing. \n\nEach square has a side length of **20 pixels** and there are **15 squares per row**.",
        "courseE_artist_concept_challenge1_markdown_instruction": "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\" width=\"200px\"/>\n\nNow for a challenge!\n\nHere is a design that uses only blocks that you have already been shown.  Can you figure out how to recreate it?  Feel free to use trial and error. You don't have to draw it perfectly the first time.",
        "courseE_artist_concept_challenge1_2018_markdown_instruction": "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\" width=\"200px\"/>\n\nNow for a challenge!\n\nHere is a design that uses only blocks that you have already been shown.  Can you figure out how to recreate it?  Feel free to use trial and error. You don't have to draw it perfectly the first time.",
        "courseE_artist_concept_challenge2_markdown_instruction": "Create five pinwheel designs using the code below.",
        "courseE_artist_concept_challenge2_2018_markdown_instruction": "Create five pinwheel designs using the code below.",
        "courseE_artist_functions1_markdown_instruction": "*\"Me zombie artist. Me love drawing!\"*\n\nHelp the zombie draw glasses using squares with sides of 100 pixels.  \nThe bridge between the glasses is 75 pixels long.\n\n",
        "courseE_artist_functions10_markdown_instruction": "This time, use lines of 8 hexagons with 25 pixel sides.\n\n- To make each hexagon, repeat the side 6 times, turning 60 degrees.\n- Jump 25 pixels between each hexagon.\n- To draw a diamond, you will need to alternate between turning 60 degrees and 120 degrees.",
        "courseE_artist_functions10_2018_markdown_instruction": "This time, use lines of 8 hexagons with 25 pixel sides.\n\n- To make each hexagon, repeat the side 6 times, turning 60 degrees.\n- Jump 25 pixels between each hexagon.\n- To draw a diamond, you will need to alternate between turning 60 degrees and 120 degrees.",
        "courseE_artist_functions1_2018_markdown_instruction": "*\"Me zombie artist. Me love drawing!\"*\n\nHelp the zombie draw glasses using squares with sides of 100 pixels.  \nThe bridge between the glasses is 75 pixels long.\n\n",
        "courseE_artist_functions2_markdown_instruction": "Functions let you define new blocks! \n\nWe've moved the blocks needed for drawing a square into a function called `draw a square`. This time, use the `draw a square` function to create the glasses. \n___\n\nThe squares are 75 pixels apart.",
        "courseE_artist_functions2_2018_markdown_instruction": "Here is a function called `draw a square`. Use it to complete this drawing. \n___\n\nThe squares are 75 pixels apart.",
        "courseE_artist_functions3_markdown_instruction": "We will come back to functions shortly. Let's take a break to practice making this star. \n\nYou can make this drawing by adding a repeat block.",
        "courseE_artist_functions3_2018_markdown_instruction": "Build a function that will create this star.\n\n---\n\n- Each arm of the star is 25 pixels long\n- You need to turn 45 degrees to get 8 arms\n- It is okay to go forward and backward over the same arm",
        "courseE_artist_functions4_markdown_instruction": "Now that you can draw a star, try drawing four stars!\n\n- Each branch of the star is 25 pixels long\n- Turn 45 degrees between branches\n- Jump 100 pixels between each star",
        "courseE_artist_functions4_2018_markdown_instruction": "Now that you can draw a star, try drawing four stars!\n\n- Each branch of the star is 25 pixels long\n- Turn 45 degrees between branches\n- Jump 100 pixels between each star",
        "courseE_artist_functions5_markdown_instruction": "When is drawing three stars harder than drawing four? When you also have to jump over the moon!\n\nDraw only those three stars to finish this puzzle.",
        "courseE_artist_functions5_2018_markdown_instruction": "When is drawing three stars harder than drawing four? When you also have to jump over the moon!\n\nDraw only those three stars to finish this puzzle.\n\n---\n\n- The jump between the first and second star is **200** pixels\n- The jump between the second and third is **100** pixels",
        "courseE_artist_functions6_markdown_instruction": "You are doing great! \n\nMake this window by drawing a square, then turning 90 degrees before drawing another, and so on.",
        "courseE_artist_functions6_2018_markdown_instruction": "You are doing great! \n\nMake this window by drawing a square, then turning 90 degrees before drawing another, and so on.",
        "courseE_artist_functions7_markdown_instruction": "Let's take the code for the window and add it to function `draw a window`. Now, we can call the function any time we need to draw a window without having to write the code again. \n\n![](https://images.code.org/615a5e93abdaffeed438a976a56fc1f5-image-1497998528859.gif)\n\nTry solving this puzzle by creating `draw a window` and calling it five times. Watch out for the door!\n\n- The top windows are 50 pixels away from each other.  \n- The bottom windows are 100 pixels below the top set.",
        "courseE_artist_functions7_2018_markdown_instruction": "Drawing all of these windows individually would be a pain!  \n\nTry solving this puzzle by creating `draw a window` and calling it five times. Watch out for the door!\n\n---  \n- Each window is made up of four **25** pixel squares.\n- The top windows are a **100** pixel jump away from each other.  \n- The bottom windows are a **150** pixel jump below the top set.",
        "courseE_artist_functions8_markdown_instruction": "**Challenge:** Did you know that you can call functions from *inside* other functions?!\n\nCreate as many functions as you think you need to make this drawing of 50 pixel squares.",
        "courseE_artist_functions8a_2018_markdown_instruction": "*\"Functions easy!\"*\n\nWe are going to build up to something fancy!  Start by creating a function for this square.",
        "courseE_artist_functions8b_2018_markdown_instruction": "*\"Zombie get dizzy.\"*\n\nCall the `draw a square` function from inside your `draw a line of squares` function to make this even easier!\n\n---\n\n- The squares are *50* pixels apart.",
        "courseE_artist_functions8c_2018_markdown_instruction": "Add one more function that creates this stack of staggered squares using the `draw a line of squares` function.",
        "courseE_artist_functions9_markdown_instruction": "Create this image using the limited blocks provided. \n\n- Each triangle has sides of **50 pixels**  \n- To draw a diamond, you will need to alternate between turning **60 degrees and 120 degrees**.",
        "courseE_artist_functions9_2018_markdown_instruction": "**Challenge:** Create this image using the limited blocks provided. \n\n- Each triangle has sides of **50 pixels**  \n- To draw a diamond, you will need to alternate between turning **60 degrees and 120 degrees**.",
        "courseE_artist_functionsProj_2018_markdown_instruction": "**Inspiration:** Use what you've learned to make whatever you want!  \n\nCan you make something like this pinwheel?",
        "courseE_artist_functions_challenge_markdown_instruction": "Once you define a function, you can call it over and over again - whenever and wherever you want! Try this code to see how it works, then change it to make your own impressive design!",
        "courseE_artist_functions_challenge1_markdown_instruction": "Once you define a function, you can call it over and over again - whenever and wherever you want! Try this code to see how it works, then change it to make your own impressive design!",
        "courseE_artist_functions_challenge1_2018_markdown_instruction": "Once you define a function, you can call it over and over again - whenever and wherever you want! Try this code to see how it works, then change it to make your own impressive design!",
        "courseE_artist_functions_challenge2_markdown_instruction": "Not only can you jump to some pre-set locations, like the corners of the canvas, you can also use a `jump to` command to get to absolutely any spot you like! Try this code to see how it works, then make the program your own!\n\n<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">???</title>\n    <title name=\"YPOS\">???</title>\n    </block></xml>",
        "courseE_artist_functions_challenge2_2018_markdown_instruction": "Not only can you jump to some pre-set locations, like the corners of the canvas, you can also use a `jump to` command to get to absolutely any spot you like! Try this code to see how it works, then make the program your own!\n\n<xml>\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">???</title>\n    <title name=\"YPOS\">???</title>\n    </block></xml>",
        "courseE_artist_functions_predict1_markdown_instruction": "Here is a puzzle that uses a function that we have defined. \n",
        "courseE_artist_functions_predict1_2018_markdown_instruction": "Here is a puzzle that uses a function that we have defined. ",
        "courseE_artist_ramp10_markdown_instruction": "Did you know you can put loops inside of other loops to make them more powerful?  That's called making a \"nested loop\".\n\n___\n\nDrag the code for the last triangle into a new loop to spin it around and make a snowflake!\n\n*(You will need to spin it 6 times, turning 60 degrees each time, to get this pattern.)*",
        "courseE_artist_ramp8_markdown_instruction": "Great!  Now let's use that `repeat` loop to make a square using Artist!  The blocks for artist are a little different than other puzzles, but the idea is the same.\n___\n##### Each side of the square has a length of 200 pixels, and you will need to turn 90 degrees to make each angle.",
        "courseE_artist_ramp8_2_markdown_instruction": "Great!  Now let's use that `repeat` loop to make a square using Artist!  The blocks for artist are a little different than other puzzles, but the idea is the same.\n___\n##### Each side of the square has a length of 200 pixels, and you will need to turn 90 degrees to make each angle.",
        "courseE_artist_ramp8_2018_markdown_instruction": "Great!  Now let's use that `repeat` loop to make a square using Artist!  The blocks for artist are a little different than other puzzles, but the idea is the same.\n___\n##### Each side of the square has a length of 200 pixels, and you will need to turn 90 degrees to make each angle.",
        "courseE_artist_ramp8_2_2018_markdown_instruction": "Great!  Now let's use that `repeat` loop to make a square using Artist!  The blocks for artist are a little different than other puzzles, but the idea is the same.\n___\n##### Each side of the square has a length of 200 pixels, and you will need to turn 90 degrees to make each angle.",
        "courseE_artist_ramp9_markdown_instruction": "Use what you've learned to draw this triangle.\n___\n##### The sides are each 100 pixels long. You will need to turn 120 degrees at each corner.",
        "courseE_artist_ramp9_2_markdown_instruction": "Use what you've learned to draw this triangle.\n___\n##### The sides are each 100 pixels long. You will need to turn 120 degrees at each corner.",
        "courseE_artist_ramp9_2018_markdown_instruction": "Use what you've learned to draw this triangle.\n___\n##### The sides are each 100 pixels long. You will need to turn 120 degrees at each corner.",
        "courseE_artist_ramp9_2_2018_markdown_instruction": "Use what you've learned to draw this triangle.\n___\n##### The sides are each 100 pixels long. You will need to turn 120 degrees at each corner.",
        "courseE_bee_concept1_markdown_instruction": "*\"Can you BEE-lieve all of these flowers?\"*\n\nCollect all of the nectar from each flower. ",
        "courseE_bee_concept1_2018_markdown_instruction": "*\"Can you BEE-lieve all of these flowers?\"*\n\nCollect all of the nectar from each flower. ",
        "courseE_bee_concept2_markdown_instruction": "Help the bee make all of the honey.  \n\nYou can only make honey at a honeycomb, but you can check any space to see if there is a honeycomb.",
        "courseE_bee_concept2_2018_markdown_instruction": "Help the bee make all of the honey.  \n\nYou can only make honey at a honeycomb, but you can check any space to see if there is a honeycomb.",
        "courseE_bee_concept5_markdown_instruction": "Can you help the bee collect the nectar from the flowers? \n\nYou can only collect nectar from flowers, but you can check any space to see if there is a flower.",
        "courseE_bee_concept5_2018_markdown_instruction": "Can you help the bee collect the nectar from the flowers? \n\nYou can only collect nectar from flowers, but you can check any space to see if there is a flower.",
        "courseE_bee_functions10_markdown_instruction": "*\"Show me the HONEY!\"*\n\nSolve this puzzle by creating a function that causes the bee to: \n- turn toward the branch in the path\n- move forward\n- make all of the honey\n- return to the main path \n- turn back to the original direction",
        "courseE_bee_functions10_2018_markdown_instruction": "*\"Show me the HONEY!\"*\n\nSolve this puzzle by creating a function that causes the bee to: \n- turn toward the branch in the path\n- move forward\n- make all of the honey\n- return to the main path \n- turn back to the original direction",
        "courseE_bee_functions2_markdown_instruction": "Functions are blocks of code that perform a task.  \n\nUse the `get 2 nectar` function to collect the nectar from each flower.",
        "courseE_bee_functions2_2018_markdown_instruction": "Functions are blocks of code that perform a task.  \n\nUse the `get 2 nectar` function to collect the nectar from each flower.",
        "courseE_bee_functions3_markdown_instruction": "Build the `get 5` function to use in this puzzle.",
        "courseE_bee_functions3_2018_markdown_instruction": "Build the `get 5` function to use in this puzzle.",
        "courseE_bee_functions4_markdown_instruction": "The `move and get nectar` function turns the bee, collects nectar, and then returns the bee to where it started.  \n\nUse the `move and get nectar` function to collect all of the nectar.",
        "courseE_bee_functions4_2018_markdown_instruction": "The `move and get nectar` function turns the bee, collects nectar, and then returns the bee to where it started.  \n\nUse the `move and get nectar` function to collect all of the nectar.",
        "courseE_bee_functions8_markdown_instruction": "**Challenge:** These flowers can have a different amount of nectar each time you run the puzzle.   \n\nCreate a function that collects all of the nectar from each flower.",
        "courseE_bee_functions8_2018_markdown_instruction": "**Challenge:** These flowers can have a different amount of nectar each time you run the puzzle.   \n\nCreate a function that collects all of the nectar from each flower.",
        "courseE_bee_functions9b_markdown_instruction": "*\"I can't BEE-lieve how full this field is!\"*\n\nLook very carefully at this puzzle to see if you can use what you learned to solve it.",
        "courseE_bee_functions_challenge1_markdown_instruction": "You are on your own for this challenge.  This could \"bee\" harder than it looks!",
        "courseE_bee_functions_challenge1_2018_markdown_instruction": "You are on your own for this challenge.  This could \"bee\" harder than it looks!",
        "courseE_bee_ramp14_markdown_instruction": "The same technique works with nectar and honey!  \n\nLook at all of these clouds. Some of them will turn into honey, and others into nectar.   \nHelp the bee follow the path and solve this puzzle.\n\n\n\n",
        "courseE_bee_ramp14_2018_markdown_instruction": "The same technique works with nectar and honey!  \n\nLook at all of these clouds. Some of them will turn into honey, and others into nectar.   \nHelp the bee follow the path and solve this puzzle.\n\n\n\n",
        "courseE_bee_ramp17_markdown_instruction": "For the final puzzle in this stage, use what you have learned to collect all of the nectar and make all of the honey.  ",
        "courseE_collector_ramp10_markdown_instruction": "Take the same path as before, but this time collect all of the treasure as you find it.\n",
        "courseE_collector_ramp8_markdown_instruction": "This puzzle is a lot like the last one, but now it stars Laurel the Adventurer!\n<hr/>\n\nTake the same path as before, but this time, use a repeat loop to collect treasure when you get to it.\n",
        "courseE_collector_ramp9_markdown_instruction": "Take the same path as before, but this time collect all of the treasure as you find it.\n",
        "courseE_farmer_concept4_markdown_instruction": "Now let's go one level deeper! We've nested that whole block of code into another loop, but you need to get the artist back in place to draw the next line. Which of these code blocks can you place at the end of the outermost loop to draw the whole grid?",
        "courseE_farmer_functions1_markdown_instruction": "*\"Have we met before? I'm the harvester!\"*\n\nHelp the harvester get to the pumpkin and pick it.",
        "courseE_farmer_functions10a1_2018_markdown_instruction": "**Challenge:** Use everything that you've learned so far to solve this puzzle in 19 blocks or less!",
        "courseE_farmer_functions10b_markdown_instruction": "Use your new function twice to solve this puzzle.",
        "courseE_farmer_functions10b_2018_markdown_instruction": "Use your new function twice to solve this puzzle.",
        "courseE_farmer_functions11_predict_markdown_instruction": "Figure out which function to use and which one to delete, then solve this puzzle!",
        "courseE_farmer_functions11_predict_2018_markdown_instruction": "Figure out which function to use and which one to delete, then solve this puzzle!",
        "courseE_farmer_functions13_2018_markdown_instruction": "Solve this puzzle in 23 blocks or less.\n___  \n\n##### Each sprout will either grow *one* corn or nothing. To find the best solution, you will need to edit the functions directly.",
        "courseE_farmer_functions1_2018_markdown_instruction": "*\"Have we met before? I'm the harvester!\"*\n\nHelp the harvester get to the pumpkin and pick it.",
        "courseE_farmer_functions1a_markdown_instruction": "*\"Oooh, veggies are cropping up everywhere!\"*\n\nNow help the harvester pick all of the corn on the way to the pumpkin at the end.\n___\n##### Note: Every square on the path that leads to the pumpkin will either have *one* corn or nothing.  You will need to use an `if` statement to check whether there is corn before you try to pick it!",
        "courseE_farmer_functions1a_2018_markdown_instruction": "*\"Oooh, veggies are cropping up everywhere!\"*\n\nNow help the harvester pick all of the corn on the way to the pumpkin at the end.\n___\n##### Note: Every square on the way to the pumpkin either has **1** corn or nothing at all.  Use the provided `check for corn` function to make sure you get everything. ",
        "courseE_farmer_functions2a_markdown_instruction": "*\"I feel so functional!\"*\n\nWe're going to check lots of squares for crops in the next few puzzles.  Let's move everything into a function to make it easier.",
        "courseE_farmer_functions2aALT_markdown_instruction": "*\"I feel so functional!\"*\n\nWe're going to check lots of squares for crops in the next few puzzles.  Let's move everything into a function to make it easier.",
        "courseE_farmer_functions2b_markdown_instruction": "Help the harvester pick the corn and pumpkins.\n___\n##### Each sprout will either grow *one* corn or nothing.",
        "courseE_farmer_functions2b_2018_markdown_instruction": "Use the function to help the harvester pick the corn and pumpkins.\n___\n##### Each sprout will either grow *one* corn or nothing.",
        "courseE_farmer_functions2ba_markdown_instruction": "*\"I feel so functional!\"*\n\nDid you notice that there was repeated code in the last puzzle?  It doesn't work to put it all inside of a loop, but we **can** use functions.  \n\nFor this puzzle, we have moved the repeated code into a function called `corn and pumpkin`. Now, all you need to do is put the small `corn and pumpkin` **function call block** into the code where you need it.\n\n___\n##### Each sprout will either grow *one* corn or nothing.",
        "courseE_farmer_functions2ba_2018_markdown_instruction": "*\"I feel so functional!\"*\n\nNow there are multiple pumpkins in each patch!  Look carefully at the function definitions below to figure out how to use each one.\n___\n##### Each sprout will either grow *one* corn or nothing.",
        "courseE_farmer_functions3b_markdown_instruction": "*\"Oooh, veggies are cropping up everywhere!\"*\n\nNow help the farmer pick the corn, lettuce, **and** pumpkin.",
        "courseE_farmer_functions3c_markdown_instruction": "Now, fill-in the function yourself by pulling the blocks from the code and dropping them into the **function definition**.  \n\nDon't forget to add the little **function call** blocks to use the function in your program when you're done.",
        "courseE_farmer_functions3c1_2018_markdown_instruction": "Did you notice that there was a lot of repeated code in that last puzzle?  We can save space by calling that code `pick along path` and using a new function to call the other functions!\n\nUse `pick along path` to solve this puzzle again using fewer blocks.",
        "courseE_farmer_functions3c_2018_markdown_instruction": "Great!  Try your functions out on a longer path.",
        "courseE_farmer_functions4b_markdown_instruction": "Use your new function to solve this puzzle.",
        "courseE_farmer_functions4b_2018_markdown_instruction": "Use your new function to solve this puzzle.",
        "courseE_farmer_functions5b_markdown_instruction": "*\"They're multiplying!\"*\n\nThe crops are now growing in clusters.  Add some new `while` loops to your function to make sure you get all of the produce.",
        "courseE_farmer_functions5c_markdown_instruction": "Your function will come in handy here.",
        "courseE_farmer_functions5c_2018_markdown_instruction": "Your function will come in handy here.",
        "courseE_farmer_functions6b_markdown_instruction": "Pick all of the produce.",
        "courseE_farmer_functions6c_markdown_instruction": "*\"Lettuce pick all of the produce!\"*\n\nNow the sprouts can be either corn **or** lettuce.  What do you need to add to this program to check each sprout before you pick?\n___\n##### Note: Each sprout will turn into either **one** corn or **one** lettuce.",
        "courseE_farmer_functions6c_2018_markdown_instruction": "*\"Lettuce pick all of the produce!\"*\n\nNow the sprouts can be either corn **or** lettuce.  What do you need to add to this program to check each sprout before you pick?\n___\n##### Note: Each sprout will turn into either **one** corn or **one** lettuce.",
        "courseE_farmer_functions7a1_2018_markdown_instruction": "*\"Functions __lettuce__ do more with less work!\"*\n\nCreate a function that sends the harvester down a square path to pick a single head of lettuce from the middle of each row.",
        "courseE_farmer_functions7b_markdown_instruction": "*\"This harvest is a-MAZE-ing!\"*\n\nHelp the harvester find her way down this confusing path and to the pumpkin by turning **left** at the corn and **right** at the lettuce.  \n\n*(Don't forget to collect all of the produce along the way!)*",
        "courseE_farmer_functions7b_2018_markdown_instruction": "*\"This harvest is a-MAZE-ing!\"*\n\nHelp the harvester find her way down this confusing path and to the pumpkin by turning **left** at the corn and **right** at the lettuce.  \n\n*(Don't forget to collect all of the produce along the way!)*",
        "courseE_farmer_functions8a1_2018_markdown_instruction": "Try writing your function again. Is it still helpful?  How can you make it work for this puzzle?",
        "courseE_farmer_functions8b_markdown_instruction": "**Challenge:** Not all corners are marked in this maze, that means that you will need to use your navigation code more than once to get where you need to go.  \n\nCan you figure out what you need to do?",
        "courseE_farmer_functions8b_2018_markdown_instruction": "**Challenge:** Not all corners are marked in this maze, that means that you will need to use your navigation code more than once to get where you need to go.  \n\nCan you figure out what you need to do?",
        "courseE_farmer_functions9b_markdown_instruction": "Take a good look at this puzzle.  Can you figure out the pattern?",
        "courseE_farmer_functions9b_2018_markdown_instruction": "Take a good look at this puzzle.  Can you figure out the pattern?",
        "courseE_farmer_functions9b_clone_markdown_instruction": "Take a good look at this puzzle.  Can you figure out the pattern?",
        "courseE_farmer_predict1_markdown_instruction": "Help the farmer walk the path to find all of the lettuce\n\nIn this puzzle, lettuce is growing at the end of every path.  If there is a path in front of her, the farmer can keep moving forward.  Otherwise, she needs to pick all of the lettuce, then turn to stay on the path. \n\n\n\n",
        "courseE_farmer_predict1_2018_markdown_instruction": "Help the farmer walk the path to find all of the lettuce\n\nIn this puzzle, lettuce is growing at the end of every path.  If there is a path in front of her, the farmer can keep moving forward.  Otherwise, she needs to pick all of the lettuce, then turn to stay on the path. \n\n\n\n",
        "courseE_farmer_ramp11a_markdown_instruction": "Oh my!  This pile is so big that it's hard to guess how much dirt is in it.  \n\n___\n\nWe've added a new block to the toolbox called the `while there is a pile` block.  Use this to remove dirt only while there is still some to scoop! ",
        "courseE_farmer_ramp11a_2018_markdown_instruction": "Oh my!  This pile is so big that it's hard to guess how much dirt is in it.  \n\n___\n\nWe've added a new block to the toolbox called the `while there is a pile` block.  Use this to remove dirt only while there is still some to scoop! ",
        "courseE_farmer_ramp11b_markdown_instruction": "Let's try that again, but with more piles!",
        "courseE_farmer_ramp11b_2018_markdown_instruction": "Let's try that again, but with more piles!",
        "courseE_farmer_ramp12_markdown_instruction": "Pick all of the lettuce.",
        "courseE_farmer_ramp12_2018_markdown_instruction": "Pick all of the lettuce.",
        "courseE_farmer_ramp12_forswap_markdown_instruction": "Pick all of the lettuce.",
        "courseE_farmer_ramp12_forswap_2018_markdown_instruction": "Pick all of the lettuce.",
        "courseE_farmer_ramp12a_markdown_instruction": "Help the farmer walk the path to find all of the lettuce\n\nIn this puzzle, lettuce is growing at the end of every path.  If there is a path in front of her, the farmer can keep moving forward.  Otherwise, she needs to pick all of the lettuce, then turn to stay on the path. ",
        "courseE_farmer_ramp12a_2018_markdown_instruction": "Help the farmer walk the path to find all of the lettuce\n\nIn this puzzle, lettuce is growing at the end of every path.  If there is a path in front of her, the farmer can keep moving forward.  Otherwise, she needs to pick all of the lettuce, then turn to stay on the path. ",
        "courseE_farmer_ramp12b_markdown_instruction": "Now the harvester needs to pick all of the lettuce.  Use `while there is lettuce` inside of a `repeat` loop to get it all!",
        "courseE_farmer_ramp12b_2018_markdown_instruction": "Now the harvester needs to pick all of the lettuce.  Use `while there is lettuce` inside of a `repeat` loop to get it all!",
        "courseE_farmer_ramp12c_markdown_instruction": "The lettuce is now only at the end of the path.  \nTravel down the path **until** you reach a head of lettuce, then continue to pick it **while** there is still some left.  ",
        "courseE_farmer_ramp12c_2018_markdown_instruction": "The lettuce is now only at the end of the path.  \nTravel down the path **until** you reach a head of lettuce, then continue to pick it **while** there is still some left.  ",
        "courseE_farmer_ramp12d_markdown_instruction": "The lettuce is scattered all over the garden.  \nTravel down each path **until** you reach a head of lettuce, then continue to pick it **while** there is still some left.  ",
        "courseE_farmer_ramp12d_2018_markdown_instruction": "The lettuce is scattered all over the garden.  \nTravel down each path **until** you reach a head of lettuce, then continue to pick it **while** there is still some left.  ",
        "courseE_farmer_ramp12e_markdown_instruction": "The lettuce is scattered all over the garden.  \nTravel down each path **until** you reach a head of lettuce, then continue to pick it **while** there is still some left.  ",
        "courseE_farmer_ramp12e_2018_markdown_instruction": "The lettuce is scattered all over the garden.  \nTravel down each path **until** you reach a head of lettuce, then continue to pick it **while** there is still some left.  ",
        "courseE_farmer_ramp12f_markdown_instruction": "**Challenge**: The only way to get all of the crops is to move forward until you get to the lettuce, then turn left **if** there is a path to the left.  Otherwise, turn right.",
        "courseE_farmer_ramp12f_2018_markdown_instruction": "**Challenge**: The only way to get all of the crops is to move forward until you get to the lettuce, then turn left **if** there is a path to the left.  Otherwise, turn right.",
        "courseE_farmer_ramp12g_markdown_instruction": "Move forward until you get to the lettuce, then turn left **if** there is a path to the left.  Otherwise, turn right.",
        "courseE_farmer_ramp12g_2018_markdown_instruction": "Move forward until you get to the lettuce, then turn left **if** there is a path to the left.  Otherwise, turn right.",
        "courseE_farmer_ramp13_markdown_instruction": "Goodness!  Look at all of these sprouts. Some of them will turn into corn, and others into lettuce.  \n\nTravel to the ends of the path to pick lettuce while there is lettuce, and pick corn while there is corn. \n\n",
        "courseE_farmer_ramp13_2018_markdown_instruction": "Goodness!  Look at all of these sprouts. Some of them will turn into corn, and others into lettuce.  \n\nTravel to the ends of the path to pick lettuce while there is lettuce, and pick corn while there is corn. \n\n",
        "courseE_farmer_ramp15_markdown_instruction": "Solve this puzzle using only the blocks available.\n\nThis level will help give you practice with the `repeat until` block.  Collect all of the corn and lettuce until you get to the pumpkin. (Don't forget to collect the pumpkin, too!)",
        "courseE_farmer_ramp15_2018_markdown_instruction": "Solve this puzzle using only the blocks available.\n\nThis level will help give you practice with the `repeat until` block.  Collect all of the corn and lettuce until you get to the pumpkin. (Don't forget to collect the pumpkin, too!)",
        "courseE_farmer_ramp16_markdown_instruction": "**Challenge:** Solve this puzzle with the fewest number of blocks.",
        "courseE_maze_ramp1_markdown_instruction": "For this puzzle, drag all of the blocks together and click \"Run\" to watch it go!",
        "courseE_maze_ramp13_markdown_instruction": "Time for one last puzzle to pull it all together!\n\nUse nested loops to get the bird to the pig.",
        "courseE_maze_ramp1_2018_markdown_instruction": "For this puzzle, drag all of the blocks together and click \"Run\" to watch it go!",
        "courseE_maze_ramp2_markdown_instruction": "Drag an extra `move forward` block out of the toolbox, then attach all blocks to `when run` to finish your code.",
        "courseE_maze_ramp2_2018_markdown_instruction": "Drag an extra `move forward` block out of the toolbox, then attach all blocks to `when run` to finish your code.",
        "courseE_maze_ramp3_markdown_instruction": "*\"This pig is ruffling my feathers.\"*\n\nThere is one extra block that is going to cause the bird to crash.  \nThrow it away by dragging it back to the toolbox.",
        "courseE_maze_ramp3_2018_markdown_instruction": "*\"This pig is ruffling my feathers.\"*\n\nThere is one extra block that is going to cause the bird to crash.  \nThrow it away by dragging it back to the toolbox.",
        "courseE_maze_ramp4_markdown_instruction": "*\"Trace the path and lead me to the silly pig.\"* \n\nAvoid TNT or feathers will fly!",
        "courseE_maze_ramp4_2018_markdown_instruction": "*\"Trace the path and lead me to the silly pig.\"* \n\nAvoid TNT or feathers will fly!",
        "courseE_maze_ramp5_markdown_instruction": "*\"Follow this path to get me to the pig!\"*\n\nAvoid the TNT.",
        "courseE_maze_ramp5_2018_markdown_instruction": "*\"Follow this path to get me to the pig!\"*\n\nAvoid the TNT.",
        "courseE_maze_ramp6_markdown_instruction": "*\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"*\n\nWhen you have several blocks in a row, try moving them inside of a `repeat` loop.  This will do the same thing with less code!",
        "courseE_maze_ramp6_2018_markdown_instruction": "*\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"*\n\nWhen you have several blocks in a row, try moving them inside of a `repeat` loop.  This will do the same thing with less code!",
        "courseE_maze_ramp7_markdown_instruction": "*\"It's time to get angry!\"*\n\n**Challenge:** Use what you've learned to get the bird to the pig!",
        "courseE_maze_ramp7_2018_markdown_instruction": "*\"It's time to get angry!\"*\n\n**Challenge:** Use what you've learned to get the bird to the pig!",
        "courseE_multi_maze_ramp5_markdown_instruction": "*\"Follow this path to get me to the pig!\"*\n\nAvoid the TNT.",
        "courseE_playLab_challenge1_markdown_instruction": "_The **squirrels** are terrified to see that a **dinosaur** has come to town! Can the brave **knight** keep them all from panicking?_\n\nRules:\n1. *Touching the squirrels scores you points.*\n2. *Touching the dinosaur takes many points away.*\n\nHere is a different kind of game that has already been started for you! Play it to see how it works. \n\n\nSomething should happen when you get enough points or when you run out of points. Add some code to the `win game` and `lose game` functions to make the game work the way it should. \nClick the hints for ideas!",
        "courseE_playLab_challenge1_2018_markdown_instruction": "_The **squirrels** are terrified to see that a **dinosaur** has come to town! Can the brave **knight** keep them all from panicking?_\n\nRules:\n1. *Touching the squirrels scores you points.*\n2. *Touching the dinosaur takes many points away.*\n\nHere is a different kind of game that has already been started for you! Play it to see how it works. \n\n\nSomething should happen when you get enough points or when you run out of points. Add some code to the `win game` and `lose game` functions to make the game work the way it should. \nClick the hints for ideas!",
        "courseE_playLab_scaffold1_markdown_instruction": "It is amazing how much you have learned! Let's make a game step by step.\n\nUsing new blocks in your toolbox, choose a new background, then pick an actor to be in your game.",
        "courseE_playLab_scaffold1_2018_markdown_instruction": "It is amazing how much you have learned! Let's make a game step by step.\n\nUsing new blocks in your toolbox, choose a new background, then pick an actor to be in your game.",
        "courseE_playLab_scaffold2_markdown_instruction": "Use  blocks like event handlers and actions to make your player move according to the arrows on your keyboard.  \n\nGet the player to the targets to complete this puzzle.",
        "courseE_playLab_scaffold2_2018_markdown_instruction": "Use  blocks like event handlers and actions to make your player move according to the arrows on your keyboard.  \n\nGet the player to the targets to complete this puzzle.",
        "courseE_playLab_scaffold3_markdown_instruction": "Let's add some more characters to your game!\n\nUse the `set actor` block to add more characters then move to the goal to complete this puzzle.",
        "courseE_playLab_scaffold3_2018_markdown_instruction": "Let's add some more characters to your game!\n\nUse the `set actor` block to add more characters then move to the goal to complete this puzzle.",
        "courseE_playLab_scaffold4_markdown_instruction": "Multiple characters and getting the actors moving is a great start to a game, but we need to do more to make this feel like a real game. Let's add a score!\n\nUse event blocks like the `when actor touches` to change the score. Score 10 points to complete this puzzle.",
        "courseE_playLab_scaffold4_2018_markdown_instruction": "Multiple characters and getting the actors moving is a great start to a game, but we need to do more to make this feel like a real game. Let's add a score!\n\nUse event blocks like the `when actor touches` to change the score. Score 10 points to complete this puzzle.",
        "courseE_playLab_scaffold5_markdown_instruction": "Great job! You have all the basic components of a working game. Now spend some time making sure the game works the way you want. Include a way to win or lose your game, then play until you meet one of those conditions.",
        "courseE_playLab_scaffold5_2018_markdown_instruction": "Great job! You have all the basic components of a working game. Now spend some time making sure the game works the way you want. Include a way to win or lose your game, then play until you meet one of those conditions.",
        "courseE_playLab_scaffold6_markdown_instruction": "You've finished! Now you can play your game or share it with your friends and classmates!",
        "courseE_playLab_scaffold6_2018_markdown_instruction": "You've finished! Now you can play your game or share it with your friends and classmates!",
        "courseE_playlab_challenge2_markdown_instruction": "Can you figure out how this \"Fortune Teller\" app works? Try adding some of the following features to this game:\n\n* Change the \"yes\" and \"no\" answers to something more interesting.\n* Let the player ask another question after the actor says the fortune.\n* Give the witch two more things to say when she is in an `angry` or `normal` mood.\n* Give the wizard his own set of fortunes.\n* Make each actor change mood randomly.\n\nCheck the hints if you need help with these challenges!",
        "courseE_playlab_variables_challenge2_markdown_instruction": "Can you figure out how this \"Fortune Teller\" app works? Try adding some of the following features to this game:\n\n* Change the \"yes\" and \"no\" answers to something more interesting.\n* Let the player ask another question after the actor says the fortune.\n* Give the witch two more things to say when she is in an `angry` or `normal` mood.\n* Give the wizard his own set of fortunes.\n* Make each actor change mood randomly.\n\nCheck the hints if you need help with these challenges!",
        "courseF_IceAge_1_markdown_instruction": "Sid (actor 1) wants to gather everyone for a new adventure. Can you help him say \"Hello!\" by dragging the `actor 1 say` block out and connecting it to the bottom of the `when run` event?   \n\nDon't forget to type \"Hello!\" inside!",
        "courseF_IceAge_10_markdown_instruction": "Sid wants to let his grandmother, Granny, know that he loves her.   \n\nUse the `actor __ throw` command to have Sid (actor 1) throw hearts at Granny (actor 2)! \nSet Granny's mood to happy when she gets hit with the hearts.",
        "courseF_IceAge_11_markdown_instruction": "Time to create your own game or story!  \n\nWhen you're done, click \"Finish\" to let friends try your game on their phones, tablets, or computers!\nDon't know what to make? Click the hints for details.",
        "courseF_IceAge_2_markdown_instruction": "Manny (actor 2) found Sid (actor 1) and wants to invite him on an adventure. Help them greet each other by using the the `actor ___ say` block twice.",
        "courseF_IceAge_3_markdown_instruction": "Scrat is looking for his acorn! Can you help him move the last 200 pixels?",
        "courseF_IceAge_4_markdown_instruction": "Diego (actor 1) is searching for Manny (actor 2). Can you help bring the two together? Connect a block to the `when actor touches` event to play a sound when they find each other.",
        "courseF_IceAge_5_markdown_instruction": "The `repeat forever` block allows you to run code continuously. Can you put blocks inside of it to help Granny get some exercise by moving left and right repeatedly?",
        "courseF_IceAge_6_markdown_instruction": "Can you help Sid call for his friends when you click on him?  \n\nOnce you're done, press \"Run\" to play.  Click on Sid to see your code work!",
        "courseF_IceAge_7_markdown_instruction": "Scrat is still looking for acorns! \nHelp him scamper around by attaching a `move actor 1` block to each of the events and changing the direction to work for each arrow key. \nWhen you’re done, click \"Run\" and try to collect all of the acorns.",
        "courseF_IceAge_8_markdown_instruction": "Here is your code from the last puzzle, as well as the code to move Granny left and right. \nCan you finish the program to make it so that you both **play a sound** and **score a point** when Sid and Granny collide? \nPress \"Run\" to play the game.",
        "courseF_IceAge_9_markdown_instruction": "Everyone needs to move faster because an ice storm is coming! \nChange the scene to an icy background and set Sid’s (actor 1) speed to fast.\nPress \"Run\" and move Sid to Diego to warn him.",
        "courseF_IceAge_template_markdown_instruction": "Scrat is still looking for acorns! \nHelp him scamper around by attaching a `move actor 1` block to each of the events and changing the direction to work for each arrow key. \nWhen you’re done, click \"Run\" and try to collect all of the acorns.",
        "courseF_artist_for1_markdown_instruction": "**Free Play:** Experiment with the `for` loop and the `counter` variable.  \n\nDrag out a few blocks and see what happens.  \n",
        "courseF_artist_for10_markdown_instruction": "**Free Play:** Try using the `counter` variable with other drawing elements to make magical images like this one.\n\n![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)",
        "courseF_artist_for10_2018_markdown_instruction": "**Free Play:** Try using the `counter` variable with other drawing elements to make magical images like this one.\n\n![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)",
        "courseF_artist_for1_2018_markdown_instruction": "**Free Play:** Experiment with the `for` loop and the `counter` variable.  \n\nDrag out a few blocks and see what happens.  \n",
        "courseF_artist_for2_markdown_instruction": "Use a `repeat` loop inside of a `for` loop to create this stack of triangles that goes from 50 pixel to 100 pixel sides.",
        "courseF_artist_for2_2018_markdown_instruction": "Use a `repeat` loop inside of a `for` loop to create this stack of triangles that goes from 50 pixel to 100 pixel sides.",
        "courseF_artist_for3_markdown_instruction": "Create these triangles that go from 20 pixel sides to 200 pixel sides, where each triangle is 20 pixels larger than the last.",
        "courseF_artist_for3_2018_markdown_instruction": "Create these triangles that go from 20 pixel sides to 200 pixel sides, where each triangle is 20 pixels larger than the last.",
        "courseF_artist_for5_markdown_instruction": "Just one little change to the code from the last image can create this drawing. Can you figure out what that change is?\n___\nHint:  You need to remove something!",
        "courseF_artist_for5_2018_markdown_instruction": "Just one little change to the code from the last image can create this drawing. Can you figure out what that change is?\n___\nHint:  You need to remove something!",
        "courseF_artist_for6_markdown_instruction": "If you turn a little bit more or less than you normally would for a shape, it creates a neat effect.\n\nRecreate your code from the last level, but turn 89 degrees to create this twisted square spiral.",
        "courseF_artist_for6_2018_markdown_instruction": "If you turn a little bit more or less than you normally would for a shape, it creates a neat effect.\n\nRecreate your code from the last level, but turn 89 degrees to create this twisted square spiral.",
        "courseF_artist_for7_markdown_instruction": "Make three small changes to the code from the last level to get this!  ",
        "courseF_artist_for7_2018_markdown_instruction": "Make three small changes to the code from the last level to get this!  ",
        "courseF_artist_for9_markdown_instruction": "**Inspiration:** Use the counter inside the `set alpha` block to get something like this faded center.  \n(This hexagon pattern was made using a 60 degree turn.)",
        "courseF_artist_for9_2018_markdown_instruction": "**Inspiration:** Use the counter inside the `set alpha` block to get something like this faded center.  \n(This hexagon pattern was made using a 60 degree turn.)",
        "courseF_artist_for_Template_markdown_instruction": "If you turn a little bit more or less than you normally would for a shape, it creates a neat effect.\n\nTry using some of the code from the last level, but turning 89 degrees to create this twisted square spiral.",
        "courseF_artist_for_Template_2018_markdown_instruction": "If you turn a little bit more or less than you normally would for a shape, it creates a neat effect.\n\nTry using some of the code from the last level, but turning 89 degrees to create this twisted square spiral.",
        "courseF_artist_for_challenge1_markdown_instruction": "Can you figure out how to re-create this drawing? \n\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\" width=\"350px\"/>",
        "courseF_artist_for_challenge1_2018_markdown_instruction": "Can you figure out how to re-create this drawing? \n\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\" width=\"350px\"/>",
        "courseF_artist_for_challenge2_markdown_instruction": "Can you figure out how to re-create this drawing with a single loop? \n\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\" width=\"350px\"/>",
        "courseF_artist_for_challenge2_2018_markdown_instruction": "Can you figure out how to re-create this drawing with a single loop? \n\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\" width=\"350px\"/>",
        "courseF_artist_fwp1_markdown_instruction": "Today, we're going to keep using the powerful function editor. See if you remember how to edit the `draw a square` function to find the bugs.",
        "courseF_artist_fwp1_2018_markdown_instruction": "Today, we're going to keep using the powerful function editor. See if you remember how to edit the `draw a square` function to find the bugs.",
        "courseF_artist_fwp2_markdown_instruction": "Edit the function to accept a parameter called `length`.  \n\nThe sides of each square should be 25 pixels larger than the last.  The first square has 25 pixel sides.",
        "courseF_artist_fwp2_2018_markdown_instruction": "Edit the function to accept a parameter called `length`.  \n\nThe sides of each square should be 25 pixels larger than the last.  The first square has 25 pixel sides.",
        "courseF_artist_fwp2_predict1_markdown_instruction": "Edit the function to accept a parameter called `length`.  \n\nThe sides of each square should be 25 pixels larger than the last.  The first square has 25 pixel sides. Replace the '???' with the correct values to draw the picture.",
        "courseF_artist_fwp2_predict1_2018_markdown_instruction": "Edit the function to accept a parameter called `length`.  \n\nThe sides of each square should be 25 pixels larger than the last.  The first square has 25 pixel sides. Replace the '???' with the correct values to draw the picture.",
        "courseF_artist_fwp3_markdown_instruction": "Now try creating the function from scratch!  \n\nCreate a function called `draw a square` and use it to outline these four boxes.  \nMake sure to add a parameter for `length`!\n\n___\nStarting from the upper right, the box widths are 50, 100, 150, and 200.",
        "courseF_artist_fwp3_2018_markdown_instruction": "Now try creating the function from scratch!  \n\nCreate a function called `draw a square` and use it to outline these four boxes.  \nMake sure to add a parameter for `length`!\n\n___\nStarting from the upper right, the box widths are 50, 100, 150, and 200.",
        "courseF_artist_fwp4_markdown_instruction": "Great job!  Now edit this function to add a parameter for the number of sides in your polygon.\n\nThe sides of all the shapes are 100 pixels long.",
        "courseF_artist_fwp4_2018_markdown_instruction": "Great job!  Now edit this function to add a parameter for the number of sides in your polygon.\n\nThe sides of all the shapes are 100 pixels long.",
        "courseF_artist_fwp5_markdown_instruction": "Use the function from the last puzzle to draw this series of shapes.  \n\n\nThe triangle has 21 pixel sides, and the sides in each following shape are 7 pixels longer than the last.   \nUse the `multiplication` block to make this all happen with just one function call.\n___\nThe `multipication` block looks like this <xml><block type=\"math_arithmetic\" inline=\"true\">\n      <title name=\"OP\">MULTIPLY</title>\n    </block></xml>",
        "courseF_artist_fwp5_2018_markdown_instruction": "Use the function from the last puzzle to draw this series of shapes.  \n\n\nThe triangle has 21 pixel sides, and the sides in each following shape are 7 pixels longer than the last.   \nUse the `multiplication` block to make this all happen with just one function call.\n___\nThe `multipication` block looks like this <xml><block type=\"math_arithmetic\" inline=\"true\">\n      <title name=\"OP\">MULTIPLY</title>\n    </block></xml>",
        "courseF_artist_fwp6_markdown_instruction": "**Challenge:** Edit `draw a spiral edge` to use `length` and `sides` parameters, then recreate these shapes.\n\n- The square goes from 3 pixels to 90 pixels.\n- The hexagon goes from 3 pixels to 100 pixels.\n- The triangle goes from 3 pixels to 95 pixels.",
        "courseF_artist_fwp6_2018_markdown_instruction": "**Challenge:** Edit `draw a spiral edge` to use `length` and `sides` parameters, then recreate these shapes.\n\n- The square goes from 3 pixels to 90 pixels.\n- The hexagon goes from 3 pixels to 100 pixels.\n- The triangle goes from 3 pixels to 95 pixels.",
        "courseF_artist_fwp7_markdown_instruction": "Finish off the `draw a spiral edge` function to also ask for a minimum length for the center of the spiral.\n\n- The smallest side in the center of this square is 50 pixels long\n- The longest side at the outside of this spiral is 200 pixels long",
        "courseF_artist_fwp7_2018_markdown_instruction": "Finish off the `draw a spiral edge` function to also ask for a minimum length for the center of the spiral.\n\n- The smallest side in the center of this square is 50 pixels long\n- The longest side at the outside of this spiral is 200 pixels long",
        "courseF_artist_fwp8_markdown_instruction": "Freeplay! Can you figure out how to make this drawing using the function that you just created?\n\n- The red spiral goes from 50 to 200 pixels\n- The blue spiral goes from 25 to 150 pixels\n- The green spiral goes from 100 to 350 pixels",
        "courseF_artist_fwp8_2018_markdown_instruction": "Freeplay! Can you figure out how to make this drawing using the function that you just created?\n\n- The red spiral goes from 50 to 200 pixels\n- The blue spiral goes from 25 to 150 pixels\n- The green spiral goes from 100 to 350 pixels",
        "courseF_artist_fwp9_markdown_instruction": "**Freeplay:** Below there are functions you've written, and more for you to play with. Play with the pen width to see how different your drawings look! Suggestions are in the hints!",
        "courseF_artist_fwp9_2018_markdown_instruction": "**Freeplay:** Below there are functions you've written, and more for you to play with. Play with the pen width to see how different your drawings look! Suggestions are in the hints!",
        "courseF_artist_fwp_challenge1_markdown_instruction": "Try running this program. Make changes to see what happens. Can you figure out how it works? You can also delete it and replace it with something totally different.",
        "courseF_artist_fwp_challenge1_2018_markdown_instruction": "Try running this program. Make changes to see what happens. Can you figure out how it works? You can also delete it and replace it with something totally different.",
        "courseF_artist_ramp10_markdown_instruction": "Did you know you can put loops inside of other loops to make them more powerful?  That's called making a \"nested loop\".\n\n___\n\nDrag the code for the last triangle into a new loop to spin it around and make a snowflake!\n\n*(You will need to spin it 6 times at 60 degrees to get this pattern.)*",
        "courseF_artist_ramp10_2018_markdown_instruction": "Did you know you can put loops inside of other loops to make them more powerful?  That's called making a \"nested loop\".\n\n___\n\nDrag the code for the last triangle into a new loop to spin it around and make a snowflake!\n\n*(You will need to spin it 6 times at 60 degrees to get this pattern.)*",
        "courseF_artist_ramp8_markdown_instruction": "Great!  Now let's make a square using Artist!  The blocks for artist are a little different than other puzzles, but the idea is the same.\n___\nEach side of the square has a length of 200 pixels, and you will need to turn 90 degrees to make each angle.",
        "courseF_artist_ramp8_2018_markdown_instruction": "Great!  Now let's make a square using Artist!  The blocks for artist are a little different than other puzzles, but the idea is the same.\n___\nEach side of the square has a length of 200 pixels, and you will need to turn 90 degrees to make each angle.",
        "courseF_artist_ramp9_markdown_instruction": "Use what you've learned to draw this triangle.\n___\n##### The sides are each 100 pixels long. You will need to turn 120 degrees at each corner.",
        "courseF_artist_ramp9_2018_markdown_instruction": "Use what you've learned to draw this triangle.\n___\n##### The sides are each 100 pixels long. You will need to turn 120 degrees at each corner.",
        "courseF_artist_variables10_markdown_instruction": "Here's your code from the last puzzle.  Try editing the variable in other ways.  \n-  What happens if you start out with `length` less than 150? \n-  What if you multiply your variable by 1.25 each time through?\n-  What will your code do if you turn 119 degrees?",
        "courseF_artist_variables10_2018_markdown_instruction": "Here's your code from the last puzzle.  Try editing the variable in other ways.  \n-  What happens if you start out with `length` less than 150? \n-  What if you multiply your variable by 1.25 each time through?\n-  What will your code do if you turn 119 degrees?",
        "courseF_artist_variables2_markdown_instruction": "Now use another loop to draw three of those triangles right next to each other.   \n\nYou can nest the code from your last puzzle inside.",
        "courseF_artist_variables2_2018_markdown_instruction": "Now use another loop to draw three of those triangles right next to each other.   \n\nYou can nest the code from your last puzzle inside.",
        "courseF_artist_variables3_markdown_instruction": "Before things get tricky, can you move the length of 50 into a variable so we can use it in the next few puzzles?  \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)",
        "courseF_artist_variables3_2018_markdown_instruction": "Before things get tricky, can you move the length of 50 into a variable so we can use it in the next few puzzles?  \n\n![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)",
        "courseF_artist_variables4_markdown_instruction": "Now, use the `length` variable to have the artist jump forward and down by `length` pixels between triangles.",
        "courseF_artist_variables4_2018_markdown_instruction": "Now, use the `length` variable to have the artist jump forward and down by `length` pixels between triangles.",
        "courseF_artist_variables6_markdown_instruction": "**OOPS!**  \n\nWe actually need the triangles to be 60 pixels wide, with 60 pixel jumps.  \n\nAren't you glad you're using a variable?",
        "courseF_artist_variables6_2018_markdown_instruction": "**OOPS!**  \n\nWe actually need the triangles to be 60 pixels wide, with 60 pixel jumps.  \n\nAren't you glad you're using a variable?",
        "courseF_artist_variables6a_markdown_instruction": "Use what you've learned to build this design where the squares have 80 pixel sides and the artist jumps 80 pixels over and down between each one.",
        "courseF_artist_variables6a_2018_markdown_instruction": "Use what you've learned to build this design where the squares have 80 pixel sides and the artist jumps 80 pixels over and down between each one.",
        "courseF_artist_variables7_markdown_instruction": "Let's start this section by drawing a triangle with 150 pixel sides. \n\nBe sure to use the `length` variable and a repeat loop.",
        "courseF_artist_variables7_2018_markdown_instruction": "Let's start this section by drawing a triangle with 150 pixel sides. \n\nBe sure to use the `length` variable and a repeat loop.",
        "courseF_artist_variables8_markdown_instruction": "Rebuild the triangle code from the last puzzle, but this time use the `set length to` block to reset the `length` variable to `length`+10 at the end of each loop iteration.\n\n<xml>\n<block type=\"variables_set\" inline=\"false\">\n                        <title name=\"VAR\">length</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_arithmetic\" inline=\"true\">\n                            <title name=\"OP\">ADD</title>\n                            <value name=\"A\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">length</title>\n                              </block>\n                            </value>\n                            <value name=\"B\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">10</title>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n</xml>\n\nThe length of the first side of the triangle is 150 pixels.",
        "courseF_artist_variables8_2018_markdown_instruction": "Rebuild the triangle code from the last puzzle, but this time use the `set length to` block to reset the `length` variable to `length`+10 at the end of each loop iteration.\n\n<xml>\n<block type=\"variables_set\" inline=\"false\">\n                        <title name=\"VAR\">length</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_arithmetic\" inline=\"true\">\n                            <title name=\"OP\">ADD</title>\n                            <value name=\"A\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">length</title>\n                              </block>\n                            </value>\n                            <value name=\"B\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">10</title>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n</xml>\n\nThe length of the first side of the triangle is 150 pixels.",
        "courseF_artist_variables9_markdown_instruction": "Time to make some art!  \n\nSee what happens when you repeat the code from the last puzzle **30** times instead of only 3!\n\nFeel free to make your lines any color or pattern for some extra zest.",
        "courseF_artist_variables9_2018_markdown_instruction": "Time to make some art!  \n\nSee what happens when you repeat the code from the last puzzle **30** times instead of only 3!\n\nFeel free to make your lines any color or pattern for some extra zest.",
        "courseF_artist_variablesFP_markdown_instruction": "**Freeplay:** Take what you've learned and make your own drawing. \n\nHow can you use variables with squares, pentagons, or hexagons?",
        "courseF_artist_variablesFP_2018_markdown_instruction": "**Freeplay:** Take what you've learned and make your own drawing. \n\nHow can you use variables with squares, pentagons, or hexagons?",
        "courseF_artist_variables_10_markdown_instruction": "Here's your code from the last puzzle.  Try editing the variable in other ways.  \n-  What happens if you start out with `length` less than 150? \n-  What if you multiply your variable by 1.25 each time through?\n-  What will your code do if you turn 119 degrees?",
        "courseF_artist_variables_2_markdown_instruction": "Now use another loop to draw three of those triangles right next to each other.   \n\nYou can nest the code from your last puzzle inside.",
        "courseF_artist_variables_3_markdown_instruction": "Before things get tricky, can you move the length of 50 into a variable so we can use it in the next few puzzles?  \n<br/>\n\n<img src=\"https://images.code.org/e6eac1f6aeb68a9a7584516e28663c14-image-1477533059853.gif\" width=\"65%\"/>",
        "courseF_artist_variables_4_markdown_instruction": "Now, use the `length` variable to have the artist jump forward and down by `length` pixels between triangles.",
        "courseF_artist_variables_5_markdown_instruction": "Add another set of loops at the end of your code to add three more triangles. This time, move forward and up!",
        "courseF_artist_variables_6_markdown_instruction": "OOPS! We actually need the triangles to be 60 pixels wide, with 60 pixel jumps.  \nAren't you glad you're using a variable?",
        "courseF_artist_variables_6a_markdown_instruction": "Use what you've learned to build this design where the squares have 80 pixel sides and the artist jumps 80 pixels over and down between each one.",
        "courseF_artist_variables_7_markdown_instruction": "Let's start this section by drawing a triangle with 150 pixels sides. \n\nBe sure to use the `length` variable and a repeat loop.",
        "courseF_artist_variables_8_markdown_instruction": "Rebuild the triangle code from the last puzzle, but this time use the `set length to` block to reset the `length` variable to `length`+10 at the end of each loop iteration.\n\n![](https://images.code.org/6525bebee31ee15b84a48761b2866f53-image-1477531948829.31.37.png)",
        "courseF_artist_variables_9_markdown_instruction": "Time to make some art!  \nSee what happens when you repeat the code from the last puzzle 30 times instead of only 3!\n\nFeel free to make your lines any color or pattern for some extra zest.",
        "courseF_artist_variables_FP_markdown_instruction": "**Freeplay:** Take what you've learned and make your own drawing. \n\nHow can you use variables with squares, pentagons, or hexagons?",
        "courseF_artist_variables_challenge1_markdown_instruction": "Challenge alert! Can you create a `length` variable and use it to create this interesting pattern?",
        "courseF_artist_variables_challenge1_2018_markdown_instruction": "Challenge alert! Can you create a `length` variable and use it to create this interesting pattern?",
        "courseF_artist_variables_challenge1a_markdown_instruction": "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\" width=\"250px\"/>\n\nYou've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?",
        "courseF_artist_variables_challenge2_markdown_instruction": "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\" width=\"250px\"/>\n\nYou've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?",
        "courseF_artist_variables_challenge2_2018_markdown_instruction": "<img src=\"https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png\" width=\"250px\"/>\n\nYou've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?",
        "courseF_artistembed_variables9_markdown_instruction": "Time to make some art!  \n\nSee what happens when you repeat the code from the last puzzle **30** times instead of only 3!\n\nFeel free to make your lines any color or pattern for some extra zest.",
        "courseF_bee_conditionals10_markdown_instruction": "Conditionals can be helpful, even when you know exactly what is in each spot!\n\nCollect all of the nectar and make all of the honey.",
        "courseF_bee_conditionals10_2018_markdown_instruction": "Conditionals can be helpful, even when you know exactly what is in each spot!\n\nCollect all of the nectar and make all of the honey.",
        "courseF_bee_conditionals1_predict1_markdown_instruction": "*\"This cloud is blocking my view!\"*\n\nCheck to see if there's a flower under the cloud. If there's a flower, get nectar.",
        "courseF_bee_conditionals1_predict1_2018_markdown_instruction": "*\"This cloud is blocking my view!\"*\n\nCheck to see if there's a flower under the cloud. If there's a flower, get nectar.",
        "courseF_bee_conditionals2_markdown_instruction": "*\"It's too cloudy to see any flowers!\"*\n\nCheck underneath every cloud to see if it is hiding a flower before you get nectar. If there is a flower underneath the cloud, the bee will need to get nectar **once**.  \n\nRemember: Not all clouds hide the same thing!",
        "courseF_bee_conditionals2_2018_markdown_instruction": "*\"It's too cloudy to see any flowers!\"*\n\nCheck underneath every cloud to see if it is hiding a flower before you get nectar. If there is a flower underneath the cloud, the bee will need to get nectar **once**.  \n\nRemember: Not all clouds hide the same thing!",
        "courseF_bee_conditionals3_markdown_instruction": "You can only collect nectar from flowers, but you can check any space to see if there is a flower. If there is a flower under any of these clouds, the bee will need to collect nectar **once**.",
        "courseF_bee_conditionals3_2018_markdown_instruction": "You can only collect nectar from flowers, but you can check any space to see if there is a flower. If there is a flower under any of these clouds, the bee will need to collect nectar **once**.",
        "courseF_bee_conditionals4_markdown_instruction": "In this puzzle, we know that every flower has exactly one nectar, but the flowers aren't spaced evenly.\n\nGet all of the nectar using as few blocks as possible.",
        "courseF_bee_conditionals4_2018_markdown_instruction": "In this puzzle, we know that every flower has exactly one nectar, but the flowers aren't spaced evenly.\n\nGet all of the nectar using as few blocks as possible.",
        "courseF_bee_conditionals7_predict2_markdown_instruction": "Sometimes a cloud covers a flower, sometimes it covers a honeycomb!\n\nUse the `if/else` block to collect nectar at flowers and make honey at honeycomb.",
        "courseF_bee_conditionals7_predict2_2018_markdown_instruction": "Sometimes a cloud covers a flower, sometimes it covers a honeycomb!\n\nUse the `if/else` block to collect nectar at flowers and make honey at honeycomb.",
        "courseF_bee_conditionals8_markdown_instruction": "**Challenge:** There will be either a flower or a honeycomb under each of those clouds!\n\nCollect nectar once if there is a flower. Otherwise, make honey once (because there is a honeycomb).",
        "courseF_bee_conditionals8_2018_markdown_instruction": "**Challenge:** There will be either a flower or a honeycomb under each of those clouds!\n\nCollect nectar once if there is a flower. Otherwise, make honey once (because there is a honeycomb).",
        "courseF_bee_for10_markdown_instruction": "**Challenge:** Take what you've learned about `for` loops and try to solve this problem. \n\nRemember: You may have to run through solutions multiple times before you figure out all of the steps.",
        "courseF_bee_for10_2018_markdown_instruction": "**Challenge:** Take what you've learned about `for` loops and try to solve this problem. \n\nRemember: You may have to run through solutions multiple times before you figure out all of the steps.",
        "courseF_bee_for11_markdown_instruction": "If your loop is counting down, the increment is **subtracted** from your counter variable each time through. \n\nWhat should your increment be to collect 15, then 12, then 9, 6, 3 nectar?",
        "courseF_bee_for11_2018_markdown_instruction": "If your loop is counting down, the increment is **subtracted** from your counter variable each time through. \n\nWhat should your increment be to collect 15, then 12, then 9, 6, 3 nectar?",
        "courseF_bee_for2_markdown_instruction": "Write the code to help the bee collect all of the nectar.\n\nYou will need lots of blocks for this challenge, but we'll learn an easier way in the next puzzle.",
        "courseF_bee_for2_2018_markdown_instruction": "Write the code to help the bee collect all of the nectar.\n\nYou will need lots of blocks for this challenge, but we'll learn an easier way in the next puzzle.",
        "courseF_bee_for3_markdown_instruction": "Ah, the `for` loop makes this much easier!  \n\nTry this puzzle using the `for` loop and the `counter` variable to see how much shorter your code becomes.",
        "courseF_bee_for6_markdown_instruction": "You can also use a `for` loop to count down. \n\nTry gathering this nectar by counting down from **5** to **1** by **1**.",
        "courseF_bee_for6_2018_markdown_instruction": "You can also use a `for` loop to count down. \n\nTry gathering this nectar by counting down from **5** to **1** by **1**.",
        "courseF_bee_for7_markdown_instruction": "The last number in your `for` loop is called the **\"increment\"**.  Each time the loop is run, the counter variable changes by the value of the **increment**.\n\nTry collecting these flowers using an **increment** of 2.",
        "courseF_bee_for7_2018_markdown_instruction": "The last number in your `for` loop is called the **\"increment\"**.  Each time the loop is run, the counter variable changes by the value of the **increment**.\n\nTry collecting these flowers using an **increment** of 2.",
        "courseF_bee_for8_markdown_instruction": "You've got this!  \n\nWhat should your **increment** be to collect 3, 6, 9, 12, 15 nectar?\n",
        "courseF_bee_for8_2018_markdown_instruction": "You've got this!  \n\nWhat should your **increment** be to collect 3, 6, 9, 12, 15 nectar?\n",
        "courseF_bee_for9_markdown_instruction": "Now, let's combine the `counter` variable with a `math` block! \n\nHow can you use the `counter` variable to navigate this garden with the fewest number of blocks possible?",
        "courseF_bee_for9_2018_markdown_instruction": "Now, let's combine the `counter` variable with a `math` block! \n\nHow can you use the `counter` variable to navigate this garden with the fewest number of blocks possible?",
        "courseF_bee_for_challenge1_markdown_instruction": "You can use this `for loop` to collect all of the nectar. Un-bee-lievable!\n\nThere are a few actions that you will want to `repeat 'counter' times`.",
        "courseF_bee_for_challenge1_2018_markdown_instruction": "You can use this `for loop` to collect all of the nectar. Un-bee-lievable!\n\nThere are a few actions that you will want to `repeat 'counter' times`.",
        "courseF_bee_for_challenge2_markdown_instruction": "Solve this puzzle with the fewest number of blocks possible.",
        "courseF_bee_for_challenge2_2018_markdown_instruction": "Solve this puzzle with the fewest number of blocks possible.",
        "courseF_bee_for_challenge3_markdown_instruction": "**For-Loops Super Challenge:** Solve this puzzle with the fewest number of blocks possible.",
        "courseF_bee_functions2_markdown_instruction": "To make things easier, it's time to learn about functions!\n\nFrom here on out, you will be using a new *function editor*.  This editor is a separate window that will appear when you go to edit a function.  You won't see all of the code from your function while you're coding in the workspace, but don't worry...it's still there!  \n___\n\nLet's practice with this function that gets nectar only if the bee is at a flower.  To see the code inside, click the blue \"edit\" button!\n\nUse the `get only nectar` function to collect the nectar from each flower.",
        "courseF_bee_functions2_2018_markdown_instruction": "To make things easier, it's time to learn about functions!\n\nFrom here on out, you will be using a new *function editor*.  This editor is a separate window that will appear when you go to edit a function.  You won't see all of the code from your function while you're coding in the workspace, but don't worry...it's still there!  \n___\n\nLet's practice with this function that gets nectar only if the bee is at a flower.  To see the code inside, click the blue \"edit\" button!\n\nUse the `get only nectar` function to collect the nectar from each flower.",
        "courseF_bee_functions3_markdown_instruction": "Now it's your turn to make a function to get some honey **only** if there is a honeycomb!  Click \"edit\" to build the `only make honey` function, then use it to solve this puzzle.",
        "courseF_bee_functions3_2018_markdown_instruction": "Now it's your turn to make a function to get some honey **only** if there is a honeycomb!  Click \"edit\" to build the `only make honey` function, then use it to solve this puzzle.",
        "courseF_bee_functions3a_markdown_instruction": "Each cloud could be hiding either one flower or one honeycomb!  Write a function that gets nectar if the bee is at a flower, otherwise it gets honey.\n\nUse your function to solve the puzzle!",
        "courseF_bee_functions3a_2018_markdown_instruction": "Each cloud could be hiding either one flower or one honeycomb!  Write a function that gets nectar if the bee is at a flower, otherwise it gets honey.\n\nUse your function to solve the puzzle!",
        "courseF_bee_functions4_markdown_instruction": "Did you know that you can call a function from *inside* another function?  \n\nUse your `check nectar or honey` function inside the new `move and check` function to help the bee turn, go get what's under the cloud, then back-up and turn back around!",
        "courseF_bee_functions4_2018_markdown_instruction": "Did you know that you can call a function from *inside* another function?  \n\nUse your `check nectar or honey` function inside the new `move and check` function to help the bee turn, go get what's under the cloud, then back-up and turn back around!",
        "courseF_bee_functions5a_markdown_instruction": "Now, build `move and check` so that it takes the bee to the cloud whenever there is a path to the right, then use it to solve this puzzle!",
        "courseF_bee_functions5a_2018_markdown_instruction": "Now, build `move and check` so that it takes the bee to the cloud whenever there is a path to the right, then use it to solve this puzzle!",
        "courseF_bee_functions6_markdown_instruction": "*\"This field is a-MAZE-ing!\"*\n\nBuild your own function to help the bee through the maze by turning left at flowers and right at honeycomb.  Don't forget to collect nectar and make honey along the way!",
        "courseF_bee_functions6_2018_markdown_instruction": "*\"This field is a-MAZE-ing!\"*\n\nBuild your own function to help the bee through the maze by turning left at flowers and right at honeycomb.  Don't forget to collect nectar and make honey along the way!",
        "courseF_bee_functions7_markdown_instruction": "Rebuild your function from the last puzzle to solve this maze.\n\nTurn left at the honeycomb and right at the flowers.  \n**Note:** Some corners are unmarked!",
        "courseF_bee_functions7_2018_markdown_instruction": "Rebuild your function from the last puzzle to solve this maze.\n\nTurn left at the honeycomb and right at the flowers.  \n**Note:** Some corners are unmarked!",
        "courseF_bee_functions8a_markdown_instruction": "Underneath this cloud, there might be a flower with an unknown amount of nectar, or a honeycomb with an unknown amount of honey.  \n\nCan you write a program that can handle either?",
        "courseF_bee_functions8a_2018_markdown_instruction": "Underneath this cloud, there might be a flower with an unknown amount of nectar, or a honeycomb with an unknown amount of honey.  \n\nCan you write a program that can handle either?",
        "courseF_bee_functionsPre7_markdown_instruction": "Now try building a function to solve this maze.  How is it different from last time?  \n\nTurn left at the honeycomb and right at the flowers.  \n**Note:** Some corners are unmarked!",
        "courseF_bee_functionsPre7_2018_markdown_instruction": "Now try building a function to solve this maze.  How is it different from last time?  \n\nTurn left at the honeycomb and right at the flowers.  \n**Note:** Some corners are unmarked!",
        "courseF_bee_functions_3_2018_markdown_instruction": "*\"Such an a-MAZE-ing garden!\"*\n\nIn this puzzle, each patch needs the variable to be one less than the patch before. Subtract one from the variable each time through the loop if you want to use the same function to solve this level.",
        "courseF_bee_functions_challenge1_markdown_instruction": "Create a new function to collect all the nectar and honey while there is a path ahead. Use it to complete the puzzle!",
        "courseF_bee_functions_challenge1_2018_markdown_instruction": "Create a new function to collect all the nectar and honey while there is a path ahead. Use it to complete the puzzle!",
        "courseF_bee_functions_challenge2_markdown_instruction": "Use everything you have learned to complete this puzzle!",
        "courseF_bee_functions_challenge2_2018_markdown_instruction": "Use everything you have learned to complete this puzzle!",
        "courseF_bee_functions_challenge2_recursion_markdown_instruction": "Underneath this cloud, there might be a flower with an unknown amount of nectar, or a honeycomb with an unknown amount of honey.  \n\nCan you write a program that can handle either?",
        "courseF_bee_fwp1_markdown_instruction": "Check beneath the clouds to see if the flowers have any nectar.  \n\nFor this whole stage, each flower will have exactly **one** unit of nectar, and each honeycomb will need exactly **one** unit of honey. \n\n\n",
        "courseF_bee_fwp1_2018_markdown_instruction": "Check beneath the clouds to see if the flowers have any nectar.  \n\nFor this whole stage, each flower will have exactly **one** unit of nectar, and each honeycomb will need exactly **one** unit of honey. \n\n\n",
        "courseF_bee_fwp2_markdown_instruction": "Here's some code that solves the last puzzle.  \nLet's pull it into a function, then call the function to check this row for nectar.  \n___\nThis may seem like a strange step now, but it will be really helpful soon!",
        "courseF_bee_fwp2_2018_markdown_instruction": "Here's some code that solves the last puzzle.  \nLet's pull it into a function, then call the function to check this row for nectar.  \n___\nThis may seem like a strange step now, but it will be really helpful soon!",
        "courseF_bee_fwp3_markdown_instruction": "Time to put the function to the test! \n\nLet's see if it makes collecting these three rows of nectar any easier.",
        "courseF_bee_fwp3_2018_markdown_instruction": "Time to put the function to the test! \n\nLet's see if it makes collecting these three rows of nectar any easier.",
        "courseF_bee_fwp4_markdown_instruction": "*\"How is your function holding up?\"*   \n\nWe need to make some adjustments here. Click \"edit\" to add a `length` parameter to the function so that it will still work when the row is a different length.",
        "courseF_bee_fwp4_2018_markdown_instruction": "*\"How is your function holding up?\"*   \n\nWe need to make some adjustments here. Click \"edit\" to add a `length` parameter to the function so that it will still work when the row is a different length.",
        "courseF_bee_fwp5_markdown_instruction": "*\"You're doing great so far!\"*\n\nLet's use this function to collect the nectar.",
        "courseF_bee_fwp5_2018_markdown_instruction": "*\"You're doing great so far!\"*\n\nLet's use this function to collect the nectar.",
        "courseF_bee_fwp6_markdown_instruction": "You can make code shorter and more efficient when you combine functions with other programming elements.  \n___\nWhat blocks can you use with your function to build a short and sweet solution to this puzzle?",
        "courseF_bee_fwp6_2018_markdown_instruction": "You can make code shorter and more efficient when you combine functions with other programming elements.  \n___\nWhat blocks can you use with your function to build a short and sweet solution to this puzzle?",
        "courseF_bee_fwp7_markdown_instruction": "**Challenge:** Something looks a little different. Modify your function to make honey as well.",
        "courseF_bee_fwp7_2018_markdown_instruction": "**Challenge:** Something looks a little different. Modify your function to make honey as well.",
        "courseF_bee_fwp_challenge1_markdown_instruction": "Use one `for loop` in a function to collect all of the corn. The same `for loop` can count to different maximum values by using the `length` parameter.",
        "courseF_bee_fwp_challenge1_2018_markdown_instruction": "Use one `for loop` in a function to collect all of the corn. The same `for loop` can count to different maximum values by using the `length` parameter.",
        "courseF_bee_fwp_challenge2_markdown_instruction": "*\"**Lettuce** see if you can handle this one final test! Give it everything you've got!\"*\n\nUse one `for loop` in a function to collect all of the vegetables in the row. Make the `for loop` count to different maximum values by using the `length` parameter. Make your program as short as possible by using a second `for loop` outside the function.\n\nGood luck!",
        "courseF_bee_fwp_challenge2_2018_markdown_instruction": "*\"**Lettuce** see if you can handle this one final test! Give it everything you've got!\"*\n\nUse one `for loop` in a function to collect all of the vegetables in the row. Make the `for loop` count to different maximum values by using the `length` parameter. Make your program as short as possible by using a second `for loop` outside the function.\n\nGood luck!",
        "courseF_bee_variables_3_2018_markdown_instruction": "*\"Such an a-MAZE-ing garden!\"*\n\nIn this puzzle, each patch needs the variable to be one less than the patch before. Subtract one from the variable each time through the loop if you want to use the same function to solve this level.",
        "courseF_bee_variables_4_2018_markdown_instruction": "\"Un-BEE-lievable!\"\n\nEdit the code to make it work for this puzzle.",
        "courseF_maze_ramp1_markdown_instruction": "For this puzzle, connect all of the blocks from the workspace together below the <xml><block type=\"when_run\"/></xml> block and click \"Run\" to watch it go!",
        "courseF_maze_ramp13_markdown_instruction": "Time for another Angry Birds puzzle to pull it all together!\n\nUse nested loops to get the bird to the pig.",
        "courseF_maze_ramp15_markdown_instruction": "*\"It's time to get angry!\"*\n\n**Challenge:** Use what you've learned to get the bird to the pig!",
        "courseF_maze_ramp1_2018_markdown_instruction": "For this puzzle, connect all of the blocks from the workspace together below the <xml><block type=\"when_run\"/></xml> block and click \"Run\" to watch it go!",
        "courseF_maze_ramp2_markdown_instruction": "Drag a <xml><block type=\"controls_repeat\"><title name=\"TIMES\">7</title></block></xml> block out of the toolbox and attach it to the <xml><block type=\"when_run\"/></xml> event.\n\nPlace the <xml><block type=\"maze_moveForward\"/></xml> block inside the loop to finish your code.",
        "courseF_maze_ramp2_2018_markdown_instruction": "Drag a <xml><block type=\"controls_repeat\"><title name=\"TIMES\">7</title></block></xml> block out of the toolbox and attach it to the <xml><block type=\"when_run\"/></xml> event.\n\nPlace the <xml><block type=\"maze_moveForward\"/></xml> block inside the loop to finish your code.",
        "courseF_maze_ramp4_markdown_instruction": "*\"Trace the path and lead me to the silly pig.\"* \n\nAvoid TNT or feathers will fly!",
        "courseF_maze_ramp4_2018_markdown_instruction": "*\"Trace the path and lead me to the silly pig.\"* \n\nAvoid TNT or feathers will fly!",
        "courseF_maze_ramp5_markdown_instruction": "*\"Follow this path to get me to the pig!\"*\n\nAvoid the TNT.",
        "courseF_maze_ramp5_2018_markdown_instruction": "*\"Follow this path to get me to the pig!\"*\n\nAvoid the TNT.",
        "courseF_maze_ramp6_markdown_instruction": "*\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"*\n\nWhen you have several blocks in a row, try moving them inside of a <xml><block type=\"controls_repeat\"><title name=\"TIMES\">???</title></block></xml> loop.  This will do the same thing with less code!",
        "courseF_maze_ramp6_2018_markdown_instruction": "*\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"*\n\nWhen you have several blocks in a row, try moving them inside of a <xml><block type=\"controls_repeat\"><title name=\"TIMES\">???</title></block></xml> loop.  This will do the same thing with less code!",
        "courseF_maze_ramp7_markdown_instruction": "*\"It's time to get angry!\"*\n\n**Challenge:** Use what you've learned to get the bird to the pig!",
        "courseF_playlab_brokenText_markdown_instruction": "In the rest of this stage, we will use multiple `ask` blocks and multiple `if/else` statements to create a game that **you** control!\n\nStart by setting the \"codename\" variable to a word that you can remember.  Then, use an `ask` block to get a codename from the users.  You will need an `if/else` block to see if the codename entered matches the codename that you have set.",
        "courseF_playlab_variables0_markdown_instruction": "This is Pirate Pegleg.  He's awfully hard to understand these days!  \n\nDecode his speech by changing these pieces of text in the code:\n- \"arrrg\" should be \"a\" \n- \"ye\" should be \"e\"\n\n",
        "courseF_playlab_variables1_markdown_instruction": "This is Pirate Pegleg.  He's awfully hard to understand these days!  \n\nDecode his speech by changing these pieces of text in the code:\n- \"arrrg\" should be \"a\" \n- \"ye\" should be \"e\"\n\n",
        "courseF_playlab_variables1a_markdown_instruction": "Variables can be used to store text that you want to use later.  \n\nHave Kiki, the soccer player,  scream \"Goal!\" by assigning that text to the `shout` variable.",
        "courseF_playlab_variables1a_2018_markdown_instruction": "Variables can be used to store text that you want to use later.  \n\nHave Kiki, the soccer player,  scream \"Goal!\" by assigning that text to the `shout` variable.",
        "courseF_playlab_variables2_markdown_instruction": "Now, decode Pirate Pegleg's speech by changing the value of the variables in just two places!   \n- \"arrrg\" should be \"a\" \n- \"ye\" should be \"e\"\n\n",
        "courseF_playlab_variables2a_markdown_instruction": "Now, decode Pirate Pegleg's speech by changing the value of the variables in just two places!   \n- \"arrrg\" should be \"a\" \n- \"ye\" should be \"e\"\n\n",
        "courseF_playlab_variables2b RYAN CLONE_markdown_instruction": "We can make sentences more interesting by mixing pieces of text with variables.\n\nInsert the variable `color` into the middle of a sentence by putting it into the empty slot in the `join` block.",
        "courseF_playlab_variables2b_markdown_instruction": "We can make sentences more interesting by mixing pieces of text with variables.\n\nInsert the variable `color` into the middle of a sentence by putting it into the empty slot in the `join` block.",
        "courseF_playlab_variables2b_2018_markdown_instruction": "We can make sentences more interesting by mixing pieces of text with variables.\n\nInsert the variable `color` into the middle of a sentence by putting it into the empty slot in the `join` block.",
        "courseF_playlab_variables3_markdown_instruction": "Great!  Now that you understand how to have a character use a variable to speak, we can introduce the `ask` block.  \n\nThe `ask` block will automatically store whatever the user answers into the variable of your choice.  \n\nRun this program and enter something for Pegleg to say.\n\n",
        "courseF_playlab_variables3b_markdown_instruction": "Help Kiki have a conversation with Brian by using the variable `age` in all of the places where age `12` should be used. ",
        "courseF_playlab_variables3bEdit_markdown_instruction": "Help Kiki have a conversation with Brian by using the variable `A1` in all of the places where age `12` should be used. ",
        "courseF_playlab_variables3b_josh_markdown_instruction": "Help Kiki have a conversation with Brian by using the variable `age` in all of the places where age `12` should be used. ",
        "courseF_playlab_variables3b_josh_2018_markdown_instruction": "Help Kiki have a conversation with Brian by using the variable `age` in all of the places where age `12` should be used. ",
        "courseF_playlab_variables4_markdown_instruction": "Now we're going to join a variable to the beginning of Pegleg's next sentence using the `create text with` block. \n\nCan you find the correct variable in the toolbox to fill in the slot?\n\n",
        "courseF_playlab_variables4b_markdown_instruction": "Now, Pirate Pegleg has some questions for Brian.\n\nThis code uses an `ask` block, so you can type Brian's answers after you click \"Run\". \n\nPut the variables in the correct places to create this conversation.",
        "courseF_playlab_variables4b_2018_markdown_instruction": "Now, Pirate Pegleg has some questions for Brian.\n\nThis code uses an `ask` block, so you can type Brian's answers after you click \"Run\". \n\nPut the variables in the correct places to create this conversation.",
        "courseF_playlab_variables5_markdown_instruction": "Now we're going to add a variable into the middle of Pegleg's sentence using more than one `create text with` block. \n\nHere is how you link `create text with` blocks together to form longer sentences:\n\n![](https://images.code.org/1c9bdc9e73d60b5ed053c3c4e9e1dcd4-image-1476993588379.gif)",
        "courseF_playlab_variables5b_markdown_instruction": "Pirate Pegleg is going to ask **you** some questions.\n\nPut all of the variables in the correct place so that his story makes sense.",
        "courseF_playlab_variables5c RYAN Copy_markdown_instruction": "Let's combine the `ask` block with an `if/else` statement to make a game!\n\nPirate Pegleg is going to ask you a question.  Drag a copy of the `answer` variable into the conditional for the `if` statement to check whether or not you entered the correct color.",
        "courseF_playlab_variables5c_markdown_instruction": "Let's combine the `ask` block with an `if/else` statement to have some fun!\n\nPirate Pegleg is going to ask you a question.  Drag a copy of the `answer` variable into the conditional for the `if` statement to check whether or not you entered the correct color.",
        "courseF_playlab_variables5c_2018_markdown_instruction": "Let's combine the `ask` block with an `if/else` statement to have some fun!\n\nPirate Pegleg is going to ask you a question.  Drag a copy of the `answer` variable into the conditional for the `if` statement to check whether or not you entered the correct color.",
        "courseF_playlab_variables6b_markdown_instruction": "You cannot fit much text in an actor's speech bubble, so sometimes you need to make the actor say something more than once.  \n\nWe have provided some starter questions and variables for you. Join them together to make a fun story that takes more than one speech bubble to tell.",
        "courseF_playlab_variables6c_markdown_instruction": "In the rest of this stage, we will use multiple `ask` blocks and multiple `if/else` statements to create a game that **you** control!\n\nStart by setting the \"codename\" variable to a word that you can remember.  Then, use an `ask` block to get a codename from the users.  You will need an `if/else` block to see if the codename entered matches the codename that you have set.",
        "courseF_playlab_variables6c_2018_markdown_instruction": "In the rest of this stage, we will use multiple `ask` blocks and multiple `if/else` statements to create a game that **you** control!\n\nStart by setting the \"codename\" variable to a word that you can remember.  Then, use an `ask` block to get a codename from the users.  You will need an `if/else` block to see if the codename entered matches the codename that you have set.",
        "courseF_playlab_variables7b_markdown_instruction": "Time to make your own project!  \n\nCreate some questions and weave the answers together into your very own story.\n\nIf you need ideas, click the hints icon.",
        "courseF_playlab_variables7b_2018_markdown_instruction": "Time to make your own project!  \n\nCreate some questions and weave the answers together into your very own story.\n\nIf you need ideas, click the hints icon.",
        "courseF_playlab_variables7c_markdown_instruction": "Add another `ask` block to ask the user to guess a color.  \n\nKeep your `if/else` statement such that your codename always wins the game, but every other codename always loses.",
        "courseF_playlab_variables7c_2018_markdown_instruction": "Add another `ask` block to ask the user to guess a color.  \n\nKeep your `if/else` statement such that your codename always wins the game, but every other codename always loses.",
        "courseF_playlab_variables8b_markdown_instruction": "Use what you've learned to create an improv scene between the actors.\n\n**Improv:** *A scene that actors make up on stage using information from the audience.*",
        "courseF_playlab_variables8c_markdown_instruction": "Use the `join` block (in the toolbox under \"Text\") to make the win/lose messages more personal by incorporating both the `codename` and the `color` variables into the responses.",
        "courseF_playlab_variables8c_2018_markdown_instruction": "Use the `join` block (in the toolbox under \"Text\") to make the win/lose messages more personal by incorporating both the `codename` and the `color` variables into the responses.",
        "courseF_playlab_variables_challenge1_markdown_instruction": "Use these blocks to make the actors share a knock-knock joke. Change the punchline and setup to tell your own joke!",
        "courseF_playlab_variables_challenge1_2018_markdown_instruction": "Use these blocks to make the actors share a knock-knock joke. Change the punchline and setup to tell your own joke!",
        "courseF_playlab_variables_challenge2_markdown_instruction": "Now for a game of tag! Tag Cat (actor 2) to get 2 points. Tag Penguin (actor 3) to get 3 points.  Get exactly 10 points to win!  \n \nBut be careful, when Cat and Penguin tag each other, they take points away.\n\n---\n\nAdd the blocks necessary to make this game work the way it's been explained.\n- How will you get Dog to move in all directions using the arrow keys?\n- How will you add points when Dog tags Cat or Penguin?\n- How will you subtract points when Cat and Penguin touch?",
        "courseF_playlab_variables_challenge2_2018_markdown_instruction": "Now for a game of tag! Tag Cat (actor 2) to get 2 points. Tag Penguin (actor 3) to get 3 points.  Get exactly 10 points to win!  \n \nBut be careful, when Cat and Penguin tag each other, they take points away.\n\n---\n\nAdd the blocks necessary to make this game work the way it's been explained.\n- How will you get Dog to move in all directions using the arrow keys?\n- How will you add points when Dog tags Cat or Penguin?\n- How will you subtract points when Cat and Penguin touch?",
        "courseF_playlab_variables_challenge3_markdown_instruction": "Can you figure out how this \"Fortune Teller\" app works? Try adding some of the following features to this game:\n\n* Change the \"yes\" and \"no\" answers to something more interesting.\n* Let the player ask another question after the actor says the fortune.\n* Give the witch two more things to say when she is in an `angry` or `normal` mood.\n* Give the wizard his own set of fortunes.\n* Make each actor change mood randomly.\n\nCheck the hints if you need help with these challenges!",
        "course_playlab_variables1_markdown_instruction": "This is Pirate Pegleg.  He's awfully hard to understand these days!  \n\nDecode his speech by changing these pieces of text in the code:\n- \"arrrg\" should be \"a\" \n- \"ye\" should be \"e\"\n\n",
        "course_playlab_variables2_markdown_instruction": "Now, decode Pirate Pegleg's speech by changing the value of the variables in just two places!   \n- \"arrrg\" should be \"a\" \n- \"ye\" should be \"e\"\n\n",
        "course_playlab_variables3_markdown_instruction": "Now, decode Pirate Pegleg's speech by changing the value of the variables in just two places!   \n- \"arrrg\" should be \"a\" \n- \"ye\" should be \"e\"\n\n",
        "coursea_maze_ramp1_2018_markdown_instruction": "To get the bird to the pig, snap the <xml><block type=\"maze_moveEast\"/></xml> block to the bottom of the <xml><block type=\"when_run\"/></xml> block, then press \"▶ Run\"!",
        "coursef_maze_ramp3_markdown_instruction": "*\"This pig is ruffling my feathers.\"*\n\nThere is one extra block that is going to cause the bird to crash.  \nThrow it away by dragging it back to the toolbox.",
        "coursef_maze_ramp3_2018_markdown_instruction": "*\"This pig is ruffling my feathers.\"*\n\nThere is one extra block that is going to cause the bird to crash.  \nThrow it away by dragging it back to the toolbox.",
        "cp1dlp-q1_markdown_instruction": "<br><br>\n\n# Unit 1 - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:**How would you respond to a teacher who says, “I’m thinking about skipping Lesson 4? Some of my kids already know binary and I don’t want them to be bored”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd u5 recommender sample_markdown_instruction": "# Sample App\n\nHere is an example of an app that uses data to help the user solve a problem.  With a partner, play through the app a few times to see how it works.\n\nDiscuss the following questions with your partner:\n\n* What choice does the app help the user to make? \n* What data does it use to make that recommendation?\n* How do you think the creators of the app decided on the algorithm that they use to make the choice?",
        "csd-post-survey-2017-FR_markdown_instruction": "Anything else you'd like to say about your experience in the course?",
        "csd-post-survey-2017-FR_2018_markdown_instruction": "Please provide any other feedback you have about your experience in the course.",
        "csd-post-survey-2018-topics-liked-FR_markdown_instruction": "Please provide any other feedback you have about the units of this course.",
        "csd-post-survey-2018-topics-want-FR_markdown_instruction": "What other topics are you interested in learning about in the future?",
        "csd-pulse-check-survey-1-free-response U1Ch2_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U1Ch2_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U2Ch1_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U2Ch2_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U3Ch1_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U3Ch2_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U4Ch1_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U4Ch1_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U4Ch2_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U4Ch2_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U5Ch1_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U5Ch1_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U5Ch2_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U5Ch2_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U6Ch1_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U6Ch1_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U6Ch2_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response U6Ch2_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-pulse-check-survey-1-free-response_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csd-thursday-facilitation_markdown_instruction": "# Thursday Facilitation Reflection\n\n## Discussion-Based Sessions\n\nYou have now seen a couple discussion heavy sessions. Some specific examples include the Community (Wednesday), and Recruitment/Student Needs (Thursday) sessions. What common facilitator strategies were used in these sessions?\n\n* What are facilitators doing?\n* What are teachers doing?\n",
        "csd-thursday-pedagogy_markdown_instruction": "# Thursday Pedagogy Reflection Part 1\n\n## Differentiating Instruction\n\nWhat strategies have you learned about for differentiating instruction to meet diverse learning needs of students in CS Discoveries? List at least two ideas. ",
        "csd-thursday-pedagogy2_markdown_instruction": "# Thursday Pedagogy Reflection Part 2\n\n## Recruiting and Student Needs\n\nIn the community session this morning you talked about recruiting students and meeting students needs in the region where you work. (If you were not with your region think about what you experienced in this sessions that might apply to your region.)\n\n* What were common recruiting pain points teachers in your region shared?\n* What were common student support needs teachers in your region shared?\n* What things did you see today that you want to check in on throughout the year?\n* What recruiting goals do you hope to help accomplish in your region by the end of the year?\n",
        "csd-thursday-unit_markdown_instruction": "# Thursday Unit Reflection Part 1 \n\n## Game Lab\n\nHow would you explain programming in Game Lab to a new teacher who is interested in using it? \n\n* In what ways is Game Lab an educational rather than professional tool? \n* What kind of supports exist for students using Game Lab?\n",
        "csd-thursday-unit2_markdown_instruction": "# Thursday Unit Reflection Part 2\n\n## Teachers in Plugged Unit\n\nWhat’s the role of the teacher in this unit, where much of the computer science content is embedded in the levels?",
        "csd-tuesday-facilitation_markdown_instruction": "# Facilitation Reflection\n\n## TLOs\n\nYou have seen 3 Model TLOs (taught by facilitators) and 2 Participant TLOs (taught by teachers). What patterns do you notice about what facilitators do during these sessions (consider the lessons themselves and the debriefs)?\n\n* What are facilitators doing during lessons?\n* What are facilitators doing during debriefs?\n* How much time is split between time when facilitators are talking and time when teachers are doing? \n",
        "csd-tuesday-pedagogy_markdown_instruction": "# Tuesday Pedagogy Reflection\n\n## Classroom Practices\n\nName two <a href=\"https://docs.google.com/document/d/1FhHPqlC6dU_z9retuBYb-duUwyKpnjwuEgjF4zfdhvI/edit#heading=h.xbvgs2732c34\"> Classroom Practices</a> you saw modeled in the 5 TLOs you’ve seen in the past couple of days? \n\n* When were they successful?\n* What were characteristics of situations where was their room for improvement?",
        "csd-tuesday-unit_markdown_instruction": "# Tuesday Unit Reflection Part 1\n\n## Unit 1 Unplugged\n\nHow would you respond to a teacher who asks why the first unit does not use computers?",
        "csd-tuesday-unit2_markdown_instruction": "# Tuesday Unit Reflection Part 2\n\n## Positive Classroom Community\n\nIn what ways does the curriculum support building a positive classroom community?",
        "csd-wednesday-facilitation_markdown_instruction": "# Wednesday Facilitation Reflection\n\n## Facilitator Presentations\n\nYou have now seen 3 morning kick off sessions and 3 afternoon wrap up sessions. What common facilitator strategies were used in these sessions?\n\n* What are facilitators doing?\n* What are teachers doing?\n* What strategies did you see facilitators use to keep teachers engaged?\n",
        "csd-wednesday-pedagogy_markdown_instruction": "# Wednesday Pedagogy Reflection\n\n## Building Community & Dealing with Barriers\n\nIn the community session this morning you talked about building community and dealing with barriers to growing your CS education community locally. (If you were not with your region think about what you experienced in this sessions that might apply to your region.)\n\n* What were common barriers teachers in your region shared?\n* What barriers do you personally experience that were shared by teachers? \n* What can you do to help in your local community?\n* What things did you see today that you want to check in on throughout the year?\n* What community development goals do you hope to help accomplish in your region by the end of the year?\n",
        "csd-wednesday-unit_markdown_instruction": "# Wednesday Unit Reflection Part 1\n\n## Unit 1 and Unit 2 Connections\n\nWhat connections or hooks into Unit 1 can be used to motivate early lessons in Unit 2?",
        "csd-wednesday-unit2_markdown_instruction": "# Wednesday Unit Reflection Part 2\n\n## Web Lab\n\nHow would you explain Web Lab to a new teacher who is interested in using it?\n\n* In what ways is Web Lab an educational rather than professional tool? \n* What kind of supports exist for students working Web Lab?\n",
        "csd1dlp-q1_markdown_instruction": "<br><br>\n\n# Unit 1 - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “What does this problem solving unit have to do with computer science?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd1dlp-q2_markdown_instruction": "<br><br>\n\n# Unit 1 - Question 2\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who asks, “Why does the first unit not use computers?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd1dlp-q3_markdown_instruction": "<br><br>\n\n# Unit 1 - Question 3\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “I’m brand new to computer science. What supports exist for me in the curriculum? How will I assess my students knowledge if I don't myself know the material?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd2dlp-q1_markdown_instruction": "<br><br>\n\n# Unit 2 - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “I’m just going to put students on the computer and let them go at their own pace?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd2dlp-q2_markdown_instruction": "<br><br>\n\n# Unit 2 - Question 2\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “What are the benefits of using Web Lab instead of some other web development editor?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd2dlp-q3_markdown_instruction": "<br><br>\n\n# Unit 2 - Question 3\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “How should I assess my students’ learning in this unit?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd3dlp-q1_markdown_instruction": "<br><br>\n\n# Unit 3 - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “This unit is really long. What should I skip in order to get through all the material?”\n\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd3dlp-q2_markdown_instruction": "<br><br>\n\n# Unit 3 - Question 2\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “I have students with a wide range of backgrounds with programming. How do I differentiate for those needs? What supports are in the curriculum?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd3dlp-q3_markdown_instruction": "<br><br>\n\n# Unit 3 - Question 3\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “What are the benefits of using Game Lab instead of some other tool?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd4dlp-q1_markdown_instruction": "<br><br>\n\n# Unit 4 - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “Why do my students spend so much time unplugged in this unit - won't they want to keep programming after unit 3?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd4dlp-q2_markdown_instruction": "<br><br>\n\n# Unit 4 - Question 2\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “I read that this unit is supposed to expose students to roles in the software industry besides the well-known job of programmer. How do I learn more about those job opportunities so I can help my students better understand them?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd4dlp-q3_markdown_instruction": "<br><br>\n\n# Unit 4 - Question 3\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “Do I need to use App Lab to achieve the goals of this unit?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd5dlp-q1_markdown_instruction": "<br><br>\n\n# Unit 5 - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “What is the connection between the first chapter of the unit and the second chapter of the unit?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd5dlp-q2_markdown_instruction": "<br><br>\n\n# Unit 5 - Question 2\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** This unit makes the use of an optional tool (teachers can use a spreadsheet tool if they want). If a teacher asked about whether to use a tool or not, what kind of things would you say or ask in response to support them?\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd5dlp-q3_markdown_instruction": "<br><br>\n\n# Unit 5 - Question 3\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “What are my students supposed to take away at the end of this unit?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd6dlp-q1_markdown_instruction": "<br><br>\n\n# Unit 6 - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “Do I need to do Unit 3 before I teach students Unit 6? Why?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd6dlp-q2_markdown_instruction": "<br><br>\n\n# Unit 6 - Question 2\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “I don’t know much about physical computing. What do I need to do to be successful teaching this unit?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csd6dlp-q3_markdown_instruction": "<br><br>\n\n# Unit 6 - Question 3\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “How is programming in App Lab different than programming in Game Lab? If my students want to work on projects outside of the ones in the curriculum how do I know which tool I should use when?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp-create-dlp-q1_markdown_instruction": "<br><br>\n\n# Create - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “What supports exist in the curriculum to help my students prepare for the Create Task?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp-create-dlp-q2_markdown_instruction": "<br><br>\n\n# Create - Question 2\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “Do students have to use App Lab for the Create Task?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp-create-dlp-q3_markdown_instruction": "<br><br>\n\n# Create - Question 3\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “How do I have my students complete the Create Task? How much can I help them?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp-explore-dlp-q1_markdown_instruction": "<br><br>\n\n# Explore - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “What supports exist in the curriculum to help my students prepare for the Explore Task?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp-explore-dlp-q2_markdown_instruction": "<br><br>\n\n# Explore - Question 2\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “What tools will students need access to in order to complete the Explore Task?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp-explore-dlp-q3_markdown_instruction": "<br><br>\n\n# Explore - Question 3\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “How do I have my students complete the Explore Task? How much can I help them?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp-post-survey-2017-FR_markdown_instruction": "Anything else you'd like to say about your experience in the course?",
        "csp-post-survey-2017-FR_2018_markdown_instruction": "Final thoughts about the course or your experience.",
        "csp-post-survey-2017-q36-e_markdown_instruction": "I worry because of another reason:",
        "csp-post-survey-2017-q36-e_2018_markdown_instruction": "I worry because of another reason:",
        "csp-post-survey-2018-PT-feedback-FR_markdown_instruction": "Any other feedback about the AP Exam or Performance Tasks?",
        "csp-post-survey-2018-topics-liked-FR_markdown_instruction": "Please provide any other feedback you have about the units of this course.",
        "csp-post-survey-2018-topics-want-FR_markdown_instruction": "What other topics are you interested in learning about in the future?",
        "csp-pre-survey-2017-q36-e_markdown_instruction": "I worry because of another reason:",
        "csp-pre-survey-2017-q36-e_2018_markdown_instruction": "I worry because of another reason:",
        "csp-pre-survey-2017-q38_markdown_instruction": "If yes, what computer science course(s) had you taken before your current computer science class?",
        "csp-pre-survey-2017-q38_2018_markdown_instruction": "If yes, what computer science course(s) had you taken before your current computer science class?",
        "csp-pulse-check-survey-1-q6-FR-U1Ch2_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-1-q6-FR-U1Ch2_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-2-q6-FR-U2Ch1_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-2-q6-FR-U2Ch1_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-3-q6-FR-U2Ch2_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-3-q6-FR-U2Ch2_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-4-q6-FR-U3Ch1_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-4-q6-FR-U3Ch1_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-5-q6-FR-U4Ch1_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-5-q6-FR-U4Ch1_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-6-q6-FR-U4Ch2_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-6-q6-FR-U5Ch1_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-6-q6-FR-U5Ch1_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-7-q6-FR-U5Ch1_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-7-q6-FR-U5Ch2_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-7-q6-FR-U5Ch2_2018_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-pulse-check-survey-8-q6-FR-U5Ch2_markdown_instruction": "Anything else you’d like your teacher to know?",
        "csp-thursday-facilitation_markdown_instruction": "# Thursday Facilitation Reflection\n\n## Discussion-Based Sessions\n\nYou have now seen a couple discussion heavy sessions. Some specific examples include the Community (Wednesday), and Recruitment/Student Needs (Thursday) sessions. What common facilitator strategies were used in these sessions?\n\n* What are facilitators doing?\n* What are teachers doing?",
        "csp-thursday-pedagogy_markdown_instruction": "# Thursday Pedagogy Reflection\n\n## Differentiation\n\nWhat strategies have you learned about for differentiating instruction to meet diverse learning needs of students in CS Principles? List at least two ideas.",
        "csp-thursday-pedagogy2_markdown_instruction": "# Tuesday Pedagogy Reflection Part 1\n\n## Recruiting and Student Needs\n\nIn the community session this morning you talked about recruiting students and meeting students needs in the region where you work. (If you were not with your region think about what you experienced in this sessions that might apply to your region.)\n\n* What were common recruiting pain points teachers in your region shared?\n* What were common student support needs teachers in your region shared?\n* What things did you see today that you want to check in on throughout the year?\n* What recruiting goals do you hope to help accomplish in your region by the end of the year?\n",
        "csp-thursday-unit_markdown_instruction": "# Thursday Unit Reflection\n\n## Unit 1 and Unit 2 Connections\n\nWhat connections or hooks into unit 1 that can be used to motivate early lessons in unit 2?\n",
        "csp-thursday-unit2_markdown_instruction": "# Thursday Unit Reflection Part 2\n\n## Plugged Unit\n\nWhat’s the role of the teacher in this unit, where much of the computer science content is embedded in the levels?\n",
        "csp-tuesday-facilitation_markdown_instruction": "# Tuesday Facilitation Practice\n\n## TLO\n\nYou have seen 2 Model TLOs (taught by facilitators) and 2 Participant TLOs (taught by teachers). What patterns do you notice about what facilitators do during these sessions (consider the delivery of the lessons and the debriefs separately)?\n\n* What are facilitators doing during lessons?\n* What are facilitators doing during debriefs? What are teachers doing?\n* In model lessons, how much time is split between time when facilitators are talking and time when teachers are doing during the lesson? ",
        "csp-tuesday-pedagogy_markdown_instruction": "# Tuesday Pedagogy Reflection\n\n## Classroom Practices\n\nName two <a href=\"https://docs.google.com/document/d/1trq3FeCBaq2G-CFugZP4ElkJapAqAtoBfl4zf7DbW48/edit#heading=h.f8m5xr9s44e2\"> pedagogical approaches</a> you saw modeled in the 5 TLOs you’ve seen in the past couple of days? \n\n* When were they successful?\n* What were characteristics of situations where was their room for improvement?",
        "csp-tuesday-unit_markdown_instruction": "# Tuesday Unit Reflection Part 1\n\n## Lesson 4\n\nHow would you respond to a teacher who says ‘what’s the point’ of lesson 4?\n",
        "csp-tuesday-unit2_markdown_instruction": "# Tuesday Unit Reflection\n\n## Technology Issues\n\nMany classes have technology issues at the start of the year (computers are not ready yet, etc). How would you recommend a teacher approaches the first unit if they are having issues with technology access?\n",
        "csp-wednesday-facilitation_markdown_instruction": "# Wednesday Facilitation Reflection\n\n## Facilitator Presentations\n\nYou have now seen 3 morning kick off sessions and 3 afternoon wrap up sessions. What common facilitator strategies were used in these sessions?\n\n* What are facilitators doing?\n* What are teachers doing?\n* What strategies did you see facilitators use to keep teachers engaged?\n",
        "csp-wednesday-pedagogy_markdown_instruction": "# Wednesday Pedagogy Reflection\n\n## Building Community & Dealing with Barriers\n\nIn the community session this morning you talked about building community and dealing with barriers to growing your CS education community locally.(If you were not with your region think about what you experienced in this sessions that might apply to your region.)\n\n* What were common barriers teachers in your region shared?\n* What barriers do you personally experience that were shared by teachers?\n* What can you do to help in your local community?\n* What things did you see today that you want to check in on throughout the year?\n* What community development goals do you hope to help accomplish in your region by the end of the year?\n",
        "csp-wednesday-unit_markdown_instruction": "# Wednesday Unit Reflection\n\n## Internet Simulator Fatigue\n\nThis is a very Internet Simulator heavy unit. What are strategies for dealing with students who are getting fatigued by the end of the unit?\n\n",
        "csp-wednesday-unit2_markdown_instruction": "# Wednesday Unit Reflection Part 2\n\n## Explaining Internet Simulator\n\nHow would you explain the Internet Simulator to a new teacher who is interested in using it?\n\n* In what ways is Internet Simulator an educational rather than professional tool? \n* What teaching philosophy seems most effective with the Internet Simulator? \n",
        "csp1-dlp-q1_markdown_instruction": "<br><br>\n\n# Unit 1 - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “I’m thinking about skipping Lesson 4? Some of my kids already know binary and I don’t want them to be bored”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp1-dlp-q2_markdown_instruction": "<br><br>\n\n# Unit 1 - Question 2\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says,  “I always struggle to get access to computers at the beginning of the year. How should I approach the first unit, and especially the plugged lessons if my students don’t have access to computers yet?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp1-dlp-q3_markdown_instruction": "<br><br>\n\n# Unit 1 - Question 3\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “My students seem to be having a lot of fun doing the lessons and using the internet simulator but it’s taking me forever to get through the material. How do I know when students have learned the content in a lesson so I can stop and move on to the next lesson?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp2-dlp-q1_markdown_instruction": "<br><br>\n\n# Unit 2 - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says “I feel like my students have fun using the widgets in this unit but sometimes I’m worried this isn’t really connected to the AP test. How can I be sure students are actually learning what they need to know?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp2-dlp-q2_markdown_instruction": "<br><br>\n\n# Unit 2 - Question 2\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who asks “My students struggled with some of the research tasks in Lessons 5 and 6 of this unit. What do you recommend I do to help them prepare for AP exam?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp2-dlp-q3_markdown_instruction": "<br><br>\n\n# Unit 2 - Question 3\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “I don’t plan to have my students take the AP exam. Should they still do the projects that are practice PTs?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp3-dlp-q1_markdown_instruction": "<br><br>\n\n# Unit 3 - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “I really just want to get my kids on the computer and doing real programming is it ok to just skip lesson 1-3 and jump right into App Lab?\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp3-dlp-q2_markdown_instruction": "<br><br>\n\n# Unit 3 - Question 2\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “I have students with a wide range of backgrounds with programming. How do I differentiate for those needs? What supports are in the curriculum?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp3-dlp-q3_markdown_instruction": "<br><br>\n\n# Unit 3 - Question 3\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “I’m not sure what my role as the teacher is during plugged lessons. I feel like I just put them on the computer and wait for a question.”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp4-dlp-q1_markdown_instruction": "<br><br>\n\n# Unit 4 - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “What recommendations do you have about the optional lessons in this unit?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp4-dlp-q2_markdown_instruction": "<br><br>\n\n# Unit 4 - Question 2\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who asks “Is this unit mostly about the Explore PT? After looking at the Explore PT Prep unit I think I could just skip right to that and they’d be able to complete the Explore PT without doing Unit 4.”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp4-dlp-q3_markdown_instruction": "<br><br>\n\n# Unit 4 - Question 3\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “I am thinking about doing Unit 4 before during Unit 3 so my course would go Unit 1, Unit 2, Unit 4, Explore Task, Unit 3, Unit 5, Create Task. Would that be alright?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp5-dlp-q1_markdown_instruction": "<br><br>\n\n# Unit 5 - Question 1\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “Turtle programming seems different from the apps stuff they are going to do in this unit. What is different? What are some common challenges students might face?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp5-dlp-q2_markdown_instruction": "<br><br>\n\n# Unit 5 - Question 2\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “What are the benefits of using App Lab instead of some other app development tool?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp5-dlp-q3_markdown_instruction": "<br><br>\n\n# Unit 5 - Question 3\n**NOTE:** Before you start this reflection, make sure you’ve reviewed the lessons in this unit and have a good sense of the connections between lessons. If you haven’t already reviewed the materials, do that now and come back to this reflection later.\n\nFor this reflection, you’re going to consider the prompt below and craft a written response that demonstrates your understanding of the lessons as well as how to address teacher concerns about the unit . We suggest you write your response in another text editor and copy it in here once you are ready to submit.\n\n> **Prompt:** How would you respond to a teacher who says, “I’m running short on time to get through all the material before the Performance Tasks are due. What do students need to know for the Create Task? What is just on the multiple choice test?”\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "csp_U3_plan_code_FR_markdown_instruction": "<img src=\"https://images.code.org/01d3b0664443216b4363ec31914e592a-image-1506460763004.png\" style=\"float: right\">\n\n<br>\n\nIn this lesson we talked about how to build up solutions to larger programming problems with functions.  Plan the code that you would use to draw this image (shown at right). Describe each of the functions that you would create. You should not write all the code, only the names of the functions that you would create with a brief description of what each function would do. \n\nWrite your plan following the format:\n\n<div style=\"clear: both\"> </div>\n\n    Name of function - description of what it does\n\n    Name of function 2 - description of what it does\n    ...",
        "csp_U3_plan_code_FR_2018_markdown_instruction": "<img src=\"https://images.code.org/01d3b0664443216b4363ec31914e592a-image-1506460763004.png\" style=\"float: right\">\n\n<br>\n\nIn this lesson we talked about how to build up solutions to larger programming problems with functions.  Plan the code that you would use to draw this image (shown at right). Describe each of the functions that you would create. You should not write all the code, only the names of the functions that you would create with a brief description of what each function would do. \n\nWrite your plan following the format:\n\n<div style=\"clear: both\"> </div>\n\n    Name of function - description of what it does\n\n    Name of function 2 - description of what it does\n    ...",
        "csp_U3_square_v_rect_FR_markdown_instruction": "<img src=\"https://images.code.org/2f9b8b6a1c42b7c6c881f89867352907-image-1506460228029.png\" style=\"float: right\">\n\nIn this lesson you wrote code to make the turtle draw squares. Briefly describe how the code for drawing a rectangle would be different than drawing a square.  (Example rectangle at right)",
        "csp_U3_square_v_rect_FR_2018_markdown_instruction": "<img src=\"https://images.code.org/2f9b8b6a1c42b7c6c881f89867352907-image-1506460228029.png\" style=\"float: right\">\n\nIn this lesson you wrote code to make the turtle draw squares. Briefly describe how the code for drawing a rectangle would be different than drawing a square.  (Example rectangle at right)",
        "csp_socialBelonging_control_markdown_instruction": "\n## Starting out in Computer Science\n\nComputer science has changed the way we communicate with each other, make art and movies, grow food, and even treat illnesses. Everyone can learn computer science and make a difference.\n\n***\n\n## Quotes from students\n\nStill, we understand that taking a computer science course can be difficult at first. Here are a few student quotes describing their strategies and tips for taking this course. **Please read the quotes carefully and respond to the prompt below**. \n\n<div style=\"background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\n\n<p style=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right: 30px; \">\nIn the first week of this class I was falling behind quickly. There was a lot of new information to learn. To keep up, I had to find a better way to study. I tried to find connections between the material and what I already know. That really helped me remember things. I also tried to not overdo it. I started taking small breaks in-between lessons and when I came back I checked if I still remembered what I was studying before. It helped a lot\n </p>\n<p style=\"font-size: 70px; text-align: right; margin-right: 5%; margin-top: -10px; opacity: 0.5\">&rdquo;</p>\n<p style=\"text-align: right; font-size: 125%; font-style: italic; margin-right: 70px; margin-top: -20px; \">\nSofia P. (age 16)\n</p>\n\n</div>\n<br>\n\n<div style=\"background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color: #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;\">\n\n\n<p style=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right: 30px;\">Some days I felt tired and would drift away in my thoughts. It was a real problem because I would miss so much of what we were learning. So I started going to bed a bit earlier and I tried my best to pay attention. At the end of every class our teacher summarized\n what we learned that day and that was really helpful. I started taking more notes because that also kept my mind from wandering. These little tricks got me through the class and I learned more.</p>\n<p style=\"font-size: 70px; text-align: right; opacity: 0.5\">&rdquo;</p>\n<p style=\"text-align: right; font-size: 125%;  font-style: italic; margin-right: 30px; margin-top: -20px\">\nJasmin D. (age 17)\n</p>\n</div>\n<br>\n\n<div style=\"background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\n\n<p style=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right: 30px; \">I\n can be pretty forgetful sometimes and it was a problem in this class. I think it's because we did so much on the computer. For my other classes I take notes on paper and read through them again at home. So the trick that I found helpful in this class was to take notes on paper anyway and to test myself about the concepts. I wasn't sure if it would work at first, but I think it ended up being a big help.</p>\n\n<p style=\"font-size: 70px; text-align: right; opacity: 0.5\">&rdquo;</p>\n<p style=\"text-align: right; font-size: 125%;  font-style: italic; margin-right: 30px; margin-top: -20px\">\nSam J. (age 17)\n</p>\n</div>\n\n***\n<p style=\"font-size: 125%\">Now consider the strategies and insights for how to learn best that you just read. </p>\n\n## Reflect and Summarize: \n\n<p style=\"font-size: 150%; color: black; font-weight: bolder; line-height: 1.5\">What are your own strategies and insights about how to learn best? And, how are they similar or different to the ones that you just heard about from other students? </p>\n\n*Please write a short paragraph. Don't worry about spelling, grammar, or how well written it is.*",
        "csp_socialBelonging_control_2018_markdown_instruction": "\n## Starting out in Computer Science\n\nComputer science has changed the way we communicate with each other, make art and movies, grow food, and even treat illnesses. Everyone can learn computer science and make a difference.\n\n***\n\n## Quotes from students\n\nStill, we understand that taking a computer science course can be difficult at first. Here are a few student quotes describing their strategies and tips for taking this course. **Please read the quotes carefully and respond to the prompt below**. \n\n<div style=\"background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\n\n<p style=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right: 30px; \">\nIn the first week of this class I was falling behind quickly. There was a lot of new information to learn. To keep up, I had to find a better way to study. I tried to find connections between the material and what I already know. That really helped me remember things. I also tried to not overdo it. I started taking small breaks in-between lessons and when I came back I checked if I still remembered what I was studying before. It helped a lot\n </p>\n<p style=\"font-size: 70px; text-align: right; margin-right: 5%; margin-top: -10px; opacity: 0.5\">&rdquo;</p>\n<p style=\"text-align: right; font-size: 125%; font-style: italic; margin-right: 70px; margin-top: -20px; \">\nSofia P. (age 16)\n</p>\n\n</div>\n<br>\n\n<div style=\"background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color: #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;\">\n\n\n<p style=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right: 30px;\">Some days I felt tired and would drift away in my thoughts. It was a real problem because I would miss so much of what we were learning. So I started going to bed a bit earlier and I tried my best to pay attention. At the end of every class our teacher summarized\n what we learned that day and that was really helpful. I started taking more notes because that also kept my mind from wandering. These little tricks got me through the class and I learned more.</p>\n<p style=\"font-size: 70px; text-align: right; opacity: 0.5\">&rdquo;</p>\n<p style=\"text-align: right; font-size: 125%;  font-style: italic; margin-right: 30px; margin-top: -20px\">\nJasmin D. (age 17)\n</p>\n</div>\n<br>\n\n<div style=\"background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\n\n<p style=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right: 30px; \">I\n can be pretty forgetful sometimes and it was a problem in this class. I think it's because we did so much on the computer. For my other classes I take notes on paper and read through them again at home. So the trick that I found helpful in this class was to take notes on paper anyway and to test myself about the concepts. I wasn't sure if it would work at first, but I think it ended up being a big help.</p>\n\n<p style=\"font-size: 70px; text-align: right; opacity: 0.5\">&rdquo;</p>\n<p style=\"text-align: right; font-size: 125%;  font-style: italic; margin-right: 30px; margin-top: -20px\">\nSam J. (age 17)\n</p>\n</div>\n\n***\n<p style=\"font-size: 125%\">Now consider the strategies and insights for how to learn best that you just read. </p>\n\n## Reflect and Summarize: \n\n<p style=\"font-size: 150%; color: black; font-weight: bolder; line-height: 1.5\">What are your own strategies and insights about how to learn best? And, how are they similar or different to the ones that you just heard about from other students? </p>\n\n*Please write a short paragraph. Don't worry about spelling, grammar, or how well written it is.*",
        "cspu3_assess1_filltable_markdown_instruction": "Use Top-Down Design strategy to fill in the table below. The first line is given to you. You may use as many or as few rows in the table as you see fit.\n\n_NOTE: Use a new line for each entry to the table. Write each line in the format of \"Function Name : Description\"_\n\n**Top-Down Design Strategy:**\n\n* Look at the big picture…\n* Identify a sub-task…\n* Break down that sub-task into smaller sub-task(s)...\n* Keep going until you’re down to the commands you already have access to.\n\n| Function Name   | Description / Justification |\n|-----------------|-----------------------------|\n| drawSnowflake() | Draw a 6 pointed snowflake  |\n| (Your answer)   | (Your answer)               |\n\n\n",
        "cspu3_assess1_filltable_2018_markdown_instruction": "Use Top-Down Design strategy to fill in the table below. The first line is given to you. You may use as many or as few rows in the table as you see fit.\n\n_NOTE: Use a new line for each entry to the table. Write each line in the format of \"Function Name : Description\"_\n\n**Top-Down Design Strategy:**\n\n* Look at the big picture…\n* Identify a sub-task…\n* Break down that sub-task into smaller sub-task(s)...\n* Keep going until you’re down to the commands you already have access to.\n\n| Function Name   | Description / Justification |\n|-----------------|-----------------------------|\n| drawSnowflake() | Draw a 6 pointed snowflake  |\n| (Your answer)   | (Your answer)               |\n\n\n",
        "cspu3_assess1_filltable_exam_prep_markdown_instruction": "Use Top-Down Design strategy to fill in the table below. The first line is given to you. You may use as many or as few rows in the table as you see fit.\n\n_NOTE: Use a new line for each entry to the table. Write each line in the format of \"Function Name : Description\"_\n\n**Top-Down Design Strategy:**\n\n* Look at the big picture…\n* Identify a sub-task…\n* Break down that sub-task into smaller sub-task(s)...\n* Keep going until you’re down to the commands you already have access to.\n\n| Function Name   | Description / Justification |\n|-----------------|-----------------------------|\n| drawSnowflake() | Draw a 6 pointed snowflake  |\n| (Your answer)   | (Your answer)               |\n\n\n",
        "cspu3_assess1_freeresponse_markdown_instruction": "Explain how abstraction allows for the creation of increasingly complex systems.  Reference top-down design strategy in your response.",
        "cspu3_assess1_freeresponse_2018_markdown_instruction": "Explain how abstraction allows for the creation of increasingly complex systems.  Reference top-down design strategy in your response.",
        "cspu3_assess1_freeresponse_exam_prep_markdown_instruction": "Explain how abstraction allows for the creation of increasingly complex systems.  Reference top-down design strategy in your response.",
        "cspu5_assess1_shortresponse_markdown_instruction": "**Short Response:** \n\nTwo students, Kaleb and Hunter, are arguing in class about an App Lab project. Kaleb states, “Huh, a button and an image are basically the same thing!”.  Hunter replies, “That doesn’t make any sense at all!”.\n\tExplain what Kaleb may have meant by that statement.",
        "cspu5_assess1_shortresponse_2018_markdown_instruction": "**Short Response:** \n\nTwo students, Kaleb and Hunter, are arguing in class about an App Lab project. Kaleb states, “Huh, a button and an image are basically the same thing!”.  Hunter replies, “That doesn’t make any sense at all!”.\n\tExplain what Kaleb may have meant by that statement.",
        "cspu5_assess1_shortresponse_exam_prep_markdown_instruction": "**Short Response:** \n\nTwo students, Kaleb and Hunter, are arguing in class about an App Lab project. Kaleb states, “Huh, a button and an image are basically the same thing!”.  Hunter replies, “That doesn’t make any sense at all!”.\n\tExplain what Kaleb may have meant by that statement.",
        "cspu5_assess2_flowChart_markdown_instruction": "The human question below has a yes/no answer. Create a flowchart that shows the logical progression of the questions that need to be answered to arrive at yes or no. Your diagram should consider the day of the week, time of day, and account for both possible outcomes.\n\n| Question                         | Question |\n|----------------------------------|----------|\n| Should I be at school right now? |   (Input your flowchart here)     |",
        "cspu5_assess2_match_markdown_instruction": "The following statements are true about event handlers, if-statements, or both in App Lab.  Place the letter next to each statement into the appropriate area of the table below.\n\n**Statements:**\n\n* A. Runs code in response to a user action\n* B. Runs code in response to statement being evaluated to True\n* C. Evaluated sequentially once execution is “inside” the statement\n* D. Can be triggered at any time\n* E. Used to run a block of code\n\n_Note: Make a new line for each box._\n\n    Event Handlers: x, x\n    if Statements: x, x\n    Both: x, x\n",
        "cspu5_assess2_pseudocode2_markdown_instruction": "A _pseudocode_ program is started below that asks the user for input and stores the value in a variable.  Continue writing pseudocode to accomplish this task: \n\nIf the hour is within the school day (8 to 15) then display  “Nice to see you!”, Otherwise, display “It’s time to go home!\n\n    DISPLAY (“Enter the hour of day (0-23)”)\n    hour <- INPUT ()",
        "cspu5_assess2_pseudocode2_2018_markdown_instruction": "A _pseudocode_ program is started below that asks the user for input and stores the value in a variable.  Continue writing pseudocode to accomplish this task: \n\nIf the hour is within the school day (8 to 15) then display  “Nice to see you!”, Otherwise, display “It’s time to go home!\n\n    DISPLAY (“Enter the hour of day (0-23)”)\n    hour <- INPUT ()",
        "cspu5_assess2_pseudocode2_exam_prep_markdown_instruction": "A _pseudocode_ program is started below that asks the user for input and stores the value in a variable.  Continue writing pseudocode to accomplish this task: \n\nIf the hour is within the school day (8 to 15) then display  “Nice to see you!”, Otherwise, display “It’s time to go home!\n\n    DISPLAY (“Enter the hour of day (0-23)”)\n    hour <- INPUT ()",
        "cspu5_assess2_shortAnswer_markdown_instruction": "**Short answer:** When might a programmer create a global variable instead of a local variable?",
        "cspu5_assess2_shortAnswer2_markdown_instruction": "**Short Answer:**\n\nIn the previous class periods, you developed a digital assistant that is able to “intelligently” respond to a limited set of questions and statements.  Assume you have created a much more robust digital assistant with capabilities similar to those of Siri.  Describe two possible user inputs:  one question that a digital assistant could “intelligently” answer easily, and another that it could not. Explain what makes the first easy and the second difficult for a digital assistant. (Consider the code used to develop your digital assistant.)",
        "cspu5_assess2_shortAnswer_2018_markdown_instruction": "**Short answer:** When might a programmer create a global variable instead of a local variable?",
        "cspu5_assess2_shortAnswer_exam_prep_markdown_instruction": "**Short answer:** When might a programmer create a global variable instead of a local variable?",
        "cspu5_assess2_trueFalse_markdown_instruction": "For each expression below, circle whether it evaluates to true or false. The variable temperature is initialized as shown.\n\n    var temperature = 30;\n\nExpressions:\n\n* (temperature > 0) && (temperature < 32)\n* (temperature > 0) || (temperature < 32)\n* (temperature != 0) && (temperature < 32)\n* (temperature == 0) || (temperature > 32)\n* (temperature < 0) || (temperature > 32)\n\n_Note: Write \"true\" or \"false\" on a new line for each expression._",
        "cspu5_assess3_shortAnswer_markdown_instruction": "**Short Answer:**  Computer models and simulations are used to formulate, refine, and test hypotheses.  Describe a scenario that could be modeled by a computer and explain one benefit and one drawback of doing the simulation on a computer instead of real world. \n",
        "cspu5_assess3_shortAnswer_2018_markdown_instruction": "**Short Answer:**  Computer models and simulations are used to formulate, refine, and test hypotheses.  Describe a scenario that could be modeled by a computer and explain one benefit and one drawback of doing the simulation on a computer instead of real world. \n",
        "cspu5_assess3_shortAnswer_exam_prep_markdown_instruction": "**Short Answer:**  Computer models and simulations are used to formulate, refine, and test hypotheses.  Describe a scenario that could be modeled by a computer and explain one benefit and one drawback of doing the simulation on a computer instead of real world. \n",
        "cspu5_assess4_scoreToGrade_markdown_instruction": "**Short Answer:** Jimmy wrote the procedure scoreToGrade which accepts as a parameter score - a quiz score in the range 0-100.  The procedure is supposed to return a letter grade. He feels confident his program is correct because he has tested it using the scores 3, 29, and 67. Sally believes the program is incorrect because she tested the values 73 and 86.  The code is syntactically correct, and the programs runs without generating an error, but the results are sometimes wrong.  Why does the procedure return the correct values for Jimmy’s tests but not Sally’s? \n\n    PROCEDURE scoreToGrade (percent)\n    {\n        IF (percent < 60)\n        {\n            RETURN (\"F\")\n        }\n        ELSE IF (percent >= 60)\n        {\n        \tRETURN (\"D\")\n        }\n        ELSE IF (percent >= 70)\n        {\n            RETURN (\"C\")\n        }\n        ELSE IF (percent >= 80)\n        {\n            RETURN (\"B\")\n        }\n        ELSE\n        {\n        \tRETURN (\"A\")\n        }\n    }",
        "cspu5_assess4_scoreToGrade_2018_markdown_instruction": "**Short Answer:** Jimmy wrote the procedure scoreToGrade which accepts as a parameter score - a quiz score in the range 0-100.  The procedure is supposed to return a letter grade. He feels confident his program is correct because he has tested it using the scores 3, 29, and 67. Sally believes the program is incorrect because she tested the values 73 and 86.  The code is syntactically correct, and the programs runs without generating an error, but the results are sometimes wrong.  Why does the procedure return the correct values for Jimmy’s tests but not Sally’s? \n\n    PROCEDURE scoreToGrade (percent)\n    {\n        IF (percent < 60)\n        {\n            RETURN (\"F\")\n        }\n        ELSE IF (percent >= 60)\n        {\n        \tRETURN (\"D\")\n        }\n        ELSE IF (percent >= 70)\n        {\n            RETURN (\"C\")\n        }\n        ELSE IF (percent >= 80)\n        {\n            RETURN (\"B\")\n        }\n        ELSE\n        {\n        \tRETURN (\"A\")\n        }\n    }",
        "cspu5_assess4_scoreToGrade_exam_prep_markdown_instruction": "**Short Answer:** Jimmy wrote the procedure scoreToGrade which accepts as a parameter score - a quiz score in the range 0-100.  The procedure is supposed to return a letter grade. He feels confident his program is correct because he has tested it using the scores 3, 29, and 67. Sally believes the program is incorrect because she tested the values 73 and 86.  The code is syntactically correct, and the programs runs without generating an error, but the results are sometimes wrong.  Why does the procedure return the correct values for Jimmy’s tests but not Sally’s? \n\n    PROCEDURE scoreToGrade (percent)\n    {\n        IF (percent < 60)\n        {\n            RETURN (\"F\")\n        }\n        ELSE IF (percent >= 60)\n        {\n        \tRETURN (\"D\")\n        }\n        ELSE IF (percent >= 70)\n        {\n            RETURN (\"C\")\n        }\n        ELSE IF (percent >= 80)\n        {\n            RETURN (\"B\")\n        }\n        ELSE\n        {\n        \tRETURN (\"A\")\n        }\n    }",
        "cspu5_assess4_shortAnswerShopping_markdown_instruction": "**Short Answer:** Cecelia would like to write an app to help manage a trip to the grocery store.  The app will maintain a shopping list (a list of words) of all the items to buy.  Describe how Cecelia might use a second list in the app.  What else might be tracked? Describe how the list would be used and updated in the app.\n",
        "cspu5_assess4_shortAnswerShopping_2018_markdown_instruction": "**Short Answer:** Cecelia would like to write an app to help manage a trip to the grocery store.  The app will maintain a shopping list (a list of words) of all the items to buy.  Describe how Cecelia might use a second list in the app.  What else might be tracked? Describe how the list would be used and updated in the app.\n",
        "cspu5_assess4_shortAnswerShopping_exam_prep_markdown_instruction": "**Short Answer:** Cecelia would like to write an app to help manage a trip to the grocery store.  The app will maintain a shopping list (a list of words) of all the items to buy.  Describe how Cecelia might use a second list in the app.  What else might be tracked? Describe how the list would be used and updated in the app.\n",
        "debrief-monday_markdown_instruction": "# Day 1: End of Day Debrief\n\n* What were the key takeaways the leads had today (e.g., teachers’ gots and needs, working together as facilitators, keeping a healthy cohort rapport, etc.)?\n* Did they decide to make any adjustments to their approach for the next day? If so, what do they plan to change and why?",
        "debrief-thursday_markdown_instruction": "# Day 4: End of Day Debrief\n\n* What were the key takeaways the leads had today (e.g., teachers’ gots and needs, working together as facilitators, keeping a healthy cohort rapport, etc.)?\n* Did they decide to make any adjustments to their approach for the next day? If so, what do they plan to change and why?",
        "debrief-tuesday_markdown_instruction": "# Day 2: End of Day Debrief\n\n* What were the key takeaways the leads had today (e.g., teachers’ gots and needs, working together as facilitators, keeping a healthy cohort rapport, etc.)?\n* Did they decide to make any adjustments to their approach for the next day? If so, what do they plan to change and why?",
        "debrief-wednesday_markdown_instruction": "# Day 3: End of Day Debrief\n\n* What were the key takeaways the leads had today (e.g., teachers’ gots and needs, working together as facilitators, keeping a healthy cohort rapport, etc.)?\n* Did they decide to make any adjustments to their approach for the next day? If so, what do they plan to change and why?",
        "discussion-thursday_markdown_instruction": "# Day 4: Discussion-Based\n\nYou have now seen a couple discussion-based (purple) sessions. Some specific examples include the Getting Buy-In (Wednesday), and Recruiting Students (Thursday) sessions. What common facilitator strategies were used in these sessions?\n\n* What are facilitators doing?\n* What are teachers doing?\n",
        "engagement-monday_markdown_instruction": "# Day 1: Engagement\n\nThink of one participant engagement challenge the lead facilitators faced today.\n\n* What was the challenge?\n* How did the lead facilitator(s) manage that challenge?\n* How would you approach this challenge in a session you lead?\n\n",
        "engagement-thursday_markdown_instruction": "# Day 4: Engagement\n\nThink of one participant engagement challenge the lead facilitators faced today.\n\n* What was the challenge?\n* How did the lead facilitator(s) manage that challenge?\n* How would you approach this challenge in a session you lead?\n\n",
        "engagement-tuesday_markdown_instruction": "# Day 2: Engagement\n\nThink of one participant engagement challenge the lead facilitators faced today.\n\n* What was the challenge?\n* How did the lead facilitator(s) manage that challenge?\n* How would you approach this challenge in a session you lead?\n\n",
        "engagement-wednesday_markdown_instruction": "# Day 3: Engagement\n\nThink of one participant engagement challenge the lead facilitators faced today.\n\n* What was the challenge?\n* How did the lead facilitator(s) manage that challenge?\n* How would you approach this challenge in a session you lead?\n\n",
        "expresslink_markdown_instruction": "<a href=\"https://studio.code.org/s/express\"><img src=\"https://images.code.org/32b135ea9a16684b30f89ffe0f6606b1-image-1507039514762.05.01 AM.png\"/><img src=\"https://images.code.org/cfea3adf1aec120e23e039ed06856f6f-image-1507039555039.05.48 AM.png\"/></a>",
        "facilitator-prez-wednesday_markdown_instruction": "# Day 3: Facilitator Presentation\n\nYou have now seen a bunch of facilitator presentation sessions (orange sessions). What common facilitator strategies were used in these sessions?\n\n* What are facilitators doing?\n* What are teachers doing?\n* What strategies did you see facilitators use to keep teachers engaged?",
        "farmer-test-lb_markdown_instruction": "# Making A Function\n1. Do this thing",
        "feel-monday_markdown_instruction": "# Day 1: Feel\n\nUse a few words or sentences to describe the ways participants seemed to feel throughout the day today (e.g., confused, engaged, anxious, etc.)\n\n* What factors seemed to contribute to those feelings?\n* What did you see the lead facilitators do to address or support the general participant experience throughout the day?\n",
        "feel-thursday_markdown_instruction": "# Day 4: Feel\n\nUse a few words or sentences to describe the ways participants seemed to feel throughout the day today (e.g., confused, engaged, anxious, etc.)\n\n* What factors seemed to contribute to those feelings?\n* What did you see the lead facilitators do to address or support the general participant experience throughout the day?\n",
        "feel-tuesday_markdown_instruction": "# Day 2: Feel\n\nUse a few words or sentences to describe the ways participants seemed to feel throughout the day today (e.g., confused, engaged, anxious, etc.)\n\n* What factors seemed to contribute to those feelings?\n* What did you see the lead facilitators do to address or support the general participant experience throughout the day?\n",
        "feel-wednesday_markdown_instruction": "# Day 3: Feel\n\nUse a few words or sentences to describe the ways participants seemed to feel throughout the day today (e.g., confused, engaged, anxious, etc.)\n\n* What factors seemed to contribute to those feelings?\n* What did you see the lead facilitators do to address or support the general participant experience throughout the day?\n",
        "fit-dlp-example-2_markdown_instruction": "<br><br>\n\n# FIT Deeper Learning Example\n\nThis is where instructions for the prompt will be.\n\n> **Prompt:** Would you rather dance every time music came on or sing?\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "fit-dlp-example_markdown_instruction": "<br><br>\n\n# FIT Deeper Learning Example\n\nThis is where instructions for the prompt will be.\n\n> **Prompt:** Is a hotdog a sandwich?\n\n## Getting Credit for Completing this Reflection \n\n- Once you submit your reflection, your response to the prompt above will be shared anonymously and read by your peers, and you will read the work done by other facilitators. This give facilitators a chance to learn from each other.\n- Your submission will also be given to an expert reviewer. Expert reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, your expert review needs to say \"Yes\" responded to the prompts fully. If reviewers don’t feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once it’s available.",
        "frozen circle function in circle_markdown_instruction": "Now let's create 20 overlapping circles, turning 18 degrees between each circle.",
        "frozen circle function with parameter_markdown_instruction": "Here's a ”Create circle” block that can make circles of different sizes. Can you use this to create a small circle of size 5 and a larger circle of size 10?",
        "frozen circle function_markdown_instruction": "Use the new “Create a circle” block to create 10 overlapping circles. Don't forget to jump forward between circles.",
        "frozen circle_markdown_instruction": "A circle is a special shape. Can you figure out what number to replace the question marks with to draw a circle?",
        "frozen cross rotate dense_markdown_instruction": "Let's repeat it 90 times! How many times does 90 go into 360? Hint: It's a really small number.",
        "frozen cross rotate_markdown_instruction": "Now try repeating it 10 times. How many degrees do you need to turn between each line?",
        "frozen cross_markdown_instruction": "Wrap a “Repeat” block around these commands to create a plus sign. Did you notice Elsa can move forward and backward?",
        "frozen diamond mini snowflake_markdown_instruction": "Did you know every snowflake is a different shape? Let's create a new snowflake by using another “Repeat\" block to repeat a parallelogram 4 times, turning right by 90 degrees between each parallelogram.",
        "frozen diamond snowflake_markdown_instruction": "Now, let's create a new snowflake by using the repeat block to repeat a parallelogram 10 times, turning right by 36 degrees between each one.",
        "frozen diamond_markdown_instruction": "Use a repeat around these blocks to create a parallelogram. It's just like a rectangle but has different angles. This one has 60 degree and 120 degree angles instead of all 90 degree angles.",
        "frozen freeplay_markdown_instruction": "You've officially become a master artist! Create a winter wonderland.",
        "frozen perpendicular_markdown_instruction": "Now let's see if we can create two lines that are at a 90 degree angle to each other. You will need to use the \"Turn\" block as well as the \"Move\" block.",
        "frozen snowflake branch_markdown_instruction": "Try using the ”Create a snowflake branch” block to create three branches, which starts to look like a snowflake.",
        "frozen snowflake full_markdown_instruction": "Now let's repeat it 8 times to make a beautiful snowflake!",
        "frozen snowflower_markdown_instruction": "Intricate snow patterns can be created with very simple shapes. Can you make a pattern by repeating 5 circles of size 5 and 5 circles of size 10?",
        "frozen square iterative_markdown_instruction": "It seems like we're halfway to making a square. Let's put 4 lines together to create a square.",
        "frozen square loop 3x_markdown_instruction": "Let's create three squares, turning after each square. Be sure to turn by 120 degrees before each new square.",
        "frozen square loop_markdown_instruction": "Hi, I’m Anna of Arendelle! Let’s make a square with the “Repeat” block, which uses fewer blocks. How many times (???) should the “Repeat” block loop the blocks inside it to make a square?",
        "frozen square snowflake_markdown_instruction": "Can you create a snowflake using the “Repeat” block to make a square 10 times, and the “Turn” block to turn 36 degrees between each square?",
        "getting-buy-in-wednesday_markdown_instruction": "# Day 3: Getting Buy In\n\nIn the Getting Buy-In session this morning you talked about building community and dealing with barriers to growing your CS education community locally. (If you were not with your region think about what you experienced in this sessions that might apply to your region.)\n\n* What were common barriers teachers in your region shared?\n* What things did you see today that you want to check in on throughout the year?\n",
        "gl jr clone me ram2_markdown_instruction": "Clone this level, and then make your own programs!",
        "gl jr clone me_markdown_instruction": "Clone this level, and then make your own programs!",
        "grade1_adventurer_loops2_markdown_instruction": "How can Laurel collect all five piles of gold using only one `E -->` block?",
        "grade1_artist_loops6_markdown_instruction": "**Challenge:**  It's a hidden garden! Let's walk around.",
        "grade1_artist_loops7a_markdown_instruction": "**Challenge:**  Lovely! Let's take a walk around the garden.",
        "grade1_maze_sequence8_markdown_instruction": "**Challenge:** Debug this level by adding blocks to get me to the pig!",
        "grade1_maze_sequenceA_markdown_instruction": "**Challenge:** Move me around the TNT to get to the pig.",
        "grade1_playlab_eventsFP_markdown_instruction": "Use your imagination. What can you do to make this game more fun?\n<br/>\n\n<h5>\n<details>\n<summary><b>Need some ideas?</b></summary>\n\t<br/>\n\t<h5>\n\t\t<ul>\n        \t<li><strong>Conversation</strong> - Add blocks so that the characters say \"Hello!\" when they run into each other. </li>\n            <li><strong>Where's the Dragon?</strong> - Have the dragon dissapear when the up arrow key is pressed.</li>\n            <li><strong>Super Dragon</strong> - Make the dragon move at a faster speed and then try to catch him with the knight. </li>\n        </ul>\n\t</h5>\n</details>\n</h5>",
        "grade2_CaringForNewPet_0_markdown_instruction": "For this puzzle, drag all of the blocks together and click \"Run\" to watch it go!",
        "grade2_CaringForNewPet_1_markdown_instruction": "Drag an extra `move forward` block out of the toolbox to finish your code.",
        "grade2_CaringForNewPet_11_markdown_instruction": "*\"Keep calm and help me find the bad pig.\"*",
        "grade2_CaringForNewPet_2_markdown_instruction": "*\"This pig is ruffling my feathers.\"*\n\nThere is one extra block that is going to cause the bird to crash.  \nThrow it away by dragging it back to the toolbox.",
        "grade2_CaringForNewPet_2courseC_maze_programming3_markdown_instruction": "*\"This pig is ruffling my feathers.\"*\n\nThere is one extra block that is going to cause the bird to crash.  \nThrow it away by dragging it back to the toolbox.",
        "grade2_CaringForNewPet_3_markdown_instruction": "*\"Trace the path and lead me to the silly pig. Avoid TNT or feathers will fly!\"*",
        "grade2_CaringForNewPet_3D_markdown_instruction": "*\"Follow this path to get me to the pig!\"*",
        "grade2_CaringForNewPet_4_markdown_instruction": "*\"Keep calm and help me find the bad pig. Otherwise I might get angry!\"*",
        "grade2_CaringForNewPet_6_markdown_instruction": "**Challenge:** Guide me to the green evilness! (Watch out for TNT)",
        "grade2_CaringForNewPet_7D_markdown_instruction": "*\"It's time to get angry!\"*\n\n**Challenge:** This code has a lot of bugs. You'll need to remove blocks and add blocks.",
        "grade2_MakeDogTag_1_markdown_instruction": "*\"Let's make a cage for my pet monster!\"*\n\nDrag blocks onto the screen to have the artist draw over the grey lines in the picture.  \n(Each line is 100 pixels long)",
        "grade2_MakeDogTag_2_markdown_instruction": "*\"This spaceship needs a window!\"*\n\nEach side of the inner square is 100 pixels and all of the angles are 90 degrees.",
        "grade2_MakeDogTag_3_markdown_instruction": "*\"Oh no!  Starla's pet alien just flew away! Let's help the spacewoman!\"*\n\nFinish Starla's rocket so she can chase her pet.  \n(Each side of the triangle is 100 pixels long and has 120 degree outer angles)",
        "grade2_MakeDogTag_4_markdown_instruction": "*\"Maybe we should make a tag for each of our pets in case they get lost!\"*\n\nFinish this tag by drawing a rectangle around the outside.  \n(The long sides are 200 pixels each and the short sides are each 100 pixels)",
        "grade2_MakeDogTag_5_markdown_instruction": "*\"Now a tag for Belle!\"*\n\nDraw this diamond with 200 pixel sides.",
        "grade2_MakeDogTag_6_markdown_instruction": "**Challenge:** This tag is a special one!  Can you figure out how to draw the outline?  \n(The long side is 150 pixels and each of the short sides are 75 pixels.)",
        "grade2_MakeDogTag_7_markdown_instruction": "One more tag.  This is a triangle for Pi.  \n(Each side is 150 pixels)",
        "grade2_MakeDogTag_8_markdown_instruction": "Now let's connect a bunch of V's together in a loop.",
        "grade2_MakeDogTag_9_markdown_instruction": "Time to make something snazzy! \n\nRebuild the code from the last puzzle, but this time, add a left turn of 30 degrees inside the loop. Now, repeat it 24 times instead of 8.",
        "grade2_MakeDogTag_BFP_markdown_instruction": "*\"Hi, I'm an artist. You can write code to make me draw almost anything.\"*\n\nPlay with the blocks in the toolbox to see what they do!",
        "grade2_MakeDogTag_FP_markdown_instruction": "**Freeplay:** What shape will you make the tag for your pet?\n<br/><br/>\n\n\nHere are some ideas you could try if you get stuck:\n![](https://images.code.org/e36330061c21807fac24d804e301e572-image-1475814869558.26.01.png)",
        "grade2_PuppyLoops_10_markdown_instruction": "My teacher says that I should finish what I start!\n\nHelp me finish my pinwheel. Can you figure out what's wrong?",
        "grade2_PuppyLoops_2_markdown_instruction": "Suddenly, a magical block appears!  With the `repeat` block, you can loop code over and over.\n\nCan you get to the pig by creating a loop that uses only one `move forward` block inside of a `repeat`?",
        "grade2_PuppyLoops_3_markdown_instruction": "Get me to the pig! Solve this puzzle by creating a loop!",
        "grade2_PuppyLoops_4_markdown_instruction": "In this puzzle, two `repeat` loops will help you get to the pig with the fewest number of blocks!",
        "grade2_PuppyLoops_8_markdown_instruction": "This code for the cat's whiskers is wrong. \n\nFix this code to draw whiskers that are all the same length.",
        "grade2_PuppyLoops_9_markdown_instruction": "Looks like the C in code is drawn backwards!\n\nCan you make it look like a C again?",
        "grade2_collector_10_markdown_instruction": "You're almost done!  \n\nCollect as many pieces of treasure as you can to finish the stage!",
        "grade2_collector_10_2018_markdown_instruction": "You're almost done!  \n\nCollect as many pieces of treasure as you can to finish the stage!",
        "grade2_collector_2_markdown_instruction": "Move Laurel to the gold, then use `collect` to pick it up.",
        "grade2_collector_3_markdown_instruction": "*\"Sequence matters!\"*\n\nThe blocks you need are already in the workspace, but not connected.  Put these blocks in order to collect all of the gold and solve the puzzle.",
        "grade2_collector_4_markdown_instruction": "Sequence matters! The blocks you need are already in the workspace, but not connected.  Order these blocks to solve the puzzle.",
        "grade2_collector_5_markdown_instruction": "*\"Help me collect each gold coin!\"*\n\nThese blocks are in the wrong order. Can you fix them?",
        "grade2_collector_6_markdown_instruction": "\"Help me collect all of the treasure!\"\n\nThese blocks are in the wrong order. Reorder them to collect all of the treasure.",
        "grade2_collector_7_markdown_instruction": "**Challenge:** What is going on here?   \n\nEven if we put these in the right order, there will still be some missing.  \nUse blocks from the toolbox to collect all of the treasure.",
        "grade2_collector_8_markdown_instruction": "*\"Keep up the good work! Help me collect all of the coins.\"*",
        "grade2_collector_9_markdown_instruction": "*\"Let's get all of the coins!\"*",
        "grade2_collector_9a_markdown_instruction": "**Challenge:** Grab all of the coins.",
        "grade2_collector_A_markdown_instruction": "Help Laurel collect all of the treasure.",
        "grade2_collector_A_2018_markdown_instruction": "Help Laurel collect all of the treasure.",
        "grade2_collector_pre1_markdown_instruction": "*\"Hi, I'm Laurel. Today I'm searching for treasure at the dog park!\"*  \n\nPlay around with the blocks to see if you can help Laurel collect some gold.",
        "grade2_link_RunMarco_partner_markdown_instruction": "<a href=\"https://www.allcancode.com/runmarco\"></a><img src=\"https://images.code.org/c754e82a395ab69e5c1e3b2dfe8bf9ff-image-1486603338831.22.10.png\" width=\"400px\"/></a>",
        "grade2_maze_debuggingFP_markdown_instruction": "*\"Now, help me sneak up on the pig any way you want to!\"*",
        "grade2_maze_intro10_markdown_instruction": "Solve this puzzle.",
        "grade2_maze_intro2_markdown_instruction": "Welcome to Code Studio! Here you will learn to use blocks to build programs. Press `Ok`, then find the `Run` button to run your first program.",
        "grade2_maze_intro3_markdown_instruction": "The `workspace` is where you will create all of your programs. Find the workspace, then see what the program does.",
        "grade2_maze_intro4_markdown_instruction": "The `toolbox` is where blocks are stored. You can drag them into the `workspace` to create programs.",
        "grade2_maze_intro6_markdown_instruction": "That’s it!  Now we’re ready to try to solve a few puzzles.",
        "grade2_maze_intro7_markdown_instruction": "This time, try something a bit more challenging.",
        "grade2_maze_intro8_markdown_instruction": "This is a challenge puzzle.  It is meant to be hard and will probably take you a couple of tries to solve.  If you don’t solve it after several tries, don’t worry!  It will be in the Play Zone at the end of the stage and you can try it again when you’ve had more practice.",
        "grade2_maze_intro9_markdown_instruction": "Solve this puzzle.",
        "grade2_playlab_project_3_markdown_instruction": "Can you have Waddles (actor 1) say \"Ouch!\" and play a \"hit\" sound if he runs into Chomp? \n\nWhen you're done, play the game to make that happen.\n\n![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)",
        "grade2_puppy_loops2_markdown_instruction": "Suddenly, a magical block appears!  With the `repeat` block, you can loop code over and over.\n\nCan you get to the pig by creating a loop that uses only one `move forward` block inside of a `repeat`?",
        "grade2_puppy_loops3_markdown_instruction": "*\"Get me to the pig!\"*\n\nSolve this puzzle by creating a loop!",
        "grade2_puppy_loops4_markdown_instruction": "In this puzzle, two `repeat` loops will help you get to the pig with the fewest number of blocks!",
        "grade2_puppy_loops5_markdown_instruction": "*\"Get me to the pig as quickly as possible!\"*",
        "grade2_puppy_loops6_markdown_instruction": "*\"This pig is ruffling my feathers!\"*\n\nLoops even work with more than one block inside!  Can you loop this sequence?",
        "grade2_puppy_loops7_markdown_instruction": "*\"Get me to the pig!\"*\n\nUse what you learned in other puzzles!",
        "grade3_ConditionalsElse_1_markdown_instruction": "This cloud is blocking my view! \n\nCheck to see if there's a flower under the cloud, and only get nectar if there's a flower.   \nBe careful, it can change!",
        "grade3_ConditionalsElse_2_markdown_instruction": "More clouds! \n\nCheck underneath every cloud to see if it is hiding a flower before you get nectar.  \n\nRemember: Not all clouds hide the same thing!",
        "grade3_ConditionalsElse_4_markdown_instruction": "Sometimes this cloud covers a flower, and sometimes it covers a honeycomb! \n\nUse the `if/else` block to collect nectar only if it is a flower.  \nElse, make honey (because it is a honeycomb).",
        "grade3_ConditionalsElse_5_markdown_instruction": "There will be either a flower or a honeycomb under each of those clouds!\n\nUse the `if/else` block to collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "grade3_ConditionalsElse_6_markdown_instruction": "I am not sure how much nectar this flower has, but I know it has either 1, 2, or 3 nectar. \n\nCombine the conditional blocks (`if` and/or `if/else`) to only get as much nectar as the flower has. \n\nRemember, the amount of nectar can change each time you run the puzzle!",
        "grade3_ConditionalsElse_7_markdown_instruction": "These flowers can have 3, 2, or 1 nectar. \n\nComplete the `check purple flower` function and use it to collect all of the nectar at the flowers.",
        "grade3_ConditionalsElse_8_markdown_instruction": "Write the function for `check flower make honey`. \n\nYour function should check if the purple flower has 3, 2, or 1 nectar and get all of the nectar. \nThen, move forward and make honey.",
        "grade3_ConditionalsElse_9_markdown_instruction": "**Assessment:** This cloud is either hiding a flower with one nectar or a honeycomb that needs one honey.  \n\nComplete the `get nectar or make honey` function, then call it to collect the nectar or honey. \n",
        "grade3_ConditionalsElse_TeacherIDo_markdown_instruction": "There will be either a flower or a honeycomb under each of those clouds!\n\nUse the `if/else` block to collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "grade3_Conditionals_1_markdown_instruction": "I'm a hungry bee! \n\n\nHelp me collect all of the nectar from the flowers using the fewest number of blocks.",
        "grade3_Conditionals_10_markdown_instruction": "There's a lot happening here!\n\nUse what you've learned to collect all of the nectar and then make the honey.",
        "grade3_Conditionals_11 BAD_markdown_instruction": "**Assessment:** Use a `while` loop to collect all of the nectar from these flowers.",
        "grade3_Conditionals_11_markdown_instruction": "Let's put everything together!\n\nUse what you've learned to help me collect nectar only from flowers that have it, using as few blocks as possible.  \n\nDon't forget to make honey at the end.",
        "grade3_Conditionals_12_markdown_instruction": "This stair step pattern should look familiar.  \n\nCan you collect nectar only from the flowers that have some, using as few blocks as possible?",
        "grade3_Conditionals_13_markdown_instruction": "**Assessment:** Collect all of the nectar.  \nBe careful not to try to collect nectar from a purple flower if it doesn't have any.",
        "grade3_Conditionals_2_markdown_instruction": "Look at all of that nectar!\n\nHelp me collect the nectar and make the honey using as few blocks as you can.  ",
        "grade3_Conditionals_3_markdown_instruction": "These magic purple flowers change!\n\nEach time you try the puzzle, purple flowers can have either 1 nectar or none at all...but you won't know the number until you run the code! \n\nBe careful not to collect nectar from a purple flower if it doesn't have any. \nYou must first check if the nectar is equal to 1 using the `if nectar` block.",
        "grade3_Conditionals_8_markdown_instruction": "I wonder what's out there!\n\nHelp me fly around the yard and collect nectar only from the flowers that have some. ",
        "grade3_Debugging_1_markdown_instruction": "These blocks are really bugging me!\n\nFix the error(s) to collect all of the nectar.",
        "grade3_Debugging_10_markdown_instruction": "**Challenge:** *\"This puzzle is making me loopy!\"*\n\nAll of the commands that you need are already here...now use your debugging skills to figure out how to solve this puzzle.",
        "grade3_Debugging_11_markdown_instruction": "**Challenge:**  Fix the errors to collect all of the nectar and make all of the honey.",
        "grade3_Debugging_2_markdown_instruction": "*\"These blocks are really bugging me!\"*\n\nFix the error(s) to collect all of the nectar.",
        "grade3_Debugging_3_markdown_instruction": "*\"Ooh, this one stings!\"*\n\nFix the error(s) to collect all of the nectar.",
        "grade3_Debugging_4_markdown_instruction": "*\"These blocks are really bugging me.\"*\n\nFix the error(s) to collect all of the nectar and make all of the honey.",
        "grade3_Debugging_5_markdown_instruction": "That flower looks tasty! \n\nFix the error(s) to collect all of the nectar.  \nYou can now use both run and step.",
        "grade3_Debugging_6_markdown_instruction": "What a sweet challenge!\n\nFix the error(s) to collect all of the nectar.",
        "grade3_Debugging_8_markdown_instruction": "*\"This could be sweet!\"*\n\nFix the error(s) to make all of the honey.",
        "grade3_Debugging_9_markdown_instruction": "\"Bee\" patient with this one!\n\nYou will need to fix a couple of things in this program to collect all of the nectar and make all of the honey.",
        "grade3_Loops_10_markdown_instruction": "Such a busy bee!\n\nHelp Bee collect all of the nectar and make all of the honey with the fewest blocks possible.",
        "grade3_Loops_11_markdown_instruction": "The shape of this path is different from the others. \n\nCan you collect all of the nectar using as few blocks as possible?",
        "grade3_Loops_3_markdown_instruction": "Use a `repeat` loop to collect all of the nectar.",
        "grade3_Loops_4_markdown_instruction": "Now use the `repeat` block to collect all of the nectar and make all of the honey.",
        "grade3_Loops_5_markdown_instruction": "What a beautiful field of flowers!\n\nHelp the bee visit each one.\n\nCan you find a way to do it with fewer than 7 blocks?",
        "grade3_Loops_6_markdown_instruction": "How many times can loops help you in this puzzle?  \n\nLoops are your friend! Use a few of them to complete this puzzle with the fewest blocks possible.",
        "grade3_Loops_7_markdown_instruction": "Those flowers look tasty!\n\nCollect nectar from each of the flowers using the fewest blocks possible.",
        "grade3_Loops_TeacherIDo_markdown_instruction": "Those flowers look tasty!\n\nCollect nectar from each of the flowers using the fewest blocks possible.",
        "grade3_RunningFarm_1_markdown_instruction": "*\"Corn you help me harvest today?\"*\n\nUse conditionals to make sure that you pick all of the corn, but don't disturb the stalks where nothing is growing yet.",
        "grade3_RunningFarm_10_markdown_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "grade3_RunningFarm_11a_markdown_instruction": "Collect all of the corn and lettuce, then pick the pumpkin.",
        "grade3_RunningFarm_2_markdown_instruction": "*\"Lettuce collect both crops from this row!\"*\n\nHelp the farmer collect both corn and lettuce from the field.",
        "grade3_RunningFarm_4_markdown_instruction": "*\"Gosh! Now the crops are growing in clusters!\"*  \n\nHelp the farmer pick all of the lettuce in each cluster before moving on to the next bunch.",
        "grade3_RunningFarm_5_markdown_instruction": "*\"What a bountiful crop!\"*\n\nThis field has clusters of corn, lettuce, and pumpkins all growing together.  Can you collect them all?",
        "grade3_RunningFarm_6_markdown_instruction": "*\"Let's take this one step further!\"*\n\nCan you figure out how to pick the pumpkin?  Make sure to collect all of the corn along the way!",
        "grade3_RunningFarm_7_markdown_instruction": "**Challenge:** Collect all of the corn and lettuce, then pick the pumpkin.",
        "grade3_RunningFarm_8_markdown_instruction": "Harvesting one type of crop at a time takes too long. Can you help me harvest both wheat and potatoes in one run? I wonder if you can stack another While There is... loop on top of another one?",
        "grade3_RunningFarm_9_markdown_instruction": "Can you help me one last time? I want to collect as many crops as I can before the weeds take over this field. How many do you think we can get?",
        "grade3_bee_conditionals_new1a_markdown_instruction": "You can only collect nectar from flowers, but you can check any space to see if there is a flower.",
        "grade3_bee_conditionals_new2a_markdown_instruction": "In this puzzle, we know that every flower has exactly one nectar, but the flowers aren't spaced evenly.\n\nGet all of the nectar using as few blocks as possible.",
        "grade3_bee_conditionals_new3b_markdown_instruction": "Conditionals can be helpful, even when you know exactly what is in each spot!\n\nCollect all of the nectar and make all of the honey.",
        "grade3_bee_conditionals_quantum1_markdown_instruction": "*\"This cloud is blocking my view!\"*\n\nCheck to see if there's a flower under the cloud. If there's a flower, get nectar.",
        "grade3_bee_conditionals_quantum2_markdown_instruction": "More clouds! \n\nCheck underneath every cloud to see if it is hiding a flower before you get nectar.  \n\nRemember: Not all clouds hide the same thing!",
        "grade3_bee_conditionals_quantum3_markdown_instruction": "*\"Now I just want to make honey.\"*\n\nSome of these clouds might have honeycombs under them.  Be sure to check if a honeycomb is hiding behind each cloud!",
        "grade3_bee_conditionals_quantum4_markdown_instruction": "Sometimes a cloud covers a flower, sometimes it covers a honeycomb! \n\nUse the `if/else` block to collect nectar at flowers and make honey at honeycomb.",
        "grade3_bee_conditionals_quantum5_markdown_instruction": "**Challenge:** There will be either a flower or a honeycomb under each of those clouds!\n\nUse the `if/else` block to collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "grade3_maze_Loop1_markdown_instruction": "**Assessment:**  Get me to the sunflower using only 5 blocks! ",
        "grade3_maze_loops1_markdown_instruction": "*\"Must...eat...sunflower!\"*\n\nGet the zombie to the sunflower.",
        "grade3_maze_loops2_markdown_instruction": "Get the zombie to the sunflower using the fewest blocks possible!  ",
        "grade3_maze_loops2a_markdown_instruction": "*\"Zombie hungry!\"*\n\nGet the zombie to the sunflower using the fewest number of blocks possible.",
        "grade3_maze_loops3_markdown_instruction": "*\"Must eat sunflower!\"*\n\nGet the zombie to the sunflower using only the blocks available.",
        "grade3_maze_nestedLoops2_markdown_instruction": "Suddenly, a magical block appears!  With the `repeat` block, you can loop code over and over.\n\nCan you get to the pig by creating a loop that uses only one `move forward` block inside of a `repeat`?",
        "grade3_maze_nestedLoops3_markdown_instruction": "Get me to the pig! You can only use one `move forward` block this time",
        "grade3_maze_nestedLoops4_markdown_instruction": "In this puzzle, two `repeat` loops will help you get to the pig with the fewest number of blocks!",
        "grade4_arist_functions_star0_markdown_instruction": "Have you drawn something like this star before? Practice making it one more time by adding a `turn` and a `repeat` block.",
        "grade4_arist_nested_loop_circles1_markdown_instruction": "**Assessment:** Use a nested loop to complete the design.",
        "grade4_arist_nested_loop_flags1_markdown_instruction": "Loop the given code to create a windmill.",
        "grade4_arist_nested_loop_polygons1_markdown_instruction": "Loop this design 10 times. \n\nHow much do you have to turn each time you loop?",
        "grade4_arist_nested_loop_polygons2_markdown_instruction": "Loop this shape 6 times. \n\nHow much do you have to turn each time you loop? ",
        "grade4_arist_nested_loop_squares1_markdown_instruction": "Can you draw these 10 squares of this sidewalk using a nested loop? \n\nEach square is 30 pixels.",
        "grade4_arist_nested_loop_triangles2_markdown_instruction": "Now nest this loop inside another loop to draw 10 triangles.  \nThis is called a \"nested\" loop.  ",
        "grade4_arist_nested_loop_triangles3_markdown_instruction": "Can you draw a hexagon by looping the triangle code?",
        "grade4_arist_nested_loop_triangles4_markdown_instruction": "Draw the teeth in the alligator's mouth!",
        "grade4_arist_nested_loop_triangles5_markdown_instruction": "Create a sun by nesting the starter code in another loop.\n\nTo get this cool design with a hollow center, you'll need to jump forward by the length of the triangle before turning.",
        "grade4_arist_nested_loop_triangles6_markdown_instruction": "Can you draw these 36 triangles using a nested loop?",
        "grade4_artist_freeplay_markdown_instruction": "Create your own project! This creation will be saved to your Projects dashboard so that you can easily edit it any time!",
        "grade4_artist_functions1_markdown_instruction": "*\"Me zombie artist. Me love drawing!\"*\n\nHelp the zombie draw glasses using squares with sides of 100 pixels.  \nThe bridge between the glasses is 75 pixels long.\n\n",
        "grade4_artist_functions2_markdown_instruction": "Functions let you define new blocks! \n\nWe've moved the blocks needed for drawing a square into a function called `draw a square`. This time, use the `draw a square` function to create the glasses. \n\nThe squares are 75 pixels apart.",
        "grade4_artist_functions2a_markdown_instruction": "Create this image using only the blocks provided.\n\n- To draw a diamond, you will need to alternate between turning 60 degrees and 120 degrees.",
        "grade4_artist_functions3a_markdown_instruction": "Create this image using only the blocks provided.\n\n- To draw a diamond, you will need to alternate between turning 60 degrees and 120 degrees.",
        "grade4_artist_functions3b_markdown_instruction": "This time, use lines of 8 hexagons with 25 pixel sides.\n\n- To make each hexagon, repeat the 6 times, turning 60 degrees.\n- To draw a diamond, you will need to alternate between turning 60 degrees and 120 degrees.",
        "grade4_artist_functionsChallenge0_markdown_instruction": "**Challenge:** Create as many functions as you think you need to make this drawing of 50 pixel squares.",
        "grade4_artist_functions_challenge_markdown_instruction": "**Functions Super Challenge:** Use the suggested functions to draw four rows of hexagons. Notice how our even numbered rows are shifted to the right?",
        "grade4_artist_functions_challenge2_markdown_instruction": "**Functions Super Challenge:** Use the suggested functions to draw four rows of hexagons. Notice how our even numbered rows are shifted to the right?",
        "grade4_artist_functions_stars0_markdown_instruction": "We will come back to functions shortly. Let's take a break to practice making this star. \n\nYou can make this drawing by adding a repeat block.",
        "grade4_artist_functions_stars1_markdown_instruction": "Now that you can draw a star, try drawing four stars!\n\n- Each branch of the star is 25 pixels long\n- Turn 45 degrees between branches\n- Jump 100 pixels between each star",
        "grade4_artist_functions_stars2_markdown_instruction": "When is drawing three stars harder than drawing four? When you also have to jump over the moon!\n\nDraw only those three stars to finish this puzzle.",
        "grade4_artist_functions_stars3_markdown_instruction": "That last one is tough if you only use loops. Let's try one more time and see if this new 'function' makes it easier to **draw a star**.",
        "grade4_artist_functions_windows0_markdown_instruction": "You are doing great! \n\nMake this window by drawing a square, then turning 90 degrees before drawing another, and so on.",
        "grade4_artist_functions_windows1_markdown_instruction": "You just created a nested loop! Let's repeat all of these commands with **another** `repeat` block to draw windows on this house. Don't forget to `jump`!",
        "grade4_artist_nestedLoops_challenge2_markdown_instruction": "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\" width=\"200px\"/>\n\nNow for a challenge!  \n\nHere is a design that uses only blocks that you have already been shown.  Can you figure out how to recreate it?  Feel free to use trial and error. You are not expected to get it perfect the first time.\n\nThe repeated shape is almost identical to the one from the last puzzle, except that the length used in the first loop is a little smaller. ",
        "grade4_artist_nested_loop_circles1_markdown_instruction": "**Assessment:** Use a nested loop to complete the design.",
        "grade4_artist_nested_loop_flags1_markdown_instruction": "Loop the given code to create a windmill.",
        "grade4_artist_nested_loop_polygons1_markdown_instruction": "Loop this design 10 times. \n\nHow much do you have to turn each time you loop?",
        "grade4_artist_nested_loop_polygons2_markdown_instruction": "Hi, I'm the Artist! Let's create some drawings together! For starters, try repeating this shape 6 times. \n\nHow much do you have to turn each time you loop? ",
        "grade4_artist_nested_loop_squares1_markdown_instruction": "Can you draw these 10 squares of this sidewalk using a nested loop? \n\nEach square is 30 pixels.",
        "grade4_artist_nested_loop_triangles1_markdown_instruction": "Complete the code to draw these triangles.  The first one is done for you.  Hint:  3 triangles in a 360 degree rotation.\n\n",
        "grade4_artist_nested_loop_triangles2_markdown_instruction": "Let's make a quick adjustment to get completely different image!  \n<b>Hint:</b> ? × 10 = 360",
        "grade4_artist_nested_loop_triangles3_markdown_instruction": "Can you draw a hexagon by looping the triangle code?\nHint: 6 × ? = 360",
        "grade4_artist_nested_loop_triangles4_markdown_instruction": "Let's try something a little different! Can you help me draw the bottom teeth in the alligator's mouth?",
        "grade4_artist_nested_loop_triangles5_markdown_instruction": "Create a sun by nesting the starter code in another loop.\n\nTo get this cool design with a hollow center, you'll need to jump forward by the length of the triangle before turning.",
        "grade4_artist_nested_loop_triangles6_markdown_instruction": "Can you draw these 36 triangles using a nested loop?",
        "grade4_artist_parameters_squares1_markdown_instruction": "Click \"edit\" to fill in the function definition of `draw a square` and add a parameter.  \nIt should take a length parameter just like the triangle. \n\n**This time, draw 3 squares:** 25, 50 and 75 pixels in length. The lefthand corners are each 100 pixels away from the last.",
        "grade4_artist_parameters_triangles1_markdown_instruction": "Today, we're going to try out a different, more powerful function editor. See if you can figure out how to edit the `draw a triangle` function to find the bugs.",
        "grade4_artist_parameters_triangles2_markdown_instruction": "Do you notice anything different about these function blocks? Click “Run” to see what happens.",
        "grade4_artist_parameters_triangles2b_markdown_instruction": "Can you complete this drawing? \n\nThe sides of each triangle are 25 pixels larger than the last.  \nThe first triangle has 25 pixel sides.",
        "grade4_artist_parameters_triangles3_markdown_instruction": "Can you complete this drawing? \n\nThe sides of each triangle are 25 pixels larger than the last.  \nThe first triangle has 25 pixel sides.",
        "grade4_artist_parameters_triangles4_markdown_instruction": "The code for this triangle function is broken. \n\nCan you edit the function to fix it, and then make triangles of length 25, 50, and 75?",
        "grade4_artist_parameters_trianglesx_markdown_instruction": "Can you complete this drawing? \n\nThe sides of each triangle are 25 pixels larger than the last.  \nThe first triangle has 25 pixel sides.",
        "grade4_bee_conditionals_nested_loops_markdown_instruction": "**Assessment:** Collect all of the nectar.  \nBe careful not to try to collect nectar from a purple flower if it doesn't have any.",
        "grade4_bee_conditionals_new1_markdown_instruction": "**Assessment:** Collect all of the nectar.  \nBe careful not to try to collect nectar from a purple flower if it doesn't have any.",
        "grade4_bee_conditionals_quantum1_markdown_instruction": "This cloud is blocking my view! \n\nCheck to see if there's a flower under the cloud, and only get nectar if there's a flower.   \nBe careful, it can change!",
        "grade4_bee_conditionals_quantum2_markdown_instruction": "More clouds! \n\nCheck underneath every cloud to see if it is hiding a flower before you get nectar.  \n\nRemember: Not all clouds hide the same thing!",
        "grade4_bee_conditionals_quantum4_markdown_instruction": "Sometimes this cloud covers a flower, and sometimes it covers a honeycomb! \n\nUse the `if/else` block to collect nectar only if it is a flower.  \nElse, make honey (because it is a honeycomb).",
        "grade4_bee_conditionals_quantum5_markdown_instruction": "There will be either a flower or a honeycomb under each of those clouds!\n\nUse the `if/else` block to collect nectar if there is a flower.\nOtherwise, make honey (because there is a honeycomb).",
        "grade4_bee_functions2_markdown_instruction": "Functions are blocks of code that perform a task.  \n\nUse the `get 2 nectar` function to collect the nectar from each flower.",
        "grade4_bee_functions3_markdown_instruction": "Build the `get 5` function to use in this puzzle.",
        "grade4_bee_functions4_markdown_instruction": "The `move and get nectar` function turns the bee, collects nectar, and then returns the bee to where it started.  \n\nUse the `move and get nectar` function to collect all of the nectar.",
        "grade4_bee_functions9_markdown_instruction": "**Challenge:** These flowers can have a different amount of nectar each time you run the puzzle.   \n\nCreate a function that collects all of the nectar from each flower.",
        "grade4_bee_nestedLoops1_markdown_instruction": "*\"Can you BEE-lieve all of these flowers?\"*\n\nCollect all of the nectar from each flower. ",
        "grade4_bee_nestedLoops2_markdown_instruction": "**Challenge:** Figure out how to get all of the nectar using only the blocks available.",
        "grade4_bee_nestedLoops4_markdown_instruction": "Collect all of the nectar from each flower and make honey at the honeycomb. ",
        "grade4_bee_nestedLoops5_markdown_instruction": "**Challenge:** Collect all of the nectar from each flower and make honey at each honeycomb. \n",
        "grade4_bee_nestedLoops_assess_markdown_instruction": "**Assessment:** Collect all of the nectar and make all of the honey using loops.\n\n**Hint:** *There are several possible solutions!*",
        "grade4_frozen_freeplay_markdown_instruction": "You've officially become a master artist! Create a winter wonderland.",
        "grade4_frozen_functions0_markdown_instruction": "A circle is a special shape. Can you figure out what number to replace the question marks with to draw a circle?",
        "grade4_frozen_functions1_markdown_instruction": "Use the new “dreate a circle” `function` to create 10 overlapping circles. Don't forget to `jump` forward between circles.",
        "grade4_frozen_functions1a_markdown_instruction": "Use the new “Create a circle” block to create 10 overlapping circles. Don't forget to jump forward between circles.",
        "grade4_frozen_functions2_markdown_instruction": "Now let's create 20 overlapping circles, turning 18 degrees between each circle.",
        "grade4_frozen_functions3_markdown_instruction": "Here's a ”Create circle” block that can make circles of different sizes. Can you use this to create a small circle of size 5 and a larger circle of size 10?",
        "grade4_frozen_functions4_markdown_instruction": "Intricate snow patterns can be created with very simple shapes. Can you make a pattern by repeating 5 circles of size 5 and 5 circles of size 10?",
        "grade4_frozen_nested_loop_diamonds1_markdown_instruction": "Let’s use a repeat block to create a rhombus. Like a square, all sides are equal length, but the angles are different. This one has 60 degree and 120 degree angles instead of all 90 degree angles.",
        "grade4_frozen_nested_loop_diamonds2_markdown_instruction": "Did you know every snowflake is a different shape? Let's create a new snowflake by using another “Repeat\" block to repeat a parallelogram 4 times, turning right by 90 degrees between each parallelogram.",
        "grade4_frozen_nested_loop_diamonds3_markdown_instruction": "Now, let's create a new snowflake by using the repeat block to repeat a parallelogram 10 times, turning right by 36 degrees between each one.",
        "grade4_frozen_nested_loop_rectangle1_markdown_instruction": "Hi, I’m Anna of Arendelle! Let’s use a repeat block to create a rectangle. This one is  200 pixels long and 100 pixels tall. All of the corners are 90 degree angles.",
        "grade4_frozen_square_markdown_instruction": "Hi, I’m Anna of Arendelle! Let’s make a square with the “Repeat” block, which uses fewer blocks. How many times (???) should the “Repeat” block loop the blocks inside it to make a square?",
        "grade4_frozen_square_loop1_markdown_instruction": "Hi, I’m Anna of Arendelle! Let’s make a square with the “Repeat” block, which uses fewer blocks. How many times (???) should the “Repeat” block loop the blocks inside it to make a square?",
        "grade4_frozen_square_loop2_markdown_instruction": "Let's create three squares, turning after each square. Be sure to turn by 120 degrees before each new square.",
        "grade4_frozen_square_loop3_markdown_instruction": "Can you create a snowflake using the “Repeat” block to make a square 10 times, and the “Turn” block to turn 36 degrees between each square?",
        "grade4_playlab_freeplay_markdown_instruction": "It's free play time! Have fun with all the blocks in your tool box.  \n<br/>\n\n<h5>\n<details>\n<summary><b>Need some ideas?</b></summary>\n\t<br/>\n\t<h5>\n\t\t<ul>\n        \t<li><strong>Tag</strong> - Have character 2 patrol and use your arrow keys to make character 1 chase until they collide. </li>\n            <li><strong>Whack-a-Sprite</strong> - Have a character constantly pop up at a random location. Award points for clicking the sprite before it disappears. </li>\n            <li><strong>Best Guess</strong> - Make both characters disappear, change location to a random spot, then reappear as a random character.  Click on the first one and get a point...but if you click on the second one you LOSE a point! </li>\n        </ul>\n\t</h5>\n</details>\n</h5>\n",
        "grade4_playlab_test2_markdown_instruction": "Here's a function called `jump` that causes your main character to jump up 100 pixels. \n\nRun the program and use the jump function to collect all of the flags by moving the dog with the arrow keys.",
        "grade4_review_artist2_markdown_instruction": "This house needs a roof! Draw the triangle.  \n\nHint: all three sides are the same length.\n\n<img src=\"https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif\" width=\"300\"/>",
        "grade4_review_artist3_markdown_instruction": "The jump block moves the artist without drawing. Draw the dashed line using both the `jump forward` and `move forward` blocks. Each line is 50 pixels long.",
        "grade4_review_bee1_markdown_instruction": "Now use the `repeat` block to collect all of the nectar and make all of the honey.",
        "grade4_review_bee3_markdown_instruction": "Such a busy bee!\n\nHelp Bee collect all of the nectar and make all of the honey with the fewest blocks possible.",
        "grade4_scaffolded_project1_markdown_instruction": "It is amazing how much you have learned! Let's put them together to make a game, step by step.\nTo start, let's set up your game's space and actor. We've put these blocks in your tool box. Choose a background and map, and pick an actor to be your game's hero.\n\n![](https://images.code.org/745931ce34b3c47de19c36009e4a9c48-image-1471464938470.14.47 PM.png)",
        "grade4_scaffolded_project2_markdown_instruction": "Now let's get things moving! Use event handlers and actions to make your hero move.\n\nWe've added these blocks to your tool box to help you.\n\n![](https://images.code.org/6216c0559cfae16005ffb53e6532473b-image-1471472994205.23.54 PM.png)",
        "grade4_scaffolded_project3_markdown_instruction": "Now that your game has a hero, it's time to start adding other actors and assigning them behaviors. \n\nAdd two or more additional actors to your game and make them move. Do you want to have an actor patrol back and forth? Try using a these new blocks to bring these other components of your game to life!\n\n![](https://images.code.org/4cfffd476c6129891eb8bde246a711a8-image-1472065288448.00.42 PM.png)\n\n**NOTE:** Chasing and fleeing behavior commands are coming soon!",
        "grade4_scaffolded_project4_markdown_instruction": "Just getting the actors moving is a great step, but we need to program some interactions to make this really feel like a game. A simple way to do this is to add or remove points when actors collide with projectiles or each other. Find some interesting ways to change the score in your game.\n\n*Don't expect to get this right on the first try. Keep testing your game as you code. You'll not only want a game that works, but one that is fun to play!*\n\nWe've added these blocks to your toolbox:\n\n![](https://images.code.org/ad0df96aa91c89e3d903dce2fe19517f-image-1472070105051.20.55 PM.png)",
        "grade4_scaffolded_project4a_markdown_instruction": "Just getting the actors moving is a great step, but we need to program some interactions to make this really feel like a game. A simple way to do this is to add or remove points when actors collide with projectiles or each other. Find some interesting ways to change the score in your game.\n\n*Don't expect to get this right on the first try. Keep testing your game as you code. You'll not only want a game that works, but one that is fun to play!*\n\n![](https://images.code.org/876b13abf8a7984f94342dd9a5c8a8f0-image-1472069578010.42.30 PM.png)",
        "grade4_scaffolded_project5_markdown_instruction": "Great job! You have all the basic components of a working game. Now spend some time making sure the game works the way you want. Try including a way to win or lose your game.\n\n*Don't forget: Keep testing your game as you code. You'll not only want a game that works, but one that is fun to play!*\n\nYour toolbox has been re-organized to make it easier to find what you need. We've also added these blocks:\n\n![](https://images.code.org/59b92b4c288bd5fc0c3be355c968f3d1-image-1472074578380.27.57 PM.png)",
        "grade4_scaffolded_project6_markdown_instruction": "You've finished! Now you can play your game or share it with your friends and classmates!",
        "grade5_artist_binary1_markdown_instruction": "Binary is a way of representing information using only two options.  Here, we're going to use the options \"off\" (represented by the number 0) and \"on\" (represented by the number 1).   \n\nWe've provided you with a grid of \"pixels\" that you can walk through and make designs by turning on only certain squares.  \n\n**Can you have the artist draw \"01010101\" in binary in the first row?**",
        "grade5_artist_binary10_markdown_instruction": "<img src=\"https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png\" width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! \n\nIf this picture inspires you, try to make something similar. Otherwise, create something all your own. \n<br/>\n",
        "grade5_artist_binary2_markdown_instruction": "Here's a function that takes a binary string of 1's and 0's and instructs the artist to follow them from left to right, top to bottom.  \n\nThe artist will fill-in the squares when it sees a 1 and ignore the square when it sees a 0. \n\n**Run this code to see how the artist uses binary to draw this pattern.**",
        "grade5_artist_for_loops1_markdown_instruction": "Use a `for` loop to draw this triangle that is 50 pixels wide. If you count from 1 to 3 by 1s, you can use this just like a `repeat` loop.",
        "grade5_artist_for_loops10_markdown_instruction": "**Challenge:** Can you figure out how to use all of the things you've learned to create this image of polygons, all with 40 pixel sides?",
        "grade5_artist_for_loops1a_markdown_instruction": "Try using a `for loop`to create this triangular design. Don't worry that the numbers are different than the last puzzle. As long as you turn by the right number of degrees, the artist will make the correct shape!\n\n",
        "grade5_artist_for_loops1b_markdown_instruction": "**Free Play:** Experiment with the `for` loop and the `counter` variable.  \n\nDrag out a few blocks and see what happens.  \n\n<br/><br/>\n",
        "grade5_artist_for_loops2_markdown_instruction": "Use a `repeat` inside of a `for` loop to create this stack of triangles that goes from 50 pixels to 100 pixels.",
        "grade5_artist_for_loops3_markdown_instruction": "These triangles go from 20 pixel sides to 200 pixel sides, and each triangle is 20 pixels larger than the last.",
        "grade5_artist_for_loops4_markdown_instruction": "These squares start at 15 pixels long, the largest is 300 pixels long, and each square is 15 pixels larger than the last.",
        "grade5_artist_for_loops5_markdown_instruction": "Just one little change to the code from the last image can create this drawing. Can you figure out what that change is?\n\nHint:  You need to remove something!",
        "grade5_artist_for_loops6_markdown_instruction": "If you turn a little bit more or less than you normally would for a shape, it creates a neat effect.\n\nTry using some of the code from the last level, but turning 89 degrees to create this twisted square spiral.",
        "grade5_artist_for_loops7_markdown_instruction": "Make three small changes to the code from the last level to get this!  \n(This time, the `for` loop increments by 2)",
        "grade5_artist_for_loops7a_markdown_instruction": "Take the angle down to 72 degrees to get a spiraled pentagon.",
        "grade5_artist_for_loops7b_markdown_instruction": "Use the counter inside the `set alpha` block to get this faded center.  \n(This hexagon pattern was made using a 60 degree turn.)",
        "grade5_artist_for_loops8_markdown_instruction": "Remember back in a previous stage when we used a variable to control the number of sides in a shape? We are going to do the same thing with the `counter` variable now.  \n\nThis pattern starts with a triangle and adds one side at a time until it draws a decagon (10 sides). Each side should be 100 pixels long. \n\nHow will you use the `counter` variable from the `for` loop to recreate this drawing?",
        "grade5_artist_for_loops9_markdown_instruction": "Let's put it all together!   \n\nUsing your knowledge of `for` loops and the `counter` variable, create this drawing where each shape has two more sides than the last.  Make sure that each side is 10 times as long as the number of sides in the polygon.\n\nVery little of the code has been provided for you.",
        "grade5_artist_for_loopsfreeplay11_markdown_instruction": "<br/><br/>\n<img src=\"https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png\" width=\"250px\"/>  \n<br/><br/>\n**Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own.",
        "grade5_artist_for_loopsfreeplay12_markdown_instruction": "**Free Play:** Try using the `counter` variable with other drawing elements to make magical images like this one.\n\n<img src=\"https://images.code.org/7910db8adf2ec7e4c5fdad0101c68368-image-1475911466143.24.03.png\" width=\"400px\"/>",
        "grade5_artist_freeplay_markdown_instruction": "Create your own project! This creation will be saved to your Projects dashboard so that you can easily edit it any time!",
        "grade5_artist_functionparameters10_markdown_instruction": "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\" width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! \n\nIf this picture inspires you, try to make something similar. Otherwise, create something all your own.\n\nNotice: We've used the `set alpha` block to make the \"petals\" fade toward the outside.",
        "grade5_artist_functionparameters11_markdown_instruction": "**Freeplay:** Below there are functions you've written, and more for you to play with. Play with the pen width to see how different your drawings look!",
        "grade5_artist_functionparameters7_markdown_instruction": "This image is similar to the last.  \n\nCan you use a `for` loop with your function to make this design?",
        "grade5_artist_functionparameters9_markdown_instruction": "**Challenge:** Edit `draw a spiral edge` to use `length` and `sides` parameters, then recreate these shapes.\n\n- The square goes from 3 pixels to 90 pixels.\n- The hexagon goes from 3 pixels to 100 pixels.\n- The triangle goes from 3 pixels to 105 pixels.",
        "grade5_artist_functionparameters9a_markdown_instruction": "Finish off the `draw a spiral edge` function to also ask for a minimum length for the center of the spiral.\n\n- The smallest side in the center of this square is 50 pixels long\n- The longest side at the outside of this spiral is 200 pixels long\n",
        "grade5_artist_functionparameters9b_markdown_instruction": "Can you figure out how to make this drawing using the function that you just created?\n\n- The red spiral goes from 50 to 200 pixels\n- The blue spiral goes from 25 to 125 pixels\n- The green spiral goes from 100 to 300 pixels\n",
        "grade5_artist_functionparameters_6_markdown_instruction": "Great job!  Now edit this function to add a parameter for the number of sides in your polygon.\n\nThe sides of all the shapes are 100 pixels long.",
        "grade5_artist_parameters_squares1_markdown_instruction": "Click \"edit\" to fill in the function definition of `draw a square` and add a parameter.  \nIt should take a length parameter just like the triangle. \n\n**This time, draw 3 squares:** 25, 50 and 75 pixels in length. The lefthand corners are each 100 pixels away from the last.",
        "grade5_artist_parameters_squares1a_markdown_instruction": "Today, we're going to try out a different, more powerful function editor. See if you can figure out how to edit the `draw a square` function to find the bugs.",
        "grade5_artist_parameters_squares2a_markdown_instruction": "Edit the function to accept a parameter called `length`.  \n\nThe sides of each square should be 25 pixels larger than the last.  The first square has 25 pixel sides. Replace the '???' with the correct values to draw the picture.",
        "grade5_artist_parameters_stars1_markdown_instruction": "That last one is tough if you only use loops. Let's try one more time and see if this new 'function' makes it easier to **draw a star**.",
        "grade5_artist_parameters_triangles1_markdown_instruction": "Today, we're going to try out a different, more powerful function editor. See if you can figure out how to edit the `draw a square` function to find the bugs.",
        "grade5_artist_parameters_triangles1a_markdown_instruction": "Today, we're going to try out a different, more powerful function editor. See if you can figure out how to edit the `draw a triangle` function to find the bugs.",
        "grade5_artist_parameters_triangles1aa_markdown_instruction": "Click \"edit\" to fill in the function definition of `draw a triangle` and add a parameter.  \nIt should take a length parameter just like the triangle. \n\n**This time, draw 3 triangles:** 25, 50 and 75 pixels in length. The lefthand corners are each 100 pixels away from the last.",
        "grade5_artist_parameters_triangles2_markdown_instruction": "Can you complete this drawing? \n\nThe sides of each triangle are 25 pixels larger than the last.  \nThe first triangle has 25 pixel sides.",
        "grade5_artist_parameters_triangles2a_markdown_instruction": "Do you notice anything different about these function blocks? Click “Run” to see what happens.",
        "grade5_artist_parameters_triangles3_markdown_instruction": "The code for this triangle function is broken.\n\nCan you edit the function to fix it, and then make triangles of length 25, 50, and 75?",
        "grade5_artist_parameters_triangles4_markdown_instruction": "The code for this triangle function is broken. \n\nCan you edit the function to fix it, and then make triangles of length 25, 50, and 75?",
        "grade5_artist_parameters_trianglesy_markdown_instruction": "The code for this triangle function is broken.\n\nCan you edit the function to fix it, and then make triangles of length 25, 50, and 75?",
        "grade5_artist_variables_freeplay10_markdown_instruction": "**Free Play:** Experiment with the number of sides this shape has. Can you change the algorithm so that the overall size of the shape stays the same, no matter how many sides it has? ",
        "grade5_artist_variables_freeplay14_markdown_instruction": "**Free Play**: Check it out! Now your algorithm is nested within one more loop. Experiment with changing the values of your two variables to draw cool patterns.\n\nFor even more effect, try playing with color!  Use random colors inside loops to see how it changes your design.",
        "grade5_artist_variables_freeplay15_markdown_instruction": "<img src=\"https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png\" width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own. ",
        "grade5_artist_variables_hexagons1_markdown_instruction": "Let's try it again! \n\nCan you set the `length` variable to 60 to make this cool design with hexagons?",
        "grade5_artist_variables_letterT11_markdown_instruction": "Here’s some more complicated code using the same concepts from the last puzzle - what should you set the `sides` variable to in order to draw this picture made of squares?\n\n<p style=\"font-size:small; padding: 15px 15px 15px 40px; background-color:#dcf3f3; border-radius:10px;\">\n\tJust for fun: Try using a few different numbers to see what happens to the pattern!\n</p>",
        "grade5_artist_variables_octagons13_markdown_instruction": "When a shape has lots of sides, each side needs to be shorter if you want the whole pattern to fit on the screen. \n\nLet's recreate the algorithm for this amazing pattern, but instead of manually setting the `length` variable, let's use a math block with the `sides` variable inside to make sure that each shape fits correctly.  \n\nThe perimeter of each polygon is 300 pixels.",
        "grade5_artist_variables_pentagon8_markdown_instruction": "Use what you learned in the last puzzle to create this hexagon using the `sides` variable.\n\nSee how you could change just one value to draw a triangle,  square, pentagon, or octagon?",
        "grade5_artist_variables_pentagon9_markdown_instruction": "Now, recreate the algorithm from the last level and create a pentagon with sides of length 150.",
        "grade5_artist_variables_pentagons1_markdown_instruction": "Draw this pattern of pentagons with 100 pixel sides by setting the right value for `length` and dropping the `length` variable into all of the the correct places. \n\nSee how you only have to set the value for `length` once, and the code uses the right value everywhere?",
        "grade5_artist_variables_rectangle6_markdown_instruction": "Now I want to make a rectangle that is twice as tall as it is wide. We've got a variable called `width` that needs to be set to 100. Can you use the math blocks to complete the code?",
        "grade5_artist_variables_square7_markdown_instruction": "Here’s some code that can draw any regular polygon. \n\nThere’s a new variable called `sides` that is set to 4. \n\nCan you use the `sides` variable (along with the math block) to turn the right amount regardless of how many sides are in the polygon?",
        "grade5_artist_variables_triangles1_markdown_instruction": "Let's draw an equilateral triangle. \n\nIt has to be exactly 50 pixels long on each side.\n\n",
        "grade5_artist_variables_triangles1_2018_markdown_instruction": "Let's draw an equilateral triangle. \n\nIt has to be exactly 50 pixels long on each side.\n\n",
        "grade5_artist_variables_triangles2_markdown_instruction": "Instead of using `move forward by 150`, the `move` block is now referencing a variable called `length`. Can you set `length` to 150 to draw this new triangle?",
        "grade5_artist_variables_triangles3_markdown_instruction": "Drag a number block to the `set length` block and to the `repeat _ times` block to draw a set of 50 pixel triangles. ",
        "grade5_bee_for_loops10_markdown_instruction": "If your loop is counting down, the increment is **subtracted** from your counter variable each time through. \n\nWhat should your increment be to collect 15, then 12, then 9, 6, 3 nectar?",
        "grade5_bee_for_loops11_markdown_instruction": "**Challenge:** Take what you've learned about `for` loops and try to solve this problem. \n\nRemember: You may have to run through solutions multiple times before you figure out all of the steps.\n",
        "grade5_bee_for_loops2_markdown_instruction": "Add the code necessary to make sure the bee collects all the nectar.\n\nLook at how much code you need for this puzzle! (We'll learn a simpler way in the next puzzle.)",
        "grade5_bee_for_loops3_markdown_instruction": "Ah, the `for` loop makes this much easier!  \n\nTry this puzzle using the `for` loop with `counter` variable and see how much shorter your code becomes.",
        "grade5_bee_for_loops4_markdown_instruction": "Help the bee collect all of the nectar.",
        "grade5_bee_for_loops5_markdown_instruction": "Now we need to `move forward` `counter` times, then `get nectar` `counter` times.  Can you use two `repeat` loops to solve this challenge?",
        "grade5_bee_for_loops6_markdown_instruction": "You can also use a `for loop` to count down. Try gathering this nectar by counting down from 5 to 1 by 1.",
        "grade5_bee_for_loops7_markdown_instruction": "The last number in your `for` loop is called the **\"increment\"**.  Each time the loop is run, the counter variable changes by the value of the increment.\n\nTry collecting these flowers using an increment of 2.",
        "grade5_bee_for_loops8_markdown_instruction": "You've got this!  \n\nWhat should your increment be to collect 3, 6, 9, 12, 15 nectar?\n\n",
        "grade5_bee_for_loops9_markdown_instruction": "Now, let's combine the `counter` variable with a math block! \n\nHow can you use the `counter` variable to navigate this garden with the fewest number of blocks possible?",
        "grade5_bee_parameters_new1_markdown_instruction": "Check beneath the clouds to see if the flowers have any nectar.",
        "grade5_bee_parameters_new3_markdown_instruction": "Time to put the function to the test! \n\nLet's see if it makes collecting these three rows of nectar any easier.",
        "grade5_bee_parameters_new4_markdown_instruction": "*\"How is your function holding up?\"*   \n\nWe need to make some adjustments here. Click \"edit\" to add a `length` parameter to the function so that it will still work when the row is a different length.",
        "grade5_bee_parameters_new5_markdown_instruction": "*\"You're doing great so far!\"*\n\nLet's use this function to collect a lot of nectar.",
        "grade5_bee_parameters_new7_markdown_instruction": "**Challenge:** Something looks a little different. Can you modify your function to make honey as well?",
        "grade5_bee_parameters_new8a_markdown_instruction": "Use your new function to solve this spiral.",
        "grade5_bee_parameters_new9a_markdown_instruction": "Use your new function to solve this spiral.",
        "grade5_pixelation_markdown_instruction": "# Make your own image of any size\n\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\n\n\n**Directions:**\n\n* Encode an image of anything you like using `binary`.\n* The binary language will be represented with `0` and `1` only.\n* You might want to do some planning and sketching with graph paper first. \n* Depict something, perhaps your name written out, your initials, an icon or logo of some sort.\n* Get creative! The image doesn't have to be a perfect square, it can be long and skinny.",
        "grade5_playlab_freeplay_markdown_instruction": "It's free play time! Have fun with all the blocks in your tool box.  \n<br/>\n\n<h5>\n<details>\n<summary><b>Need some ideas?</b></summary>\n\t<br/>\n\t<h5>\n\t\t<ul>\n        \t<li><strong>Tag</strong> - Have character 2 patrol and use your arrow keys to make character 1 chase until they collide. </li>\n            <li><strong>Whack-a-Sprite</strong> - Have a character constantly pop up at a random location. Award points for clicking the sprite before it disappears. </li>\n            <li><strong>Best Guess</strong> - Make both characters disappear, change location to a random spot, then reappear as a random character.  Click on the first one and get a point...but if you click on the second one you LOSE a point! </li>\n        </ul>\n\t</h5>\n</details>\n</h5>\n",
        "grade5_playlab_variables10_markdown_instruction": "Edit the the `patrol` function to add an `actor` parameter, so that we can call it for each of the actors on the screen. Remember, the actors correspond to numbers 1, 2, and 3.",
        "grade5_playlab_variables11_markdown_instruction": "Add another parameter called `speed` to the `patrol` function. Try using a `set speed` block with the new `speed` parameter to help Penguin get both flags before the other sprites even get one.",
        "grade5_playlab_variables12_markdown_instruction": "Let's have some fun! Look at the code provided to see if you can figure out what each block does.  \n\nWhen you're done, use the arrow keys to control Dog and collect all of the flags.\n\n**NOTE:** You don't need to make any changes to the program",
        "grade5_playlab_variables13_markdown_instruction": "Use the `when actor touches` block to send Dog back to the top-left ONLY if Dog touches any of the other actors.",
        "grade5_playlab_variables14_markdown_instruction": "It's free play time! Have fun with all the blocks in your tool box.  \n<br/>\n\n<h5>\n<details>\n<summary><b>Need some ideas?</b></summary>\n\t<br/>\n\t<h5>\n\t\t<ul>\n        \t<li><strong>Tag</strong> - Have character 2 patrol and use your arrow keys to make character 1 chase until they collide. </li>\n            <li><strong>Whack-a-Sprite</strong> - Have a character constantly pop up at a random location. Award points for clicking the sprite before it disappears. </li>\n            <li><strong>Best Guess</strong> - Make both characters disappear, change location to a random spot, then reappear as a random character.  Click on the first one and get a point...but if you click on the second one you LOSE a point! </li>\n        </ul>\n\t</h5>\n</details>\n</h5>\n",
        "grade5_playlab_variables1ask_markdown_instruction": "This time, when you press 'run', you will see a 'prompt' asking you for a number. This number will be stored in a variable used to set the dog's speed.\n\n\nPay attention to how this program is written!",
        "grade5_playlab_variables2_markdown_instruction": "The race in that last puzzle wasn't very fair! Change the `dog_speed` variable to make sure you can collect more flags than Cat. The first to collect 10 flags wins!",
        "grade5_playlab_variables3_markdown_instruction": "Here's a new kind of game! \n\nYou don't need to change anything on this level.\n\n**Directions:** Use the left and right arrows to move, and the up arrow to jump. See if you can collect all of the flags.",
        "grade5_playlab_variables4_markdown_instruction": "Now we're using a variable called `height` to control how high the dog can jump. Update the `height` variable so that the dog can jump high enough to reach all the flags. \n",
        "grade5_playlab_variables6_markdown_instruction": "In our game, how should we score points?\n\n1. Add 1 to your `points` variable each time Dog hits Cat with a piece of pie.\n2. Use the `when actor 2 touches anything` event to trigger an update to your score. You can increment your variable by setting `points = points + 1.`\n3. Get your score up to 10 to pass the level.\n\n**Note:** Use the right arrow to throw pie!",
        "grade5_playlab_variables6ask_markdown_instruction": "This time, you need 100 points to win!  Don't worry though, you can choose how many points you earn each time you score a hit!\nTry adding the `ask` block and changing the number 1 out for the variable `value`.\n\n**Note:** Use the right arrow to throw pie!",
        "grade5_playlab_variables7_markdown_instruction": "Nice, now let's make sure this game isn't too easy to play!\n\nAny time Dog (actor 1) gets hit by a sandwich from Cat (actor 2), you should lose a point.\n\nStart with 10 points so it's not too hard. Let your score drop down from 10 to 0 to pass the level.",
        "grade5_playlab_variables9_markdown_instruction": "Here's a function called `patrol`. \n\nEdit `patrol` to move Cat up 400 pixels and then down 400 pixels.",
        "grade5_playlab_variables_freeplay_markdown_instruction": "Free Play time! Here are all of the variables we've played with so far in this stage, as well as a few more in case you want them. \n\nNotice that there are now so many blocks in our toolbox that they need to be organized!  Here, we've put each piece into an appropriate category.  Take some time to explore everything that is available. When you're done browsing, make a game or story using repeats, variables, and events.  \n\n*Hint: scroll down to see all the commands in the workspace.*",
        "grade5_playlab_variables_jump1_markdown_instruction": "This puzzle uses a hidden function that makes the dog jump when the `up` arrow is pressed. The height of the jumps can be set at the start of the game using the `jumpPower` variable. Try to touch all of the flags!",
        "grade5_prompt_test_markdown_instruction": "Variables aren't always numbers. What if you wanted to store a word or text? Experiment with the new `ask` block.",
        "gradeK_sequence_4_markdown_instruction": "Try this one yourself from the beginning.\n\n![](https://images.code.org/43001078c4df6feea1a6edf025192d85-image-1467929743355.gif)",
        "gradek_artist_loops1_markdown_instruction": "Help the artist draw this line two times forward.\n\n![](https://images.code.org/7ddc7b43ef27197559c7defb0af56d03-image-1470776934855.gif)",
        "gradek_artist_loops2_markdown_instruction": "Our artist is trying to draw a line five times, but can't get it right. Can you help?\n\n![](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)",
        "gradek_artist_loops3_markdown_instruction": "Now, use a `repeat` loop to draw this line five times!\n\n![](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)",
        "gradek_artist_loops4_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nDraw a line seven steps long. This will become our horizon.<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/c00b930eb5fb13ae946847adc51c9bd3-image-1467935631246.gif\" width=\"300\"/>\n",
        "gradek_artist_loops5_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nLet's put a nice hill in the back.<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/bbbd114642d829029fc3b0566a4437e3-image-1477107329933.gif\" width=\"300\"/>\n",
        "gradek_artist_loops7_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nWe need a ladder up to the boat.<br/>\n</div>\n\n<img src=\"https://images.code.org/6e4dc767e55d11400f35c6680bbfe1e3-image-1470788284437.gif\" width=\"300\"/>",
        "gradek_artist_loops9_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nTime to head back to land. Help me put down stones so I don't fall in!<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/5ba9e8e5c1524eec2b0ba3e4684b0cef-image-1467936361364.gif\" width=\"300\"/>\n",
        "gradek_artist_loopsA_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nHelp me build steps to watch the ship sail away.<br/>\n</div>\n\n<img src=\"https://images.code.org/0dfa647dbc835fae09989a0fbfd798c7-image-1470871168220.gif\" width=\"300\"/>\n",
        "gradek_playlab_events1c_markdown_instruction": "Jorge the Dog wants to say \"Hi there.\"  Can you help him?",
        "gradek_playlab_events2c_markdown_instruction": "Help Jorge the Dog get moving by connecting the ![](https://images.code.org/b3d6215901969328333d6393f8101c5b-image-1478142333199.png) block to the ![](https://images.code.org/4f2130b2a3053695414a02c3d39ef864-image-1478143461271.png) event block that is already in the workspace.",
        "gradek_playlab_events3c_markdown_instruction": "Now, get Jorge to move right when the ![](https://images.code.org/b99365eb23280f158e6ef570fe1c8a76-image-1478145132820.png) button is clicked.",
        "gradek_playlab_events4c_markdown_instruction": "Add events to have Jorge move up and down when the ![](https://images.code.org/379493b95d158b273f1424538b1c635a-image-1478145402316.png) and ![](https://images.code.org/f490d78efd81c21ab74286aefe7af097-image-1478145385132.png) buttons are pressed.",
        "harvester_Kahoot_markdown_instruction": "*\"Oooh, veggies are cropping up everywhere!\"*\n\nNow help the farmer pick all of the corn on the way to the pumpkin at the end.\n___\n##### Note: Every square on the path that leads to the pumpkin will either have *one* corn or nothing.  You will need to use an `if` statement to check whether there is corn before you try to pick it!",
        "harvey_pixelation_markdown_instruction": "# Make your own image of any size\n\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\n\n\n**Directions:**\n\n* Encode an image of anything you like using `binary`.\n* The binary language will be represented with `0` and `1` only.\n* You might want to do some planning and sketching with graph paper first. \n* Depict something, perhaps your name written out, your initials, an icon or logo of some sort.\n* Get creative! The image doesn't have to be a perfect square, it can be long and skinny.",
        "harvey_snowflake_artist1_markdown_instruction": "*It's time to get your snowflake ready for 3d printing!*\n\n![](https://images.code.org/ba50acd509bd25e07e7d4622a86ba158-image-1503785370113.08.08 PM.png)In order for your image to print correctly, follow these rules:\n\n* Make sure your image is all **one piece**! Separate pieces will print separately.\n* Make sure your image **fits** entirely on the canvas\n* Use just **black lines** on a white background.\n* Jump the artist off the top left corner (-10 over, -10 down) at the end of your program:\n\n<xml>    <block type=\"jump_to_xy\"><title name=\"XPOS\">-10</title><title name=\"YPOS\">-10</title>\n    </block>\n    <block type=\"jump_to\"><title name=\"VALUE\">7</title>\n    </block></xml>\n\n    When you are finished, right-click to save the image, then send it to me on <a href=\"https://classroom.google.com\">Google Classroom</a>.",
        "harvey_snowflake_artist2_markdown_instruction": "*It's time to get your snowflake ready for 3d printing!*\n\n![](https://images.code.org/ba50acd509bd25e07e7d4622a86ba158-image-1503785370113.08.08 PM.png)In order for your image to print correctly, follow these rules:\n\n* Make sure your image is all **one piece**! Separate pieces will print separately.\n* Make sure your image **fits** entirely on the canvas\n* Use just **black lines** on a white background.\n* Jump the artist off the top left corner (-10 over, -10 down) at the end of your program:\n\n<xml>    <block type=\"jump_to_xy\"><title name=\"XPOS\">-10</title><title name=\"YPOS\">-10</title>\n    </block>\n    <block type=\"jump_to\"><title name=\"VALUE\">7</title>\n    </block></xml>\n\nWhen you are finished, right-click to save the image, then send it to me on <a href=\"https://classroom.google.com\">Google Classroom</a>.",
        "iceAgeLoopsforVideo_markdown_instruction": "Can you get to the acorn with just one <xml><block type=\"maze_moveForward\"/></xml> block? Try using a loop!",
        "iceage_click_hello_markdown_instruction": "Can you help Sid call for his friends when you click on him? \nOnce you're done, press \"Run\" to play.  Click on Sid to see your code work!",
        "iceage_click_hello_2018_markdown_instruction": "Can you help Sid call for his friends when you click on him? \nOnce you're done, press \"Run\" to play.  Click on Sid to see your code work!",
        "iceage_free_play_markdown_instruction": "Time to create your own game or story!  \n\nWhen you're done, click \"Finish\" to let friends try your game on their phones, tablets, or computers!\nDon't know what to make? Click the hints for details.",
        "iceage_free_play_2018_markdown_instruction": "Time to create your own game or story!  \n\nWhen you're done, click \"Finish\" to let friends try your game on their phones, tablets, or computers!\nDon't know what to make? Click the hints for details.",
        "iceage_free_playcourseF_IceAge_11_markdown_instruction": "Time to create your own game or story!  \n\nWhen you're done, click \"Finish\" to let friends try your game on their phones, tablets, or computers!\nDon't know what to make? Click the hints for details.",
        "iceage_hello1_markdown_instruction": "Sid (actor 1) wants to gather everyone for a new adventure. Can you help him say \"Hello!\" by dragging the `say` block out and connecting it to the bottom of the `when run` event?   \n\nDon't forget to type \"Hello!\" inside!",
        "iceage_hello1_2018_markdown_instruction": "Sid (actor 1) wants to gather everyone for a new adventure. Can you help him say \"Hello!\" by dragging the `say` block out and connecting it to the bottom of the `when run` event?   \n\nDon't forget to type \"Hello!\" inside!",
        "iceage_hello2_markdown_instruction": "Manny (actor 2) found Sid (actor 1) and wants to invite him on an adventure. Help them greet each other by using the the `actor ___ say` block twice.",
        "iceage_hello2_2018_markdown_instruction": "Manny (actor 2) found Sid (actor 1) and wants to invite him on an adventure. Help them greet each other by using the the `actor ___ say` block twice.",
        "iceage_move_events_markdown_instruction": "Scrat is still looking for acorns! \nHelp him scamper around by attaching a `move actor 1` block to each of the events and changing the direction to work for each arrow key. \nWhen you’re done, click \"Run\" and try to collect all of the acorns.",
        "iceage_move_events_2018_markdown_instruction": "Scrat is still looking for acorns! \nHelp him scamper around by attaching a `move actor 1` block to each of the events and changing the direction to work for each arrow key. \nWhen you’re done, click \"Run\" and try to collect all of the acorns.",
        "iceage_move_to_actor_markdown_instruction": "Diego (actor 1) is searching for Manny (actor 2). Can you help bring the two together? Connect a block to the `when actor touches` event to play a sound when they find each other.",
        "iceage_move_to_actor_2018_markdown_instruction": "Diego (actor 1) is searching for Manny (actor 2). Can you help bring the two together? Connect a block to the `when actor touches` event to play a sound when they find each other.",
        "iceage_move_to_flag_markdown_instruction": "Scrat is looking for his acorn! Can you help him move the last 200 pixels?",
        "iceage_move_to_flag_2018_markdown_instruction": "Scrat is looking for his acorn! Can you help him move the last 200 pixels?",
        "iceage_repeat_markdown_instruction": "The `repeat forever` block allows you to run code continuously. Can you put blocks inside of it to help Granny get some exercise by moving left and right repeatedly?",
        "iceage_repeat_2018_markdown_instruction": "The `repeat forever` block allows you to run code continuously. Can you put blocks inside of it to help Granny get some exercise by moving left and right repeatedly?",
        "iceage_sound_and_points_markdown_instruction": "Here is your code from the last puzzle, as well as the code to move Granny left and right. \nCan you finish the program to make it so that you both **play a sound** and **score a point** when Sid and Granny collide? \nPress \"Run\" to play the game.",
        "iceage_sound_and_points_2018_markdown_instruction": "Here is your code from the last puzzle, as well as the code to move Granny left and right. \nCan you finish the program to make it so that you both **play a sound** and **score a point** when Sid and Granny collide? \nPress \"Run\" to play the game.",
        "iceage_throw_hearts_markdown_instruction": "Sid wants to let his grandmother, Granny, know that he loves her.   \n\nUse the `actor __ throw` command to have Sid (actor 1) throw hearts at Granny (actor 2)! \nSet Granny's mood to happy when she gets hit with the hearts.",
        "iceage_throw_hearts_2018_markdown_instruction": "Sid wants to let his grandmother, Granny, know that he loves her.   \n\nUse the `actor __ throw` command to have Sid (actor 1) throw hearts at Granny (actor 2)! \nSet Granny's mood to happy when she gets hit with the hearts.",
        "iceage_warn_ice_age_markdown_instruction": "Everyone needs to move faster because an ice storm is coming! \nChange the scene to an icy background and set Sid’s (actor 1) speed to fast.\nPress \"Run\" and move Sid to Diego to warn him.",
        "iceage_warn_ice_age_2018_markdown_instruction": "Everyone needs to move faster because an ice storm is coming! \nChange the scene to an icy background and set Sid’s (actor 1) speed to fast.\nPress \"Run\" and move Sid to Diego to warn him.",
        "instructional-strategy-tuesday_markdown_instruction": "# Day 2: Instructional Strategies\n\nName two Instructional Strategies (from the Curriculum Guide) you saw modeled in the 5 Model Lesson or TLOs you’ve seen in the past couple of days?\n\n* When were they successful?\n* What were characteristics of situations where there was room for improvement?\n",
        "jessie-test_markdown_instruction": "# Cool\n\n## Markdown\n\n### Instructions\n\n#### here\n\n##### now\n\n###### forever",
        "kikiTesta_markdown_instruction": "Our adventurer wants to collect coins.  But she can only use 4 blocks to get them.  \n\nCan you help her grab as many as she can using just 4 blocks?",
        "lesson-exploration-tuesday_markdown_instruction": "# Day 2: Lesson Exploration\n\nYou have seen 2 Model Lessons (taught by facilitators) and today you will see 1 more Model Lesson and  2 Participant TLOs (taught by teachers). What patterns do you notice about what facilitators do during these sessions (consider the lessons themselves and the debriefs)?\n\n* What are facilitators doing during lesson?\n* What are facilitators doing during debrief?\n* What are teachers doing throughout the session?\n* What is the key takeaway from the session?\n",
        "level 'grade3_Loops_10_markdown_instruction": "Such a busy bee!\n\nHelp Bee collect all of the nectar and make all of the honey with the fewest blocks possible.",
        "level 'grade3_Loops_11_markdown_instruction": "The shape of this path is different from the others. \n\nCan you collect all of the nectar using as few blocks as possible?",
        "level 'grade3_Loops_3_markdown_instruction": "Use a `repeat` loop to collect all of the nectar.",
        "level 'grade3_Loops_4_markdown_instruction": "Now use the `repeat` block to collect all of the nectar and make all of the honey.",
        "level 'grade3_Loops_5_markdown_instruction": "What a beautiful field of flowers!   \n\nHelp the bee visit each one.\n\nCan you find a way to do it with fewer than 7 blocks?",
        "level 'grade3_Loops_6_markdown_instruction": "How many times can loops help you in this puzzle?  \n\nLoops are your friend! Use a few of them to complete this puzzle with the fewest blocks possible.",
        "level 'grade3_Loops_7_markdown_instruction": "Those flowers look tasty!\n\nCollect nectar from each of the flowers using the fewest blocks possible.",
        "loop pet test 2_markdown_instruction": "**CHALLENGE!** When Daisy gets a carrot, she gets excited. Can you make Daisy start doing a dance party? She should never stop, even after you take the carrot away.\n\nYou will have to use all these blocks:\n![](https://images.code.org/83c295bd00536dffed3c93a40bba75ae-image-1523562330282.41.06 PM.png)",
        "loop pet test 3_markdown_instruction": "**Make Predictions!** Write down your answers to these questions before clicking \"Run\". Then try the code and see what happens!\n\n* What will Daisy the dog do after you drag the carrot to her?\n* What will Daisy the dog do after you press the Up arrow key?\n",
        "loop pet test 4_markdown_instruction": "**It's time to make your own virtual pet!** You can change whatever code you want to to make your own pet. Here are some ideas:\n\n* Can you make your pet start something new when you click on it?\n* Can you make your pet run away when you drag the vacuum to it?\n* Can you add other animal friends to your pet's area?",
        "love_spring_1_markdown_instruction": "Let's celebrate Spring!  \n\nWe have put some seeds in the ground to prepare for the season's flowers.  Can you cover them up so that the birds don't eat them?",
        "love_spring_2_markdown_instruction": "Our flowers are in full bloom!  \n\nNow we need the bee to grab nectar from each one so he can make plenty of honey back at his hive!",
        "maker workshop final_markdown_instruction": "# Challenge: Explore!\n\nNow that you've tested the waters a bit, go explore the full extent of this tool. On this level you'll see lots of new blocks and even some completely new areas of functionality (like a database backend!). Feel free to go back to previous levels for inspiration, or go off and building something completely your own.",
        "mike3bit_markdown_instruction": "# 3-Bit Color\n**Directions:**\n\n* We start you with the 4x2 image Maddie was creating, but we've left out the last few pixels. \n* Finish off the image by figuring out which colors are missing and encoding them.\n",
        "mike3bitbird_markdown_instruction": "# 3-Bit Color\nHere's an example of an image made with 3-bit color. Try changing it to understand how it works. \n\n*If you want to reset the image, press \"Start Over\".*\n",
        "mike3bitfreeplay_markdown_instruction": "# 3-Bit Color\n\nYou have one last chance to experiment and get creative with the pixelation widget. Make something awesome and share it with your classmates!\n\n* *Hint:* You can copy and paste the value of a pixel to use it repeatedly.",
        "mike3bitmario_markdown_instruction": "# 3-Bit Color\n \n**Challenge:** \n\nA careless binary coder typed in ONE extra 0 or 1 somewhere within this image's data. The extra bit that is causing Mario to glitch out! \n\nDelete the extra bit to restore Mario back to normal!\n\n![](https://images.code.org/8b7c17ba204a1a4d33e1bd6de7f01d76-image-1477306657312.54.57 AM.png)",
        "morning-prep-monday_markdown_instruction": "# Day 1: Morning Prep\n\nWhat did you notice about how the lead facilitators prepared this morning? What were the top priorities on their mind for the day?",
        "morning-prep-thursday_markdown_instruction": "# Day 4: Morning Prep\n\nWhat did you notice about how the lead facilitators prepared this morning? What were the top priorities on their mind for the day?",
        "morning-prep-tuesday_markdown_instruction": "# Day 2: Morning Prep\n\nWhat did you notice about how the lead facilitators prepared this morning? What were the top priorities on their mind for the day?",
        "morning-prep-wednesday_markdown_instruction": "# Day 3: Morning Prep\n\nWhat did you notice about how the lead facilitators prepared this morning? What were the top priorities on their mind for the day?",
        "name 'CSD U3 Keypress Boolean Predict'_markdown_instruction": "# Make a Prediction: keyDown()\nThe `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can figure out how the `keyDown()` block works.\n\nWhat do you think will happen when you run the program and press the \"up\" arrow? Write your prediction below and then run the program to see if your prediction was accurate.",
        "novice-monday-1_markdown_instruction": "# Day 1 Question 1\n\nThink back on your experience today.\n\n* Use a few words or sentences to describe how you felt as a participant during those sessions today (e.g., confused, engaged, anxious, etc.)\n* What factors contributed to you feeling that way? \n* Did you feel supported as a participant today? Why?\n* What does your experience today make you think about your role as a facilitator?\n",
        "novice-monday-2_markdown_instruction": "# Day 1 Question 2\n\nWhat additional questions came up for you today? Record them here so we can discuss your questions during your FiT training.\n",
        "novice-thursday-2_markdown_instruction": "# Day 4 Question 2\n\nWhat additional questions came up for you today? Record them here so we can discuss your questions during your FiT training.\n",
        "novice-tuesday-2_markdown_instruction": "# Day 2 Question 2\n\nWhat additional questions came up for you today? Record them here so we can discuss your questions during your FiT training.\n",
        "novice-wednesday-2_markdown_instruction": "# Day 3 Question 2\n\nWhat additional questions came up for you today? Record them here so we can discuss your questions during your FiT training.\n",
        "playEventsK1_markdown_instruction": "This game is called \"Play Lab\".\n\nSee if you can figure out what each block does.",
        "playEventsK2_markdown_instruction": "Jorge wants to say \"Hi there.\"\n\nCan you help?\n\n![](https://images.code.org/f32d285fa6f45e1f8d042c04c55f32c8-image-1467988839292.gif)",
        "playEventsK3_markdown_instruction": "Jorge wants to be scratched behind the ears!\n\nCan you make it so that when you click Jorge he is happy?\n\n![](https://images.code.org/04fb37990455b215e0f20884363092d0-image-1467988943134.gif)",
        "playEventsK4_markdown_instruction": "Can you make it so that Jorge the dog chases Robin the bird when you click the up arrow?\n\n![](https://images.code.org/2fbf6c793bb77a961fa7a52f27e4c59d-image-1467989013878.gif)",
        "playEventsK5_markdown_instruction": "Now add code so that Robin flies away when you click the forward arrow.\n\n![](https://images.code.org/a7e224c5f13e39e5342011f8a76d3b6b-image-1467989101328.gif)",
        "playEventsK6_markdown_instruction": "Have Robin talk back to Jorge when you click on her.\n\n![](https://images.code.org/fc80b1febbb7a472026b6bf2c535b2f4-image-1467989171517.gif)",
        "playEventsK7_markdown_instruction": "What else can you do in this fun scene?\n<br/>\n\n<h5>\n<details>\n<summary><b>Need some ideas?</b></summary>\n\t<br/>\n\t<h5>\n\t\t<ul>\n        \t<li><strong>Conversation</strong> - Have the sprites talk to eachother when you click on them.</li>\n            <li><strong>Pinball</strong> - Make one sprite play a noise when the other runs into it.</li>\n            <li><strong>Arrows</strong> - Write a program so when each arrow key is pressed, the sprite moves in that direction!</li>\n        </ul>\n\t</h5>\n</details>\n</h5>",
        "post-assessment survey q32_markdown_instruction": "(Optional): Please explain why you would/would not recommend this computer science course to another student.",
        "post-assessment survey q37_markdown_instruction": "(Optional) If you did not take the AP exam, what, if anything, would have made the difference for you to take it?",
        "pre-assessment survey q24A_markdown_instruction": "What computer science skills do you use in your everyday life? ",
        "pre-assessment survey q25A_markdown_instruction": "If yes, what computer science course(s) had you taken before your current computer science  class? ",
        "ramp_artist_loops1_markdown_instruction": "What a lovely day!  \n\nHelp the Artist cover his flowers before the winter by moving forward by 60 pixels.",
        "ramp_artist_loops1_2018_markdown_instruction": "What a lovely day!  \n\nHelp the Artist cover his flowers before the winter by moving forward by 60 pixels.",
        "ramp_artist_loops2_markdown_instruction": "Add some beauty by repeating that step five times, changing to a random color between each move.",
        "ramp_artist_loops2_2018_markdown_instruction": "Add some beauty by repeating that step five times, changing to a random color between each move.",
        "ramp_artist_loops3_markdown_instruction": "Draw the colorful line 5 times again, this time using a `repeat` loop.",
        "ramp_artist_loops3_2018_markdown_instruction": "Draw the colorful line 5 times again, this time using a `repeat` loop.",
        "ramp_artist_loops4_markdown_instruction": "What happens when you add a 72 degree right turn after everything else inside your loop?",
        "ramp_artist_loops4_2018_markdown_instruction": "What happens when you add a 72 degree right turn after everything else inside your loop?",
        "ramp_artist_loops5_markdown_instruction": "Loops sure make writing code easier!\n\nUse loops to draw this staircase.\n- Each stairstep is 50 pixels long and 50 pixels tall\n- You will need to turn 90 degrees in each direction",
        "ramp_artist_loops5_2018_markdown_instruction": "Loops sure make writing code easier!\n\nUse loops to draw this staircase.\n- Each stairstep is 50 pixels long and 50 pixels tall\n- You will need to turn 90 degrees in each direction",
        "ramp_artist_loops6_markdown_instruction": "This staircase is much bigger, but it takes the same amount of code as the last puzzle!\n\nFix this loop to complete the puzzle.",
        "ramp_artist_loops6_2018_markdown_instruction": "This staircase is much bigger, but it takes the same amount of code as the last puzzle!\n\nFix this loop to complete the puzzle.",
        "ramp_artist_loops7_markdown_instruction": "Look for a pattern and make this code shorter using loops!",
        "ramp_artist_loops7_2018_markdown_instruction": "Look for a pattern and make this code shorter using loops!",
        "ramp_artist_loops8_markdown_instruction": "**Challenge:** Look for a pattern and make this code shorter using loops.",
        "ramp_artist_loops8_2018_markdown_instruction": "**Challenge:** Look for a pattern and make this code shorter using loops.",
        "ramp_artist_loops8_clone_markdown_instruction": "**Challenge:** Look for a pattern and make this code shorter using loops.",
        "ramp_artist_loops9_markdown_instruction": "Solve this puzzle by drawing a square with 200 pixel sides.",
        "ramp_artist_loops9_2018_markdown_instruction": "Solve this puzzle by drawing a square with 200 pixel sides.",
        "recruiting-thursday_markdown_instruction": "# Day 4: Recruiting\n\nIn the Recruiting Students session this morning you talked about recruiting students and meeting students needs in the region where you work. (If you were not with your region think about what you experienced in this sessions that might apply to your region.)\n\n* What were common recruiting pain points teachers in your region shared?\n* What were common student support needs teachers in your region shared?\n* What things did you see today that you want to check in on throughout the year?\n",
        "sample1_markdown_instruction": "Our adventurer wants to collect coins.  But she can only use 4 blocks to get them.  \n\nCan you help her grab as many as she can using just 4 blocks?",
        "sample4_markdown_instruction": "Our adventurer has found a stash of coins in this cave.\n\nCan you help her grab as many as she can using just 7 blocks?",
        "sample6_markdown_instruction": "**Challenge:** Help bee get all of the nectar.\n\nThis puzzle is meant to be hard.  You may need to try lots of times.",
        "sample8_markdown_instruction": "Look at this trove of coins! \n\nHow many can you get the adventurer to grab?",
        "subgoal-test-clone_markdown_instruction": "### use goal labels to structure your solution.\n\nThe turtle should draw a square moving clockwise.\n\nDrag out \"move turtle\" subgoal label into the workspace.",
        "subgoal-test_markdown_instruction": "### use goal labels to structure your solution.\n\nThe turtle should draw a square moving clockwise.\n\nDrag out [\"move turtle\" subgoal label](#triggercallout=trigger_move_subgoal) into the workspace.",
        "subgoals_U3_turtle_prediction_FR_markdown_instruction": "## Code Trace\n\nIn 1-2 sentences, explain what you think the following code does.\n\n![](https://images.code.org/5bc66acc4712cf1c835daac0c45422a8-image-1506532056958.png)",
        "subgoals_U3_turtle_prediction_FR_2018_markdown_instruction": "## Code Trace\n\nIn 1-2 sentences, explain what you think the following code does.\n\n![](https://images.code.org/5bc66acc4712cf1c835daac0c45422a8-image-1506532056958.png)",
        "subgoals_u3_top_down_FR_markdown_instruction": "# Design a program\n\nDescribe, using a top-down approach, how you would create a program to draw a white snowflake on a blue background that uses random numbers, so the snowflake will be unique every time you run the code. \n\nYou don’t need to write the exact code or blocks that you would use, but you should describe what functions you would need to create, where you would or would not use loops, and where you would or would not use random numbers.",
        "subgoals_u3_top_down_FR_2018_markdown_instruction": "# Design a program\n\nDescribe, using a top-down approach, how you would create a program to draw a white snowflake on a blue background that uses random numbers, so the snowflake will be unique every time you run the code. \n\nYou don’t need to write the exact code or blocks that you would use, but you should describe what functions you would need to create, where you would or would not use loops, and where you would or would not use random numbers.",
        "test externallink_markdown_instruction": "# Creative Commons\n\nHead to the Creative Commons website to learn more about CC licensing models.",
        "test peer review_markdown_instruction": "At this point you've seen 7 of the 14 lessons from unit 1. Thinking about those lessons, and looking across the other lessons in <a href=\"curriculum.code.org/csp/unit1/\" target=_blank>unit 1</a> work with your partner to develop a set of recommendations for using group work and peer learning in Unit 1. Your recommendations should include:\n\n- Which lessons or activities provide opportunities for group work and peer learning? \n- What recommendations do you have for using group work and peer learning in Unit 1 lessons?  \n\nUse the space below to record any recommendations or commentary you have for others. Once you  submit, another participant will review chance to send you feedback! \n\n",
        "test_anonymous_student_survey_next_class_markdown_instruction": "What you will do next after this class?",
        "test_anonymous_student_survey_why_class_markdown_instruction": "Why are you doing this class?  Give at least two reasons.",
        "test_sarah_markdown_instruction": "hi",
        "test_sarah_freeresponse_markdown_instruction": "This is the question at hand....",
        "testing code callout_markdown_instruction": "# Click the link!\n[Show me where the sprite moves](#triggercallout=code_triggered)\n",
        "the Journal of Peer Learning_markdown_instruction": "The following link is to a journal out of Australia that focuses on publishing scholarly research that investigates innovations in peer learning and the implementation and evaluations of peer learning programs:",
        "u3-old-drawing-view_markdown_instruction": "# Your Own Drawing\n\nIt is your turn to create your own drawing. You should have drawn out your plan on paper first.\n\n# Do This\nAs a reminder make sure you hit the objectives:\n\n* Creates an identifiable and named object or design (i.e. no random splatters of shapes)\n* Uses at least 10 shapes or text items (rect, ellipse, regularPolygon, text)\n* Uses at least 4 different color fills\n* Uses at least 2 different color outlines\n* Contains at least 3 different logical blocks of code with comments\n",
        "valentine_artist_03_markdown_instruction": "Now make a valentine to share with someone special!  It can be anything that you want."
      }
    }
  }
}