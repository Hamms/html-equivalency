{
  "en": {
    "data": {
      "authored_hints": {
        "courseA_artist_loops7_authored_hint": {
          "courseA_artist_loops7_c": "Remember you can put more than one block in a <xml><block type=\"controls_repeat\">\n<title name=\"TIMES\">???</title>\n</block></xml> loop."
        },
        "courseA_artist_loops7_forVideo_authored_hint": {
          "courseA_artist_loops7_c": "Remember you can put more than one block in a <xml><block type=\"controls_repeat\">\n<title name=\"TIMES\">???</title>\n</block></xml> loop."
        },
        "courseA_artist_loops9_authored_hint": {
          "courseA_artist_loops9_b": "The block you add should go inside of the \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">5</title></block>\n</xml> loop."
        },
        "courseA_artist_loops9_2018_authored_hint": {
          "courseA_artist_loops9_b": "The block you add should go inside of the \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">5</title></block>\n</xml> loop."
        },
        "courseA_collector_loops3_authored_hint": {
          "courseA_collector_loops3_a": "Try using a \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loop!"
        },
        "courseA_collector_loops3_2018_authored_hint": {
          "courseA_collector_loops3_a": "Try using a \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loop!"
        },
        "courseA_harvester_loops2_authored_hint": {
          "courseA_harvester_loops2_a": "Your code will have **four** `move west`\n\n<xml><block type=\"maze_moveWest\"/></xml>\n\nblocks and **four** <xml>\n`pick corn`\n  <block type=\"harvester_corn\"/>\n</xml> blocks. "
        },
        "courseA_maze_seq13_authored_hint": {
          "courseA_maze_seq13_c": "These <xml><block type=\"maze_moveNorth\"/></xml>\n\n<xml><block type=\"maze_moveEast\"/></xml> blocks will help you move closer to the pig."
        },
        "courseA_maze_seq13_2018_authored_hint": {
          "courseA_maze_seq13_c": "These <xml><block type=\"maze_moveNorth\"/></xml>\n\n<xml><block type=\"maze_moveEast\"/></xml> blocks will help you move closer to the pig."
        },
        "courseB_iceage_loops3_authored_hint": {
          "courseB_iceage_loops3_a": "Use this new block!\n <xml><block type=\"controls_repeat_simplified_dropdown\">\n    <title name=\"TIMES\" config=\"3-10\">5</title>\n    </block></xml>"
        },
        "courseD_bounce_events10s_authored_hint": {
          "courseD_bounce_events10s_a": "You should have both of these events in your code:\n\n<xml><block type=\"bounce_whenBallInGoal\" deletable=\"false\"><next><block type=\"bounce_playSound\"><title name=\"SOUND\">swish</title><next><block type=\"bounce_incrementPlayerScore\"></block></next></block></next></block><block type=\"bounce_whenBallMissesPaddle\" deletable=\"false\"><next><block type=\"bounce_playSound\"><title name=\"SOUND\">whistle</title><next><block type=\"bounce_incrementOpponentScore\"></block></next></block></next></block</xml>"
        },
        "courseD_bounce_events10s_2018_authored_hint": {
          "courseD_bounce_events10s_a": "You should have both of these events in your code:\n\n<xml><block type=\"bounce_whenBallInGoal\" deletable=\"false\"><next><block type=\"bounce_playSound\"><title name=\"SOUND\">swish</title><next><block type=\"bounce_incrementPlayerScore\"></block></next></block></next></block><block type=\"bounce_whenBallMissesPaddle\" deletable=\"false\"><next><block type=\"bounce_playSound\"><title name=\"SOUND\">whistle</title><next><block type=\"bounce_incrementOpponentScore\"></block></next></block></next></block</xml>"
        },
        "courseD_iceage_loops3_authored_hint": {
          "courseB_iceage_loops3_a": "Use this new block!\n <xml><block type=\"controls_repeat_dropdown\">\n    <title name=\"TIMES\" config=\"2-10\">5</title>\n  </block></xml>"
        },
        "courseD_playLab_cond3a_authored_hint": {
          "courseD_playLab_cond3_c": "- `If` the dragon is happy \n   - `score point`\n   - `score point`  \n   \n   \n \n- `Else` `score point`"
        },
        "courseD_playLab_cond3a_2018_authored_hint": {
          "courseD_playLab_cond3_c": "- `If` the dragon is happy \n   - `score point`\n   - `score point`  \n   \n   \n \n- `Else` `score point`"
        }
      },
      "instructions": {
        "CSD U6 params modify clouds_instruction": "# Clouds\n\nThis program makes the clouds move when you blow on the sound sensor, but it's not finished.\n\n# Do This\n* Create a new function `moveCloud(name)` that will move any cloud.\n  * (Hint: you will use almost all the same code as the `moveCloud0` function)\n* Call your new `moveCloud(name)` function inside the event block, once for each cloud name.\n  * (Hint: this is similar to how the `loopCloud(name)` function is called many times.",
        "CSD U6 params modify clouds_2018_instruction": "# Clouds\n\nThis program makes the clouds move when you blow on the sound sensor, but it's not finished.\n\n# Do This\n* Create a new function `moveCloud(name)` that will move any cloud.\n  * (Hint: you will use almost all the same code as the `moveCloud0` function)\n* Call your new `moveCloud(name)` function inside the event block, once for each cloud name.\n  * (Hint: this is similar to how the `loopCloud(name)` function is called many times.",
        "Course 4 Play Lab Params 10_instruction": "We've added one last function for you. \n\nUse an \"if\" statement to program your game to call the \"level_up\" function only when \"player_score\" becomes greater than a certain number.\n\nFor example: \"player_score\" > 6\n\nPlay the game, and make it to level 3 to move to the next puzzle. ",
        "Food Fight!_instruction": "We've added one last function for you. \n\nUse an \"if\" statement to program your game to call the \"level_up\" function only when \"player_score\" becomes greater than a certain number.\n\nFor example: \"player_score\" > 6\n\nPlay the game, and make it to level 3 to move to the next puzzle. ",
        "Play Lab Rocket 2B_instruction": "A rocket blasts off, traveling at 15 meters per second. Using the Design Recipe, write a function called rocket-height that takes in a number of Â seconds that have passed since the rocket took off, and produces the height of the rocket at that time.",
        "Ryan's clone of C4S15P10_instruction": "We've added one last function for you. \n\nUse an \"if\" statement to program your game to call the \"level_up\" function only when \"player_score\" becomes greater than a certain number.\n\nFor example: \"player_score\" > 6\n\nPlay the game, and make it past level 4 to move to the next puzzle. ",
        "U3L23 Digital Assistant 1_instruction": "Set the text_area element to display the user's input from the text_input element.",
        "grade5_playlab_variables81_instruction": "We've added one last function for you. \n\nUse an \"if\" statement to program your game to call the \"level_up\" function only when \"player_score\" becomes greater than a certain number.\n\nFor example: \"player_score\" > 6\n\nPlay the game, and make it to level 3 to move to the next puzzle. "
      },
      "markdown_instructions": {
        "AllTheThings Applab DesignModeDefault_markdown_instruction": "<img src=\"https://images.code.org/117a2a8e098760173f16048fde721295-image-1479829058899.gif\" style=\"float: right; width: 150px\">\n## You try it -- Text Password Checker\n\n**Key idea**: You can use `==` to compare strings as well as numbers.  \n\n* Let's use an if-statement in an event handler to compare text that a user inputs in a UI element.\n\n**The setup:**\n* Note the setup in Design Mode\n* There are two images: a red lock, and a green \"unlock\".\n* The green \"unlock\" is *hidden* at the start.\n\n## Do this:\n\n**Add an if-statement to the event handler to check the password and display the \"unlock\" only if the password is correct** \n\n* You can use `==` to compare the text you get from the *password_input* text box and a string you want to use as the password. The boolean expression you should use should look like this:\n\n![](https://images.code.org/9124274f38ed19bdae6cfc4b492162b6-image-1479828796051.png)\n\n* If the user entered the correct password then **show** the green \"unlock\" and **hide** the red lock.\n\t* We've provide the code to hide and show the images. You just need to add the if-statement.\n* Otherwise do nothing.  They can try again.\n\n",
        "AllTheThings: Pixelation - Lesson 14 - Make the Letter A_markdown_instruction": "<img align=\"right\" src=\"https://code.org/images/cspunit1/letterA.png\" width=\"150\" hspace=\"20\">\n            # Task 1: Make a 3x5 letter 'A'\n            Start by trying to recreate the 3x5 letter \"A\" depicted (at right) using the pixelation widget. \n          \n            The image is intially setup with the *incorrect* dimensions. Your first task is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then you can start entering pixel data to make the A.\n            ",
        "AllTheThings: Pixelation - Lesson 15 - Color Shades 4x4_markdown_instruction": "# Pixelation: Task 3\n<img src = \"https://code.org/images/cspunit1/ColorTask3.png\" align=right width=200 hspace=20>\n**Directions:**\nWe start you out with the 4x4 image Maddie created in the video.\n\nYour task is to fill a 4x4 grid with colors using *12-bits per pixel*. The result should look something like (but not exactly) the image shown at right.  \n\nHere are the requirements:\n\n  * Row 1 - fill with shades of red. \n  * Row 2 - shades of green. \n  * Row 3 - shades of blue. \n  * Row 4 - shades of gray.\n",
        "AppLab Intro 7 - thisOrThatPersonalize_markdown_instruction": "<a href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\" target=\"_blank\"><img src=\"https://images.code.org/ba6c0db48cc1c3c28c135f1c2f67f361-image-1511244802597.10.18 PM.png\" style=\"float:right;height:200px\"></a>\n<a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\" target=\"_blank\"><img src=\"https://images.code.org/284b55697d786e0cd64350d0967c5dda-image-1511244806272.11.05 PM.png\" style=\"float:right;height:200px\"></a>\n<a href=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\" target=\"_blank\"><img src=\"https://images.code.org/445181ff8d84861919512ba9b8e09586-image-1511244809994.12.40 PM.png\" style=\"float:right;height:200px\"></a>\n\n**Goal:** Build your own app by extending this project. Then \"Share\" it with someone!\n\n**How:** Decide what type of app you're interested in building. Then go build it by adding more screens, buttons, text, sound, and user interactions to your app. There's a few more blocks in the toolbox that you can experiment with as well. Once you're done click \"Share\" to send it to yourself or a friend! \n\n<details><summary><b>Choose Your Own Adventure Ideas</b></summary>\n\nTry out this <a href=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\" target=\"_blank\">Example Choose Your Own Adventure App</a> so you can see how one works. Here's some ideas to help you come up with your own story.\n\n<li>Make an adventure about your favorite character, real or fictional.</li>\n<li>Make an adventure that tells the story of your favorite book, movie, or your own creation.</li>\n<li>Make an adventure that has a lot of unexpected twists or has a difficult moral choice.</li>\n<br>\n</details>\n\n<details><summary><b>Greeting Card Ideas</b></summary>\n\nTry out this <a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\" target=\"_blank\">Example Greeting Card App</a> so you can see how one works. Here's some ideas to help you come up with your own card.\n\n<li>Think of a birthday, holiday, or other special day that's coming up. Make a card to celebrate!</li>\n<li>Create a thank you card for someone you appreciate.</li>\n<li>Create an invitation for an upcoming event.</li>\n<br>\n</details>\n\n<details><summary><b>Personality Quiz Ideas</b></summary>\n\nTry out this <a href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\" target=\"_blank\">Example Personality Quiz App</a> so you can see how one works. Here's some ideas to help you come up with your own quiz.\n\n<li>Make a quiz that suggests something a person might like, for example a meal, a team, a book, or a place.</li>\n<li>Make an quiz that \"predicts the future\" based on their answers.</li>\n<li>Make a quiz to help people make a hard decision.</li>\n\n</details>",
        "Applab AllTheThings ResourcesTab AllResources_markdown_instruction": "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\" align=right>\n\nGiven only 4 turtle commands, write code in App Lab to complete the drawings in each of the challenges below.  Your goal is to write code that solves the problem as efficiently as possible using only the commands provided.\n\nWhat does âefficientâ mean?  In computer science it can actually mean several different things depending on what youâre talking about.  Work on these challenges, try to solve them in a way that you think is best and weâll ask about efficiency at the end.\n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" align=right>\n# Do This: \nDraw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the Finish button - it will appear once you run the program.",
        "Applab AllTheThings ResourcesTab MapReference_markdown_instruction": "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\" align=right>\n\nGiven only 4 turtle commands, write code in App Lab to complete the drawings in each of the challenges below.  Your goal is to write code that solves the problem as efficiently as possible using only the commands provided.\n\nWhat does âefficientâ mean?  In computer science it can actually mean several different things depending on what youâre talking about.  Work on these challenges, try to solve them in a way that you think is best and weâll ask about efficiency at the end.\n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" align=right>\n# Do This: \nDraw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the Finish button - it will appear once you run the program.",
        "Applab AllTheThings ResourcesTab ReferenceLinks_markdown_instruction": "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\" align=right>\n\nGiven only 4 turtle commands, write code in App Lab to complete the drawings in each of the challenges below.  Your goal is to write code that solves the problem as efficiently as possible using only the commands provided.\n\nWhat does âefficientâ mean?  In computer science it can actually mean several different things depending on what youâre talking about.  Work on these challenges, try to solve them in a way that you think is best and weâll ask about efficiency at the end.\n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" align=right>\n# Do This: \nDraw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the Finish button - it will appear once you run the program.",
        "CSD U1 - PixFilter UnFilter_markdown_instruction": "# UnFiltering\n\nBit filters can be used to _undo_ filtering as well. Here's an image of a bird that's been filtered from it's original colors. Can you get it back to normal?\n\n# Do This\n\n<img src=\"https://images.code.org/c15636bda16e8792c59ac955332e37a5-image-1471372091393.22.56.png\" style=\"float:right; width: 200px\"/>\nHere's what our bird should look like. Use the filter to get him back to normal.\n\n* Decide which colors (and so which bits) you need to change. You might need to write your thoughts with pencil and paper.\n* Once you know which bits need changing, set the filter dropdown appropriately to test your answer\n* After you've fixed the image, write down both your process and your final filter in the Level 6 section of your Activity Guide\n\n_How many tries did it take you to find the right filter?_\n",
        "CSD U2  layout style body_markdown_instruction": "<div style=\"float: right; height: 150px; width: 400px; overflow-y: scroll; margin-left: 20px;\">\n<details>\n<summary>**What is a CSS rule-set?**</summary>\nBlah blah answer\n</details>\n<details>\n<summary>**What is a selector?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**What is a declaration block?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**what is a property-value pair?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**How do I create a new rule-set?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n</div>\n# The Body Element\n\n* Find the `body` rule-set in \"style.css\"\n* Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.\n* Try out some different properties to check your guesses.",
        "CSD U2  layout style textalign_markdown_instruction": "<div style=\"float: right; height: 150px; width: 400px; overflow-y: scroll; margin-left: 20px;\">\n<details>\n<summary>**What is a CSS rule-set?**</summary>\nBlah blah answer\n</details>\n<details>\n<summary>**What is a selector?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**What is a declaration block?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**what is a property-value pair?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**How do I create a new rule-set?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n</div>\n# Text Align\n\n* Find the `text-align` property in \"style.css\" in the `p` rule-set.\n* Change the text-align value to `center` or `right`.\n* Add a `text-align` rule in the `body` rule set",
        "CSD U2 CSS explore CSS_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How do I switch between files?**</summary>\nClick the name of the file you want to look at in the menu on the left side of the screen.\n</details>\n</div>\n\n# Adding Style\n\nThis Web Lab project is using a new language to add style to the page. With a partner explore both the `index.html` and `style.css` files. Be ready to discuss the following questions.\n\n* What changes is this new language making to the page?\n* How is this language different from HTML?\n* How are the `index.html` and `style.css` files connected?",
        "CSD U2 CSS explore CSS_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How do I switch between files?**</summary>\nClick the name of the file you want to look at in the menu on the left side of the screen.\n</details>\n</div>\n\n# Adding Style\n\nThis Web Lab project is using a new language to add style to the page. With a partner explore both the `index.html` and `style.css` files. Be ready to discuss the following questions.\n\n* What changes is this new language making to the page?\n* How is this language different from HTML?\n* How are the `index.html` and `style.css` files connected?",
        "CSD U2 Debugging 1_markdown_instruction": "# Debugging\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a bug?**</summary>\nBugs are mistakes in code which causes it not to work as planned.\n</details>\n<details>\n<summary>**What is debugging?**</summary>\nDebugging is the process of finding and fixing bugs.  Debugging is a problem solving process so use your problem solving steps as you try to debug. \n</details>\n<details>\n<summary>**What are some examples of bugs?**</summary>\nBugs can be anything that causes code not to work as planned.  Some examples are misspelling, putting code in the wrong place, using the wrong tag, or forgetting to close a tag.\n</details>\n</div>\n\nComputer code is written by humans, and all humans make mistakes. Part of being a good computer scientist is finding your mistakes and fixing them. In computer science we call mistakes **bugs**. The process of finding and fixing those bugs is called **debugging**.  Over the next couple levels you are going to work on your debugging skills.\n\n# Do This\n\n<img src=\"https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56 AM.png\" style=\"float:right;border:black solid 5px;\">\n\n* Look at the web page code, and discuss with your partner what is causing the following two bugs:\n\t* The heading is not big enough.\n\t* The second item on the list doesn't have a number.\n* Fix all the bugs in the code so that the final result matches the image on the right.\n",
        "CSD U2 Debugging 1_2018_markdown_instruction": "# Debugging\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a bug?**</summary>\nBugs are mistakes in code which causes it not to work as planned.\n</details>\n<details>\n<summary>**What is debugging?**</summary>\nDebugging is the process of finding and fixing bugs.  Debugging is a problem solving process so use your problem solving steps as you try to debug. \n</details>\n<details>\n<summary>**What are some examples of bugs?**</summary>\nBugs can be anything that causes code not to work as planned.  Some examples are misspelling, putting code in the wrong place, using the wrong tag, or forgetting to close a tag.\n</details>\n</div>\n\nComputer code is written by humans, and all humans make mistakes. Part of being a good computer scientist is finding your mistakes and fixing them. In computer science we call mistakes **bugs**. The process of finding and fixing those bugs is called **debugging**.  Over the next couple levels you are going to work on your debugging skills.\n\n# Do This\n\n<img src=\"https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56 AM.png\" style=\"float:right;border:black solid 5px;\">\n\n* Look at the web page code, and discuss with your partner what is causing the following two bugs:\n\t* The heading is not big enough.\n\t* The second item on the list doesn't have a number.\n* Fix all the bugs in the code so that the final result matches the image on the right.\n",
        "CSD U2 Debugging 2_markdown_instruction": "# Debugging\n\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a bug?**</summary>\nBugs are mistakes in code which causes it not to work as planned.\n</details>\n<details>\n<summary>**What is debugging?**</summary>\nDebugging is the process of finding and fixing bugs.  Debugging is a problem solving process so use your problem solving steps as you try to debug. \n</details>\n<details>\n<summary>**What are some examples of bugs?**</summary>\nBugs can be anything that causes code not to work as planned.  Some examples are misspelling, putting code in the wrong place, using the wrong tag, or forgetting to close a tag.\n</details>\n</div>\n\nMore debugging practice!  This page is a little more challenging to debug than the last one.\n\n# Do This\n\n<img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38 AM.png\" style=\"float:right;border:5px black solid;width:250px\">\n\n* Discuss with your partner what you think the bugs are in this page.\n* Find and fix all the bugs so that your page matches the one on the right.",
        "CSD U2 Debugging 2_2018_markdown_instruction": "# Debugging\n\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a bug?**</summary>\nBugs are mistakes in code which causes it not to work as planned.\n</details>\n<details>\n<summary>**What is debugging?**</summary>\nDebugging is the process of finding and fixing bugs.  Debugging is a problem solving process so use your problem solving steps as you try to debug. \n</details>\n<details>\n<summary>**What are some examples of bugs?**</summary>\nBugs can be anything that causes code not to work as planned.  Some examples are misspelling, putting code in the wrong place, using the wrong tag, or forgetting to close a tag.\n</details>\n</div>\n\nMore debugging practice!  This page is a little more challenging to debug than the last one.\n\n# Do This\n\n<img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38 AM.png\" style=\"float:right;border:5px black solid;width:250px\">\n\n* Discuss with your partner what you think the bugs are in this page.\n* Find and fix all the bugs so that your page matches the one on the right.",
        "CSD U2 Debugging 3_markdown_instruction": "# Debugging\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a bug?**</summary>\nBugs are mistakes in code which causes it not to work as planned.\n</details>\n<details>\n<summary>**What is debugging?**</summary>\nDebugging is the process of finding and fixing bugs.  Debugging is a problem solving process so use your problem solving steps as you try to debug. \n</details>\n<details>\n<summary>**What are some examples of bugs?**</summary>\nBugs can be anything that causes code not to work as planned.  Some examples are misspelling, putting code in the wrong place, using the wrong tag, or forgetting to close a tag.\n</details>\n<details>\n<summary>**Why does the inspector sometimes stop working?**</summary>\nSometimes there are so many bugs in the HTML that the inspector cannot read the code properly and it stops working completely, even on the parts of the code that are correct.  Once the bugs are corrected, the inspector will work again.\n</details>\n</div>\n\nThis page has images in it. Images make finding bugs a little more tricky. Can you debug this page?\n\n# Do This\n\n* Discuss with your partner what is causing the bugs in this page.\n* Fix the bugs so that your page matches the target page shown below.\n\n![](https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24 AM.png)",
        "CSD U2 Debugging 3_2018_markdown_instruction": "# Debugging\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a bug?**</summary>\nBugs are mistakes in code which causes it not to work as planned.\n</details>\n<details>\n<summary>**What is debugging?**</summary>\nDebugging is the process of finding and fixing bugs.  Debugging is a problem solving process so use your problem solving steps as you try to debug. \n</details>\n<details>\n<summary>**What are some examples of bugs?**</summary>\nBugs can be anything that causes code not to work as planned.  Some examples are misspelling, putting code in the wrong place, using the wrong tag, or forgetting to close a tag.\n</details>\n<details>\n<summary>**Why does the inspector sometimes stop working?**</summary>\nSometimes there are so many bugs in the HTML that the inspector cannot read the code properly and it stops working completely, even on the parts of the code that are correct.  Once the bugs are corrected, the inspector will work again.\n</details>\n</div>\n\nThis page has images in it. Images make finding bugs a little more tricky. Can you debug this page?\n\n# Do This\n\n* Discuss with your partner what is causing the bugs in this page.\n* Fix the bugs so that your page matches the target page shown below.\n\n![](https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24 AM.png)",
        "CSD U2 Debugging 4_markdown_instruction": "# Formatting\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is whitespace?**</summary>\nWhitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.\n</details>\n<details>\n<summary>**What is indentation?**</summary>\nIndentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:\n<pre>\n   &lt;body&gt;\n      &lt;p&gt;This paragraph is inside the \"body\" element.&lt;/p&gt;\n   &lt;/body&gt;\n</pre>\n\n</details>\n<details>\n<summary>**What is formatting?**</summary>\nFormatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:\n<pre>\n   &lt;body&gt;\n      &lt;p&gt;This paragraph is inside the \"body\" element.&lt;/p&gt;\n   &lt;/body&gt;\n</pre>\n</details>\n<details>\n<summary>**Why does the inspector sometimes stop working?**</summary>\nSometimes there are so many bugs in the HTML that the inspector cannot read the code properly and it stops working completely, even on the parts of the code that are correct.  Once the bugs are corrected, the inspector will work again.\n</details>\n</div>\n\nThe way that you write your code can make it easier or harder to find bugs.  If you use **whitespace** and **indentation**, it will make it easier to read and easier to fix.\n\n# Do This\n\n* Look at the code with your partner and discuss how you should format the code to make it easier to read.\n* Make the code easier to read by adding new lines and indentation.\n* Fix all the bugs so that your page matches the target page below.\n\n![](https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png)",
        "CSD U2 Debugging 4_2018_markdown_instruction": "# Formatting\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is whitespace?**</summary>\nWhitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.\n</details>\n<details>\n<summary>**What is indentation?**</summary>\nIndentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:\n<pre>\n   &lt;body&gt;\n      &lt;p&gt;This paragraph is inside the \"body\" element.&lt;/p&gt;\n   &lt;/body&gt;\n</pre>\n\n</details>\n<details>\n<summary>**What is formatting?**</summary>\nFormatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:\n<pre>\n   &lt;body&gt;\n      &lt;p&gt;This paragraph is inside the \"body\" element.&lt;/p&gt;\n   &lt;/body&gt;\n</pre>\n</details>\n<details>\n<summary>**Why does the inspector sometimes stop working?**</summary>\nSometimes there are so many bugs in the HTML that the inspector cannot read the code properly and it stops working completely, even on the parts of the code that are correct.  Once the bugs are corrected, the inspector will work again.\n</details>\n</div>\n\nThe way that you write your code can make it easier or harder to find bugs.  If you use **whitespace** and **indentation**, it will make it easier to read and easier to fix.\n\n# Do This\n\n* Look at the code with your partner and discuss how you should format the code to make it easier to read.\n* Make the code easier to read by adding new lines and indentation.\n* Fix all the bugs so that your page matches the target page below.\n\n![](https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png)",
        "CSD U2 HTML Adding Paragraphs pt 2_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a paragraph element?**</summary>\nParagraphs are marked by opening(`<p>`) and closing(`</p>`) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.\n</details>\n<details>\n<summary>**How do I make multiple paragraphs?**</summary>\nHere's an example of several paragraph tags in a row. This code would be placed inside of the body of your web page.\n\n<pre>\n`<p>This is a paragraph. It has two sentences.</p>`\n`<p>This is another paragraph.</p>`\n</pre>\n\n</details>\n\n</div>\n\n# Use Paragraph Tags\n\nThe `<p>` tag or \"paragraph\" tag is placed around text to indicate that it is part of a paragraph. Placing text in a paragraph tag lets the computer know that it should be displayed differently, usually just by spacing it out from other text.\n\n# Do This\n\n* Place the text you just wrote inside at least two separate paragraphs by surrounding it with `<p>` and `</p>` tags\n* Compare the results with a neighbor. What has changed about the way your text is displayed?",
        "CSD U2 HTML Adding Paragraphs pt 2_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a paragraph element?**</summary>\nParagraphs are marked by opening(`<p>`) and closing(`</p>`) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.\n</details>\n<details>\n<summary>**How do I make multiple paragraphs?**</summary>\nHere's an example of several paragraph tags in a row. This code would be placed inside of the body of your web page.\n\n<pre>\n`<p>This is a paragraph. It has two sentences.</p>`\n`<p>This is another paragraph.</p>`\n</pre>\n\n</details>\n\n</div>\n\n# Use Paragraph Tags\n\nThe `<p>` `</p>` tags or \"paragraph\" start and end tags are placed around text to indicate that it is part of a paragraph. Placing text between paragraph start and end tags lets the computer know that it should be displayed differently, usually just by spacing it out from other text.\n\n# Do This\n\n* Place the text you just wrote inside at least two separate paragraphs by surrounding it with `<p>` and `</p>` tags\n* Compare the results with a neighbor. What has changed about the way your text is displayed?",
        "CSD U2 HTML Debug Paragraphs_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary><strong>What is a paragraph element?</strong></summary>\nParagraphs are marked by opening( `<p>` ) and closing( `</p>` ) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.\n</details>\n<details>\n<summary><strong>Why does HTML seem to work even when it's broken?</strong></summary>\nHTML is read by your web browser to generate web pages. Since people often make little mistakes when writing their web pages, browsers are programmed to make a best guess of what you intended to do. Sometimes different browsers are even programmed to make different guesses! The only way to ensure your code looks like you intend is make sure you're always using tags correctly.\n</details>\n<details>\n<summary><strong>Why does the code sometimes turn pink?</strong></summary>\nWeb Lab is programmed to automatically detect some mistakes in HTML.  When it notices a mistake, it turns that code pink.  The mistake might be in pink, or it might be somewhere before the pink code.  You'll need to carefully debug to find your mistake.\n</details>\n</div>\n\n# Debug: Fix the Broken Tags\n\nThis simple web page has some issues which are preventing the content from being displayed correctly. Identify and fix the issues. This practice is also called \"debugging\" your code.\n\n# Do This\n\n* Fix the broken code so that the web page displays correctly\n* Compare the problems you fixed with a neighbor",
        "CSD U2 HTML Debug Paragraphs_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary><strong>What is a paragraph element?</strong></summary>\nParagraphs are marked by opening( `<p>` ) and closing( `</p>` ) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.\n</details>\n<details>\n<summary><strong>Why does HTML seem to work even when it's broken?</strong></summary>\nHTML is read by your web browser to generate web pages. Since people often make little mistakes when writing their web pages, browsers are programmed to make a best guess of what you intended to do. Sometimes different browsers are even programmed to make different guesses! The only way to ensure your code looks like you intend is make sure you're always using tags correctly.\n</details>\n<details>\n<summary><strong>Why does the code sometimes turn pink?</strong></summary>\nWeb Lab is programmed to automatically detect some mistakes in HTML.  When it notices a mistake, it turns that code pink.  The mistake might be in pink, or it might be somewhere before the pink code.  You'll need to carefully debug to find your mistake.\n</details>\n</div>\n\n# Debug: Fix the Broken Tags\n\nThis simple web page has some issues which are preventing the content from being displayed correctly. Identify and fix the issues. This practice is also called \"debugging\" your code.\n\n# Do This\n\n* Fix the broken code so that the web page displays correctly\n* Compare the problems you fixed with a neighbor",
        "CSD U2 Header Demo_markdown_instruction": "# Headers\n\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are headers?**</summary>\nHeaders are the different sized section titles throughout a web page. Headers add structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>**How do I make different sized headers?**</summary>\nHeaders come in 6 different sizes. So far you have primarily used the biggest one &lt;h1&gt;. The number 1 in the HTML tag designates that this is the biggest header. The smallest header is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags which get smaller as the number gets larger.\n</h1>\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nHTML stands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nAn HTML element is a piece of a website that is marked by a start tag and sometimes closed with an end tag. The element also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nAn HTML tag is the special set of characters that tells the machine where the start or end of an HTML element is and what type it is.\n</details>\n</div>\n\nSo far, you've organized your content into paragraphs.  Another way HTML allows you to organize your code is by using **headers**.  A header is a short piece of text that goes at the top of a section of content, like a title.\n\nDo This:\n* Find the headers in the web page below and use the inspector tool to see that code that makes them.\n* Make sure you and your partner agree on what the tags do.\n* Change the code so that \"Drawing\" and \"2 years\" match the headers on the rest of the page.",
        "CSD U2 Header Sizes_markdown_instruction": "# Header Sizes\n\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are headers?**</summary>\nHeaders are the different sized section titles throughout a web page. Headers add structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>**How do I make different sized headers?**</summary>\nHeaders come in 6 different sizes.  The most common header is &lt;h1&gt; The number 1 in the HTML tag designates that this is the biggest header. The smallest header is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags which get smaller as the number gets larger.\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nHTML stands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nAn HTML element is a piece of a website that is marked by a start tag and sometimes closed with an end tag. The element also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nAn HTML tag is the special set of characters that tells the machine where the start or end of an HTML element is and what type it is.\n</details>\n\n</div>\n\nHeaders can come in different sizes.  In this page, there are six different sized headers, but they are all mixed up.  Can you and your partner figure out how to fix them?\n\n\n\nDo This:\n* Use the inspector tool to figure out what makes the headers different sizes\n* Make sure you and your partner agree on what the different header tags do.\n* Change the tags so that the headers are in order from biggest to smallest, and the text says the correct size, as in the picture below. \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15 PM.png\" style=\"width:100px\" style=\"float:left\">\n",
        "CSD U2 Header Test_markdown_instruction": "# Headers and Paragraphs\n\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a paragraph element?**</summary>\nParagraphs are marked by opening(`<p>`) and closing(`</p>`) tags as well. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. All of your text in your web page should be contained in an HTML element (headers or paragraphs). Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.\n</details>\n<details>\n<summary>**How do I create multiple paragraphs?**</summary>\nParagraphs are marked by opening(`<p>`) and closing(`</p>`) tags as well. To create more than one paragraph you will want multiple sets of opening and closing `<p>` tags. For example\n<pre>\n\t&lt;p&gt;\n    \tThis is a paragraph.\n    &lt;/p&gt;\n\t&lt;p&gt;\n    \tThis is another paragraph.\n    &lt;/p&gt;\n</pre>\n</details>\n<details>\n<summary>**What are headers?**</summary>\nHeaders are the different sized section titles throughout a web page. Headers add structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>**How do I make different sized headers?**</summary>\nHeaders come in 6 different sizes. So far you have primarily used the biggest one &lt;h1&gt;. The number 1 in the HTML tag designates that this is the biggest header. The smallest header is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags which get smaller as the number gets larger.\n</h1>\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nHTML stands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nAn HTML element is a piece of a website that is marked by a start tag and sometimes closed with an end tag. The element also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nAn HTML tag is the special set of characters that tells the machine where the start or end of an HTML element is and what type it is.\n</details>\n\n</div>\n\nThe author of this page added in a lot of content, but did not think about structure.  All of the text is mashed together.\n\nDo This:\n* Look through the content with your partner and decide what you think the best structure should be.\n* Use your header and paragraph tags to code the structure into the page.\n",
        "CSD U2 Headers_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**What are headers?**</summary>\nHeaders are the different sized section titles throughout a web page. Headers add structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>**How do I create a header?**</summary>\nYou can make something a header element by surrounding it by header tags.  For example:\n<pre> &lt;h1&gt; Header Text &lt;/h1&gt; </pre> <br> <br>\n\nNotice how there is a the opening tag (&lt;h1&gt;) and closing tag (&lt;/h1&gt;). The closing tag is the same as the opening tag except it has `/` after the opening angle bracket. The text you want to show as the header goes in the middle of the two tags.\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nStands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nA piece of a website. Marked by a start tag and sometimes closed with an end tag. Also includes the content of the element as well. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nThe special set of characters that tells the machine where the start or end of an HTML element is and what type it is. HTML tags add structure to the content of a web page.\n</details>\n<details>\n<summary>**Why do you need an opening and closing tag?**</summary>\nYou need both an opening and closing tag for many HTML elements because it marks where that structure starts and stops. You don't want all the text on your web page to be a title.\n</details>\n</div>\n\n# Headers\n\nYou may have noticed on the last level that everything you type into the editor is getting smashed together. In order to differentiate between these different parts we use HTML elements to mark the different parts of a web page. In your investigation with the inspector did you come across something that made headers?\n\n# Do This\n\n* Make your header \"Animals\" stand out using the `<h1>` header element.",
        "CSD U2 Heading Demo_markdown_instruction": "# Headings\n\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are headings?**</summary>\nHeadings are the different sized section titles throughout a web page. Headings add structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>**How do I make different sized headings?**</summary>\nHeadings come in 6 different sizes. So far you have primarily used the biggest one: &lt;h1&gt;. The number '1' in the HTML tag designates that this is the biggest heading. The smallest heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags, which get smaller as the number gets larger.\n</h1>\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nHTML stands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nAn HTML element is a piece of a website that is marked by a start tag and sometimes closed with an end tag. The element also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nAn HTML tag is the special set of characters that tells the machine where the start or end of an HTML element is and what type it is.\n</details>\n</div>\n\nSo far, you've organized your content into paragraphs.  Another way HTML allows you to organize your code is by using **headings**.  A heading is a short piece of text that goes at the top of a section of content, like a title.\n\nDo This:\n* Find the headings in the web page below and use the Inspector Tool to see the code that makes them.\n* Make sure you and your partner agree on what the tags do.\n* Change the code so that \"Drawing\" and \"2 years\" match the headings on the rest of the page.",
        "CSD U2 Heading Demo_2018_markdown_instruction": "# Headings\n\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are headings?**</summary>\nHeadings are the different sized section titles throughout a web page. Headings add structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>**How do I make different sized headings?**</summary>\nHeadings come in 6 different sizes. So far you have primarily used the biggest one: &lt;h1&gt;. The number '1' in the HTML tag designates that this is the biggest heading. The smallest heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags, which get smaller as the number gets larger.\n</h1>\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nHTML stands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nAn HTML element is a piece of a website that is marked by a start tag and sometimes closed with an end tag. The element also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nAn HTML tag is the special set of characters that tells the machine where the start or end of an HTML element is and what type it is.\n</details>\n</div>\n\nSo far, you've organized your content into paragraphs.  Another way HTML allows you to organize your code is by using **headings**.  A heading is a short piece of text that goes at the top of a section of content, like a title.\n\nDo This:\n* Find the headings in the web page below and use the Inspector Tool to see the code that makes them.\n* Make sure you and your partner agree on what the tags do.\n* Change the code so that \"Drawing\" and \"2 years\" match the headings on the rest of the page.",
        "CSD U2 Heading Sizes_markdown_instruction": "# Heading Sizes\n\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are headings?**</summary>\nHeadings are the different sized section titles throughout a web page. Headings add structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>**How do I make different sized headings?**</summary>\nHeadings come in 6 different sizes.  The most common heading is &lt;h1&gt; The number 1 in the HTML tag designates that this is the biggest heading. The smallest heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags which get smaller as the number gets larger.\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nHTML stands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nAn HTML element is a piece of a website that is marked by a start tag and sometimes closed with an end tag. The element also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nAn HTML tag is the special set of characters that tells the machine where the start or end of an HTML element is and what type it is.\n</details>\n\n</div>\n\nHeadings can come in different sizes.  In this page, there are six different sized headings, but they are all mixed up.  Can you and your partner figure out how to fix them?\n\n\n\nDo This:\n* Use the inspector tool to figure out what makes the headings different sizes\n* Make sure you and your partner agree on what the different heading tags do.\n* Change the tags so that the headings are in order from biggest to smallest, and the text says the correct size, as in the picture below. \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15 PM.png\" style=\"width:100px\" style=\"float:left\">\n",
        "CSD U2 Heading Sizes_2018_markdown_instruction": "# Heading Sizes\n\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are headings?**</summary>\nHeadings are the different sized section titles throughout a web page. Headings add structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>**How do I make different sized headings?**</summary>\nHeadings come in 6 different sizes.  The most common heading is &lt;h1&gt; The number 1 in the HTML tag designates that this is the biggest heading. The smallest heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags which get smaller as the number gets larger.\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nHTML stands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nAn HTML element is a piece of a website that is marked by a start tag and sometimes closed with an end tag. The element also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nAn HTML tag is the special set of characters that tells the machine where the start or end of an HTML element is and what type it is.\n</details>\n\n</div>\n\nHeadings can come in different sizes.  In this page, there are six different sized headings, but they are all mixed up.  Can you and your partner figure out how to fix them?\n\n\n\nDo This:\n* Use the inspector tool to figure out what makes the headings different sizes\n* Make sure you and your partner agree on what the different heading tags do.\n* Change the tags so that the headings are in order from biggest to smallest, and the text says the correct size, as in the picture below. \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15 PM.png\" style=\"width:100px\" style=\"float:left\">\n",
        "CSD U2 Heading Test_markdown_instruction": "# Headings and Paragraphs\n\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a paragraph element?**</summary>\nParagraphs are marked by opening(`<p>`) and closing(`</p>`) tags as well. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. All of your text in your web page should be contained in an HTML element (headings or paragraphs). Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.\n</details>\n<details>\n<summary>**How do I create multiple paragraphs?**</summary>\nParagraphs are marked by opening(`<p>`) and closing(`</p>`) tags as well. To create more than one paragraph you will want multiple sets of opening and closing `<p>` tags. For example\n<pre>\n\t&lt;p&gt;\n    \tThis is a paragraph.\n    &lt;/p&gt;\n\t&lt;p&gt;\n    \tThis is another paragraph.\n    &lt;/p&gt;\n</pre>\n</details>\n<details>\n<summary>**What are headings?**</summary>\nHeadings are the different sized section titles throughout a web page. Headings add structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>**How do I make different sized headings?**</summary>\nHeadings come in 6 different sizes. So far you have primarily used the biggest one &lt;h1&gt;. The number 1 in the HTML tag designates that this is the biggest heading. The smallest heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags which get smaller as the number gets larger.\n</h1>\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nHTML stands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nAn HTML element is a piece of a website that is marked by a start tag and sometimes closed with an end tag. The element also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nAn HTML tag is the special set of characters that tells the machine where the start or end of an HTML element is and what type it is.\n</details>\n\n</div>\n\nThe author of this page added in a lot of content, but did not think about structure.  All of the text is mashed together.\n\nDo This:\n* Look through the content with your partner and decide what you think the best structure should be.\n* Use your heading and paragraph tags to code the structure into the page.\n",
        "CSD U2 Heading Test_2018_markdown_instruction": "# Headings and Paragraphs\n\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a paragraph element?**</summary>\nParagraphs are marked by opening(`<p>`) and closing(`</p>`) tags as well. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. All of your text in your web page should be contained in an HTML element (headings or paragraphs). Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.\n</details>\n<details>\n<summary>**How do I create multiple paragraphs?**</summary>\nParagraphs are marked by opening(`<p>`) and closing(`</p>`) tags as well. To create more than one paragraph you will want multiple sets of opening and closing `<p>` tags. For example\n<pre>\n\t&lt;p&gt;\n    \tThis is a paragraph.\n    &lt;/p&gt;\n\t&lt;p&gt;\n    \tThis is another paragraph.\n    &lt;/p&gt;\n</pre>\n</details>\n<details>\n<summary>**What are headings?**</summary>\nHeadings are the different sized section titles throughout a web page. Headings add structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>**How do I make different sized headings?**</summary>\nHeadings come in 6 different sizes. So far you have primarily used the biggest one &lt;h1&gt;. The number 1 in the HTML tag designates that this is the biggest heading. The smallest heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags which get smaller as the number gets larger.\n</h1>\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nHTML stands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nAn HTML element is a piece of a website that is marked by a start tag and sometimes closed with an end tag. The element also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nAn HTML tag is the special set of characters that tells the machine where the start or end of an HTML element is and what type it is.\n</details>\n\n</div>\n\nThe author of this page added in a lot of content, but did not think about structure.  All of the text is mashed together.\n\nDo This:\n* Look through the content with your partner and decide what you think the best structure should be.\n* Use your heading and paragraph tags to code the structure into the page.\n",
        "CSD U2 Image Tag 1_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How do I add images?**</summary>\nThe `<img>` tag allows you to show images on your web page. <br><br>\n\nExample:\n<pre>&lt;img src=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which file to use, extra information, called an **attribute**, is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesnât load or for people who have trouble with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>**Why does an image tag not have a closing tag?**</summary>\nAn image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**What is an attribute?**</summary>\nAttributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag. \n\nFor example &lt;img&gt; tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.\n</details>\n</div>\n\n# Images\n\nA Dog vs Cat web page has been started for you. The dog image has already been added to the below web page. Use an image tag to add the `cat.jpeg` image to the page below the cat heading.",
        "CSD U2 Image Tag 1_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How do I add images?**</summary>\nThe `<img>` tag allows you to show images on your web page. <br><br>\n\nExample:\n<pre>&lt;img src=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which file to use, extra information, called an **attribute**, is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesnât load or for people who have trouble with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>**Why does an image tag not have a closing tag?**</summary>\nAn image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**What is an attribute?**</summary>\nAttributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag. \n\nFor example &lt;img&gt; tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.\n</details>\n</div>\n\n# Images\n\nA Dog vs Cat web page has been started for you. The dog image has already been added to the below web page. Use an image tag to add the `cat.jpeg` image to the page below the cat heading.",
        "CSD U2 Image Tag 2_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How do I add images?**</summary>\nThe `<img>` tag allows you to show images on your web page. <br><br>\n\nExample:\n<pre>&lt;img src=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which file to use, extra information, called an **attribute**, is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesnât load or for people who have trouble with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>**Why does an image tag not have a closing tag?**</summary>\nAn image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**What is an attribute?**</summary>\nAttributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag. \n\nFor example &lt;img&gt; tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.\n</details>\n</div>\n\n# Uploading Images\n\nYou can upload images that you've found elsewhere using the **Add Image** button. Go find an image of a different type of pet that you like and download it to your computer (using right-click \"Save As\").\n\nOnce you have your images, click ![](https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49 PM.png) and upload the image from your computer into your project, where you can then use it in your page.\n\n# Do This\n\n* Upload at least one image into this web page\n* Use the `<img>` tag to display the image(s) in your website.\n* Make sure to add an `alt` attribute.",
        "CSD U2 Image Tag 2_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How do I add images?**</summary>\nThe `<img>` tag allows you to show images on your web page. <br><br>\n\nExample:\n<pre>&lt;img src=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which file to use, extra information, called an **attribute**, is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesnât load or for people who have trouble with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>**Why does an image tag not have a closing tag?**</summary>\nAn image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**What is an attribute?**</summary>\nAttributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag. \n\nFor example &lt;img&gt; tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.\n</details>\n</div>\n\n# Uploading Images\n\nYou can upload images that you've found elsewhere using the **Add Image** button. Go find an image of a different type of pet that you like and download it to your computer (using right-click \"Save As\").\n\nOnce you have your images, click ![](https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49 PM.png) and upload the image from your computer into your project, where you can then use it in your page.\n\n# Do This\n\n* Upload at least one image into this web page\n* Use the `<img>` tag to display the image(s) in your website.\n* Make sure to add an `alt` attribute.",
        "CSD U2 Image Tag Attribution_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How do I add images?**</summary>\nThe `<img>` tag allows you to show images on your web page. <br><br>\n\nExample:\n<pre>&lt;img src=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which file to use, extra information, called an **attribute**, is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesnât load or for people who have trouble with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>**Why does an image tag not have a closing tag?**</summary>\nAn image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**What is an attribute?**</summary>\nAttributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag. \n\nFor example &lt;img&gt; tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.\n</details>\n</div>\n\n# Giving Credit\n\nWhen using a Creative Commons licensed image, you need to give credit to the original creator (this is also called _attribution_). There are lots of ways to provide attribution, but the easiest way is to add text below the image that identifies the creator and website it came from.\n\n# Do This\n\nIn this page we've already added and attributed an image of a frog. Use the Creative Commons search engine to find another image of an amphibian. Add your found image to this page, along with proper attribution, including:\n\n* The name of the creator (if available)\n* The website it was found on (e.g. commons.wikimedia.org)\n* The license it was published under (e.g. CC-BY)",
        "CSD U2 Image Tag Attribution_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How do I add images?**</summary>\nThe `<img>` tag allows you to show images on your web page. <br><br>\n\nExample:\n<pre>&lt;img src=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which file to use, extra information, called an **attribute**, is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesnât load or for people who have trouble with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>**Why does an image tag not have a closing tag?**</summary>\nAn image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**What is an attribute?**</summary>\nAttributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag. \n\nFor example &lt;img&gt; tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.\n</details>\n</div>\n\n# Giving Credit\n\nWhen using a Creative Commons licensed image, you need to give credit to the original creator (this is also called _attribution_). There are lots of ways to provide attribution, but the easiest way is to add text below the image that identifies the creator and website it came from.\n\n# Do This\n\nIn this page we've already added and attributed an image of a frog. Use the Creative Commons search engine to find another image of an amphibian. Add your found image to this page, along with proper attribution, including:\n\n* The name of the creator (if available)\n* The website it was found on (e.g. commons.wikimedia.org)\n* The license it was published under (e.g. CC-BY)",
        "CSD U2 Image Tag Debug_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How do I add images?**</summary>\nThe `<img>` tag allows you to show images on your web page. <br><br>\n\nExample:\n<pre>&lt;img src=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which file to use, extra information, called an **attribute**, is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesnât load or for people who have trouble with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>**Why does an image tag not have a closing tag?**</summary>\nAn image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**What is an attribute?**</summary>\nAttributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag. \n\nFor example &lt;img&gt; tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.\n</details>\n</div>\n\n# The Details Matter\n\nThe `src` attribute needs to point to the _exact_ filename of the image you want to use. That means you need to pay attention to spelling, capitalization, and the file extension. Each of the three images on this page is broken because of an improper `src` attribute. Using the file menu for reference, fix each of the image tags.\n\n_Note: Even though the images are not loading properly, our website is still showing descriptive text of what should be there because we used `alt` attributes. Cool!_",
        "CSD U2 Image Tag Debug_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How do I add images?**</summary>\nThe `<img>` tag allows you to show images on your web page. <br><br>\n\nExample:\n<pre>&lt;img src=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which file to use, extra information, called an **attribute**, is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesnât load or for people who have trouble with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>**Why does an image tag not have a closing tag?**</summary>\nAn image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**What is an attribute?**</summary>\nAttributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag. \n\nFor example &lt;img&gt; tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.\n</details>\n</div>\n\n# The Details Matter\n\nThe `src` attribute needs to point to the _exact_ filename of the image you want to use. That means you need to pay attention to spelling, capitalization, and the file extension. Each of the three images on this page is broken because of an improper `src` attribute. Using the file menu for reference, fix each of the image tags.\n\n_Note: Even though the images are not loading properly, our website is still showing descriptive text of what should be there because we used `alt` attributes. Cool!_",
        "CSD U2 Info Page Content_markdown_instruction": "# Adding Your Content\n\nYou should now have found a handful of websites that you can use to help make your case for the cause you've chosen. If not, keep on researching! Otherwise it's time to start structuring the content of your page.\n\nFor all of the content you find externally, you'll need to provide attribution to the original creator. For now, just include the url of the site where you found it in parenthesis. For example\n\n* According to the ASPCA only 10% of animals entering shelters have been spayed or neutered (http://www.aspca.org/animal-homelessness).\n* Kill shelters euthanize 2.7 million animals per year (http://www.aspca.org/animal-homelessness).\n\n# Do This\n\nThe specifics of your page layout will depend on your topics and goals, but in general you should create the following structure\n\n* A first level header with a catchy title for your page\n* A second level header for each separate argument to support your cause\n* Paragraphs of content under each second level header\n* The urls of any sites where you found information\n* Don't worry about styling right now you are just getting the content\n",
        "CSD U2 Info Page Final Touches_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n<h2>\nChecklist\n</h2>\n\n<input type=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">Ensure that your image is properly licensed</span>\n<input type=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">Upload image into Web Lab</span>\n<input type=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">Create an image tag with a descriptive alt attribute</span>\n<input type=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">If the image isn't your own, add attribution underneath<br/>\n\n</div>\n\n\n# Adding Images to Your Site\n\nYou've already created some pages with great content on your website, now you can add some images!\n\n# Do This\n\nUsing either your own images or those found through a Commons Search, add some images to the pages you've already created. Get creative! Use the checklist to the right to keep track of the steps you need to follow when adding images.\n",
        "CSD U2 Info Page Final Touches_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n<h2>\nChecklist\n</h2>\n\n<input type=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">Ensure that your image is properly licensed</span>\n<input type=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">Upload image into Web Lab</span>\n<input type=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">Create an image tag with a descriptive alt attribute</span>\n<input type=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">If the image isn't your own, add attribution underneath<br/>\n\n</div>\n\n\n# Adding Images to Your Site\n\nYou've already created some pages with great content on your website, now you can add some images!\n\n# Do This\n\nUsing either your own images or those found through a Commons Search, add some images to the pages you've already created. Get creative! Use the checklist to the right to keep track of the steps you need to follow when adding images.\n",
        "CSD U2 Info Page Images_markdown_instruction": "# Adding Your Images\n\nWith images and attribution information in hand, it's time to spruce up your new page.\n\n# Do This\n\nUpload your images to Web Lab and, using `<img>` tags, add them where you'd like them to go. For each image:\n\n* Add a descriptive `alt` attribute\n* Add attribution underneath the image, including\n\t* Name or screenname of author (if available)\n    * Title of image (if available)\n    * Url to original site\n    * License image was published under either in text (eg CC-BY) or using a badge from the [Creative Commons website](https://creativecommons.org/about/downloads/).\n\nFor example\n\n![Sad Dog](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Longhaired_Dachshund_portrait.jpg/629px-Longhaired_Dachshund_portrait.jpg)\n\nLonghaired Dachshund portrait by Flickr user Soggydan (ht<span>tps://</span>commons.wikimedia.org/wiki/File:Longhaired_Dachshund_portrait.jpg) - CC-BY",
        "CSD U2 Inspector Warm Up_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**<span> How do I use the Inspector Tool? </span>**</summary>\nThe Inspector Tool is a great way to learn more about unfamiliar code in Web Lab. To turn on the Inspector Tool, click <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png\" style=\"width:100px\">. You will know that the Inspector Tool is on because the button will turn white and say \"Inspector: On\". Once you turn on the Inspector Tool, you can hover over anything in the preview area and Web Lab will highlight the code that is making that part of the page appear.\n</details>\n\n</div>\n\n# Explore HTML\n\nThis is a web page written in HTML, the language of the web. You'll learn more about how it works, but first explore it by using the Inspector Tool.\n\n# Do This\n\n* Click the Tip \"How do I use the Inspector Tool?\" on the right to learn how to use the Inspector Tool.\n* Follow the instructions in the web page to explore the web page and discuss with a partner how it is working.",
        "CSD U2 Inspector Warm Up_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**<span> How do I use the Inspector Tool? </span>**</summary>\nThe Inspector Tool is a great way to learn more about unfamiliar code in Web Lab. To turn on the Inspector Tool, click <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png\" style=\"width:100px\">. You will know that the Inspector Tool is on because the button will turn white and say \"Inspector: On\". Once you turn on the Inspector Tool, you can hover over anything in the preview area and Web Lab will highlight the code that is making that part of the page appear.\n</details>\n\n</div>\n\n# Explore HTML\n\nThis is a web page written in HTML, the language of the web. You'll learn more about how it works, but first explore it by using the Inspector Tool.\n\n# Do This\n\n* Click the Tip \"How do I use the Inspector Tool?\" on the right to learn how to use the Inspector Tool.\n* Follow the instructions in the web page to explore the web page and discuss with a partner how it is working.",
        "CSD U2 RGB intro_markdown_instruction": "# RGB Colors\n\nAll colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.\n\n* **Click \"Run\" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.\n* For each of the colors below, match it to its RGB value.\n\nA) red: 216, green: 191, blue: 216 - rgb(216,191,216)\n\nB) red: 255, green: 239, blue: 213 - rgb(255,239,213)\n\nC) red: 250, green: 128, blue: 114 - rgb(250,128,114)\n\nD) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)\n\nE) red: 107, green: 142, blue: 35 - rgb(107,142,35)\n\n\n<div style=\"font-size: 16px\">\n<br />\n<details>\n<summary>**Why do red and green make yellow?**</summary>\n<p>When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia - Additive Color</a>\n</p> </details>\n<details>\n<summary>**How many colors can I make with RGB color mixing?**</summary>\n<p>\nYou can make over sixteen million different colors with RGB color mixing.\n</p></details>\n</div>",
        "CSD U2 RGB intro_2018_markdown_instruction": "# RGB Colors\n\nAll colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.\n\n* **Click \"Run\" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.\n* For each of the colors below, match it to its RGB value.\n\nA) red: 216, green: 191, blue: 216 - rgb(216,191,216)\n\nB) red: 255, green: 239, blue: 213 - rgb(255,239,213)\n\nC) red: 250, green: 128, blue: 114 - rgb(250,128,114)\n\nD) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)\n\nE) red: 107, green: 142, blue: 35 - rgb(107,142,35)\n\n\n<div style=\"font-size: 16px\">\n<br />\n<details>\n<summary>**Why do red and green make yellow?**</summary>\n<p>When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\" target=\"_new\">Wikipedia - Additive Color</a>\n</p> </details>\n<details>\n<summary>**How many colors can I make with RGB color mixing?**</summary>\n<p>\nYou can make over sixteen million different colors with RGB color mixing.\n</p></details>\n</div>",
        "CSD U2 RGB others_markdown_instruction": "# Spring and Autumn Colors\n\nChoose RGB values for spring and autumn colors.\n\n* Click \"Run\" to start the widget.\n* Adjust the levels until you find a spring color you like, then write down the values on your activity guide.\n* Do the same for an autumn color.   You will need the RGB values for the next activity.\n\n\n<div style=\"font-size: 16px\">\n<br />\n<details><summary>**Where can I see the whole range of color types?**</summary>\nYou can find many options for colors at <a href=\"http://www.w3schools.com/colors/colors_picker.asp\">W3Schools - HTML Color Picker</a></details>\n<details>\n<summary>**Why do red and green make yellow?**</summary>\n<p>When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia - Additive Color</a></p> </details>\n<details>\n<summary>**How many colors can I make with RGB color mixing?**</summary>\n<p>You can make make over sixteen million different colors with RGB color mixing.</p></details>\n</div>",
        "CSD U2 RGB others_2018_markdown_instruction": "# Spring and Autumn Colors\n\nChoose RGB values for spring and autumn colors.\n\n* Click \"Run\" to start the widget.\n* Adjust the levels until you find a spring color you like, then write down the values on your activity guide.\n* Do the same for an autumn color.   You will need the RGB values for the next activity.\n\n\n<div style=\"font-size: 16px\">\n<br />\n<details><summary>**Where can I see the whole range of color types?**</summary>\nYou can find many options for colors at <a href=\"http://www.w3schools.com/colors/colors_picker.asp\" target=\"_new\">W3Schools - HTML Color Picker</a></details>\n<details>\n<summary>**Why do red and green make yellow?**</summary>\n<p>When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\" target=\"_new\">Wikipedia - Additive Color</a></p> </details>\n<details>\n<summary>**How many colors can I make with RGB color mixing?**</summary>\n<p>You can make make over sixteen million different colors with RGB color mixing.</p></details>\n</div>",
        "CSD U2 RGB summer_markdown_instruction": "# Summer Color\n\nFind the RGB values for a summery yellow color.\n\n* Click \"Run\" to start the widget.\n* Adjust the levels until you match the summery yellow at the bottom of the widget.\n* Write the RGB values on your activity guide.  You will need them in the next activity.\n\n\n<div style=\"font-size: 16px\">\n<br />\n<details>\n<summary>**Why do red and green make yellow?**</summary>\n<p>When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia - Additive Color</a></p> </details>\n<details>\n<summary>**How many colors can I make with RGB color mixing?**</summary>\n<p>You can make make over sixteen million different colors with RGB color mixing.</p></details>\n</div>",
        "CSD U2 RGB summer_2018_markdown_instruction": "# Summer Color\n\nFind the RGB values for a summery yellow color.\n\n* Click \"Run\" to start the widget.\n* Adjust the levels until you match the summery yellow at the bottom of the widget.\n* Write the RGB values on your activity guide.  You will need them in the next activity.\n\n\n<div style=\"font-size: 16px\">\n<br />\n<details>\n<summary>**Why do red and green make yellow?**</summary>\n<p>When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\" target=\"_new\">Wikipedia - Additive Color</a></p> </details>\n<details>\n<summary>**How many colors can I make with RGB color mixing?**</summary>\n<p>You can make make over sixteen million different colors with RGB color mixing.</p></details>\n</div>",
        "CSD U2 RGB winter_markdown_instruction": "# Winter Color\n\nIn the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.\n\n* Click \"Run\" to start the widget.\n* Adjust the levels until you match the wintery blue color at the bottom of the widget.\n* Write the RGB values on your activity guide.  You will need them in the next activity.\n\n\n<div style=\"font-size: 16px\">\n<br />\n<details><summary>**How do I make a color lighter?**</summary>\n<p>To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.</p></details>\n<details>\n<summary>**Why do red and green make yellow?**</summary>\n<p>When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia - Additive Color</a></p> </details>\n<details>\n<summary>**How many colors can I make with RGB color mixing?**</summary>\n<p>You can make make over sixteen million different colors with RGB color mixing.</p></details>\n</div>",
        "CSD U2 RGB winter_2018_markdown_instruction": "# Winter Color\n\nIn the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.\n\n* Click \"Run\" to start the widget.\n* Adjust the levels until you match the wintery blue color at the bottom of the widget.\n* Write the RGB values on your activity guide.  You will need them in the next activity.\n\n\n<div style=\"font-size: 16px\">\n<br />\n<details><summary>**How do I make a color lighter?**</summary>\n<p>To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.</p></details>\n<details>\n<summary>**Why do red and green make yellow?**</summary>\n<p>When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\" target=\"_new\">Wikipedia - Additive Color</a></p> </details>\n<details>\n<summary>**How many colors can I make with RGB color mixing?**</summary>\n<p>You can make make over sixteen million different colors with RGB color mixing.</p></details>\n</div>",
        "CSD U2 add file - OLD_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n<details>\n<summary>**How do I create a new style sheet?**</summary>\nTo create a new style sheet, click on the \"Add CSS\" button above the code area.\n</details>\n<details>\n<summary>**What should I name my style sheet?**</summary>\nYou can name your style sheet anything, but it's better to choose a relevant name, such as \"style.css\" or \"aboutmestyles.css\" so that it's clear what the file is.  Your file should always end in the \".css\" extension.\n</details>\n<details>\n<summary>**How do I rename a file?**</summary>\nTo rename a file, you can right click (or control click) on the file name and choose the \"Rename\" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.\n</details>\n<details>\n<summary>**How do I add a style sheet to a web page?**</summary>\nTo add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel=\"stylesheet\" href=\"style.css\">`.  Then change \"style.css\" to the name of your style sheet.\n</details>\n</div>\n# Adding a Style Sheet\n\nThis is your About Me page from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.\n\n1. Create a new style sheet for your project.\n2. Rename the style sheet file.\n3. Add your style sheet to your HTML page.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\" style=\" max-width:500px\">",
        "CSD U2 add file_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n<details>\n<summary>**How do I create a new style sheet?**</summary>\nTo create a new style sheet, click on the \"Add CSS\" button above the code area.\n</details>\n<details>\n<summary>**What should I name my style sheet?**</summary>\nYou can name your style sheet anything, but it's better to choose a relevant name, such as \"style.css\" or \"aboutmestyles.css\" so that it's clear what the file is.  Your file should always end in the \".css\" extension.\n</details>\n<details>\n<summary>**How do I rename a file?**</summary>\nTo rename a file, you can right click (or control click) on the file name and choose the \"Rename\" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.\n</details>\n<details>\n<summary>**How do I add a style sheet to a web page?**</summary>\nTo add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel=\"stylesheet\" href=\"style.css\">`.  Then change \"style.css\" to the name of your style sheet.\n</details>\n</div>\n# Adding a Style Sheet\n\nThis is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.\n\n1. Create a new style sheet for your project.\n2. Rename the style sheet file.\n3. Add your style sheet to your HTML page.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\" style=\" max-width:500px\">",
        "CSD U2 add file_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n<details>\n<summary>**How do I create a new style sheet?**</summary>\nTo create a new style sheet, click on the \"Add CSS\" button above the code area.\n</details>\n<details>\n<summary>**What should I name my style sheet?**</summary>\nYou can name your style sheet anything, but it's better to choose a relevant name, such as \"style.css\" or \"aboutmestyles.css\" so that it's clear what the file is.  Your file should always end in the \".css\" extension.\n</details>\n<details>\n<summary>**How do I rename a file?**</summary>\nTo rename a file, you can right click (or control click) on the file name and choose the \"Rename\" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.\n</details>\n<details>\n<summary>**How do I add a style sheet to a web page?**</summary>\nTo add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel=\"stylesheet\" href=\"style.css\">`.  Then change \"style.css\" to the name of your style sheet.\n</details>\n</div>\n# Adding a Style Sheet\n\nThis is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.\n\n1. Create a new style sheet for your project.\n2. Rename the style sheet file.\n3. Add your style sheet to your HTML page.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\" style=\" max-width:500px\">",
        "CSD U2 classes modify_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nFor the code to work, you need to both create a winter class and add elements to the class.\n\nThe class is created in the style sheet, with the following code.\n\n<pre>.winter {\n  color: rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).\n\nThe code that adds a `h5` element to the winter class is `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.\n</details>\n<details>\n<summary>**What rules can be added to a class rule-set?**</summary>\nA class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.\n</details>\n<details>\n<summary>**Why does the selector have a period in front of it?**</summary>\nIn CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.\n</details>\n<details>\n<summary>**Why would a web developer use classes?**</summary>\nA web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.\n</details>\n<details>\n<summary>**I got different RGB values, but mine are right, too.**</summary>\nBecause RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.\n\n</details>\n</div>\n# Adding Rules\n\nYour winter words should all have the same color and font.\n\n* Find the CSS rule-set in the style sheet that gives the winter words their style.\n* Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.\n* Add any other rules you'd like for your winter words.",
        "CSD U2 classes modify_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nFor the code to work, you need to both create a winter class and add elements to the class.\n\nThe class is created in the style sheet, with the following code.\n\n<pre>.winter {\n  color: rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).\n\nThe code that adds a `h5` element to the winter class is `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.\n</details>\n<details>\n<summary>**What rules can be added to a class rule-set?**</summary>\nA class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.\n</details>\n<details>\n<summary>**Why does the selector have a period in front of it?**</summary>\nIn CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.\n</details>\n<details>\n<summary>**Why would a web developer use classes?**</summary>\nA web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.\n</details>\n<details>\n<summary>**I got different RGB values, but mine are right, too.**</summary>\nBecause RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.\n\n</details>\n</div>\n# Adding Rules\n\nYour winter words should all have the same color and font.\n\n* Find the CSS rule-set in the style sheet that gives the winter words their style.\n* Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.\n* Add any other rules you'd like for your winter words.",
        "CSD U2 classes sample_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nFor the code to work, you need to both create a winter class and add elements to the class.\n\nThe class is created in the style sheet, with the following code.\n\n<pre>.winter {\n  color: rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).\n\nThe code that adds a `h5` element to the winter class is `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.\n</details>\n<details>\n<summary>**Why does the selector have a period in front of it?**</summary>\nIn CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.\n</details>\n<details>\n<summary>**Why would a web developer use classes?**</summary>\nA web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.\n</details>\n<details>\n<summary>**I got different RGB values, but mine are right, too.**</summary>\nBecause RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.\n\n</details>\n</div>\n# Classes\n\nIn this page, the web developer has used classes to give some of the words our winter color.\n\n* Look at the HTML code for the winter words.  Why is \"snowy\" the only winter word without the winter color?\n* Add code to the HTML that will give \"snowy\" the same winter blue as the other words.\n* Look inside the style sheet to find the rule that makes all the words in the winter class blue, and check whether your RGB numbers are close to the ones in the style sheet.  \n* Discuss with your partner how the code works.",
        "CSD U2 classes sample_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nFor the code to work, you need to both create a winter class and add elements to the class.\n\nThe class is created in the style sheet, with the following code.\n\n<pre>.winter {\n  color: rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).\n\nThe code that adds a `h5` element to the winter class is `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.\n</details>\n<details>\n<summary>**Why does the selector have a period in front of it?**</summary>\nIn CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.\n</details>\n<details>\n<summary>**Why would a web developer use classes?**</summary>\nA web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.\n</details>\n<details>\n<summary>**I got different RGB values, but mine are right, too.**</summary>\nBecause RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.\n\n</details>\n</div>\n# Classes\n\nIn this page, the web developer has used classes to give some of the words our winter color.\n\n* Look at the HTML code for the winter words.  Why is \"snowy\" the only winter word without the winter color?\n* Add code to the HTML that will give \"snowy\" the same winter blue as the other words.\n* Look inside the style sheet to find the rule that makes all the words in the winter class blue, and check whether your RGB numbers are close to the ones in the style sheet.  \n* Discuss with your partner how the code works.",
        "CSD U2 classes spring_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nFor the code to work, you need to both create a spring class and add elements to the class.\n\nThe spring class is already created in the style sheet, but it doesn't have any rules.\n\n<pre>.spring {\n  color: rgb(195,230,255);\n}</pre>\n\nLook at the rules in the `winter` class for clues to how to make rules for the summer class.\n\nYou will also need to add some elements to the spring class inside your HTML file.\n\nThe code in the HTML file that adds a `h5` element to the winter class is `<h5 class=\"winter\">`.  Use this pattern to add elements to the spring class, too.\n</details>\n<details>\n<summary>**What rules can be added to a class rule-set?**</summary>\nA class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.\n</details>\n<details>\n<summary>**Why does the selector have a period in front of it?**</summary>\nIn CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.\n</details>\n<details>\n<summary>**Why would a web developer use classes?**</summary>\nA web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.\n</details>\n</div>\n# Spring Class\n\nNow that your winter class is ready, you can start on the other seasons.\n\n* Find the empty CSS rule-set in the style sheet that gives the spring words their style.\n* Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.\n* Add the spring class to the spring elements in the HTML page.",
        "CSD U2 classes spring_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nFor the code to work, you need to both create a spring class and add elements to the class.\n\nThe spring class is already created in the style sheet, but it doesn't have any rules.\n\n<pre>.spring {\n  color: rgb(195,230,255);\n}</pre>\n\nLook at the rules in the `winter` class for clues to how to make rules for the summer class.\n\nYou will also need to add some elements to the spring class inside your HTML file.\n\nThe code in the HTML file that adds a `h5` element to the winter class is `<h5 class=\"winter\">`.  Use this pattern to add elements to the spring class, too.\n</details>\n<details>\n<summary>**What rules can be added to a class rule-set?**</summary>\nA class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.\n</details>\n<details>\n<summary>**Why does the selector have a period in front of it?**</summary>\nIn CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.\n</details>\n<details>\n<summary>**Why would a web developer use classes?**</summary>\nA web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.\n</details>\n</div>\n# Spring Class\n\nNow that your winter class is ready, you can start on the other seasons.\n\n* Find the empty CSS rule-set in the style sheet that gives the spring words their style.\n* Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.\n* Add the spring class to the spring elements in the HTML page.",
        "CSD U2 classes summer_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nFor the code for the winter class to work, it needs to both create a winter class and add elements to the class.\n\nThe class is created in the style sheet, with the following code.\n\n<pre>.winter {\n  color: rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).\n\nThe code that adds a `h5` element to the winter class is `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.\n</details>\n<details>\n<summary>**How do I create a new rule-set?**</summary>\nYou can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.\n<pre>.winter {\n  color: rgb(195,230,255);\n}</pre>\n\nThe selector name and the color values will be different, but the following pattern is always the same.\n\n<pre>.classname {\n  property1: value1;\n  property2: value2;\n}</pre>\n</details>\n<details>\n<summary>**Why does the selector have a period in front of it?**</summary>\nIn CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.\n</details>\n<details>\n<summary>**Why would a web developer use classes?**</summary>\nA web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.\n</details>\n</div>\n# Summer and Autumn Classes\n\n* Inside the style sheet, create a new rule-set for a \"summer\" class.\n* Add a rule to set the text in the summer class to your summer RGB color.\n* Add the summer class to the summer elements in the HTML page.\n* Do the same for the autumn class.",
        "CSD U2 classes summer_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nFor the code for the winter class to work, it needs to both create a winter class and add elements to the class.\n\nThe class is created in the style sheet, with the following code.\n\n<pre>.winter {\n  color: rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).\n\nThe code that adds a `h5` element to the winter class is `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.\n</details>\n<details>\n<summary>**How do I create a new rule-set?**</summary>\nYou can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.\n<pre>.winter {\n  color: rgb(195,230,255);\n}</pre>\n\nThe selector name and the color values will be different, but the following pattern is always the same.\n\n<pre>.classname {\n  property1: value1;\n  property2: value2;\n}</pre>\n</details>\n<details>\n<summary>**Why does the selector have a period in front of it?**</summary>\nIn CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.\n</details>\n<details>\n<summary>**Why would a web developer use classes?**</summary>\nA web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.\n</details>\n</div>\n# Summer and Autumn Classes\n\n* Inside the style sheet, create a new rule-set for a \"summer\" class.\n* Add a rule to set the text in the summer class to your summer RGB color.\n* Add the summer class to the summer elements in the HTML page.\n* Do the same for the autumn class.",
        "CSD U2 commenting_markdown_instruction": "# Comments\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is whitespace?**</summary>\nWhitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.\n</details>\n<details>\n<summary>**What is indentation?**</summary>\nIndentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:\n<pre>\n   &lt;body&gt;\n      &lt;p&gt;This paragraph is inside the \"body\" element.&lt;/p&gt;\n   &lt;/body&gt;\n</pre>\n\n</details>\n<details>\n<summary>**What is formatting?**</summary>\nFormatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:\n<pre>\n   &lt;body&gt;\n      &lt;p&gt;This paragraph is inside the \"body\" element.&lt;/p&gt;\n   &lt;/body&gt;\n</pre>\n</details>\n</div>\n\nYou can add **comments** to your code to explain the different parts of the code and what it should create.  Comments can help you to debug, and will also help other people who are trying to understand your code.\n\n<pre>\n&lt;!-- this is a comment --&gt;\n</pre>\n\n# Do This\n\n* Look at the code with your partner and find the comments.\n* Use the comments to help you fix the bugs in the HTML.",
        "CSD U2 commenting_2018_markdown_instruction": "# Comments\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What is whitespace?**</summary>\nWhitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.\n</details>\n<details>\n<summary>**What is indentation?**</summary>\nIndentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:\n<pre>\n   &lt;body&gt;\n      &lt;p&gt;This paragraph is inside the \"body\" element.&lt;/p&gt;\n   &lt;/body&gt;\n</pre>\n\n</details>\n<details>\n<summary>**What is formatting?**</summary>\nFormatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:\n<pre>\n   &lt;body&gt;\n      &lt;p&gt;This paragraph is inside the \"body\" element.&lt;/p&gt;\n   &lt;/body&gt;\n</pre>\n</details>\n</div>\n\nYou can add **comments** to your code to explain the different parts of the code and what it should create.  Comments can help you to debug, and will also help other people who are trying to understand your code.\n\n<pre>\n&lt;!-- this is a comment --&gt;\n</pre>\n\n# Do This\n\n* Look at the code with your partner and find the comments.\n* Use the comments to help you fix the bugs in the HTML.",
        "CSD U2 image tag_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**How do I add images?**</summary>\nThe `<img>` tag allows you to show images on your web page. <br><br>\n\nExample:\n<pre>&lt;img src=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which file to use, extra information, called an **attribute**, is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesnât load or for people who have trouble with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **void element** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>**What is a void tag?**</summary>\nAn `<img>` tag is an example of a  **void element** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag. Void tags do not need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**Why does an image tag not have a closing tag?**</summary>\nAn image tag is a void tag and void tags do not need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**What is an attribute?**</summary>\nAttributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag. \n\nFor example &lt;img&gt; tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.\n</details>\n</div>\n\n# Images\n\nA Dog vs Cat web page has been started for you. The dog image has already been added to the below web page. Use an image tag to add the cat.jpeg image to the page below the cat header.",
        "CSD U2 images intro_markdown_instruction": "# Images\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**How do I add images?**</summary>\nThe `<img>` tag allows you to show images on your web page. <br><br>\n\nExample:\n<pre>&lt;img src=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which file to use, extra information, called an **attribute**, is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesnât load or for people who have trouble with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **void element** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>**What is a void tag?**</summary>\nAn `<img>` tag is an example of a  **void element** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag. Void tags do not need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**Why does an image tag not have a closing tag?**</summary>\nAn image tag is a void tag and void tags do not need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**What is an attribute?**</summary>\nAttributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag. \n\nFor example &lt;img&gt; tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.\n</details>\n</div>\n\nThe recipe page would look a lot better with a picture of the scotcheroos, so we added one onto this page.  It might look better somewhere else on the page, though.\n\n# Do This\n* Look at the file list on the left of your workspace, and find the file named \"scotcheroos.jpeg\"\n* Use the inspector tool to find the code that made the image appear on the page.\n* Make sure you and your partner agree on how the image tag works.\n* Try to move the picture to the top of the page.",
        "CSD U2 layout style bgcolor_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the background of the page blue:\n\n<pre>body {\n  background-color: lightblue;\n}</pre>\n\n* `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.\n* `background-color: lightblue;` is the rule that makes the entire page light blue.\n  * `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.\n  * `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.\n</details>\n<details>\n<summary>**What colors can I use in CSS?**</summary>\nCSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools - CSS Legal Color Values</a>\n</details>\n<details>\n<summary>**What does the `background-color` property do?**</summary>\nThe `background-color` property determines the color of the background of an element.  You can read more about the property at <a href=\"http://www.w3schools.com/cssref/pr_background-color.asp\">W3Schools - CSS background-color Property</a>\n</details>\n<details>\n<summary>**What if an element inside the page has a different background color from the body?**</summary>\nYou can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.\n</details>\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n\n# Background Color\n\n* Find the code in the style sheet that is making the background of the entire page light blue.\n* Change the code to make the page a different color.\n* Try to change the background color of just the paragraphs.",
        "CSD U2 layout style bgcolor_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the background of the page blue:\n\n<pre>body {\n  background-color: lightblue;\n}</pre>\n\n* `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.\n* `background-color: lightblue;` is the rule that makes the entire page light blue.\n  * `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.\n  * `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.\n</details>\n<details>\n<summary>**What colors can I use in CSS?**</summary>\nCSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\" target=\"_new\">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\" target=\"_new\">W3Schools - CSS Legal Color Values</a>\n</details>\n<details>\n<summary>**What does the `background-color` property do?**</summary>\nThe `background-color` property determines the color of the background of an element.  You can read more about the property at <a href=\"http://www.w3schools.com/cssref/pr_background-color.asp\" target=\"_new\">W3Schools - CSS background-color Property</a>\n</details>\n<details>\n<summary>**What if an element inside the page has a different background color from the body?**</summary>\nYou can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.\n</details>\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n\n# Background Color\n\n* Find the code in the style sheet that is making the background of the entire page light blue.\n* Change the code to make the page a different color.\n* Try to change the background color of just the paragraphs.",
        "CSD U2 layout style body_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What does the `body` selector do?**</summary>\nBecause the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.\n</details>\n<details>\n<summary>**What does the `color` property do?**</summary>\nThe `color` property specifies the color of the text.  If thereâs no text, it wonât do anything. Read more at <a href=\"http://www.w3schools.com/cssref/pr_text_color.asp\"> W3Schools - CSS color Property</a>\n</details>\n<details>\n<summary>**What does the `text-align` property do?**</summary>\nThe `text-align` property aligns the text to the left, right, or center. You can read more at <a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3Schools - CSS text-align Property</a>\n</details>\n<details>\n<summary>**What does the `text-decoration` property do?**</summary>\nThe `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3Schools - CSS text-decoration Property</a>\n</details>\n<details>\n<summary>**What does the `font-family` property do?**</summary>\nThe `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href=\"http://www.w3schools.com/cssref/pr_font_font-family.asp\">W3chools - CSS font-family Property</a>\n</details>\n<details>\n<summary>**What does the `font-size` property do?**</summary>\nThe `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href=\"http://www.w3schools.com/cssref/pr_font_font-size.asp\">W3Schools - CSS font-size Property</a>\n</details>\n<details>\n<summary>**What is a stylesheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n\n# The Body Element\n\n* Find the `body` rule-set in the style sheet.\n* Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.\n* Try out some different properties to check your guesses.",
        "CSD U2 layout style body_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What does the `body` selector do?**</summary>\nBecause the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.\n</details>\n<details>\n<summary>**What does the `color` property do?**</summary>\nThe `color` property specifies the color of the text.  If thereâs no text, it wonât do anything. Read more at <a href=\"http://www.w3schools.com/cssref/pr_text_color.asp\" target=\"_new\"> W3Schools - CSS color Property</a>\n</details>\n<details>\n<summary>**What does the `text-align` property do?**</summary>\nThe `text-align` property aligns the text to the left, right, or center. You can read more at <a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\" target=\"_new\">W3Schools - CSS text-align Property</a>\n</details>\n<details>\n<summary>**What does the `text-decoration` property do?**</summary>\nThe `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\" target=\"_new\">W3Schools - CSS text-decoration Property</a>\n</details>\n<details>\n<summary>**What does the `font-family` property do?**</summary>\nThe `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href=\"http://www.w3schools.com/cssref/pr_font_font-family.asp\" target=\"_new\">W3chools - CSS font-family Property</a>\n</details>\n<details>\n<summary>**What does the `font-size` property do?**</summary>\nThe `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href=\"http://www.w3schools.com/cssref/pr_font_font-size.asp\" target=\"_new\">W3Schools - CSS font-size Property</a>\n</details>\n<details>\n<summary>**What is a stylesheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n\n# The Body Element\n\n* Find the `body` rule-set in the style sheet.\n* Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.\n* Try out some different properties to check your guesses.",
        "CSD U2 layout style border_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What colors can I use in CSS?**</summary>\nCSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools - CSS Legal Color Values</a>\n</details>\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the image borders:\n\n<pre>img {\n  border-color: saddlebrown;\n  border-width: 4px;\n  border-style: solid;\n  border-radius: 10px;\n}</pre>\n\n* `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.\n* `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.\n</details>\n<details>\n<summary>**What does the `border-style` property do?**</summary>\nThe `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_border-style.asp\">W3Schools - CSS border-style Property</a>\n</details>\n<details>\n<summary>**What does the `border-radius` property do?**</summary>\nThe `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/css3_pr_border-radius.asp\">W3Schools - CSS3 border-radius property</a>\n</details>\n<details>\n<summary>**What does the `float` property do?**</summary>\nThe `float` property makes an element \"float\", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\">W3Schools - CSS float Property</a>\n</details>\n</div>\n\n# Borders\n\n* Find the rules in the style sheet that set image borders color and width.\n* Change the color and width of your borders.\n* Try out some different border styles.\n  * Choose from `dotted`, `dashed`, `solid`, and `double`\n* Put a border on another type of page element, such as one of the headings or the paragraphs.",
        "CSD U2 layout style border_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What colors can I use in CSS?**</summary>\nCSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\" target=\"_new\">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\" target=\"_new\">W3Schools - CSS Legal Color Values</a>\n</details>\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the image borders:\n\n<pre>img {\n  border-color: saddlebrown;\n  border-width: 4px;\n  border-style: solid;\n  border-radius: 10px;\n}</pre>\n\n* `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.\n* `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.\n</details>\n<details>\n<summary>**What does the `border-style` property do?**</summary>\nThe `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_border-style.asp\" target=\"_new\">W3Schools - CSS border-style Property</a>\n</details>\n<details>\n<summary>**What does the `border-radius` property do?**</summary>\nThe `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/css3_pr_border-radius.asp\" target=\"_new\">W3Schools - CSS3 border-radius property</a>\n</details>\n<details>\n<summary>**What does the `float` property do?**</summary>\nThe `float` property makes an element \"float\", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\" target=\"_new\">W3Schools - CSS float Property</a>\n</details>\n</div>\n\n# Borders\n\n* Find the rules in the style sheet that set image borders color and width.\n* Change the color and width of your borders.\n* Try out some different border styles.\n  * Choose from `dotted`, `dashed`, `solid`, and `double`\n* Put a border on another type of page element, such as one of the headings or the paragraphs.",
        "CSD U2 layout style borderradius_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the image borders:\n\n<pre>img {\n  border-color: saddlebrown;\n  border-width: 4px;\n  border-style: solid;\n  border-radius: 10px;\n}</pre>\n\n* `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.\n* `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.\n</details>\n<details>\n<summary>**What does the `border-style` property do?**</summary>\nThe `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_border-style.asp\">W3Schools - CSS border-style Property</a>\n</details>\n<details>\n<summary>**What does the `border-radius` property do?**</summary>\nThe `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/css3_pr_border-radius.asp\">W3Schools - CSS3 border-radius property</a>\n</details>\n<details>\n<summary>**What does the `float` property do?**</summary>\nThe `float` property makes an element \"float\", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\">W3Schools - CSS float Property</a>\n</details>\n</div>\n\n# Border Radius\n\n* Look at the `border-radius` property inside your `img` rule-set\n* Discuss with your partner what you think the property does.\n* Try different values for border radius and decide which one you like the best.",
        "CSD U2 layout style borderradius_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the image borders:\n\n<pre>img {\n  border-color: saddlebrown;\n  border-width: 4px;\n  border-style: solid;\n  border-radius: 10px;\n}</pre>\n\n* `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.\n* `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.\n</details>\n<details>\n<summary>**What does the `border-style` property do?**</summary>\nThe `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_border-style.asp\" target=\"_new\">W3Schools - CSS border-style Property</a>\n</details>\n<details>\n<summary>**What does the `border-radius` property do?**</summary>\nThe `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/css3_pr_border-radius.asp\" target=\"_new\">W3Schools - CSS3 border-radius property</a>\n</details>\n<details>\n<summary>**What does the `float` property do?**</summary>\nThe `float` property makes an element \"float\", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\" target=\"_new\">W3Schools - CSS float Property</a>\n</details>\n</div>\n\n# Border Radius\n\n* Look at the `border-radius` property inside your `img` rule-set\n* Discuss with your partner what you think the property does.\n* Try different values for border radius and decide which one you like the best.",
        "CSD U2 layout style float_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the image float on the left hand side of the page:\n\n<pre>img {\n  float: left;\n}</pre>\n\n* `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.\n* `float: left;` is the rule that makes the image float to the left.\n</details>\n<details>\n<summary>**What does the `float` property do?**</summary>\nThe `float` property makes an element \"float\", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\">W3Schools - CSS float Property</a>\n</details>\n</div>\n\n# Float\n\n* Look at the `float` property inside your `img` rule-set\n* Discuss with your partner what you think the property does.\n* Change the value from `left` to `right`.",
        "CSD U2 layout style float_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the image float on the left hand side of the page:\n\n<pre>img {\n  float: left;\n}</pre>\n\n* `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.\n* `float: left;` is the rule that makes the image float to the left.\n</details>\n<details>\n<summary>**What does the `float` property do?**</summary>\nThe `float` property makes an element \"float\", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\" target=\"_new\">W3Schools - CSS float Property</a>\n</details>\n</div>\n\n# Float\n\n* Look at the `float` property inside your `img` rule-set\n* Discuss with your partner what you think the property does.\n* Change the value from `left` to `right`.",
        "CSD U2 layout style margin_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is putting extra space around the images:\n\n<pre>img {\n\tmargin: 10px;\n}</pre>\n\n* `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.\n* `margin: 10px;` is the rule that puts 10 pixels of space around the image.\n</details>\n<details>\n<summary>**What does the `margin` property do?**</summary>\nThe `margin` property determines how much space will be around the image.  Most of the time, you will define in the margin in pixels.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\">W3Schools - CSS margin Property</a>\n</details>\n<details>\n<summary>**What does `px` mean / What is a pixel?**</summary>\nPixel, which is abbreviated `px`, is how elements are measured in CSS.  Itâs the size of a single point of light on the screen.\n</details>\n</div>\n# Margin\n\nMargins specify how much space should be around an element.\n\n* Find the `margin` property in the `img` rule-set.\n* Change the margin to be larger, and discuss the effect with a partner.\n* Choose another element type and give it a margin, too.",
        "CSD U2 layout style margin_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is putting extra space around the images:\n\n<pre>img {\n\tmargin: 10px;\n}</pre>\n\n* `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.\n* `margin: 10px;` is the rule that puts 10 pixels of space around the image.\n</details>\n<details>\n<summary>**What does the `margin` property do?**</summary>\nThe `margin` property determines how much space will be around the image.  Most of the time, you will define in the margin in pixels.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\" target=\"_new\">W3Schools - CSS margin Property</a>\n</details>\n<details>\n<summary>**What does `px` mean / What is a pixel?**</summary>\nPixel, which is abbreviated `px`, is how elements are measured in CSS.  Itâs the size of a single point of light on the screen.\n</details>\n</div>\n# Margin\n\nMargins specify how much space should be around an element.\n\n* Find the `margin` property in the `img` rule-set.\n* Change the margin to be larger, and discuss the effect with a partner.\n* Choose another element type and give it a margin, too.",
        "CSD U2 layout style sample_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What does the `body` selector do?**</summary>\nBecause the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.\n</details>\n<details>\n<summary>**What does the `border-style` property do?**</summary>\nThe `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_border-style.asp\">W3Schools - CSS border-style Property</a>\n</details>\n<details>\n<summary>**What does the `border-radius` property do?**</summary>\nThe `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/css3_pr_border-radius.asp\">W3Schools - CSS3 border-radius property</a>\n</details>\n<details>\n<summary>**What does the `float` property do?**</summary>\nThe `float` property makes an element \"float\", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\">W3Schools - CSS float Property</a>\n</details>\n</div>\n\n# Layout and Style\n\n* Look through web page below for new styles.\n* Open the style sheet\n* With your partner, discuss which parts of the CSS code you think are making the page appear different.\n  * What makes the entire page blue?\n  * How are the images positioned to the left of all the other elements?\n  * What made the image corners rounded?\n\nIn the next few levels, you'll be changing and adding new styles on this page.",
        "CSD U2 layout style sample_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What does the `body` selector do?**</summary>\nBecause the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.\n</details>\n<details>\n<summary>**What does the `border-style` property do?**</summary>\nThe `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_border-style.asp\" target=\"_new\">W3Schools - CSS border-style Property</a>\n</details>\n<details>\n<summary>**What does the `border-radius` property do?**</summary>\nThe `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/css3_pr_border-radius.asp\" target=\"_new\">W3Schools - CSS3 border-radius property</a>\n</details>\n<details>\n<summary>**What does the `float` property do?**</summary>\nThe `float` property makes an element \"float\", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_class_float.asp\" target=\"_new\">W3Schools - CSS float Property</a>\n</details>\n</div>\n\n# Layout and Style\n\n* Look through web page below for new styles.\n* Open the style sheet\n* With your partner, discuss which parts of the CSS code you think are making the page appear different.\n  * What makes the entire page blue?\n  * How are the images positioned to the left of all the other elements?\n  * What made the image corners rounded?\n\nIn the next few levels, you'll be changing and adding new styles on this page.",
        "CSD U2 layout style width_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the image its current size:\n\n<pre>img {\n\twidth: 250px;\n}</pre>\n\n* `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.\n* `width: 250px` is the rule that makes the image 250 pixels wide.  It also changes the height so that the image does not stretch.\n</details>\n<details>\n<summary>**What does the `width` property do?**</summary>\nThe `width` property determines how wide the element will be.  Most of the time, you will define in the width in pixels, which makes the element take up an exact amount of space on the screen.  Defining the width will also change the height so that the image does not stretch, unless you have also defined the height.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\">W3Schools - CSS width Property</a>\n</details>\n<details>\n<summary>**What does the `height` property do?**</summary>\nThe `height` property determines how tall the element will be.  Most of the time, you will define in the height in pixels, which makes the element take up an exact amount of space on the screen.  Defining the height will also change the width so that the image does not stretch, unless you have also defined the width.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\">W3Schools - CSS width Property</a>\n</details>\n<details>\n<summary>**What does `px` mean / What is a pixel?**</summary>\nPixel, which is abbreviated `px`, is how elements are measured in CSS.  Itâs the size of a single point of light on the screen.\n</details>\n<details>\n<summary>**Why does using a width and height rule at the same time sometimes stretch out the image?**</summary>\nWhen the width of an images changes, the height must change by the same percentage, otherwise the image will stretch.  For example, if you double the width of an image, you must also double the height, or the image will be stretched horizonally.  When you only define the width or the height, the computer will automatically change the other property so that the image looks the same.\n</details>\n</div>\n\n# Width and Height\n\n* Find the property in the style sheet that controls the width of the images.\n* Change the width of the images to be larger or smaller.\n* Create a new rule with a `height` property to control the height of the images.\n* Use the `width` property in the `p` rule-set to change the width of your paragraphs.",
        "CSD U2 layout style width_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the image its current size:\n\n<pre>img {\n\twidth: 250px;\n}</pre>\n\n* `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.\n* `width: 250px` is the rule that makes the image 250 pixels wide.  It also changes the height so that the image does not stretch.\n</details>\n<details>\n<summary>**What does the `width` property do?**</summary>\nThe `width` property determines how wide the element will be.  Most of the time, you will define in the width in pixels, which makes the element take up an exact amount of space on the screen.  Defining the width will also change the height so that the image does not stretch, unless you have also defined the height.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\" target=\"_new\">W3Schools - CSS width Property</a>\n</details>\n<details>\n<summary>**What does the `height` property do?**</summary>\nThe `height` property determines how tall the element will be.  Most of the time, you will define in the height in pixels, which makes the element take up an exact amount of space on the screen.  Defining the height will also change the width so that the image does not stretch, unless you have also defined the width.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\" target=\"_new\">W3Schools - CSS height Property</a>\n</details>\n<details>\n<summary>**What does `px` mean / What is a pixel?**</summary>\nPixel, which is abbreviated `px`, is how elements are measured in CSS.  Itâs the size of a single point of light on the screen.\n</details>\n<details>\n<summary>**Why does using a width and height rule at the same time sometimes stretch out the image?**</summary>\nWhen the width of an images changes, the height must change by the same percentage, otherwise the image will stretch.  For example, if you double the width of an image, you must also double the height, or the image will be stretched horizonally.  When you only define the width or the height, the computer will automatically change the other property so that the image looks the same.\n</details>\n</div>\n\n# Width and Height\n\n* Find the property in the style sheet that controls the width of the images.\n* Change the width of the images to be larger or smaller.\n* Create a new rule with a `height` property to control the height of the images.\n* Use the `width` property in the `p` rule-set to change the width of your paragraphs.",
        "CSD U2 link demo_markdown_instruction": "# Making a Multi-page Site\n\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are hyperlinks?**</summary>\nHyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>\n\nFor example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>\n\n<pre>\n&lt;a href=âhouses.htmlâ&gt; Unique Houses &lt;/a&gt;\n</pre>\n\n</details>\n<details>\n<summary>**How do I add a hyperlink?**</summary>\nYou can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>\n\nFor example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>\n\n<pre>\n&lt;a href=âhouses.htmlâ&gt; Unique Houses &lt;/a&gt;\n</pre>\n\n</details>\n</div>\n\nA web site should include more than one web page, and they should connect to each other.   Here's an example of a project with multiple pages that are connected by hyperlinks (the blue underlined words that take you to another page when you click on them).\n\n# Do This\n* Use the inspector tool to see the code that creates the hyperlinks on the top of index.html.\n* Discuss with your partner how you think that code works.\n* Click on recipe.html in the files list on the left hand side.  Add a hyperlink to the top of this page that will take you back to index.html.",
        "CSD U2 link demo_2018_markdown_instruction": "# Making a Multi-page Site\n\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are hyperlinks?**</summary>\nHyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>\n\nFor example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>\n\n<pre>\n&lt;a href=âhouses.htmlâ&gt; Unique Houses &lt;/a&gt;\n</pre>\n\n</details>\n<details>\n<summary>**How do I add a hyperlink?**</summary>\nYou can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>\n\nFor example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>\n\n<pre>\n&lt;a href=âhouses.htmlâ&gt; Unique Houses &lt;/a&gt;\n</pre>\n\n</details>\n</div>\n\nA web site should include more than one web page, and they should connect to each other.   Here's an example of a project with multiple pages that are connected by hyperlinks (the blue underlined words that take you to another page when you click on them).\n\n# Do This\n* Use the inspector tool to see the code that creates the hyperlinks on the top of index.html.\n* Discuss with your partner how you think that code works.\n* Click on recipe.html in the files list on the left hand side.  Add a hyperlink to the top of this page that will take you back to index.html.",
        "CSD U2 lists intro_markdown_instruction": "# Lists\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are the two types of lists?**</summary>\n There are two types of lists in HTML, ordered and unordered lists.\n</details>\n\n<details>\n<summary>**What is an unordered list?**</summary>\nAn unordered list is just a set of bulleted items.\n<br /><br />\nAn unordered list element has the tag `<ul> </ul>`. This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list.\n</details>\n\n<details>\n<summary>**How do I make an unordered list?**</summary>\nMaking an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul> </ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.\n<br /><br />\nIt can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ul> </ul>` tags.\n</details>\n\n<details>\n<summary>**What is an ordered list?**</summary>\nAn ordered list is a set of bulleted items which are numbered.\n<br /><br />\nAn ordered list element has the tags `<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the ordered list.\n</details>\n\n<details>\n<summary>**How do I make an ordered list?**</summary>\nMaking an ordered list has two steps: making the list and adding the list items. To make the ordered list, write the ordered list tags `<ol> </ol>`. Next, add your list items **inside** the ordered list tags. To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.\n<br /><br/>\nIt can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ol> </ol>` tags.\n</details>\n</div>\n\nYou can also use HTML to make different types of lists on your web page.  This recipe includes two different types of lists, one ordered (with numbers) and one unordered (with bullets).\n\n#  Do This\n\n* Use the inspector tool to see the code that is making the two different kinds of lists.\n* Make sure you and your partner agree on what the different tags do.\n* Fix the code so that the second item in each list displays correctly",
        "CSD U2 lists intro_2018_markdown_instruction": "# Lists\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are the two types of lists?**</summary>\n There are two types of lists in HTML, ordered and unordered lists.\n</details>\n\n<details>\n<summary>**What is an unordered list?**</summary>\nAn unordered list is just a set of bulleted items.\n<br /><br />\nAn unordered list element has the tag `<ul> </ul>`. This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list.\n</details>\n\n<details>\n<summary>**How do I make an unordered list?**</summary>\nMaking an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul> </ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.\n<br /><br />\nIt can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ul> </ul>` tags.\n</details>\n\n<details>\n<summary>**What is an ordered list?**</summary>\nAn ordered list is a set of bulleted items which are numbered.\n<br /><br />\nAn ordered list element has the tags `<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the ordered list.\n</details>\n\n<details>\n<summary>**How do I make an ordered list?**</summary>\nMaking an ordered list has two steps: making the list and adding the list items. To make the ordered list, write the ordered list tags `<ol> </ol>`. Next, add your list items **inside** the ordered list tags. To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.\n<br /><br/>\nIt can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ol> </ol>` tags.\n</details>\n</div>\n\nYou can also use HTML to make different types of lists on your web page.  This recipe includes two different types of lists, one ordered (with numbers) and one unordered (with bullets).\n\n#  Do This\n\n* Use the inspector tool to see the code that is making the two different kinds of lists.\n* Make sure you and your partner agree on what the different tags do.\n* Fix the code so that the second item in each list displays correctly",
        "CSD U2 navigation_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are hyperlinks?**</summary>\nHyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>\n\nFor example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>\n\n<pre>\n&lt;a href=âhouses.htmlâ&gt; Unique Houses &lt;/a&gt;\n</pre>\n\n</details>\n<details>\n<summary>**How do I add a hyperlink?**</summary>\nYou can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>\n\nFor example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>\n\n<pre>\n&lt;a href=âhouses.htmlâ&gt; Unique Houses &lt;/a&gt;\n</pre>\n\n</details>\n</div>\n\n# Create a Navigation Bar\n\nHere's your project from before.  You'll be linking the two pages by creating a **navigation bar** at the top of the page.  Websites usually have the same navigation bar across all of their pages so you can get back and forth between things on the site.  You can see an example of a navigation bar on <a href=\"https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/\" target=\"_new\">this page</a>\n\n# Do This\n* In your home page (index.html), add two hyperlinks at the top of the page, one to your lists page, and one to the home page.\n  * *Even though it might seem strange to link a page to itself, it's less confusing if the navigation bar is exactly the same on every page.*\n* Copy the code for the navigation bar, then add it to the top of your lists page.\n* Test your links in the preview area by clicking on them.\n",
        "CSD U2 navigation_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are hyperlinks?**</summary>\nHyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>\n\nFor example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>\n\n<pre>\n&lt;a href=âhouses.htmlâ&gt; Unique Houses &lt;/a&gt;\n</pre>\n\n</details>\n<details>\n<summary>**How do I add a hyperlink?**</summary>\nYou can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>\n\nFor example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>\n\n<pre>\n&lt;a href=âhouses.htmlâ&gt; Unique Houses &lt;/a&gt;\n</pre>\n\n</details>\n</div>\n\n# Create a Navigation Bar\n\nHere's your project from before.  You'll be linking the two pages by creating a **navigation bar** at the top of the page.  Websites usually have the same navigation bar across all of their pages so you can get back and forth between things on the site.  You can see an example of a navigation bar on <a href=\"https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/\" target=\"_new\">this page</a>\n\n# Do This\n* In your home page (index.html), add two hyperlinks at the top of the page, one to your lists page, and one to the home page.\n  * *Even though it might seem strange to link a page to itself, it's less confusing if the navigation bar is exactly the same on every page.*\n* Copy the code for the navigation bar, then add it to the top of your lists page.\n* Test your links in the preview area by clicking on them.\n",
        "CSD U2 ordered list_markdown_instruction": "# Ordered Lists\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are the two types of lists?**</summary>\n There are two types of lists in HTML, ordered and unordered lists.\n</details>\n<details>\n<summary>**What is an ordered list?**</summary>\nAn ordered list is a set of bulleted items which are numbered.\n<br /><br />\nAn ordered list element has the tag `<ol>` . This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li>`;. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the ordered list (`<ol>`).\n\n</details>\n\n<details>\n<summary>**How do I make an ordered list?**</summary>\nMaking an ordered list has two steps: making the list and adding the list items.  To make the ordered list, write the ordered list tags `<ol></ol>`.  Next, add your list items **inside** the ordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.\n<br /><br />\nIt can be helpful to indent your `<li>` tags so it's clear they are contained in the `<ol>` tag.\n\n</details>\n\n<details>\n<summary>**Show me working code.**</summary>\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre> &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt; <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04 PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nThis page should include an ordered list, but it's missing the list tags.\n\n# Do This\n\n* Use the `<ol>` and `<li>` tags to structure this content into an ordered list that looks like the one below.\n\n*Hint: There will be NO NUMBERS in your code.* \n\n![](https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03 PM.png)",
        "CSD U2 ordered list_2018_markdown_instruction": "# Ordered Lists\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are the two types of lists?**</summary>\n There are two types of lists in HTML, ordered and unordered lists.\n</details>\n<details>\n<summary>**What is an ordered list?**</summary>\nAn ordered list is a set of bulleted items which are numbered.\n<br /><br />\nAn ordered list element has the tag `<ol>` . This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li>`;. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the ordered list (`<ol>`).\n\n</details>\n\n<details>\n<summary>**How do I make an ordered list?**</summary>\nMaking an ordered list has two steps: making the list and adding the list items.  To make the ordered list, write the ordered list tags `<ol></ol>`.  Next, add your list items **inside** the ordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.\n<br /><br />\nIt can be helpful to indent your `<li>` tags so it's clear they are contained in the `<ol>` tag.\n\n</details>\n\n<details>\n<summary>**Show me working code.**</summary>\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre> &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt; <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04 PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nThis page should include an ordered list, but it's missing the list tags.\n\n# Do This\n\n* Use the `<ol>` and `<li>` tags to structure this content into an ordered list that looks like the one below.\n\n*Hint: There will be NO NUMBERS in your code.* \n\n![](https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03 PM.png)",
        "CSD U2 style background_markdown_instruction": "<div style=\"float: right; height: 150px; width: 400px; overflow-y: scroll; margin-left: 20px;\">\n<details>\n<summary>**What is a CSS rule-set?**</summary>\nBlah blah answer\n</details>\n<details>\n<summary>**What is a selector?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**What is a declaration block?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**what is a property-value pair?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**How do I create a new rule-set?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n</div>\n# Text Alignment\n\n* Find the \"text-align\" property in the paragraph tag.\n* Change the paragraph alignment.\n  * Choose from \"left\", \"right\", and \"center\"",
        "CSD U2 text style bgcolor_markdown_instruction": "<div style=\"float: right; height: 150px; width: 400px; overflow-y: scroll; margin-left: 20px;\">\n<details>\n<summary>**What colors can I choose?**</summary>\nBlah blah answer\n</details>\n<details>\n<summary>**How does the code work?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nblah blah answer\n</details>\n</div>\n# Background Color\n\n* Find the code in \"style.css\" that is making the background of the entire page light blue.\n* Change the code to make the page a different color.\n* Try to change the background color of just the paragraphs.",
        "CSD U2 text style decoration_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that makes the `h1` elements underlined:\n\n<pre>h1 {\n  text-decoration: underline;\n}</pre>\n\n* `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.\n* `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.\n  * `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.\n  * `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.\n</details>\n<details>\n<summary>**What are the possible values for text decoration?**</summary>\nYou can choose between \"underline\", \"overline\", and \"line-through\".  You can read more about the text-decoration property at <a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3Schools - CSS text-decoration Property</a>\n</details>\n<details>\n<summary>**Why do I need all the punctuation?**</summary>\nThe punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.\n</details>\n<details>\n<summary>**What is a stylesheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n# Underlining\n\n* Find the code in the style sheet that makes the h1 tag underlined.\n* Change the text decoration and see which one you like.\n  * Choose from \"underline\", \"overline\", and \"line-through\"\n* Add a text decoration rule for the paragraph or h3 tag.",
        "CSD U2 text style decoration_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that makes the `h1` elements underlined:\n\n<pre>h1 {\n  text-decoration: underline;\n}</pre>\n\n* `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.\n* `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.\n  * `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.\n  * `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.\n</details>\n<details>\n<summary>**What are the possible values for text decoration?**</summary>\nYou can choose between \"underline\", \"overline\", and \"line-through\".  You can read more about the text-decoration property at <a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\" target=\"_new\">W3Schools - CSS text-decoration Property</a>\n</details>\n<details>\n<summary>**Why do I need all the punctuation?**</summary>\nThe punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.\n</details>\n<details>\n<summary>**What is a stylesheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n# Underlining\n\n* Find the code in the style sheet that makes the h1 tag underlined.\n* Change the text decoration and see which one you like.\n  * Choose from \"underline\", \"overline\", and \"line-through\"\n* Add a text decoration rule for the paragraph or h3 tag.",
        "CSD U2 text style font family_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is controlling the paragraph font:\n\n<pre>p {\n  font-family: cursive;\n}</pre>\n\n* `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.\n* `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.\n  * `font-family` is the _property_.  It explains what the rule is about, in this case the font.\n  * `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.\n</details>\n<details>\n<summary>**What are the possible values for font family?**</summary>\nYou can choose between \"serif\", \"sans-serif\", \"cursive\", \"fantasy\", and \"monospace\".  You can also try more specific fonts as described in <a href=\"http://www.w3schools.com/cssref/css_websafe_fonts.asp\">W3Schools - CSS Web Safe Font Combinations</a>\n</details>\n<details>\n<summary>**Why do I need all the punctuation?**</summary>\nThe punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.\n</details>\n<details>\n<summary>**What is a stylesheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n# Changing the Font\n\n* Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.\n* Change the font family and choose which one you like the best.\n  * Choose from \"serif\", \"sans-serif\", \"cursive\", \"fantasy\", and \"monospace\"\n* Add a font family rule for the h1 or h3 tags.",
        "CSD U2 text style font family_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is controlling the paragraph font:\n\n<pre>p {\n  font-family: cursive;\n}</pre>\n\n* `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.\n* `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.\n  * `font-family` is the _property_.  It explains what the rule is about, in this case the font.\n  * `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.\n</details>\n<details>\n<summary>**What are the possible values for font family?**</summary>\nYou can choose between \"serif\", \"sans-serif\", \"cursive\", \"fantasy\", and \"monospace\".  You can also try more specific fonts as described in <a href=\"http://www.w3schools.com/cssref/css_websafe_fonts.asp\" target=\"_new\">W3Schools - CSS Web Safe Font Combinations</a>\n</details>\n<details>\n<summary>**Why do I need all the punctuation?**</summary>\nThe punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.\n</details>\n<details>\n<summary>**What is a stylesheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n# Changing the Font\n\n* Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.\n* Change the font family and choose which one you like the best.\n  * Choose from \"serif\", \"sans-serif\", \"cursive\", \"fantasy\", and \"monospace\"\n* Add a font family rule for the h1 or h3 tags.",
        "CSD U2 text style h1_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What colors can I use in CSS?**</summary>\nCSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools - CSS Legal Color Values</a>\n</details><details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the `h1` heading red:\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n* `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.\n* `color: red;` is the rule that makes the text inside the `h1` tags red.\n  * `color` is the _property_.  It explains what the rule is about, in this case the text color.\n  * `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.\n</details>\n<details>\n<summary>**Why do I need all the punctuation?**</summary>\nThe punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.\n</details>\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n}\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n# CSS and Text Color\n\nThis HTML file uses a style sheet (\"style.css\") to give the page a particular style.  The style sheet contains information about what each of the HTML elements should look like.\n\n* Find the code in the style sheet (click on \"style.css\" in the files list) that is making the h1 heading red.\n* Change the code for the color of the h1 heading from `red` to a different color.",
        "CSD U2 text style h1_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What colors can I use in CSS?**</summary>\nCSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\" target=\"_new\">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\" target=\"_new\">W3Schools - CSS Legal Color Values</a>\n</details><details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the `h1` heading red:\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n* `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.\n* `color: red;` is the rule that makes the text inside the `h1` tags red.\n  * `color` is the _property_.  It explains what the rule is about, in this case the text color.\n  * `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.\n</details>\n<details>\n<summary>**Why do I need all the punctuation?**</summary>\nThe punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.\n</details>\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n}\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n# CSS and Text Color\n\nThis HTML file uses a style sheet (\"style.css\") to give the page a particular style.  The style sheet contains information about what each of the HTML elements should look like.\n\n* Find the code in the style sheet (click on \"style.css\" in the files list) that is making the h1 heading red.\n* Change the code for the color of the h1 heading from `red` to a different color.",
        "CSD U2 text style h3_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What colors can I use in CSS?**</summary>\nCSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools - CSS Legal Color Values</a>\n</details>\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the `h1` header red:\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n* `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.\n* `color: red;` is the rule that makes the text inside the `h1` tags red.\n  * `color` is the _property_.  It explains what the rule is about, in this case the text color.\n  * `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.\n</details>\n<details>\n<summary>**How do I make a new rule-set?**</summary>\nTo make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n\n* `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.\n* `color: red;` is the rule that makes the text inside the `h1` tags red.\n  * `color` is the _property_.  It explains what the rule is about, in this case the text color.\n  * `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.\n</details>\n<details>\n<summary>**Why do I need all the punctuation?**</summary>\nThe punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.\n</details>\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n# Making a new CSS rule-set\n\nThe block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.\n\n* Find the CSS rule-set in the style sheet that determines the styles for the h1 tag.\n* Using the same pattern, write a new CSS rule-set that will determine the style for the h3 tag.\n* Add code to set a different color for the h3 tags.",
        "CSD U2 text style h3_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What colors can I use in CSS?**</summary>\nCSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools - CSS Legal Color Values</a>\n</details>\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is making the `h1` header red:\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n* `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.\n* `color: red;` is the rule that makes the text inside the `h1` tags red.\n  * `color` is the _property_.  It explains what the rule is about, in this case the text color.\n  * `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.\n</details>\n<details>\n<summary>**How do I make a new rule-set?**</summary>\nTo make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n\n* `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.\n* `color: red;` is the rule that makes the text inside the `h1` tags red.\n  * `color` is the _property_.  It explains what the rule is about, in this case the text color.\n  * `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.\n</details>\n<details>\n<summary>**Why do I need all the punctuation?**</summary>\nThe punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.\n</details>\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n# Making a new CSS rule-set\n\nThe block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.\n\n* Find the CSS rule-set in the style sheet that determines the styles for the h1 tag.\n* Using the same pattern, write a new CSS rule-set that will determine the style for the h3 tag.\n* Add code to set a different color for the h3 tags.",
        "CSD U2 text style sample_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n<details>\n<summary>**Why is the \"style.css\" file in a different language?**</summary>\nWeb developers intentionally separate content and style to make their code easier to maintain. HTML is the language used to structure the content of a web page. CSS is a language that adds style to a web page.  \n</details>\n<details>\n<summary>**What does `px` mean / What is a pixel?**</summary>\nPixel, which is abbreviated `px`, is how elements are measured in CSS.  Itâs the size of a single point of light on the screen.\n</details>\n<details>\n<summary>**What does the `text-decoration` property do?**</summary>\nThe `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3Schools - CSS text-decoration Property</a>\n</details>\n<details>\n<summary>**What does the `text-align` property do?**</summary>\nThe `text-align` property aligns the text to the left, right, or center. You can read more at <a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3Schools - CSS text-align Property</a>\n</details>\n<details>\n<summary>**What does the `font-family` property do?**</summary>\nThe `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href=\"http://www.w3schools.com/cssref/pr_font_font-family.asp\">W3chools - CSS font-family Property</a>\n</details>\n</div>\n# CSS and Style sheets\n\n* Look at the web page below and find some different types of text stylings that you don't know how to code yet.\n* Click on the style sheet (\"style.css\" in the files area) and look at the code inside the file.\n* With your partner, discuss which parts of the code you think are making the text appear differently than before.\n\nIn the next few lessons, you'll be changing and adding new styles on this page.\n\n",
        "CSD U2 text style size_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is controlling the paragraph text size:\n\n<pre>p {\n  font-size: 14px;\n}</pre>\n\n* `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.\n* `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.\n  * `font-size` is the _property_.  It explains what the rule is about, in this case the text size.\n  * `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.\n</details>\n<details>\n<summary>**What does `px` mean / What is a pixel?**</summary>\nPixel, which is abbreviated `px`, is how elements are measured in CSS.  Itâs the size of a single point of light on the screen.\n</details>\n<details>\n<summary>**Why do I need all the punctuation?**</summary>\nThe punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.\n</details>\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n\n# Changing text size\n\nYou can control other things besides colors by using other properties.\n\n* Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.\n* Change the text size of the paragraphs to be bigger.\n* Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.",
        "CSD U2 text style size_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is controlling the paragraph text size:\n\n<pre>p {\n  font-size: 14px;\n}</pre>\n\n* `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.\n* `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.\n  * `font-size` is the _property_.  It explains what the rule is about, in this case the text size.\n  * `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.\n</details>\n<details>\n<summary>**What does `px` mean / What is a pixel?**</summary>\nPixel, which is abbreviated `px`, is how elements are measured in CSS.  Itâs the size of a single point of light on the screen.\n</details>\n<details>\n<summary>**Why do I need all the punctuation?**</summary>\nThe punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.\n</details>\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</div>\n\n# Changing text size\n\nYou can control other things besides colors by using other properties.\n\n* Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.\n* Change the text size of the paragraphs to be bigger.\n* Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.",
        "CSD U2 text style text align_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is controlling the paragraph text alignment:\n\n<pre>p {\n  text-align: left;\n}</pre>\n\n* `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.\n* `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.\n  * `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.\n  * `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.\n</details>\n<details>\n<summary>**Why doesn't `text-align: left;` do anything?**</summary>\nMost properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.\n</details>\n<details>\n<summary>**What are the possible values for text align?**</summary>\nYou can choose between \"left\", \"right\", and \"center\".  You can read more about the text-align property at <a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3Schools - CSS text-align Property</a>\n</details>\n<details>\n<summary>**Why do I need all the punctuation?**</summary>\nThe punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.\n</details>\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</details>\n</div>\n# Text Alignment\n\nThe `text-align` property sets the horizontal (side to side) position of the text within each line.\n\n* Find the \"text-align\" property in the paragraph tag.\n* Change the paragraph alignment.\n  * Choose from \"left\", \"right\", and \"center\"",
        "CSD U2 text style text align_2018_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**How does the code work?**</summary>\nHere is the code that is controlling the paragraph text alignment:\n\n<pre>p {\n  text-align: left;\n}</pre>\n\n* `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.\n* `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.\n  * `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.\n  * `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.\n</details>\n<details>\n<summary>**Why doesn't `text-align: left;` do anything?**</summary>\nMost properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.\n</details>\n<details>\n<summary>**What are the possible values for text align?**</summary>\nYou can choose between \"left\", \"right\", and \"center\".  You can read more about the text-align property at <a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\" target=\"_new\">W3Schools - CSS text-align Property</a>\n</details>\n<details>\n<summary>**Why do I need all the punctuation?**</summary>\nThe punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.\n</details>\n<details>\n<summary>**What is a style sheet?**</summary>\nA style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.\n</details>\n<details>\n<summary>**What is CSS?**</summary>\nCSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.\n\n\nHereâs an example of a rule-set that makes the text in an `h2` tag blue and cursive:\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\nIn this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.\n</details>\n</details>\n</div>\n# Text Alignment\n\nThe `text-align` property sets the horizontal (side to side) position of the text within each line.\n\n* Find the \"text-align\" property in the paragraph tag.\n* Change the paragraph alignment.\n  * Choose from \"left\", \"right\", and \"center\"",
        "CSD U2 unordered list_markdown_instruction": "# Unordered Lists\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are the two types of lists?**</summary>\n There are two types of lists in HTML, ordered and unordered lists.\n</details>\n<details>\n<summary>**What is an unordered list?**</summary>\nAn unordered list is just a set of bulleted items.\n<br /><br />An unordered list element has the tag &lt;ul&gt; . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element &lt;li&gt;. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list (&lt;ul&gt;).\n</details>\n\n<details>\n<summary>**How do I make an unordered list?**</summary>\nMaking an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul></ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.\n<br /><br />\nIt can be helpful to indent your &lt;li&gt; tags so it's clear they are contained in the &lt;ul&gt; tag.\n\n</details>\n\n<details>\n<summary>**Show me working code.**</summary>\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nThis page should have an unordered list, but it's missing the list tags.\n\n# Do This\n\n* Use the `<ul>` and `<li>` tags to structure the content into an unordered list like the picture below.\n\n![](https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png)",
        "CSD U2 unordered list_2018_markdown_instruction": "# Unordered Lists\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>**What are the two types of lists?**</summary>\n There are two types of lists in HTML, ordered and unordered lists.\n</details>\n<details>\n<summary>**What is an unordered list?**</summary>\nAn unordered list is just a set of bulleted items.\n<br /><br />An unordered list element has the tag &lt;ul&gt; . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element &lt;li&gt;. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list (&lt;ul&gt;).\n</details>\n\n<details>\n<summary>**How do I make an unordered list?**</summary>\nMaking an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul></ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.\n<br /><br />\nIt can be helpful to indent your &lt;li&gt; tags so it's clear they are contained in the &lt;ul&gt; tag.\n\n</details>\n\n<details>\n<summary>**Show me working code.**</summary>\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nThis page should have an unordered list, but it's missing the list tags.\n\n# Do This\n\n* Use the `<ul>` and `<li>` tags to structure the content into an unordered list like the picture below.\n\n![](https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png)",
        "CSD U2 upload image_markdown_instruction": "# Upload a new image\n<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**How do I add images?**</summary>\nThe `<img>` tag allows you to show images on your web page. <br><br>\n\nExample:\n<pre>&lt;img src=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which file to use, extra information, called an **attribute**, is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesnât load or for people who have trouble with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **void element** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>**What is a void tag?**</summary>\nAn `<img>` tag is an example of a  **void element** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag. Void tags do not need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**Why does an image tag not have a closing tag?**</summary>\nAn image tag is a void tag and void tags do not need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**What is an attribute?**</summary>\nAttributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag. \n\nFor example &lt;img&gt; tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.\n</details>\n</div>\n\nYou can now add your own images to your personal website.  If you don't have the images that you want on your computer, you can search for them here and download them.\n<form action=\"https://www.google.com/search\" method=\"GET\" target=\"_blank\">\n<input type=hidden name=site value=\"imghp\" />\n<input type=hidden name=tbm value=isch />\n<input type=hidden name=tbs value=\"sur:fmc\" />\n<input name=q />\n<input type=submit value=\"search\">\n<br />\n</form>\n\nOnce you have your images, click ![](https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49 PM.png) and upload the image from your computer into your project.\n\n# Do This\n* Upload at least two images into your project\n* Use the `<img>` tag to display the images in your website.",
        "CSD U2 upload images_markdown_instruction": "# Upload Images\n\nNext, you'll need to upload all of your images into your project.\n\n# Do This\n* Download all the images you want onto your computer. Visit <a href=\"/s/csd2/stage/7/puzzle/5\" target=\"_new\">Lesson 7 Level 5</a> for help if you need it.\n  * Make sure you have the right to use these images.\n  * Write down all of the attribution information that you need.\n  * Upload all of the images into your project.  Visit <a href=\"/s/csd2/stage/7/puzzle/5\" target=\"_new\">Lesson 7 Level 5</a> if you've forgotten how.\n",
        "CSD U2 upload images_2018_markdown_instruction": "# Upload Images\n\nNext, you'll need to upload all of your images into your project.\n\n# Do This\n* Download all the images you want onto your computer. Visit <a href=\"/s/csd2/stage/7/puzzle/5\" target=\"_new\">Lesson 7 Level 5</a> for help if you need it.\n  * Make sure you have the right to use these images.\n  * Write down all of the attribution information that you need.\n  * Upload all of the images into your project.  Visit <a href=\"/s/csd2/stage/7/puzzle/5\" target=\"_new\">Lesson 7 Level 5</a> if you've forgotten how.\n",
        "CSD U3 - complex - compound conditionals_markdown_instruction": "# Possible Solution #2 - Compound Conditionals\n\nAnother way that you might have phrased the challenge problem is:\n\n\tIf the up arrow was pressed AND the sprite hasn't gone off the top of the screen, move up.\n\nThis structure of asking both questions at the same time is accomplished using a **compound conditional**. Compound conditionals use the boolean operators `AND` and `OR` to ask multiple questions at once. `AND` only returns true if _both_ of the questions it's asking are true, while `OR` will return true if _either_ of its questions are true. In JavaScript (and many other languages) `AND` is represented by two ampersands (`&&`) while `OR` is represented by two pipes (`||`) - their blocks look like this: \n\n![](https://images.code.org/c7ab68cb4091472f05d7c862a52730c6-image-1466785066210.48.02.png)\n\nWe could pseudocode this solution as \n\n\tIf the up arrow was pressed AND sprite.y > 0\t// Both Questions\n    \tmove up\t\t\t\t\t\t\t\t\t // Only runs if both questions were true\n\n\n# Do This\n\nHere's the same code from the challenge again, but this time the up arrow uses a compound conditional. \n\n* Use the same compound conditional pattern on the other three arrow keys.\n",
        "CSD U3 - complex - nested conditional_markdown_instruction": "# Possible Solution #1 - Nested Conditionals\n\nThe way you phrase the previous challenge says a lot about how you might approach solving it. For example, you might have phrased moving up and staying on screen as:\n\n\tIf the up arrow was pressed then check if the sprite hasn't gone off the top of the screen and move up.\n\nThis structure of first asking one question, and then asking a second question if the first was true is accomplished using a **nested if statement**. Nested if statements put one if statement inside another if statement. You can think of this as asking a question and then based on the answer asking another question before making a decision. We could pseudocode the previous phrase as:\n\n\tIf the up arrow was pressed\t// First Question\n    \tIf my y > 0\t\t\t\t// Second Question\n        \tmove up\t\t\t\t// Only runs if both questions were true\n\n\n# Do This\n\nHere's the same code from the challenge, with the up arrow using a nested conditional. \n\n* Use the same nested conditional pattern on the other 3 arrow keys.\n",
        "CSD U3 - conditionals - first conditional 2-2018_markdown_instruction": "<img src=\"https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif\" style=\"width:200px;float:right\">\n# Visible\n\nSometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.\n\n# Do This\nMake the balloon pop when it hits the edge of the game area!\n\n* Add a conditional that checks to see whether the balloon has hit the edge.\n\t* Use a watcher on `balloon.scale` to help you out.\n* Create a pop sprite which uses the \"pop\" visual in the animation tab.\n* Use the `visible` property to keep the \"pop\" sprite hidden at the beginning.\n* Inside the `if` add two statements.\n\t* One that sets the `visible` property to hide the balloon sprite.\n    * One that sets the `visible` property to show the pop sprite.",
        "CSD U3 - conditionals - first conditional 2_markdown_instruction": "<img src=\"https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif\" style=\"width:200px;float:right\">\n# Visible\n\nNow that you have conditionals and images, sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.\n\n# Do This\nMake the balloon pop when it hits the edge of the game area!\n\n* Add an `if` statement that checks to see if the balloon has hit the edge.\n\t* Use a watcher on `balloon.scale` to help you out.\n* Create a pop sprite which uses the \"pop\" visual in the animation tab.\n* Set the pop's `visible` property to `false` to start.\n* Inside the `if` add two statements.\n\t* One that sets the `visible` property to hide the balloon sprite.\n    * One that sets the `visible` property to show the pop sprite.",
        "CSD U3 - conditionals - first conditional 2_2018_markdown_instruction": "<img src=\"https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif\" style=\"width:200px;float:right\">\n# Visible\n\nSometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.\n\n# Do This\nMake the balloon pop when it hits the edge of the game area!\n\n* Add a conditional that checks to see whether the balloon has hit the edge.\n\t* Use a watcher on `balloon.scale` to help you out.\n* Create a pop sprite which uses the \"pop\" visual in the animation tab.\n* Use the `visible` property to keep the \"pop\" sprite hidden at the beginning.\n* Inside the `if` add two statements.\n\t* One that sets the `visible` property to hide the balloon sprite.\n    * One that sets the `visible` property to show the pop sprite.\n",
        "CSD U3 - conditionals - first conditional_markdown_instruction": "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03 PM.png\" style=\"float:right;width:100px\">\n# If Statement\n\nThe Boolean expressions you used earlier allow us to ask questions, but in order to _respond to those questions_, we need to use an `if` statement.\n\n`if` statements usually go inside your draw loop because we want to check them each time the loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded here for you.\n\n* Add an `if` statement after you update the position of the race car.\n* Move the Boolean expression from the console.log statement to the condition of the if statement.\n* Inside the `if` statement add a statement to draw text on the screen to say \"Winner\".\n",
        "CSD U3 - conditionals - first conditional_2018_markdown_instruction": "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03 PM.png\" style=\"float:right;width:100px\">\n# If Statement\n\nThe Boolean expressions you used earlier allow us to ask questions, but in order to _respond to those questions_, we need to use an `if` statement.\n\n`if` statements usually go inside your draw loop because we want to check them each time the loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded here for you.\n\n* Add an `if` statement after you update the position of the race car.\n* Move the Boolean expression from the console.log statement to the condition of the if statement.\n* Inside the `if` statement add a statement to draw text on the screen to say \"Winner\".\n",
        "CSD U3 AnimationsMulti defender enemies touch cake sprite2_markdown_instruction": "# Touching the Cake: Second Ladybug\n\nYour first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.\n\n# Do This\n\nInside the `enemiesTouchCake` function you should have written code that resets `enemy1`.\n\n* Copy the entire if-statement you wrote in the last level (Ctrl-C).\n* Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).\n* Change the name of the sprite in that code from `enemy1` to `enemy2`.\n  \nTest your code. Now both bugs should reset when they touch the cake.",
        "CSD U3 AnimationsMulti defender enemies touch cake sprite2_2018_markdown_instruction": "# Touching the Cake: Second Ladybug\n\nYour first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.\n\n# Do This\n\nInside the `enemiesTouchCake` function you should have written code that resets `enemy1`.\n\n* Copy the entire if-statement you wrote in the last level (Ctrl-C).\n* Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).\n* Change the name of the sprite in that code from `enemy1` to `enemy2`.\n  \nTest your code. Now both bugs should reset when they touch the cake.",
        "CSD U3 AnimationsMulti defender enemies touch cake_markdown_instruction": "# Touching the Cake\n\nIf the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.\n\n# Do This\n\nInside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.\n\n* Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.\n* Inside your `if` block place code that:\n  * sets enemy1's x position back to 0.\n  * sets enemy1's y position to a random number between 150 and 250.\n  * uses the counter pattern to decrease the score by 2.\n\n(_Hint: You can reuse some code you already wrote_)\n\nTest your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.",
        "CSD U3 AnimationsMulti defender enemies touch cake_2018_markdown_instruction": "# Touching the Cake\n\nIf the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.\n\n# Do This\n\nInside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.\n\n* Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.\n* Inside your `if` block place code that:\n  * sets enemy1's x position back to 0.\n  * sets enemy1's y position to a random number between 150 and 250.\n  * uses the counter pattern to decrease the score by 2.\n\n(_Hint: You can reuse some code you already wrote_)\n\nTest your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.",
        "CSD U3 AnimationsMulti defender touch water_markdown_instruction": "# Touching the Water\n\nThe last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.\n\n# Do This\n\nFor this level you'll be writing code inside the `enemiesTouchWater` function.\n\n* Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:\n    * use your `setEnemy1` function to reset the sprite.\n    * add 1 to the score.\n* Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:\n\t* use your `setEnemy1` function to reset the sprite.\n    * add 1 to the score.\n* Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.\n* Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.",
        "CSD U3 AnimationsMulti defender touch water_2018_markdown_instruction": "# Touching the Water\n\nThe last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.\n\n# Do This\n\nFor this level you'll be writing code inside the `enemiesTouchWater` function.\n\n* Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:\n    * use your `setEnemy1` function to reset the sprite.\n    * add 1 to the score.\n* Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:\n\t* use your `setEnemy1` function to reset the sprite.\n    * add 1 to the score.\n* Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.\n* Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.",
        "CSD U3 Boolean Modify_markdown_instruction": "# Boolean Expressions\n\nThe simplest Boolean expressions are questions that the computer can answer with true or false. These expressions are made using **comparison operators**, as shown below.\n\n|Comparison Operator | Boolean Expression |  Meaning |\n|:---:|:---:|:---:|\n| <img src=\"https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png\" style=\"width: 100px\"> | `1 < 9` | Is 1 less than 9? | \n| <img src=\"https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png\" style=\"width: 100px\"> | `1 > 9` | Is 1 greater than 9 ? |  \n| <img src=\"https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png\" style=\"width: 100px\">| `1 == 9` | Is 1 equal to 9?| \n<br>\n**Note:** If you saw the statement 3 < 2 in math class, you'd think something was terribly wrong, but this is not math class.  In computer science, the comparison operators **ask a question** that the computer will answer with `true` or `false`. So you can read 3 < 2 as **\"Is 3 less than 2?\"** The answer in this case is no, or `false`.  \n\nAnother way to say this is that the Boolean expression `3 < 2` **evaluates** to `false`.\n\n# Do This\nCan you modify the values of the sprite properties so that each of the Boolean expressions evaluates to `true`?\n\n- Read through the entire program to see how `sprite1` and `sprite2` are being created and which properties are compared.\n- For each of the Boolean expressions, identify the sprite properties being compared.\n- Change the code _in the first **11** lines only_ so that each of the `console.log()` statements print `true`.",
        "CSD U3 Boolean Modify_2018_markdown_instruction": "# Boolean Expressions\n\nThe simplest Boolean expressions are questions that the computer can answer with true or false. These expressions are made using **comparison operators**, as shown below.\n\n|Comparison Operator | Boolean Expression |  Meaning |\n|:---:|:---:|:---:|\n| <img src=\"https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png\" style=\"width: 100px\"> | `1 < 9` | Is 1 less than 9? | \n| <img src=\"https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png\" style=\"width: 100px\"> | `1 > 9` | Is 1 greater than 9 ? |  \n| <img src=\"https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png\" style=\"width: 100px\">| `1 == 9` | Is 1 equal to 9?| \n<br>\n**Note:** If you saw the statement 3 < 2 in math class, you'd think something was terribly wrong, but this is not math class.  In computer science, the comparison operators **ask a question** that the computer will answer with `true` or `false`. So you can read 3 < 2 as **\"Is 3 less than 2?\"** The answer in this case is no, or `false`.  \n\nAnother way to say this is that the Boolean expression `3 < 2` **evaluates** to `false`.\n\n# Do This\nCan you modify the values of the sprite properties so that each of the Boolean expressions evaluates to `true`?\n\n- Read through the entire program to see how `sprite1` and `sprite2` are being created and which properties are compared.\n- For each of the Boolean expressions, identify the sprite properties being compared.\n- Change the code _in the first **11** lines only_ so that each of the `console.log()` statements print `true`.",
        "CSD U3 Compound Nested Examples_markdown_instruction": "# Multiple Paths to the Same Outcome\n\nYou may have seen several different approaches to solving the previous challenge - one of the beatiful things about programming is that it is as much about personal expression as it is about problem solving. You could have 10 people attempt to create the same program, and each would be unique and reflective of the person who programmed it!\n\nThere are two primary approaches to checking for multiple conditions:\n\n### Nesting Conditionals\n\nIf you think about asking one question first, and then asking the second question only if the first was true, you could nest your conditionals, like so:\n\n```javascript\nif (keyDown('up') {\n  if (sprite.y > 0) {\n    sprite.y = sprite.y - 1;\n  }\n}\n```\n\n### Compound Booleans\n\nIf you think about asking if both the first and second question are true at the same time, you could use `&&` (and) to combine booleans, like so:\n\n```javascript\nif (keyDown('up') && sprite.y < 0) {\n\tsprite.y = sprite.y - 1;\n}\n```\n\n# Do This\n\nThis program uses a nested conditional to check the up arrow and a compound boolean to check the down arrow. Use one (or both) techniques to check the left and right arrows as well.",
        "CSD U3 Conditional Predict_markdown_instruction": "# Prediction\n\nIn this program, the animation has different reactions when the user presses different keys. One reaction is a new kind of behavior you haven't seen before. Look at the following inputs and match them to their outputs. Once you have made your prediction you will be able to test it out.\n\n| Input  |\n| ------------- | \n| Press the _space_ bar  | \n| Press the _w_ key  | \n| Press the _j_ key |\n| Press the _j_ and _k_ keys | \n| Press the _k_ key |\n\n\n| Output |\n| ------------------------- |\n| blue_sprite rotates clockwise  |\n| red_sprite moves up and blue_sprite moves down  |\n| The sprites don't change |\n| red_sprite rotates counter clockwise  |\n| red_sprite gets bigger and blue_sprite gets smaller  |\n",
        "CSD U3 Conditionals Apple 2-2018_markdown_instruction": "# Changing Fruit\n\nNow that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.\n\n# Do This\n\nUse a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to \"pear\".\n\n_Challenge: Can you also make the fruit stop growing once it turns into a pear?_",
        "CSD U3 Conditionals Apple 2_markdown_instruction": "# Turning Red\n\nNow that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2, you turn it red once it happens.\n\n# Do This\n\nUse a conditional in the draw loop to check whether `apple.scale` is greater than 2 - if it is, set the apples new animation to \"apple_red\".\n\n_Challenge: Can you also make the apple stop growing once it turns red?_",
        "CSD U3 Conditionals Apple 2_2018_markdown_instruction": "# Changing Fruit\n\nNow that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.\n\n# Do This\n\nUse a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to \"pear\".\n\n_Challenge: Can you also make the fruit stop growing once it turns into a pear?_",
        "CSD U3 Counters counter colors_markdown_instruction": "# Counters in Colors\n\nThe counter pattern you've been using is incredibly useful for changing many different aspects of your images, not just the position of shapes. **Anything that normally would be drawn with a number can easily be animated with a counter variable.**\n\n# Do This\n\nThe goal of this program is to use two variables as counters to **transition a circle's color slowly from blue to red**.\n\n* **Run the program** to see what happens.\n\t* The `red` value **already counts up by 1**\n\t* The `blue` value **doesn't change** and so the circle becomes purple, not red.\n* Use what you know about counters to **add code that will make the circle transition smoothly to red**\n* **Note:** When the `color` command sees a value outside the range of 0 - 255 it just rounds. For example, 300 becomes 255 and -100 becomes 0.",
        "CSD U3 Counters counter square movement_markdown_instruction": "# Animating with Counters\n\nThe counter pattern can be used to increase the value of a variable each time the draw loop runs. You can use this to create smooth motion in your programs. You're going to try out a few ways of using this.\n\n# Do This\n\nThis program uses the counter pattern with a variable called `xPos`.\n\n* **Read the program** and make a prediction of how it will run.\n* **Run the program** to check your prediction\n* **Change the code** so that `xPos` changes by different amounts each draw loop. For example instead of `xPos = xPos + 1` you could try:\n\t* `xPos = xPos + 2`\n    * `xPos = xPos + 5`\n    * `xPos = xPos + 0.1`",
        "CSD U3 Counters counters sunset_markdown_instruction": "# Animate a Sunset\n\nYou now know a little bit about programming with variables. You've seen that they can **store a value to use many times in a program**. You've seen how the **counter pattern can allow you to perform smooth animations**. It's now time to put everything you've learned together.\n\n<img src = \"https://images.code.org/d0a1386297fae9f21fc046da62b13248-image-1462997082538.gif\" style=\"float: right; height: 200px\">\n# Do This\n\nThis program is designed to **animate a sunset**. Some starter code is provided that **creates all the counter variables you'll need to run your animation**. You need to decide how to use them to animate this image.\n\n* **Run the program to see how it works**\n* **Add code** that will:\n\t* Make the sun go down\n    * Change the color of the sky from blue to red\n    * Make the cloud go across the screen\n    \n<details><Summary>Need help?</Summary>\n<ul>\n<li>For help animating the sun go check out level 10</li>\n<li>For help animating the sky go check out level 12</li>\n<li>For help animating the cloud go check out level 13</li>\n</ul>\n\n</details>",
        "CSD U3 Counters sunset template_markdown_instruction": "# Animate a Sunset\n\nYou now know a little bit about how **expressions can be used to create variables that count** and you've used these in some simple programs. Try using counter variables to animate a more complex scene.\n\n# Do This\n\nThis program is designed to **animate a sunset**. Some starter code is provided but you'll need to fill in the rest.\n\n* **Run the program to see how it works**\n* **Add code** that will:\n\t* Make the sun go down\n    * Make the cloud go across the screen\n    * Change the color of the sky from blue to red\n    \n<details><Summary>Want a hint?</Summary>\n<ul>\n<li>For help animating the sun go check out level [[blah]]</li>\n<li>For help animating the cloud go check out level [[blah]]</li>\n<li>For help animating the sky go check out level [[blah]]</li>\n</ul>\n\n</details>\n\n![](https://images.code.org/d0a1386297fae9f21fc046da62b13248-image-1462997082538.gif)",
        "CSD U3 Draw Loop Plugged wiggle sprite rotation_markdown_instruction": "<img src=\"https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif\" style=\"float:right;height:150px\">\n# Updating Properties\n\nThis level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's `sprite.rotation` property.\n\n# Do This\n\nThis animation already is updating one sprite's rotation property to make it look like it's shaking\n\n* Run the program to see how it works.\n* Add code to this program to make the other alien shake just like the first.\n* Move on when your program looks like the picture to the right.",
        "CSD U3 Draw Loop Plugged wiggle sprite rotation_2018_markdown_instruction": "<img src=\"https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif\" style=\"float:right;height:150px\">\n# Updating Properties\n\nThis level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's `sprite.rotation` property.\n\n# Do This\n\nThis animation already is updating one sprite's rotation property to make it look like it's shaking\n\n* Run the program to see how it works.\n* Add code to this program to make the other alien shake just like the first.\n* Move on when your program looks like the picture to the right.",
        "CSD U3 Draw Loop Plugged wiggle sprite x_markdown_instruction": "<img src=\"https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif\" style=\"float:right;height:150px\">\n# Updating Properties\n\nSprites have properties that let the computer know where and how to draw them. Two common properties to use are `sprite.x` and `sprite.y` which control the location of the sprite. Assigning these properties a new value will move your sprite to a new location on the screen.\n\n# Do This\n\nThis animation already is updating one sprite's x property to make it look like it's shaking\n\n* Run the program to see how it works.\n* Edit the code in this program to make the second sprite shake like the first one.\n* Move on when your program looks like the picture to the right.\n\n",
        "CSD U3 Draw Loop Plugged wiggle sprite x_2018_markdown_instruction": "<img src=\"https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif\" style=\"float:right;height:150px\">\n# Updating Properties\n\nSprites have properties that let the computer know where and how to draw them. Two common properties to use are `sprite.x` and `sprite.y` which control the location of the sprite. Assigning these properties a new value will move your sprite to a new location on the screen.\n\n# Do This\n\nThis animation already is updating one sprite's x property to make it look like it's shaking\n\n* Run the program to see how it works.\n* Edit the code in this program to make the second sprite shake like the first one.\n* Move on when your program looks like the picture to the right.\n\n",
        "CSD U3 Draw Loop Plugged wiggle sprite y_markdown_instruction": "<img src=\"https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif\" style=\"float:right;height:150px\">\n# Updating Properties\n\nThis level is very similar to the last, but this time, you'll add in the draw loop yourself.\n\n# Do This\n* Add the draw loop block to the bottom of this program.\n* Move any blocks that need to be inside the draw loop.\n* Move on when your program looks like the picture to the right.\n",
        "CSD U3 Draw Loop Plugged wiggle sprite y_2018_markdown_instruction": "<img src=\"https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif\" style=\"float:right;height:150px\">\n# Updating Properties\n\nThis level is very similar to the last, but this time, you'll add in the draw loop yourself.\n\n# Do This\n* Add the draw loop block to the bottom of this program.\n* Move any blocks that need to be inside the draw loop.\n* Move on when your program looks like the picture to the right.\n",
        "CSD U3 Random Animation_markdown_instruction": "<img src=\"https://images.code.org/f249b981ead9d196b0f136c402dd0c41-image-1478803334302.gif\" style=\"float:right; width:200px\"/>\n# Animation\n\nLook at this face made from some simple shapes. We put it in the `draw()` loop so that we could animate it, but it doesn't seem to be doing anything. We want the mouth to move like the image on the right, so that it looks like it's talking\n\n# Do This\n* Find the code that draws the mouth and replace the width and height with calls to `randomNumber()`\n* Experiment with different ranges of random numbers to get the kind of animation you're looking for.\n\nHint: Don't worry if it's going too fast.  You'll slow it down on the next level.",
        "CSD U3 Random Taller Rectangle_markdown_instruction": "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png\" style=\"float:right;height:150px; border: 1px solid #CCC\">\n# Rectangle Size\n\nThese `rect` blocks have two more parameters that you can use to control the size. Notice that the `noStroke()` block turns off the stroke (border) for shapes.\n\n# Do This\n\n* Look at the code and try to figure out how the last two inputs in `rect` work.\n* Change the numbers in the second `rect` to make red rectangle longer than the blue one.\n",
        "CSD U3 Random Taller Rectangle_2018_markdown_instruction": "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png\" style=\"float:right;height:150px; border: 1px solid #CCC\">\n# Rectangle Size\n\nThese `rect` blocks have two more parameters that you can use to control the size. Notice that the `noStroke()` block turns off the stroke (border) for shapes.\n\n# Do This\n\n* Look at the code and try to figure out how the last two inputs in `rect` work.\n* Change the numbers in the second `rect` to make red rectangle longer than the blue one.\n",
        "CSD U3 Simple Drawing - Animation_markdown_instruction": "# Clouds in the Wind\n\nNow that our image is in the draw loop, let's make use of that feature to add a little bit of animation. We're going to make our clouds look as though they're shifting in the breeze by randomizing their position and size a little bit each time the `draw()` loop is run.\n\n# Do This\n\n* Replace the x input of each cloud ellipse with a call to `randomNumber`\n  * `randomNumber` should vary the x position by + or - 5 pixels. So if your x position was 50, replace it with `randomNumber(45,55)`\n* Replace the width input of each cloud ellipse with a call to `randomNumber`\n  * `randomNumber` should vary the width by + 5 pixels. So if your width was 50, replace it with `randomNumber(50,55)`\n* Change the **frame rate** to something slower (try 5 or 10 FPS)",
        "CSD U3 Sprites createSprite params_markdown_instruction": "# createSprite() with parameters\n\nWhen you create a variable you often want to set its value right away. That's why the command `var x =` exists, to let you perform both commands at once.\n\nIt's very common to want to set the x and y of your sprite in a single command. To help, the createSprite command accepts 2 parameters or values that set these properties right away. Instead of writing \n\n  \tvar mySprite = createSprite();\n  \tmySprite.x = 100;\n  \tmySprite.y = 200; \n\nyou can just write the command\n\n\tvar mySprite = createSprite(100, 200);\n\nThis code does exactly the same thing, but it's much easier to write. \n\n# Do This\n\n<img src=\"https://images.code.org/2f9214a801a60af226fa604a9b6533f5-image-1466008001402.26.15 AM.png\" style=\"float:right; width:200px\">\n\nThis is your code from earlier. Note that a new, larger version of `createSprite` is now available.\n\n<img src=\"https://images.code.org/4a2e6bf1ffbd9782ce637b3e997004e3-image-1468337207497.25.20 AM.png\" style=\" width:350px\">\n\n* Update your code to use this new version of `createSprite`\n* Your program should only be **9 total lines**\n* You're still trying to make your image look as close as possible to the image at the right.",
        "CSD U3 Sprites intro debug_markdown_instruction": "<img src=\"https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png\" style=\"width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;\">\n# Debug\n\nThis program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right.",
        "CSD U3 Sprites intro debug_2018_markdown_instruction": "<img src=\"https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png\" style=\"width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;\">\n# Debug\n\nThis program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right.",
        "CSD U3 Sprites intro sprites_markdown_instruction": "# Sprites\n\n**Creating Sprites:**  <img src = \"https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png\" style = \"height:30px\">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.\n\n**Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png) will draw all of your created sprites on the screen.\n\n<img src=\"https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png\" style=\"width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px\">\n\n# Do This\n\nThis program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.\n\n* Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.\n\t* You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.\n* Add `drawSprites()` under the comment `Drawing`.\n* **Run the code** to draw your first sprite on the screen.\n\n_Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._",
        "CSD U3 Sprites intro sprites_2018 - Validation Test_markdown_instruction": "# Sprites\n\n**Creating Sprites:**  <img src = \"https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png\" style = \"height:30px\">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.\n\n**Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png) will draw all of your created sprites on the screen.\n\n<img src=\"https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png\" style=\"width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px\">\n\n# Do This\n\nThis program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.\n\n* Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.\n\t* You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.\n* Add `drawSprites()` under the comment `Drawing`.\n* **Run the code** to draw your first sprite on the screen.\n\n_Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._",
        "CSD U3 Sprites intro sprites_2018_markdown_instruction": "# Sprites\n\n**Creating Sprites:**  <img src = \"https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png\" style = \"height:30px\">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.\n\n**Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png) will draw all of your created sprites on the screen.\n\n<img src=\"https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png\" style=\"width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px\">\n\n# Do This\n\nThis program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.\n\n* Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.\n\t* You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.\n* Add `drawSprites()` under the comment `Drawing`.\n* **Run the code** to draw your first sprite on the screen.\n\n_Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._",
        "CSD U3 Sprites race finish_markdown_instruction": "# Make It Your Own\n\nKeep adding to this project and make it your own. Do you want to add a finish line? Do you want to make one racer a little bit faster than the others? Maybe you could add some text and give your race a name. There's a ton of ways you can make this animation a lot more interesting and exciting!\n\n<img src = \"https://images.code.org/387aec833f243632735c97b56ae6e64e-image-1466022313176.gif\" style=\"float:right; width:200px\">\n# Do This\n\n* **Keep adding your own touches to your race** using what you already know about drawing, sprites, and animation.",
        "CSD U3 Sprites shapeColor_markdown_instruction": "# shapeColor\n\n**shapeColor:** Another useful property is ![](https://images.code.org/538b61640803ec3b333d7cb2d9a162f5-image-1466050497196.14.46 PM.png) which can be used to change the color of the sprite. It can be assigned values in different ways. For example, you could use the name of a color\n\n<img src=\"https://images.code.org/e5ffaee2a40c1690958b5c35a1d74719-image-1466086033266.06.45 AM.png\" style=\"height:30px\">\n\nor you can use the rgb block\n\n<img src=\"https://images.code.org/670af2867af02830979ff95356ba87d6-image-1488480027884.39.53 PM.png\" style=\"height:30px\">\n\nTo make it easier to program with blocks, **when you drag a sprite property onto its own line it will automatically be placed inside an \"=\" block.**\n\n<img src=\"https://images.code.org/9790f3285269e9cf909fb820679a472e-image-1466091972429.46.00 AM.png\" style=\"float:right;width:150px\">\n\n# Do This\n\nThis program creates two sprites and places them on the screen. Currently they are still gray.\n\n* Beneath the \"Setting Properties\" comment add code to **set the shapeColor of these two sprites**\n\t* Make sure you use dot notation correctly. Use the code already written as a guide.\n    * Try assigning one sprite a **named color** and another sprite a color using the **rgb block**.\n* Your finished work should look something like the image to the right.",
        "CSD U3 Sprites text debug-2018_markdown_instruction": "<img src=\"https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png\" style=\"float: right; width: 200px; margin-left: 20px;\">\n# Debug\n\nThis scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?",
        "CSD U3 Sprites text debug_markdown_instruction": "<img src=\"https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png\" style=\"float: right; width: 200px; margin-left: 20px;\">\n# Debug\n\nThis scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?",
        "CSD U3 Sprites text debug_2018_markdown_instruction": "<img src=\"https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png\" style=\"float: right; width: 200px; margin-left: 20px;\">\n# Debug\n\nThis scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?",
        "CSD U3 Sprites width and height_markdown_instruction": "# Setting Properties\n\nYou are going to start programming with **sprites**. A sprite is made up of many pieces of information called **properties**. The ![](https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png) command can be called whenever you like. It uses the properties of your sprites to draw them all at once.\n\nSprites have **lots and lots of properties** but to get started let's just look at three.\n\n![](https://images.code.org/4d0f35bc60aa9d1c80e6dda4db16abc4-image-1466004005360.19.30 AM.png)\n\n<img src=\"https://images.code.org/cb14a5f6add86bf3c0bcf12901366794-image-1466004148640.22.16 AM.png\" style=\"float:right; width:200px\">\n# Do This\n\nThis program creates a sprite and gives it the label `mySprite`. Then it sets the properties `shapeColor`, `x`, and `y` of the sprite. When `drawSprites` is called, this information is used to draw the sprite in the correct location and color.\n\n* **Change the values given to each property** so that:\n\t* The sprite is now in the bottom right corner of the screen\n    * The sprite is \"orange\" rather than \"red\"",
        "CSD U3 Variables Challenge_markdown_instruction": "# Challenge: Updating Variables\n\n_Check with your teacher before tackling this challenge level._\n\nSo far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.\n\n\n<img src=\"https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">\n<img src=\"https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">\n<img src=\"https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">\n",
        "CSD U3 Variables Challenge_2018_markdown_instruction": "# Challenge: Updating Variables\n\n_Check with your teacher before tackling this challenge level._\n\nSo far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.\n\n\n<img src=\"https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">\n<img src=\"https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">\n<img src=\"https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png\" style=\"width:150px; border: 1px solid grey; margin:20px;\">\n",
        "CSD U3 Variables make a big square_markdown_instruction": "# Replacing Labels with Values \n\nThe last command in the program you just ran is:\n\n\tconsole.log(size);\n\nBut the output you saw was\n\n\t10\n    \nThe reason is that **variables are replaced with their values before running almost all commands.** The only exceptions are the commands `var size` and `size = `.\n\n# Do This\n\nThis program is very similar to the one you just ran, except now you'll be using a variable to draw. **Can you fill the entire screen?**\n\n* **Predict** what this program will do.\n\t* Does it generate an error? What will it draw?\n* **Run** the program and check your prediction.\n* **Change the value** assigned on line 2 so that **the rectangle drawn fills the whole screen**.\n\n",
        "CSD U3 Variables make a square_markdown_instruction": "# Drawing with Variables\n\nA **variable** is a named piece of information in a program. You can think of it as a **label** that identifies a **value** that we wish to use and update many times in our programs. In the previous lesson, you learned two important commands with variables.\n\n\tvar size;        // Creates a new label (or variable) called size\n    size = 10;       // size \"gets\" 10. The label score is now connected to the value 10\n    \nOnce these connections have been formed, we can use them to make much more interesting drawings and animations.\n\n# Do This\n\nThis program creates a variable called `size` and assigns it the value `10`. These two commands are familiar, but line 3 should look new to you. What do you think will happen?\n\n* **Predict** what this program will do.\n\t* Does it generate an error? Output some text? Output a value? Why do you think so?\n* **Run** the program and check your prediction.\n* **Change the value** that size \"gets\" on line 2 and re-run your program. Notice anything?",
        "CSD U3 Variables multiple assignments_markdown_instruction": "# Multiple Assignments\n\nA variable contains a single piece of information called its **value**. To tell variables apart each one has a **label** or name. In your last program, the variable had the label `size` and originally had a value of `10`. **Here's how each command you just saw works**\n\n![](https://images.code.org/a8d2c5a88a8fbb8284a18bcb7464cb9b-image-1462301535506.51.32 PM.png) **Create a new variable** with the label `size`\n\n![](https://images.code.org/d2a2578e6d0190f7db69872c1ad64572-image-1462301539050.51.43 PM.png) **Assign the value `10`** to the variable `size`\n\n![](https://images.code.org/84b01d13b210c8cca8a71934b77acc56-image-1462301542169.51.53 PM.png) **Use the value in `size`** as the width and height of the rectangle. (Since they're the same we end up with a square)\n\n# Do This\n\nThis program is similar to the first but it assigns multiple values to `size` before drawing the rectangle.\n\n* **Run the program once** to see how it works\n* **One at a time change the values assigned to `size` in lines 2-4 and rerun the program** \n* **Discuss / Reflect:**\n\t* Which lines is changing the rectangle drawn? How can you tell?\n    * Can you explain what you're seeing?",
        "CSD U3 Variables naming rules v2-2018_markdown_instruction": "<img style=\"float: right\" src=\"https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png\">\n# Debug: Naming Variables\n\nThis program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.\n\n# Do This\n\n* Find the rule each variable label violates.\n* **Correct the errors by picking new names that follow the rules you learned in the last level.**\n* If your program works it should draw the image on the right.\n\n<summary><em>Hint: Click the arrow for a quick review of the rules.</em><details><ul>\n<li>Labels can't have spaces.</li>\n<li>Labels can't start with a number.</li>\n<li>Capitalization and spelling must be exactly the same.</li>\n</ul></details></summary>",
        "CSD U3 Variables naming rules v2_markdown_instruction": "<img style=\"float: right\" src=\"https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png\">\n# Debug: Naming Variables\n\nThis program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.\n\n# Do This\n\n* Find the rule each variable label violates.\n* **Correct the errors by picking new names that follow the rules you learned in the last level.**\n* If your program works it should draw the image on the right.\n\n<summary><em>Hint: Click the arrow for a quick review of the rules.</em><details><ul>\n<li>Labels can't have spaces.</li>\n<li>Labels can't start with a number.</li>\n<li>Capitalization and spelling must be exactly the same.</li>\n</ul></details></summary>",
        "CSD U3 Variables naming rules v2_2018_markdown_instruction": "<img style=\"float: right\" src=\"https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png\">\n# Debug: Naming Variables\n\nThis program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.\n\n# Do This\n\n* Find the rule each variable label violates.\n* **Correct the errors by picking new names that follow the rules you learned in the last level.**\n* If your program works it should draw the image on the right.\n\n<summary><em>Hint: Click the arrow for a quick review of the rules.</em><details><ul>\n<li>Labels can't have spaces.</li>\n<li>Labels can't start with a number.</li>\n<li>Capitalization and spelling must be exactly the same.</li>\n</ul></details></summary>",
        "CSD U3 Variables naming rules_markdown_instruction": "# Choosing Labels\n\nGood labels **indicate how the variable will be used in the program**. The label `size` is a good choice for a variable that controls the size of something. You could always choose `potato` or `s`, but confusing or unclear names make your program hard to read for you and others.\n\nThere are a **few rules** when choosing labels:\n\n* Labels **cannot include spaces**. For example, `size of rectangle` would generate an error.\n* Labels with multiple words can be easier to read in **camelCase**. CamelCase looks like `sizeOfRectangle` or `aReallyLongLabelName`\n* Labels **cannot begin with a number**. `4sides` and `2morrow` will generate errors.\n* Be very careful with **spelling**.\n* Labels are **case-sensitive**. `size` is not the same as `Size` or `SIZE`.\n\n\n<img src=\"https://images.code.org/39340782150ad1635f6274f6edadb114-image-1462314883756.34.32 PM.png\" style=\"float:right; height:200px\"> \n\n# Do This\n\nThis program has multiple errors caused by bad label names.\n\n* **Correct the errors by picking new names that follow the rules listed above.**\n* **Note:** The errors prevent the program from being viewed in block mode.\n* If your program works it should draw the image on the right.\n\n",
        "CSD U3 Variables random draw loop_markdown_instruction": "# Variables and the Draw Loop\n\nYou already know that draw loop **runs over and over again so long as your program is running**. If you assign a value to a variable outside the draw loop it will not change while the draw loop runs. If your assignment happens **inside the draw loop the variable will be constantly updated, once for each time the loop runs**. \n\n# Do This\n\nThis program draws a smiley face with randomly sized eyes. You are going to **move the assignment of `eyeSize` inside of the draw loop, but first...**\n\n* **Run the program** without making changes to remind yourself how it works\n* **Predict what will happen** when you move the assignment statement inside the draw loop\n* **Move the assignment inside the draw loop** and run your program\n* **Discuss / Reflect:**\n\t* Was your prediction correct?\n    * Can you explain what you see?\n    * Try changing the range of random values to get a different effect.",
        "CSD U3 abstraction animation setup_markdown_instruction": "# Setting up your picture\n<img style=\"float: right; margin: 4px;\" src=\"https://images.code.org/b90748874dc9094386134be8ec1b95e5-image-1469228306235.png\">\nBefore you make anything move, you'll need to start all your sprites off in the right place.  The Earth has already been positioned for you.\n\n# Do This\n\nCreate sprites for the moon, spaceship, and satellite.  Use `setAnimation` to add a picture to each one, and use the `x` and `y` properties to put them in the right place on the screen.\n\n",
        "CSD U3 abstraction animation_markdown_instruction": "# Setting up your picture\n<img style=\"float: right; margin: 4px;\" src=\"https://images.code.org/b90748874dc9094386134be8ec1b95e5-image-1469228306235.png\">\nBefore you make anything move, you'll need to start all your sprites off in the right place.  The Earth has already been positioned for you.\n\n# Do This\n\nCreate sprites for the moon, spaceship, and satellite.  Use `setAnimation` to add a picture to each one, and use the `x` and `y` properties to put them in the right place on the screen.\n\n",
        "CSD U3 abstraction jump-2018_markdown_instruction": "# Jumping\n\nYou now have all the blocks you need to make your sprite jump!  The sprite should jump up if it's on the ground and the user presses the \"up\" key, then should start moving back down when it reaches the top of its jump.\n\n# Do this\n\n* Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the \"up\" arrow key. ( [Show me where](#triggercallout=code_triggered1) )\n\t* Make the frog jump up when the user presses the arrow key.\n\t* Make the frog stop moving otherwise.\n* Add code that does the following  ( [Show me where](#triggercallout=code_triggered2) )\n  * Checks whether the frog sprite has reached its highest point.\n  * If so, make the sprite go back down.",
        "CSD U3 abstraction jump_markdown_instruction": "# Jumping\n\nYou now have all the blocks you need to make your sprite jump!\n\nJust as you checked whether your fish was at the left edge, you'll need to check whether the frog is on the ground.  If it is, it could either jump up or stay still, so you'll need one more `if` block to check whether the user has pressed the up arrow ( [Show me where](#triggercallout=code_triggered1) ).\n\nYou'll also need to check whether the frog has reached its highest point, and send it back down if it has.\n\n# Do this\n\n* Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the \"up\" arrow key. ( [Show me where](#triggercallout=code_triggered1) )\n\t* Use the `velocityY` block to make the frog jump up when the user presses the arrow key.\n\t* Use the `velocityY` block to make the frog stop moving otherwise.\n* Add an if statement that does the following  ( [Show me where](#triggercallout=code_triggered2) )\n  * Checks whether the frog sprite has reached its highest point.\n  * If so, use the `velocityY` block to make the sprite fall back down.",
        "CSD U3 abstraction jump_2018_markdown_instruction": "# Jumping\n\nYou now have all the blocks you need to make your sprite jump!  The sprite should jump up if it's on the ground and the user presses the \"up\" key, then should start moving back down when it reaches the top of its jump.\n\n# Do this\n\n* Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the \"up\" arrow key. ( [Show me where](#triggercallout=code_triggered1) )\n\t* Make the frog jump up when the user presses the arrow key.\n\t* Make the frog stop moving otherwise.\n* Add code that does the following  ( [Show me where](#triggercallout=code_triggered2) )\n  * Checks whether the frog sprite has reached its highest point.\n  * If so, make the sprite go back down.",
        "CSD U3 abstraction reset coin_markdown_instruction": "# Reset Coin\n\nWhen your character touches the coin you should reset it somewhere on the screen.\n\n# Do This\n\n* Place an `if` block inside of your draw loop.\n* Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.\n* Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.\n\t* *Hint: You've already written this code elsewhere in your program.*\n\nTest your code before moving on. When your player touches the coin, it should move somewhere else on the screen.",
        "CSD U3 abstraction reset coin_2018_markdown_instruction": "# Reset Coin\n\nWhen your character touches the coin you should reset it somewhere on the screen.\n\n# Do This\n\n* Place an `if` block inside of your draw loop.\n* Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.\n* Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.\n\t* *Hint: You've already written this code elsewhere in your program.*\n\nTest your code before moving on. When your player touches the coin, it should move somewhere else on the screen.",
        "CSD U3 abstraction setSpeed fish_markdown_instruction": "# Save the Fish\n<img style=\"float: right; height: 200px;\" src=\"https://images.code.org/c92db34c78faa59c2d8a3f0df7fe92aa-image-1472492951133.gif\" />\nYour fish is in danger!  The shark is swimming faster than the fish, but we can use the counter pattern to make the fish get faster as the program runs.   Can use use the counter pattern inside the draw loop to change the program to match the animation on the right?\n\n# Do This\nUse `setSpeedAndDirection` inside the draw loop to increase the speed of the sprite by 1 each time the draw loop is called.\n\n[//]: # (https://images.code.org/a87dac6c803751292c6fb11a63623e3f-image-1471466985600.png)\n\n[//]: # (https://images.code.org/b63256ffb19a98d9d20f3b3b79364006-image-1471467188241.png)\n\n[//]: # (https://images.code.org/c92db34c78faa59c2d8a3f0df7fe92aa-image-1472492951133.gif)",
        "CSD U3 abstraction sidescroll_markdown_instruction": "# Side Scroller\n\nNow that you can make your sprite jump, you're ready to start a simple side scroller.  In a side scroller game, the main sprite stays at the same x location, and the background and obstacles slide past it.  In this first part of the project, you'll make a hay bale slide across the screen so that your horse can jump over it.  You can do this by creating the hay bale off the right hand side of the screen, but setting its velocity so that it moves to the left.  Then, when the hay bale is completely off the left hand side of the screen, move it back to where it started so it can scroll across the screen again.\n\n# Do this\n\n* Change the line of code where the hay sprite is created to make it start off the right side of the screen. [Show me where](#triggercallout=code_triggered1)\n* Add a line of code to make the sprite move across the screen toward the left. [Show me where](#triggercallout=code_triggered2)\n* Add an if statement that does the following  [Show me where](#triggercallout=code_triggered3)\n  * Checks whether the sprite has gone off the left side of the screen.\n  * If so, moves the sprite back to its initial position off the right side of the screen.\n\n\n_Challenge: Can you make the hay bale come out from different places on the right hand side of the screen?_\n\n_Extra fun: You can choose your own images to use, rather than the horse and hay bale, and draw a new background._\n\n[](https://images.code.org/0a265cf4c22f69463200dce05989e8e4-image-1474609853181.png)",
        "CSD U3 abstraction space setup_markdown_instruction": "# Setting up your picture\n<img style=\"float: right; margin: 4px;\" src=\"https://images.code.org/aabf67f8692c025f62a43e54d4bfd830-image-1472408773491.png\">\nBefore you make anything move, you'll need to start all your sprites off in the right place.  The Earth has already been positioned for you, and all the images are loaded for you in the animations tab.\n\n# Do This\n\n* Create sprites for the moon, spaceship, and satellite.\n* Use `setAnimation` to add a picture to each sprite.\n* Use the `x` and `y` properties to put the sprites in the right place on the screen.\n",
        "CSD U3 challenge face_markdown_instruction": "<img src=\"https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png\" style=\"float: right; max-width: 200px; border: 1px solid grey\">\n# Challenge: Face\n\n_Check with your teacher before starting any of the challenges._\n\nWrite a program that uses `rect`, `ellipse`, and `fill` to create the face on the right. The colors used are \"lightblue\", \"red\", and \"lightgreen\".\nOnce you've finished, add your own personal touches to the image.\n\n\n",
        "CSD U3 challenge face_2018_markdown_instruction": "<img src=\"https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png\" style=\"float: right; max-width: 200px; border: 1px solid grey\">\n# Challenge: Face\n\n_Check with your teacher before starting any of the challenges._\n\nWrite a program that uses `rect`, `ellipse`, and `fill` to create the face on the right. The colors used are \"lightblue\", \"red\", and \"lightgreen\".\nOnce you've finished, add your own personal touches to the image.\n",
        "CSD U3 collisions egg2_markdown_instruction": "# Making Sounds\n\nYou can also use code to play a blender sound.\n\n# Do This\n\nUse the `playSound` block from the \"World\" drawer to play the \"https://docs.code.org/sounds/blender.mp3\" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png)\n\n[//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\n\n[//]: #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\n\n[//]: #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\n\n[//]: #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\n\n[//]: #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\n\n[//]: #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)\n\n[//]: #  (https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png)",
        "CSD U3 collisions egg2_2018_markdown_instruction": "# Making Sounds\n\nYou can also use code to play a blender sound.\n\n# Do This\n\nUse the `playSound` block from the \"World\" drawer to play the \"https://docs.code.org/sounds/blender.mp3\" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png)\n\n[//]: #  (https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png)\n\n[//]: #  (https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png)\n\n[//]: #  (https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png)\n\n[//]: #  (https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png)\n\n[//]: #  (https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png)\n\n[//]: #  (https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png)\n\n[//]: #  (https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png)",
        "CSD U3 collisions pirate_markdown_instruction": "# Hide your treasure\n<img style=\"float: right\" src=\"https://images.code.org/2bcf0ba8d5efe69c4531627f2c4d2a1f-image-1472600812452.gif\" />\nYour enemies are still after your treasure.  Use the arrow keys to move the person around the screen.  Can you change the code so that she can push the treasure behind the tree?\n\n# Do This\n\nUse `displace`, `collide`, `bounce`, or `bounceOff` to make the sprites interact in the right way.\n\n[//]: # (https://images.code.org/732942eef4d0c288bf445a4478aee6ec-image-1470947222110.png)\n\n[//]: # (https://images.code.org/1458d90cb97f3bd37508fa0ec3d997f8-image-1470947222109.png)\n\n[//]: # (https://images.code.org/56da2ef5cef40080e0d677c86aec3901-image-1470947222108.png)",
        "CSD U3 collisions try blocks_markdown_instruction": "# More Collision Blocks\n\nThree new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?\n\n# Do This\n\n* Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )\n\t* *Hint: If you're having trouble doing this with blocks then switch over to text mode.*\n* Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?\n\n\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\n\n[//]: #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)",
        "CSD U3 collisions try blocks_2018_markdown_instruction": "# More Collision Blocks\n\nThree new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?\n\n# Do This\n\n* Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )\n\t* *Hint: If you're having trouble doing this with blocks then switch over to text mode.*\n* Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?\n\n\n[//]: #  (https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png)\n\n[//]: #  (https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png)",
        "CSD U3 fill_markdown_instruction": "<img src=\"https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png\" style=\"float:right;width:200px;\">\n# fill(color)\n\nYou can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.\n\n# Do This\n\n* Look at the code that sets the color. ( [Show me where](#triggercallout=fill) )\n* Change the color from blue to yellow.\n* Add a new square by dragging a `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block) ).  The new square can go any location on the screen you like.\n",
        "CSD U3 fill_2018_markdown_instruction": "<img src=\"https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png\" style=\"float:right;width:200px;\">\n# fill(color)\n\nYou can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.\n\n# Do This\n\n* Look at the code that sets the color. ( [Show me where](#triggercallout=fill) )\n* Change the color from blue to yellow.\n* Add a new square by dragging a `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block) ).  The new square can go any location on the screen you like.\n",
        "CSD U3 platform items2_markdown_instruction": "# Loop your Item\n\n<img src=\"https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif\" style=\"float:right\">\nNow that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.\n\n# Do This\n\n* Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.\n* Call the function inside the draw loop.\n* Run the code to test your sprite.",
        "CSD U3 platform items2_2018_markdown_instruction": "# Loop your Item\n\n<img src=\"https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif\" style=\"float:right\">\nNow that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.\n\n# Do This\n\n* Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.\n* Call the function inside the draw loop.\n* Run the code to test your sprite.",
        "CSD U3 platform platform1_markdown_instruction": "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\" style=\"float: right;\"> \n\nNow that you have your background and your variables, it's time to create your sprites.  Usually, it will be easiest to start with the sprites that are part of the environment, such as your platforms.  The sample game had two platform sprites, but you'll make just one first, then test it before copying and pasting the code to make the second.\n\n# Do This\n\n* Look at your worksheet and choose a platform sprite to create.\n* In the \"Create sprites\" area at the top of your code, create your new sprite with the `createSprite` block, giving it the correct position and label (name). ([Show me the block](#triggercallout=callout))\n* Use the `setAnimation` and `velocityY` blocks to give your sprite the correct image and downward velocity.\n* Test the sprite to make sure that it's moving in the correct way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go off the screen and not come back.  You'll make it loop back around in the next level._\n",
        "CSD U3 platform platform1_2018_markdown_instruction": "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\" style=\"float: right;\"> \n\nNow that you have your background and your variables, it's time to create your sprites.  Usually, it will be easiest to start with the sprites that are part of the environment, such as your platforms.  The sample game had two platform sprites, but you'll make just one first, then test it before copying and pasting the code to make the second.\n\n# Do This\n\n* Look at your worksheet and choose a platform sprite to create.\n* In the \"Create sprites\" area at the top of your code, create your new sprite with the `createSprite` block, giving it the correct position and label (name). ([Show me the block](#triggercallout=callout))\n* Use the `setAnimation` and `velocityY` blocks to give your sprite the correct image and downward velocity.\n* Test the sprite to make sure that it's moving in the correct way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go off the screen and not come back.  You'll make it loop back around in the next level._\n",
        "CSD U3 sequence_markdown_instruction": "<img src=\"https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png\" style=\"float:right\">\n# Order Matters\n\nIn Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.\n\n# Do This\n\n* Look at the code that draws the two rectangles.  The first is drawn red, and the second is drawn blue.\n* Change the red rectangle's color to green.\n* Change the order of the code so the green rectangle appears on top.",
        "CSD U3 sequence_2018_markdown_instruction": "<img src=\"https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png\" style=\"float:right\">\n# Order Matters\n\nIn Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.\n\n# Do This\n\n* Look at the code that draws the two rectangles.  The first is drawn red, and the second is drawn blue.\n* Change the red rectangle's color to green.\n* Change the order of the code so the green rectangle appears on top.",
        "CSD U4 - Design Mode Input Widgets_markdown_instruction": "# Input Elements\n\n<img src=\"https://images.code.org/108fcc6fc89bf88edde00353afb33d75-image-1469814642375.49.23.png\" style=\"float: right; width: 150px\"/>\nButtons are a great way to navigate around your app, and text labels are the primary way to display content in your app. When it comes to taking input from your users, sometimes you need a place for them to type or boxes to check. The **Text Input**, **Dropdown**, **Radio Button**, and **Checkbox** elements all provide ways for your users to input information to your app.\n\n# Do This\n\nChoose at least two of the input elements, and for each one:\n\n* Drag it out and position it on the screen\n* Change the id to something meaningful\n* Read through the properties and experiment with them\n* Add a label element next to each that describes what they do (don't forget to give it an id too!)\n\n",
        "CSD U4 - Design Mode Project_markdown_instruction": "# Mocking Up Your App\n\nUsing your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.\n\n# Do This\n\n* Rename the screen to match your _namespace_.\n* Use the built-in elements to lay out your app screen, giving each a proper ID\n\t* For example, if your namespace is \"home_\" you might create IDs like:\n    \t* \"home_title\"\n        * \"home_login_button\"\n        * \"home_logo\"\n* For any components of your app that can't be recreated with the built in elements you can either:\n\t* Redesign to utilize built in elements\n    * Find an image to use in place of your element\n    * Draw the element using your preferred image editor\n* Share your design regularly with your teammates to ensure consistent style",
        "CSD U4 - Design Mode Project_2018_markdown_instruction": "# Mocking Up Your App\n\nUsing your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.\n\n# Do This\n\n* Rename the screen to match your _namespace_.\n* Use the built-in elements to lay out your app screen, giving each a proper ID\n\t* For example, if your namespace is \"home_\" you might create IDs like:\n    \t* \"home_title\"\n        * \"home_login_button\"\n        * \"home_logo\"\n* For any components of your app that can't be recreated with the built in elements you can either:\n\t* Redesign to utilize built in elements\n    * Find an image to use in place of your element\n    * Draw the element using your preferred image editor\n* Make sure that you and your teammates are regularly looking at each other's designs to ensure consistent style",
        "CSD U4 - Design Mode Text_markdown_instruction": "# Adding Text\n<img src=\"https://images.code.org/86ba633e04f90f3ca47dff3dcd064847-image-1469812708683.15.36.png\" style=\"float: right; width: 75px\"/>\nThe label element lets you add any text you'd like to your app. Just drag out a label block and set its \"text\" property. \n\n# Do This\nUse a label element to create a title for this app.\n\n* Drag out a label and place it on the top of the screen\n* Change the id to \"titleLabel\"\n* Change the text to \"My App\"\n* Increase the font size\n* Choose a color you like for the title\n\n",
        "CSD U5 collection UPS_markdown_instruction": "<img src=\"https://images.code.org/db7d21a8d28df27dee3449939038c7a9-image-1488501564775.jpg\" style=\"float:right;height:250px\">\n### Plan a Route\n\nRoutz is a company that helps people navigate traffic. It has maps of locations all around the world and knows real-time information about traffic conditions. When you type in a destination you want to go, it will give you the best route it can find.\n\nRoutz wants to improve its data to provide even better directions. Your job is to help the company decide what data it could collect to improve those directions.\n\n**What data should Routz collect to improve its recommendations AND where could it get that data?**\n\n",
        "CSD U6 getProperty dropdown_markdown_instruction": "# Dropdowns\n\nText Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.\n\nThe provided dropdown with the ID \"color_input\" allows a user to choose from a handful of background colors. When the \"Set Color\" button is clicked, the screen will turn that color.\n\n# Do This\n\n* Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.\n  * Hint: You'll need to use the \"value\" property to get the user's choice.\n* Use the `setProperty` block to set the \"background-color\" property of \"screen1\" to your variable `color`.\n  * Hint: Make sure you type `color` without quotation marks.\n* Test your program by picking a color and clicking \"Set Color\".",
        "CSD U6 getProperty dropdown_2018_markdown_instruction": "# Dropdowns\n\nText Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.\n\nThe provided dropdown with the ID \"color_input\" allows a user to choose from a handful of background colors. When the \"Set Color\" button is clicked, the screen will turn that color.\n\n# Do This\n\n* Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.\n  * Hint: You'll need to use the \"value\" property to get the user's choice.\n* Use the `setProperty` block to set the \"background-color\" property of \"screen1\" to your variable `color`.\n  * Hint: Make sure you type `color` without quotation marks.\n* Test your program by picking a color and clicking \"Set Color\".",
        "CSD U6 getProperty input_markdown_instruction": "# getProperty and Variables\n\nThis program uses the `name` variable to display the name typed into \"name_input\" when the Submit button is clicked. It should do the same for *friend_input* and *friend_output*, but it's missing a block.\n\n# Do This\n* Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting \"Submit\".)\n* Use a `getProperty` block to store the text property of *friend_input* into your the variable \"friend_name\". ([Show me where.](#triggercallout=code_triggered))",
        "CSD U6 getProperty input_2018_markdown_instruction": "# getProperty and Variables\n\nThis program uses the `name` variable to display the name typed into \"name_input\" when the Submit button is clicked. It should do the same for *friend_input* and *friend_output*, but it's missing a block.\n\n# Do This\n* Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting \"Submit\".)\n* Use a `getProperty` block to store the text property of *friend_input* into your the variable \"friend_name\". ([Show me where.](#triggercallout=code_triggered))",
        "CSD U6 getProperty var_markdown_instruction": "# getProperty and Variables\n\nYou might have noticed in the last level that we used a _variable_ to store the values collected with `getProperty()`. Using variables in this way allows us to both get the properties of design elements and to use those values later on.\n\n# Do This\n\nThis program should get the text typed into \"name_input\" when the Submit button is clicked, and then use that to set the text property of \"name_output\". It does this by storing the text in a variable called `name`, but it's not finished.\n\nUsing a `getProperty` block, assign the `name` variable to the text property of \"name_input\". Test your program by typing in your name and clicking \"Submit.\"",
        "CSD U6 investigate orientation_markdown_instruction": "# Pitch and Roll\n\nThis program displays the board's pitch and roll, and it will also change colors depending on their values.  \n\n# Do This\n\nMake the program change the following colors by tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block; background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch: 0 | Roll: -20\n\n<div style=\"display:inline-block; background-color: burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0 \n\n<div style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div> Pitch: -15 | Roll: 10 \n\n<div style=\"display:inline-block; background-color: yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25 \n\n<div style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div> Pitch: 10 | Roll: 30 \n\nWhich way should you tilt to get a positive pitch?\n\nWhich way should you tilt to get a negative roll?",
        "CSD U6 investigate orientation_2018_markdown_instruction": "# Pitch and Roll\n\nThis program displays the board's pitch and roll, and it will also change colors depending on their values.  \n\n# Do This\n\nMake the program change the following colors by tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block; background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch: 0 | Roll: -20\n\n<div style=\"display:inline-block; background-color: burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0 \n\n<div style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div> Pitch: -15 | Roll: 10 \n\n<div style=\"display:inline-block; background-color: yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25 \n\n<div style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div> Pitch: 10 | Roll: 30 \n\nWhich way should you tilt to get a positive pitch?\n\nWhich way should you tilt to get a negative roll?",
        "CSD U6 iter modify bugs_markdown_instruction": "# Bug Shaker\n\nThis program shakes bugs around when the board is shaken, but it's only working for one bug.\n\n# Do This\n* Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.\n  * (Hint: Look at the `detectHits()` function for clues how to do this.)",
        "CSD U6 iter modify bugs_2018_markdown_instruction": "# Bug Shaker\n\nThis program shakes bugs around when the board is shaken, but it's only working for one bug.\n\n# Do This\n* Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.\n  * (Hint: Look at the `detectHits()` function for clues how to do this.)",
        "CSD U6 tugowar variables 2_markdown_instruction": "# Functions with Parameters\n\nMost of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen(\"win\")`.\n\nThese parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!\n\n# Do This\n\n<div markdown=\"1\" style=\"float:right; margin: 20px;\">\n\n![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\nInstead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.\n\n* Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )\n* Inside the `movePlayer()` definition:\n  * Get the current \"y\" property of the player and save it to a variable called `player_y`\n  * Increase the value of `player_y` by 10\n  * Set the \"y\" property of player to your new value `player_y`\n\nOnce you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!",
        "CSD U6 tugowar variables 2_2018_markdown_instruction": "# Functions with Parameters\n\nMost of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen(\"win\")`.\n\nThese parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!\n\n# Do This\n\n<div markdown=\"1\" style=\"float:right; margin: 20px;\">\n\n![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\nInstead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.\n\n* Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )\n* Inside the `movePlayer()` definition:\n  * Get the current \"y\" property of the player and save it to a variable called `player_y`\n  * Increase the value of `player_y` by 10\n  * Set the \"y\" property of player to your new value `player_y`\n\nOnce you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!",
        "CSDU2 - Classes on ESS_markdown_instruction": "# Classes in External Style Sheets\nYou may have also noticed these issues appearing.\n\n\t1.\tThe styling of the `<img>` elements on one page should be different than the other\n\t2.\tFor the `<h1>` headers, on one page we want to style them and on the other we don't.\n\nLuckily you know classes and we can fix these with classes!\nï¿¼\n# Do This\n\n* Put the image on the home page in the \"home-image\" class\n* Find the old style rule for images on the home page (width: 600px) and change the selector so it will style the \"home-image\" class instead\n* Put all the images on the technology page in the \"tech-images\" class\n* Find the old style rule for images on the technology page (width: 100px) and change the selector so it will style the \"tech-images\" class instead\n* Find the h1 element on the technology page and put it in the class \"page-header\"\n* Change the secltor for the style rule for h1 elements to be just a style rule for the page-header class",
        "CSDU2 - Headers_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**What are headers?**</summary>\nHeaders are the different sized section titles throughout a web page. Headers add structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>**How do I create a header?**</summary>\nYou can make something a header element by surrounding it by header tags.  For example:\n<pre> &lt;h1&gt; Header Text &lt;/h1&gt; </pre> <br> <br>\n\nNotice how there is a the opening tag (&lt;h1&gt;) and closing tag (&lt;/h1&gt;). The closing tag is the same as the opening tag except it has `/` after the opening angle bracket. The text you want to show as the header goes in the middle of the two tags.\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nStands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nA piece of a website. Marked by a start tag and sometimes closed with an end tag. Also includes the content of the element as well. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nThe special set of characters that tells the machine where the start or end of an HTML element is and what type it is. HTML tags add structure to the content of a web page.\n</details>\n<details>\n<summary>**Why do you need an opening and closing tag?**</summary>\nYou need both an opening and closing tag for many HTML elements because it marks where that structure starts and stops. You don't want all the text on your web page to be a title.\n</details>\n</div>\n\n# Headers\n\nYou may have noticed on the last level that everything you type into the editor is getting smashed together. In order to differentiate between these different parts we use HTML elements to mark the different parts of a web page. In your investigation with the inspector did you come across something that made headers?\n\n# Do This\n\n* Make your header \"Animals\" stand out using the `<h1>` header element.",
        "CSDU2 - Hobbies Valid Update_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**What is Doctype and how do I use it? **</summary>\n&lt;!DOCTYPE html&gt; is always the first thing in an html document because it notifies the computer that this is an html document and to interpret it as such. &lt;!DOCTYPE html&gt; is not technically a tag but instead an instruction to the web browser. <br> <br>\n\nAdd &lt;!DOCTYPE html&gt; at the very top of your html file.  \n</details>\n\n<details>\n<summary>**What is the &lt;html&gt; element and how do I use it? **</summary>\n\nThe &lt;html&gt; tag notifies the computer where the html starts and ends. The  &lt;html&gt; tag is the container for all other HTML elements (The &lt;!DOCTYPE html&gt; tag does NOT go inside the html element).  You will need an opening and closing &lt;html&gt; tag. This will also make your preview of your website update automatically if there are no issues with your code! <br> <br>\n \nWrap all the content of the file in an HTML element using the &lt;html&gt; tag.\n\n</details>\n<details>\n<summary>**Why do I need to structure the HTML document this way?**</summary>\nAlthough many modern web browsers can make good assumptions about what language you are writing in and where to find different information in your document, you don't want to leave the display of you web page up to chance. To guarantee the best results for displaying your web page on all computers you need to assist the computer in figuring out where to find information. <br> <br>\n\nAs you go forward you are going to need two different sections in your HTML file. They will serve different purposes.\n<br><br>\n1. Content of the page<br>\n2. Information about the page<br>\n<br>\nBy breaking up a web page this way it is clear where to find the code that is creating the physical output on the web page and which code is just information for the computer about the page.<br><br>\n\nIn creating web pages we differentiate between these two areas using the &lt;head&gt; and &lt;body&gt; elements. The &lt;head&gt; element contains all the information about the page.  The &lt;body&gt; element contains all the content for a web page.\n\n</details>\n\n<details>\n<summary>**What is a head element?**</summary>\nThe &lt;head&gt; element contains all the information about the page. This is extra information that is helpful for the computer in displaying your web page but is not the physical content of the web page. \n\nThe &lt;head&gt; element usually comes above the body element but inside the &lt;html&gt; element. For right now it will be blank but later we will learn important things that are added to the head.\n</details>\n\n<details>\n<summary>**How is the head element different than the header elements? **</summary>\nThe header elements (&lt;h1&gt; to &lt;h6&gt;) are used to display headers directly on your web page for your user to see. The head tag marks the information that is not user facing in your HTML document. \n</details>\n\n<details>\n<summary>**What is the body element? **</summary>\n\n The &lt;body&gt; element contains all the content for a web page.  The HTML elements for your headers, paragraphs, and lists should all go inside the &lt;body&gt; element.\n\n</details>\n\n</div>\n\n# Update Hobbies Page\n\n&lt;!DOCTYPE html&gt;, &lt;html&gt;, &lt;head&gt;, and &lt;body&gt; are important to add to your web page. Practice adding them to update your Hobbies page. In all future levels they will be included for you so you won't need to add themselves.",
        "CSDU2 - Inspector Warm Up_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**<span> How do I use the Inspector Tool? </span>**</summary>\nThe Inspector Tool is a great way to figure out what unfamiliar code in Web Lab. To turn on the Inspector Tool click the <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png\" style=\"width:100px\">. You will know that the Inspector Tool is on because the button will turn white and say Inspector: On. Once you turn on the Inspector Tool you can hover over any element in the preview area and Web Lab will highlight the associated code.\n</details>\n\n</div>\n\n# Language Detective\n\nUse the Inspector Tool to check out the code for this website someone created on Web Lab! Focus on the index.html file open for now.\n\nTry to answer the following questions:\n\n* In what ways is this language similar to or different from the languages your groups invented in the last lesson?\n* What are the rules of this language?\n* How does this language add structure to the website?\n\n**Wait for instructions from your teacher before going on to the next level.**",
        "CSDU2 - Intro to Validator_markdown_instruction": "# Validator\n\nThe validator is a tool that allows you to check if a page is following good HTML fundamentals and will work consistently across many different computers and web browsers.\n\n# Do This\n\nUse the validator to check if the web page on this level meets the requirements for consistent web pages. To use the validator, itâs important to work on it one error at a time.\n\n1. Open up the <a href=\"https://validator.w3.org/\" target=\"_blank\">W3 validator</a>.\n2. Click **\"Validate by Direct Input\"**\n3.** Copy and paste the contents of index.html** file into the box.\n4. Click **âCheckâ**\n5. If there is an error message click the top error below:\n\n\t* <a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/4\"> Unable to Determine Parse Mode! </a>\n\t* <a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/4\"> No DOCTYPE found, and unknown root element. Aborting validation. </a>\n    * <a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/5\"> Element head is missing a required instance of child element title. </a>\n    * <a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/5\"> Element title must not be empty.</a>\n    * <a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/4\"> Start tag seen without seeing a doctype first. Expected e.g. <!DOCTYPE html>.</a>\n\n\tOnce you fix the error start again at step 1.\n\n6. If there are no error messages <a href=\"https://studio.code.org/s/csd2/stage/5/puzzle/6\">click here </a> to head to the next set of levels!",
        "CSDU2 - Link and Nav_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**What are hyperlinks?**</summary>\nHyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>\n\nFor example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>\n\n<pre>\n&lt;a href=âhouses.htmlâ&gt; Unique Houses &lt;/a&gt;\n</pre>\n\n</details>\n<details>\n<summary>**How do I add a hyperlink?**</summary>\nYou can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>\n\nFor example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>\n\n<pre>\n&lt;a href=âhouses.htmlâ&gt; Unique Houses &lt;/a&gt;\n</pre>\n\n</details>\n</div>\n\n# Hyperlink Element\n\n* In the index.html file, find the line of code that says `<a href=\"houses.html\">Odd Houses</a>`.  This is a link that will take you to the Odd Houses page at `houses.html`.\n* Discuss with a partner how the code works.\n  * Where does the file name go?\n  * Where does the label of the link go?\n* Below the hyperlink to the Odd Houses page add two new hyperlinks (`<a>`) to the following pages:\n    * Crazy Signs Page\n    * Guinness Book of World Records Page\n* Test it out to see if clicking the links take you to the other pages of your site.",
        "CSDU2 - Local Images_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**How do I add images?**</summary>\nThe `<img>` tag allows you to show images on your web page. <br><br>\n\nExample:\n<pre>&lt;img src=\"dog.png\" alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which file to use, extra information, called an **attribute**, is added to the &lt;img&gt; tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesnât load or for people who have trouble with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **void element** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>**What is a void tag?**</summary>\nAn `<img>` tag is an example of a  **void element** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag. Void tags do not need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**Why does an image tag not have a closing tag?**</summary>\nAn image tag is a void tag and void tags do not need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.\n</details>\n<details>\n<summary>**What is an attribute?**</summary>\nAttributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag. \n\nFor example &lt;img&gt; tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.\n</details>\n</div>\n\n# Images\n\nA Dog vs Cat web page has been started for you. The dog image has already been added to the below web page. Use an image tag to add the cat.jpeg image to the page below the cat header.",
        "CSDU2 - New Class Files_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**Why is the style sheet not working? **</summary>\nCheck in the HTML of the records page to make sure that your link (`<link rel=\"stylesheet\" href=\"nameofstylesheet.css\">`) is linking to the correct CSS file.\n</details>\n</div>\n# Making a Multi-page Site\n\nYou may notice that your styles for your Guinness Book of World Records don't seem to be working. Can you figure out why? \n\n**Hint:** When you brought over your code you had to change the name of the style sheet from \"style.css\" to something else.",
        "CSDU2 - PW - RGB color_markdown_instruction": "# RGB Color\n\nIn order to get a nice âfakeâ notecard color, you will have to break out from the named color values given in Web Lab. \nInstead, you will be using the RGB function, which takes three values, the amount of red, green and blue you want in  your color. Each component of the color (red, green, blue) can have a value of 0 to 255. Where 0 means the component color is not present or dark and 255 means it is full present or bright.\n\nFor example:\n\n<pre>\n\nh1 {\n\tcolor: rgb(120, 0, 255);\n}\n</pre>\n\nTo explore RGB colors go to <a href=\"http://www.w3schools.com/colors/colors_rgb.asp\">W3 Schools - RGB Colors </a>. There is a tool for you to play around with different RGB values.\n\n# Do This\n\n* Play with the <a href=\"http://www.w3schools.com/colors/colors_rgb.asp\">W3 Schools - RGB Colors </a> tool and find a color similar to this color: <img src=\"https://images.code.org/2de78dc9667e9e6c77dc5e28b1de6b0d-image-1475095252137.40.30 PM.png\" style=\"width:50px\">\n\n* Set the `background-color` of the notecard class to the yellow you just created.\n\n*Hint: Yellow is a **bright** color with **equal amounts of red and green**.*",
        "CSDU2 - Paragraphs 2_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**What is a paragraph element?**</summary>\nParagraphs are marked by opening(`<p>`) and closing(`</p>`) tags as well. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. All of your text in your web page should be contained in an HTML element (headers or paragraphs). Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.\n</details>\n<details>\n<summary>**How do I create multiple paragraphs?**</summary>\nParagraphs are marked by opening(`<p>`) and closing(`</p>`) tags as well. To create more than one paragraph you will want multiple sets of opening and closing `<p>` tags. For example\n<pre>\n\t&lt;p&gt;\n    \tThis is a paragraph.\n    &lt;/p&gt;\n\t&lt;p&gt;\n    \tThis is another paragraph.\n    &lt;/p&gt;\n</pre>\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nStands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nA piece of a website. Marked by a start tag and sometimes closed with an end tag. Also includes the content of the element as well. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nThe special set of characters that tells the machine where the start or end of an HTML element is and what type it is.\n</details>\n</div>\n\n# Paragraphs\n\nNow that you have a header try to separate the two sentences like the example below using the paragraph element.\n\n<img src=\"https://images.code.org/12f8d4230fcd2144a5880815c8375149-image-1480364278934.12.18 PM.png\" style=\"width:300px\">",
        "CSDU2 - Paragraphs 3_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**How do I make different sized headers?**</summary>\nHeaders come in 6 different sizes. So far you have primarily used the biggest one &lt;h1&gt;. The number 1 in the HTML tag designates that this is the biggest header. The smallest header is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags which get smaller as the number gets larger.\n</h1>\n</details>\n<details>\n<summary>**What are headers?**</summary>\nHeaders are the different sized section titles throughout a web page. Headers add structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nStands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nA piece of a website. Marked by a start tag and sometimes closed with an end tag. Also includes the content of the element as well. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nThe special set of characters that tells the machine where the start or end of an HTML element is and what type it is.\n</details>\n</div>\n\n# Header Sizes\nAdd the names of your favorite animals above the sentence they go with. Make the names of the animals smaller headers than the \"Animals\" title for the page. See the example below.\n\n<img src=\"https://images.code.org/1462f452bd2d983902f47e275da9fa90-image-1481137414337.03.11 PM.png\" style=\"width:250px\">",
        "CSDU2 - Recipe Page Start_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**What is HTML?**</summary>\nStands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nA piece of a website. Marked by a start tag and sometimes closed with an end tag. Also includes the content of the element as well. For example:<br>\n\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nThe special set of characters that tells the machine where the start or end of an HTML element is and what type it is. HTML tags add structure to the content of a web page.\n</details>\n</div>\n\n# Recipe Page\n\nYou are going to start a new web page. This will be a favorite recipe page. It will take a couple levels to build the page.  Use your knowledge from earlier in class to start getting it set up.\n\n# Do This\n\n* Take out your recipe you picked.\n* Using a large header tag, put the name of the recipe at the top of the page.\n* Create three smaller headers: Description, Ingredients, and Instructions.\n* Add a paragraph element under the \"Description\" describing the dish the recipe creates.",
        "CSDU2 - Recipe Valid Update_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**How do I alert the web browser what language I'm writing in?**</summary>\n\nYou will need to add two things to your HTML document, Doctype and an html element. \n\n</details>\n\n<details>\n<summary>**Why do I need to add these elements?**</summary>\n\nWhen a web browser is trying to read your document it looks for alerts which tell it which language you are using. In order to let the web browser know that this is an html document you need to tell it what type of document it is deal with (Doctype) and where to find the code (inside the html element).\n\n</details>\n\n<details>\n<summary>**What is DOCTYPE and how do I use it? **</summary>\n&lt;!DOCTYPE html&gt; is always the first thing in an html document because it notifies the computer that this is an html document and to interpret it as such. &lt;!DOCTYPE html&gt; is not technically a tag but instead an instruction to the web browser. <br> <br>\n\nAdd &lt;!DOCTYPE html&gt; at the very top of your html file.  \n</details>\n\n<details>\n<summary>**What is the HTML element and how do I use it? **</summary>\n\nThe &lt;html&gt; tag notifies the computer where the html starts and ends. The  &lt;html&gt; tag is the container for all other HTML elements (The &lt;!DOCTYPE html&gt; tag does NOT go inside the html element).  You will need an opening and closing &lt;html&gt; tag. This will also make your preview of your website update automatically if there are no issues with your code! <br> <br>\n \nWrap all the content of the file in an HTML element using the &lt;html&gt; tag.\n\n</details>\n\n</div>\n\n# Doctype and HTML tag\n\nThis is your Recipe page from the last lesson. Update it with elements that alert your browser which language the document was written in by adding DOCTYPE and &lt;html&gt; elements.\n\n![](https://images.code.org/f75e718b8e40870e7b6d87c0efdfc0ae-image-1481320053480.png)",
        "CSDU2 - SEO 3_markdown_instruction": "# Search Engine Optimization: Description\n\nAnother important piece of meta data used by search engines is the description. The description is added using the `<meta>` element. It has two attributes, the name and the content. The content is where the actual description goes. **Every page should have its own description.**\n\n<pre>\n&lt;head&gt; \n\t&lt;meta name=\"description\" content=\"Your meta description goes here \" /&gt;\n&lt;/head&gt;\n</pre>\n\nJust like the title tag this will not show up physically on the page but will be used by search engines to display information about your page. Sometimes the description will also be used when you share the link on social media platforms. \n\n*Just like titles the search engine might decide it knows best and generate a description for the page that is different than the one you provided.*\n\n## What goes in a description?\n\nA good description will follow these guidelines:\n\n* **Descriptive:** Unique description of what someone will find on this page\n* **Keywords:** Uses keywords in full sentence descriptions which someone might use to search for your page\n* **Short:** Less than 150 characters\n* **Avoid Special Characters:** Don't use special characters such as ââ<>{}[]()\n* **Enticing:** It makes someone want to look at your web page.\n\n# Do This\n\n* Add descriptions to each web page on your website using the `<meta>` tag \n* Test it out!\n\t* Open <a href=\"http://www.seocentro.com/tools/seo/seo-analyzer.html\" target=\"_blank\"> SEO </a>\n    * Re-load the results for your page to use the most updated version\n    * Under the <img src=\"https://images.code.org/01e0d19ff0278ba750efc3b3824b31b0-image-1477075078800.37.19 PM.png\" style=\"width:80px\"> section there is a preview of the Google Search results.\n    \n*Remember that the search engine might still decide to use something else as your description. It is not a big deal and it is still important to have a description.*",
        "CSDU2 - Separate Content and Style_markdown_instruction": "# Separate Content and Style\n\nSoon you will get to apply your new brand style rules to your website. Before you do that, though, let's investigate how to style a multi-page website.\n\nAs already mentioned, from this point forward we will be using external style sheets instead of styling inside the HTML file because this keeps all the styling for the website in one place.  However, in order to do this you are going to have to pay extra close attention as you remove your old styling. Even though you want consistent style on your website, you will have exceptions to the style rules in certain cases. Exceptions to the style rules might include the note card styling, which you worked on in the last lesson. We would not want every list to have the note card styling, just those specific ones on the recipe page.\n\nYou will never want to have duplicate rules for the same selector. So there should not be two stylings with `p` as the selector. Instead you need to leverage the ability to make classes in order to have multiple styles for `<p>` elements. \n\nTo practice this, we have a website with an external style sheet that also still has styling. You will need to figure out how to keep the unique elements of the individual web pages while getting a more consistent style across the pages.\n\nUnique Elements You Want to Keep:\n\n\t1.\tThe styling of the `<img>` elements on one page should be different than the other\n\t2.\tFor the `<h1>` headers, on one page we want to style them and on the other we don't.\nï¿¼\n# Do This\n\n* Put the image on the home page in the \"home-image\" class\n* Find the old style rule for images on the home page (width: 600px) and change the selector so it will style the \"home-image\" class instead\n* Put all the images on the technology page in the \"tech-images\" class\n* Find the old style rule for images on the technology page (width: 100px) and change the selector so it will style the \"tech-images\" class instead\n* Find the h1 element on the technology page and put it in the class \"page-header\"\n* Change the secltor for the style rule for h1 elements to be just a style rule for the page-header class\n* Copy the three new style rules you created into your style.css file.\n* Delete the `<style>` element and its contents from both pages.",
        "CSDU2 - Unordered Lists_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**What are the two types of lists?**</summary>\n There are two types of lists in HTML, ordered and unordered lists.\n</details>\n<details>\n<summary>**What is an unordered list?**</summary>\nAn unordered list is just a set of bulleted items.\n</details>\n<details>\n<summary>**How do I make an unordered list?**</summary>\n\nAn unordered list element has the tag &lt;ul&gt; . Notice that this is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item on the list is marked by a list item element &lt;li&gt;. Notice that this is also an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element which means that you don't use it on its own. It is contained inside a list element. It can be helpful to indent your &lt;li&gt; tags so its clear that is contained in the &lt;ul&gt; tags.\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n<details>\n<summary>**What is an ordered list?**</summary>\nAn ordered list is a set of bulleted items which are numbered.\n</details>\n\n<details>\n<summary>**How do I make an ordered list?**</summary>\n\nAn ordered list element has the tag &lt;ol&gt; . Notice that this is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item on the list is marked by a list item element &lt;li&gt;. Notice that this is also an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element which means that you don't use it on its own. It is contained inside a list element. It can be helpful to indent your &lt;li&gt; tags so its clear that is contained in the &lt;ol&gt; tag.\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre> &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt; <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04 PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nStands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nA piece of a website. Marked by a start tag and sometimes closed with an end tag. Also includes the content of the element as well. For example:<br>\n\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nThe special set of characters that tells the machine where the start or end of an HTML element is and what type it is. HTML tags add structure to the content of a web page.\n</details>\n</div>\n\n# Unordered Lists\n\nNow that you have the basic layout for your Recipe page you need two lists. An ingredients list and a directions list. Start by trying to create the ingredients list. All text on your web page should go inside one type of HTML element (header, list, or paragraph).\n\n# Do This\nUnder your ingredients header create an unordered list of ingredients.",
        "CSDU2 - head and body tag intro_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**Why do I need to structure the HTML document this way?**</summary>\nAlthough many modern web browsers can make good assumptions about what language you are writing in and where to find different information in your document, you don't want to leave the display of you web page up to chance. To guarantee the best results for displaying your web page on all computers you need to assist the computer in figuring out where to find information. <br> <br>\n\nAs you go forward you are going to need two different sections in your HTML file. They will serve different purposes.\n<br><br>\n1. Content of the page<br>\n2. Information about the page<br>\n<br>\nBy breaking up a web page this way it is clear where to find the code that is creating the physical output on the web page and which code is just information for the computer about the page.<br><br>\n\nIn creating web pages we differentiate between these two areas using the &lt;head&gt; and &lt;body&gt; elements. The &lt;head&gt; element contains all the information about the page.  The &lt;body&gt; element contains all the content for a web page.\n\n</details>\n\n<details>\n<summary>**What is a head element?**</summary>\nThe &lt;head&gt; element contains all the information about the page. This is extra information that is helpful for the computer in displaying your web page but is not the physical content of the web page. \n\nThe &lt;head&gt; element usually comes above the body element but inside the &lt;html&gt; element. For right now it will be blank but later we will learn important things that are added to the head.\n</details>\n\n<details>\n<summary>**How is the head element different than the header elements? **</summary>\nThe header elements (&lt;h1&gt; to &lt;h6&gt;) are used to display headers directly on your web page for your user to see. The head tag marks the information that is not user facing in your HTML document. \n</details>\n\n<details>\n<summary>**What is the body element? **</summary>\n\n The &lt;body&gt; element contains all the content for a web page.  The HTML elements for your headers, paragraphs, and lists should all go inside the &lt;body&gt; element.\n\n</details>\n</div>\n\n# Head and Body\n\nFormat your HTML document with two sections using the &lt;head&gt; and &lt;body&gt; elements as shown in the image below. From this point forward anything you add to an HTML document should go inside either the &lt;head&gt; or the &lt;body&gt; elements. Put all the content and structure you have created so far inside the &lt;body&gt; element.\n\n<img src=\"https://images.code.org/2513d8f7c31e76c2ee5427e512a54a1c-image-1481559174341.png\" style=\"width:300px\">",
        "CSDU2 - ordered Lists_markdown_instruction": "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**What are the two types of lists?**</summary>\n There are two types of lists in HTML, ordered and unordered lists.\n</details>\n<details>\n<summary>**What is an unordered list?**</summary>\nAn unordered list is just a set of bulleted items.\n</details>\n<details>\n<summary>**How do I make an unordered list?**</summary>\n\nAn unordered list element has the tag &lt;ul&gt; . Notice that this is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item on the list is marked by a list item element &lt;li&gt;. Notice that this is also an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element which means that you don't use it on its own. It is contained inside a list element. It can be helpful to indent your &lt;li&gt; tags so its clear that is contained in the &lt;ul&gt; tags.\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n<details>\n<summary>**What is an ordered list?**</summary>\nAn ordered list is a set of bulleted items which are numbered.\n</details>\n\n<details>\n<summary>**How do I make an ordered list?**</summary>\n\nAn ordered list element has the tag &lt;ol&gt; . Notice that this is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item on the list is marked by a list item element &lt;li&gt;. Notice that this is also an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element which means that you don't use it on its own. It is contained inside a list element. It can be helpful to indent your &lt;li&gt; tags so its clear that is contained in the &lt;ul&gt; tag.\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre> &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt; <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04 PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n<details>\n<summary>**What is HTML?**</summary>\nStands for Hypertext Markup Language. HTML is used to add structure to the content of a web page. HTML uses tags to specify where certain structures start and end. These tags are sets of characters not found in the English language so that the content and structure can be differentiated. \n</details>\n<details>\n<summary>**What is an HTML element?**</summary>\nA piece of a website. Marked by a start tag and sometimes closed with an end tag. Also includes the content of the element as well. For example:<br>\n\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n</details>\n<details>\n<summary>**What is an HTML tag?**</summary>\nThe special set of characters that tells the machine where the start or end of an HTML element is and what type it is. HTML tags add structure to the content of a web page.\n</details>\n</div>\n\n# Ordered Lists\n\nCreate an ordered list for each step in your recipe under the Directions header",
        "CSDU2 IP Research Content_markdown_instruction": "# Adding Your Content\n\nYou should now have found a handful of websites that you can use to help make your case for the cause you've chosen. If not, keep on researching! Otherwise it's time to start structuring the content of your page.\n\n## Hyperlinks to Websites\n\nEarlier in the unit you learned how to use the `<a>` element to link between pages on your website. You can also use this element to link to other websites. To do this the `href` attribute needs to contain the full URL of the site you wish to link to. For example if I wanted to link to the Code.org website in my project I would use the following code:\n\n| Code | Output|\n| ---- | ----- |\n| <pre> My favorite coding site is &lt;a href=\"https://code.org/\" &gt; Code.org &lt;/a &gt; ! </pre> | My favorite coding site is <a href=\"https://code.org/\"> Code.org </a> ! |\n\n# Do This\n\nThe specifics of your page layout will depend on your topics and goals, but in general you should create the following structure\n\n* A first level header with a catchy title for your page\n* A second level header for each separate argument to support your cause\n* Paragraphs of content under each second level header\n* A link to the appropriate site where you need to cite outside sources\n* Don't worry about styling right now you are just getting the content\n\nAttribution links can take many forms, for example\n\n* According to the [ASPCA](http://www.aspca.org/animal-homelessness) only 10% of animals entering shelters have been spayed or neutered.\n* Kill shelters euthanize 2.7 million animals per year (Source: [ASPCA](http://www.aspca.org/animal-homelessness)).",
        "CSDU4 - AppLab - 2_markdown_instruction": "# Assigning User Input to Variables\n<img src=\"https://images.code.org/bad81f7d5e514a1d727e51aab52aac10-image-1445552999503.gif\" style=\"width: 350px; float:right\">\nThe `promptNum` command appears in the variables toolbox because it's typically used as a way to get a value from the user that you want to hold on to while the program runs.\n\n`promptNum` is similar to `randomNumber` in that it is a function whose return value *evaluates to a number*. The difference here is that `promptNum` pops up an input dialog box and waits for the user to type a number.  Once they do and hit \"OK\" the number they typed is returned and we can store it in a variable to use in our programs.",
        "CSDU4 - Design Mode - 10_markdown_instruction": "# New Elements and Events: Moving Buttons with Events\n\nOver the next few exerises we will be exploring several new user interface elements and event types. Your code will be pulled forward as you progress through the exercises.\n\n**Moving Past Turtle:** We've been using buttons to move the turtle. For example, in the program you're about to see a button that moves the turtle to a random location on the screen. We're going to alter this program ** so that the button itself moves every time you click it**.\n\n**Notice** that this means that event handlers can affect the elements they are attached to, not just other elements!  This is an interesting technique for apps.  Now you're going to try it...\n\n# Do This:\n* **Change the ID** of the button to something descriptive and meaningful.\n* **Modify** your event handler so that **it no longer moves the turtle** but instead sets the position of the button itself to a random location on the screen.\n\t* TIP: add `setPosition` to the event handler, and just move the `randomNumber` calls from the turtle.\n\t* Recall the screen is **320 by 450 pixels**.\n\n**Before** | **After**\n---|---\n![](https://images.code.org/a4172e43b6707a3170e4eaf54a2a7b1d-image-1444335577799.gif) | <img src=\"https://images.code.org/4e17b077bd8fbdd43f960d26bb3d252d-image-1444335766972.gif\" style=\"width: 150px\">\n\n\n",
        "CSDU4 - Design Mode - 11_markdown_instruction": "# New Elements and Events: New Event Types\n<img src=\"https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06 AM.png\" style=\"float: right\">\n\n**New Events**: You may have noticed that the `onEvent` block has a pull-down menu for the event **type** (see right).\n\n# Do This:\n\n* **Experiment** with **each of the different types of mouse events** by selecting from the list. You can also read about them in the documentation.\n\t* click\n    * mousemove\n    * movedown\n    * mouseup\n    * mouseover\n* **Choose** the mouse event type you like most and change your event handler to use it.\n* **Note:** There are some events that capture keystroke events. These are interesting, but they do not work easily with buttons.  We'll stick to mouse events for now, and get to keys later.",
        "CSDU4 - Design Mode - 12_markdown_instruction": "# New Elements and Events: Text Labels\n<img src=\"https://images.code.org/20d50fd324908fc48633e1325cc37603-image-1444662791509.png\" style=\"float: right\">\nThe UI controls toolbox contains an element called `textLabel`. A text label is what it sounds like: plain text that you can put in your app. Even though it's just plain text you can still move and resize it using `setPosition`, and you can attach event handlers to it as well.\n\n**NOTE:** resizing a text label does not change the font size of the text.  We'll learn how to do that later.  ",
        "CSDU4 - Design Mode - 13_markdown_instruction": "# New Elements and Events: Images\n\n<img src=\"https://images.code.org/a84297658be45dc78bc401d387d10436-image-1444663322356.21.25 AM.png\" style=\"float: right; width: 120px\">\nImages make applications more visually pleasing and interactive. You can add images to your application using the `image` command. For now, just add an `image` element to your app (the default image link is the Code.org logo) and don't worry about choosing a unique image just yet. We'll do that in the very next exercise!",
        "CSDU4 - Design Mode - 16_markdown_instruction": "# Activate Your Button\nIn the last lesson you focused on laying out a page of your app in Design Mode. This is a great, quick way to get the visual side of an app figured out, but it's not very functional. If you click any of the buttons you added, nothing happens. Now you're work towards adding some basic functionality by making the buttons in your app actually _do_ something!\n\n**Goal:** Add code using Design Mode to make the button respond to a click.\n\n# Do This\nYour starter app has two elements, a _label_ with the id `titleLabel` and a _button_ with the id `changeTitleButton`. To start with, you're going to make the button log a message to the console when it's clicked.\n\n* In Design Mode, **click on the provided button to edit its properties**\n* Click on the **Events** tab\n* Insert an `onEvent` from Design Mode by clicking **Insert and show code** under the **Events Tab**.\n* Take a look at the block that was added to the **Code Mode** tab.\n* Run the program, click your button and **look for the output in the _Debug Console_** below the workspace instead of the app window. We will discuss the *Debug Console* on the next level.",
        "CSDU4 - Design Mode - 17_markdown_instruction": "# Updating IDs and Debugging with Console Log\n\nHere we have a couple buttons with event handlers and `console.log` statements, but they are all switched around!\n\nWe should have given the buttons better ID names so we could tell the difference based on the ID. **Can you update the ID names and `console.log` messages to match the correct button? **\n\n# Do This\n\n* **Change the IDs** of the buttons in Design Mode to more descriptive names.\n\n* Switch to Code Mode and notice that the **ID pulldowns have been updated to include the new IDs**. (You still need to select the correct ID from the pulldown menu.)\n\n* **Update the `console.log` messages** to match the buttons.\n",
        "CSDU4 - Design Mode - 18_markdown_instruction": "# Layering and Deleting\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\" style=\"width: 200px; float: right\">User interface elements can overlap one another, so you'll want the ability to change the order or **depth** at which each one is rendered. \n\nIf you **scroll to the bottom of the Properties tab** you'll find buttons which allow you to easily **delete or change the depth** of an element.\n* **Delete an Element** by selecting it (clicking on it) in the design view and then clicking **Delete** in the properties tab.\n* **Change the depth** of elements by using the double or single arrows.\n  * Click the double arrow to send all the way to front or back.\n  * Click the single arrow to move up or down one layer.\n    \n# Do This:\n\nUse the **delete** and **depth** tools to **create the \"After\" image**\n\n\n<table>\n<tr>\n\t<th style=\"text-align:center\">Before</th>\n    <th style=\"text-align:center\">After</th>\n</tr>\n<tr>\n\t<td align=center><img src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\" style=\"width:200px ; border: solid 1px black\"></td>\n    <td style=\"text-align:center\"><img src=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\" style=\"width:200px; border: solid 1px black\"></td>\n</tr>\n</table>",
        "CSDU4 - Design Mode - 21_markdown_instruction": "# Adding Images\nSometimes the functionality you want to represent in your prototype is too complicated to do with just the default buttons and fields. If you want to mock up more advanced interfaces (like a map), the easiest way to do it is with an image\n\n# Do This\n* Find and download an image of a map you like\n* Drag an image element into your app ![](https://images.code.org/cda02ffe3acc869822a551f5cdbf8606-image-1444667846363.37.14 AM.png)\n* Choose your image ![](https://images.code.org/e5b9571ae54af60a3ae597b787e741ea-image-1444667688762.34.42 AM.png)\n\t* **URLs** can be added directly into the \"picture\" field.  \n\t* **Upload images** by clicking \"Choose\".\n\t* **Note:** You can always see all the files you've uploaded by clicking the gear at the top of the toolbox. ![](https://images.code.org/53b405b771bc11bf5d24c84c878c80dd-image-1444668067826.35.10 AM.png)\n* Make sure to give your image a good ID!\n\n",
        "CSDU4 - Design Mode - 24_markdown_instruction": "# Text Input Elements\n\n<img src=\"https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19 PM.png\" style=\"width: 100px; float:right;\">\n\nSetting the text of an element is all well and good, but things are going to get really interesting when we can get text that a user has entered and do something with it.\n\n\n\n# Do This:\n\n* **Add two text input elements to this program**, one for the name and one for the age of the user.\n* **Give your text input elements descriptive and meaningful IDs**.\n* **In Design Mode** set their default text to prompt the user for their name and age.\n* **Compare your app to the example below**.\n\n<img src=\"https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11 PM.png\" style=\"float:left; width:200px;\">\n<br>",
        "CSDU4 - Design Mode - 25_markdown_instruction": "# Getting Text Input\n\nAs we saw a user can now type inside of a text input whenever they want, **but now we'll need a way to access that text**. In order to do that you'll need to use the `getText` command, which you can now find in the **UI Controls** tab.\n\n<img src=\"https://images.code.org/0c6774f2b6d33f8107ec2936102b1a10-image-1445533677192.58.24 PM.png\" style=\"width: 150px;\">\n\nYou can use a `getText` command just like a string within a `console.log` or `write` command. Just like with `setText` you will refer to the UI element by its ID.\n\n![](https://images.code.org/c17e419301d0cfeebf7f0ccee13e415f-image-1445892504376.47.54 PM.png)\n\n# Do This:\n\n* **Read the documentation **  for `getText`.\n* **Add an event handler to the Submit button** that fires when your button is clicked.\n* **Inside the event handler** place code that will **log the name your user input to the console**.\n\n",
        "CSDU4 - Design Mode - 27_markdown_instruction": "# Generating Text Output\n\nSo far we've been outputting our messages to the console, but now we'd like to display them in the app. In order to do so we're going to be using a new UI element called a **textArea**. You can use `setText()` with a **textArea** just like you would with a **textLabel**.\n\n![](https://images.code.org/45e6b6cdb1ca87f53cf1d6bba97cb812-image-1445977693641.24.43 PM.png)\n\nIf we want to combine user input with default text we can do so with **string concatenation** (that's just a fancy phrase for combining strings of text). Together with a **textArea** we can use this ability to compose longer messages based on user input.\n\n# Do This:\n\n* **Add a textArea** to your app and give it a descriptive and meaningful ID.\n* **Create a variable inside your event handler** called `userMessage` to hold the full message that will be sent to the user.\n* **Use string concatenation** to compose a message from the user input.\n\t* eg `var userMessage = \"Welcome \" + userName + \"!\";`\n* **Use `setText()`** to place your `userMessage` inside the `textArea` you created.\n\n<img src=\"https://images.code.org/193af3e0c993dbf0b7af9c571ec5f56d-image-1445977696957.27.08 PM.png\", style=\"width:250px;\">",
        "CSDU4 - Design Mode - 28_markdown_instruction": "# Introducing the  *change* Event\nUp until now you've been using the click of a button to trigger getting the text from an input or text area.\n\nYou can use a new event type to get this behavior: The __'change' event__ is triggered when the user hits 'enter' in a text input after typing.\n\n\n<img src=\"https://images.code.org/7d1725b236471f8e2a0efed5870660da-image-1446071579670.32.36.png\" style=\"width:350px;\">\n\n# Do This:\n<img src=\"https://images.code.org/f8f1f7ae18acbc570a367886bcd6ca88-image-1445976541574.gif\" style=\"width:250px;\">\n- A text input has been created for you that asks for a user's name, as well as a label for the response\n- Attach a \"change\" event handler to the text input.\n- When the \"change\" event triggers, set the text of \"nameResponse\" to the user's input.\n",
        "CSDU4 - Design Mode - 30_markdown_instruction": "# Using `if` to Display Images\n\nWe are going to set up a dice game. We want to show a picture of a single die for each random number generated 1 to 6. We've already set up the screen in Design Mode, with a button to generate the roll and an image to show a picture of the die.\n\n**Note:** The flowchart for the desired behavior is below.\n\n# Do This:\n\n* Add an event handler for the Roll! button so that when the button is clicked it generates a random number from 1 to 6. \n\n* Add conditionals (`if`, `else if`, and `else`) to change the picture of the image (ID: `dice_image`) to display the correct side of the die depending on the random number generated. You will need to use <img src=\"https://images.code.org/89f2c13ef4ead590475c863a087597f8-image-1446535826599.30.16.png\" style=\"width:150px\"> with the URLs below to set the images for the die.\n\t* <img src=\"https://code.org/images/dice/1.png\" style=\"width: 50px\"> Dice 1 Image URL -  https://code.org/images/dice/1.png\n    * <img src=\"https://code.org/images/dice/2.png\" style=\"width: 50px\"> Dice 2 Image URL -  https://code.org/images/dice/2.png\n    * <img src=\"https://code.org/images/dice/3.png\" style=\"width: 50px\"> Dice 3 Image URL - https://code.org/images/dice/3.png\n    * <img src=\"https://code.org/images/dice/4.png\" style=\"width: 50px\"> Dice 4 Image URL - https://code.org/images/dice/4.png\n    * <img src=\"https://code.org/images/dice/5.png\" style=\"width: 50px\"> Dice 5 Image URL - https://code.org/images/dice/5.png\n    * <img src=\"https://code.org/images/dice/6.png\" style=\"width: 50px\"> Dice 6 Image URL -  https://code.org/images/dice/6.png\n\n<img src=\"https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png\" style=\"width: 100%\">\n<a href=\"https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png\" target=\"_blank\">Open diagram in a new tab</a>\n",
        "CSDU4 - Design Mode - 31_markdown_instruction": "# *keypress*\n\nIf we want to add keyboard input to our apps we'll need to learn about how key events work in App Lab. To start let's take a closer look at the `onEvent` block. We already know that event handlers call a function. What we'll see now is that they also **pass a parameter**. The default name for this parameter is simply `event` but you can change it to be anything you like. \n\nThe `event` parameter is a more complex kind of variable (called an \"Object\") that we'll learn more about later. For now just know that for both mouse and keyboard events, the event parameter passes more information about the event. In the case of key events **you can find out the key(s) that were actually pressed by using `event.key`**.\n\n# Do This:\n\n* Drag out an `onEvent` block.\n* Change the ID to `screen1` and the event type to `keypress`.  \n\n<img src=\"https://images.code.org/537b5bbef3db62c90155528e6753a00a-image-1447175732347.gif\" style=\"width: 450px\">\n\n* Once you hit **Run**, **click on the screen so that the keystrokes will register**.\n* **Type different combinations of keys** and check out the results in the console. Does every key combination print to the console? Some keys to try:\n    * Letter keys\n    * Number keys\n    * Shift key\n    * Hold shift and letter\n    * Delete key\n    * Left and right arrow keys\n    * Press and hold a key",
        "CSDU4 - Design Mode - 32_markdown_instruction": "# Using *keyup* and *keydown*\n\nOn the last level, we played with the `keypress` event. Let's take a look at some of the other key events. \n\nYou are going to get the chance to play with `keyup` and `keydown` in this level. **Pay attention to the different values of `event.key` for `keydown` and `keypress`. **\n\n# Do This:\n\n* Switch to the event type to `keydown` or `keyup`. \n\n<img src=\"https://images.code.org/fa91b1a9e3240eb65ff75b381e76ce69-image-1447213909054.gif\" style=\"width: 350px\">\n\n* Try out the event.\n\t* Press and hold a key\n    * Try the arrow keys\n    * Shift\n    * Option\n    * Alt\n    * Others",
        "CSDU4 - Design Mode - 7_markdown_instruction": "**Logical Errors: ** Sometimes you can write a program that generates no errors but does not work as you intend. This is the result of **logical errors** in your code. These can be tricky to catch without knowing what your program is supposed to do in the first place, and usually are only found with careful testing of your app's functionality.\n<img src=\"https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif\" style=\"float: right; width: 150px\">",
        "CSDU4 - Design Mode - 8_markdown_instruction": "# Moving and Sizing Buttons\n\nAn important component of designing intuitive and visually appealing user interfaces is the location of the elements on the screen. Using the `setPosition` command (now added to the Toolbox) you can move and set the size of user interface elements.\n\n![](https://images.code.org/c3e42223cbcb096f992d758973d09f63-image-1444664597665.42.48 AM.png)\n\n**NOTE:**\n  * If you only want to set the size you can use the `setSize` function which looks like this:\n\n ![](https://images.code.org/cb742ecf96c04477db0f8361ad5dcdaf-image-1448924017288.png)\n\n  * If you *only* want to set the position *without* changing the size of the element, you can omit the *width* and *height* parameters from the `setPosition` function.  To do that, you need to switch into text mode, like this:\n\n <img src='https://images.code.org/5b565ef5b74b5cd657ba15c67be92b0d-image-1448924356253.gif' style=\"width: 400px\">\n\n* **Remember:** in an app screen 0,0 is the top left corner and you specify a location by how many pixels from the left and how many down from the top of the screen it is.  The screen is **320 by 450 pixels**.",
        "CSDU4 Functionality setText quiz 1_markdown_instruction": "# Making The Quiz App\n<img src=\"https://images.code.org/b87aef1a1fcd238590b2b866f11f47c7-image-1478035551794.15.03.png\" style=\"float:right; max-width: 200px;\">\nLet's look back at the quiz app example that we talked about earlier in this lesson. Recall that we proposed a single page that could serve three purposes:\n\n1. Display the question\n2. Show if the question was answered correctly\n3. Show if the question was answered incorrectly\n\n# Do This\n\nWe've already provided the screen for a single question. Before worrying about any code, you just need to set this up to ask a question.\n\n* Change the title to a question that you want to ask\n* Change the text of the two buttons to two potential answers to your question",
        "CSDU4 Project Import_2018_markdown_instruction": "# Back To Your App\n\nNow that you've had some practice with importing screens, it's time to start working on your team's app.\n\n# Do This\n\nEach member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.  (Don't forget that you'll also need to import your own screen into this project.)\n\n* Collect all of the sharing urls for your team's pages, **including your own**\n\t* Each team member can find the share url for their own screen by going back to the last level of the previous lesson, or by finding the screen in their [projects directory](/projects)\n* Import each of the screens, one at a time\n\t* If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported\n* Delete the default \"screen1\"\n* Set the main screen as the default\n\nDon't worry about adding any code at this point; we'll get to that in the next level.",
        "CSDU4 nameAgeTemplate_markdown_instruction": "# Text Input Elements\n\nSo far we've been using `promptNum` as a simple way to get a number as input. Now that we know a little about strings were are going to create **user interface elements that users can use to submit text (i.e. strings) instead**. The first and simplest example is `textInput` which you can find in Design Mode.\n\n<img src=\"https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19 PM.png\" style=\"width: 100px\">\n\n# Do This\n\n* **Add two text input elements to this program**, one for the name and one for the age of the user.\n* **Give your text input elements descriptive and meaningful IDs**\n* **In Design Mode** set their default text to prompt the user for their name in age\n* **Compare your app to the example below**\n\n<img src=\"https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11 PM.png\" style=\"float:left; width:200px;\">\n<br>",
        "CSDU6 - button screen buttonL_markdown_instruction": "# Board Events\n\nThe `onBoardEvent()` command allows you to start taking input from your Circuit Playground. This app has two screens, \"red_screen\" and \"blue_screen\". Using the provided board event handler, write a program that switches to the blue screen when the left button on your board is pressed.",
        "CSDU6 - for loop - 9_markdown_instruction": "# *for* Loop with *if*\n\nSometimes we want to find values in an array that meet certain conditions.  We can add an **`if` statement inside the `for` loop** to individually check every value within the array. To practice this, we will create a `for` loop that will **display every value in the array greater than 5**.\n\n# Do This:\n** Starter code** has been been provided that creates an array of random values.\n\n* Add a `for` loop that references every index in the array.\n\n* Add an `if` statement inside the `for` loop that **displays every value in the array greater than 5** using `console.log`\n\t![](https://images.code.org/969077ff23232e410ce17520b0a71e1e-image-1447390972867.gif)\n    \n* **Note:** Because the original array is being constructed with random values it's *possible* that it might not have any values greater than 5.  Just run the program a few times to make sure it works.  An example of the possible output is below.\n\n![](https://images.code.org/266e23afc3533ebd63b393b2ee8682d8-image-1447796380510.39.26 PM.png)\n",
        "CSDU6 - for loop - condition with for_markdown_instruction": "# *for* Loop with *if*\n\nAnother way to use a for loop is to count the number of occurances of something in list. \n\n** Starter Code:** The program generates an list of 5 random numbers from 1 to 3.  \n\n**Write Code:** Write a program that prints the number of 2s in the list.\n\n* You will need to write an if statement to check if the current value of the list is equal to 2\n* Instead of printing that value inside the if statement like on the last level you will want to increment a variable that keeps track of the number of 2s.\n* Print out the variable after the for loop runs!",
        "CSDU6 - sensors temp f c_markdown_instruction": "# Temperatures in Fahrenheit and Celsius\n\nWhile the sound, light, and temperature all behave in the same fashion (converting an analog input to a 10 bit number), the temperature sensor is often used a bit differently. Typically if you are using a temperature sensor, you want to get a temperature in Fahrenheit or Celsius, not just a number in a range. To help with this, the temperature sensor how two special blocks, `tempSensor.F` and `tempSensor.C`.\n\n# Do This\n\nUsing an event handler, write a program that continuously updates the labels \"temp_c\" and \"temp_f\" with the appropriate temperature readings.",
        "CSDU6 - timed loop console.log()_markdown_instruction": "# Starting From Scratch\n\nNow that you've got some practice with `timedLoop()`, let's see if you can set one up from scratch.\n\n# Do This\n\n* Get a `timedLoop()` block from the _Control_ drawer in your toolbox\n* Change the _ms_ input so that the loop runs twice a second\n* Inside the loop, write the console with `console.log()`",
        "CSDU6L06 - lists and colorLeds - song list_markdown_instruction": "<img src=\"//curriculum.code.org/images/circuitplayground/colorLedonoff.gif\" style=\"float: right; margin: 10px;\">\n\n# colorLeds\n\nThe color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. Using the provided buttons, write a program that turns on and off the bottom two color LEDs (the ones furthest away from the USB cable.\n\n# Do This\n\nAdd event handlers to the provided buttons \"on_button\" and \"off_button\" that turn on and off the bottom two color LEDs. Which positions in the `colorLeds` list are those two LEDs?\n\n",
        "CSP U4 - JSON Object Intro - Bad Way_markdown_instruction": "# We've Seen Objects Before\n\nWe're going to see how we can use objects to organize data in our own apps, but this actually isn't the first time we've used objects in our programs. **The object that we've used most frequently is the event parameter of our event handlers**. This single object contains many pieces of information about the event which can be accessed to determine how to respond to the event. For example `event.key` contains the key that was pressed for key events, and `event.offsetX` and `event.offsetY` contain the location of the mouse for mouse events.\n\nBefore we move on to creating objects of our own, let's take another look at this event parameter (or as we'll call it now event object) and recall how they were used.\n\n# Do This\n\n**Starter code** is provided which creates event handlers for both a \"click\" and \"keydown\" event and displays the contents of the event object they create.\n\n* **Run the program** and trigger both a keyboard event and a mouse event.\n* **Examine the objects displayed in the Debug Console** to recall the different pieces of information they contain.\n* **Reflect: ** Why wouldn't we want this information stored in many variables? Why wouldn't we want this information stored in an array?",
        "CSP U5 AP Practice Choose the Algorithm_markdown_instruction": "# AP Practice - Identify the Algorithm\n\nOne component of the **AP Create Performance Task** is selecting an algorithm that you developed.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>3. Program Code</b>\n<ul>\n<li>Mark with an <b>oval</b> the segment of program code that implements the algorithm you created for your program that integrates other algorithms and integrates mathematical and/or logical concepts.</li>\n</ul>\n</div>\n<br>\nHere's the scoring guide for this question\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/3240bf9a7f457b8590cf28c4dd4d5418-image-1516294760622.58.32 AM.png\">\n    <img src=\"https://images.code.org/4edd1b265ad8932a7d6b9294e5622106-image-1516294762983.58.44 AM.png\">\n</div>\n\n\n# Choose the Student-Developed Algorithm\n\nThe program code below is taken from the Color Sleuth activity you just completed.\n\n![](https://images.code.org/4708875d71e4dc7cd06e2c1e472d8fdc-image-1516311447828.png)\n\n**Write which of the ovals (A, B, C, or D) is placed around code that best meets the criteria as a student-developed algorithm.**\n\n**Explain your answer using the criteria in the scoring guide.**",
        "CSP U5 AP Practice Choose the Algorithm_2018_markdown_instruction": "# AP Practice - Identify the Algorithm\n\nOne component of the **AP Create Performance Task** is selecting an algorithm that you developed.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>3. Program Code</b>\n<ul>\n<li>Mark with an <b>oval</b> the segment of program code that implements the algorithm you created for your program that integrates other algorithms and integrates mathematical and/or logical concepts.</li>\n</ul>\n</div>\n<br>\nHere's the scoring guide for this question\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/3240bf9a7f457b8590cf28c4dd4d5418-image-1516294760622.58.32 AM.png\">\n    <img src=\"https://images.code.org/4edd1b265ad8932a7d6b9294e5622106-image-1516294762983.58.44 AM.png\">\n</div>\n\n\n# Choose the Student-Developed Algorithm\n\nThe program code below is taken from the Color Sleuth activity you just completed.\n\n![](https://images.code.org/4708875d71e4dc7cd06e2c1e472d8fdc-image-1516311447828.png)\n\n**Write which of the ovals (A, B, C, or D) is placed around code that best meets the criteria as a student-developed algorithm.**\n\n**Explain your answer using the criteria in the scoring guide.**",
        "CSPPD PD goals_markdown_instruction": "***Now that you've learned more about the CSP Professional Development, let's consider your goals***\n\n<br>\n__What are your personal goals for your CSP PD experience (what do you hope to accomplish, how do you hope to grow)?__ *NOTE: These goals might change over time, and we'll revisit your responses as we go through the course so we can check in on how we're progressing towards those goals.*\n",
        "CSPU5 Add welcome screen to chaser game_markdown_instruction": "# Add A Welcome Screen\n\n<div style=\"float: right; width: 150px\">\n\n\n<img src=\"https://images.code.org/558ae19d0fb8af8c6ec573e5d7ac4e29-image-1477369385328.png\" style=\"float: right; width: 150px\"><br>\n<em>This is an example showing the elements of a welcome screen. Yours <strong> should not </strong> look exactly like this.  Yours should be appropriate for your game.</em>\n\n</div>\n\nLet's improve your \"Chaser Game\" by **adding a welcome screen that shows when the app starts up, and that with a button to start.**\n\n* NOTE: we've imported the chaser game that you made in the last lesson.  That's the starting point for this.  You can continue with this lesson if you don't have it. But you'll need to make a screen for game play along the way.\n\nFollowing the Event Driven Programming pattern:\n\n1. **Design Mode** \n  * Add a New Screen to the App\n  * Make this new screen the **default screen**\n  * Add a new Button to the screen that says \"Start\"\n  * Add text welcoming the user to the game.\n  * Give the button and the screen meaningful IDs\n\n2. **Add an onEvent Handler for the Button**\n  * Insert a new onEvent block (easy way from Design Mode) for the \"start\" button\n\n3. **Add code to the event handling function**\n  * When the \"start\" button is clicked it should `setScreen` to the screen that plays the game.\n  \n4. **Run. Test. Debug.**\n\n Make sure that:\n \n  * When app starts up, your new welcome screen shows first\n  * When you click the \"start\" button it takes you to the game play screen\n  * Note: right now there's no way to get back to the welcome screen - it's okay, we'll add that later.\n\n",
        "CSPU5 Add welcome screen to chaser game_2018_markdown_instruction": "# Add A Welcome Screen\n\n<div style=\"float: right; width: 150px\">\n\n\n<img src=\"https://images.code.org/558ae19d0fb8af8c6ec573e5d7ac4e29-image-1477369385328.png\" style=\"float: right; width: 150px\"><br>\n<em>This is an example showing the elements of a welcome screen. Yours <strong> should not </strong> look exactly like this.  Yours should be appropriate for your game.</em>\n\n</div>\n\nLet's improve your \"Chaser Game\" by **adding a welcome screen that shows when the app starts up, and that with a button to start.**\n\n* NOTE: we've imported the chaser game that you made in the last lesson.  That's the starting point for this.  You can continue with this lesson if you don't have it. But you'll need to make a screen for game play along the way.\n\nFollowing the Event Driven Programming pattern:\n\n1. **Design Mode** \n  * Add a New Screen to the App\n  * Make this new screen the **default screen**\n  * Add a new Button to the screen that says \"Start\"\n  * Add text welcoming the user to the game.\n  * Give the button and the screen meaningful IDs\n\n2. **Add an onEvent Handler for the Button**\n  * Insert a new onEvent block (easy way from Design Mode) for the \"start\" button\n\n3. **Add code to the event handling function**\n  * When the \"start\" button is clicked it should `setScreen` to the screen that plays the game.\n  \n4. **Run. Test. Debug.**\n\n Make sure that:\n \n  * When app starts up, your new welcome screen shows first\n  * When you click the \"start\" button it takes you to the game play screen\n  * Note: right now there's no way to get back to the welcome screen - it's okay, we'll add that later.\n\n",
        "CSPU5 Layering and Deleting in Design Mode_markdown_instruction": "# Design Mode: Layering and Deleting\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\" style=\"width: 150px; float: right\">User interface elements can overlap one another, so you'll want the ability to change the order or **depth** at which each one is shown. \n\n**You Try it:** Use the **depth** and **delete** tools to **create the \"After\" image** (shown below).\n\n* **Scroll to the bottom of the Properties tab** you'll find buttons which allow you to easily **change the depth** of an element.\n* **Change the depth** of elements by using the double or single arrows.\n  * Click the double arrow to send all the way to front or back.\n  * Click the single arrow to move up or down one layer.\n \n* **Delete an Element** by selecting it (clicking on it) in the design view and then clicking the **Red Delete button** in the properties tab.\n\n\n\n\n\n<table>\n<tr>\n\t<th style=\"text-align:center\">Before</th>\n    <th style=\"text-align:center\">After</th>\n</tr>\n<tr>\n\t<td align=center><img src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\" style=\"width:200px ; border: solid 1px black\"></td>\n    <td style=\"text-align:center\"><img src=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\" style=\"width:200px; border: solid 1px black\"></td>\n</tr>\n</table>",
        "CSPU5 Layering and Deleting in Design Mode_2018_markdown_instruction": "# Design Mode: Layering and Deleting\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\" style=\"width: 150px; float: right\">User interface elements can overlap one another, so you'll want the ability to change the order or **depth** at which each one is shown. \n\n**You Try it:** Use the **depth** and **delete** tools to **create the \"After\" image** (shown below).\n\n* **Scroll to the bottom of the Properties tab** you'll find buttons which allow you to easily **change the depth** of an element.\n* **Change the depth** of elements by using the double or single arrows.\n  * Click the double arrow to send all the way to front or back.\n  * Click the single arrow to move up or down one layer.\n \n* **Delete an Element** by selecting it (clicking on it) in the design view and then clicking the **Red Delete button** in the properties tab.\n\n\n\n\n\n<table>\n<tr>\n\t<th style=\"text-align:center\">Before</th>\n    <th style=\"text-align:center\">After</th>\n</tr>\n<tr>\n\t<td align=center><img src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\" style=\"width:200px ; border: solid 1px black\"></td>\n    <td style=\"text-align:center\"><img src=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\" style=\"width:200px; border: solid 1px black\"></td>\n</tr>\n</table>",
        "CSPU5 Use Console.log to update IDs_markdown_instruction": "# Updating IDs and Debugging with Console Log\n\nIn the last level you tested out the new command: `console.log`.  In this level we have a couple buttons with event handlers and `console.log` statements, but they are switched around!\n\nWe should have given the buttons better ID names so we could tell the difference based on the ID. **Can you update the ID names and `console.log` messages to match the correct button? **\n\n# Do This\n\n* **Change the IDs** of the buttons in Design Mode to more descriptive names.\n\n* Switch to Code Mode and notice that the **ID pulldowns have been updated to include the new IDs**. (You still need to select the correct ID from the pulldown menu.)\n\n* **Update the `console.log` messages** to match the buttons.\n",
        "CSPU5_U3 - Arrays - favThings Counting Variable_markdown_instruction": "# Current Index\n\nThis app also allows a user to scroll through individual items in the array. In order to keep track of which index we are currently viewing, our application will need **a global variable that stores the current index**. In coming exercises we'll want our global index to change, so let's **make sure that your code references your global index** rather than fixed values.\n\n# Do This:\n\n<img src=\"https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43 AM.png\" style=\"width: 250px; float: right\">\n\n* Create a **global variable** that will be used to keep track of the current index in the array. Set this variable to 0.\n* Update `setText` which displays the words to show your first favorite thing using **the global index variable** instead of a hard-coded number. \n* Update `setText` which displays the current item number to use **the global index variable** instead of a hard-coded number.\n\t* **Hint:** since arrays are zero-indexed **you will have to add one to your index** to generate the correct value to display.\n* **Note:** neither of these outputs will be able to change yet. Don't worry, we'll be taking care of that in coming exercises!",
        "CSPU5_U3 - Arrays - favThings Counting Variable_2018_markdown_instruction": "# Current Index\n\nThis app also allows a user to scroll through individual items in the array. In order to keep track of which index we are currently viewing, our application will need **a global variable that stores the current index**. In coming exercises we'll want our global index to change, so let's **make sure that your code references your global index** rather than fixed values.\n\n# Do This:\n\n<img src=\"https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43 AM.png\" style=\"width: 250px; float: right\">\n\n* Create a **global variable** that will be used to keep track of the current index in the array. Set this variable to 0.\n* Update `setText` which displays the words to show your first favorite thing using **the global index variable** instead of a hard-coded number. \n* Update `setText` which displays the current item number to use **the global index variable** instead of a hard-coded number.\n\t* **Hint:** since arrays are zero-indexed **you will have to add one to your index** to generate the correct value to display.\n* **Note:** neither of these outputs will be able to change yet. Don't worry, we'll be taking care of that in coming exercises!",
        "CSPU5_U3 - Arrays - favThings Next_markdown_instruction": "# Next Button\n\nNice work! Your application should now have some simple output displaying one of your favorite things and indicating which item of your list you are showing. To make things more interesting, however, **we want to be able to change which item we display**.\n\nTo change the item displayed, the user will use the \"Next\" and \"Last\" buttons. These should **increase or decrease the global index by one and then you should update the information displayed on the screen**. To start out with, however, we'll just be writing code for our Next Button. \n\n# Do This:\n\n* **Add an event handler** to the \"Next\" button.\n* Write code in this event handler that **increments your global index variable** and then **updates the output on the screen**.\n\t* **Note:** If your code from the last exercise was written to reference this variable then you should just be able to reuse it once you've incremented your variable. We'll talk more about this in the next exercise.\n* Run your program to **confirm that the user can move forward through the list and that the output displayed is correct**.\n\t* **Note:** You may notice that your program throws an error if the global index variable goes out of bounds. Don't worry about this for now - we'll fix it in a later exercise.",
        "CSPU5_U3 - Arrays - favThings Next_2018_markdown_instruction": "# Next Button\n\nNice work! Your application should now have some simple output displaying one of your favorite things and indicating which item of your list you are showing. To make things more interesting, however, **we want to be able to change which item we display**.\n\nTo change the item displayed, the user will use the \"Next\" and \"Last\" buttons. These should **increase or decrease the global index by one and then you should update the information displayed on the screen**. To start out with, however, we'll just be writing code for our Next Button. \n\n# Do This:\n\n* **Add an event handler** to the \"Next\" button.\n* Write code in this event handler that **increments your global index variable** and then **updates the output on the screen**.\n\t* **Note:** If your code from the last exercise was written to reference this variable then you should just be able to reuse it once you've incremented your variable. We'll talk more about this in the next exercise.\n* Run your program to **confirm that the user can move forward through the list and that the output displayed is correct**.\n\t* **Note:** You may notice that your program throws an error if the global index variable goes out of bounds. Don't worry about this for now - we'll fix it in a later exercise.",
        "CSPU5_U3 - Arrays - favThings Prev_markdown_instruction": "# Last Button\n\nOur user can now move forward through our list of favorite things, and we're about to write code that allows them to move backwards as well. If you've written your code to reference your global index then this should only require you to decrease its value by one and reuse code that updates the screen output. Before we write the code for backwards let's work on cleaning up our code.\n\n**Removing Repeated Code:** Once you add the code for moving backwards through your array, your program will have three places where it updates the screen by setting the text of your screen elements. Rather than repeating this code we should **create a function** that updates the screen and then call it every time we need to refresh those elements. This will not only make our program easier to read and avoids the errors that can arise from redundant code, but it also makes it easier to make changes to how our program runs, since all the code that updates the screen is in a single place.\n\n# Do This:\n\n* **Write a function** that contains the `setText` commands you have used to update the screen.\n* **Replace** the places in your code where you used to have these commands with **calls to your new function**.\n* **Add an event handler** to the \"Last\" button that decreases the **global index variable** by one and then updates the screen by calling your new function.\n* Run your program to confirm that the user **can move forward AND backward** through the list and that the output displayed is correct.\n  * **Note:** You may notice that your program throws an error if the global index variable goes out of bounds. Don't worry about this for now - we'll fix it in a later exercise.",
        "CSPU5_U3 - Arrays - favThings Prev_2018_markdown_instruction": "# Last Button\n\nOur user can now move forward through our list of favorite things, and we're about to write code that allows them to move backwards as well. If you've written your code to reference your global index then this should only require you to decrease its value by one and reuse code that updates the screen output. Before we write the code for backwards let's work on cleaning up our code.\n\n**Removing Repeated Code:** Once you add the code for moving backwards through your array, your program will have three places where it updates the screen by setting the text of your screen elements. Rather than repeating this code we should **create a function** that updates the screen and then call it every time we need to refresh those elements. This will not only make our program easier to read and avoids the errors that can arise from redundant code, but it also makes it easier to make changes to how our program runs, since all the code that updates the screen is in a single place.\n\n# Do This:\n\n* **Write a function** that contains the `setText` commands you have used to update the screen.\n* **Replace** the places in your code where you used to have these commands with **calls to your new function**.\n* **Add an event handler** to the \"Last\" button that decreases the **global index variable** by one and then updates the screen by calling your new function.\n* Run your program to confirm that the user **can move forward AND backward** through the list and that the output displayed is correct.\n  * **Note:** You may notice that your program throws an error if the global index variable goes out of bounds. Don't worry about this for now - we'll fix it in a later exercise.",
        "CSPU5_U3 - Arrays - favThings addItem_markdown_instruction": "# Adding New Items\n\nNow we want our user to be able to add items of their own to the list. As you might have guessed, this is as easy as inserting an item into our array at the current index.\n\n# Do This:\n\n* **Add an event handler** to the \"Add\" button.\n* **Write code** in your event handler that:\n\t* Uses `getText` to access the user's new item.\n    * Uses`insertItem` to add that item to your array at the current index.\n    * Calls your update function to update the screen (the new item should be displayed).\n* Run your program to confirm that the user **can add items to the list** and that the output displayed is correct.",
        "CSPU5_U3 - Arrays - favThings addItem_2018_markdown_instruction": "# Adding New Items\n\nNow we want our user to be able to add items of their own to the list. As you might have guessed, this is as easy as inserting an item into our array at the current index.\n\n# Do This:\n\n* **Add an event handler** to the \"Add\" button.\n* **Write code** in your event handler that:\n\t* Uses `getText` to access the user's new item.\n    * Uses`insertItem` to add that item to your array at the current index.\n    * Calls your update function to update the screen (the new item should be displayed).\n* Run your program to confirm that the user **can add items to the list** and that the output displayed is correct.",
        "CSPU5_U3 - Arrays - favThings firstOutput_markdown_instruction": "# Displaying Information to the User\n\nBefore we make our application interactive, we'll want to practice creating some simple user output. When the app starts up, the first item in your list should be displayed. Let's write the code that will display this information to the screen. \n\n# Do This:\n\n<img src=\"https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43 AM.png\" style=\"width: 250px; float:right\">\n\n* Using `setText` set the main text area to show your first favorite thing.\n* Using `setText` and `list.length` set the text indicating what item of the list the user is currently viewing.\n\t* **Hint:** since arrays are zero-indexed **you will have to add one to your index** to generate the correct value to display. For now you can just write in a `1` and worry about making it change later.\n* **Note:** neither of these outputs will be able to change yet. Don't worry, we'll be taking care of that in coming exercises!\n\n",
        "CSPU5_U3 - Arrays - favThings firstOutput_2018_markdown_instruction": "# Displaying Information to the User\n\nBefore we make our application interactive, we'll want to practice creating some simple user output. When the app starts up, the first item in your list should be displayed. Let's write the code that will display this information to the screen. \n\n# Do This:\n\n<img src=\"https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43 AM.png\" style=\"width: 250px; float:right\">\n\n* Using `setText` set the main text area to show your first favorite thing.\n* Using `setText` and `list.length` set the text indicating what item of the list the user is currently viewing.\n\t* **Hint:** since arrays are zero-indexed **you will have to add one to your index** to generate the correct value to display. For now you can just write in a `1` and worry about making it change later.\n* **Note:** neither of these outputs will be able to change yet. Don't worry, we'll be taking care of that in coming exercises!\n\n",
        "CSPU5_U3 - Canvas - 200dots_markdown_instruction": "# Loops on the Canvas\n\nTo make things interesting, we're going to quickly add 200 dots to our canvas by using a `for` loop. **Locations on the canvas are relative to the top-left corner of the canvas, not the screen**. Therefore you will need to know the dimensions of your canvas in order to randomly place dots throughout it. You can find this information in Design Mode:\n\n![](https://images.code.org/8e0c868a21f5c674efb6adef1040ec2b-image-1448040822360.33.29 AM.png)\n\n# Do This:\n\n<img src=\"https://images.code.org/345b625e6954dc1ea2310c97aa08c59f-image-1448243004939.gif\" style=\"float: right\">\n* Add a **`for` loop that runs 200 times.**\n* Place the **`circle` command inside the loop** and **decrease the radius** (try 20).\n* **Use `randomNumber` to randomize the `x` and `y` values used to place your dots**. The ranges you select should be the width and height of your canvas.  \n* **COMMON MISTAKE ALERT:** If you test your code before setting the `x` and `y` values of the circle to random numbers, it will look like there's only one dot.  But really you will have just drawn 200 dots all at the same (x,&nbsp;y) position.\n\n",
        "CSPU5_U3 - Canvas - 200dots_2018_markdown_instruction": "# Loops on the Canvas\n\nTo make things interesting, we're going to quickly add 200 dots to our canvas by using a `for` loop. **Locations on the canvas are relative to the top-left corner of the canvas, not the screen**. Therefore you will need to know the dimensions of your canvas in order to randomly place dots throughout it. You can find this information in Design Mode:\n\n![](https://images.code.org/8e0c868a21f5c674efb6adef1040ec2b-image-1448040822360.33.29 AM.png)\n\n# Do This:\n\n<img src=\"https://images.code.org/345b625e6954dc1ea2310c97aa08c59f-image-1448243004939.gif\" style=\"float: right\">\n* Add a **`for` loop that runs 200 times.**\n* Place the **`circle` command inside the loop** and **decrease the radius** (try 20).\n* **Use `randomNumber` to randomize the `x` and `y` values used to place your dots**. The ranges you select should be the width and height of your canvas.  \n* **COMMON MISTAKE ALERT:** If you test your code before setting the `x` and `y` values of the circle to random numbers, it will look like there's only one dot.  But really you will have just drawn 200 dots all at the same (x,&nbsp;y) position.\n\n",
        "CSPU5_U3 - Canvas - One Dot sprayPaint_markdown_instruction": "# Making Spray Paint\n\nThe next effect we would like to create is a \"spray paint\" effect. Instead of drawing a single dot for every location stored in `eventList`, we'll draw many small dots randomly placed around each location.\n\nWe are going to start off just practicing **drawing a circle whose x and y locations use `offsetX` and `offsetY` with a small random value added**. This makes the line of code to draw the circle kind of long, but hopefully it's easy to understand if you read it carefully.\n\n![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\n\n# Do This:\n\n* **Set the style of another button** in Design Mode, give a label like \"Spray Paint,\" give it a descriptive ID, and attach a click event handler to it.\n* **Copy the code from the \"Original\"** button into the event handler for spray paint.\n* Change the code for `circle` so that it will **draw a dot whose x and y locations use `offsetX` and `offsetY` with a small random value added. **\n\n![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\n\n* **Run your app** to make sure it is drawing small dots close to the original position. Look at the example below.\n\n![](https://images.code.org/d6279085a5c6689dd5c745a0d0e28136-image-1448386996780.gif)",
        "CSPU5_U3 - Canvas - One Dot sprayPaint_2018_markdown_instruction": "# Making Spray Paint\n\nThe next effect we would like to create is a \"spray paint\" effect. Instead of drawing a single dot for every location stored in `eventList`, we'll draw many small dots randomly placed around each location.\n\nWe are going to start off just practicing **drawing a circle whose x and y locations use `offsetX` and `offsetY` with a small random value added**. This makes the line of code to draw the circle kind of long, but hopefully it's easy to understand if you read it carefully.\n\n![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\n\n# Do This:\n\n* **Set the style of another button** in Design Mode, give a label like \"Spray Paint,\" give it a descriptive ID, and attach a click event handler to it.\n* **Copy the code from the \"Original\"** button into the event handler for spray paint.\n* Change the code for `circle` so that it will **draw a dot whose x and y locations use `offsetX` and `offsetY` with a small random value added. **\n\n![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\n\n* **Run your app** to make sure it is drawing small dots close to the original position. Look at the example below.\n\n![](https://images.code.org/d6279085a5c6689dd5c745a0d0e28136-image-1448386996780.gif)",
        "CSPU5_U3 - Canvas - changeToMouseMove_markdown_instruction": "# Drawing on *mousemove*\n\nCurrently the user can click to add dots, but we want **to place dots wherever the user moves the mouse on the canvas**.\n\nTo place dots whenever the mouse is moved, we'll be **changing the event type from `click` to `mousemove`**.\n\n# Do This:\n<img src=\"https://images.code.org/960ac863ac908506724eeb9f11165672-image-1448246938599.gif\" style=\"float: right\">\n* Change the event type in your event handler **from `click` to `mousemove`**.\n* **Run your program** to confirm that dots are being drawn anywhere the user moves the mouse.\n\n**Your user is now able to draw anywhere they want on the screen!**",
        "CSPU5_U3 - Canvas - changeToMouseMove_2018_markdown_instruction": "# Drawing on *mousemove*\n\nCurrently the user can click to add dots, but we want **to place dots wherever the user moves the mouse on the canvas**.\n\nTo place dots whenever the mouse is moved, we'll be **changing the event type from `click` to `mousemove`**.\n\n# Do This:\n<img src=\"https://images.code.org/960ac863ac908506724eeb9f11165672-image-1448246938599.gif\" style=\"float: right\">\n* Change the event type in your event handler **from `click` to `mousemove`**.\n* **Run your program** to confirm that dots are being drawn anywhere the user moves the mouse.\n\n**Your user is now able to draw anywhere they want on the screen!**",
        "CSPU5_U3 - Canvas - introCanvas_markdown_instruction": "# Introducing Canvas\n\nToday we are going to be building a drawing app around **a new UI element called the canvas**.![](https://images.code.org/26713ddcc9477e64c347c228d68cac0a-image-1447994134674.35.25 PM.png)\n\n![](https://images.code.org/044ad7db1cb4101f54302bd4013d1cc2-image-1448241882228.gif)\n\n**A canvas is simply a transparent rectangle on which you can draw basic shapes** like lines, circles, and rectangles. In fact, at first you might feel like we're going to end this unit in the way we started it, making turtle drawings. Don't worry, we'll quickly move into new and exciting things we can do with this new UI element.\n\n# Do This:\n<img src=\"https://images.code.org/3874f5e430a6290544466b2037490ae4-image-1448242142421.28.33 PM.png\" style=\"float: right\">\n* **Starter code** is provided which places buttons on the bottom of your screen. **Ignore these for now; we'll be using them later**.\n* **In Design Mode, drag a canvas element into the empty space at the top of your app**, resize it, and give it a descriptive ID.\n* **Call `setActiveCanvas` with the ID you assigned to your canvas**, which makes it responsive to canvas commands.\n* **Add a giant circle to the canvas.** Use the `circle` command. Make its radius large enough that it goes off the edge of your canvas.\n\nYour code will look something like this:\n\n![](https://images.code.org/f0cc22a1de686db72ebce90c720ae6e4-image-1447994225253.36.59 PM.png)",
        "CSPU5_U3 - Canvas - introCanvas_2018_markdown_instruction": "# Introducing Canvas\n\nToday we are going to be building a drawing app around **a new UI element called the canvas**.![](https://images.code.org/26713ddcc9477e64c347c228d68cac0a-image-1447994134674.35.25 PM.png)\n\n![](https://images.code.org/044ad7db1cb4101f54302bd4013d1cc2-image-1448241882228.gif)\n\n**A canvas is simply a transparent rectangle on which you can draw basic shapes** like lines, circles, and rectangles. In fact, at first you might feel like we're going to end this unit in the way we started it, making turtle drawings. Don't worry, we'll quickly move into new and exciting things we can do with this new UI element.\n\n# Do This:\n<img src=\"https://images.code.org/3874f5e430a6290544466b2037490ae4-image-1448242142421.28.33 PM.png\" style=\"float: right\">\n* **Starter code** is provided which places buttons on the bottom of your screen. **Ignore these for now; we'll be using them later**.\n* **In Design Mode, drag a canvas element into the empty space at the top of your app**, resize it, and give it a descriptive ID.\n* **Call `setActiveCanvas` with the ID you assigned to your canvas**, which makes it responsive to canvas commands.\n* **Add a giant circle to the canvas.** Use the `circle` command. Make its radius large enough that it goes off the edge of your canvas.\n\nYour code will look something like this:\n\n![](https://images.code.org/f0cc22a1de686db72ebce90c720ae6e4-image-1447994225253.36.59 PM.png)",
        "CSPU5_U3 - Canvas - movementFunction_markdown_instruction": "# Adjusting Circle Size\n\nAmong the other pieces of information contained in each `event` parameter are the values `movementX` and `movementY`. These numbers tell us how far (in pixels) the mouse moved since the last mouse event was triggered, and can be used to measure the speed of the mouse. ** If the movement is large, the mouse is moving fast; if the movement is small, the mouse is moving slowly.**\n\nLet's use the mouse movement speed to make a cool effect. When we draw with a real pen or brush, the line usually gets thin when making quick strokes and is wider and darker when making slower ones. We can generate this effect by **using `movementX` and `movementY` to calculate the radius for the circle.**  Since this calculation might be a little tricky, a smart thing to do would be to **write a function** that takes `movementX` and `movementY` as parameters and **returns** a value that should be used as the radius.\n\n<img src=\"https://images.code.org/b9dc4c20d44af7b4e7725b71cd35fa2b-image-1448313734191.21.43 PM.png\" style=\"width: 350px; float: right; border: solid 1px black\">\n\nThere are several ways to do this. One possible way to write the function is provided on the right, which uses some arithmetic tricks. The function to the right is actually only three lines of code but is heavily commented to explain what it's doing. It makes use of a function called **`Math.abs` which returns the absolute value of a number.** Feel free to use this or another method of converting `movementX` and `movementY` into a radius.\n\n<details> <summary><strong>What is Absolute Value?</strong> [click to expand]</summary>\n`Math.abs` takes a number as input and returns the positive version of this number. \n\nIn math, absolute value is often written with this | | symbol. So |10| is the absolute value of ten and |-10| is the absolute value of negative ten. Both evaluate to 10.\n\nIn Javascript we use `Math.abs` instead of | |.  `Math.abs(-10)` and `Math.abs(10)` both evaluate to <strong>10</strong>.\n</details> <br>\n\n# Do This:\n\n* **Write a function like the one above** that accepts two parameters (one each for `movementX` and `movementY`) and returns a radius. A higher speed should lead to a smaller radius.\n* **Inside your `mousemove` event handler,** set the radius of the circle to the value returned by your function, where the function takes `event.movementX` and `event.movementY` as input.  For example, if using the function above, your code would be: <br>![](https://images.code.org/94a379336084954ba2ab27e80b17dee3-image-1448314255797.30.22 PM.png)\n* Run your program and confirm that **when you draw, the speed of the mouse affects the radius of the dots**. The effect should look something like what's below \n\n![](https://images.code.org/ee83d18f04e4d9d486428273b7321f9f-image-1448394071473.gif)",
        "CSPU5_U3 - Canvas - movementFunction_2018_markdown_instruction": "# Adjusting Circle Size\n\nAmong the other pieces of information contained in each `event` parameter are the values `movementX` and `movementY`. These numbers tell us how far (in pixels) the mouse moved since the last mouse event was triggered, and can be used to measure the speed of the mouse. ** If the movement is large, the mouse is moving fast; if the movement is small, the mouse is moving slowly.**\n\nLet's use the mouse movement speed to make a cool effect. When we draw with a real pen or brush, the line usually gets thin when making quick strokes and is wider and darker when making slower ones. We can generate this effect by **using `movementX` and `movementY` to calculate the radius for the circle.**  Since this calculation might be a little tricky, a smart thing to do would be to **write a function** that takes `movementX` and `movementY` as parameters and **returns** a value that should be used as the radius.\n\n<img src=\"https://images.code.org/b9dc4c20d44af7b4e7725b71cd35fa2b-image-1448313734191.21.43 PM.png\" style=\"width: 350px; float: right; border: solid 1px black\">\n\nThere are several ways to do this. One possible way to write the function is provided on the right, which uses some arithmetic tricks. The function to the right is actually only three lines of code but is heavily commented to explain what it's doing. It makes use of a function called **`Math.abs` which returns the absolute value of a number.** Feel free to use this or another method of converting `movementX` and `movementY` into a radius.\n\n<details> <summary><strong>What is Absolute Value?</strong> [click to expand]</summary>\n`Math.abs` takes a number as input and returns the positive version of this number. \n\nIn math, absolute value is often written with this | | symbol. So |10| is the absolute value of ten and |-10| is the absolute value of negative ten. Both evaluate to 10.\n\nIn Javascript we use `Math.abs` instead of | |.  `Math.abs(-10)` and `Math.abs(10)` both evaluate to <strong>10</strong>.\n</details> <br>\n\n# Do This:\n\n* **Write a function like the one above** that accepts two parameters (one each for `movementX` and `movementY`) and returns a radius. A higher speed should lead to a smaller radius.\n* **Inside your `mousemove` event handler,** set the radius of the circle to the value returned by your function, where the function takes `event.movementX` and `event.movementY` as input.  For example, if using the function above, your code would be: <br>![](https://images.code.org/94a379336084954ba2ab27e80b17dee3-image-1448314255797.30.22 PM.png)\n* Run your program and confirm that **when you draw, the speed of the mouse affects the radius of the dots**. The effect should look something like what's below \n\n![](https://images.code.org/ee83d18f04e4d9d486428273b7321f9f-image-1448394071473.gif)",
        "CSPU5_U3 - Canvas - redrawOriginal_markdown_instruction": "# Redraw Original\n\nIf you were able to get that working and understand what you did, congratulations! That was some serious programming! If not, take a moment to go back and talk through the different components with a classmate. Most of the work we'll be doing for the rest of this lesson uses similar patterns, and you'll want to be comfortable with them as we add more complexity to our app.\n\nThe first thing we are going to do is **create an \"Original\" button that will redraw the image with the same circle radius you used before**. The process will be nearly identical to how you added the \"Random\" button.\n\nIn fact, the code to redraw the original is *exactly* the same, except instead of making the radius of the circle be random, it will just be the fixed value you used originally (probably radius 5 or so).\n\n![](https://images.code.org/9238e313e8f635e2e6b31ad19d0fdc41-image-1448290929994.gif)\n\n# Do This:\n\n<img src=\"https://images.code.org/6cf1d46af7cd92cc1faf1501366e2e1a-image-1448312993714.gif\" style=\"width: 200px; float: right\">\n(**NOTE:** The instructions below are shown in the code animation above.)\n\n* Style a button, give it label like \"Original,\" give it a meaningful ID, and add a \"click\" event handler.\n* Inside the event handler for your \"Original\" button...\n\t* Copy the code from the \"Random\" button event handler.\n    * Paste it inside the event handler for the \"Original\" button.\n\t* Set the `radius` parameter to **whatever value you used when you originally drew dots**.\n* Test your program by drawing a figure and then hitting your \"Randomize\" button. Then hit the \"Original\" button. Your original drawing should appear.",
        "CSPU5_U3 - Canvas - redrawOriginal_2018_markdown_instruction": "# Redraw Original\n\nIf you were able to get that working and understand what you did, congratulations! That was some serious programming! If not, take a moment to go back and talk through the different components with a classmate. Most of the work we'll be doing for the rest of this lesson uses similar patterns, and you'll want to be comfortable with them as we add more complexity to our app.\n\nThe first thing we are going to do is **create an \"Original\" button that will redraw the image with the same circle radius you used before**. The process will be nearly identical to how you added the \"Random\" button.\n\nIn fact, the code to redraw the original is *exactly* the same, except instead of making the radius of the circle be random, it will just be the fixed value you used originally (probably radius 5 or so).\n\n![](https://images.code.org/9238e313e8f635e2e6b31ad19d0fdc41-image-1448290929994.gif)\n\n# Do This:\n\n<img src=\"https://images.code.org/6cf1d46af7cd92cc1faf1501366e2e1a-image-1448312993714.gif\" style=\"width: 200px; float: right\">\n(**NOTE:** The instructions below are shown in the code animation above.)\n\n* Style a button, give it label like \"Original,\" give it a meaningful ID, and add a \"click\" event handler.\n* Inside the event handler for your \"Original\" button...\n\t* Copy the code from the \"Random\" button event handler.\n    * Paste it inside the event handler for the \"Original\" button.\n\t* Set the `radius` parameter to **whatever value you used when you originally drew dots**.\n* Test your program by drawing a figure and then hitting your \"Randomize\" button. Then hit the \"Original\" button. Your original drawing should appear.",
        "CSPU5_U3 - Canvas - sketch_markdown_instruction": "# Relative Indexes\n\nWhen looping over an array, we use a counter variable (typically `i`) to keep track of which index we're at. We can then access the contents at each index with the syntax `list[i]`.\n\nIf we want, however, we could access the contents of the next element as well, since its index is just one greater. For example, if we are currently focused on the element at index `i`, then `list[i+1]` gives us access to the next element in the array. In other words, you can **reference indexes relative to your counter variable**.\n\n![](https://images.code.org/3bb5dfce60951040172bfe08d98a8750-image-1448393281688.png)\n\nWe are going to use relative indexing to create our final effect, which will look sort of like an etching of the image. The idea is simple:  **for every (x,&nbsp;y) location in the event list, draw a straight line between that location and the location stored 10 spots further down the array.** You will use the **`line` command** to draw a line connecting these points.\n\n# Do This:\n\n* **Read the documentation for `line`**.\n* **Set the style of the final button** in Design Mode, give a label like \"Etch,\" give it a descriptive ID, and attach a click event handler to it.\n* **Call `clearCanvas`** to clear the screen.\n* Create a `for` loop that counts from **0 to `eventList.length - 10`**. \n\t* Why do you think we're not counting over the entire array?\n* Use `line` to draw a line between the (x,&nbsp;y) locations of `eventList[i]` and `eventList[i+10]`.  The full line of code will be another big one: ![](https://images.code.org/5de2c40b56042069379ff20ce5d10cab-image-1448393948598.38.49 PM.png)\n* **Use `setStrokeColor` and/or `setStrokeWidth` inside the event handler** to make the lines visible; otherwise, they will be transparent, since we set the stroke color to transparent at the beginning of the program.\n* **Run your app** and confirm that your new button creates a sketch effect, as shown below.\n\n![](https://images.code.org/c06c268a4757e8838435e576a676a0a2-image-1448395181441.gif)",
        "CSPU5_U3 - Canvas - sketch_2018_markdown_instruction": "# Relative Indexes\n\nWhen looping over an array, we use a counter variable (typically `i`) to keep track of which index we're at. We can then access the contents at each index with the syntax `list[i]`.\n\nIf we want, however, we could access the contents of the next element as well, since its index is just one greater. For example, if we are currently focused on the element at index `i`, then `list[i+1]` gives us access to the next element in the array. In other words, you can **reference indexes relative to your counter variable**.\n\n![](https://images.code.org/3bb5dfce60951040172bfe08d98a8750-image-1448393281688.png)\n\nWe are going to use relative indexing to create our final effect, which will look sort of like an etching of the image. The idea is simple:  **for every (x,&nbsp;y) location in the event list, draw a straight line between that location and the location stored 10 spots further down the array.** You will use the **`line` command** to draw a line connecting these points.\n\n# Do This:\n\n* **Read the documentation for `line`**.\n* **Set the style of the final button** in Design Mode, give a label like \"Etch,\" give it a descriptive ID, and attach a click event handler to it.\n* **Call `clearCanvas`** to clear the screen.\n* Create a `for` loop that counts from **0 to `eventList.length - 10`**. \n\t* Why do you think we're not counting over the entire array?\n* Use `line` to draw a line between the (x,&nbsp;y) locations of `eventList[i]` and `eventList[i+10]`.  The full line of code will be another big one: ![](https://images.code.org/5de2c40b56042069379ff20ce5d10cab-image-1448393948598.38.49 PM.png)\n* **Use `setStrokeColor` and/or `setStrokeWidth` inside the event handler** to make the lines visible; otherwise, they will be transparent, since we set the stroke color to transparent at the beginning of the program.\n* **Run your app** and confirm that your new button creates a sketch effect, as shown below.\n\n![](https://images.code.org/c06c268a4757e8838435e576a676a0a2-image-1448395181441.gif)",
        "CSPU5_U3 - Canvas - sprayPaint_markdown_instruction": "# Making Spray Paint with Nested Loops\n\nIn order to make \"Spray Paint\" look more real you will need to draw multiple dots randomly placed around the original x and y locations. In order to do this, you will place one `for` loop inside of another, also known as a **nested loop**. You already have the main loop which visits every index in `eventList`. The inner loop should **draw 5 circles whose x and y locations use `offsetX` and `offsetY` with a small random value added**.   \n\n# Nested Loops\n\n<img src=\"https://images.code.org/15d7590ed9d4c07a40f22da4decc396c-image-1448153719856.54.36 PM.png\" width= 300px ; style=\"float: right\">\n**When nesting loops, it is important that you use different variables to count your iterations**. Look at the example at right.  These nested loops effectively say: **\"for every possible value in `eventList.length`, run a loop 5 times\".  **\n\nSince `i` is used as the counter variable in the outer loop, we need to use a *different counter variable for the inner `for` loop*, or things will go haywire. Why? **If both loops used `i` as a counter variable, the inner loop would keep changing `i` and the outer loop wouldn't count properly.** The example uses `j` as the inner loop variable, but you could use anything that's *not* `i`.\n\n<img src=\"https://images.code.org/b5184430a48ac55d8f6fe7280c983186-image-1448387927473.gif\" style=\"width: 450px\">\n\n# Do This:\n\n<img src=\"https://images.code.org/290adbb84a51b89ca27414746d3a4a93-image-1448395072342.gif\" style=\"width: 200px; float: right\">\n\n(**Note:** Steps shown in animation above.)\n\n* **Add a `for` loop inside the existing `for` loop** in the spray paint event handler. \n* **Change the counter variable** to something other than `i` for the inner `for` loop.\n* **Change the boolean condition** so the inner loop will run **5 times.**\n* **Move the circle** code inside both `for` loops.\n* **Run your app** and confirm that your new button creates a spray paint effect, as shown below.",
        "CSPU5_U3 - Canvas - sprayPaint_2018_markdown_instruction": "# Making Spray Paint with Nested Loops\n\nIn order to make \"Spray Paint\" look more real you will need to draw multiple dots randomly placed around the original x and y locations. In order to do this, you will place one `for` loop inside of another, also known as a **nested loop**. You already have the main loop which visits every index in `eventList`. The inner loop should **draw 5 circles whose x and y locations use `offsetX` and `offsetY` with a small random value added**.   \n\n# Nested Loops\n\n<img src=\"https://images.code.org/15d7590ed9d4c07a40f22da4decc396c-image-1448153719856.54.36 PM.png\" width= 300px ; style=\"float: right\">\n**When nesting loops, it is important that you use different variables to count your iterations**. Look at the example at right.  These nested loops effectively say: **\"for every possible value in `eventList.length`, run a loop 5 times\".  **\n\nSince `i` is used as the counter variable in the outer loop, we need to use a *different counter variable for the inner `for` loop*, or things will go haywire. Why? **If both loops used `i` as a counter variable, the inner loop would keep changing `i` and the outer loop wouldn't count properly.** The example uses `j` as the inner loop variable, but you could use anything that's *not* `i`.\n\n<img src=\"https://images.code.org/b5184430a48ac55d8f6fe7280c983186-image-1448387927473.gif\" style=\"width: 450px\">\n\n# Do This:\n\n<img src=\"https://images.code.org/290adbb84a51b89ca27414746d3a4a93-image-1448395072342.gif\" style=\"width: 200px; float: right\">\n\n(**Note:** Steps shown in animation above.)\n\n* **Add a `for` loop inside the existing `for` loop** in the spray paint event handler. \n* **Change the counter variable** to something other than `i` for the inner `for` loop.\n* **Change the boolean condition** so the inner loop will run **5 times.**\n* **Move the circle** code inside both `for` loops.\n* **Run your app** and confirm that your new button creates a spray paint effect, as shown below.",
        "CSPU5_U3 - Canvas - transparentDots_markdown_instruction": "# Changing Colors in Canvas\n\nWe would like to make our dots transparent so that we can see when they are drawn on top of each other. To set the color and transparency of shapes you draw on your canvas, you need to change both the **stroke** or outline color and the **fill** color. The functions `setStrokeColor` and `setFillColor` can be used to set those colors. \n\nThese functions **accept strings of the form `\"rgba(100, 200, 100, 0.5)\"` as input**. The first three values in the string are RGB values and the last value is the transparency, as represented by a decimal number between 0 and 1.0.  All together it looks like this:\n\n![](https://images.code.org/5f5692259df092ce4e000cbdf5a7df1b-image-1448077147778.png)\n<img src=\"https://images.code.org/e833a63e31dca7d5e8357c0b856dc7cc-image-1448244247180.gif\" style=\"float: right; width: 150px\">\n\n# Do This:\n\n**Before the loop: ** \n* **Add a `setStrokeColor` command** to set the stroke to **fully transparent**.\n* **Add a `setFillColor` command** to set your dots to full black and mostly transparent **(try a value of 0.2)**.",
        "CSPU5_U3 - Canvas - transparentDots_2018_markdown_instruction": "# Changing Colors in Canvas\n\nWe would like to make our dots transparent so that we can see when they are drawn on top of each other. To set the color and transparency of shapes you draw on your canvas, you need to change both the **stroke** or outline color and the **fill** color. The functions `setStrokeColor` and `setFillColor` can be used to set those colors. \n\nThese functions **accept strings of the form `\"rgba(100, 200, 100, 0.5)\"` as input**. The first three values in the string are RGB values and the last value is the transparency, as represented by a decimal number between 0 and 1.0.  All together it looks like this:\n\n![](https://images.code.org/5f5692259df092ce4e000cbdf5a7df1b-image-1448077147778.png)\n<img src=\"https://images.code.org/e833a63e31dca7d5e8357c0b856dc7cc-image-1448244247180.gif\" style=\"float: right; width: 150px\">\n\n# Do This:\n\n**Before the loop: ** \n* **Add a `setStrokeColor` command** to set the stroke to **fully transparent**.\n* **Add a `setFillColor` command** to set your dots to full black and mostly transparent **(try a value of 0.2)**.",
        "CSPU5_U3 - Conditionals - Combine AND OR and NOT_markdown_instruction": "# Combining AND and OR and NOT\n\nYou can stick a NOT (`!`) in front of any boolean expression to invert its result. This opens the door to express the same logical statements in different ways.  \n\nFor example, let's say you want to determine if a person, based on his or her age (under 12 or over 65) gets to pay a reduced price for a movie ticket.  You might express that like this:\n\n```\n// If your age is less than 12 or greater than 65\nif( (age < 12) || (age > 65) ){\n\twrite(\"You qualify for a reduced price!\");\n}\n```\n\nBut you might also figure out a way to determine if a person gets a reduced price ticket by determining if his or her age is between 12 and 65 (`(age >= 12) && (age <= 65)`) and then taking the inverse of that.  So using the NOT operator this would work as well:\n\n```\n// If your age is NOT between 12 and 65\nif( !( (age >= 12) && (age <= 65) ) ){\n\twrite(\"You qualify for a reduced price!\");\n}\n```\n\n**Why use one over the other?** Personal preference.  Use the one that makes the most sense to you, but it should be a clear expression of what you are trying to say.  \n\n\n# Do This:\nWe've provided you with starting code that prompts the user to enter a **day** and their **age** and store it in variables.\n\n**Add an `if` statement that uses both AND and OR operators**\n\n  * The app should write \"Time for school!\" if it's a weekday and the user is under 18.\n \t* Hint: one way to say that it's a weekday is to say that it's NOT a weekend.\n  * Otherwise, if it's a weekday and the user is 18 or older, it should write \"Time to go to work!\"\n  * Otherwise, it should write \"Time to relax for the weekend!\"\n \n \n**WARNING** logic can get tricky sometimes.  Make sure to test your program with inputs that cover every possibility. There are 4 basic cases to test for:\n\n  * It is a weekday and age is under 18\n  * It is a weekday and age is not under 18\n  * It's not a weekday and age is under 18\n  * It's not a weekday and age is not under 18\n\nTry it out!",
        "CSPU5_U3 - Conditionals - Combine AND OR and NOT_2018_markdown_instruction": "# Combining AND and OR and NOT\n\nYou can stick a NOT (`!`) in front of any boolean expression to invert its result. This opens the door to express the same logical statements in different ways.  \n\nFor example, let's say you want to determine if a person, based on his or her age (under 12 or over 65) gets to pay a reduced price for a movie ticket.  You might express that like this:\n\n```\n// If your age is less than 12 or greater than 65\nif( (age < 12) || (age > 65) ){\n\twrite(\"You qualify for a reduced price!\");\n}\n```\n\nBut you might also figure out a way to determine if a person gets a reduced price ticket by determining if his or her age is between 12 and 65 (`(age >= 12) && (age <= 65)`) and then taking the inverse of that.  So using the NOT operator this would work as well:\n\n```\n// If your age is NOT between 12 and 65\nif( !( (age >= 12) && (age <= 65) ) ){\n\twrite(\"You qualify for a reduced price!\");\n}\n```\n\n**Why use one over the other?** Personal preference.  Use the one that makes the most sense to you, but it should be a clear expression of what you are trying to say.  \n\n\n# Do This:\nWe've provided you with starting code that prompts the user to enter a **day** and their **age** and store it in variables.\n\n**Add an `if` statement that uses both AND and OR operators**\n\n  * The app should write \"Time for school!\" if it's a weekday and the user is under 18.\n \t* Hint: one way to say that it's a weekday is to say that it's NOT a weekend.\n  * Otherwise, if it's a weekday and the user is 18 or older, it should write \"Time to go to work!\"\n  * Otherwise, it should write \"Time to relax for the weekend!\"\n \n \n**WARNING** logic can get tricky sometimes.  Make sure to test your program with inputs that cover every possibility. There are 4 basic cases to test for:\n\n  * It is a weekday and age is under 18\n  * It is a weekday and age is not under 18\n  * It's not a weekday and age is under 18\n  * It's not a weekday and age is not under 18\n\nTry it out!",
        "CSPU5_U3 - Conditionals - Simple OR_markdown_instruction": "# OR Operator\n\n<img src=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24 PM.png\" style=\"width: 100px; float: right\">\n\nYou will now see the JavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You can drag them out or simply type them.\n\nLet's try OR right now.  As a reminder: the OR operator will evaluate to true if *either or both* statements are true. If both are false, the OR operator will evaluate to false. \n\n<img src=\"https://images.code.org/48d59f73e701d452dd74ae304db59d93-image-1446482464792.png\" style=\"width: 200px; float:right\"> \n\n\n# Do This:\nWe've provided you with starting code that prompts the user to enter a day of the week and stores it in a variable.\n\n**Add the boolean expression to the if-statement to use an OR (`||`)** to express:\n\n  * IF *it's Saturday or Sunday* then write **\"It's the weekend!\"** \n  * Else write **\"Can't wait for the weekend to get here.\"**",
        "CSPU5_U3 - Conditionals - Simple OR_2018_markdown_instruction": "# OR Operator\n\n<img src=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24 PM.png\" style=\"width: 100px; float: right\">\n\nYou will now see the JavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You can drag them out or simply type them.\n\nLet's try OR right now.  As a reminder: the OR operator will evaluate to true if *either or both* statements are true. If both are false, the OR operator will evaluate to false. \n\n<img src=\"https://images.code.org/48d59f73e701d452dd74ae304db59d93-image-1446482464792.png\" style=\"width: 200px; float:right\"> \n\n\n# Do This:\nWe've provided you with starting code that prompts the user to enter a day of the week and stores it in a variable.\n\n**Add the boolean expression to the if-statement to use an OR (`||`)** to express:\n\n  * IF *it's Saturday or Sunday* then write **\"It's the weekend!\"** \n  * Else write **\"Can't wait for the weekend to get here.\"**",
        "CSPU5_U3 - Design Mode - Console Log_markdown_instruction": "# Updating IDs and Debugging with Console Log\n\nIn the last level you tested out the new command: `console.log`.  In this level we have a couple buttons with event handlers and `console.log` statements, but they are switched around!\n\nWe should have given the buttons better ID names so we could tell the difference based on the ID. **Can you update the ID names and `console.log` messages to match the correct button? **\n\n# Do This\n\n* **Change the IDs** of the buttons in Design Mode to more descriptive names.\n\n* Switch to Code Mode and notice that the **ID pulldowns have been updated to include the new IDs**. (You still need to select the correct ID from the pulldown menu.)\n\n* **Update the `console.log` messages** to match the buttons.\n",
        "CSPU5_U3 - Design Mode - Layers and Delete_markdown_instruction": "# Layering and Deleting\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\" style=\"width: 150px; float: right\">User interface elements can overlap one another, so you'll want the ability to change the order or **depth** at which each one is rendered. \n\nIf you **scroll to the bottom of the Properties tab** you'll find buttons which allow you to easily **delete or change the depth** of an element.\n* **Delete an Element** by selecting it (clicking on it) in the design view and then clicking **Delete** in the properties tab.\n* **Change the depth** of elements by using the double or single arrows.\n  * Click the double arrow to send all the way to front or back.\n  * Click the single arrow to move up or down one layer.\n    \n# Do This:\n\nUse the **delete** and **depth** tools to **create the \"After\" image**\n\n\n<table>\n<tr>\n\t<th style=\"text-align:center\">Before</th>\n    <th style=\"text-align:center\">After</th>\n</tr>\n<tr>\n\t<td align=center><img src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\" style=\"width:200px ; border: solid 1px black\"></td>\n    <td style=\"text-align:center\"><img src=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\" style=\"width:200px; border: solid 1px black\"></td>\n</tr>\n</table>",
        "CSPU5_U3 - Design Mode - WTF Console Log_markdown_instruction": "# Console Log\nIn the last level, we saw a new command: `console.log`. You may have noticed that it prints out text in the Debug Console below the code workspace.\n\n<img src=\"https://images.code.org/326e0f6c7d3b846ba06db998f06f56aa-image-1444419414248.36.33 PM.png\" style=\"width: 450px; border: solid 1px black\"> \n\nThe Debug Console is an important tool for programmers.  You've seen it display error messages, but you can also send messages that a user cannot see to the Debug Console while a program is running. <img src=\"https://images.code.org/cdc253db1b9a3685eaf5ea4b6bc30766-image-1444337429645.png\" style=\"width: 250px; float: right; border: solid 1px black\"> The Debug Console is really helpful for debugging programs because you can send messages to yourself from within your own code!\n\nYou can find `console.log` in the code toolbox under the Variables tab.\n\n# Do This:\n\n* Drag out 3 `console.log` commands into the workspace.\n\n* Update each `console.log` with your own messages.\n\n* Run the program a couple times to test out this new command.",
        "CSPU5_U3 - Design Mode 1_markdown_instruction": "<img src=\"https://images.code.org/5e6fa5738796d69775c0786ca9b4a076-image-1476735925167.png\" style=\"float: right\">\n# Design Mode\n\n**You Try it:** Add a large red button to your app using Design Mode.\n\n* Switch to Design Mode\n* Drag a button onto the app screen\n* Change the text to say \"Click Me!\"\n* Make the color of the button red.\n\n\n",
        "CSPU5_U3 - Design Mode 1_2018_markdown_instruction": "<img src=\"https://images.code.org/5e6fa5738796d69775c0786ca9b4a076-image-1476735925167.png\" style=\"float: right\">\n# Design Mode\n\n**You Try it:** Add a large red button to your app using Design Mode.\n\n* Switch to Design Mode\n* Drag a button onto the app screen\n* Change the text to say \"Click Me!\"\n* Make the color of the button red.\n\n\n",
        "CSPU5_U3 - Dice - Dropdown and Score_markdown_instruction": "# Adding Guess and Score to Dice Game\n\nLet's have the user guess the number that will come up when we roll a single die. \n\nYou can have multiple `if` statements, one after another, if they have different purposes which are separate. \n\n** Note: ** Use the flowchart below to help you figure out the logic of the game.\n\n# Do This:\n\n* **Add a dropdown** to take in the user's guess from 1 to 6.\n\n* **Add a set of `if` statements to check if the dice roll number is equal to the user guess.** Put this set of `if` statements after your set of `if` statements for the dice image. It should be completely separate from the other set of `if` statements. \n\n* Create a variable to **keep track of score**. Give 10 points if they guess right and take one point away when they guess wrong.\n\n* **Display the score** on the screen and update it after each dice roll.\n\n<img src=\"https://images.code.org/ac24917ca18606f6f3c31a6be1a16d73-image-1446174953979.png\" style=\"width: 100%\">\n<a href=\"https://images.code.org/ac24917ca18606f6f3c31a6be1a16d73-image-1446174953979.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "CSPU5_U3 - Dice - Dropdown with Strings_markdown_instruction": "# Adding Difficulty Levels: Dropdowns with Strings\n\nLet's add another element to our dice game: **difficulty levels**. The user will pick either \"Easy\" or \"Hard.\"  These are strings so you might be wondering how to check for equality. **The `==` works on strings as well!** It checks if the first string is exactly the same as the second string. **Strings must be the same letters and even have the same case to be equal**! So \"dog\" and \"Dog\" would not be equal. \n\n# Do This:\n\n* **Add a dropdown** for difficulty level with the options of \"Easy\" or \"Hard.\" \n\n* **Create an `if` statement for difficulty level** which prints the difficulty level to the console.\n\n<img src=\"https://images.code.org/9db291c8dd4192390e008aa764576cd3-image-1446175136919.png\" style=\"width: 100%\">\n<a href=\"https://images.code.org/9db291c8dd4192390e008aa764576cd3-image-1446175136919.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "CSPU5_U3 - Dice - If_markdown_instruction": "# Using `if` to Display Images\n\nWe are going to set up a dice game. We want to show a picture of a single die for each random number generated 1 to 6. We've already set up the screen in Design Mode, with a button to generate the roll and an image to show a picture of the die.\n\n**Note:** The flowchart for the desired behavior is below.\n\n# Do This:\n\n* Add an event handler for the Roll! button so that when the button is clicked it generates a random number from 1 to 6. \n\n* Add conditionals (`if`, `else if`, and `else`) to change the picture of the image (ID: `dice_image`) to display the correct side of the die depending on the random number generated. You will need to use <img src=\"https://images.code.org/89f2c13ef4ead590475c863a087597f8-image-1446535826599.30.16.png\" style=\"width:150px\"> with the URLs below to set the images for the die.\n\t* <img src=\"https://code.org/images/dice/1.png\" style=\"width: 50px\"> Dice 1 Image URL -  https://code.org/images/dice/1.png\n    * <img src=\"https://code.org/images/dice/2.png\" style=\"width: 50px\"> Dice 2 Image URL -  https://code.org/images/dice/2.png\n    * <img src=\"https://code.org/images/dice/3.png\" style=\"width: 50px\"> Dice 3 Image URL - https://code.org/images/dice/3.png\n    * <img src=\"https://code.org/images/dice/4.png\" style=\"width: 50px\"> Dice 4 Image URL - https://code.org/images/dice/4.png\n    * <img src=\"https://code.org/images/dice/5.png\" style=\"width: 50px\"> Dice 5 Image URL - https://code.org/images/dice/5.png\n    * <img src=\"https://code.org/images/dice/6.png\" style=\"width: 50px\"> Dice 6 Image URL -  https://code.org/images/dice/6.png\n\n<img src=\"https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png\" style=\"width: 100%\">\n<a href=\"https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png\" target=\"_blank\">Open diagram in a new tab</a>\n",
        "CSPU5_U3 - Dice - Nested_markdown_instruction": "# Nested *if* Statements\n\n<img src=\"https://images.code.org/1774efb17571d3370662e34b705dde47-image-1446485939643.37.11 PM.png\" style=\"width: 150px; float: right\">\n\n**Let's change the scoring of the game to match the difficulty level.** \n\nNew scoring rules:\n* _Easy: +10 points right answer / -1 point for wrong answer_\n* _Hard: +1 point right answer / -1 point for wrong answer_\n\nHow do we check _both_ the difficulty level and if the user's guess was correct? **We can actually put `if` statements inside of other `if` statements!** So we first want to check what the difficulty level is and then check if the user was right or wrong to determine the score.\n\n** Note: ** The flowchart below outlines the logic you are trying to implement.\n\n# Do This:\n\n* Move a copy of the score `if` statement inside of the difficulty levels. Be careful with indenting. All of the `if` statements for score need to be inside of the difficulty `if` statement (i.e. indented 1 level more than the difficulty `if` statement)\n\n<img src=\"https://images.code.org/2125a027997aeca75d18b8423058063d-image-1446485524945.gif\" style=\"width: 350px\">\n\n\n* Edit the `if` statements to give the correct scores\n\t* Easy level (+10 right, -1 wrong)\n    * Hard level (+1 right, -1 wrong)\n\n<img src=\"https://images.code.org/3b95a9f5cca60fc0ffbf7c2fb174d737-image-1446175290414.png\" style=\"width: 100%\">\n<a href=\"https://images.code.org/3b95a9f5cca60fc0ffbf7c2fb174d737-image-1446175290414.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "CSPU5_U3 - Keys - Add Image URLs_markdown_instruction": "# Adding Image URLs\n\nWe're ready to start improving the \"My Favorite Things\" app. \n\nWe'll do this in two steps:\n1. We will change it from scrolling text to scrolling images.\n2. We will add key events to scroll with the keyboard.\n\n**Step 1:**\n* The default values in your array should be image URLs.\n* The large **text area** needs to be changed to an **image**.\n* Instead of **setting the text**, you'll now be using `setImageURL` to set the URL of the image.\n\n# Do This:\n**NOTE: We've re-loaded the code from the \"My Favorite Things\" App you wrote in the previous lesson.** (If you want to refer to code you just wrote, you can go back to look at it.)\n\n* **Set the default values** in your array to be image URLs. (You might need to take a minute to go collect a few if you didn't in preparation for this lesson.)\n* In Design Mode **delete the text area** and replace it with an **image**. Make sure your image has a descriptive and meaningful ID.\n* Inside your function that updates the display **replace `setText` with `setImageURL`**. Make sure you reference your new image element **by its correct ID**.<br>\n<img src=\"https://images.code.org/9f7f4aeeb9b1a84ae781043602166865-image-1447337890448.gif\" style=\"width: 350px\">\n* ** Test your app** to confirm that it's now showing the images in your array.",
        "CSPU5_U3 - Keys - Add Image URLs_2018_markdown_instruction": "# Adding Image URLs\n\nWe're ready to start improving the \"My Favorite Things\" app. \n\nWe'll do this in two steps:\n1. We will change it from scrolling text to scrolling images.\n2. We will add key events to scroll with the keyboard.\n\n**Step 1:**\n* The default values in your array should be image URLs.\n* The large **text area** needs to be changed to an **image**.\n* Instead of **setting the text**, you'll now be using `setImageURL` to set the URL of the image.\n\n# Do This:\n**NOTE: We've re-loaded the code from the \"My Favorite Things\" App you wrote in the previous lesson.** (If you want to refer to code you just wrote, you can go back to look at it.)\n\n* **Set the default values** in your array to be image URLs. (You might need to take a minute to go collect a few if you didn't in preparation for this lesson.)\n* In Design Mode **delete the text area** and replace it with an **image**. Make sure your image has a descriptive and meaningful ID.\n* Inside your function that updates the display **replace `setText` with `setImageURL`**. Make sure you reference your new image element **by its correct ID**.<br>\n<img src=\"https://images.code.org/9f7f4aeeb9b1a84ae781043602166865-image-1447337890448.gif\" style=\"width: 350px\">\n* ** Test your app** to confirm that it's now showing the images in your array.",
        "CSPU5_U3 - Keys - Buttons and Keys_markdown_instruction": "# Buttons and Keys\n\nWe now know how to respond to key events, but often we want the user to be able to **do the same thing with the app in multiple ways**. For example, we might want the app to exhibit the same behavior if the user clicks a button on the screen or a key on the keyboard. (This is how so-called \"keyboard shortcuts\" work.)\n\nIn the program you're about to see, we've provided event handlers for some buttons on the screen. You're going to **create identical functionality** for the key events.\n\n# Do This:\n\n* **Add conditional statements inside the `keydown` event handler** to check for when the **up and down arrows** are pressed.\n<img src=\"https://images.code.org/0e0fe80c821c6a3171ec3a272c42325c-image-1447253300861.gif\" style=\"width: 350px\">\n\n* ** Copy the code for the `upImage` button**, and paste into the up arrow `if` statement.\n![](https://images.code.org/ad56005d74736c7c9aa8bedf68529c0e-image-1448300088636.gif)\n\n* ** Copy the code for the down button**, and paste it into the down arrow `if` statement.\n\n* Confirm your app **responds to key events** by running it.  For example, clicking the image of the up arrow in the app should do the same thing as hitting the up arrow on the keyboard.\n\n",
        "CSPU5_U3 - Keys - Buttons and Keys_2018_markdown_instruction": "# Buttons and Keys\n\nWe now know how to respond to key events, but often we want the user to be able to **do the same thing with the app in multiple ways**. For example, we might want the app to exhibit the same behavior if the user clicks a button on the screen or a key on the keyboard. (This is how so-called \"keyboard shortcuts\" work.)\n\nIn the program you're about to see, we've provided event handlers for some buttons on the screen. You're going to **create identical functionality** for the key events.\n\n# Do This:\n\n* **Add conditional statements inside the `keydown` event handler** to check for when the **up and down arrows** are pressed.\n<img src=\"https://images.code.org/0e0fe80c821c6a3171ec3a272c42325c-image-1447253300861.gif\" style=\"width: 350px\">\n\n* ** Copy the code for the `upImage` button**, and paste into the up arrow `if` statement.\n![](https://images.code.org/ad56005d74736c7c9aa8bedf68529c0e-image-1448300088636.gif)\n\n* ** Copy the code for the down button**, and paste it into the down arrow `if` statement.\n\n* Confirm your app **responds to key events** by running it.  For example, clicking the image of the up arrow in the app should do the same thing as hitting the up arrow on the keyboard.\n\n",
        "CSPU5_U3 - Keys - Key Up and Down_markdown_instruction": "# Using *keyup* and *keydown*\n\nOn the last level, we played with the `keypress` event. Let's take a look at some of the other key events. \n\nYou are going to get the chance to play with `keyup` and `keydown` in this level. **Pay attention to the different values of `event.key` for `keydown` and `keypress`. **\n\n# Do This:\n\n* Switch to the event type to `keydown` or `keyup`. \n\n<img src=\"https://images.code.org/fa91b1a9e3240eb65ff75b381e76ce69-image-1447213909054.gif\" style=\"width: 350px\">\n\n* Try out the event.\n\t* Press and hold a key\n    * Try the arrow keys\n    * Shift\n    * Option\n    * Alt\n    * Others",
        "CSPU5_U3 - Keys - Key Up and Down_2018_markdown_instruction": "# Using *keyup* and *keydown*\n\nOn the last level, we played with the `keypress` event. Let's take a look at some of the other key events. \n\nYou are going to get the chance to play with `keyup` and `keydown` in this level. **Pay attention to the different values of `event.key` for `keydown` and `keypress`. **\n\n# Do This:\n\n* Switch to the event type to `keydown` or `keyup`. \n\n<img src=\"https://images.code.org/fa91b1a9e3240eb65ff75b381e76ce69-image-1447213909054.gif\" style=\"width: 350px\">\n\n* Try out the event.\n\t* Press and hold a key\n    * Try the arrow keys\n    * Shift\n    * Option\n    * Alt\n    * Others",
        "CSPU5_U3 - Loops -  Complex Condition_markdown_instruction": "# Expressing Stopping Conditions: \"Until Loops\"\nIt is often more natural to think about looping in terms of when the loop should end rather than when it should continue. For example you might say \"keep going down the road until you see the gas station\" or \"keep calling until you get through to someone.\" You might think of these as \"until loops\" rather than \"while loops,\" since we want the loop to continue **until a condition is true rather than while a condition is true**.\n\n**There is no \"until loop\" in JavaScript** but it is actually quite easy to translate \"until loops\" into `while` loops so that you can use them in programs. An \"until loop\" runs *until* a condition is true, as opposed to a while loop which runs *as long as* a condition is true.  That means an until loop is the logical inverse of a while loop - it runs as long as the **condition is false**. The table below shows how you can use the **NOT** ( `!` ) operator to translate stopping conditions into `while` loop conditions.\n\n| Expressed as Stopping | Expressed as Until Loop | Expressed as While Loop |\n| --- | --- | --- |\n| **Stop** once you reach the gas station | Keep going **until** you reach the gas station | Keep going **while** you have **NOT** reached the gas station|\n| **Stop** calling when you get through to someone | Keep calling **until** you get through to someone | Keep calling **while** you have **NOT** gotten through to someone|\n| **Stop** when `x == y` | `until(x == y){...` | `while(!(x == y)){...`|\n<br>\nNote how we can use the **NOT** operation to find the **logical inverse** (or opposite) of the condition from our \"until loop\" to create a `while` loop. Let's do a little practice of that now.\n\n# Do This:\n\n**Starter code** is provided that repeatedly rolls two dice and writes their values to the screen. **Careful: ** before you edit this code it creates an infinite loop.\n\n* Use the technique above to **modify this code** so that the loop **stops when both dice are 5 or greater**.\n* **Try it out and experiment.** You should exit the loop the first time both dice have values greater than or equal to 5 displayed.\n\n![](https://images.code.org/076fb8e95fabc55e8ee45e31e51ca2d5-image-1448925611863.19.59 PM.png)",
        "CSPU5_U3 - Loops -  Complex Condition_2018_markdown_instruction": "# Expressing Stopping Conditions: \"Until Loops\"\nIt is often more natural to think about looping in terms of when the loop should end rather than when it should continue. For example you might say \"keep going down the road until you see the gas station\" or \"keep calling until you get through to someone.\" You might think of these as \"until loops\" rather than \"while loops,\" since we want the loop to continue **until a condition is true rather than while a condition is true**.\n\n**There is no \"until loop\" in JavaScript** but it is actually quite easy to translate \"until loops\" into `while` loops so that you can use them in programs. An \"until loop\" runs *until* a condition is true, as opposed to a while loop which runs *as long as* a condition is true.  That means an until loop is the logical inverse of a while loop - it runs as long as the **condition is false**. The table below shows how you can use the **NOT** ( `!` ) operator to translate stopping conditions into `while` loop conditions.\n\n| Expressed as Stopping | Expressed as Until Loop | Expressed as While Loop |\n| --- | --- | --- |\n| **Stop** once you reach the gas station | Keep going **until** you reach the gas station | Keep going **while** you have **NOT** reached the gas station|\n| **Stop** calling when you get through to someone | Keep calling **until** you get through to someone | Keep calling **while** you have **NOT** gotten through to someone|\n| **Stop** when `x == y` | `until(x == y){...` | `while(!(x == y)){...`|\n<br>\nNote how we can use the **NOT** operation to find the **logical inverse** (or opposite) of the condition from our \"until loop\" to create a `while` loop. Let's do a little practice of that now.\n\n# Do This:\n\n**Starter code** is provided that repeatedly rolls two dice and writes their values to the screen. **Careful: ** before you edit this code it creates an infinite loop.\n\n* Use the technique above to **modify this code** so that the loop **stops when both dice are 5 or greater**.\n* **Try it out and experiment.** You should exit the loop the first time both dice have values greater than or equal to 5 displayed.\n\n![](https://images.code.org/076fb8e95fabc55e8ee45e31e51ca2d5-image-1448925611863.19.59 PM.png)",
        "CSPU5_U3 - Loops - 15_markdown_instruction": "# Using an *if* Statement In a Loop\n\nA common thing to do is to use variables to keep track of some sort of count.  When used in a loop we count things very quickly.\n\n**Scenario:**\nIf you roll a pair of dice, rolling a 12 (two sixes) is rare.  How rare?  If you were to roll a pair of dice 1,000 times, on average, how many times would it come up as 12?\n\nTo figure this out, we could write code to run an experiment. It would go something like this:\n* Make a loop that simulates rolling a pair of dice 1,000 times.\n* Inside the loop, add an `if` statement: **if die1 + die2 == 12, then add 1 to a counter**.\n* After the loop, display the result.\n\n# Do This:\nThe **starter code** sets up the whole experiment for you, except it doesn't count the number of 12's rolled - that's your job.\n\n* **Run the code** to see what the experiment does.\n\n* ** Add an `if` statement inside the loop** to check if the sum of the dice is equal to 12, and add 1 to `twelveCount`.\n\n*  Once the loop has completed, **display the number of times the sum was 12.**\n\n**Note:** If you remove (or comment out) the `console.log` statement that displays every roll of the dice, the experiment will speed up A LOT!  You could do tens of thousands of dice rolls in a matter of seconds.",
        "CSPU5_U3 - Loops - 15_2018_markdown_instruction": "# Using an *if* Statement In a Loop\n\nA common thing to do is to use variables to keep track of some sort of count.  When used in a loop we count things very quickly.\n\n**Scenario:**\nIf you roll a pair of dice, rolling a 12 (two sixes) is rare.  How rare?  If you were to roll a pair of dice 1,000 times, on average, how many times would it come up as 12?\n\nTo figure this out, we could write code to run an experiment. It would go something like this:\n* Make a loop that simulates rolling a pair of dice 1,000 times.\n* Inside the loop, add an `if` statement: **if die1 + die2 == 12, then add 1 to a counter**.\n* After the loop, display the result.\n\n# Do This:\nThe **starter code** sets up the whole experiment for you, except it doesn't count the number of 12's rolled - that's your job.\n\n* **Run the code** to see what the experiment does.\n\n* ** Add an `if` statement inside the loop** to check if the sum of the dice is equal to 12, and add 1 to `twelveCount`.\n\n*  Once the loop has completed, **display the number of times the sum was 12.**\n\n**Note:** If you remove (or comment out) the `console.log` statement that displays every roll of the dice, the experiment will speed up A LOT!  You could do tens of thousands of dice rolls in a matter of seconds.",
        "CSPU5_U3 - Loops - 3_markdown_instruction": "# Changing *if* to *while*\n\n** How many times would we have to roll a die before it comes up as a 6?** In the program you're about to see, we **simulate rolling a die (generating a random number between 1 and 6)** in order to answer this question.\n\n# Do This:\n\n** Starter code** is provided which re-rolls a die once if the first roll is not a 6. \n* **Change the `if` statement to a `while` loop** so the program will keep rolling the die **while the current roll is not a 6.** \n\t* **Hint:** The easiest way to do this is to change the text from `if` to `while`.\n<img src=\"https://images.code.org/50b97e8858bf5ebf82eb1d358f875854-image-1446739013775.gif\" style=\"width: 350px; border: solid 1px black \">\n* Run the program to test out the change.\n",
        "CSPU5_U3 - Loops - 3_2018_markdown_instruction": "# Changing *if* to *while*\n\n** How many times would we have to roll a die before it comes up as a 6?** In the program you're about to see, we **simulate rolling a die (generating a random number between 1 and 6)** in order to answer this question.\n\n# Do This:\n\n** Starter code** is provided which re-rolls a die once if the first roll is not a 6. \n* **Change the `if` statement to a `while` loop** so the program will keep rolling the die **while the current roll is not a 6.** \n\t* **Hint:** The easiest way to do this is to change the text from `if` to `while`.\n<img src=\"https://images.code.org/50b97e8858bf5ebf82eb1d358f875854-image-1446739013775.gif\" style=\"width: 350px; border: solid 1px black \">\n* Run the program to test out the change.\n",
        "CSPU5_U3 - Loops - 7_markdown_instruction": "# Printing After Setting Value\n\nWe started trying to remove the duplicate code we had on the last level by initializing a variable to a nonsense, or \"dummy,\" value that would still ensure we entered the loop. \n\nIn the code provided, not every number is going to display. However, this time we want to try **not to add code** to fix the problem, since duplicate code is inefficient. \n\n# Do This:\n\n* **Starter Code:** The code is completely functional except that it does not print one of the numbers it's supposed to. In addition we don't want it to print the dummy variable of -1.** Hint: ** What should be the last number that prints every time this program runs?\n\n* Run the program to see the behavior.\n\n* Fix the code so that it prints all the values of `num`. **Hint:** You don't need to add any code. Just switch the order of the code you have now!",
        "CSPU5_U3 - Loops - 7_2018_markdown_instruction": "# Printing After Setting Value\n\nWe started trying to remove the duplicate code we had on the last level by initializing a variable to a nonsense, or \"dummy,\" value that would still ensure we entered the loop. \n\nIn the code provided, not every number is going to display. However, this time we want to try **not to add code** to fix the problem, since duplicate code is inefficient. \n\n# Do This:\n\n* **Starter Code:** The code is completely functional except that it does not print one of the numbers it's supposed to. In addition we don't want it to print the dummy variable of -1.** Hint: ** What should be the last number that prints every time this program runs?\n\n* Run the program to see the behavior.\n\n* Fix the code so that it prints all the values of `num`. **Hint:** You don't need to add any code. Just switch the order of the code you have now!",
        "CSPU5_U3 - Loops - Minus Minus_markdown_instruction": "# *++* Has a Friend!  Introducing *--*\n\nAs you may have guessed, just as we can write `count = count + 1` as `count++` we can also write `count = count - 1` as `count--`.\n\nLetâs write a program that counts **down** from 10 down to 1. \n\n# Do This:\n\n* **Starter Code: ** The current program counts **up** from 1 to 10. \n\n* **Change the code to use `count--` to count *down* from 10 to 1.** You will need to:\n\t* Change the looping condition.\n    * Change `count++` to `count--`.\n    * Change the initial value assigned to `count`.\n",
        "CSPU5_U3 - Loops - Minus Minus_2018_markdown_instruction": "# *++* Has a Friend!  Introducing *--*\n\nAs you may have guessed, just as we can write `count = count + 1` as `count++` we can also write `count = count - 1` as `count--`.\n\nLetâs write a program that counts **down** from 10 down to 1. \n\n# Do This:\n\n* **Starter Code: ** The current program counts **up** from 1 to 10. \n\n* **Change the code to use `count--` to count *down* from 10 to 1.** You will need to:\n\t* Change the looping condition.\n    * Change `count++` to `count--`.\n    * Change the initial value assigned to `count`.\n",
        "CSPU5_U3 - Loops - Plus Plus_markdown_instruction": "# *++* Operator\n\nAs programmers we are always looking for more concise ways to write code. It is so common to add 1 to a variable such as in `count = count + 1` that there is actually a shorthand for it. \n\n# Introducing the *++* Operator\n\nYou can write `count++` to add 1 to `count`. `count++` does the exact same thing as `count = count + 1`! \n\nIn fact the computer turns `count++` into `count = count + 1` behind the scenes - it really is just a convenient shorthand.\n\n**Note:** This is more of a programmer style choice so if you want to write your code using `count = count + 1` instead there is nothing wrong with that!\n\n# Do This:\n\n* Change the code to use `count++` instead of `count = count + 1`. (You'll need to be in text mode to do this.)\n\n** Misconception Alert:** You don't need to write `count = count++` - the computer is doing the assignment for you.",
        "CSPU5_U3 - Loops - Plus Plus_2018_markdown_instruction": "# *++* Operator\n\nAs programmers we are always looking for more concise ways to write code. It is so common to add 1 to a variable such as in `count = count + 1` that there is actually a shorthand for it. \n\n# Introducing the *++* Operator\n\nYou can write `count++` to add 1 to `count`. `count++` does the exact same thing as `count = count + 1`! \n\nIn fact the computer turns `count++` into `count = count + 1` behind the scenes - it really is just a convenient shorthand.\n\n**Note:** This is more of a programmer style choice so if you want to write your code using `count = count + 1` instead there is nothing wrong with that!\n\n# Do This:\n\n* Change the code to use `count++` instead of `count = count + 1`. (You'll need to be in text mode to do this.)\n\n** Misconception Alert:** You don't need to write `count = count++` - the computer is doing the assignment for you.",
        "CSPU5_U3 - Loops And Arrays - Add 5_markdown_instruction": "# Updating Values in an Array with a *for* Loop\n\nThe `for` loop you set up on the last level is actually so common that we will rarely deviate from this `for` loop setup.\n\n<img src=\"https://images.code.org/fba4d95636869c1c1c1a539fe81ded72-image-1447346793054.45.50 AM.png\">\n\nThis `for` loop basically means **\"for every possible index in `myArray`...\"** and we use it as a basic building block for processing arrays. Common array-processing techniques like searching for a value, updating all values, or calculating simple stats on an array will all be completed using a `for` loop written with the syntax above.\n\nIn fact, we're going to see that happen right now as we **use a `for` loop to add 5 to every value in an array**.\n\n# Do This:\n**Starter code** has been provided that creates an array of random values. You are also given a `for` loop that loops over every index in the array.\n\n* Add code inside the loop to **add 5 to the value at every location in the array**. \n\t* ** Remember: ** `myArray[i]` refers to the element in the array at the current value of `i`.\n* Confirm your code works by **displaying the values in your array before and after your loop**. Below is a sample result.  Notice how, after the array has been processed, all of the values are 5 greater than the originals.\n\n![](https://images.code.org/aaf36ac93098ef7f43fdda04243d17ad-image-1447792214666.29.41 PM.png)",
        "CSPU5_U3 - Loops And Arrays - Add 5_2018_markdown_instruction": "# Updating Values in an Array with a *for* Loop\n\nThe `for` loop you set up on the last level is actually so common that we will rarely deviate from this `for` loop setup.\n\n<img src=\"https://images.code.org/fba4d95636869c1c1c1a539fe81ded72-image-1447346793054.45.50 AM.png\">\n\nThis `for` loop basically means **\"for every possible index in `myArray`...\"** and we use it as a basic building block for processing arrays. Common array-processing techniques like searching for a value, updating all values, or calculating simple stats on an array will all be completed using a `for` loop written with the syntax above.\n\nIn fact, we're going to see that happen right now as we **use a `for` loop to add 5 to every value in an array**.\n\n# Do This:\n**Starter code** has been provided that creates an array of random values. You are also given a `for` loop that loops over every index in the array.\n\n* Add code inside the loop to **add 5 to the value at every location in the array**. \n\t* ** Remember: ** `myArray[i]` refers to the element in the array at the current value of `i`.\n* Confirm your code works by **displaying the values in your array before and after your loop**. Below is a sample result.  Notice how, after the array has been processed, all of the values are 5 greater than the originals.\n\n![](https://images.code.org/aaf36ac93098ef7f43fdda04243d17ad-image-1447792214666.29.41 PM.png)",
        "CSPU5_U3 - Loops And Arrays - Counting Times_markdown_instruction": "# Counting Occurrences of a Value\n\nInstead of displaying a true/false value for *every* item in the list, let's compute one value and display it.  A common thing to want to do is **count** the number of times a value occurs.  We can do this with a very small change to the code we've already got. \n\n# Do This:\n**Starter Code** is similar to past levels.  We've also created a variable called `fiveCount`.\n\n* ** Add an `if` statement** inside the `for` loop to **increment `fiveCount` if the value is equal to 5. **\n (Note: this will be exactly the same as the `if` statement you wrote in the previous level. Just giving you more practice).\n\n* **Run and re-run your code** to make sure that it's accurately counting the number of 5's in the array. Since the array is getting a random set of values every time you run the program, you might have to run it a bunch of times to thoroughly test it. Make sure you get it to run at least once when no 5's appear in the array.\n\n* Finally, if you'd like to, **change the first loop in the program to add 100 items to the array** instead of 10. Your code should still work to count the number of 5's, no matter how big the original array is!",
        "CSPU5_U3 - Loops And Arrays - Counting Times_2018_markdown_instruction": "# Counting Occurrences of a Value\n\nInstead of displaying a true/false value for *every* item in the list, let's compute one value and display it.  A common thing to want to do is **count** the number of times a value occurs.  We can do this with a very small change to the code we've already got. \n\n# Do This:\n**Starter Code** is similar to past levels.  We've also created a variable called `fiveCount`.\n\n* ** Add an `if` statement** inside the `for` loop to **increment `fiveCount` if the value is equal to 5. **\n (Note: this will be exactly the same as the `if` statement you wrote in the previous level. Just giving you more practice).\n\n* **Run and re-run your code** to make sure that it's accurately counting the number of 5's in the array. Since the array is getting a random set of values every time you run the program, you might have to run it a bunch of times to thoroughly test it. Make sure you get it to run at least once when no 5's appear in the array.\n\n* Finally, if you'd like to, **change the first loop in the program to add 100 items to the array** instead of 10. Your code should still work to count the number of 5's, no matter how big the original array is!",
        "CSPU5_U3 - Loops And Arrays - Find Min_markdown_instruction": "# Reusing a Function Pattern: Find Minimum\n\n**Nice work! You've just written a function that implements an algorithm to process an array!** If you feel comfortable with the basic pattern you used to create this function, you can quickly create functions for many other useful algorithms that work on arrays.\n\n**Basic Function Pattern**\n\n* Create a **function that accepts an array** as input.\n* **Create a \"flag\" variable** and set its default value before looping through the array.\n* Loop through your array with a `for` loop that **visits every index in the array**.\n* **Update your flag** as necessary with every iteration of your loop.\n* **Display your flag** at the end of the loop.\n\nLet's use this pattern to **write a function that finds and displays the smallest value in an array**.\n\nInstead of using a true/false flag to indicate whether we found a value, **we'll use a variable to keep track of the smallest value we've seen in the array so far**.\n\n# Do This:\n\n**Starter code** has been provided which outlines and calls `findMinVal` with different inputs. Your job will be to finish writing the function.\n\n* Before programming, try to **develop an algorithm that you could use to find the minimum value in an array**. Use the pattern outlined above as a guide.\n* **Write code** in the places indicated with comments to complete the function.  \n\t* You'll want to use the `minVal` variable to keep track of the smallest value you've found so far.\n    * You'll need to **write an `if` statement** that checks whether the current value in the array is less than `minVal`. If it is, then update the smallest value.     \n* **Run the code** to ensure it is working as you intend.\n\n<details><summary><strong>HINT: pseudocode</strong> [click to expand]</summary>\n<p>\nHere is some pseduocode that you should be able to implement.\n</p>\n<pre>\nminVal = first value in array \nfor EACH value IN array\n  if value < minVal\n     minVal = value\n\ndisplay(minVal)\n</pre>\n</details>\n\n\n![](https://images.code.org/e6abdc34c653e4bb0885ffabcf897fc5-image-1447877822696.16.03 PM.png)",
        "CSPU5_U3 - Loops And Arrays - Find Min_2018_markdown_instruction": "# Reusing a Function Pattern: Find Minimum\n\n**Nice work! You've just written a function that implements an algorithm to process an array!** If you feel comfortable with the basic pattern you used to create this function, you can quickly create functions for many other useful algorithms that work on arrays.\n\n**Basic Function Pattern**\n\n* Create a **function that accepts an array** as input.\n* **Create a \"flag\" variable** and set its default value before looping through the array.\n* Loop through your array with a `for` loop that **visits every index in the array**.\n* **Update your flag** as necessary with every iteration of your loop.\n* **Display your flag** at the end of the loop.\n\nLet's use this pattern to **write a function that finds and displays the smallest value in an array**.\n\nInstead of using a true/false flag to indicate whether we found a value, **we'll use a variable to keep track of the smallest value we've seen in the array so far**.\n\n# Do This:\n\n**Starter code** has been provided which outlines and calls `findMinVal` with different inputs. Your job will be to finish writing the function.\n\n* Before programming, try to **develop an algorithm that you could use to find the minimum value in an array**. Use the pattern outlined above as a guide.\n* **Write code** in the places indicated with comments to complete the function.  \n\t* You'll want to use the `minVal` variable to keep track of the smallest value you've found so far.\n    * You'll need to **write an `if` statement** that checks whether the current value in the array is less than `minVal`. If it is, then update the smallest value.     \n* **Run the code** to ensure it is working as you intend.\n\n<details><summary><strong>HINT: pseudocode</strong> [click to expand]</summary>\n<p>\nHere is some pseduocode that you should be able to implement.\n</p>\n<pre>\nminVal = first value in array \nfor EACH value IN array\n  if value < minVal\n     minVal = value\n\ndisplay(minVal)\n</pre>\n</details>\n\n\n![](https://images.code.org/e6abdc34c653e4bb0885ffabcf897fc5-image-1447877822696.16.03 PM.png)",
        "CSPU5_U3 - Loops And Arrays - Intro For Loop_markdown_instruction": "# *for* Loop\n\nIt's very common to want to repeat a set of commands a particular number of times. Recently, we have been using the `while` loop to do this by creating a counting variable, setting the boolean expression, and incrementing the value of the counter by 1 each time. We've also used the `for` loop before, and we'll explain it more in-depth now.  The `for` loop was created to wrap all of those components related to counting loops into a single line of code.\n\n<img src=\"https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png\" style=\"width: 450px\">\n\n<img src=\"https://images.code.org/d0d8f34d0f4aabaf66084ceac282448e-image-1447343652405.png\" style=\"width: 450px\">\n\nProgrammers would typically read a loop `for (var i = 0; i < 10; i++)` out like this: <br>\n**\"for variable i starting at 0, while i is less than 10, i plus plus (or increment i by 1)\"**\n\nNotice that in reading a `for` loop we still use the word \"while\".\n\nYou may notice that when you drag a `for` loop out from the toolbox that we've set it up for you with `i` as the variable. \n\n<details> \n<summary>**Why is `i` the variable?** [click to expand]</summary>  \n\nUsing the single character `i` as the variable in a `for` loop has become a convention in programming for a variety of reasons. One reason is that `for` loops are often used when processing arrays - **you can think of `i` as shorthand for index. **   But there is no reason why you have to use `i` if you don't want to.  It's just a variable.  \n</details>\n\n# Do This:\n\n* Drag out the `for` loop.\n\n* Insert a `console.log` statement inside the `for` loop that displays `i`.\n![](https://images.code.org/2a81206296dc693463d7b147f2f93dcb-image-1447446254447.gif)\n\n* Try changing:\n\t* The condition to stop the loop (make it run longer).\n    * The amount you change `i` by each time (try changing `i++` to something like `i += 5`).\n    * The starting value of `i`.\n\n",
        "CSPU5_U3 - Loops And Arrays - Intro For Loop_2018_markdown_instruction": "# *for* Loop\n\nIt's very common to want to repeat a set of commands a particular number of times. Recently, we have been using the `while` loop to do this by creating a counting variable, setting the boolean expression, and incrementing the value of the counter by 1 each time. We've also used the `for` loop before, and we'll explain it more in-depth now.  The `for` loop was created to wrap all of those components related to counting loops into a single line of code.\n\n<img src=\"https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png\" style=\"width: 450px\">\n\n<img src=\"https://images.code.org/d0d8f34d0f4aabaf66084ceac282448e-image-1447343652405.png\" style=\"width: 450px\">\n\nProgrammers would typically read a loop `for (var i = 0; i < 10; i++)` out like this: <br>\n**\"for variable i starting at 0, while i is less than 10, i plus plus (or increment i by 1)\"**\n\nNotice that in reading a `for` loop we still use the word \"while\".\n\nYou may notice that when you drag a `for` loop out from the toolbox that we've set it up for you with `i` as the variable. \n\n<details> \n<summary>**Why is `i` the variable?** [click to expand]</summary>  \n\nUsing the single character `i` as the variable in a `for` loop has become a convention in programming for a variety of reasons. One reason is that `for` loops are often used when processing arrays - **you can think of `i` as shorthand for index. **   But there is no reason why you have to use `i` if you don't want to.  It's just a variable.  \n</details>\n\n# Do This:\n\n* Drag out the `for` loop.\n\n* Insert a `console.log` statement inside the `for` loop that displays `i`.\n![](https://images.code.org/2a81206296dc693463d7b147f2f93dcb-image-1447446254447.gif)\n\n* Try changing:\n\t* The condition to stop the loop (make it run longer).\n    * The amount you change `i` by each time (try changing `i++` to something like `i += 5`).\n    * The starting value of `i`.\n\n",
        "CSPU5_U3 - Loops And Arrays - Linear Search_markdown_instruction": "# Algorithms and General-Purpose Functions\n\nOver the next several exercises we will be **creating a general-purpose function to determine if a value is contained within an array**.  Over the course of these exercises, keep an eye out for the general pattern we are using, because you'll get to use it again to create functions of your own.\n\nTo begin, we'll start simple. We'll write code that **checks whether an array contains a specific value**. At every index, your program should display \"true\" if the value at that index is a 5 and \"false\" otherwise.\n\n# Do This:\nThe **starter code** is similar to past levels, but you'll notice that we use a loop to construct `myArray` rather than appending items one line at a time.  You are also given the `for` loop you will use.\n\n* Add an `if` statement inside the `for` loop to check if the value of the array at the current index is 5. \n  * If the value is equal to 5, write **true** to the console. Otherwise write **false** to the console.\n* **Test your code** to make sure it is working as you intend. An example output is below.\n\n![](https://images.code.org/a64c3be0a23e25bef67494bdfeb61415-image-1447879494916.44.45 PM.png)",
        "CSPU5_U3 - Loops And Arrays - Linear Search_2018_markdown_instruction": "# Algorithms and General-Purpose Functions\n\nOver the next several exercises we will be **creating a general-purpose function to determine if a value is contained within an array**.  Over the course of these exercises, keep an eye out for the general pattern we are using, because you'll get to use it again to create functions of your own.\n\nTo begin, we'll start simple. We'll write code that **checks whether an array contains a specific value**. At every index, your program should display \"true\" if the value at that index is a 5 and \"false\" otherwise.\n\n# Do This:\nThe **starter code** is similar to past levels, but you'll notice that we use a loop to construct `myArray` rather than appending items one line at a time.  You are also given the `for` loop you will use.\n\n* Add an `if` statement inside the `for` loop to check if the value of the array at the current index is 5. \n  * If the value is equal to 5, write **true** to the console. Otherwise write **false** to the console.\n* **Test your code** to make sure it is working as you intend. An example output is below.\n\n![](https://images.code.org/a64c3be0a23e25bef67494bdfeb61415-image-1447879494916.44.45 PM.png)",
        "CSPU5_U3 - Loops And Arrays - Loop Array If_markdown_instruction": "# *for* Loop with *if*\n\nSometimes we want to find values in an array that meet certain conditions.  We can add an **`if` statement inside the `for` loop** to individually check every value within the array. To practice this, we will create a `for` loop that will **display every value in the array greater than 5**.\n\n# Do This:\n** Starter code** has been been provided that creates an array of random values.\n\n* Add a `for` loop that references every index in the array.\n\n* Add an `if` statement inside the `for` loop that **displays every value in the array greater than 5** using `console.log`\n\t![](https://images.code.org/969077ff23232e410ce17520b0a71e1e-image-1447390972867.gif)\n    \n* **Note:** Because the original array is being constructed with random values it's *possible* that it might not have any values greater than 5.  Just run the program a few times to make sure it works.  An example of the possible output is below.\n\n![](https://images.code.org/266e23afc3533ebd63b393b2ee8682d8-image-1447796380510.39.26 PM.png)",
        "CSPU5_U3 - Loops And Arrays - Loop Array If_2018_markdown_instruction": "# *for* Loop with *if*\n\nSometimes we want to find values in an array that meet certain conditions.  We can add an **`if` statement inside the `for` loop** to individually check every value within the array. To practice this, we will create a `for` loop that will **display every value in the array greater than 5**.\n\n# Do This:\n** Starter code** has been been provided that creates an array of random values.\n\n* Add a `for` loop that references every index in the array.\n\n* Add an `if` statement inside the `for` loop that **displays every value in the array greater than 5** using `console.log`\n\t![](https://images.code.org/969077ff23232e410ce17520b0a71e1e-image-1447390972867.gif)\n    \n* **Note:** Because the original array is being constructed with random values it's *possible* that it might not have any values greater than 5.  Just run the program a few times to make sure it works.  An example of the possible output is below.\n\n![](https://images.code.org/266e23afc3533ebd63b393b2ee8682d8-image-1447796380510.39.26 PM.png)",
        "CSPU5_U3 - Loops And Arrays - Search with Boolean Var_markdown_instruction": "# Using a Boolean Variable as a Flag\n\nWe are going to do a **challenge that is similar to the last exercise** but, rather than counting the number of 5's in the array, we're going to use a different **interesting programming technique for processing arrays** that might prove useful to you in the future. \n\n# Using a Boolean Flag\n\n<img src=\"https://images.code.org/756fcab9d5f48ace76eb5d300fcf58af-image-1447624065160.png\" style=\"float: right; width: 250px\">\nThe technique is generally referred to as **using a boolean \"flag.\"** To understand this idea, think about how some mailboxes work: the flag starts down, and when a person wants to let the mail carrier know there is something to pick up, she puts the flag up to notify the mail carrier that there is outgoing mail in the box.\n\nWe can use a variable to do something similar when programming. Rather than incrementing a count every time we find a 5 in the array, we will use a variable that acts like a **flag**.  We will create a variable before the loop and assign it `false` to start (flag is down). Then, as we process the array, if we find a 5, set the variable to `true` (put the flag up).  \n\nHere is some pseudocode:\n```\nvar flag = FALSE\nFOR EACH item IN list\n  IF (item EQUALS 5)\n    flag = TRUE\n    \nDISPLAY (flag)\n```\nNotice that it doesn't matter if we find more than one 5.  It will just keep setting the flag to `true`.  However, if there are no 5's, the `if` statement in the loop will never execute, and so the variable will remain the value it was initialized to, which was `false`.\n\n# Do This:\n\n* **Implement the pseudocode above** in JavaScript. \n* We've given you code that constructs an array of random values, and the standard `for` loop for looping over an array.\n* The output will be no different from the previous exercise, but you should still **confirm that your program correctly identifies when a 5 is in the array.**\n\n| One or more 5's | No 5's |\n| --- | --- |\n|![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31 PM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46 PM.png)|\n\n",
        "CSPU5_U3 - Loops And Arrays - Search with Boolean Var_2018_markdown_instruction": "# Using a Boolean Variable as a Flag\n\nWe are going to do a **challenge that is similar to the last exercise** but, rather than counting the number of 5's in the array, we're going to use a different **interesting programming technique for processing arrays** that might prove useful to you in the future. \n\n# Using a Boolean Flag\n\n<img src=\"https://images.code.org/756fcab9d5f48ace76eb5d300fcf58af-image-1447624065160.png\" style=\"float: right; width: 250px\">\nThe technique is generally referred to as **using a boolean \"flag.\"** To understand this idea, think about how some mailboxes work: the flag starts down, and when a person wants to let the mail carrier know there is something to pick up, she puts the flag up to notify the mail carrier that there is outgoing mail in the box.\n\nWe can use a variable to do something similar when programming. Rather than incrementing a count every time we find a 5 in the array, we will use a variable that acts like a **flag**.  We will create a variable before the loop and assign it `false` to start (flag is down). Then, as we process the array, if we find a 5, set the variable to `true` (put the flag up).  \n\nHere is some pseudocode:\n```\nvar flag = FALSE\nFOR EACH item IN list\n  IF (item EQUALS 5)\n    flag = TRUE\n    \nDISPLAY (flag)\n```\nNotice that it doesn't matter if we find more than one 5.  It will just keep setting the flag to `true`.  However, if there are no 5's, the `if` statement in the loop will never execute, and so the variable will remain the value it was initialized to, which was `false`.\n\n# Do This:\n\n* **Implement the pseudocode above** in JavaScript. \n* We've given you code that constructs an array of random values, and the standard `for` loop for looping over an array.\n* The output will be no different from the previous exercise, but you should still **confirm that your program correctly identifies when a 5 is in the array.**\n\n| One or more 5's | No 5's |\n| --- | --- |\n|![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31 PM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46 PM.png)|\n\n",
        "CSPU5_U3 - Movie Bot - Multiple If Sequences_markdown_instruction": "# Adding Rating to Keywords\n\nUp until now our movie suggestions have just been based on genre. Let's now also look for keywords related to the movie rating like \"G\", \"PG\", \"PG-13\", and \"R\" so we can give movie suggestions based on both genre and rating.\n \n**Note: ** We've updated the flowchart below (highlighted in yellow) to see the logic we are trying to add.\n\n**Note 2: ** The logic of the program right now will yield some odd results - there are some things you can type that will give 2 suggestions - this is expected, for now.  We are just taking a small step here.  We'll refine the code again in later levels.\n\n# Do This:\n\n* **Add another set of `if`, `else-if`, and `else` statements** inside the question `if` statement to **check for keywords for movie ratings (G, PG, PG-13, and R).**\n\n* **Hint:** When checking for \"G\", \"PG\" and \"R\" you need to be a little clever.  R and G are letters that will show up in lots of words and PG will get confused with PG-13. We want to check for \"g\" and \"r\" with spaces on either side. So make sure to use `\" g \"` where there is a space on either side of g instead of `\"g\"`. For \"pg\" you can just add a space after the pg to look for `\"pg \"`\n\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n<img src=\"https://images.code.org/886713cfedf4802e174b68ed2eb36d4b-image-1455816199174.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/886713cfedf4802e174b68ed2eb36d4b-image-1455816199174.png\" target=\"_blank\">Click to open in separate window.</a>",
        "CSPU5_U3 - Movie Bot - Nested Motivation_markdown_instruction": "# Checking for a Question\n\nWe're going to start adding some \"intelligence\" to our Movie Bot. Since we've added `includes` it can now tell if its keywords appear anywhere in the input. As a result some inputs may be questions while others might simply be statements. **We'd like the movie bot to respond differently to questions and statements.**\n\nIn order to tell when the user is asking a question **we will be checking whether the input includes a question mark **.\n\n# Do This:\n\n* Add a separate statement to **check if the input includes a \"?\"**. \n* If the input includes a question mark **print \"That's a good question.\" before the recommendation.**\n* Otherwise print **\"I only answer questions.\" before the recommendation.**\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n**Example Input --->** | **Output**\n---|---\nWhat's the best action movie? | That's a good question. The best action movie is any James Bond movie.\nI love comedy | I only respond to questions. The best comedy movie is The Princess Bride.\n<br>\n**Note:** Check out the flowchart below to see the logic we are trying to change.\n\n<img src=\"https://images.code.org/e32fd89b6e03b9d49c94e39e79120c03-image-1446072381510.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/e32fd89b6e03b9d49c94e39e79120c03-image-1446072381510.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "CSPU5_U3 - Movie Bot - When Multiple If Statements_markdown_instruction": "# Adding a Separate *if*\n\nIt's still the case that sometimes you want to have two completely separate groups of `if` statements because there are separate conditions you want to check and possibly have responses for both. You don't always just keep adding to a giant `if` statement forever.\n\nIn the Movie Bot demo you probably saw that if you type \"please\" and \"thank you\" it adds something extra to the response (it says something like \"Thanks for being polite!\"). Let's add this functionality to your movie bot as well. \n\n**Note: ** Check out the flowchart below to see the logic we are trying to add.\n\n# Do This:\n\n* ** Add an `if` and `else-if` statement that checks for \"please\" and \"thank you\"**. \n\t* If the string includes \"please\" it should say \"Thank you for being so polite!\" before it gives its response.\n    * If the string includes \"thank you\" it should say \"You are very welcome!\" before it gives its response.\n\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n<img src=\"https://images.code.org/3dac4019734e63ecbfd4784c82fbd402-image-1461771319064.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/3dac4019734e63ecbfd4784c82fbd402-image-1461771319064.png\" target=\"_blank\">Click to open in separate window.</a>",
        "CSPU5_U3 - Movie Bot - toLowerCase_markdown_instruction": "# Dealing with Character Case\n\nWhat if the user types **ACTION** instead of **action**? These are two different strings to the computer and therefore it won't recognize they are the same. We want Movie Bot to treat words the same ignoring the case of the letters. We can do this using the string command `toLowerCase`.\n\n**Note: ** Check out the flowchart below to see the logic we are trying to add. \n\n# Do This:\n\n* **Try typing COMEDY, ACtioN, horroR, and Romance** into Movie Bot.\n\n* **Use the `toLowerCase` command** to change all user input into lowercase letters after they enter it.\n\n* **Check that COMEDY, ACtioN, horroR, and Romance generate the same recommendations** as comedy, action, horror, and romance.\n\n<img src=\"https://images.code.org/183082e89d296b88112a5a5380afac6c-image-1446069165327.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/183082e89d296b88112a5a5380afac6c-image-1446069165327.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "CSPU5_U3 - Return Values - constrainTurtle_markdown_instruction": "# Use a Function that Returns a Value in an App\n\nWe create functions to **contain blocks of code that will be used multiple times within our program**. The same is true with functions that return values. Let's see an example of how we might use one of the functions we've written.\n\nThis exercise comes with starter code that creates a **simple turtle driver app**. The x and y location of the turtle are stored in the variables `xloc` and `yloc`. An event handler is used to update these values when the **arrow keys are pressed**, and then a separate `updateTurtle` function is called to draw the turtle on the screen.\n\nCurrently the turtle can drive off the screen. If we are clever about how we use our `constrain` function, however, we can prevent this from happening.\n\n# Do This:\n\n* **Starter code** is provided which allows the turtle to move. Additionally a **working version of `constrain`** is provided.\n* **Call the `constrain` function twice** within the `updateTurtle` function to prevent the turtle from going outside the screen.\n\t* One call to the function for `xloc` and one time for `yloc`.\n    * Recall the screen is **320 by 450 pixels**.\n* **Run your app** and confirm the turtle cannot leave the screen.\n\n![](https://images.code.org/f2e24abdf2d4008dfdc4f2ba9e23ff2c-image-1447958362880.gif)",
        "CSPU5_U3 - Return Values - constrainTurtle_2018_markdown_instruction": "# Use a Function that Returns a Value in an App\n\nWe create functions to **contain blocks of code that will be used multiple times within our program**. The same is true with functions that return values. Let's see an example of how we might use one of the functions we've written.\n\nThis exercise comes with starter code that creates a **simple turtle driver app**. The x and y location of the turtle are stored in the variables `xloc` and `yloc`. An event handler is used to update these values when the **arrow keys are pressed**, and then a separate `updateTurtle` function is called to draw the turtle on the screen.\n\nCurrently the turtle can drive off the screen. If we are clever about how we use our `constrain` function, however, we can prevent this from happening.\n\n# Do This:\n\n* **Starter code** is provided which allows the turtle to move. Additionally a **working version of `constrain`** is provided.\n* **Call the `constrain` function twice** within the `updateTurtle` function to prevent the turtle from going outside the screen.\n\t* One call to the function for `xloc` and one time for `yloc`.\n    * Recall the screen is **320 by 450 pixels**.\n* **Run your app** and confirm the turtle cannot leave the screen.\n\n![](https://images.code.org/f2e24abdf2d4008dfdc4f2ba9e23ff2c-image-1447958362880.gif)",
        "CSPU5_U3 - Return Values - debuggingConstrain_markdown_instruction": "# Debugging and Multiple Return Statements: *constrain*\n\nWe're going to debug another function that uses multiple return statements. The function is called `constrain` and is used to limit an input number to a certain range. The function accepts three parameters.\n\n* `input` : the number to be constrained.\n* `low` : the lower bound of the range. If `input` is below this value, the function should return the value of `low`.\n* `high` : the upper bound of the range. If `input` is above this value, the function should return the value of `high`.\n\n<details>\n<summary>**Click for sample input and output for `constrain`**</summary>\n* `constrain(15,10,20)` should return 15 since it is within the range of 10 to 20.\n* `constrain(5,10,20)` should return 10 since the input is below the range of 10 to 20.\n* `constrain(25,10,20)` should return 20 since the input is above the range of 10 to 20.\n</details>\n<br>\nUnfortunately, because of the way this function was written, it does not always work as expected. In particular, **because of how `return` was used, some portions of the function never run**. Change the structure of the function to **use the pattern you have been shown in previous exercises, included below**.\n<br> <br>\n**Pattern for Functions that Return Values**\n* Use parameters to provide input.\n* Declare a variable that will be used as output, possibly initializing its value.\n* Update the value in your output variable throughout your program.\n* Return your output variable on the last line of your function.\n\n# Do This:\n\n* **Run the program** and identify the errors generated in the output.\n* **Inspect the logic of `constrain`** to identify the logical errors.\n* **Rewrite** `constrain` to make use of the **pattern for functions that return values**, shown above.\n* **Run the program** to ensure it is now running as you expect.\n\n![](https://images.code.org/38afcc5420e084b3146a8b12cc2d0e72-image-1447952855846.07.25 AM.png)",
        "CSPU5_U3 - Return Values - debuggingConstrain_2018_markdown_instruction": "# Debugging and Multiple Return Statements: *constrain*\n\nWe're going to debug another function that uses multiple return statements. The function is called `constrain` and is used to limit an input number to a certain range. The function accepts three parameters.\n\n* `input` : the number to be constrained.\n* `low` : the lower bound of the range. If `input` is below this value, the function should return the value of `low`.\n* `high` : the upper bound of the range. If `input` is above this value, the function should return the value of `high`.\n\n<details>\n<summary>**Click for sample input and output for `constrain`**</summary>\n* `constrain(15,10,20)` should return 15 since it is within the range of 10 to 20.\n* `constrain(5,10,20)` should return 10 since the input is below the range of 10 to 20.\n* `constrain(25,10,20)` should return 20 since the input is above the range of 10 to 20.\n</details>\n<br>\nUnfortunately, because of the way this function was written, it does not always work as expected. In particular, **because of how `return` was used, some portions of the function never run**. Change the structure of the function to **use the pattern you have been shown in previous exercises, included below**.\n<br> <br>\n**Pattern for Functions that Return Values**\n* Use parameters to provide input.\n* Declare a variable that will be used as output, possibly initializing its value.\n* Update the value in your output variable throughout your program.\n* Return your output variable on the last line of your function.\n\n# Do This:\n\n* **Run the program** and identify the errors generated in the output.\n* **Inspect the logic of `constrain`** to identify the logical errors.\n* **Rewrite** `constrain` to make use of the **pattern for functions that return values**, shown above.\n* **Run the program** to ensure it is now running as you expect.\n\n![](https://images.code.org/38afcc5420e084b3146a8b12cc2d0e72-image-1447952855846.07.25 AM.png)",
        "CSPU5_U3 - Simulation - 4_markdown_instruction": "# Changing the Loop Condition: Streaks of Heads\n\nWe want our simulation to run** while the streak of heads is less than a target length**. In order to do this we'll need to change our looping condition to use the variables we've been using to count our streak of heads. To begin with **your simulation should look for a streak of 3 heads** so that you can still visually confirm the output.\n\n# Do This:\n\n* **Change the condition** used by your `while` loop so that it now runs **while the streak of heads is less than 3**.\n* **Test your program** by running it and visually confirming that its output is correct. It should run like in the example below.\n* **Note:** As before it's possible that your output will sometimes run off the screen. You can still confirm your code is working as you intend (it should never run after a streak of 3) and we will address this issue in the next exercise.\n\n![](https://images.code.org/90ec4022f784ba136e59bb9b7c57a5c7-image-1446862623863.gif)",
        "CSPU5_U3 - Simulation - 4_2018_markdown_instruction": "# Changing the Loop Condition: Streaks of Heads\n\nWe want our simulation to run** while the streak of heads is less than a target length**. In order to do this we'll need to change our looping condition to use the variables we've been using to count our streak of heads. To begin with **your simulation should look for a streak of 3 heads** so that you can still visually confirm the output.\n\n# Do This:\n\n* **Change the condition** used by your `while` loop so that it now runs **while the streak of heads is less than 3**.\n* **Test your program** by running it and visually confirming that its output is correct. It should run like in the example below.\n* **Note:** As before it's possible that your output will sometimes run off the screen. You can still confirm your code is working as you intend (it should never run after a streak of 3) and we will address this issue in the next exercise.\n\n![](https://images.code.org/90ec4022f784ba136e59bb9b7c57a5c7-image-1446862623863.gif)",
        "CSPU5_U3 - Variables - Set to Expression with Other Variables_markdown_instruction": "# Expressions with Variables\nArithmetic becomes much more interesting when we use other variables in our expressions. For example you can do this:\n\n<table  style=\"margin-left: auto;\n  margin-right: auto; align: center\">\n<tr>\n<td>\n<img src=\"https://images.code.org/13c21437292031a705744a8c2663c0d4-image-1445547765131.png\" style=\"width: 400px;\">\n</td></tr>\n<tr> <td>\n <h3>\n Mental Model\n![](https://images.code.org/b4a2c125508fb06fd653b90c643cb53b-image-1447272790306.png)</h3>\n</td></tr>\n<tr><td><img src=\"https://images.code.org/95eb7e859d04c72ed82ed80023a870cf-image-1445546103564.gif\" style=\"width: 400px;\"></td>\n</tr>\n</table>\n\nThe end result of an expression with variables is the same as one without.  The major difference is that values are retrieved from memory in order to do the calculation rather than simply hard-coded.\n\n# Mental Model Check\nWatch the animation above. To compute the expression the computer will: **first** retrieve each of the values of the variables used in the expression; **then** the arithmetic expression can be evaluated; **finally** the computed value can be stored in memory.\n\n# Do This:\n<img src=\"https://images.code.org/485f61858e45a39e383497c522c94d64-image-1445548216109.png\" style=\"float: right; width: 300px\">\n* **Scenario:** In the starting code we have provided you with variables that might be the kinds of things you would keep track of in a game: `totalTime`, `points` and `lives`.  (see right).\n\n* Right now the `totalScore` is just set to 0.  We want you to compute a final score so that the person is rewarded for having a lot of points and lives, but penalized for taking a lot of time.\n\n* **Write an expression** that calculates the player's total score and stores it in the `totalScore` variable.  The calculation is: **the player's points *times* lives *divided* by the total time.**\n\n* For the values provided the app display should look like this:\n \n<img src=\"https://images.code.org/10c9c6f162004a1b7216ae36c1427478-image-1445548367117.png\" style=\"width: 250px\">\n",
        "CSPU5_U3 - Variables - Set to Expression with Other Variables_2018_markdown_instruction": "# Expressions with Variables\nArithmetic becomes much more interesting when we use other variables in our expressions. For example you can do this:\n\n<table  style=\"margin-left: auto;\n  margin-right: auto; align: center\">\n<tr>\n<td>\n<img src=\"https://images.code.org/13c21437292031a705744a8c2663c0d4-image-1445547765131.png\" style=\"width: 400px;\">\n</td></tr>\n<tr> <td>\n <h3>\n Mental Model\n![](https://images.code.org/b4a2c125508fb06fd653b90c643cb53b-image-1447272790306.png)</h3>\n</td></tr>\n<tr><td><img src=\"https://images.code.org/95eb7e859d04c72ed82ed80023a870cf-image-1445546103564.gif\" style=\"width: 400px;\"></td>\n</tr>\n</table>\n\nThe end result of an expression with variables is the same as one without.  The major difference is that values are retrieved from memory in order to do the calculation rather than simply hard-coded.\n\n# Mental Model Check\nWatch the animation above. To compute the expression the computer will: **first** retrieve each of the values of the variables used in the expression; **then** the arithmetic expression can be evaluated; **finally** the computed value can be stored in memory.\n\n# Do This:\n<img src=\"https://images.code.org/485f61858e45a39e383497c522c94d64-image-1445548216109.png\" style=\"float: right; width: 300px\">\n* **Scenario:** In the starting code we have provided you with variables that might be the kinds of things you would keep track of in a game: `totalTime`, `points` and `lives`.  (see right).\n\n* Right now the `totalScore` is just set to 0.  We want you to compute a final score so that the person is rewarded for having a lot of points and lives, but penalized for taking a lot of time.\n\n* **Write an expression** that calculates the player's total score and stores it in the `totalScore` variable.  The calculation is: **the player's points *times* lives *divided* by the total time.**\n\n* For the values provided the app display should look like this:\n \n<img src=\"https://images.code.org/10c9c6f162004a1b7216ae36c1427478-image-1445548367117.png\" style=\"width: 250px\">\n",
        "CSPU5_U3 - Variables - Set to Expression_markdown_instruction": "# Variables and Arithmetic Expressions\nA common thing to want to do is store the result of an arithmetic expression.  The 4 basic arithmetic operations `+ - * /` are available. \n\n<details><summary><strong>Here is a quick table that shows the arithmetic operators with code examples</strong> [click to expand]</summary>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">operation</th>\n<th style=\"text-align:center\">block</th>\n<th style=\"text-align:center\">text</th>\n<th style=\"text-align:center\">example</th>\n<th style=\"text-align:center\">result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">add</td>\n<td style=\"text-align:center\"><img src=\"https://images.code.org/2cf1014a4e0b1dedd361edc73a0f7eb1-image-1445536786715.png\" alt=\"\"></td>\n<td style=\"text-align:center\">`+`</td>\n<td style=\"text-align:center\">`result = 7 + 3;`</td>\n<td style=\"text-align:center\">stores <strong>10</strong> in <em>result</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">subtract</td>\n<td style=\"text-align:center\"><img src=\"https://images.code.org/96b80cd4d866130c7f8567765f9b4b00-image-1445536805959.png\" alt=\"\"></td>\n<td style=\"text-align:center\">`-`</td>\n<td style=\"text-align:center\">`value = 7 - 3;`</td>\n<td style=\"text-align:center\">stores <strong>4</strong> in <em>value</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiply</td>\n<td style=\"text-align:center\"><img src=\"https://images.code.org/3574725201e009142126f39ad1df8a78-image-1445536817791.png\" alt=\"\"></td>\n<td style=\"text-align:center\">`*`</td>\n<td style=\"text-align:center\">`score = 7 * 3;`</td>\n<td style=\"text-align:center\">stores <strong>21</strong> in <em>score</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">divide</td>\n<td style=\"text-align:center\"><img src=\"https://images.code.org/5d470b223717c9daac5246af0d013bdf-image-1445536826467.png\" alt=\"\"></td>\n<td style=\"text-align:center\">`/`</td>\n<td style=\"text-align:center\">`bonus = 7 / 3;`</td>\n<td style=\"text-align:center\">stores <strong>2.3333</strong> in <em>bonus</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">parentheses</td>\n<td style=\"text-align:center\">none</td>\n<td style=\"text-align:center\">`()`</td>\n<td style=\"text-align:center\">`avg = (99 + 85 + 93) / 3;`</td>\n<td style=\"text-align:center\">stores <strong>92.3333</strong> in <em>avg</em></td>\n</tr>\n</tbody>\n</table>\n</details>\n<br>\n# Misconception Alert \n\n<img src=\"https://images.code.org/18eb833aba4a7199a28929dcd43c73f8-image-1445540549754.gif\" style=\"float: right\">\nWhen you have a statement like `result = 5 + 7;` realize that this **does NOT store a mathematical expression in the variable.**  \n\nRather, with this instruction you are asking to compute 5 + 7 and **THEN** store the answer (a single number) in the variable.\n\n# Do This:\n\n**GOAL:** the goal here is mostly to acquaint yourself with typing arithmetic expressions - the answers to the questions below are less important, and should be used as interesting things to investigate.  \n\nWe've given you some **starting code** with 5 statements similar to ones in the table above.\n* **Add `console.log` or `write` statements** to display the values of each of the variables.\n* Experiment with arithmetic expressions, try to make really big and really small numbers.\n\n<hr>\n\n**Things to Try:**\n* Using **multiplication: what's the biggest a number you can store** in a variable?\n  * How many digits are in the biggest number before it starts using scientific notation?\n* Using **subtraction (or multiplication with negative numbers): what's the lowest number you store?** (low means a negative number with a lot of digits)\n* Using **parentheses** make a crazy-big arithmetic expression.  \n  * NOTE: composing arithmetic expressions is ***much* easier in text mode**, and is actually almost unreadable in block mode.  Try doing this in text mode.\n \n",
        "CSPU5_U3 - Variables - Set to Expression_2018_markdown_instruction": "# Variables and Arithmetic Expressions\nA common thing to want to do is store the result of an arithmetic expression.  The 4 basic arithmetic operations `+ - * /` are available. \n\n<details><summary><strong>Here is a quick table that shows the arithmetic operators with code examples</strong> [click to expand]</summary>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">operation</th>\n<th style=\"text-align:center\">block</th>\n<th style=\"text-align:center\">text</th>\n<th style=\"text-align:center\">example</th>\n<th style=\"text-align:center\">result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">add</td>\n<td style=\"text-align:center\"><img src=\"https://images.code.org/2cf1014a4e0b1dedd361edc73a0f7eb1-image-1445536786715.png\" alt=\"\"></td>\n<td style=\"text-align:center\">`+`</td>\n<td style=\"text-align:center\">`result = 7 + 3;`</td>\n<td style=\"text-align:center\">stores <strong>10</strong> in <em>result</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">subtract</td>\n<td style=\"text-align:center\"><img src=\"https://images.code.org/96b80cd4d866130c7f8567765f9b4b00-image-1445536805959.png\" alt=\"\"></td>\n<td style=\"text-align:center\">`-`</td>\n<td style=\"text-align:center\">`value = 7 - 3;`</td>\n<td style=\"text-align:center\">stores <strong>4</strong> in <em>value</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiply</td>\n<td style=\"text-align:center\"><img src=\"https://images.code.org/3574725201e009142126f39ad1df8a78-image-1445536817791.png\" alt=\"\"></td>\n<td style=\"text-align:center\">`*`</td>\n<td style=\"text-align:center\">`score = 7 * 3;`</td>\n<td style=\"text-align:center\">stores <strong>21</strong> in <em>score</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">divide</td>\n<td style=\"text-align:center\"><img src=\"https://images.code.org/5d470b223717c9daac5246af0d013bdf-image-1445536826467.png\" alt=\"\"></td>\n<td style=\"text-align:center\">`/`</td>\n<td style=\"text-align:center\">`bonus = 7 / 3;`</td>\n<td style=\"text-align:center\">stores <strong>2.3333</strong> in <em>bonus</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">parentheses</td>\n<td style=\"text-align:center\">none</td>\n<td style=\"text-align:center\">`()`</td>\n<td style=\"text-align:center\">`avg = (99 + 85 + 93) / 3;`</td>\n<td style=\"text-align:center\">stores <strong>92.3333</strong> in <em>avg</em></td>\n</tr>\n</tbody>\n</table>\n</details>\n<br>\n# Misconception Alert \n\n<img src=\"https://images.code.org/18eb833aba4a7199a28929dcd43c73f8-image-1445540549754.gif\" style=\"float: right\">\nWhen you have a statement like `result = 5 + 7;` realize that this **does NOT store a mathematical expression in the variable.**  \n\nRather, with this instruction you are asking to compute 5 + 7 and **THEN** store the answer (a single number) in the variable.\n\n# Do This:\n\n**GOAL:** the goal here is mostly to acquaint yourself with typing arithmetic expressions - the answers to the questions below are less important, and should be used as interesting things to investigate.  \n\nWe've given you some **starting code** with 5 statements similar to ones in the table above.\n* **Add `console.log` or `write` statements** to display the values of each of the variables.\n* Experiment with arithmetic expressions, try to make really big and really small numbers.\n\n<hr>\n\n**Things to Try:**\n* Using **multiplication: what's the biggest a number you can store** in a variable?\n  * How many digits are in the biggest number before it starts using scientific notation?\n* Using **subtraction (or multiplication with negative numbers): what's the lowest number you store?** (low means a negative number with a lot of digits)\n* Using **parentheses** make a crazy-big arithmetic expression.  \n  * NOTE: composing arithmetic expressions is ***much* easier in text mode**, and is actually almost unreadable in block mode.  Try doing this in text mode.\n \n",
        "CSPU5_U3 Digital Assistant Design_markdown_instruction": "# Getting Started with Your Digital Assistant\n\n<img src=\"https://images.code.org/e875ff7b54c314a378cdb784f92371a0-image-1445989933171.52.04.png\" style=\"width:200px;float:right;\">\nOver the course of the next few lessons, you'll be __developing your own digital assistant__. To make your digital assistant more useful, it needs to be able to make __decisions__ based on questions the user asks it, and respond intelligently.\n\nTo get started, __choose a topic__ you want your digital assistant to specialize in. It should be something you are interested in and know a lot about. Examples: Country Music, Sushi, College Football, Comedy Movies.\n\nYou'll next set up the layout for your app. __The basic layout contains just two primary design elements:__ a text input and a text area.\n\n# Do This:\n\n- __Choose a topic__ for your digital assistant to specialize in.\n- __Create the layout__ for your app. Your digital assistant should have:\n    - A name\n    - A text input for the user to ask a question\n    - A text area for the digital assistant to respond\n    - The text area should have a greeting for the user (e.g. Ask me a question about movies!)\n",
        "CSPU5_U3 Digital Assistant Set Text_markdown_instruction": "# Respond to Basic User Input\n\n<img src=\"https://images.code.org/2bed8002ff3c89afb02db5809de1c40e-image-1445996503055.gif\" style=\"width:200px;float:right;\">\nNow you can have your digital assistant repeat what the user typed and add a __default response__. It's not the most intelligent response, but you'll build up to that over the next couple of lessons and it's important to build this program in pieces.  \n\n# Looking Back to Move Forward\nYou're going to now add to your program without as much guidance as usual. Keep in mind that __this is very similar to programs you've already built__, so look back at your work for a refresher.\n- __Mad Libs:__ In Mad Libs you got a user's text when the 'Next' button was clicked, filled in the outline with the responses, and displayed the completed Mad Lib\n- __Introducing the 'change' event:__ You just learned about the 'change' event that triggers when the user hits 'enter' on a text input.\n\n# Do This:\n- __Take the user's question and output it to the text area__ when the 'enter' key is pressed in the text input\n- The response should also __include a default phrase__ such as _\"I don't know about that yet!\"_\n- __Format the response with newline characters__ to separate the user's response from the assistant's response.: `\\n`\n- The __text input should clear__ after the user hits 'enter'",
        "CSPU5_U3 Digital Assistant Target_markdown_instruction": "# Introduction to the Digital Assistant\n\n__While digital assistants may seem like magic, they are just elaborate computer programs that parse, or process, text__ looking for combinations of words to make decisions about what to reply.\n\nOver the next few lessons, __you're going to build up your own digital assistant that responds \"intelligently\" to a user's question__, by making a decision about what to reply based on the contents.\n\nYou'll now __explore a demo digital assistant__, Movie Bot, that represents the kind of program that you'll build up to. Try out some of the prompts below and also try your own. You'll quickly find the limits of what this program can and can't do.\n\n# Do This:\n__Run Movie Bot. In the _'enter your question here'_ input, type each of the following prompts and hit 'enter.' __\n- 'help'\n- 'What is the best PG comedy movie ever?'\n- 'What PG comedy movie should I watch next?'\n- 'Could you please tell me the best romance movie?'\n- 'I waNT To WatCH a MovIE!!!'\n- 'What is the capital of Kentucky?'\n- Play around! Ask more questions of Movie Bot and make a prediction about what logic it's using to reply.\n",
        "CSPU5_U3- Variables - Create And Assign_markdown_instruction": "# Create and Assign At Once\n\nIt's so common to want to create a variable and give it an initial value, that JavaScript has a shortcut that lets you create and assign with one line of code like this:\n\n<img src=\"https://images.code.org/84b576f02fe92989d0955dc8d4122eed-image-1445480709312.png\" style=\"width:120px\">\n\n\nYou'll also see a new block in the toolbox for this (see right).<img src=\"https://images.code.org/cbe3f9ffd0bafef72ce18232f746fdbe-image-1445480538334.gif\" style=\"float: right; width: 350px\">\n\n# Do This:\nWe'll just quickly practice using this form of variable creation and assignment.  The code you write will achieve the same thing as the previous level in fewer lines of code. \n\n* **Create a variable called `lives`** and **assign it the value 3** using the new one-line version of this command. (See animation at right.)\n\n* **Add** `console.log` statements to display the value of `lives` just as before.  \n\n* The output in the console should (again) look like this:\n \n <img src=\"https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png\" style=\"border: solid 1px gray\">\n\n",
        "CSPU5_U3- Variables - Create And Assign_2018_markdown_instruction": "# Create and Assign At Once\n\nIt's so common to want to create a variable and give it an initial value, that JavaScript has a shortcut that lets you create and assign with one line of code like this:\n\n<img src=\"https://images.code.org/84b576f02fe92989d0955dc8d4122eed-image-1445480709312.png\" style=\"width:120px\">\n\n\nYou'll also see a new block in the toolbox for this (see right).<img src=\"https://images.code.org/cbe3f9ffd0bafef72ce18232f746fdbe-image-1445480538334.gif\" style=\"float: right; width: 350px\">\n\n# Do This:\nWe'll just quickly practice using this form of variable creation and assignment.  The code you write will achieve the same thing as the previous level in fewer lines of code. \n\n* **Create a variable called `lives`** and **assign it the value 3** using the new one-line version of this command. (See animation at right.)\n\n* **Add** `console.log` statements to display the value of `lives` just as before.  \n\n* The output in the console should (again) look like this:\n \n <img src=\"https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png\" style=\"border: solid 1px gray\">\n\n",
        "CSPU5_U3- Variables - Text Mode_markdown_instruction": "# Give Text Mode a Try!\nThe block-based mode of programming is useful for getting code into your app fast and error free.  But sometimes those little tiny edits are a pain. **Use text mode instead!**  Text mode is designed to make typing code fast and easy, and it also gives a lot of help to make your code error free. \n\nLet's re-create these variables again, but explore some features of text mode this time.\n\n# Try Each of These 3 Things\nWe've given you the first two lines of code in a program. \nExpand each box below and try what's suggested - each builds on the previous one, so you might want to go in order.\n\n<details>\n<summary>1. **Switch to text mode and try to type.** [click to expand]</summary>\n \n Switch to text mode and **type out a `console.log` statement** to display the value of `score`.<br>\n <img src=\"https://images.code.org/d8cd6968bbb5fb5b5a8b8b3e41ee7ad1-image-1445353098262.gif\" style=\"width: 500px\">\n</details><br>\n\n<details>\n<summary>2. **Drag blocks into text mode.** [click to expand]</summary>\n\n If you don't want to type *everything* you can drag a block from the toolbox into text mode and it will show you the text version of it. **Add code to create the `lives` variable and a `console.log` message**.<br>\n \n <img src=\"https://images.code.org/b755a871221705ebdc73e73ffbfd1ad0-image-1445353101095.gif\" style=\"width: 500px\">\n\n</details><br>\n\n<details>\n<summary>3. **Check out code completion.** [click to expand]\n</summary>\n When you type commands a tool tip pops up that tries to guess what you're trying to type. If you see what you want in the box, **highlight it** (you can use arrow keys) and then **hit the tab key**. It will auto-complete the code for you!<br>\n \n <img src=\"https://images.code.org/177d70ab086d1481ad2ba5d367379aff-image-1445353103029.gif\" style=\"width: 500px\">\n </details>",
        "CSPU5_U3- Variables - Text Mode_2018_markdown_instruction": "# Give Text Mode a Try!\nThe block-based mode of programming is useful for getting code into your app fast and error free.  But sometimes those little tiny edits are a pain. **Use text mode instead!**  Text mode is designed to make typing code fast and easy, and it also gives a lot of help to make your code error free. \n\nLet's re-create these variables again, but explore some features of text mode this time.\n\n# Try Each of These 3 Things\nWe've given you the first two lines of code in a program. \nExpand each box below and try what's suggested - each builds on the previous one, so you might want to go in order.\n\n<details>\n<summary>1. **Switch to text mode and try to type.** [click to expand]</summary>\n \n Switch to text mode and **type out a `console.log` statement** to display the value of `score`.<br>\n <img src=\"https://images.code.org/d8cd6968bbb5fb5b5a8b8b3e41ee7ad1-image-1445353098262.gif\" style=\"width: 500px\">\n</details><br>\n\n<details>\n<summary>2. **Drag blocks into text mode.** [click to expand]</summary>\n\n If you don't want to type *everything* you can drag a block from the toolbox into text mode and it will show you the text version of it. **Add code to create the `lives` variable and a `console.log` message**.<br>\n \n <img src=\"https://images.code.org/b755a871221705ebdc73e73ffbfd1ad0-image-1445353101095.gif\" style=\"width: 500px\">\n\n</details><br>\n\n<details>\n<summary>3. **Check out code completion.** [click to expand]\n</summary>\n When you type commands a tool tip pops up that tries to guess what you're trying to type. If you see what you want in the box, **highlight it** (you can use arrow keys) and then **hit the tab key**. It will auto-complete the code for you!<br>\n \n <img src=\"https://images.code.org/177d70ab086d1481ad2ba5d367379aff-image-1445353103029.gif\" style=\"width: 500px\">\n </details>",
        "CSPU5_U3-Design Mode-Image_markdown_instruction": "# Testing Overlapping objects and the Screen with Console.log\n\nThere are two goals here:\n\n1. Practice inserting your own console.log statements.\n2. Investigate how the screen captures events (it's different).\n\n## Do This:\n\n* Add `console.log` statements to each of the 3 event handlers we started you out with.\n  * Make the text that gets printed *be descriptive* so that you know exactly what is happening when.\n\n* **Run** the program\n* **Click on the overlapping objects** both the parts that overlap and the parts that don't.\n* **\n\n**Investigate until you can answer the questions:**\n1. When you click on a location where two objects are overlapping, which event(s) fire(s)?\n2. When you click on an non-overlapping part of some object what gets triggered?\n3. When does a \"click\" on the \"screen\" get triggered?\n\n\n<details><summary>Answers: [click here]</summary>\n\n1. When you click on a location where two objects are overlapping, which event(s) fire(s)?\n<br>\n<li> The event-handler for object that is on top gets triggered.  The object that is underneath is essentially blocked from being clicked in the overlapping portion</li>\n<br><br>\n2. When you click on an non-overlapping part of some object what gets triggered?\n<li>The event-handler for the object gets triggered as you might expect</li>\n<br><br>\n3. When does a \"click\" on the \"screen\" get triggered?\n<li>Always. Events that occur on the screen cannot be blocked by other objects.  If you set up an event listener for the screen it will capture EVERY event of that type, no matter what other UI elements are on the screen.  This behavior of the screen is done on purpose and is useful for certain kinds of things.</li>\n\n\n</details>\n",
        "CSPU5_U3L13 - Debug Id Problem_markdown_instruction": "# Descriptive IDs\n\n**You try it** - give your buttons **descriptive and meaningful IDs** rather than the default `button1`, `button2` and so forth.\n\nRemember to:\n\n* **Change ** the event handler code so that it correctly references the new IDs of the buttons\n* **Run - Test - Debug ** the program to make sure it works, and debug any problems.\n\n<details><summary><strong>Reminder:</strong> Rules About IDs [click to expand]</summary>\n\nIn making descriptive and meaningful IDs there **are some rules about IDs** you need to know.  IDs...\n\n<li> cannot contain spaces.\n<li>  *must* begin with a letter (A-Z or a-z) and may be followed by any number of digits and letters.\n<li>  can contain hyphens (\"-\"), underscores (\"_\"), colons (\":\"), or periods (\".\").\n\n</details>\n",
        "CSPU5_U3L13 - Debugging 1_markdown_instruction": "# Debugging Event-Driven Programs: IDs\n\nTry another one! -- This one is trickier, but very common.\n\n1. **Run the program** and inspect the messages in the Debug Console for clues.\n2. **Investigate** - track down what the root of the problem might be.\n3. **Fix it** the program and correct the errors so that it works as intended.\n4. **Run the program** and verify that both buttons have the intended functionality.\n5. **Repeat as necessary** until the program works as intended\n\n<details><summary>Hint? [click here]</summary>\n\n<li>Remember: IDs are **case-sensitive**!!!</li>\n<li>The error is with the id: **left**[**B/b**]**tn**</li>\n</details>\n",
        "CSPU5_U3L13 - Debugging 2_markdown_instruction": "# Debugging Event-Driven Programs: Ordering Event Handlers\n\n**Ordering Event Handlers: ** Event handlers must come **after the object they reference in the code**. If your event handler comes before your object (in this case a button) your computer would be looking for an event on an object that does not yet exist. You will get an error message and your code will not work as you intend.<img src=\"https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif\" style=\"float: right; width: 150px\">\n\n**Target Application:** Just like the last exercise, you'll again try to make an app that has two buttons, one for moving forward and one for turning left.  \n\nOnce again, we've introduced a new error.\n\n# Do This:\n**Run the Existing program** to see the error that gets generated.\n\n**Debug ** this program so that it works as intended.\n\n**Run the program ** and try both buttons to make sure they have the intended functionality.",
        "CSPU5_U3L13 - Debugging IDs case sensitive_markdown_instruction": "# Debugging Event-Driven Programs: IDs\n\nTry another one! -- This one is trickier, but very common.\n\n1. **Run the program** and inspect the messages in the Debug Console for clues.\n2. **Investigate** - track down what the root of the problem might be.\n3. **Fix it** the program and correct the errors so that it works as intended.\n4. **Run the program** and verify that both buttons have the intended functionality.\n5. **Repeat as necessary** until the program works as intended\n\n<details><summary>Hint? [click here]</summary>\n\n<li>Remember: IDs are **case-sensitive**!!!</li>\n<li>The error is with the id: **left**[**B/b**]**tn**</li>\n</details>\n",
        "CSPU5_U3L13 - Debugging IDs case sensitive_2018_markdown_instruction": "# Debugging Event-Driven Programs: IDs\n\nTry another one! -- This one is trickier, but very common.\n\n1. **Run the program** and inspect the messages in the Debug Console for clues.\n2. **Investigate** - track down what the root of the problem might be.\n3. **Fix it** the program and correct the errors so that it works as intended.\n4. **Run the program** and verify that both buttons have the intended functionality.\n5. **Repeat as necessary** until the program works as intended\n\n<details><summary>Hint? [click here]</summary>\n\n<li>Remember: IDs are **case-sensitive**!!!</li>\n<li>The error is with the id: **left**[**B/b**]**tn**</li>\n</details>\n",
        "CSPU5_U3L13 - Turtle Driver Project_markdown_instruction": "# Create a Turtle Driver App!\n\nAt this point you know enough about buttons and event handlers, and how to debug some common issues that arise to be able to **build your own \"turtle-driver\" app** from scratch. \n\n**Build up the program bit by bit**. Don't try to write all the code at once.  Add a button with an event handler, make sure it works, debug any problems, and then move on to the next part.\n\n# Do This:\n\n**Create ** an application with **four buttons**, one for moving the turtle forward and one each for turning left and right.  The fourth button should do whatever you like.\n\n**Use descriptive and meaningful IDs** for your buttons and ensure your event handlers work as you intend.\n\n**If you have extra time** add more buttons that use other turtle commands you'd like to include.  You can also use colors, and different line widths, dots, etc. ",
        "CSPU5_U3L13 eventsDetails_markdown_instruction": "# onEvent\n\n**You try it!** - Make the turtle move forward when the button is clicked.\n\n* **Add an `onEvent` block** \n* Set the **id** and **type** you want.\n* Add `moveForward` to the function definition\n\n* **Run the program** to make sure it works.\n* **Try changing the event type** to something like *\"mouseover\"* and see what happens.  Not all event types will work with buttons but it's fun to play a little bit.\n\nOnce you've got the program responding to some event, congratulations! You've just made your first interactive app. \n\n**Click Finish** to move on to the next problem.\n\n",
        "CSPU5_U3L14 - User Input Division calculator_markdown_instruction": "# Assigning User Input to Variables\n<img src=\"https://images.code.org/bad81f7d5e514a1d727e51aab52aac10-image-1445552999503.gif\" style=\"width: 350px; float:right\">\nLet's use `promptNum` to make a simple calculator. The `promptNum` command appears in the variables toolbox because it's typically used as a way to get a value from the user that you want to hold on to while the program runs.\n\n`promptNum` is similar to `randomNumber` in that it is a function whose return value *evaluates to a number*. The difference here is that `promptNum` pops up an input dialog box and waits for the user to type a number.  Once they do and hit \"OK\" the number they typed is returned and we can store it in a variable to use in our programs.\n\n\n# Do This:\nWrite a program that acts as a simple calculator. (An animation of the end result is shown at right.) <img src=\"https://images.code.org/e644d4b17d1d6fdb6b5a93651d512f8a-image-1445552700557.gif\" style=\"width: 250px; float: right\">\n* Ask the user to **enter a number**.\n* Then ask the user to **enter a second number**.\n* **Display the result** of *some* calculation.\n  * The example shows division but you may choose something else if you like.\n\nWe have given you starting code that shows you how to get the first number.  The rest of the code is up to you.\n\n",
        "CSPU5_U3L14 - User Input Division calculator_2018_markdown_instruction": "# Assigning User Input to Variables\n<img src=\"https://images.code.org/bad81f7d5e514a1d727e51aab52aac10-image-1445552999503.gif\" style=\"width: 350px; float:right\">\nLet's use `promptNum` to make a simple calculator. The `promptNum` command appears in the variables toolbox because it's typically used as a way to get a value from the user that you want to hold on to while the program runs.\n\n`promptNum` is similar to `randomNumber` in that it is a function whose return value *evaluates to a number*. The difference here is that `promptNum` pops up an input dialog box and waits for the user to type a number.  Once they do and hit \"OK\" the number they typed is returned and we can store it in a variable to use in our programs.\n\n\n# Do This:\nWrite a program that acts as a simple calculator. (An animation of the end result is shown at right.) <img src=\"https://images.code.org/e644d4b17d1d6fdb6b5a93651d512f8a-image-1445552700557.gif\" style=\"width: 250px; float: right\">\n* Ask the user to **enter a number**.\n* Then ask the user to **enter a second number**.\n* **Display the result** of *some* calculation.\n  * The example shows division but you may choose something else if you like.\n\nWe have given you starting code that shows you how to get the first number.  The rest of the code is up to you.\n\n",
        "CSPU5_U3L14 - Variable ReAssignment pt2_markdown_instruction": "# Variable Re-assignment - Part 2: Updating Values\n\nAll of our examples so far have shown how to set the value of a variable by using combinations of numbers and other variables.  But what if you wanted to do something like **add 10 to the *current* value of a variable**? \n\nBecause updating the value in a variable is just moving memory around, the process has to go something like this:\n* Read the current value of a variable.\n* Add 10 to it.\n* Store the new value back into the same variable.\n\nThe technical term for this is called **variable re-assignment** - when you change the value of a variable based on its current contents.   To increase the value of `num1` by 10 you actually need to do this:\n\n<img src=\"https://images.code.org/c49b1a0fb81de4b90558fdb278e40987-image-1445942169121.png\" style=\"float:right\">\n```\nnum1 = num1 + 10;\n```\nThe diagram at right shows a picture of what's happening (it assumes the value of `num1` is 7 before the line is executed).  It's actually very similar to what happens with plain old arithmetic: compute a value, then store it in a variable.  Because the computation has to happen before storing the result in a variable, there is no contradiction here.\n\n<details>\n<Summary><strong>Common Mistakes & Tips</strong> [click to expand]</Summary>\n\n<h3>\nMistake 1\n</h3>\n<p>To increase the value of variable by 10 (for example) a common mistake is to think that this statement alone will do the trick.\n</p><p>\n\n```\nnum1 + 10;\n```\n</p><p>\nIt doesn't. This tells the computer to add 10 to whatever the value of `num1` is.  And the computer will do that, and the result will go....nowhere.  It will be lost.\n</p><p>\nBecause you are trying assign a new value to a variable it should make sense that **the = sign must be involved somehow**.  \n</p>\n<h3>\nMistake 2\n</h3>\n<p>\nIf you were in math class this statment would make no sense:\n```\nnum1 = num1 + 10;\n```\n</p><p>\nBut **remember to read = as \"gets.\"** If you read the statement above as: \"num1 *gets* the value of num1's current value plus 10\" it might make more sense.  Get in the habit of using \"gets.\"\n</p>\n</details>\n\n# Do This:\n\n  * **Make a prediction.**\n We start you out with some code again (see below). \n\n <img src=\"https://images.code.org/60b25394c387bc111451f0e481528733-image-1447800367736.43.42.png\" style=\"width: 500px;\"> \n\n Trace the code and predict what you think will be printed to the console.  (NOTE: We're serious about this \"make a prediction\" stuff. When you force yourself to make a prediction about what code will do you will learn faster since it triggers you to apply your mental model of what's happening.)\n  \n  * **Run the program** to see if you were right.\n \n  * **Add a `console.log` statement**.\n \n  We've left you with a *little bit* of programming to do: add a `console.log` statement at the end of the program to see the last value of `someNum` to see if your full prediction is correct.\n",
        "CSPU5_U3L14 - Variable ReAssignment pt2_2018_markdown_instruction": "# Variable Re-assignment - Part 2: Updating Values\n\nAll of our examples so far have shown how to set the value of a variable by using combinations of numbers and other variables.  But what if you wanted to do something like **add 10 to the *current* value of a variable**? \n\nBecause updating the value in a variable is just moving memory around, the process has to go something like this:\n* Read the current value of a variable.\n* Add 10 to it.\n* Store the new value back into the same variable.\n\nThe technical term for this is called **variable re-assignment** - when you change the value of a variable based on its current contents.   To increase the value of `num1` by 10 you actually need to do this:\n\n<img src=\"https://images.code.org/c49b1a0fb81de4b90558fdb278e40987-image-1445942169121.png\" style=\"float:right\">\n```\nnum1 = num1 + 10;\n```\nThe diagram at right shows a picture of what's happening (it assumes the value of `num1` is 7 before the line is executed).  It's actually very similar to what happens with plain old arithmetic: compute a value, then store it in a variable.  Because the computation has to happen before storing the result in a variable, there is no contradiction here.\n\n<details>\n<Summary><strong>Common Mistakes & Tips</strong> [click to expand]</Summary>\n\n<h3>\nMistake 1\n</h3>\n<p>To increase the value of variable by 10 (for example) a common mistake is to think that this statement alone will do the trick.\n</p><p>\n\n```\nnum1 + 10;\n```\n</p><p>\nIt doesn't. This tells the computer to add 10 to whatever the value of `num1` is.  And the computer will do that, and the result will go....nowhere.  It will be lost.\n</p><p>\nBecause you are trying assign a new value to a variable it should make sense that **the = sign must be involved somehow**.  \n</p>\n<h3>\nMistake 2\n</h3>\n<p>\nIf you were in math class this statment would make no sense:\n```\nnum1 = num1 + 10;\n```\n</p><p>\nBut **remember to read = as \"gets.\"** If you read the statement above as: \"num1 *gets* the value of num1's current value plus 10\" it might make more sense.  Get in the habit of using \"gets.\"\n</p>\n</details>\n\n# Do This:\n\n  * **Make a prediction.**\n We start you out with some code again (see below). \n\n <img src=\"https://images.code.org/60b25394c387bc111451f0e481528733-image-1447800367736.43.42.png\" style=\"width: 500px;\"> \n\n Trace the code and predict what you think will be printed to the console.  (NOTE: We're serious about this \"make a prediction\" stuff. When you force yourself to make a prediction about what code will do you will learn faster since it triggers you to apply your mental model of what's happening.)\n  \n  * **Run the program** to see if you were right.\n \n  * **Add a `console.log` statement**.\n \n  We've left you with a *little bit* of programming to do: add a `console.log` statement at the end of the program to see the last value of `someNum` to see if your full prediction is correct.\n",
        "CSPU5_U3L14 - concatenate simple_markdown_instruction": "# Text and Variables Living Together!\n\nSometimes itâs useful to display text along with the value of a variable in the same line of output. To do this you use `+` to attach a variable onto a literal string of characters.  Here is an example:\n\n<img src=\"https://images.code.org/a35e68b062fc814871a8323938cf3384-image-1445888147995.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\">\n\nNotice that the `+` operator has **two different meanings in JavaScript depending on what type of data you're applying it to**. Click the explanations below for more details.\n\n<details>\n<summary>If **both operands are numbers** `+` means to add those two numbers together.</summary>\n\nThis is standard addition.  It works both with numbers and with variables that contain numbers, as shown below.<br>\n\n<img src=\"https://images.code.org/eb50a1fcea459fe74774d903b07a274f-image-1445887814602.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\n\nBecause `num1` is a variable that holds a number, and 10 itself is obviously a number, in this case `+` will do addition like you would expect.\n\n</details>\n<br>\n<details>\n<summary>If **either of the operands is a string** `+` treats both as if they were strings and combines them to create a single string.</summary>\nThis is potentially confusing behavior and can get pretty weird if the text *looks* like numbers.  For example, this code will display **16100** to the screen.<br>\n\n<img src=\"https://images.code.org/a9c54b664bd192aa5bf611808d88a3bc-image-1445887893598.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\n\nWhy? Because JavaScript sees you trying to display a mix of text and variable values. \"16\" (in quotes) is a string of ASCII characters not a number.  And so JavaScript converts everything to text, and the characters in the result of \"16\"+\"100\" comes out to \"16100\". \n\n</details>\n<br>\n \n**TIP:** It's common to want to sandwich a variable between some text when displaying it.  You can string together multiple pieces of text and variables using the `+` operator.  For example, you can do this:\n<br> \n\n<img src=\"https://images.code.org/65b0e277f058903bd3b956cc59ee5253-image-1445887976271.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\n \n<br>\n<details>\n<summary>**Misconception Alert**</summary>\n\nThe **key thing to understand** about the `+` symbol is that it can _only_ do actual arithmetic addition if the values on either side of the `+` are actually numbers or variables that contain numbers. \n\n**And** if the `+` symbol cannot determine whether the value is a number then it **assumes it's a string**, and converts everything to a string and tries to concatenate it.  \n \nThe computer relies on you - the programmer - to make sure that the **type of data** stored in a variable is appropriate for the task at hand.\n</details><br>\n\nOn the next screen we'll have you play with this a little bit, but you'll write statements to display a mix of text and strings from here on out.\n\n# Do This:\nWe have given you the starting code shown below.  You should **modify** the `write` statement on **line 3** to combine text and variables together to make the app display a single line of text as shown.\n\n|starting code|output|\n|--|--|\n|<img src=\"https://images.code.org/a1b84a8728599e9945c576d3bb459140-image-1445891621155.png\" style=\"height:50px\">| <img src=\"https://images.code.org/f5673df128eca0f9637c0cca1729b489-image-1445891800242.png\" style=\"width: 250px\">|",
        "CSPU5_U3L14 - concatenate simple_2018_markdown_instruction": "# Text and Variables Living Together!\n\nSometimes itâs useful to display text along with the value of a variable in the same line of output. To do this you use `+` to attach a variable onto a literal string of characters.  Here is an example:\n\n<img src=\"https://images.code.org/a35e68b062fc814871a8323938cf3384-image-1445888147995.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\">\n\nNotice that the `+` operator has **two different meanings in JavaScript depending on what type of data you're applying it to**. Click the explanations below for more details.\n\n<details>\n<summary>If **both operands are numbers** `+` means to add those two numbers together.</summary>\n\nThis is standard addition.  It works both with numbers and with variables that contain numbers, as shown below.<br>\n\n<img src=\"https://images.code.org/eb50a1fcea459fe74774d903b07a274f-image-1445887814602.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\n\nBecause `num1` is a variable that holds a number, and 10 itself is obviously a number, in this case `+` will do addition like you would expect.\n\n</details>\n<br>\n<details>\n<summary>If **either of the operands is a string** `+` treats both as if they were strings and combines them to create a single string.</summary>\nThis is potentially confusing behavior and can get pretty weird if the text *looks* like numbers.  For example, this code will display **16100** to the screen.<br>\n\n<img src=\"https://images.code.org/a9c54b664bd192aa5bf611808d88a3bc-image-1445887893598.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\n\nWhy? Because JavaScript sees you trying to display a mix of text and variable values. \"16\" (in quotes) is a string of ASCII characters not a number.  And so JavaScript converts everything to text, and the characters in the result of \"16\"+\"100\" comes out to \"16100\". \n\n</details>\n<br>\n \n**TIP:** It's common to want to sandwich a variable between some text when displaying it.  You can string together multiple pieces of text and variables using the `+` operator.  For example, you can do this:\n<br> \n\n<img src=\"https://images.code.org/65b0e277f058903bd3b956cc59ee5253-image-1445887976271.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\n \n<br>\n<details>\n<summary>**Misconception Alert**</summary>\n\nThe **key thing to understand** about the `+` symbol is that it can _only_ do actual arithmetic addition if the values on either side of the `+` are actually numbers or variables that contain numbers. \n\n**And** if the `+` symbol cannot determine whether the value is a number then it **assumes it's a string**, and converts everything to a string and tries to concatenate it.  \n \nThe computer relies on you - the programmer - to make sure that the **type of data** stored in a variable is appropriate for the task at hand.\n</details><br>\n\nOn the next screen we'll have you play with this a little bit, but you'll write statements to display a mix of text and strings from here on out.\n\n# Do This:\nWe have given you the starting code shown below.  You should **modify** the `write` statement on **line 3** to combine text and variables together to make the app display a single line of text as shown.\n\n|starting code|output|\n|--|--|\n|<img src=\"https://images.code.org/a1b84a8728599e9945c576d3bb459140-image-1445891621155.png\" style=\"height:50px\">| <img src=\"https://images.code.org/f5673df128eca0f9637c0cca1729b489-image-1445891800242.png\" style=\"width: 250px\">|",
        "CSPU5_U3L14 - moving memory challenge1_markdown_instruction": "# Moving Memory - Challenge 1\n\nThe next several levels all present challenges related to \"moving memory\" around in your program.  \n\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n\n**Rules**:\n\n  * You may **only** add lines of code that re-assign values of variables provided.\n  * You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n  * You **MAY NOT** type or introduce any numbers.\n  * You **MAY NOT** add or create any new variables.\n  * You **MAY NOT** change or alter the `console.log` statement at all.\n\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n<br><br>\n### Try this example yourself...\n\n",
        "CSPU5_U3L14 - moving memory challenge1_2018_markdown_instruction": "# Moving Memory - Challenge 1\n\nThe next several levels all present challenges related to \"moving memory\" around in your program.  \n\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n\n**Rules**:\n\n  * You may **only** add lines of code that re-assign values of variables provided.\n  * You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n  * You **MAY NOT** type or introduce any numbers.\n  * You **MAY NOT** add or create any new variables.\n  * You **MAY NOT** change or alter the `console.log` statement at all.\n\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n<br><br>\n### Try this example yourself...\n\n",
        "CSPU5_U3L14 - moving memory challenge2_markdown_instruction": "# Moving Memory - Challenge 2\n\n# Try another one!! \n* Click through to see a new problem provided in the starter code.  \n* A reminder of the rules and example are below if you need to sneak a peek.\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "CSPU5_U3L14 - moving memory challenge2_2018_markdown_instruction": "# Moving Memory - Challenge 2\n\n# Try another one!! \n* Click through to see a new problem provided in the starter code.  \n* A reminder of the rules and example are below if you need to sneak a peek.\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "CSPU5_U3L14 - moving memory challenge3_markdown_instruction": "# Moving Memory - Challenge 3\n\nTry another one.  Here is the starting code:\n\n```\nvar x = 2;\nvar y = 3;\n// your code here\n\nconsole.log(\"The value of x is: \" + x + \" (x should be 7)\");\n```\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "CSPU5_U3L14 - moving memory challenge3_2018_markdown_instruction": "# Moving Memory - Challenge 3\n\nTry another one.  Here is the starting code:\n\n```\nvar x = 2;\nvar y = 3;\n// your code here\n\nconsole.log(\"The value of x is: \" + x + \" (x should be 7)\");\n```\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "CSPU5_U3L14 - moving memory challenge4_markdown_instruction": "# Moving Memory - Challenge 4\n\nTry another one.  Here is the starting code:\n\n```\nvar x = 2;\n// your code here\n\nconsole.log(\"The value of x is: \" + x + \" (x should be 8)\");\n```\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "CSPU5_U3L14 - moving memory challenge4_2018_markdown_instruction": "# Moving Memory - Challenge 4\n\nTry another one.  Here is the starting code:\n\n```\nvar x = 2;\n// your code here\n\nconsole.log(\"The value of x is: \" + x + \" (x should be 8)\");\n```\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "CSPU5_U3L14 - moving memory challenge5_markdown_instruction": "# Moving Memory - Challenge 5\n\nTry another one.  Here is the starting code:\n\n```\nvar x = 2;\nvar y = 3;\nvar z = 0;\n// your code here\n\nconsole.log(\"The value of x is: \" + x + \" (x should be 3)\");\nconsole.log(\"The value of y is: \" + y + \" (y should be 2)\");\n```\n</p><p>\n<details>\n<summary><strong><big>HINT:</big></strong>(click to expand)</summary>\nSince this one requires you to change the value of two variables you need to be careful about which one you change first, since its new value will affect the next lines of code.\n<p></p>\nYou can also take advantage of the fact that since `z` is not used as a display value, you can use it as a temporary holding ground for one value while you change another.\n\n</details>\n</p><p>\n</p><p>\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "CSPU5_U3L14 - moving memory challenge5_2018_markdown_instruction": "# Moving Memory - Challenge 5\n\nTry another one.  Here is the starting code:\n\n```\nvar x = 2;\nvar y = 3;\nvar z = 0;\n// your code here\n\nconsole.log(\"The value of x is: \" + x + \" (x should be 3)\");\nconsole.log(\"The value of y is: \" + y + \" (y should be 2)\");\n```\n</p><p>\n<details>\n<summary><strong><big>HINT:</big></strong>(click to expand)</summary>\nSince this one requires you to change the value of two variables you need to be careful about which one you change first, since its new value will affect the next lines of code.\n<p></p>\nYou can also take advantage of the fact that since `z` is not used as a display value, you can use it as a temporary holding ground for one value while you change another.\n\n</details>\n</p><p>\n</p><p>\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "CSPU5_U3L14 - moving memory challenge6_markdown_instruction": "# Moving Memory - Challenge 5\n\nTry another one.  Here is the starting code:\n\n```\nvar x = 5;\nvar y = 11;\nvar z = 4;\n// your code here\n\nconsole.log(\"The value of x is: \" + x + \" (x should be 2)\");\nconsole.log(\"The value of y is: \" + y + \" (y should be 6)\");\nconsole.log(\"The value of z is: \" + z + \" (z should be 8)\");\n```\n</p><p>\n<details>\n<summary><strong><big>HINT:</big></strong> (click to expand)</summary>\nThis one requires you to be a little clever.  Think about setting the value of one variable that you could then use to easily set the value of the other variables.  Then the trick is to figure out how to use the variables you've been given to make that useful value.\n\n</details>\n</p><p>\n</p><p>\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "CSPU5_U3L14 - moving memory challenge6_2018_markdown_instruction": "# Moving Memory - Challenge 5\n\nTry another one.  Here is the starting code:\n\n```\nvar x = 5;\nvar y = 11;\nvar z = 4;\n// your code here\n\nconsole.log(\"The value of x is: \" + x + \" (x should be 2)\");\nconsole.log(\"The value of y is: \" + y + \" (y should be 6)\");\nconsole.log(\"The value of z is: \" + z + \" (z should be 8)\");\n```\n</p><p>\n<details>\n<summary><strong><big>HINT:</big></strong> (click to expand)</summary>\nThis one requires you to be a little clever.  Think about setting the value of one variable that you could then use to easily set the value of the other variables.  Then the trick is to figure out how to use the variables you've been given to make that useful value.\n\n</details>\n</p><p>\n</p><p>\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "CSPU5_U3L15 - Debug forget to update var on reset in UpDown app_markdown_instruction": "# Bug Squash!\n\nThe *Count Up/Down App* has a bug! \n\nA ** common mistake** has been introduced into the code.\n\nIt's a tricky one to find because at first it looks like everything is okay.\n\n# Do This:\n\n* **Run the program.**\n\n* **To see the bug:**\n  * Click the up or down arrow until you get to the \"gameOverScreen.\"\n  * Click \"start over.\"\n  * Click the up or down arrow again... what the?\n \n* **Look at the code and fix the problem.**\n\n* **Read about the common mistake** by expanding the area below.\n\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<br><br>\n<strong><big>...forgetting to reset <i>everything</i> you need to actually start over.</big></strong><br><br>\nFrequently to actually reset you need to set a few variables back to initial values <i>and</i> update all the UI components, especially those that rely on those variables, so they reflect the new values.<br><br>\n\nAnother common mistake shown here is setting the text of a label to \"0\" rather than the value of the count variable.  For example, these two lines of code are a little dangerous:<br><br>\n<pre>\ncount = 0;\nsetText(\"countDisplayLabel\", 0);\n</pre>\n\nTo be safe, if a label is supposed to display the value of a variable, you should always use the variable <i>instead of hard-coding numbers</i> as a check on yourself.  The general rule of thumb is: never hard-code a value instead of using a variable that holds the value you need to show.<br><br>\n\n<b>A common strategy</b> for handling this is to put everything you need to reset the app into a function which you can call at both the beginning of your program, and from other screens later on.  For example:<br><br>\n\n<pre>\nfunction resetAll(){\n  count = 0;\n  setText(\"countDisplayLabel\", count);\n  setScreen(\"gamePlayScreen\");\n}\n</pre>\n\nThen in some other code like a button event handler you can just call your reset \nfunction:<br><br>\n\n<pre>\nonEvent(\"startOverButton\", \"click\", \nfunction() {\n  <span style=\"background-color:yellow\">resetAll();</span>\n});\n</pre>\n\n</details>",
        "CSPU5_U3L15 - Debug forget to update var on reset in UpDown app_2018_markdown_instruction": "# Bug Squash!\n\nThe *Count Up/Down App* has a bug! \n\nA ** common mistake** has been introduced into the code.\n\nIt's a tricky one to find because at first it looks like everything is okay.\n\n# Do This:\n\n* **Run the program.**\n\n* **To see the bug:**\n  * Click the up or down arrow until you get to the \"gameOverScreen.\"\n  * Click \"start over.\"\n  * Click the up or down arrow again... what the?\n \n* **Look at the code and fix the problem.**\n\n* **Read about the common mistake** by expanding the area below.\n\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<br><br>\n<strong><big>...forgetting to reset <i>everything</i> you need to actually start over.</big></strong><br><br>\nFrequently to actually reset you need to set a few variables back to initial values <i>and</i> update all the UI components, especially those that rely on those variables, so they reflect the new values.<br><br>\n\nAnother common mistake shown here is setting the text of a label to \"0\" rather than the value of the count variable.  For example, these two lines of code are a little dangerous:<br><br>\n<pre>\ncount = 0;\nsetText(\"countDisplayLabel\", 0);\n</pre>\n\nTo be safe, if a label is supposed to display the value of a variable, you should always use the variable <i>instead of hard-coding numbers</i> as a check on yourself.  The general rule of thumb is: never hard-code a value instead of using a variable that holds the value you need to show.<br><br>\n\n<b>A common strategy</b> for handling this is to put everything you need to reset the app into a function which you can call at both the beginning of your program, and from other screens later on.  For example:<br><br>\n\n<pre>\nfunction resetAll(){\n  count = 0;\n  setText(\"countDisplayLabel\", count);\n  setScreen(\"gamePlayScreen\");\n}\n</pre>\n\nThen in some other code like a button event handler you can just call your reset \nfunction:<br><br>\n\n<pre>\nonEvent(\"startOverButton\", \"click\", \nfunction() {\n  <span style=\"background-color:yellow\">resetAll();</span>\n});\n</pre>\n\n</details>",
        "CSPU5_U3L15 - Debug if never triggers in UpDown app_markdown_instruction": "# Bug Squash!\n\nThe *Count Up/Down App* has a bug! \n\nA ** common mistake** has been introduced into the code.\n\nWe've changed the app so that it counts up and down by 3 rather than by 1.\n\n# Do This:\n\n* **Run the program.**\n\n* **To see the bug:**\n  * Click the up or down arrow trying to get to the game over screen.\n  * It should be impossible to get to the game over screen.\n \n* **Look at the code and fix the problem.**\n\n* **Read about the common mistake** by expanding the area below.\n\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<br><br>\n<strong><big>...the condition you're checking in your `if` statement is actually impossible to reach.</big></strong>\n<p>\nThis problem was probably easy to see here, but in practice <b>logic errors</b> like this can be devilish to track down. It's especially hard because the program gives you no hints that anything is wrong - it is syntactially a correct program. The computer cannot tell ahead of time whether your `if` statements will ever be true. So you need to trace through the logic of your program step by step to try to figure out why something's not happening that you expect should have happened.\n</p>\n\n</details>",
        "CSPU5_U3L15 - Debug if never triggers in UpDown app_2018_markdown_instruction": "# Bug Squash!\n\nThe *Count Up/Down App* has a bug! \n\nA ** common mistake** has been introduced into the code.\n\nWe've changed the app so that it counts up and down by 3 rather than by 1.\n\n# Do This:\n\n* **Run the program.**\n\n* **To see the bug:**\n  * Click the up or down arrow trying to get to the game over screen.\n  * It should be impossible to get to the game over screen.\n \n* **Look at the code and fix the problem.**\n\n* **Read about the common mistake** by expanding the area below.\n\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<br><br>\n<strong><big>...the condition you're checking in your `if` statement is actually impossible to reach.</big></strong>\n<p>\nThis problem was probably easy to see here, but in practice <b>logic errors</b> like this can be devilish to track down. It's especially hard because the program gives you no hints that anything is wrong - it is syntactially a correct program. The computer cannot tell ahead of time whether your `if` statements will ever be true. So you need to trace through the logic of your program step by step to try to figure out why something's not happening that you expect should have happened.\n</p>\n\n</details>",
        "CSPU5_U3L15 - Debugging Simple If-statements =v==_markdown_instruction": "# Bug Squash!\n\nThe *Count Up/Down App* has a bug! \n\nA **very common mistake** has been introduced into the code.  It's one that vexes early programmers, but we're sure you'll find it.\n\n# Do This:\n\n* **Run the program.**\n\n* **To see the bug:**\n  * Click the up arrow just once.\n  * Restart the program.\n  * Click the down arrow just once.\n \n* **Look at the code and fix the problem.**\n\n* **Read about the common mistake** by expanding the area below.\n\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<br><br>\n<strong><big>...using `=` instead of `==`</big></strong>\n<p>\n<b>Yup,</b> we told you this is a common mistake!  And it's an easy one to make.\n</p>\n<p>\nRemember that the single `=` sign does assignment and it actually *also* evaluates to true.  This means that if you stick it in an `if` statement, that `if` statement will <i>always</i> be true.\n</p>\n<p>\nOne strategy to avoid this mistake is to **read code aloud in your head** and don't even use the single word \"equal\":\n<li> think **\"gets\"** every time you see `=`</li>\n<li> think **\"equal-equal\"** every time you see `==` </li>\n</p>\n<p>\nIf you get in the habit of thinking that way, these mistakes are easier to catch.  For example you'd see this:<br>\n`if (count = 20)`<br>\nand read:<br>\n<i>\"if count gets 20\"</i> ...and know that that doesn't make sense.\n</p>\n\n<p></p>\n</details>\n\n",
        "CSPU5_U3L15 - Debugging Simple If-statements =v==_2018_markdown_instruction": "# Bug Squash!\n\nThe *Count Up/Down App* has a bug! \n\nA **very common mistake** has been introduced into the code.  It's one that vexes early programmers, but we're sure you'll find it.\n\n# Do This:\n\n* **Run the program.**\n\n* **To see the bug:**\n  * Click the up arrow just once.\n  * Restart the program.\n  * Click the down arrow just once.\n \n* **Look at the code and fix the problem.**\n\n* **Read about the common mistake** by expanding the area below.\n\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<br><br>\n<strong><big>...using `=` instead of `==`</big></strong>\n<p>\n<b>Yup,</b> we told you this is a common mistake!  And it's an easy one to make.\n</p>\n<p>\nRemember that the single `=` sign does assignment and it actually *also* evaluates to true.  This means that if you stick it in an `if` statement, that `if` statement will <i>always</i> be true.\n</p>\n<p>\nOne strategy to avoid this mistake is to **read code aloud in your head** and don't even use the single word \"equal\":\n<li> think **\"gets\"** every time you see `=`</li>\n<li> think **\"equal-equal\"** every time you see `==` </li>\n</p>\n<p>\nIf you get in the habit of thinking that way, these mistakes are easier to catch.  For example you'd see this:<br>\n`if (count = 20)`<br>\nand read:<br>\n<i>\"if count gets 20\"</i> ...and know that that doesn't make sense.\n</p>\n\n<p></p>\n</details>\n\n",
        "CSPU5_U3L15 - Simple If-statements in UpDown App_markdown_instruction": "# Add Your Own *if* Statement\n\nIn most apps you want to make decisions based on the state of some data you're keeping track of in the app.  \n\nWe've **modified** the *Count Up/Down App* to add another screen.  When the count reaches certain values, we'll switch screens.  In the code you'll see an `if` statement has been added to the event handler for up arrow that states:\n\n![](https://images.code.org/6e8acfef603fc7bd900d5ffb3a045150-image-1446125072632.png)\n\n  * **If** the value of `count` is equal to **20, then** set the screen to *\"gameOverScreen\"*.\n<img src=\"https://images.code.org/b737f4a8924a114c8f320130e73949a6-image-1446124106409.gif\" style=\"width: 150px; float: right\">\n\n# Do This:\n**Add an `if` statement so that when counting down the app changes screens when the count reaches -5. **\n\n* **Run the app** and click the up arrow 20 times to see what happens when the `if` statement is triggered.\n* **Study the `if` statement** for the up arrow button to see how it works.\n* **Add an `if` statement** to the down arrow event handler:\n\t* **If** `count` is equal to **-5, then** set the screen to the \"gameOverScreen.\"\n* **Goal:** Once you're finished, clicking the down arrow in the app should work like the animation shown to the right.\n\n<details><summary><strong><big>HINT:</big></strong> [click to expand]</summary>\nThere is a subtle challenge here that you need to set the text of the label on the <i>gameOverScreen</i> when you change screens.\n<p>\n</p>\n<b>NOTE:</b> Your code can call `setText` for any UI element, on any screen, at any time - even if the element isn't on the screen that's currently showing.\n</details>\n\n",
        "CSPU5_U3L15 - Simple If-statements in UpDown App_2018_markdown_instruction": "# Add Your Own *if* Statement\n\nIn most apps you want to make decisions based on the state of some data you're keeping track of in the app.  \n\nWe've **modified** the *Count Up/Down App* to add another screen.  When the count reaches certain values, we'll switch screens.  In the code you'll see an `if` statement has been added to the event handler for up arrow that states:\n\n![](https://images.code.org/6e8acfef603fc7bd900d5ffb3a045150-image-1446125072632.png)\n\n  * **If** the value of `count` is equal to **20, then** set the screen to *\"gameOverScreen\"*.\n<img src=\"https://images.code.org/b737f4a8924a114c8f320130e73949a6-image-1446124106409.gif\" style=\"width: 150px; float: right\">\n\n# Do This:\n**Add an `if` statement so that when counting down the app changes screens when the count reaches -5. **\n\n* **Run the app** and click the up arrow 20 times to see what happens when the `if` statement is triggered.\n* **Study the `if` statement** for the up arrow button to see how it works.\n* **Add an `if` statement** to the down arrow event handler:\n\t* **If** `count` is equal to **-5, then** set the screen to the \"gameOverScreen.\"\n* **Goal:** Once you're finished, clicking the down arrow in the app should work like the animation shown to the right.\n\n<details><summary><strong><big>HINT:</big></strong> [click to expand]</summary>\nThere is a subtle challenge here that you need to set the text of the label on the <i>gameOverScreen</i> when you change screens.\n<p>\n</p>\n<b>NOTE:</b> Your code can call `setText` for any UI element, on any screen, at any time - even if the element isn't on the screen that's currently showing.\n</details>\n\n",
        "CSPU5_U3L15 - count upDown bug forget to set text_markdown_instruction": "# Bug Squash!\n\nThis program has a bug that doesn't produce an error. It just doesn't do what's expected.  The reason is a common mistake that all programmers make.\n\n# Do This:\n* **Run the program.**\n* **To see the bug:**\n  * Click the up arrow about 5 times.\n  * Click the down arrow about 10 times.\n  * Click the up arrow again.\n* **Look at the code and fix the problem.**\n* **Read about the common mistake** by expanding the area below.\n* **Once you've fixed the issue, move on.**\n <p>\n\n</p>\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<big>...forgetting to update the display after changing something in the program</big>\n\n\n<h1> Misconception Alert - Changing a Variable Doesn't Change the Display</h1>\n\nA common misunderstanding about variables and displaying them is to think that a text label that's displaying a variable will change when the variable changes. NO.  A text label is just \"dumb\" container for text.  It's similar to a variable itself in that it won't change unless you explicitly tell it to.\n<p></p>\n<h1>Concept: Separation of Program Data from How It's Viewed</h1>\nMaintaining variables and program data is a **different task** from maintaining the display of the app.  Your program could actually run without updating the display at all - it would still be working behind the scenes; it just wouldn't be very fun or interesting to use.\n<p></p>\n</details>\n\n\n",
        "CSPU5_U3L15 - count upDown bug forget to set text_2018_markdown_instruction": "# Bug Squash!\n\nThis program has a bug that doesn't produce an error. It just doesn't do what's expected.  The reason is a common mistake that all programmers make.\n\n# Do This:\n* **Run the program.**\n* **To see the bug:**\n  * Click the up arrow about 5 times.\n  * Click the down arrow about 10 times.\n  * Click the up arrow again.\n* **Look at the code and fix the problem.**\n* **Read about the common mistake** by expanding the area below.\n* **Once you've fixed the issue, move on.**\n <p>\n\n</p>\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<big>...forgetting to update the display after changing something in the program</big>\n\n\n<h1> Misconception Alert - Changing a Variable Doesn't Change the Display</h1>\n\nA common misunderstanding about variables and displaying them is to think that a text label that's displaying a variable will change when the variable changes. NO.  A text label is just \"dumb\" container for text.  It's similar to a variable itself in that it won't change unless you explicitly tell it to.\n<p></p>\n<h1>Concept: Separation of Program Data from How It's Viewed</h1>\nMaintaining variables and program data is a **different task** from maintaining the display of the app.  Your program could actually run without updating the display at all - it would still be working behind the scenes; it just wouldn't be very fun or interesting to use.\n<p></p>\n</details>\n\n\n",
        "CSPU5_U3L15 - count upDown bug logic error wrong update_markdown_instruction": "# Bug Squash!\n\nThis program has a few different bugs. Find them and squash them!\n\n# Do This:\n* **Run the program.**\n* **To see the bug:**\n  * Click the up arrow exactly twice.\n \t* Restart the program and do this a few times - you'll notice nothing happens the first time you click.\n  * Click the down arrow several times.\n* **Look at the code and fix the problem.**\n* **Read about the common mistake** by expanding the area below.\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<big>...updating the wrong thing in the wrong event handler.</big>\n<p></p>\nThere are two common mistakes here:\n<p></p>\n1. Mixing up which event handler should do what.\n<p></p>\n2. Updating the display **before** any change is made to the underlying data of the program. \n\tThis can make the app seem oddly out of sync where each event triggers an update to the display that reflects the **last** thing done, not the current thing.\n<p></p>\n</details>",
        "CSPU5_U3L15 - count upDown bug logic error wrong update_2018_markdown_instruction": "# Bug Squash!\n\nThis program has a few different bugs. Find them and squash them!\n\n# Do This:\n* **Run the program.**\n* **To see the bug:**\n  * Click the up arrow exactly twice.\n \t* Restart the program and do this a few times - you'll notice nothing happens the first time you click.\n  * Click the down arrow several times.\n* **Look at the code and fix the problem.**\n* **Read about the common mistake** by expanding the area below.\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<big>...updating the wrong thing in the wrong event handler.</big>\n<p></p>\nThere are two common mistakes here:\n<p></p>\n1. Mixing up which event handler should do what.\n<p></p>\n2. Updating the display **before** any change is made to the underlying data of the program. \n\tThis can make the app seem oddly out of sync where each event triggers an update to the display that reflects the **last** thing done, not the current thing.\n<p></p>\n</details>",
        "CSPU5_U3L15 - count upDown bug var not created globally_markdown_instruction": "# Bug Squash!\n\nThis program has a few different bugs that are related to the same problem.\n\n# Do This:\n* **Run the program.**\n* **To see the bug:**\n  * Click the up arrow several times.\n  * Click the down arrow.\n* **Look at the code and fix the problem.**\n* **Read about the common mistake** by expanding the area below.\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<big>...thinking you're referencing a global variable when you're not.</big><br>\n\nA common mistake is basically a syntax/spelling error. These mistakes can be really tricky to work out because you *think* you know what you wrote, but the computer doesn't see it that way :)\n<p></p>\n</details>\n\n\n",
        "CSPU5_U3L15 - count upDown bug var not created globally_2018_markdown_instruction": "# Bug Squash!\n\nThis program has a few different bugs that are related to the same problem.\n\n# Do This:\n* **Run the program.**\n* **To see the bug:**\n  * Click the up arrow several times.\n  * Click the down arrow.\n* **Look at the code and fix the problem.**\n* **Read about the common mistake** by expanding the area below.\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<big>...thinking you're referencing a global variable when you're not.</big><br>\n\nA common mistake is basically a syntax/spelling error. These mistakes can be really tricky to work out because you *think* you know what you wrote, but the computer doesn't see it that way :)\n<p></p>\n</details>\n\n\n",
        "CSPU5_U3L15 - global var example count up_markdown_instruction": "# Using Variables in Apps!\n<img src=\"https://images.code.org/f156f8d8524c3c0316e4db394e331bdc-image-1446060829590.gif\" style=\"float: right; width: 200px;\">\nThe example program here has a small portion of the *Count Up/Down App* written.  Right now, what the app should do is  shown in the animation to the right.\n\n# Important Concept!\n\nThis small functionality **demonstrates an important concept** - how to create a variable in the app and update it when an event occurs. It may seem fairly straightforward but there are some common misconceptions that we want to alert you to.\n\n# Do This: Misconception Investigation\nOver the next few levels you are going to do a small investigation of two apps that do almost the same thing but *one  works as expected* and *one with a bug* that demonstrates an important concept about using variables in apps.  Here is what you'll do:\n\n1. **Run this app, which works properly.**\n  * Study the code until you think you understand what's happening.\n  * Pay attention to the code that handles the up arrow being clicked.\n\n2. **Run the app on the next screen, which has a bug.**\n  * On the next screen we show you almost the same app, but with a subtle problem.\n  * See if you can spot the difference and fix it.\n\n3. **Report what you found!**\n  * We'll ask you to report what you found.  It's not a quiz.  You can go back and forth until you spot the problem, but you should find it and be able to write what it is.\n",
        "CSPU5_U3L15 - global var example count up_2018_markdown_instruction": "# Using Variables in Apps!\n<img src=\"https://images.code.org/f156f8d8524c3c0316e4db394e331bdc-image-1446060829590.gif\" style=\"float: right; width: 200px;\">\nThe example program here has a small portion of the *Count Up/Down App* written.  Right now, what the app should do is  shown in the animation to the right.\n\n# Important Concept!\n\nThis small functionality **demonstrates an important concept** - how to create a variable in the app and update it when an event occurs. It may seem fairly straightforward but there are some common misconceptions that we want to alert you to.\n\n# Do This: Misconception Investigation\nOver the next few levels you are going to do a small investigation of two apps that do almost the same thing but *one  works as expected* and *one with a bug* that demonstrates an important concept about using variables in apps.  Here is what you'll do:\n\n1. **Run this app, which works properly.**\n  * Study the code until you think you understand what's happening.\n  * Pay attention to the code that handles the up arrow being clicked.\n\n2. **Run the app on the next screen, which has a bug.**\n  * On the next screen we show you almost the same app, but with a subtle problem.\n  * See if you can spot the difference and fix it.\n\n3. **Report what you found!**\n  * We'll ask you to report what you found.  It's not a quiz.  You can go back and forth until you spot the problem, but you should find it and be able to write what it is.\n",
        "CSPU5_U3L15 - practice with setText_markdown_instruction": "# Changing Elements on Screen \n\nThere's another way to display text in your app besides `console.log` and `write`.  \n\nThere is a command called `setText` which will **change the text of a component on screen** given its id. This is a very powerful technique and one that you will use a lot. Here's what it looks like in action....\n\n<img src=\"https://images.code.org/3e5dd320801720d5c62a49146d9ee3d2-image-1446056202170.gif\" style=\"width: 500px\">\n\nLet's do a **very simple** example of using `setText`.\n\n# Do This:\n<img src=\"https://images.code.org/5fc22aef5e8f5161f95a2507c1ec006b-image-1446056758249.gif\" style=\"float: right; width: 175px; border: solid 1px #AAAAAA\">\n* **Run the code** in the app.\n \n Look at the code for the \"upArrow\" event handler and how it sets the text of the label.\n \n* **Modify the code.**\n \n When the down arrow is clicked, set the text of the label to something else.\n\n* **GOAL:**\n  * Your only goal is to successfully use `setText` in this example app.\n  * The app should do something similar to the animated example at right.\n\nOnce you've got it functional, click Finish to move on.\n \n\n",
        "CSPU5_U3L15 - practice with setText_2018_markdown_instruction": "# Changing Elements on Screen \n\nThere's another way to display text in your app besides `console.log` and `write`.  \n\nThere is a command called `setText` which will **change the text of a component on screen** given its id. This is a very powerful technique and one that you will use a lot. Here's what it looks like in action....\n\n<img src=\"https://images.code.org/3e5dd320801720d5c62a49146d9ee3d2-image-1446056202170.gif\" style=\"width: 500px\">\n\nLet's do a **very simple** example of using `setText`.\n\n# Do This:\n<img src=\"https://images.code.org/5fc22aef5e8f5161f95a2507c1ec006b-image-1446056758249.gif\" style=\"float: right; width: 175px; border: solid 1px #AAAAAA\">\n* **Run the code** in the app.\n \n Look at the code for the \"upArrow\" event handler and how it sets the text of the label.\n \n* **Modify the code.**\n \n When the down arrow is clicked, set the text of the label to something else.\n\n* **GOAL:**\n  * Your only goal is to successfully use `setText` in this example app.\n  * The app should do something similar to the animated example at right.\n\nOnce you've got it functional, click Finish to move on.\n \n\n",
        "CSPU5_U3L15 - variable scoping problem debugging_markdown_instruction": "# Debugging Problem!\n\n**Uh oh!** The code here is subtly different from the one in the previous example and **now there is a problem**.\n\n# Do This:\n\n* **Run the app** and try it to see the problem. \n* **See the error.**\n  * Note that **NaN** stands for \"Not a Number\" - why would it say this?\n* **Note the difference** between this broken version and the previous one that worked.\n* **Fix the problem** so that it works as before.",
        "CSPU5_U3L15 - variable scoping problem debugging_2018_markdown_instruction": "# Debugging Problem!\n\n**Uh oh!** The code here is subtly different from the one in the previous example and **now there is a problem**.\n\n# Do This:\n\n* **Run the app** and try it to see the problem. \n* **See the error.**\n  * Note that **NaN** stands for \"Not a Number\" - why would it say this?\n* **Note the difference** between this broken version and the previous one that worked.\n* **Fix the problem** so that it works as before.",
        "CSPU5_U3L15 full clicker app_markdown_instruction": "# Make Your Own \"Clicker\" Game\nYou will be creating your own âclickerâ game similar to the Apple Grabber game you worked on in this lesson. \nThe general object of the game is to click on an element that jumps around every time you click it. You will pick your own theme and decide what the rules are and how to keep score.\n\n** Your Main Tasks Are To:**\n\n  * Pick a theme for your game and add appropriate images and styling.\n  * Add variables to track some data during gameplay.\n  * Add code to event handlers to update the variables and display appropriately.\n \n**See Activity Guide for Requirements**\n\nThere is a full activity guide and rubric for this project.  You can find a link to it in the student resources section for this lesson. Or ask your teacher for it.\n \n<img src=\"https://images.code.org/146107536c50b4a3317f3ebbe2e66f37-image-1446418612319.png\" style=\"float: right; width: 300px\">\n** Template **\n\nThis level is a template for the app. You should **run it to see what it does** right now. You will modify *this* template, both the design elements and the code, for your project.\n\nThe template has 4 screens and some basic navigation functionality and event handlers set up for you.  The game play screen uses the images from the Apple Grabber game, but you should replace these with images related to your chosen theme.\n\n",
        "CSPU5_U3L15 full clicker app_2018_markdown_instruction": "# Make Your Own \"Clicker\" Game\nYou will be creating your own âclickerâ game similar to the Apple Grabber game you worked on in this lesson. \nThe general object of the game is to click on an element that jumps around every time you click it. You will pick your own theme and decide what the rules are and how to keep score.\n\n** Your Main Tasks Are To:**\n\n  * Pick a theme for your game and add appropriate images and styling.\n  * Add variables to track some data during gameplay.\n  * Add code to event handlers to update the variables and display appropriately.\n \n**See Activity Guide for Requirements**\n\nThere is a full activity guide and rubric for this project.  You can find a link to it in the student resources section for this lesson. Or ask your teacher for it.\n \n<img src=\"https://images.code.org/146107536c50b4a3317f3ebbe2e66f37-image-1446418612319.png\" style=\"float: right; width: 300px\">\n** Template **\n\nThis level is a template for the app. You should **run it to see what it does** right now. You will modify *this* template, both the design elements and the code, for your project.\n\nThe template has 4 screens and some basic navigation functionality and event handlers set up for you.  The game play screen uses the images from the Apple Grabber game, but you should replace these with images related to your chosen theme.\n\n",
        "CSPU5_U3L16 - challenge say hi app_markdown_instruction": "# Introducing the  *change* Event\n\nDid you notice with the demo digital assistant that you could just __type a question, hit 'enter', and the assistant would respond__? Up until now you've been using the click of a button to trigger getting the text from an input or text area.\n\nYou can use a new event type to get this behavior: The __'change' event__ is triggered when the user hits 'enter' in a text input after typing.\n\n\n<img src=\"https://images.code.org/7d1725b236471f8e2a0efed5870660da-image-1446071579670.32.36.png\" style=\"width:350px;\">\n\n# Do This:\n<img src=\"https://images.code.org/f8f1f7ae18acbc570a367886bcd6ca88-image-1445976541574.gif\" style=\"width:250px;\">\n- A __text input__ has been created for you that asks for a user's name.\n- Attach a __'change'__ event handler to the text input.\n- When the 'change' event triggers, __write the user's name and a greeting__.\n",
        "CSPU5_U3L16 - intro getText_markdown_instruction": "# Getting Text Input\n\nAs we saw a user can now type inside of a text input whenever they want, **but now we'll need a way to access that text**. In order to do that you'll need to use the `getText` command, which you can now find in the **UI Controls** tab.\n\n<img src=\"https://images.code.org/0c6774f2b6d33f8107ec2936102b1a10-image-1445533677192.58.24 PM.png\" style=\"width: 150px;\">\n\nYou can use a `getText` command just like a string within a `console.log` or `write` command. Just like with `setText` you will refer to the UI element by its ID.\n\n![](https://images.code.org/c17e419301d0cfeebf7f0ccee13e415f-image-1445892504376.47.54 PM.png)\n\n# Do This:\n\n* **Read the documentation **  for `getText`.\n* **Add an event handler to the Submit button** that fires when your button is clicked.\n* **Inside the event handler** place code that will **log the name your user input to the console**.\n\n",
        "CSPU5_U3L16 - intro getText_2018_markdown_instruction": "# Getting Text Input\n\nAs we saw a user can now type inside of a text input whenever they want, **but now we'll need a way to access that text**. In order to do that you'll need to use the `getText` command, which you can now find in the **UI Controls** tab.\n\n<img src=\"https://images.code.org/0c6774f2b6d33f8107ec2936102b1a10-image-1445533677192.58.24 PM.png\" style=\"width: 150px;\">\n\nYou can use a `getText` command just like a string within a `console.log` or `write` command. Just like with `setText` you will refer to the UI element by its ID.\n\n![](https://images.code.org/c17e419301d0cfeebf7f0ccee13e415f-image-1445892504376.47.54 PM.png)\n\n# Do This:\n\n* **Read the documentation **  for `getText`.\n* **Add an event handler to the Submit button** that fires when your button is clicked.\n* **Inside the event handler** place code that will **log the name your user input to the console**.\n\n",
        "CSPU5_U3L16 - introSetPosition_markdown_instruction": "# How to Organize the Code\nAs your apps get more complex you'll have to think about how to organize your code so it remains readable and easy for you to locate things when debugging any problems.  We suggest the following convention which breaks the code into 3 major sections:\n* **Top**:  code for UI elements **and** any code for positioning them.\n* **Middle**: code for event handlers.\n* **Bottom**: code for any other other functions you've written. (We don't have any of these yet.)\n\nSo if you have some existing code and want to insert a `setPosition` command, you should place it after `button` but before `onEvent` in the code, like this:\n\n<img src=\"https://images.code.org/ae17e62c077aa9698526371d22db1307-image-1448404255046.gif\" style=\"width: 500px\">\n\n# Do This:\n\n<img src=\"https://images.code.org/3a834b8a4313e31a453525a69acda1f4-image-1444335250982.png\" style=\"float: right; width: 175px\">\n\n* **Starter code** has been provided which creates two buttons and event handlers.\n* **Insert** `setPosition` commands for each button so they appear at the bottom of the screen (as shown).\n  * **Remember:** in an app screen 0,0 is the top left corner and you specify a location by how many pixels from the left and how many down from the top of the screen it is.  The screen is **320 by 450 pixels**.",
        "CSPU5_U3L16 - introStrings_markdown_instruction": "# Strings\n\nThe primary data type we have used so far is **Numbers**. If we want to interact with user-submitted text, however, we'll need to learn about a new data type called a **String**.  A string is a **sequence of ASCII characters**.\n\n**Example** | **Rule**\n---|---\n`\"aString\"` | Strings **might** look a lot like a variable name but there are **many differences**.\n`\"look at all these spaces\"` | Strings can **contain spaces**.\n`\"$2 bills are the coolest\"` | Strings can **contain special characters** (and even start with them).\n`\"11\"` | Strings might **contain only digits**. This looks like a number but it is really 2 ASCII characters.\n`\"\"` | Strings might **contain no characters**.\n<br>\nYou can **store strings in a variable just like a number**. In this example the variable name is `str` but you should choose a name that is **descriptive and meaningful**.\n\n![](https://images.code.org/56e6b30a51556aa3b516e0a49b51cbeb-image-1445894334432.18.40 PM.png)\n\n**Combining Strings:** often you will want to combine multiple strings to create one longer string. You can do this with the `+` operator. The formal name of this process is **concatenation**.\n\nThe program you're about to see is a very simple Mad Libs app that uses strings that are created inside the program and  saved inside of variables. These strings are then **concatenated** with other strings to create a Mad Lib.\n\n# Do This:\n\n* The input words of this Mad Lib are **currently set to the empty string**.\n* **Add your own input words** and run the program to generate the Mad Lib.",
        "CSPU5_U3L16 - introStrings_2018_markdown_instruction": "# Strings\n\nThe primary data type we have used so far is **Numbers**. If we want to interact with user-submitted text, however, we'll need to learn about a new data type called a **String**.  A string is a **sequence of ASCII characters**.\n\n**Example** | **Rule**\n---|---\n`\"aString\"` | Strings **might** look a lot like a variable name but there are **many differences**.\n`\"look at all these spaces\"` | Strings can **contain spaces**.\n`\"$2 bills are the coolest\"` | Strings can **contain special characters** (and even start with them).\n`\"11\"` | Strings might **contain only digits**. This looks like a number but it is really 2 ASCII characters.\n`\"\"` | Strings might **contain no characters**.\n<br>\nYou can **store strings in a variable just like a number**. In this example the variable name is `str` but you should choose a name that is **descriptive and meaningful**.\n\n![](https://images.code.org/56e6b30a51556aa3b516e0a49b51cbeb-image-1445894334432.18.40 PM.png)\n\n**Combining Strings:** often you will want to combine multiple strings to create one longer string. You can do this with the `+` operator. The formal name of this process is **concatenation**.\n\nThe program you're about to see is a very simple Mad Libs app that uses strings that are created inside the program and  saved inside of variables. These strings are then **concatenated** with other strings to create a Mad Lib.\n\n# Do This:\n\n* The input words of this Mad Lib are **currently set to the empty string**.\n* **Add your own input words** and run the program to generate the Mad Lib.",
        "CSPU5_U3L16 - newEventTypes_markdown_instruction": "# New Elements and Events: New Event Types\nYou just wrote your first program that **does not include the turtle**! Moving forward we're going to focus much more on programming apps that use User Interface (UI) elements, but we'll keep the turtle library around in case you want to use it.\n\n<img src=\"https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06 AM.png\" style=\"float: right\">\n\n**New Events**: You may have noticed that the `onEvent` block has a pull-down menu for the event **type** (see right).\n\n# Do This:\n\n* **Experiment** with **each of the different types of mouse events** by selecting from the list. You can also read about them in the documentation.\n\t* click\n    * mousemove\n    * movedown\n    * mouseup\n    * mouseover\n* **Choose** the mouse event type you like most and change your event handler to use it.\n* **Note:** There are some events that capture keystroke events. These are interesting, but they do not work easily with buttons.  We'll stick to mouse events for now, and get to keys later.\n\n**Be sure** to experiment with each one.  The next exercise will quiz you on which one is which.\n\n",
        "CSPU5_U3L16 - setPosition to fixed location_markdown_instruction": "# Using setPosition\n\n<img src=\"https://images.code.org/b664824ffeb3347b2e0b6d12447b4e8b-image-1476891499229.gif\" style=\"width: 150px; float: right;\">\n\n**Now you try it** - use  [setPosition](#triggercallout=setPosHover) to **move the button to the middle of the screen when clicked**. We've set up a small project for you with a button (id: `moveBtn`) already added in design mode.\n\n1. Add an `onEvent` block\n2. Drag a `setPosition` command into the event handler function\n3. Set the x,y coordinate so that the button ends up in the middle of the screen.\n  * You'll need to experiment a little bit to find coordinates that work for you.\n  * Hover over the screen to find a good starting point.\n\n**Tip**: when you see a command that is linked like this: [setPosition](#triggercallout=setPosHover) click it! -- it will show you other hints.\n\nOnce you've got the button moving to the middle of the screen click Finish to move on to the next challenge.\n",
        "CSPU5_U3L16 - setPosition to move button_markdown_instruction": "<img src=\"https://images.code.org/dc1f942b805f07b3581c678ed1669a27-image-1476892595302.gif\" style=\"float: right\">\n# Using setPosition and randomNumber\n\n<img src=\"https://images.code.org/a501391fac0c396a197aaaf357e73972-image-1476892143359.gif\">\n\n**Now you try it** - instead of using a fixed value, you use [randomNumber](#triggercallout=showRand) to set the x and y coordinates for setPosition.  Now you'll have to chase the button all over the screen!\n\n* Make it so that the button could jump *anywhere* on the visible screen each time it's clicked.\n* Extend it: if you want to get really nuts, you could add back in the *width* and *height* parameters of setPosition and make the size of the button *also* change randomly with each click!\n\nOnce you've got the button jumping around the screen.  Click **Finish** to move onto the next level.\n",
        "CSPU5_U3L16 - setPosition to move button_2018_markdown_instruction": "<img src=\"https://images.code.org/dc1f942b805f07b3581c678ed1669a27-image-1476892595302.gif\" style=\"float: right\">\n# Using setPosition and randomNumber\n\n<img src=\"https://images.code.org/a501391fac0c396a197aaaf357e73972-image-1476892143359.gif\">\n\n**Now you try it** - instead of using a fixed value, you use [randomNumber](#triggercallout=showRand) to set the x and y coordinates for setPosition.  Now you'll have to chase the button all over the screen!\n\n* Make it so that the button could jump *anywhere* on the visible screen each time it's clicked.\n* Extend it: if you want to get really nuts, you could add back in the *width* and *height* parameters of setPosition and make the size of the button *also* change randomly with each click!\n\nOnce you've got the button jumping around the screen.  Click **Finish** to move onto the next level.\n",
        "CSPU5_U3L16 - singleSetPosition_markdown_instruction": "# Moving and Sizing Buttons\n\nAn important component of designing intuitive and visually appealing user interfaces is the location of the elements on the screen. Using the `setPosition` command (now added to the Toolbox) you can move and set the size of user interface elements.\n\n![](https://images.code.org/c3e42223cbcb096f992d758973d09f63-image-1444664597665.42.48 AM.png)\n\n**NOTE:**\n  * If you only want to set the size you can use the `setSize` function which looks like this:\n\n ![](https://images.code.org/cb742ecf96c04477db0f8361ad5dcdaf-image-1448924017288.png)\n\n  * If you *only* want to set the position *without* changing the size of the element, you can omit the *width* and *height* parameters from the `setPosition` function.  To do that, you need to switch into text mode, like this:\n\n <img src='https://images.code.org/5b565ef5b74b5cd657ba15c67be92b0d-image-1448924356253.gif' style=\"width: 400px\">\n\n# Do This:\n\n* **Read the documentation** for `setPosition`.\n* **Starter code** has been provided which creates a single button.\n* **Move the button to the middle of the screen** using `setPosition`, as in the image below. (You may need to experiment a little bit with the x,y location to get it right).\n* **Remember:** in an app screen 0,0 is the top left corner and you specify a location by how many pixels from the left and how many down from the top of the screen it is.  The screen is **320 by 450 pixels**.\n\n![](https://images.code.org/62840468826ce153d3d0d80bca303827-image-1444662614963.10.05 AM.png)\n\n",
        "CSPU5_U3L16 - text labels_markdown_instruction": "# New Elements and Events: Text Labels\n<img src=\"https://images.code.org/20d50fd324908fc48633e1325cc37603-image-1444662791509.png\" style=\"float: right\">\nThe UI controls toolbox contains an element called `textLabel`. A text label is what it sounds like: plain text that you can put in your app. Even though it's just plain text you can still move and resize it using `setPosition`, and you can attach event handlers to it as well.\n\n**NOTE:** resizing a text label does not change the font size of the text.  We'll learn how to do that later.  \n\n# Do This:\n\n* **Read the documentation** for `textLabel`<img src=\"https://images.code.org/fe2ce5f335fd124dc3052270ca0af31f-image-1444336014658.gif\" style=\"float: right; width: 150px\">.\n* **Modify** the program so that your button is now a text label. Just as before, it should move randomly around the screen when clicked. You can make the text whatever you like.\n* **Tip:** If you reuse your button's ID you'll only need to change a single line of code to make your program work. Once you have your program working **choose a descriptive and meaningful ID** for your text label and make the appropriate changes in the event handler.\n\n<br>\n<br>\n<br>\n\n",
        "CSPU5_U3L16 - textInput getText write_markdown_instruction": "# Text Input Elements\n\nSo far we've been using `promptNum` as a simple way to get a number as input. Now that we know a little about strings we are going to create **user interface elements that users can use to submit text (i.e. strings) instead**. The first and simplest example is `textInput` which you can find in Design Mode.\n\n<img src=\"https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19 PM.png\" style=\"width: 100px\">\n\n# Do This:\n\n* **Add two text input elements to this program**, one for the name and one for the age of the user.\n* **Give your text input elements descriptive and meaningful IDs**.\n* **In Design Mode** set their default text to prompt the user for their name and age.\n* **Compare your app to the example below**.\n\n<img src=\"https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11 PM.png\" style=\"float:left; width:200px;\">\n<br>",
        "CSPU5_U3L16 - textInput getText write_2018_markdown_instruction": "# Text Input Elements\n\nSo far we've been using `promptNum` as a simple way to get a number as input. Now that we know a little about strings we are going to create **user interface elements that users can use to submit text (i.e. strings) instead**. The first and simplest example is `textInput` which you can find in Design Mode.\n\n<img src=\"https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19 PM.png\" style=\"width: 100px\">\n\n# Do This:\n\n* **Add two text input elements to this program**, one for the name and one for the age of the user.\n* **Give your text input elements descriptive and meaningful IDs**.\n* **In Design Mode** set their default text to prompt the user for their name and age.\n* **Compare your app to the example below**.\n\n<img src=\"https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11 PM.png\" style=\"float:left; width:200px;\">\n<br>",
        "CSPU5_U3L16 - use images_markdown_instruction": "# New Elements and Events: Images\n\n<img src=\"https://images.code.org/a84297658be45dc78bc401d387d10436-image-1444663322356.21.25 AM.png\" style=\"float: right; width: 120px\">\nImages make applications more visually pleasing and interactive. You can add images to your application using the `image` command. For now, just add an `image` element to your app (the default image link is the Code.org logo) and don't worry about choosing a unique image just yet. We'll do that in the very next exercise!\n\n\n# Do This:\n<img src=\"https://images.code.org/8df7b1b56c71de7ad9770646bd7f8792-image-1444336140877.gif\" style=\"float: right; width: 250px\">\n\n* **Modify** the program - change the `textLabel` to an `image` so that the image moves randomly around the screen based on the event you chose.\n* **Tip:** If you reuse your text label's ID you'll only need to change a single line of code to make your program work! Once you have your program working though, it's probably a good idea to choose a descriptive and meaningful ID for your image and make the appropriate changes in the event handler.\n\n<br>",
        "CSPU5_U3L16 Mad Lib Clear Input_markdown_instruction": "# Play It Again and Again!\n\nWhen the user clicks the \"Play again\" button, the first screen should reset and not show the user's previous text.\n\n# Do This:\n- When the \"Play again\" button is clicked, __clear the text from each text input__ on Screen 1.\n- __Free play:__ Add images, or more How-to steps for your Mad Libs, and invite others to play!\n\n<img src=\"https://images.code.org/a49fe3eba4d2d2fb03e45d15aad53dbf-image-1450143105779.16.14 Mad Libs play again button.gif\" style=\"width:200px\">\n\n\n<details>\n<summary>**Hint**</summary>\nTry setting the text to the empty string: `\"\"`.\n</details>\n",
        "CSPU5_U3L16 Mad Lib Clear Input_2018_markdown_instruction": "# Play It Again and Again!\n\nWhen the user clicks the \"Play again\" button, the first screen should reset and not show the user's previous text.\n\n# Do This:\n- When the \"Play again\" button is clicked, __clear the text from each text input__ on Screen 1.\n- __Free play:__ Add images, or more How-to steps for your Mad Libs, and invite others to play!\n\n<img src=\"https://images.code.org/a49fe3eba4d2d2fb03e45d15aad53dbf-image-1450143105779.16.14 Mad Libs play again button.gif\" style=\"width:200px\">\n\n\n<details>\n<summary>**Hint**</summary>\nTry setting the text to the empty string: `\"\"`.\n</details>\n",
        "CSPU5_U3L16 Mad Lib getText_markdown_instruction": "# Make It Mad! Add the User's Text to Your Mad Libs Outline\n\nNow that you have your Mad Libs outline appearing in the text area, it's time to __incorporate the user's text__ to make your Mad Libs come alive.\n\n# Do This:\n\n- Did you pick good ID names for your text input elements? Update them now if you didn't!\n- When the __Next__ button is clicked, __get the user's text from the text inputs on Screen 1 and store each in a separate variable__.\n- Use string concatenation to __incorporate the user's text into your Mad Labs string__ before updating the text area on Screen 2. \n\n<details>\n<summary>**Hint**</summary>\nUse `getText` to get the text from each of the text inputs on Screen 1.\n</details>\n<details>\n<summary>**Should I make local or global variables?**</summary>\nRemember that the decision to create local variables or global variables is a question of _scope_. Where will you need to access these variables in your program? If you are only using the variables in the click callback function for the \"Next\" button, then they can be _local_ variables in that function. \n</details>",
        "CSPU5_U3L16 Mad Lib getText_2018_markdown_instruction": "# Make It Mad! Add the User's Text to Your Mad Libs Outline\n\nNow that you have your Mad Libs outline appearing in the text area, it's time to __incorporate the user's text__ to make your Mad Libs come alive.\n\n# Do This:\n\n- Did you pick good ID names for your text input elements? Update them now if you didn't!\n- When the __Next__ button is clicked, __get the user's text from the text inputs on Screen 1 and store each in a separate variable__.\n- Use string concatenation to __incorporate the user's text into your Mad Labs string__ before updating the text area on Screen 2. \n\n<details>\n<summary>**Hint**</summary>\nUse `getText` to get the text from each of the text inputs on Screen 1.\n</details>\n<details>\n<summary>**Should I make local or global variables?**</summary>\nRemember that the decision to create local variables or global variables is a question of _scope_. Where will you need to access these variables in your program? If you are only using the variables in the click callback function for the \"Next\" button, then they can be _local_ variables in that function. \n</details>",
        "CSPU5_U3L16 Mad Lib setText_markdown_instruction": "# Update the Text Area with Your Mad Libs Outline\n\nWhen figuring out how to make progress with a program, it helps to break the problem down into smaller steps and test your program incrementally. So rather than jumping straight to getting the user input and __concatenating__ it with your Mad Libs outline, start first by just making sure that you can get your Mad Libs outline to appear in the text area when the __Next__ button is clicked on the first screen. \n\nBut wait! If you just use `setText` and pass in the string of your Mad Libs outline, it will look like the screen on the left where all the steps are smushed together. You can use one or more newline characters, `\"\\n\"`, in your string to create a line break in your text.\n\n<table>\n<tr>\n<td>\n<strong>Without newlines</strong>\n</td>\n<td>\n<strong>With newlines</strong>\n</td>\n</tr>\n<tr>\n<td>\n\n<img src=\"https://images.code.org/24fb1385d6199cd52c6e1d3d11e547fc-image-1448404478181.png\" style=\"width:201px;float:right;\">\n</td>\n<td>\n<img src=\"https://images.code.org/3a627993f9e0e4a6d462c8a21b335058-image-1448404299215.png\" style=\"width:200px;float:right;\">\n</td>\n</tr>\n</table>\n\n\n# Do This:\n\n- When the __Next__ button is clicked, you already switch to Screen 2, but now you should also call `setText` on the text area on Screen 2 to your Mad Libs outline. See the images above for one way to temporarily handle the word placeholders.\n- Add in newline characters `\"\\n\"` in your Mad Libs string to format it.\n\n<details>\n<summary>**Newline Examples**</summary>\n<table style=\"width:100%; margin-left:25px;\">\n<tr>\n<td style=\"vertical-align: text-top; border-right:1px solid #000\">\n\t**Example1:**<br/><br/>\n    \n    <samp>console.log(\"How to Drive\\nStep 1.\");<br/><br/></samp>\n    \n    *will be displayed as...*<br/><br/>\n    \n    <samp>How to Drive<br/>Step 1.<br/><br/></samp>\n    \n    *...on your console.*\n</td>\n<td style=\"padding-left:20px;\">\n<samp>**Example2:**<br/><br/>\n    \n    var step1 = \"Step 1: ...\";<br/>\n    \n    var step2 = \"Step 2: ...\";<br/>\n    \n    console.log(step1 + \"\\n\" + step2);<br/><br/></samp>\n    \n    *will be displayed as...*<br/><br/>\n    \n    <samp>Step 1: ...<br/>Step 2: ...<br/><br/></samp>\n    \n    *...on your console.*\n</td>\n</tr>\n</table>\n</details>",
        "CSPU5_U3L16 Mad Lib setText_2018_markdown_instruction": "# Update the Text Area with Your Mad Libs Outline\n\nWhen figuring out how to make progress with a program, it helps to break the problem down into smaller steps and test your program incrementally. So rather than jumping straight to getting the user input and __concatenating__ it with your Mad Libs outline, start first by just making sure that you can get your Mad Libs outline to appear in the text area when the __Next__ button is clicked on the first screen. \n\nBut wait! If you just use `setText` and pass in the string of your Mad Libs outline, it will look like the screen on the left where all the steps are smushed together. You can use one or more newline characters, `\"\\n\"`, in your string to create a line break in your text.\n\n<table>\n<tr>\n<td>\n<strong>Without newlines</strong>\n</td>\n<td>\n<strong>With newlines</strong>\n</td>\n</tr>\n<tr>\n<td>\n\n<img src=\"https://images.code.org/24fb1385d6199cd52c6e1d3d11e547fc-image-1448404478181.png\" style=\"width:201px;float:right;\">\n</td>\n<td>\n<img src=\"https://images.code.org/3a627993f9e0e4a6d462c8a21b335058-image-1448404299215.png\" style=\"width:200px;float:right;\">\n</td>\n</tr>\n</table>\n\n\n# Do This:\n\n- When the __Next__ button is clicked, you already switch to Screen 2, but now you should also call `setText` on the text area on Screen 2 to your Mad Libs outline. See the images above for one way to temporarily handle the word placeholders.\n- Add in newline characters `\"\\n\"` in your Mad Libs string to format it.\n\n<details>\n<summary>**Newline Examples**</summary>\n<table style=\"width:100%; margin-left:25px;\">\n<tr>\n<td style=\"vertical-align: text-top; border-right:1px solid #000\">\n\t**Example1:**<br/><br/>\n    \n    <samp>console.log(\"How to Drive\\nStep 1.\");<br/><br/></samp>\n    \n    *will be displayed as...*<br/><br/>\n    \n    <samp>How to Drive<br/>Step 1.<br/><br/></samp>\n    \n    *...on your console.*\n</td>\n<td style=\"padding-left:20px;\">\n<samp>**Example2:**<br/><br/>\n    \n    var step1 = \"Step 1: ...\";<br/>\n    \n    var step2 = \"Step 2: ...\";<br/>\n    \n    console.log(step1 + \"\\n\" + step2);<br/><br/></samp>\n    \n    *will be displayed as...*<br/><br/>\n    \n    <samp>Step 1: ...<br/>Step 2: ...<br/><br/></samp>\n    \n    *...on your console.*\n</td>\n</tr>\n</table>\n</details>",
        "CSPU5_U3L16 Mad Lib toUpper_markdown_instruction": "# Why Are You Yelling At Me?! *toUpperCase* and *toLowerCase*\n\nThe main functionality of the Mad Libs app is complete, but there are some finishing touches to add. The user may type input with random letter capitalization, but the Mad Libs output string should be consistently capitalized.\n\n# Do This:\n\n- Pick one or more pieces of the user's input text to transform into \"yelling\" or emphasize by __making it uppercase__ before displaying it.\n- For the other pieces of the user's input text, __make it lowercase__ before displaying it.\n\n<details>\n<summary>**Hint**</summary>\nRemember the rules of updating variables! You can update a variable after first getting its current value and then doing something with it. <br> Example: `song = song.toUpperCase();`\n</details>",
        "CSPU5_U3L16 Mad Lib toUpper_2018_markdown_instruction": "# Why Are You Yelling At Me?! *toUpperCase* and *toLowerCase*\n\nThe main functionality of the Mad Libs app is complete, but there are some finishing touches to add. The user may type input with random letter capitalization, but the Mad Libs output string should be consistently capitalized.\n\n# Do This:\n\n- Pick one or more pieces of the user's input text to transform into \"yelling\" or emphasize by __making it uppercase__ before displaying it.\n- For the other pieces of the user's input text, __make it lowercase__ before displaying it.\n\n<details>\n<summary>**Hint**</summary>\nRemember the rules of updating variables! You can update a variable after first getting its current value and then doing something with it. <br> Example: `song = song.toUpperCase();`\n</details>",
        "CSPU5_U3L19 - test reassignment of two vars_markdown_instruction": "# Variable Reassignment - Part 1\n\nSo far we have only set a variable's value once.  But it's called a *variable* for a reason - its value can change (or vary) throughout a program. This is useful and necessary for keeping track of things like a score in a game.\n\nTo re-assign a value to a variable all you have to do is maintain the mental model of what's happening:\n\n  * Variables are containers for information.\n  * The `=` sign is an instruction to set the value.\n  * A series of assignment statements (see example to right) is a list of instructions to execute one at a time - it's not a series of equations that define the state of the world.\n\n# Do This:\n<img src=\"https://images.code.org/066db834ae289ac538609b68c6492c4a-image-1445944263895.png\" style=\"float: right\">\n\n  * **Make a prediction.**\n\n The code on the following screen looks like what is shown at right.  Study it and make a prediction about what will happen when you run the code. What will the values of `a` and `b` be at the end of the program?\n\n* **Add `console.log` statements.** \n\n Prove it to yourself by adding `console.log` statements at the end of the program to find out what the value of `a` and  `b` are.\n \n* **NOTICE:** in the code above, after the variable `a` has been created using `var`, to change a variable's value, you only need to refer to the variable by its name. The word `var` only needs to be used once - when the variable is created for the first time. \n\n* It's a **common mistake** to use `var` everytime you want to *use* a variable but just **remember `var` means CREATE a new variable**.  When you create a new variable it will lose its old value.  We'll look at errors related to this later.\n\n",
        "CSPU5_U3L19 - test reassignment of two vars_2018_markdown_instruction": "# Variable Reassignment - Part 1\n\nSo far we have only set a variable's value once.  But it's called a *variable* for a reason - its value can change (or vary) throughout a program. This is useful and necessary for keeping track of things like a score in a game.\n\nTo re-assign a value to a variable all you have to do is maintain the mental model of what's happening:\n\n  * Variables are containers for information.\n  * The `=` sign is an instruction to set the value.\n  * A series of assignment statements (see example to right) is a list of instructions to execute one at a time - it's not a series of equations that define the state of the world.\n\n# Do This:\n<img src=\"https://images.code.org/066db834ae289ac538609b68c6492c4a-image-1445944263895.png\" style=\"float: right\">\n\n  * **Make a prediction.**\n\n The code on the following screen looks like what is shown at right.  Study it and make a prediction about what will happen when you run the code. What will the values of `a` and `b` be at the end of the program?\n\n* **Add `console.log` statements.** \n\n Prove it to yourself by adding `console.log` statements at the end of the program to find out what the value of `a` and  `b` are.\n \n* **NOTICE:** in the code above, after the variable `a` has been created using `var`, to change a variable's value, you only need to refer to the variable by its name. The word `var` only needs to be used once - when the variable is created for the first time. \n\n* It's a **common mistake** to use `var` everytime you want to *use* a variable but just **remember `var` means CREATE a new variable**.  When you create a new variable it will lose its old value.  We'll look at errors related to this later.\n\n",
        "CSPU5_U3L19 - three basic ops of variables_markdown_instruction": "# Variables Toolbox\nLet's get started with the most basic example of using and controlling the computer's memory with variables. The toolbox has a couple of new commands for working with variables.\n\nWe've given you some starter code that does three things:\n<table>\n<tr>\n<td>\n<ol>\n<li>**Creates** a variable called `score`</li>\n<li> **Assigns** the value *0* to `score`</li>\n<li>**Displays** the value of the `score` to the console (see hint below about quotes) </li>\n</ol> \n</td>\n<td>\n<img src=\"https://images.code.org/056a735a96a603e23768d66f0de32961-image-1445462590619.png\" style=\"width: 350px\">\n</td>\n</tr>\n</table>\n\n\n# Do This:\nYou're going to add another variable, assign it a value, and then display it to the console.\nUse the starting code as a model for what you need to create now.\n<img src=\"https://images.code.org/72744382133081947777e67a5988d4ea-image-1445462803999.gif\" style=\"float: right; width: 350px\">\n* **Create a new variable** by dragging out the `var` block.\n* **Change the name of the variable** from the default `x` to `lives` (see animation at right).\n* **Set the value of `lives` to be 3**.\n* **Add** `console.log` **messages** to show the value of `lives`.\n\nThe output in the debug console should look like this:\n \n  <img src=\"https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png\" style=\"border: solid 1px gray\">\n<details>\n  <summary>  Debugging Tip: Displaying values of variables [click to expand]</summary>\n   **NOTE: To print the value of a variable you *should not* use quotes.**\n   Notice the difference between these two statements: <br>\n   `console.log(\"score\")`<br>\n   `console.log(score)`<br>\n   It's subtle but important:\n   <br>\n   <li>When `console.log` sees quotation marks it thinks you want to print out the literal characters in the quotes.\n   <li>When `console.log` sees something **without quotation marks** it assumes you're trying to print a variable, and it goes to retrieve its value and displays that. </li>\n \n</details>",
        "CSPU5_U3L19 - three basic ops of variables_2018_markdown_instruction": "# Variables Toolbox\nLet's get started with the most basic example of using and controlling the computer's memory with variables. The toolbox has a couple of new commands for working with variables.\n\nWe've given you some starter code that does three things:\n<table>\n<tr>\n<td>\n<ol>\n<li>**Creates** a variable called `score`</li>\n<li> **Assigns** the value *0* to `score`</li>\n<li>**Displays** the value of the `score` to the console (see hint below about quotes) </li>\n</ol> \n</td>\n<td>\n<img src=\"https://images.code.org/056a735a96a603e23768d66f0de32961-image-1445462590619.png\" style=\"width: 350px\">\n</td>\n</tr>\n</table>\n\n\n# Do This:\nYou're going to add another variable, assign it a value, and then display it to the console.\nUse the starting code as a model for what you need to create now.\n<img src=\"https://images.code.org/72744382133081947777e67a5988d4ea-image-1445462803999.gif\" style=\"float: right; width: 350px\">\n* **Create a new variable** by dragging out the `var` block.\n* **Change the name of the variable** from the default `x` to `lives` (see animation at right).\n* **Set the value of `lives` to be 3**.\n* **Add** `console.log` **messages** to show the value of `lives`.\n\nThe output in the debug console should look like this:\n \n  <img src=\"https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png\" style=\"border: solid 1px gray\">\n<details>\n  <summary>  Debugging Tip: Displaying values of variables [click to expand]</summary>\n   **NOTE: To print the value of a variable you *should not* use quotes.**\n   Notice the difference between these two statements: <br>\n   `console.log(\"score\")`<br>\n   `console.log(score)`<br>\n   It's subtle but important:\n   <br>\n   <li>When `console.log` sees quotation marks it thinks you want to print out the literal characters in the quotes.\n   <li>When `console.log` sees something **without quotation marks** it assumes you're trying to print a variable, and it goes to retrieve its value and displays that. </li>\n \n</details>",
        "CSPU5_U3L19 - variable reassignment challenge pt2_markdown_instruction": "# Wrapping Up Variables - This is Not Math Class\n\nHopefully you now understand the gist of working with variables.  The major thing to remember is that every time you see an `=` sign it means that you are instructing the computer to set a variable to a new value.  \n\n<img src=\"https://images.code.org/ecced8eb916809f66ac7d555a819c2a6-image-1447803015383.17.43.png\" style=\"float: right\">\nThe example to the right is something that definitely wouldn't make sense in math class, but you should be able to reason about it as a piece of code.  Because it's code, you can also **insert** statements to display the value of variables as they change.  You don't have to guess!\n\n# Do This:\n* ** Make a prediction.** \n\n As usual you should **first** look at the code given to you and reason about what it does.  You should try to predict what the value of `num` will be after all lines have executed.\n\n* ** Insert 3 `console.log` statements.**\n\n Insert `console.log` statements into the existing code to display each value of `num` immediately after it's changed. (The animation below shows how to get started.)\n \n ![](https://images.code.org/0e425ce1a186d49d230395032f970913-image-1447802992249.19.24 add console message.gif)\n \n* **Was your prediction right?**\n \n After you figure out the answer, if your prediction was off, try to understand why.  Where was your misunderstanding?\n",
        "CSPU5_U3L19 - variable reassignment challenge pt2_2018_markdown_instruction": "# Wrapping Up Variables - This is Not Math Class\n\nHopefully you now understand the gist of working with variables.  The major thing to remember is that every time you see an `=` sign it means that you are instructing the computer to set a variable to a new value.  \n\n<img src=\"https://images.code.org/ecced8eb916809f66ac7d555a819c2a6-image-1447803015383.17.43.png\" style=\"float: right\">\nThe example to the right is something that definitely wouldn't make sense in math class, but you should be able to reason about it as a piece of code.  Because it's code, you can also **insert** statements to display the value of variables as they change.  You don't have to guess!\n\n# Do This:\n* ** Make a prediction.** \n\n As usual you should **first** look at the code given to you and reason about what it does.  You should try to predict what the value of `num` will be after all lines have executed.\n\n* ** Insert 3 `console.log` statements.**\n\n Insert `console.log` statements into the existing code to display each value of `num` immediately after it's changed. (The animation below shows how to get started.)\n \n ![](https://images.code.org/0e425ce1a186d49d230395032f970913-image-1447802992249.19.24 add console message.gif)\n \n* **Was your prediction right?**\n \n After you figure out the answer, if your prediction was off, try to understand why.  Where was your misunderstanding?\n",
        "CSPU5_U3L23 Chatbot Conditionals 1_markdown_instruction": "# Adding Intelligence Using Conditionals\n\nSo far the digital assistant you created responds with the same message no matter what the user types. Let's look at how to make the digital assistant smarter. Let's work on creating a Movie Bot example before returning to your digital assistant.\n\nIn the last lesson we learned about `if`, `else-if`, and `else` statements. These allow us to make decisions. In the digital assistant we want to make decisions based on keywords. **The first keywords we want the Movie Bot to respond to are the movie genres: comedy, romance, action, and horror. **\n\n**Note: ** Check out the flowchart below to see the logic we are trying to add. The current portions of the diagram that we are creating are <mark>highlighted in yellow</mark>.\n\n# Do This:\n\n* **Run the code** to understand what it does.\n\n* **Add `else-if` statements** to the `if` to check if the word the user typed matches **action, romance and horror**.  **Note:** Movie Bot will only understand input in the form of \"comedy\" not \"Comedy\" or \"What is a comedy?\" \n\n* **Add an `else` statement** to print a default answer for any other input.\n\n<img src=\"https://images.code.org/8ec655795042a2a3a22a85f0886f0d21-image-1446067226646.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/8ec655795042a2a3a22a85f0886f0d21-image-1446067226646.png\" target=\"_blank\">Open diagram in a new tab</a>\n",
        "CSPU5_U3L23 Free Response Getting Started_markdown_instruction": "Siri is a digital assistant built into Apple's iOS devices, including iPhones and iPads. Watch the advertisement for Siri, below. \n\n<iframe width=\"637px\" height=\"375px\" src=\"https://www.youtube.com/embed/8ciagGASro0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<br/>\n__Reflect on the prompts below:__ \n\n- What types of information does Siri respond to in the video?\n- What do you think Siri is paying attention to in order to create these answers?\n",
        "CSPU5_U3L24 Chatbot Basic Conditionals_markdown_instruction": "# Digital Assistant Project\n\n**Your Digital Assistant Project is back!** Now that you've learned how to use conditional logic to control your program flow, it's time to add functionality to the digital assistant you previously designed.\n\n# Do This:\n\n* You should have already created a flowchart to design the logic for your digital assistant. \n* **Use your flowchart to program your digital assistant so that it \"intelligently\" responds to user input.**\n\t* Feel free to make changes to your existing project in Design Mode, if needed.\n* **Test your program thoroughly** to make sure your digital assistant responds to user input appropriately.\n* Once you're done, **submit your project!**\n",
        "CSPU5_U3L24 Nested Conditionals 1_markdown_instruction": "# Adding *includes* to the Movie Bot\n\nIf our Movie Bot is asked a question like \"What is a good comedy movie?\" it currently won't know how to respond, **even though the question includes one of its keywords.** By using `includes` we can allow our Movie Bot to sense if a keyword appears anywhere in the question.\n\n# Do This:\n\n* **Suggestion: Switch to Text Mode.** This will be much easier in Text Mode.\n* **Change all your boolean expressions to use `includes` instead of `==`**.\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n![](https://images.code.org/0df459c4ccd9b613b23409af7ff5f59e-image-1446139233341.gif)\n\n**Note: ** Check out the flowchart below to see the logic we are trying to change.\n\n\n<img src=\"https://images.code.org/ea8340252f50774c352f58fa7cc12e5c-image-1446069734921.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/ea8340252f50774c352f58fa7cc12e5c-image-1446069734921.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "CSPU5_U3L24 Nested Conditionals 2_markdown_instruction": "# Nested Conditionals\n\nThe way we left the Movie Bot in the last exercise is a little strange to see as a user. **Currently when the input doesn't have a question mark the Movie Bot says \"I only respond to questions.\" but it still provides a recommendation**. We're going to alter our code so that the movie recommendation is only provided if the user asks a question.\n\n# Do This:\n\n* **Nest your movie genre `if` statements** inside the \"?\" `if` statement so that **a recommendation is made only if a question was asked**.\n* **Remove the \"That's a good question.\"** output.\n* Ensure that **if your input is not a question** then the response is **I only respond to questions.**\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n**Example Input --->** | **Output**\n---|---\nWhat's the best action movie? | The best action movie is any James Bond movie.\nI love comedy | I only respond to questions.\n<br>\n**Note: ** Check out the flowchart below to see the logic we are trying to change.\n\n<img src=\"https://images.code.org/c319d7ba43112451a6b25aa9475cacb5-image-1446074593924.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/c319d7ba43112451a6b25aa9475cacb5-image-1446074593924.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "CSPU5_U3L25 - drag out key event_markdown_instruction": "# *keypress*\n\nIf we want to add keyboard input to our apps we'll need to learn about how key events work in App Lab. To start let's take a closer look at the `onEvent` block. We already know that event handlers call a function. What we'll see now is that they also **pass a parameter**. The default name for this parameter is simply `event` but you can change it to be anything you like. \n\nThe `event` parameter is a more complex kind of variable (called an \"Object\") that we'll learn more about later. For now just know that for both mouse and keyboard events, the event parameter passes more information about the event. In the case of key events **you can find out the key(s) that were actually pressed by using `event.key`**.\n\n# Do This:\n\n* Drag out an `onEvent` block.\n* Change the ID to `screen1` and the event type to `keypress`.  \n\n<img src=\"https://images.code.org/537b5bbef3db62c90155528e6753a00a-image-1447175732347.gif\" style=\"width: 450px\">\n\n* Once you hit **Run**, **click on the screen so that the keystrokes will register**.\n* **Type different combinations of keys** and check out the results in the console. Does every key combination print to the console? Some keys to try:\n    * Letter keys\n    * Number keys\n    * Shift key\n    * Hold shift and letter\n    * Delete key\n    * Left and right arrow keys\n    * Press and hold a key",
        "CSPU5_U3L25 - drag out key event_2018_markdown_instruction": "# *keypress*\n\nIf we want to add keyboard input to our apps we'll need to learn about how key events work in App Lab. To start let's take a closer look at the `onEvent` block. We already know that event handlers call a function. What we'll see now is that they also **pass a parameter**. The default name for this parameter is simply `event` but you can change it to be anything you like. \n\nThe `event` parameter is a more complex kind of variable (called an \"Object\") that we'll learn more about later. For now just know that for both mouse and keyboard events, the event parameter passes more information about the event. In the case of key events **you can find out the key(s) that were actually pressed by using `event.key`**.\n\n# Do This:\n\n* Drag out an `onEvent` block.\n* Change the ID to `screen1` and the event type to `keypress`.  \n\n<img src=\"https://images.code.org/537b5bbef3db62c90155528e6753a00a-image-1447175732347.gif\" style=\"width: 450px\">\n\n* Once you hit **Run**, **click on the screen so that the keystrokes will register**.\n* **Type different combinations of keys** and check out the results in the console. Does every key combination print to the console? Some keys to try:\n    * Letter keys\n    * Number keys\n    * Shift key\n    * Hold shift and letter\n    * Delete key\n    * Left and right arrow keys\n    * Press and hold a key",
        "CSPU5_U3L26 AND operator_markdown_instruction": "# AND Operator in Movie Bot\n\nOn the last level you may have noticed that if you typed in a question like \"What is an R rated comedy movie?\" It gives two movie suggestions! It would make more sense for it to give one suggestion.\n\nWe could use nested `if` statements to do this by nesting `if` statements about ratings inside of `if` statements about genre. However, you might be getting a sinking feeling that this could become a lot of nested `if` statements very quickly! \n\n**Instead let's use the AND operator (`&&`) to check for a genre and a rating at the same time.** \n\n<img src=\"https://images.code.org/a9307ead3b147e0a8016f2054f47f5f2-image-1446153610104.png\" style=\"width: 200px; float:right\">\n\nBe careful about the order of the `if` statements. As a general principle you want to check the most specific conditions before checking more general ones.  For example, you want to have an `if` statement that checks for rating AND genre evaluated before one that just checks for genre on its own. Having a more general `if` statement checked first might cut off or prevent more specific conditions from being reached.\n\nYou still want your app to give suggestions when just a rating or just a genre is detected, so keep this principle of ordering in mind. (Try them in the reverse order if you're interested in seeing what happens :))\n\n**Note: ** Check out the flowchart below to see the logic we are trying to add.\n\n# Do This:\n\n* **Try the question \"What is an R rated comedy movie?** to see the result.\n\n* **Update the code to give only one movie suggestion when a genre and a rating are detected in the input.**\n\t* Make one set of `if`, `else-if`, and `else` statements about genre and rating\n    * Add conditional statements to check for a comedy movie AND a rating. You could do this for all the genres but stick to one for now.\n\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n<img src=\"https://images.code.org/e64c26fed584ddbb5e5a62e6800d5e69-image-1455816162662.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/e64c26fed584ddbb5e5a62e6800d5e69-image-1455816162662.png\" target=\"_blank\">Click to open in separate window.</a>",
        "CSPU5_U3L26 OR operator_markdown_instruction": "# OR Operator in Movie Bot\n\nLet's try to check for the keywords related to questions (\"who\", \"what\", \"where\", \"when\", \"why\", \"how\", and \"?\") to decide if the user asked a question. You could do this with a chain of `if-else-if` statements, but it would not be very efficient. \n\nInstead let's use a **series of OR operators (`||`)** to check whether \"who\", \"what\", \"where\", \"when\", \"why\", \"how\" or \"?\" show up in the user input. \n\n**Note: ** We've updated the the flowchart below to show the logic we are trying to add to the initial question.\n\n# Do This:\n\n* **Update the `if` statement** to check if **\"who\" OR \"what\" OR \"where\" OR \"when\" OR \"why\" OR \"how\" OR \"?\"** have been typed in by the user.\n\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n<img src=\"https://images.code.org/6104c7fd0ecd31010d12be79bc350831-image-1446495141539.png\" style=\"width=500px\">\n",
        "CSPU5_addDescriptiveIDsToTurtleDriver_markdown_instruction": "# Descriptive IDs\n\n**You try it** - give your buttons **descriptive and meaningful IDs** rather than the default `button1`, `button2` and so forth.\n\nAfter you change the ID in Design Mode remember to:\n\n* **Change the event handler code** so that it correctly references the new IDs of the buttons\n* **Run - Test - Debug ** the program to make sure it works, and debug any problems.\n\n<details><summary><strong>Reminder:</strong> Rules About IDs [click to expand]</summary>\n\nIn making descriptive and meaningful IDs there **are some rules about IDs** you need to know.  IDs...\n\n<li> are case sensitive</li>\n<li> cannot contain spaces.\n<li>  *must* begin with a letter (A-Z or a-z) and may be followed by any number of digits and letters.\n<li>  can contain hyphens (\"-\"), underscores (\"_\"), colons (\":\"), or periods (\".\").\n\n</details>\n",
        "CSPU5_addDescriptiveIDsToTurtleDriver_2018_markdown_instruction": "# Descriptive IDs\n\n**You try it** - give your buttons **descriptive and meaningful IDs** rather than the default `button1`, `button2` and so forth.\n\nAfter you change the ID in Design Mode remember to:\n\n* **Change the event handler code** so that it correctly references the new IDs of the buttons\n* **Run - Test - Debug ** the program to make sure it works, and debug any problems.\n\n<details><summary><strong>Reminder:</strong> Rules About IDs [click to expand]</summary>\n\nIn making descriptive and meaningful IDs there **are some rules about IDs** you need to know.  IDs...\n\n<li> are case sensitive</li>\n<li> cannot contain spaces.\n<li>  *must* begin with a letter (A-Z or a-z) and may be followed by any number of digits and letters.\n<li>  can contain hyphens (\"-\"), underscores (\"_\"), colons (\":\"), or periods (\".\").\n\n</details>\n",
        "CSPU5_basic if-else - driving age_markdown_instruction": "# You try it\n\nLet's modify the driving age example to add an `else` clause.\n\n* **Add an `else` ** to the if-statement.\n* **Add a console.log** message inside the else clause that says something like \"sorry you can't drive yet\".\n\nYou can add an else-statement by clicking on the `+` attached to the if statement.  We've provided some starting code.\n\n**BONUS** - if they are not old enough to drive you could do the math and tell them how many years they have to wait.",
        "CSPU5_basic if-else - driving age_2018_markdown_instruction": "# You try it\n\nLet's modify the driving age example to add an `else` clause.\n\n* **Add an `else` ** to the if-statement.\n* **Add a console.log** message inside the else clause that says something like \"sorry you can't drive yet\".\n\nYou can add an else-statement by clicking on the `+` attached to the if statement.  We've provided some starting code.\n\n**BONUS** - if they are not old enough to drive you could do the math and tell them how many years they have to wait.",
        "CSPU5_moveTurtleOnButtonClick_markdown_instruction": "# onEvent\n\n**You try it!** - Make the turtle move forward when the button is clicked.\n\n* **Add an `onEvent` block** \n* Set the **id** of your button\n* Add `moveForward` to the function definition\n\n* **Run the program** to make sure it works.\n* **Try changing the event type** to something like *\"mouseover\"* and see what happens.  Not all event types will work with buttons but it's fun to play a little bit.\n\nOnce you've got the program responding to some event, congratulations! You've just made your first interactive app. \n\n**Click Finish** to move on to the next problem.\n\n",
        "CSPU5_moveTurtleOnButtonClick_2018_markdown_instruction": "# onEvent\n\n**You try it!** - Make the turtle move forward when the button is clicked.\n\n* **Add an `onEvent` block** \n* Set the **id** of your button\n* Add `moveForward` to the function definition\n\n* **Run the program** to make sure it works.\n* **Try changing the event type** to something like *\"mouseover\"* and see what happens.  Not all event types will work with buttons but it's fun to play a little bit.\n\nOnce you've got the program responding to some event, congratulations! You've just made your first interactive app. \n\n**Click Finish** to move on to the next problem.\n\n",
        "CSPU5_playWithEventTypes_markdown_instruction": "\n# Play with different event types\n\n<img src=\"https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06 AM.png\" style=\"float: right\">\nIf you haven't yet, you should experiment with different event types with your `onEvent` blocks.  The ones that will work best here are mouse-related ones such as:\n  * click\n  * mousemove\n  * mousedown\n  * mouseup\n  * mouseover\n\n*There are some events that capture keystrokes from the keyboard. These are interesting, but they do not work easily with buttons. We'll stick to mouse events for now, and get to keys later.*\n\n**Be sure** to experiment with each of the ones that start with \"mouse...\".\n\nOnce you've have played a little bit, click Finish to move on.\n",
        "CSPU5_playWithEventTypes_2018_markdown_instruction": "\n# Play with different event types\n\n<img src=\"https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06 AM.png\" style=\"float: right\">\nIf you haven't yet, you should experiment with different event types with your `onEvent` blocks.  The ones that will work best here are mouse-related ones such as:\n  * click\n  * mousemove\n  * mousedown\n  * mouseup\n  * mouseover\n\n*There are some events that capture keystrokes from the keyboard. These are interesting, but they do not work easily with buttons. We'll stick to mouse events for now, and get to keys later.*\n\n**Be sure** to experiment with each of the ones that start with \"mouse...\".\n\nOnce you've have played a little bit, click Finish to move on.\n",
        "CSPU5_predict_applab_onEventWithWrongID_markdown_instruction": "# Debugging Event-Driven Programs: IDs\n\n**You Try it: Checking IDs** -- Your first debugging task will be to verify that the button IDs match the event-handlers.  You'll also see error messages in the **\"Debug Console\"**\n\n![](https://images.code.org/6bb61c1ab1af5c0ce84a8cc4dc9b95cd-image-1476970435861.png)\n\n1. **Run the program** and inspect the error messages in the Debug Console.\n  * **NOTE:** an error message *only* indicates where the computer ran into trouble.  It doesn't tell you the root cause of the problem, necessarily.\n2. **Investigate** -- Use the **error message as a clue** to investigate the possible problem.\n3. **Fix it** -- Make a change that you think will fix the problem.\n4. **Run the program** and verify that not only are there no error messages but the program works as intended (turtle moves forward on button click).\n5. **Didn't work?** - repeat the steps above.  And stick with it!  You'll get it eventually.\n\n**Remember:** You can see the ID of a UI element by just hovering your mouse over it.\n<details><summary>Hint? [click here]</summary>\n\n<li>In this case the ID of the button does not match the ID in the onEvent command</li>\n<li>The error message is saying: \"you're telling me to listen to events on a UI Element with id 'button1' and no such thing exists!\" </li><br>\nThere are two ways to fix this:<br>\n<li>Change the ID in the event handler code to match the button ID in design mode.</li>\n<li>...or Change the button ID in design mode to match the event handler</li></details>\n\n",
        "CSPU5_predict_applab_onEventWithWrongID_2018_markdown_instruction": "# Debugging Event-Driven Programs: IDs\n\n**You Try it: Checking IDs** -- Your first debugging task will be to verify that the button IDs match the event-handlers.  You'll also see error messages in the **\"Debug Console\"**\n\n![](https://images.code.org/6bb61c1ab1af5c0ce84a8cc4dc9b95cd-image-1476970435861.png)\n\n1. **Run the program** and inspect the error messages in the Debug Console.\n  * **NOTE:** an error message *only* indicates where the computer ran into trouble.  It doesn't tell you the root cause of the problem, necessarily.\n2. **Investigate** -- Use the **error message as a clue** to investigate the possible problem.\n3. **Fix it** -- Make a change that you think will fix the problem.\n4. **Run the program** and verify that not only are there no error messages but the program works as intended (turtle moves forward on button click).\n5. **Didn't work?** - repeat the steps above.  And stick with it!  You'll get it eventually.\n\n**Remember:** You can see the ID of a UI element by just hovering your mouse over it.\n<details><summary>Hint? [click here]</summary>\n\n<li>In this case the ID of the button does not match the ID in the onEvent command</li>\n<li>The error message is saying: \"you're telling me to listen to events on a UI Element with id 'button1' and no such thing exists!\" </li><br>\nThere are two ways to fix this:<br>\n<li>Change the ID in the event handler code to match the button ID in design mode.</li>\n<li>...or Change the button ID in design mode to match the event handler</li></details>\n\n",
        "CSPU5_setPosition to fixed location_markdown_instruction": "# Using setPosition\n\n<img src=\"https://images.code.org/b664824ffeb3347b2e0b6d12447b4e8b-image-1476891499229.gif\" style=\"width: 150px; float: right;\">\n\n**Now you try it** - use  [setPosition](#triggercallout=setPosHover) to **move the button to the middle of the screen when clicked**. \n\nWe've set up a small project for you with a button (id: `moveBtn`) already added in design mode.\n\n1. Add an `onEvent` block\n2. Drag a `setPosition` command into the event handler function\n3. Set the x,y coordinate so that the button ends up in the middle of the screen.\n  * You'll need to experiment a little bit to find coordinates that work for you.\n  * Hover over the screen to find a good starting point.\n\n**Tip**: when you see a command that is linked like this: [setPosition](#triggercallout=setPosHover) click it! -- it will show you other hints.\n\nOnce you've got the button moving to the middle of the screen click Finish to move on to the next challenge.\n",
        "CSPU5_setPosition to fixed location_2018_markdown_instruction": "# Using setPosition\n\n<img src=\"https://images.code.org/b664824ffeb3347b2e0b6d12447b4e8b-image-1476891499229.gif\" style=\"width: 150px; float: right;\">\n\n**Now you try it** - use  [setPosition](#triggercallout=setPosHover) to **move the button to the middle of the screen when clicked**. \n\nWe've set up a small project for you with a button (id: `moveBtn`) already added in design mode.\n\n1. Add an `onEvent` block\n2. Drag a `setPosition` command into the event handler function\n3. Set the x,y coordinate so that the button ends up in the middle of the screen.\n  * You'll need to experiment a little bit to find coordinates that work for you.\n  * Hover over the screen to find a good starting point.\n\n**Tip**: when you see a command that is linked like this: [setPosition](#triggercallout=setPosHover) click it! -- it will show you other hints.\n\nOnce you've got the button moving to the middle of the screen click Finish to move on to the next challenge.\n",
        "Course 4 Artist 10_markdown_instruction": "<img src=\"https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png\" width=\"150px;\" style=\"mix-blend-mode: multiply;\" />\n\n**Play time:**  Here is the code for an interesting shape.   \n\nWhat happens when you repeat it multiple times, turning between each iteration?   \n\nNotice that the turns in this shape add up to *420 degrees*, which means that when your artist is done drawing, it will be facing a different direction than when you started.  That new direction is exactly *60 degrees* to the *right* of where you began.\n\n<hr/>\n\n<h4>\n<details>\n<summary><b>Repeat 4</b></summary>\n<br/>\nIf you want to come full circle in just 4 repetitions, you need the artist to turn a total of **360 degrees/4 = 90 degrees** each time.  You can do that by adding an extra `turn right by 30 degrees` block to the outer loop (since **60+30 = 90**.)  \n<br/>\n<img src=\"https://images.code.org/9da67a628ed72e87520a02a0d917e2af-image-1440132370113.44.12.png\" width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n<br/><br/>\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Repeat 6</b></summary>\n<br/>\nWhen you repeat the shape as-is 6 times, you get a total rotation of **6x60 degrees** which is a full **360 degree** cycle.  \n<img src=\"https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png\"  width=\"500px;\"  style=\"mix-blend-mode: multiply;\" />\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Repeat 12</b></summary>\n<br/>\nIf you want to repeat the image 12 times, you need the artist to turn a total of **360 degrees/12 = 30 degrees** each iteration.  That means you will need to adjust the artist back a bit with `turn left by 30 degrees` before you repeat the shape again.   <br/><br/>\n<img src=\"https://images.code.org/ad254952522674496918561096817c66-image-1440132424792.44.01.png\" width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n</details>\n</h4>\n\nNow it's your turn!  Can you recreate each image by repeating the starting shape?  ",
        "Course 4 Artist Binary pre1_markdown_instruction": "Binary is a way of representing information using only two options. In this case, <b>off</b> and <b>on</b>.\n<br/>\nHere, we're going to use the number <b>0</b> as code for \"off\" and the number <b>1</b> as code for \"on\".\n<hr/>\nWe've provided you with a grid of \"pixels\" that you can walk through and make designs by turning on only certain squares.\n\n<b>Use the blocks below to have the artist draw \"01010101\" in binary in the first row.</b>",
        "Course 4 Artist For Loops 2_markdown_instruction": "I've put the code for drawing a triangle inside a `for loop` that counts from 50 to 100 by 10. \n\n<br/>\n<strong>NOTE:</strong> Make sure you look at the code *before* you hit \"Run\".",
        "Course 4 Artist For Loops 7_markdown_instruction": "What happens if you remove the \"Repeat 3\" from this algorithm, keeping the \"move\" and \"turn\" blocks in the for loop? \n\n<br/>\nIn this spiraling triangle, each side is 20 pixels longer than the last.\n\n",
        "Course 4 Artist Functions inspire_markdown_instruction": "<img src=\"https://images.code.org/6c6ff8e3b5a763926102033a94720f8b-image-1441300952649.19.47.png\" width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! \n\nIf this picture inspires you, try to make something similar. Otherwise, create something all your own.  \n<br/>\n\n<h4>\n<details>\n<summary><b>Hints</b></summary>\n\t<br/><br/>\n\t<h5>\n\t<details>\n\t<summary><b>Hint #1</b></summary>\n    \t<br/>\n    \tUse a `for loop`, then use its counter variable inside of a nested `repeat` loop. \n    \t<br/><br/>\n    </details>\n\t</h5>\n    \n    <h5>\n\t<details>\n\t<summary><b>Hint #2</b></summary>\n    \t<br/>\n    \tEach iteration, you should `draw a square` then jump forward.\n    \t<br/><br/>\n    </details>\n\t</h5>\n    \n    <h5>\n\t<details>\n\t<summary><b>Hint #3</b></summary>\n    \t<br/>\n    \tYou will need to turn left by 90 degrees outside of your `repeat`, but still inside the `for loop`.\n    \t<br/><br/>\n    </details>\n\t</h5>\n    \n    <h5>\n\t<details>\n\t<summary><b>Solution</b></summary>\n    \t<br/>\n    \t<br/>\n    \t<img src=\"https://images.code.org/6b07c5de58a1fa573bef19182105f516-image-1441300922567.14.00.png\" width=\"450px\"/>\n    \t<br/><br/>\n    </details>\n\t</h5>\n</details>\n</h4>\n\n<br/>\nWhat happens if you make the squares a little bigger or smaller?  How about if you turn right instead of left?",
        "Course 4 Artist Vars 10_markdown_instruction": "Here's an algorithm that draws a triangle out of smaller triangles. Can you modify it so that it uses the `sides` variable to draw each triangle? \n\n</br>\nLook through the code, and every time you see the number 3, replace it with your `sides` variable. Remember to use the `set sides` block.",
        "Course 4 Artist Vars 12_markdown_instruction": "Let's set the `sides` variable to 5. The more sides we add to this algorithm, the bigger this whole pattern gets! \n\n<br/>\nNotice that there is another variable called `length`. \nWe can now use that variable wherever we have a `move forward` block. \n\nSet the `length` variable to 75 for this shape.",
        "Course 4 Bee Params 6_markdown_instruction": "Wouldn't it be nice if we could collect all of these nectars with a single function? \n\n<br/>\nTry adding a new parameter to your function called `nectar units` to control the amount of nectar to collect. You'll probably want to rename the function too!",
        "Course 4 EC 3_markdown_instruction": "**Functions Super Challenge:** Use what you learned in the previous level to draw an image like this.\n\n*Note: The code becomes more simple if you incorporate parameters.*\n\n<br/>\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\" width=\"300px\"/>\n<br/>  \n\n\n",
        "Course 4 EC 3a_markdown_instruction": "**Extreme Challenge:** No rules. No clues. Just the challenge!\n\n<br/>\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\" width=\"300px\"/>\n<br/>  \n\n\n",
        "Course 4 Play Lab Params 10_markdown_instruction": "We've added one last function for you.\n<hr/>\n\n<h4>\nUse an `if` statement to program your game to call the `level_up` function only when `player_score` becomes greater than a certain number.<br/><br/>\n</h4>\n<i>For example: `player_score` > 6</i>\n\n\n<hr/>\n<i>Play the game, and make it to level 3 to move to the next puzzle.</i>",
        "Course 4 Play Lab Params 3_markdown_instruction": "We have added another parameter to the jump function so that we can use it with other actors. Each actor is represented by a number, starting from one. \n\n<br/>\nEdit the `jump` function so that it uses the `actor` parameter to make the correct character jump. ",
        "Course 4 Play Lab Params 9_markdown_instruction": "Here's our game from an earlier stage but most of the code is hidden. We've added a new function called `score_points.`\n<br/>\n<hr>\n<br/>\n<h4>\nEdit the function so that a new parameter called `points` is added to `player_score`.  \n<br/>\nThe variable `player_score` should increase each time Dog tags Cat with pie, and decrease each time that Cat tags Dog with a sandwich.\n</h4>\n<br/>\n<hr>\n*Note: When you're done, click \"Run\" to play.  When Dog scores 6 points, you will move on to the next puzzle.*",
        "Course 4 Play Lab Vars 1_markdown_instruction": "This time you don't have to write any code, just hit `Run` to play the game! \n\n<br/>\nIn this game, you're the dog who is trying to collect more flags than the cat. Use the down arrow to control the dog. Press `Finish` when you're done playing.",
        "Course 4 Play Lab Vars 6_markdown_instruction": "<h5><b>\nIn our game, how should we score points? \n</b></h5> \n<br/>\n\n1. Add 1 to your `points` variable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \n2. Use the `when actor 2 touches anything` event to trigger an update to your score. You can increment your variable by setting `points = points + 1.`  <br/>   <br/> \n3. Get your score up to 10 to pass the level.\n\n<br/><br/>\n<h4>\n**Note:** Use the right arrow to throw pie!\n</h4>",
        "Course 4 Play Labs For Loops 4_markdown_instruction": "Changing the increment can be helpful, but we're still counting linearly (each number is the same distance from the last) What if I wanted to count exponentially? \n\n<br/>\nWithout changing the settings in this for loop, can you count 1, 4, 9, 16, 25... (counter squared)?",
        "Course 4 SCF 3_markdown_instruction": "**Functions Super Challenge:** Use what you learned in the previous level to draw an image like this.\n\n*Note: The code becomes more simple if you incorporate parameters.*\n\n<br/>\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\" width=\"300px\"/>\n<br/>  ",
        "Course 4 SCFL 5_markdown_instruction": "**For-Loops Super Challenge #5:** Can you figure out how to re-create this drawing? \n\n<img src=\"https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png\" width=\"350px\"/>\n\n<h4>\n<details>\n<summary><b>Hints</b></summary>\n\t<br/><br/>\n\t<h5>\n\t<details>\n\t<summary><b>Hint #1</b></summary>\n    \t<br/>\n    \tThe color change happens using the `set color with red, green, blue` block.  Red is always the value of `counter`, green is always `255 - counter`, and blue remains constant at 255 exactly.\n    \t<br/><br/>\n    </details>\n\t</h5>\n    \n    <h5>\n\t<details>\n\t<summary><b>Hint #2</b></summary>\n    \t<br/>\n    \tEach shape is a square with sides that are `counter` pixels long, starting with 5px, and increasing by 5px all the way up to 200px.\n    \t<br/><br/>\n    </details>\n\t</h5>\n    \n    <h5>\n\t<details>\n\t<summary><b>Hint #3</b></summary>\n    \t<br/>\n    \tThe artist turns 15 degrees between each square.\n    \t<br/><br/>\n    </details>\n\t</h5>\n    \n    <h5>\n\t<details>\n\t<summary><b>Solution</b></summary>\n    \t<br/>\n    \t<br/>\n    \t<img src=\"https://images.code.org/0bf4c87e33459f832258939ec53ad595-image-1446002848701.59.15.png\" width=\"450px\"/>\n    \t<br/><br/>\n    </details>\n\t</h5>\n</details>\n</h4>",
        "Course 4 SCV 3_markdown_instruction": "**Variables Super Challenge:** You've now learned everything you need to know to solve this puzzle! This game is meant to be difficult.  Can you stick with it until you figure out the solution?\n\n<hr/>\n\nNow for a game of tag!  Tag Cat to get 2 points. Tag Penguin to get 3 points.  Get exactly 10 points to win!\nBut be careful, when Cat and Penguin tag each other, they take points away.\n\n<strong>\nAdd the blocks necessary to make this game work the way it's been explained. \n- How will you get Dog to move in all directions using the arrow keys?  \n- How will you add points when Dog tags Cat or Penguin?  \n- How will you subtract points when Cat and Penguin touch?\n</strong>\n\n<hr/>",
        "CourseF_PlayLab_vars1_markdown_instruction": "To play this game, you don't have to write any code, just hit \"Run\"! \n<hr/>\nHere, you're the dog who is trying to collect more flags than the cat.  \n_(Use the down arrow to move.)_",
        "CourseF_PlayLab_vars6_markdown_instruction": "<h5><b>\nIn our game, how should we score points? \n</b></h5> \n<br/>\n\n1. Add 1 to your `points` variable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \n2. Use the `when actor 2 touches anything` event to trigger an update to your score. You can increment your variable by setting `points = points + 1.`  <br/>   <br/> \n3. Get your score up to 10 to pass the level.\n\n<br/><br/>\n<h4>\n**Note:** Use the right arrow to throw pie!\n</h4>",
        "CourseF_PlayLab_vars7_markdown_instruction": "<h5><b>\nIn our game, how should we score points? \n</b></h5> \n<br/>\n\n1. Add 1 to your `points` variable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \n2. Use the `when actor 2 touches anything` event to trigger an update to your score. You can increment your variable by setting `points = points + 1.`  <br/>   <br/> \n3. Get your score up to 10 to pass the level.\n\n<br/><br/>\n<h4>\n**Note:** Use the right arrow to throw pie!\n</h4>",
        "CourseF_PlayLab_vars8_markdown_instruction": "<h5><b>\nIn our game, how should we score points? \n</b></h5> \n<br/>\n\n1. Add 1 to your `points` variable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \n2. Use the `when actor 2 touches anything` event to trigger an update to your score. You can increment your variable by setting `points = points + 1.`  <br/>   <br/> \n3. Get your score up to 10 to pass the level.\n\n<br/><br/>\n<h4>\n**Note:** Use the right arrow to throw pie!\n</h4>",
        "D_Frozen_nested3_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Letâs make it into a snowflake.\"_\n\nNext, jump Elsa back to the center using the `jump to 200 over and 200 down` block, and spin her around to draw the line of shapes again and again in a bunch of different directions.   \n\nWhat amazing snowflakes you can make!\n<hr/>\nTake a look at these examples with polygons:  \n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\n\nAbstract shapes might make a snowflake more like one of these:  \n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)",
        "D_Frozen_nested6_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Letâs try something new. This time, skate in a zig-zag.\"_\n\n\n<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\" width=\"200px\" style=\"float: left; margin: 0 15px 15px 0;\" />\nDraw a stair-step pattern that uses turns between 75 and 105 degrees -- but make sure that your left and right turns use the same angle.  \n(You will see why later.)",
        "ECS Unit 2 Challenge Submission_markdown_instruction": "# Share Out and Submit > Submit Link\n\n##  Share your Artifacts and Advice\n**Head to the forum** and share: \n\n- Any data visualization or other artifact you created in doing the \n  - Use the âSHAREâ button in code studio to get a link to your program:   \n- The assessment question or extending learning activity that you produced for this lesson.\n- Notes for others who are going to teach this lesson. This should include: \n  - Advice for someone who is going to teach this lesson (consider what was challenging about doing the lesson, what you think students will struggle with, etc).\n  - What ideas do you have about how to structure and teach this lesson? what modifications do you plan to make to the lesson?\n  - What additional resources (if any) might be helpful in teaching this lesson\n\n\n<hr>\n### <a href= \"http://forum.code.org/c/ecs/ecs-unit2\" target=_blank> Head to the Forum >></a>\n<hr>\n\n## Check out what others have posted! \nOnce you've posted your own challenge results, check out what others have posted! Be sure to click through the other lessons as well and read through their work. Remember, a big goal here is to learn from one another so let people know when your find their suggestions helpful, or provide your own ideas when you come across questions. Be sure to use the **heart** feature on the forum to vote for posts you find particularly useful! \n\n<br/><br/>\n\n##  Submit the Link for your Forum Post for Review\n\nIf you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a dirct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "ECS Unit 3 Challenge Submission_markdown_instruction": "# Unit 3 Challenge > Submit Link\n\n##  Share your Artifacts and Advice\n**Head to the forum** and share: \n\n- Any data visualization or other artifact you created in doing the \n  - Use the âSHAREâ button in code studio to get a link to your program:   \n- The assessment question or extending learning activity that you produced for this lesson.\n- Notes for others who are going to teach this lesson. This should include: \n  - Advice for someone who is going to teach this lesson (consider what was challenging about doing the lesson, what you think students will struggle with, etc).\n  - What ideas do you have about how to structure and teach this lesson? what modifications do you plan to make to the lesson?\n  - What additional resources (if any) might be helpful in teaching this lesson\n\n\n<hr>\n### <a href= \"http://forum.code.org/c/ecs/ecs-unit3\" target=_blank> Head to the Forum >></a>\n<hr>\n\n## Check out what others have posted! \nOnce you've posted your own challenge results, check out what others have posted! Be sure to click through the other lessons as well and read through their work. Remember, a big goal here is to learn from one another so let people know when your find their suggestions helpful, or provide your own ideas when you come across questions. Be sure to use the **heart** feature on the forum to vote for posts you find particularly useful! \n\n<br/><br/>\n\n##  Submit the Link for your Forum Post for Review\n\nIf you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "ECS Unit 4 Challenge Submission_markdown_instruction": "# Submit a Link\n\n##  Share your Artifacts and Advice\n**Head to the forum** and share: \n\n- Any data visualization or other artifact you created in doing the \n  - Use the âSHAREâ button in code studio to get a link to your program:   \n- The assessment question or extending learning activity that you produced for this lesson.\n- Notes for others who are going to teach this lesson. This should include: \n  - Advice for someone who is going to teach this lesson (consider what was challenging about doing the lesson, what you think students will struggle with, etc).\n  - What ideas do you have about how to structure and teach this lesson? what modifications do you plan to make to the lesson?\n  - What additional resources (if any) might be helpful in teaching this lesson\n\n\n<hr>\n### <a href= \"http://forum.code.org/c/ecs/ecs-unit4\" target=_blank> Head to the Forum >></a>\n<hr>\n\n## Check out what others have posted! \nOnce you've posted your own challenge results, check out what others have posted! Be sure to click through the other lessons as well and read through their work. Remember, a big goal here is to learn from one another so let people know when your find their suggestions helpful, or provide your own ideas when you come across questions. Be sure to use the **heart** feature on the forum to vote for posts you find particularly useful! \n\n<br/><br/>\n\n##  Submit the Link for your Forum Post for Review\n\nIf you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "ECS Unit 5 Challenge Submission_markdown_instruction": "# Submit a Link\n\n##  Share your Artifacts and Advice\n**Head to the forum** and share: \n\n- Any data visualization or other artifact you created in doing the \n  - Use the âSHAREâ button in code studio to get a link to your program:   \n- The assessment question or extending learning activity that you produced for this lesson.\n- Notes for others who are going to teach this lesson. This should include: \n  - Advice for someone who is going to teach this lesson (consider what was challenging about doing the lesson, what you think students will struggle with, etc).\n  - What ideas do you have about how to structure and teach this lesson? what modifications do you plan to make to the lesson?\n  - What additional resources (if any) might be helpful in teaching this lesson\n\n\n<hr>\n### <a href= \"http://forum.code.org/c/ecs/ecs-unit5\" target=_blank> Head to the Forum >></a>\n<hr>\n\n## Check out what others have posted! \nOnce you've posted your own challenge results, check out what others have posted! Be sure to click through the other lessons as well and read through their work. Remember, a big goal here is to learn from one another so let people know when your find their suggestions helpful, or provide your own ideas when you come across questions. Be sure to use the **heart** feature on the forum to vote for posts you find particularly useful! \n\n<br/><br/>\n\n##  Submit the Link for your Forum Post for Review\n\nIf you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "ECS Unit 6 Challenge Submission_markdown_instruction": "# Submit a Link\n\n##  Share your Artifacts and Advice\n**Head to the forum** and share: \n\n- Any data visualization or other artifact you created in doing the \n  - Use the âSHAREâ button in code studio to get a link to your program:   \n- The assessment question or extending learning activity that you produced for this lesson.\n- Notes for others who are going to teach this lesson. This should include: \n  - Advice for someone who is going to teach this lesson (consider what was challenging about doing the lesson, what you think students will struggle with, etc).\n  - What ideas do you have about how to structure and teach this lesson? what modifications do you plan to make to the lesson?\n  - What additional resources (if any) might be helpful in teaching this lesson\n\n\n<hr>\n### <a href= \"http://forum.code.org/c/ecs/ecs-unit6\" target=_blank> Head to the Forum >></a>\n<hr>\n\n## Check out what others have posted! \nOnce you've posted your own challenge results, check out what others have posted! Be sure to click through the other lessons as well and read through their work. Remember, a big goal here is to learn from one another so let people know when your find their suggestions helpful, or provide your own ideas when you come across questions. Be sure to use the **heart** feature on the forum to vote for posts you find particularly useful! \n\n<br/><br/>\n\n##  Submit the Link for your Forum Post for Review\n\nIf you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "ECSPD PD goals_markdown_instruction": "***Now that you've learned more about the ECS Professional Development, let's consider your goals***\n\n<br>\n<br>\n__What are your personal goals for your ECS PD experience (what do you hope to accomplish, how do you hope to grow)?__ *NOTE: These goals might change over time, and we'll revisit this your response as we go through the course so we can check in on how we're progressing towards those goals.*\n\n\n",
        "ECSU2 Challenge Submission_markdown_instruction": "# Share Out and Submit > Submit Link\n\n##  Share your Artifacts and Advice\n**Head to the forum** and share: \n\n- Any data visualization or other artifact you created in doing the \n  - Use the âSHAREâ button in code studio to get a link to your program:   \n- The assessment question or extending learning activity that you produced for this lesson.\n- Notes for others who are going to teach this lesson. This should include: \n  - Advice for someone who is going to teach this lesson (consider what was challenging about doing the lesson, what you think students will struggle with, etc).\n  - What ideas do you have about how to structure and teach this lesson? what modifications do you plan to make to the lesson?\n  - What additional resources (if any) might be helpful in teaching this lesson\n\n\n<hr>\n### <a href= \"http://forum.code.org/c/ecs/ecs-unit2\" target=_blank> Head to the Forum >></a>\n<hr>\n\n## Check out what others have posted! \nOnce you've posted your own challenge results, check out what others have posted! Be sure to click through the other lessons as well and read through their work. Remember, a big goal here is to learn from one another so let people know when your find their suggestions helpful, or provide your own ideas when you come across questions. Be sure to use the **heart** feature on the forum to vote for posts you find particularly useful! \n\n<br/><br/>\n\n##  Submit the Link for your Forum Post for Review\n\nIf you would like to receive payment for this online PD, please submit a link to that forum post here so we can review! \n\nIn order to get a dirct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)",
        "Food Fight!_markdown_instruction": "We've added one last function for you.\n<hr/>\n\n<h4>\nUse an `if` statement to program your game to call the `level_up` function only when `player_score` becomes greater than a certain number.<br/><br/>\n</h4>\n<i>For example: `player_score` > 6</i>\n\n\n<hr/>\n<i>Play the game, and make it to level 3 to move to the next puzzle.</i>",
        "GLJr_Forever_7_markdown_instruction": "Check out this new \"if-else\" block - it lets you run one set of code _if_ a condition is true, and a different set of code if it's false. Inside it we're using another new block that tells you _if_ two sprites are touching.\n\nSee if you can make both the dog and cat stop moving when they run into each other.",
        "GameLab Livecode Demo 3_markdown_instruction": "# Sprite Interactions\n\nAt this point there's one sprite on screen, and we can move it around with the arrow keys. Now let's add a second sprite and get the two interacting.\n\n1. Add a new animation in the animation tab\n2. Create a new sprite called \"target\" and set its animation\n3. Use the `sprite.isTouching()` block in a conditional to make the target sprite react to the player sprite\n\t* Make the target sprite shrink or grow\n    * Make the target move to a random location\n    * Make the target rotate\n",
        "Glossary O_markdown_instruction": "## Vocabulary\n\nEncouraging students to learn and use 'professional' terms enables them to communicate correctly and efficiently with others and builds their knowledge such that it can be further developed without having to relearn terms and concepts at a later time. The terms and concepts used in the unplugged lessons are defined using words that young students can understand.\n\n# TEACHING TIP\nBest practice is to introduce the terms with easy-to-understand language, relate the terms to previous experiences, use the terms repeatedly beyond the lesson itself throughout the entire course (and in other situations) when appropriate, and reinforce students' use in oral and written communication.\n\nThe following terms are introduced in an unplugged lesson as either a Vocabulary word or as a term related to the online Blockly programming interface. Terms are subsequently reinforced in the following online puzzles and activities. Most terms appear multiple times throughout the courses and lessons providing the students with many opportunities to deepen their understanding and assimilate the words into conversations, both in and outside of the classroom.\n\nThe course and lesson numbers after each term indicate the unplugged lessons in which the term is emphasized.\n\n# Look through this list of vocabulary words and then answer the prompt at the bottom of the page. You don't have to learn all the vocabulary words all right now, but you they are here so you can refer back them during this online course. \n\nabstraction\n\nPulling out specific differences to make one solution work for multiple problems students.\n\n(Course 3: Lesson 1)\n\nalgorithm\n\nA list of steps to finish a task. A set of instructions that can be performed with or without a computer. For example, the collection of steps to make a peanut butter and jelly sandwich is an algorithm.\n\n(Course 1: Lessons 1, 6 | Course 2: Lessons 1, 2 | Course 3: Lessons 1, 10)\n\nbinary\n\nA way of representing information using only two options.\n\n(Course 2: Lesson 14)\n\nBlockly\n\nThe visual programming language used in Code.org's online learning system for K-5 students. (Course 1: Lesson 3)\n\nbug\n\nAn error in a program that prevents the program from running as expected. (Course 2: Lesson 9)\n\ncode\n\nOne or more commands or algorithm(s) designed to be carried out by a computer. See Program. (Course 1: Lesson 2)\n\ncommand\n\nAn instruction for the computer. Many commands put together make up algorithms and computer programs. (Course 1: Lesson 2)\n\ncomputational thinking\n\nMental processes and strategies that include: decomposition, pattern matching, abstraction, algorithms (decomposing problems into smaller, more manageable problems, finding repeating patterns, abstracting specific differences to make one solution work for multiple problems, and creating step-by-step algorithms). (Course 3: Lesson 1)\n\ncomputer science\n\nA field in which people use the power of computers to solve big problems. (Course 1: Lesson 2)\n\nconditionals\n\nStatements that only run under certain conditions or situations. (Course 2: Lesson 12)\n\ncrowdsourcing\n\nGetting help from a large group of people to finish something faster. (Course 3: Lesson 19)\n\ndata\n\nQuantities, characters, or symbols that are the inputs and outputs of computer programs. (Course 2: Lesson 14 | Course 3: Lessons 1)\n\ndebugging\n\nFinding and fixing errors in programs. (Course 2: Lesson 9)\n\ndecompose\n\nBreak a problem down into smaller pieces. (Course 3: Lesson 1)\n\ndigital citizen\n\nSomeone who acts safely, responsibly, and respectfully online. (Course 3: Lesson 20)\n\ndigital footprint\n\nThe information about someone on the Internet. (Course 2: Lesson 18)\n\nDNS (domain name service)\n\nThe service that translates URLs to IP addresses. (Course 3: Lesson 18)\n\nDSL/cable\n\nA method of sending information using telephone or television cables. (Course 3: Lesson 18)\n\nevent\n\nAn action that causes something to happen. (Course 1: Lesson 15 | Course 2: Lesson 15)\n\nevent-handler\n\nAn action or event that is being constantly monitored for by the computer. When you write code for the computer to perform after that an action occurs, that code, the event-handler, will run every time the action is performed without having to put the commands inside of a loop. Many event-handlers are human-initiated. For example: an event handler might respond when the user clicks the mouse by making the bird flap its wings. \"When the mouse is clicked\" is an event-handler. (Course 1: Lesson 15 | Course 2: Lesson 15)\n\nfiber optic cable\n\nA connection that uses light to transmit information. (Course 3: Lesson 18)\n\nfunction\n\nA piece of code that you can easily call over and over again. Functions are sometimes called 'procedures.' A function definition is a segment of code that includes the steps performed in the function. A function call is the code segment, typically within the main logic of the program, which invokes the function. (Course 3: Lesson 4, 9)\n\nInternet\n\nA group of computers and servers that are connected to each other. (Course 1: Lesson 17 | Course 3: Lessons 18, 20)\n\nIP address\n\nA number assigned to any item that is connected to the Internet. (Course 3: Lesson 18)\n\niteration\n\nA repetitive action or command typically created with programming loops. (Course 1: Lesson 12 | Course 2: Lesson 5)\n\nloop\n\nThe action of doing something over and over again. (Course 1: Lesson 12 | Course 2: Lesson 5)\n\npackets\n\nSmall chunks of information that have been carefully formed from larger chunks of information. (Course 3: Lesson 18)\n\npattern matching\n\nFinding similarities between things. (Course 3: Lesson 1)\n\npersistence\n\nTrying again and again, even when something is very hard. (Course 1: Lesson 9)\n\nprogram\n\nA program is an algorithm that has been coded into something that can be run by a machine. (Course 1: Lesson 2 | Course 2: Lesson 1 | Course 3: Lesson 10)\n\nrun program\n\nTo have the computer execute the commands you've written in your program. (Course 1: Lesson 4)\n\nservers\n\nComputers that exist only to provide things to others. (Course 3: Lesson 18)\n\ntoolbox\n\nThe tall grey bar in the middle section of Code.org's online learning system where all the commands you can use to write your program are displayed. (Course 1: Lesson 4)\n\nURL (universal resource locator)\n\nAn easy-to-remember address for calling a web page (like www.code.org). (Course 3: Lesson 18)\n\nusername\n\nA name you make up so that you can see or do things on a website, sometimes called a \"screen name.\" (Course 1: Lesson 18)\n\nvariable\n\nA placeholder for a piece of information that can change. (Course 3: Lesson 4)\n\nWi-Fi\n\nA wireless method of sending information using radio waves. (Course 3: Lesson 18)\n\nworkspace\n\nThe white area on the right side of Code.org's online learning system where you drag and drop commands to build your program. (Course 1: Lesson 4)\n\n### What is one way you can include computer science vocabulary terms in your class?\n",
        "If and If-Else part 1_markdown_instruction": "### Points to pay attention to:\n\n* **NOTE:** Stop play at 1:37.  \n    It's all you need for the exercises that follow.  You'll watch the remainder of the video after that.\n\n* An IF statement can have an else clause, but an ELSE clause cannot exist on its own.\n* With an else clause you are *guaranteeing* that one of two portions of code will run.\n\n",
        "Internet Simulator: Routers_markdown_instruction": "# An Updated Internet Simulator\nMany changes have been made to the Internet Simulator. \n\n**Routers:** Rather than being connected to your entire class you are now connected to a single router. You can see who else is on your router in the network diagram.\n\n![](https://images.code.org/0311148470dc358fe435568e2b333062-image-1442008896037.51.04 PM.png)\n\n\n**IP Addresses:** Every user has a unique IP address. The first portion is the number of your router and the second is your own unique number. You can figure out the IP addresses of people on the router by looking at the network diagram.\n\n![](https://images.code.org/b03d841ebd8299ca43197ee4df35d273-image-1442008949041.51.59 PM.png)\n\n**Sending Messages: ** You can now send messages to a single other user. Fill in the \"To\" portion of the message with the IP address (including the period) of the person you'd like to send your message to.\n\n![](https://images.code.org/8e9b073526f24e69147d5c7f34492bec-image-1442009069243.52.34 PM.png)\n\n**Router Statistics: ** You can see useful information about the functioning of your router in the \"Router\" tab.\n\n![](https://images.code.org/7390cfa12f65b933145a391fa65ab4b1-image-1442009194697.58.23 PM.png)\n\n**Router Logs: ** You can read a log of traffic both at the level of your router and the entire network by clicking the \"Log Browser\" button.\n\n![](https://images.code.org/b24975e33f1a2b10fc6a2ca8cf1c9ad2-image-1442009358166.58.48 PM.png)",
        "Internet Simulator: Routers_2018_markdown_instruction": "# An Updated Internet Simulator\nMany changes have been made to the Internet Simulator. \n\n**Routers:** Rather than being connected to your entire class you are now connected to a single router. You can see who else is on your router in the network diagram.\n\n![](https://images.code.org/0311148470dc358fe435568e2b333062-image-1442008896037.51.04 PM.png)\n\n\n**IP Addresses:** Every user has a unique IP address. The first portion is the number of your router and the second is your own unique number. You can figure out the IP addresses of people on the router by looking at the network diagram.\n\n![](https://images.code.org/b03d841ebd8299ca43197ee4df35d273-image-1442008949041.51.59 PM.png)\n\n**Sending Messages: ** You can now send messages to a single other user. Fill in the \"To\" portion of the message with the IP address (including the period) of the person you'd like to send your message to.\n\n![](https://images.code.org/8e9b073526f24e69147d5c7f34492bec-image-1442009069243.52.34 PM.png)\n\n**Router Statistics: ** You can see useful information about the functioning of your router in the \"Router\" tab.\n\n![](https://images.code.org/7390cfa12f65b933145a391fa65ab4b1-image-1442009194697.58.23 PM.png)\n\n**Router Logs: ** You can read a log of traffic both at the level of your router and the entire network by clicking the \"Log Browser\" button.\n\n![](https://images.code.org/b24975e33f1a2b10fc6a2ca8cf1c9ad2-image-1442009358166.58.48 PM.png)",
        "Lessons 10 - 11: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure youâve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you havenât already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 10 - 11: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, letâs think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. Itâs important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs youâll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n<br>\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your âfocus areaâ, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once itâs available. \n\n<br><br>",
        "Lessons 2 - 3: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure youâve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you havenât already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 2 - 3: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, letâs think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. Itâs important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs youâll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n<br>\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your âfocus areaâ, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once itâs available. \n\n<br><br>",
        "Lessons 2-3: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure youâve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you havenât already reviewed the materials, do that now and come back to this task later.**\n\n# Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, letâs think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. Itâs important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs youâll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n<br>\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your âfocus areaâ, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once itâs available. \n\n<br><br>",
        "Lessons 4 - 6: Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure youâve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you havenât already reviewed the materials, do that now and come back to this task later.**\n\n# Lessons 4 - 6: Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, letâs think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. Itâs important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs youâll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n<br>\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your âfocus areaâ, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once itâs available. \n\n<br><br>",
        "MC_HOC_2017_10_RETRY_markdown_instruction": "Can you spot the difference between the two functions in your workspace? \n \nUse these functions with other code from the toolbox to clear a path for the Minecart, then collect the **Flint and Steel** [flint_and_steel]. \n ",
        "NEW Course 4 Artist Functions 5_markdown_instruction": "How did the `draw a square` block know what commands to run? Click on \"edit\" in the `draw a square` function block. The blocks in the function editor are the definition that make up `draw a square`. \n\n<br/>\nWhen you're done looking around, click \"Save and Close\" and then \"Run.\"\n\n",
        "NEW Course 4 Artist Params 13_markdown_instruction": "Let's edit this `draw a polygon` function. \n\nIt already has a `sides` parameter. Now, let's add a `length` parameter. \n\n<br/>\nThe perimeter of each shape is 200 pixels. Do you remember the equation to make shapes the same size when they have a different number of sides?",
        "NEW Course 4 Bee For Loops 7_markdown_instruction": "Now, let's combine the `counter` variable with a math block! How can you use the `counter` variable to navigate this garden with the fewest number of blocks possible? \n\nWhat do you need to do to collect 3, 6, 9, 12, 15 nectar this time?  The secret is in the `counter` variable!\n\n<br/>\nRemember: If your loop is counting up, the increment is added to your `counter` variable each time through.\n\n",
        "PDAlg Classroom Culture 2_markdown_instruction": "### Strategies for facilitating an engaged computer science classroom:\n\n- Be open to learning from your students. This is a very valid way for you to learn something new and if the students see you learning from others; they'll feel more comfortable to do it themselves.\n- Be calm yet persistent when problems arise (which they will) because your reaction sets the tone for students. If at the first sign of an issue, you proclaim \"I'm terrible at technology. I give up,\" your students will think it's okay to do that too. \n- Implement the \"Ask 3 and then me\" rule in your classroom, which is when students have to ask 3 classmates for help before they can ask the teacher that same question. This reduces the number of students that you have to answer individually and promotes peer learning.\n- Take pride in their programs. Show it off, put it to work, post it online. This is a big accomplishment for you and your students that should be celebrated.\n- Your students may not need you in the way you think they need you. You don't need to be the expert. Ask probing questions to a student (even if you don't know the answer to the questions). Or ask the class if anyone has the answer. Or say \"I don't know; let's figure this out together\"\n- Ask probing questions to help a student instead of taking their mouse away to solve the puzzle for them. Students will be more engaged if they have to move the mouse themselves. Also, make it a classroom rule that if a student is helping another student at a computer, they can't take the mouse from them either. \n- Understanding how to get the help you need is an important part of becoming a successful facilitator of a computer science classroom. There are a variety of ways to get questions answered: online groups, the person sitting next to you, email to a mentor or peer, Code.org community forums, or other computer science educators in your district.\n\nIt's possible that you might find something that's broken, unusable, or missing on our website, which in the computer science world is called a \"bug\". Take a screenshot of what happened, and describe the problem in an email to pd@code.org. Also include what operating system and browser version you're using (example: Windows 7, Internet explorer 9). We really appreciate teachers and users sending us bug reports.\n\n### How will you foster a healthy CS classroom environment?\nNow that you know more about our curriculum, what practices do you want to use to promote a healthy atmosphere in your computer science classroom?'\n",
        "PDK5 Classroom Culture 2_markdown_instruction": "### Strategies for facilitating an engaged computer science classroom:\n\n- Be open to learning from your students. This is a very valid way for you to learn something new and if the students see you learning from others; they'll feel more comfortable to do it themselves.\n- Be calm yet persistent when problems arise (which they will) because your reaction sets the tone for students. If at the first sign of an issue, you proclaim \"I'm terrible at technology. I give up,\" your students will think it's okay to do that too. \n- Implement the \"Ask 3 and then me\" rule in your classroom, which is when students have to ask 3 classmates for help before they can ask the teacher that same question. This reduces the number of students that you have to answer individually and promotes peer learning.\n- Take pride in their programs. Show it off, put it to work, post it online. This is a big accomplishment for you and your students that should be celebrated.\n- Your students may not need you in the way you think they need you. You don't need to be the expert. Ask probing questions to a student (even if you don't know the answer to the questions). Or ask the class if anyone has the answer. Or say \"I don't know; let's figure this out together\"\n- Ask probing questions to help a student instead of taking their mouse away to solve the puzzle for them. Students will be more engaged if they have to move the mouse themselves. Also, make it a classroom rule that if a student is helping another student at a computer, they can't take the mouse from them either. \n- Understanding how to get the help you need is an important part of becoming a successful facilitator of a computer science classroom. There are a variety of ways to get questions answered: online groups, the person sitting next to you, email to a mentor or peer, Code.org community forums, or other computer science educators in your district.\n\nIt's possible that you might find something that's broken, unusable, or missing on our website, which in the computer science world is called a \"bug\". Take a screenshot of what happened, and describe the problem in an email to support@code.org. Also include what operating system and browser version you're using (example: Windows 7, Internet explorer 9). We really appreciate teachers and users sending us bug reports.\n\n### How will you foster a healthy CS classroom environment?\nNow that you know more about our curriculum, what practices do you want to use to promote a healthy atmosphere in your computer science classroom?'\n",
        "PDK5 Problem Solving_markdown_instruction": "<div style=\"width:800px;\">\nCreating a positive classroom culture before you start writing programs with your class goes a long way. Discuss with your students the strategies they should try, either individually or with a partner, to help get themselves unstuck while trying to solve a puzzle or write a program. Having common vocabulary as a class can be very helpful, so that when a student asks you for help, you can ask them what parts of the puzzle-solving process they have executed. Here are the 4 main steps:\n<ul>\n<li>Understand the puzzle</li>\n<li>Create a plan</li>\n<li>Perform and perfect the plan</li>\n<li>Check your work</li>\n</ul>\n<br/>\n<a href=\"http://code.org/curriculum/docs/k-5/PuzzleSolvingStudent.pdf\" target=\"_new\">This worksheet</a> is available in the Teacher Dashboard in the \"Lesson Plans and Resources\" tile. \n<br/>\n<br/>\n</div>\n![image](//code.org/images/puzzlesolving.png)\n\n</br>\n\n### How could you integrate this in your classroom? \n\n",
        "Pixelation - Lesson 14 - Make the Letter A_markdown_instruction": "<img align=\"right\" src=\"https://code.org/images/cspunit1/letterA.png\" width=\"150\" hspace=\"20\">\n# Task 1: Make a 3x5 letter 'A'\nStart by trying to recreate the 3x5 letter \"A\" depicted (at right) using the pixelation widget. \n\nThe image is initially setup with the *incorrect* dimensions. Your first task is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then you can start entering pixel data to make the A.",
        "Pixelation - Lesson 14 - Make the Letter A_2018_markdown_instruction": "<img align=\"right\" src=\"https://code.org/images/cspunit1/letterA.png\" width=\"150\" hspace=\"20\">\n# Task 1: Make a 3x5 letter 'A'\nStart by trying to recreate the 3x5 letter \"A\" depicted (at right) using the pixelation widget. \n\nThe image is initially setup with the *incorrect* dimensions. Your first task is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then you can start entering pixel data to make the A.",
        "Pixelation - Lesson 15 - Color Shades 4x4_markdown_instruction": "# Pixelation: Task 3\n<img src = \"https://code.org/images/cspunit1/ColorTask3.png\" align=right width=200 hspace=20>\n**Directions:**\nWe start you out with the 4x4 image Maddie created in the video.\n\nYour task is to fill a 4x4 grid with colors using *12-bits per pixel*. The result should look something like (but not exactly) the image shown at right.  \n\nHere are the requirements:\n\n  * Row 1 - fill with shades of red. \n  * Row 2 - shades of green. \n  * Row 3 - shades of blue. \n  * Row 4 - shades of gray.\n",
        "Pixelation - Lesson 15 - Color Shades 4x4_2018_markdown_instruction": "# Pixelation: Task 3\n<img src = \"https://code.org/images/cspunit1/ColorTask3.png\" align=right width=200 hspace=20>\n**Directions:**\nWe start you out with the 4x4 image Maddie created in the video.\n\nYour task is to fill a 4x4 grid with colors using *12-bits per pixel*. The result should look something like (but not exactly) the image shown at right.  \n\nHere are the requirements:\n\n  * Row 1 - fill with shades of red. \n  * Row 2 - shades of green. \n  * Row 3 - shades of blue. \n  * Row 4 - shades of gray.\n",
        "Poorva copy U3L2 Using Simple Commands_markdown_instruction": "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\" align=right>\n\nGiven only 4 turtle commands, write code in App Lab to complete the drawings in each of the challenges below.  Your goal is to write code that solves the problem as efficiently as possible using only the commands provided.\n\nWhat does âefficientâ mean?  In computer science it can actually mean several different things depending on what youâre talking about.  Work on these challenges, try to solve them in a way that you think is best and weâll ask about efficiency at the end.\n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" align=right>\n# Do This: \nDraw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the Finish button - it will appear once you run the program.",
        "Project - Make Your Own Clicker Game_markdown_instruction": "# Make Your Own \"Clicker\" Game\nYou will be creating your own âclickerâ game similar to the Apple Grabber game you worked on in this lesson. \nThe general object of the game is to click on an element that jumps around every time you click it. You will pick your own theme and decide what the rules are and how to keep score.\n\n** Your Main Tasks Are To:**\n\n  * Pick a theme for your game and add appropriate images and styling.\n  * Add variables to track some data during gameplay.\n  * Add code to event handlers to update the variables and display appropriately.\n \n**See Activity Guide for Requirements**\n\nThere is a full activity guide and rubric for this project.  You can find a link to it in the student resources section for this lesson. Or ask your teacher for it.\n \n<img src=\"https://images.code.org/146107536c50b4a3317f3ebbe2e66f37-image-1446418612319.png\" style=\"float: right; width: 300px\">\n** Template **\n\nThis level is a template for the app. You should **run it to see what it does** right now. You will modify *this* template, both the design elements and the code, for your project.\n\nThe template has 4 screens and some basic navigation functionality and event handlers set up for you.  The game play screen uses the images from the Apple Grabber game, but you should replace these with images related to your chosen theme.\n\n",
        "Reflection: Create your Own Number System_markdown_instruction": "# Create a Number System\n\n## Do the Activity\n\nOne of the best ways to prepare to teach a lesson is by actually doing the activity yourself.  As you complete the activity, consider the misconceptions that your students may have and what sorts of questions you can ask to help them overcome these barriers.  \nNotes:\n<ol>\n<li>There are many 'correct' answers to this activity. The important part is that rules are applied consistently. </li>\n<li> The difficult part of this task is not to find all of the shapes, but to create an ordering that does not ever repeat a pattern and articulating that ordering as a set of rules or a protocol. </li></ol>\n\n<a href= \"http://docs.google.com/document/d/1vFg7GG-kFJGw9MgxQ5g3yW7R5rE6f3udVK3C9Hj9P6E/edit\" target=_blank> Click here to Access Number Systems Activity</a>\n\n<hr>\n### <a href= \"http://forum.code.org/c/csp1/lesson04\" target=_blank> Head to the Forum >></a>\n<hr>\n\n\n## Share Your Protocol and Ideas\nHead to the forum and share your ideas about this activity. Specifically, share: \n\n- The pattern and rules for your number system\n- Misconceptions that your students may have and what sorts of questions you can ask to help them overcome these barriers.  \n\n##  Submit the Link for your Forum Post for Review\n\nOnce youâve posted in the forum, share a link here. In order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\n\n\n\n",
        "Room Escape Workshop - 10 - 2_markdown_instruction": "# Door Open\n\n<img src=\"https://images.code.org/57407cb51f50e08ecddb8ce7d2d89157-image-1491065952915.58.58 PM.png\" style=\"width:200px;float:right\">\n\nOpen the door if they have the key!\n\n# Do This\n\n* Add an `onEvent` block for clicking on the door\n* Add an `if` statement inside the `onEvent` to check if the key position has moved to the bottom of the screen\n\t* Add an if statement\n    * In the if statement add the `==`\n    * On one side of the `==` put the x position you move the key to when it is clicked\n    * On the other side add the `getXPosition()` block - The ID for that should be the ID of your key!\n* Inside the `if` statement use `showElement` to show the hidden outdoors image if they got the key",
        "Room Escape Workshop - 3-2_markdown_instruction": "# Move Picture\n\nNow make it so the user can find the secret code by clicking the picture. When they click the picture it should move up and out of the way.\n\n# Do This\n\n* Pull out an `onEvent` block\n* Change the id spot in the `onEvent` block to picture (which is the ID of the picture element)\n* Inside the `onEvent` block add the `setPosition` block with the following inputs\n\t* ID: picture\n    * The next two inputs are x and y values - test out some numbers to try to get the picture to move like in the pictures on the right",
        "Room Escape Workshop - 4_markdown_instruction": "# Setting Up the Safe\n\nYou have generated a secret code and made it so users can navigate to the second room. Lets give the user the ability to enter the secret code when they click on the safe\n\n# Do This\n\n* Add an `onEvent` block\n\t* Pick the ID for the safe\n* Inside the `onEvent` block add a <img src=\"https://images.code.org/c0964a8543728d018d5d9583319e22b9-image-1491060910093.34.36 AM.png\" style=\"width:300px\"> block\n\t* On the left side change the *x* (the name of the variable) to be *guess* \n    * On the right side change *\"Enter a value\"* (the prompt to ask the user) to *\"Enter the code\"*",
        "Room Escape Workshop - 8_markdown_instruction": "# Showing inside the safe\n\nNow set up the code to show the key and the gray square when the user inputs the correct code.\n\n# Do This\n\n* Inside the `if` statement you created in the `onEvent` command for the safe add:\n    * The `showElement` block to show the gray square\n    * The `showElement` block to show the key",
        "Room Escape Workshop - 9-2_markdown_instruction": "# Click Key\n\n<img src=\"https://images.code.org/1a736d2774860bebc5072b8ae8b38f34-image-1491066638078.10.00 PM.png\" style=\"width:170px;float:right\">\n\nOnce a user clicks the key you will want to show they are holding it. You can do this by moving the key to the bottom corner of the room. \n\n# Do This\n\n* Add an `onEvent` block for when the user clicks the key. \n* Inside the `onEvent` block:\n\t* Use `setPosition` to move the key to the bottom corner of the screen",
        "Ryan's clone of C4S15P10_markdown_instruction": "We've added one last function for you.\n<hr/>\n\n<h4>\nUse an `if` statement to program your game to call the `level_up` function only when `player_score` becomes greater than a certain number.<br/><br/>\n</h4>\n<i>For example: `player_score` > 6</i>\n\n\n<hr/>\n<i>Play the game, and make it past level 4 to move to the next puzzle.</i>",
        "SG U3L03 Three Steps_markdown_instruction": "# Do This:\n<img src=\"https://images.code.org/5f20ab5fd8b95754e8cfc948a4b41522-image-1441772307480.png\" align=right width=200>\nWe are going to continue to build up towards a diamond by **defining** a function that draws one side of the diamond.\nIf you look at the whole image we are trying to draw, you'll notice that each of the 4 sides is comprised of 3 calls to `drawStep()`, plus a few extra moves (shown in orange).\n\nRight now we'll write the code for one of those sides. So...\n\n**Define** a new function named `drawSide()` which makes three calls in a row to `drawStep()` followed by a `moveForward()` and a `right()`.  \n\n**Replace** the original function call to `drawStep()` with a call to your newly defined `drawSide()` function. \n\nThe diagrams below show the intended actions.\n<table>\n<tr>\n<td>![](https://images.code.org/480f6787e4d2daf34d67642e25b29de6-image-1441772552026.png) </td>\n<td>![](https://images.code.org/02f52d406854d6f86535adf2f593ccc9-image-1441772709549.gif) </td>\n</tr>\n</table>\n\nTo solve this puzzle, youâll use three subgoals. Youâll **Define the function** (`//Define function`), which will include **calling** 2 different functions (`//Call function`) and **moving the turtle** (`//Move turtle`). Then you'll **call the function** (`//Call function`) that you defined.",
        "SG U3L06 Challenge 1 triangle_markdown_instruction": "# Terminology: *Parameter*\n\nWhen you have a command like: `moveForward(100)` we say that the `moveForward()` command *accepts a **parameter***.  And 100 is the value *given* or *supplied* to `moveForward()`'s **parameter**.  Since this value can change, you will often see a written description for the command that looks something like **`moveForward(pixels)`** to indicate that the value supplied to `moveForward()`'s **parameter** should be the number of pixels you want it move.\n\nThe good old `moveForward()` command still exists.  In fact it's the **same command** as `moveForward(pixels)`. The \"parameter-less\" version of `moveForward()` simply supplies a **default value** to the parameter.  We might also say that the `moveForward()` command has an **optional parameter** since you could call either `moveForward()` or `moveForward(50)` and it doesn't cause an error when you run the program.\n\n\n# New Commands!\n\nCheck it out.  The turtle toolbox now contains the *parameterized* versions of the turtle commands including `turnLeft(angle)` and `turnRight(angle)`.  \n\n# Do This:\n\nUse the parameterized versions of the commands to draw a triangle with sides that are 100 pixels long. Don't forget that you can define and call functions to make the code more efficient.\n\nAt a minimum, you'll use `//Move turtle` and `//Orient turtle` to do this. You can also solve the problem by using `//Define function` and `//Call function`.\n\n<img src=\"https://images.code.org/0207568ff82b0571fa6757081330749d-image-1441901783815.png\" width=150>",
        "SG U3L06 Challenge 4 bullseye_markdown_instruction": "# Hexadecimal Colors\n\nIn reading the documentation, you may have noticed that `penColor()` can accept colors in the **hexadecimal format (e.g. \"#AC9100\")**. Colors on websites will often be represented in this format. It's useful to know how to interpret and use this format when trying  to duplicate colors in your own images.\n\n**Read the documentation:** Review the documentation for `penColor()` and pay particular attention to how to define colors in hexadecimal.\n\n# Do This:\n**Draw the bullseye: ** Draw the bullseye below using a combination of `penColor()` and `dot()`.\n\n***Hint:*** *The sample image was created using three of the following hexadecimal colors: #00ABDC, #CC4400, #1188CC, #006699, #11CC00. Can you recall how hexadecimal color works to select the correct colors on your first try?*\n\nFor each circle in the bullseye, you'll complete the same subgoal: `//Set pen properties`.\n\n<img src=\"https://images.code.org/d53ae656d6eeae3611449b65db669242-image-1441981098736.png\" style=\"height: 250px\">\n\n**Remember:** The hex colors must have quotes around them so penColor(â#FF0099â)  not penColor(#FF0099).",
        "SG U3L06 Challenge 5 overlapping circles_markdown_instruction": "# Transparency - Red, Green, Blue, Alpha\n\nThere is another command that lets you set the pen color called `penRGB(r,g,b,a)`.\n\n* The first 3 parameters represent values (in the range 0-255) for the red, green, and blue channels. \n* The 4th parameter `a` stands for \"alpha\".  The \"alpha channel\" for color lets you set the level of **opacity** as a decimal value between 0 and 1. It is interpreted as a percentage, so 0.5 equates to 50% opaque.  For example: `penRGB(113, 102, 160, 0.5)`.\n\nSo far, we've always moved the turtle with the pen tracing the path. In the original robotic turtle used 50 years ago, this meant that the pen was down so that it would draw on the paper. The turtle can also move with the pen up, or not tracing its path. The commands to switch between these two are `penUp()` and `penDown()`. The pen by default is set to down position, so to stop drawing with the pen use `penUp()`. When you want to start drawing again, use `penDown()`.\n\n# Do This:\n\n**Read the Documentation:** To figure out how to use `penRGB()` go read the documentation, paying special attention to the syntax used to give a command **multiple values**.\n\n<img src=\"https://images.code.org/3247af8d88da11a042d0bd9a76b49f12-image-1441982501960.png\" style=\"height: 250px; float: left; margin: 10px\">\n\n**Draw the circles: ** \n\nUse `penRGB()`,`penUp()` and `dot()` to draw two overlapping circles as shown in the image.\n\nAll of these new blocks give you new ways to achieve the subgoal `//Set pen properties`. You use this subgoal multiple times to complete this problem as well as the `//Move turtle` subgoal.",
        "SG U3L06 Challenge 6 squiggles_markdown_instruction": "# Multiple Parameters - Making Arcs\n\nMany commands need more than one parameter to make sense. When a command needs more than one parameter, the parameters are separated by commas. **The order of the parameters matters**.\n\nTwo new commands have been added to the block palette, `arcLeft()` and `arcRight()` which both accept two parameters. These two blocks are another way to accomplish the `//Move turtle` subgoal.\n\nRead the documentation for `arcLeft()` and `arcRight()`. Notice that in the documentation you can see what the order of parameters is: first angle, then radius.\n\n\n# Do This:\n<img src=\"https://images.code.org/320a5e54abb95b267738d5e15946b51c-image-1441985535028.png\" style=\"height: 250px; float: left; margin: 10px\">\n\n**Draw a squiggly line: ** \n\nUsing `arcLeft` and `arcRight` along with the functions you have already learned to draw a **purple squiggle on a blue background**. Feel free to use any of the methods for choosing colors.\n\n\n\nHints:\n* To make the figure exactly, you need to `//Orient turtle` before calling `arcLeft()` or `arcRight()` by turning the turtle first.\n* The parameters to `arcLeft()` and `arcRight()` are the same.\n* The colors are \"PowderBlue\" and \"Purple\" - though you can use other colors if you like.\n\nThe subgoals for this problem are already in the workspace to help you get started. The first `//Set pen properties` is for drawing the background. Then you will draw the squiggle. Notice that you'll achieve `//Move turtle` using the new arc blocks. As we learn more features of App Lab, you'll have more options for how to complete subgoals. ",
        "SG U3L06 Challenge 7 smiley face_markdown_instruction": "# Moving Relative to the Screen\n\nThe turtle commands we've seen so far move the turtle **relative to the turtle's location and direction**. If you want to get the turtle to a specific position on the screen using only `moveForward()` or `turnLeft()`, you need to know the turtle's location beforehand.\n\nTwo new commands in the toolbox help resolve this issue. `moveTo()` moves the turtle to a location on the screen based on its X and Y coordinates. `turnTo()` turns the turtle in a specific direction. Together these commands can make many drawings easier to complete.\n\nJust like `moveForward()`, `moveTo()` achieves the subgoal `//Move turtle`. And just like `turnLeft()`, `turnTo()` achieves the subgoal `//Orient turtle`.\n\n# Do This:\n\n**Read the documentation: ** Read the documentation for `moveTo()` and `turnTo()`. Pay specific attention to how the coordinate system is arranged in App Lab as it is different from what you might have seen in a math class.\n\n**Draw the smiley: ** Use these new commands to help you draw the smiley face pictured below.\n\n**HINT: ** Don't forget to use `penUp()` and `penDown()`.\n\nMake sure that you plan your program with subgoals before you start filling in the blocks. Especially because you'll have to do some trial and error with the parameters, planning with subgoals will help keep you organized.\n\n![](https://images.code.org/20cab2a0b3a4fdfd53d7a1876963fa10-image-1441990625064.png)",
        "SG U3L07 - allSeaGrass_markdown_instruction": "# Add Seagrass\n<img src=\"https://images.code.org/a67f893ea9187b253ec4f6abcb16b7cf-image-1443048301130.30.42 PM.png\" style=\"width: 200px; float: right\">\nOur new version of `drawSeagrass` now draws a single piece of seagrass with a random height.  Now let's use a loop in `drawAllSeagrass` to fill the sea floor with it.\n\n# Do This:\n\n* **Add a `for` loop** to `drawAllSeagrass` that draws about **50 pieces** of seagrass using your updated `drawSeagrass` function.",
        "SG U3L07 - bubbles_markdown_instruction": "# Add Bubbles\n<img src=\"https://images.code.org/ffeec83d7bb838f87f46ec1638710440-image-1443019519379.44.49 AM.png\" style=\"width: 200px; float: right\">\nThe first high-level function you will write is `drawAllBubbles`. You may have noticed that the bubbles in the image look very similar to the dots example we've already drawn in this lesson. Now we'll use that skill to add to our image.\n\n# Do This:\n\n* **Read** the `drawBubble` function to know how it works and what **parameters** it accepts.\n\n* **Modify the code** of `drawAllBubbles`:\n  * **Add a loop** inside the function.\n  * **Move the commands that were already inside the function *inside the loop* instead** -- In other words \"wrap a loop around the existing lines of code that are inside the function. This way your code will move the turtle randomly and call `drawBubble` many times.\n  * **Set the number of iterations** in your loop so that the screen is filled with bubbles. Try starting with 200 and then adjust to whatever number you like.",
        "SG U3L07 - introSquare_markdown_instruction": "# Getting Started with Loops\n\nA **loop** is a block of code that is repeated or \"looped through\" in a program. You will be creating a loop using the `for` loop block.\n\nWe'll start by experimenting with a program similar to what you saw in the video.\n\n# Do This:\n* **Drag** out a `for` loop block. This serves the subgoal `//Write a loop`. Much like the subgoal `//Define function`, you will then fill in the loop, which might involve achieving more subgoals, like `//Move turtle` and `//Orient turtle`.\n\n* **Inside the loop:**\n\t* **Add** a call to `moveForward()`.\n    * **Add** a call `turnLeft()`. (HINT: try turning by 137 degrees to start. You can change after that.)\n    \n![](https://images.code.org/4da4a0c8a10a3c9637df96507fece183-image-1443038466204.gif)\n\n* **Run** the program to see the loop in action.\n* **Experiment:**\n  * **Change** the number of times the loop runs.\n  * **Increase** the run speed to see how fast loops can execute.\n  * **How many times** can the loop run before you can no longer tell the difference in the image?\n \n**Move on** once you feel like you have a decent grasp of using a `for` loop: setting the number of times to repeat, running the program, and setting the run speed.\n",
        "SG U3L07 - loopsWithRandom_markdown_instruction": "# Using Multiple Loops\n\nSome repeated tasks can't easily be solved with a single loop. Instead, you'll need to use **one loop after another**, each one solving a part of the problem. \n\n# Do This:\n\nAdd a loop to fill the screen with semi-transparent white dots until the original dots are \"erased\".\n\n<img src=\"https://images.code.org/329912b3c61cc62acbd36035ff4b823a-image-1443109101866.gif\" style=\"float: right; width: 100px\">\n* **Drag ** a second loop into your code that will run after the first loop.\n* **Add** commands to draw dots in random locations that are white with opacity set to 0.5.\n* **Increase the iterations** so that the colored dots are totally erased. How many does it take?\n\nHINT: you can copy/paste the original loop and just change the color of the dots and number of iterations.",
        "SG U3L07 - seaGrass_markdown_instruction": "# Controlling Loops with Parameters\n<img src=\"https://images.code.org/37d6dbcab707f67485ab3b0cc2a1cae9-image-1443114033511.png\" style=\"width: 200px; float: right\">\nThis time you will modify one of the lower-level functions - `drawSeagrass`. Notice that the current version of `drawSeagrass` actually uses a loop. We want to modify this function so that we control the number of times it loops with **a parameter**.\n\n# Do This:\n\n* **Look at** the `drawSeagrass` function to see how it currently works.\n\n* **Add a parameter ** that will be used to indicate how many waves the seagrass makes.\n\n<img src=\"https://images.code.org/1f2f0c5e1fc17e541760c4f0fd24b13b-image-1447887194713.7.10 drawSeagrass add param.gif\" style=\"width:350px;padding-left:22px;\">\n\n* **Modify the `'for` loop** so that it uses that **parameter** as the number of times to repeat.\n\n ![](https://images.code.org/23e8e43ec4853c0bdbbbd50b9651300a-image-1443113032135.gif)\n \n* Finally, **modify `drawAllSeagrass`** to call this new two-param version of `drawSeagrass` supplying a reasonable random value for the second parameter as well.\n\n<img src=\"https://images.code.org/4f15021cd9cebb62562665d3ddc82c51-image-1447885963677.PNG\" style=\"width:400px;padding-left:22px;\">",
        "SG U3L07 - sunBeams_markdown_instruction": "# Add Sunbeams\n<img src=\"https://images.code.org/9e08dae8486f66422d492b8d8a6777eb-image-1443048962131.55.54 PM.png\" style=\"width: 200px; float: right\">\nFinally, we'll add some visual flourish by writing `drawAllSunbeams`. Note: The `turnTo` command makes the turtle face a random direction prior to drawing each sun beam.  \n\n# Do This:\n\n* **Read** the `drawSunbeam` function to know how it works and what **parameters** it accepts.\n\n* **Add a loop** to `drawAllSunbeams` to draw about 100 sunbeams. Inside your loop:\n \n* **Place the commands already inside the function in your loop.** This way your code will move the turtle to a random x location at the top of the image (y is 0), `turnTo` a random angle between **165 and 175 degrees**, and call `drawSunbeam`.",
        "SG U3L07 - topDownDesign_markdown_instruction": "# Top-Down Design\n<img src=\"https://images.code.org/b4379f51db96b8b1c921de2579e16357-image-1443011791766.21.53 AM.png\" style=\"width: 150px; float: right\">\nLook at this complex version of the \"Under the Sea\" scene you drew in the previous lesson. **You now have all the skills you need to recreate this digital scene.**\n\nWe will use **Top-Down Design** to help manage the complexity of drawing this image. The starter code you will be provided already has broken the problem into multiple levels.\n\n# Overview of Program Structure\nYou are about to see that we've provided you with a good amount of starting code.  Here's a brief tour:\n\n**High-Level Function Calls:** These read almost like a story of how you will draw the image. There's one function for every major component of the scene.\n\n<img src=\"https://images.code.org/c07a9b544ab982a91c7cd99339cbe3c9-image-1447885047812.PNG\" style=\"width:200px;\">\n\n**High-Level Function Definitions:** These currently draw **a single copy of each component**. You will add code to these functions to draw many copies of each component in a variety of sizes and colors.\n\n![](https://images.code.org/1782d088206fede56df1e93482d35faa-image-1443019051470.37.20 AM.png)\n\n**Low-Level Functions:** These draw single elements of the scene. Most have been written for you already, but we've left a few for you to complete as well.\n\n![](https://images.code.org/bb081efc86641155eae5f4d363e3ccf4-image-1443019108814.38.22 AM.png)\n\n\n# Do This:\n\n* Review the structure of the code in this level.\n* Run the code to familiarize yourself with what it currently draws.\n* When you are ready to do so, move on!",
        "SG U3L08 - createTwoParamTriangle_markdown_instruction": "# Defining Functions with Multiple Parameters\n\nNow it's your turn to define a function that accepts multiple parameters. Just like in the previous example make sure you **separate your parameters with commas** and give them **descriptive and meaningful** names.\n\n# Do This:\n* **Drag out ** the function block, and **name** your function `drawTriangle()`. \n* **Define `drawTriangle()` to have two parameters ** within the parentheses making sure to give them **descriptive and meaningful** names separated by commas, such as `(size,width)`. \n    * This animation shows you how (without subgoals in the code) ![expandable](https://images.code.org/b1f5eead2ccb60e5ae607feff590bd3c-image-1442850344677.gif)\n    \n* Then **write ** the code inside `drawTriangle(size, width)` that will make it work as described.\n* If you get stuck, come up with a top-down plan and the subgoals you need for creating a function that draws a triangle.\n* Test it out!  **Run ** the code and experiment to create an image similar to the one below.\n\nRemember that to achieve the subgoal `//Define function`, you need to give it a name, identify the parameters, and fill it in with blocks.\n\n![](https://images.code.org/a389c07c259c8877989b6920328a4c78-image-1442529590755.39.38 PM.png)",
        "SG U3L08 - drawSquareWithParam_markdown_instruction": "# Defining and Using a Function with a Parameter\nFrom the video, you learned that defining multiple functions to draw different sized squares results in lots of repetitive functions - they are essentially the same, with a few numbers changed - and this is not desirable.\nAny time you find yourself effectively copy and pasting large sections of code, it's usually a sign that there is a better way.\n\n# Do This:\nUh oh! Something's wrong! We've set up a program that runs, but doesn't do what it's supposed to do. The program is supposed to make a drawing with two squares that looks like this:\n\n<img src=\"https://images.code.org/3eae30651dabc2f83a8bbbbbf8bea7ad-image-1442420537113.26.34 AM.png\" style=\"width: 150px;\"> \n\nWe've given you the `drawSquare(size)`function that was created in the video, but it's not quite right. **Fix the code inside the `drawSquare()` function so that the program creates the drawing correctly.**\n\n**HINT:** You should only need to change one thing about an existing line of code. You don't need to add or remove any lines of code. Remember: The parameter `size` acts like a placeholder for a value that gets plugged into each call to `moveForward()`.",
        "SG U3L08 - introUnderTheSea - recovery_markdown_instruction": "# Under the Sea!\n\nIn the next several challenges you will be working to improve **one program** that draws an underwater scene.  Each time you  finish a puzzle and move on to the next one, your code will be pulled forward and you'll get new instructions telling you what to add.\n\n# Do This:\n\n* **Read through ** the program provided to get a basic understanding of what it does.\n* **Add function calls ** to the top of the program so that **two fish, two starfish, and two pieces of seagrass** appear somewhere in the scene.You don't need to provide values for the parameters at this stage.\n* **Hint:** you need to call `moveTo` before drawing a second fish, starfish or seagrass, otherwise you won't see the second one because it will draw exactly over the first one -- those functions draw based on where the turtle is just before the call.\n* Test out your code. If something doesn't work like you expect, consider whether you can add anything to the functions' definitions to make them better.\n* **Continue ** to the next level, **where your code will be waiting for you.**\n\n![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35 PM.png)",
        "SG U3L08 - introUnderTheSea_markdown_instruction": "# Under the Sea!\n\nIn the next several challenges you will be working to improve **one program** that draws an underwater scene.  Each time you  finish a puzzle and move on to the next one, your code will be pulled forward and you'll get new instructions telling you what to add.\n\n# Do This:\n\n* **Read through ** the program provided to get a basic understanding of what it does.\n* **Add function calls ** to the top of the program so that **two fish, two starfish, and two pieces of seagrass** appear somewhere in the scene.You don't need to provide values for the parameters at this stage.\n* **Hint:** you need to call `moveTo` before drawing a second fish, starfish or seagrass, otherwise you won't see the second one because it will draw exactly over the first one -- those functions draw based on where the turtle is just before the call.\n* Test out your code. If something doesn't work like you expect, consider whether you can add anything to the functions' definitions to make them better.\n* **Continue ** to the next level, **where your code will be waiting for you.**\n\n![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35 PM.png)",
        "SG U3L2 Using Simple Commands part 1_markdown_instruction": "# Welcome to App Lab - Let's get started\n<img src=\"htt\nps://images.code.org/f93dfb56ab00f689dcd5867eb4398fa8-image-1508424086651.png\" align=right>\n\nWe're going to start learning how to program with turtle commands. Given only 2 turtle commands, write code to complete the drawings in each of the following challenges. \n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" align=right>\n# Do This: \nAdd code to draw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the `Finish` button - it will appear after you run the program once.\n",
        "Task: Develop a Battleship Protocol_markdown_instruction": "# Task: Create a Battleship Protocol\n\nOne of the best ways to prepare to teach a lesson is by actually doing the activity yourself.  As you complete the activity, consider the misconceptions that your students may have and what sorts of questions you can ask to help them overcome these barriers.  \n<br>\nWhile completing this activity, note: \n<ol>\n<li>There are many 'correct' answers as long as the rules are used consistently. </li>\n<li> Challenge yourself to develop an *efficient* protocol.  In this case, this means you should consider the fewest number of bits necessary to encode the whole message. </li>\n<li> If you have already looked at the exemplar protocol in this lesson, try to create your own unique protocol.  This will help you empathize with students as you think about the design process necessary to develop the protocol.</li></ol>\n<br>\n\n><a href=âhttps://docs.google.com/document/d/1hq1UNK1Q4K0LHqmu0_yeO0a0NQKHzC8W--Q0QaISHVI/editâ target=_blank> Click here for the Battleship Protocols Activity Guide >> </a>\n<br>\n><a href= \"https://code.org/curriculum/docs/csp/U2L03-battleship-exemplar.png\" target=_blank > Click here for an exemplar solution >> </a>\n\n<br><br>\n\nUse the space below to share your protocol.",
        "Task: Encode an Experience_markdown_instruction": "# Task: Encode an Experience\n\n## Do the Activity\nOne of the best ways to prepare to help students with the challenges of this Practice PT is by actually encoding an experience yourself.  As you complete the activity, consider the misconceptions that your students may have and what sorts of questions you can ask to help them overcome these barriers. In order to do this activity, you'll want to access the encode an experience activity guide and project template, both linked below. \n\n\n- First, you'll want to read through the <a href =âhttps://curriculum.code.org/csp/unit2/6/â target=_blank> lesson plan <i class=\"fa fa-external-link-square\"/></a> and the <a href=âhttps://docs.google.com/document/d/1kmIJlEyS4V6kU47vzyZMlENsdgLJoV-ZLyYQ2RIjuN8/editâ target=_blank> project activity guide <i class=\"fa fa-external-link-square\"/></a>\n- Then, encode a real life experience or event in binary! Follow the <a href = âhttps://docs.google.com/document/d/1Qao_Qq5Z4Ta1ns_K3T7wip53MLQvJOouwFHIP2zmKsE/editâ target=_blank> project tempalte <i class=\"fa fa-external-link-square\"/></a> to step through encoding an experience of your own. \n\n\n<hr>\n### <a href= \"http://forum.code.org/c/csp2/lesson06\" target=_blank> Head to the Forum >></a>\n<hr>\n\n\n## Share Your Encoding and Ideas\nHead to the forum and share your ideas about this activity. Specifically, share: \n\n\n- Your encoded experience (feel free to upload and share your completed template).\n- Misconceptions that your students may have and what sorts of questions you can ask to help them overcome these barriers.\n\n\n##  Submit the Link for your Forum Post\nOnce youâve posted in the forum, share a link here. In order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\n\n\n",
        "Task: Explore Google Trends_markdown_instruction": "# Task: Explore Google Trends\n\n\nOne of the best ways to prepare to help students with this chunk of lessons is to start understanding ways to see trends in data. Here weâll give some examples of related topics to search in google trends. In order to do this activity youâll first want to review the how to guide for google trends (the last resource in this module). \n\n\n- Once youâve read the how to guide, head to <a href = \"https://www.google.com/trends/\" target=_blank> Google Trends <i class=\"fa fa-external-link-square\"/></a>\n- Play around with different queries that might reveal interesting relationships in what people are searching for on Google. For example: \n  -  s7 note and  samsung stock\n  - early voting and voter registration\n  - earthquake and  italy\n- Explore differences over time and by location \n  - Look at different time periods (1 week, 30 days, 90 days, 1 year)\n  - Look at different locations (different countries, states, cities)\n\n\n<hr>\n### <a href= \"http://forum.code.org/c/csp2/lesson08\" target=_blank> Head to the Forum >></a>\n<hr>\n\n## Share Your Findings\nHead to the forum and share your findings. Specifically, share: \n\n\n- The topics you explored in Google Trends\n- Surprising or interesting relationships or trends \n- Misconceptions that your students may have and what sorts of questions you can ask to help them overcome these barriers.\n\n\n##  Submit the Link for your Forum Post\nOnce youâve posted in the forum, share a link here. In order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\n",
        "Task: Make your own Favicon_markdown_instruction": "# Task: Make your own Favicon\n\n## Do the Activity\n\nOne of the best ways to prepare to teach a lesson is by actually doing the activity yourself.  As you complete the activity, consider the misconceptions that your students may have and what sorts of questions you can ask to help them overcome these barriers. In order to do this activity, you'll want to access the color pixelation widget (which is a bubble in this module) as well as the favicon project description (linked below). \n\n\n- First, you'll want to play around with the color pixelation widget and get a sense of how it works.\n- Then, work to make your own favicon! Follow the instructions which are available in <a href = âstudio.code.org/s/csp2/stage/4/puzzle/8â target=_blank>unit 2 lesson 4  <i class=\"fa fa-external-link-square\"/></a> \n\n\n<hr>\n### <a href= \"http://forum.code.org/c/csp2/lesson04\" target=_blank> Head to the Forum >></a>\n<hr>\n\n\n## Share Your Favicon and Ideas\nHead to the forum and share your ideas about this activity. Specifically, share: \n\n- A screenshot of your Favicon.\n- Misconceptions that your students may have and what sorts of questions you can ask to help them overcome these barriers.\n\n\n##  Submit the Link for your Forum Post\n\nOnce youâve posted in the forum, share a link here. In order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\n\n\n\n\n\n\n",
        "Task: Write your own Heuristic_markdown_instruction": "# Task: Write your own Heuristic\n\n## Do the Activity\n\nOne of the best ways to prepare to teach a lesson is by actually doing the activity yourself.  As you complete the activity, consider the misconceptions that your students may have and what sorts of questions you can ask to help them overcome these barriers. In order to do this activity, you'll want to access the text compression widget (which is a bubble in this module) as well as the heuristic worksheet (linked below). \n\n- First, you'll want to play around with the text compression widget and get a sense of the types of patterns that you can pull out. \n- Then, work to develop your own heuristic! Feel free to follow <a href=âhttps://docs.google.com/document/d/1U1SPSyBYS9tnJmpnQd-xbWnhb6TpwdJ6i82H662hxdM/editâ target=_blank>this activity guide, from lesson 2.</a>\n\n<hr>\n### <a href= \"http://forum.code.org/c/csp2/lesson02\" target=_blank> Head to the Forum >></a>\n<hr>\n\n\n## Share Your Heuristic and Ideas\nHead to the forum and share your ideas about this activity. Specifically, share: \n\n- The heuristic you developed.\n- Misconceptions that your students may have and what sorts of questions you can ask to help them overcome these barriers.\n\n##  Submit the Link for your Forum Post\n\nOnce youâve posted in the forum, share a link here. In order to get a direct link to your post, click the link icon directly under your post (shown in the picture below):\n\n![](https://images.code.org/40fd4bb1aa4f50cfb0d66bbf7881cd0d-image-1443847364702.png)\n\n\n\n",
        "U2L04 - NetSim Routers with Addresses_markdown_instruction": "# An Updated Internet Simulator\nMany changes have been made to the Internet Simulator. \n\n**Routers:** Rather than being connected to your entire class you are now connected to a single router. You can see who else is on your router in the network diagram.\n\n![](https://images.code.org/0311148470dc358fe435568e2b333062-image-1442008896037.51.04 PM.png)\n\n\n**IP Addresses:** Every user has a unique IP address. The first portion is the number of your router and the second is your own unique number. You can figure out the IP addresses of people on the router by looking at the network diagram.\n\n![](https://images.code.org/b03d841ebd8299ca43197ee4df35d273-image-1442008949041.51.59 PM.png)\n\n**Sending Messages: ** You can now send messages to a single other user. Fill in the \"To\" portion of the message with the IP address (including the period) of the person you'd like to send your message to.\n\n![](https://images.code.org/8e9b073526f24e69147d5c7f34492bec-image-1442009069243.52.34 PM.png)\n\n**Router Statistics: ** You can see useful information about the functioning of your router in the \"Router\" tab.\n\n![](https://images.code.org/7390cfa12f65b933145a391fa65ab4b1-image-1442009194697.58.23 PM.png)\n\n**Router Logs: ** You can read a log of traffic both at the level of your router and the entire network by clicking the \"Log Browser\" button.\n\n![](https://images.code.org/b24975e33f1a2b10fc6a2ca8cf1c9ad2-image-1442009358166.58.48 PM.png)",
        "U3 - Arrays - favThings Counting Variable_markdown_instruction": "# Current Index\n\nThis app also allows a user to scroll through individual items in the array. In order to keep track of which index we are currently viewing, our application will need **a global variable that stores the current index**. In coming exercises we'll want our global index to change, so let's **make sure that your code references your global index** rather than fixed values.\n\n# Do This:\n\n<img src=\"https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43 AM.png\" style=\"width: 250px; float: right\">\n\n* Create a **global variable** that will be used to keep track of the current index in the array. Set this variable to 0.\n* Update `setText` which displays the words to show your first favorite thing using **the global index variable** instead of a hard-coded number. \n* Update `setText` which displays the current item number to use **the global index variable** instead of a hard-coded number.\n\t* **Hint:** since arrays are zero-indexed **you will have to add one to your index** to generate the correct value to display.\n* **Note:** neither of these outputs will be able to change yet. Don't worry, we'll be taking care of that in coming exercises!",
        "U3 - Arrays - favThings Next_markdown_instruction": "# Next Button\n\nNice work! Your application should now have some simple output displaying one of your favorite things and indicating which item of your list you are showing. To make things more interesting, however, **we want to be able to change which item we display**.\n\nTo change the item displayed, the user will use the \"Next\" and \"Last\" buttons. These should **increase or decrease the global index by one and then you should update the information displayed on the screen**. To start out with, however, we'll just be writing code for our Next Button. \n\n# Do This:\n\n* **Add an event handler** to the \"Next\" button.\n* Write code in this event handler that **increments your global index variable** and then **updates the output on the screen**.\n\t* **Note:** If your code from the last exercise was written to reference this variable then you should just be able to reuse it once you've incremented your variable. We'll talk more about this in the next exercise.\n* Run your program to **confirm that the user can move forward through the list and that the output displayed is correct**.\n\t* **Note:** You may notice that your program throws an error if the global index variable goes out of bounds. Don't worry about this for now - we'll fix it in a later exercise.",
        "U3 - Arrays - favThings Prev_markdown_instruction": "# Last Button\n\nOur user can now move forward through our list of favorite things, and we're about to write code that allows them to move backwards as well. If you've written your code to reference your global index then this should only require you to decrease its value by one and reuse code that updates the screen output. Before we write the code for backwards let's work on cleaning up our code.\n\n**Removing Repeated Code:** Once you add the code for moving backwards through your array, your program will have three places where it updates the screen by setting the text of your screen elements. Rather than repeating this code we should **create a function** that updates the screen and then call it every time we need to refresh those elements. This will not only make our program easier to read and avoids the errors that can arise from redundant code, but it also makes it easier to make changes to how our program runs, since all the code that updates the screen is in a single place.\n\n# Do This:\n\n* **Write a function** that contains the `setText` commands you have used to update the screen.\n* **Replace** the places in your code where you used to have these commands with **calls to your new function**.\n* **Add an event handler** to the \"Last\" button that decreases the **global index variable** by one and then updates the screen by calling your new function.\n* Run your program to confirm that the user **can move forward AND backward** through the list and that the output displayed is correct.\n  * **Note:** You may notice that your program throws an error if the global index variable goes out of bounds. Don't worry about this for now - we'll fix it in a later exercise.",
        "U3 - Arrays - favThings addItem_markdown_instruction": "# Adding New Items\n\nNow we want our user to be able to add items of their own to the list. As you might have guessed, this is as easy as inserting an item into our array at the current index.\n\n# Do This:\n\n* **Add an event handler** to the \"Add\" button.\n* **Write code** in your event handler that:\n\t* Uses `getText` to access the user's new item.\n    * Uses`insertItem` to add that item to your array at the current index.\n    * Calls your update function to update the screen (the new item should be displayed).\n* Run your program to confirm that the user **can add items to the list** and that the output displayed is correct.",
        "U3 - Arrays - favThings firstOutput_markdown_instruction": "# Displaying Information to the User\n\nBefore we make our application interactive, we'll want to practice creating some simple user output. When the app starts up, the first item in your list should be displayed. Let's write the code that will display this information to the screen. \n\n# Do This:\n\n<img src=\"https://images.code.org/d93b2abfec64ce67e8ccfecee14bae3d-image-1447346228581.36.43 AM.png\" style=\"width: 250px; float:right\">\n\n* Using `setText` set the main text area to show your first favorite thing.\n* Using `setText` and `list.length` set the text indicating what item of the list the user is currently viewing.\n\t* **Hint:** since arrays are zero-indexed **you will have to add one to your index** to generate the correct value to display.\n* **Note:** neither of these outputs will be able to change yet. Don't worry, we'll be taking care of that in coming exercises!\n\n",
        "U3 - Canvas - 200dots_markdown_instruction": "# Loops on the Canvas\n\nTo make things interesting, we're going to quickly add 200 dots to our canvas by using a `for` loop. **Locations on the canvas are relative to the top-left corner of the canvas, not the screen**. Therefore you will need to know the dimensions of your canvas in order to randomly place dots throughout it. You can find this information in Design Mode:\n\n![](https://images.code.org/8e0c868a21f5c674efb6adef1040ec2b-image-1448040822360.33.29 AM.png)\n\n# Do This:\n\n<img src=\"https://images.code.org/345b625e6954dc1ea2310c97aa08c59f-image-1448243004939.gif\" style=\"float: right\">\n* Add a **`for` loop that runs 200 times.**\n* Place the **`circle` command inside the loop** and **decrease the radius** (try 20).\n* **Use `randomNumber` to randomize the `x` and `y` values used to place your dots**. The ranges you select should be the width and height of your canvas.  \n* **COMMON MISTAKE ALERT:** If you test your code before setting the `x` and `y` values of the circle to random numbers, it will look like there's only one dot.  But really you will have just drawn 200 dots all at the same (x,&nbsp;y) position.\n\n",
        "U3 - Canvas - One Dot sprayPaint_markdown_instruction": "# Making Spray Paint\n\nThe next effect we would like to create is a \"spray paint\" effect. Instead of drawing a single dot for every location stored in `eventList`, we'll draw many small dots randomly placed around each location.\n\nWe are going to start off just practicing **drawing a circle whose x and y locations use `offsetX` and `offsetY` with a small random value added**. This makes the line of code to draw the circle kind of long, but hopefully it's easy to understand if you read it carefully.\n\n![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\n\n# Do This:\n\n* **Set the style of another button** in Design Mode, give a label like \"Spray Paint,\" give it a descriptive ID, and attach a click event handler to it.\n* **Copy the code from the \"Original\"** button into the event handler for spray paint.\n* Change the code for `circle` so that it will **draw a dot whose x and y locations use `offsetX` and `offsetY` with a small random value added. **\n\n![](https://images.code.org/c0c0a9df4215be16953a26ec102b2f9c-image-1448294147046.png)\n\n* **Run your app** to make sure it is drawing small dots close to the original position. Look at the example below.\n\n![](https://images.code.org/d6279085a5c6689dd5c745a0d0e28136-image-1448386996780.gif)",
        "U3 - Canvas - changeToMouseMove_markdown_instruction": "# Drawing on *mousemove*\n\nCurrently the user can click to add dots, but we want **to place dots wherever the user moves the mouse on the canvas**.\n\nTo place dots whenever the mouse is moved, we'll be **changing the event type from `click` to `mousemove`**.\n\n# Do This:\n<img src=\"https://images.code.org/960ac863ac908506724eeb9f11165672-image-1448246938599.gif\" style=\"float: right\">\n* Change the event type in your event handler **from `click` to `mousemove`**.\n* **Run your program** to confirm that dots are being drawn anywhere the user moves the mouse.\n\n**Your user is now able to draw anywhere they want on the screen!**",
        "U3 - Canvas - introCanvas_markdown_instruction": "# Introducing Canvas\n\nToday we are going to be building a drawing app around **a new UI element called the canvas**.![](https://images.code.org/26713ddcc9477e64c347c228d68cac0a-image-1447994134674.35.25 PM.png)\n\n![](https://images.code.org/044ad7db1cb4101f54302bd4013d1cc2-image-1448241882228.gif)\n\n**A canvas is simply a transparent rectangle on which you can draw basic shapes** like lines, circles, and rectangles. In fact, at first you might feel like we're going to end this unit in the way we started it, making turtle drawings. Don't worry, we'll quickly move into new and exciting things we can do with this new UI element.\n\n# Do This:\n<img src=\"https://images.code.org/3874f5e430a6290544466b2037490ae4-image-1448242142421.28.33 PM.png\" style=\"float: right\">\n* **Starter code** is provided which places buttons on the bottom of your screen. **Ignore these for now; we'll be using them later**.\n* **In Design Mode, drag a canvas element into the empty space at the top of your app**, resize it, and give it a descriptive ID.\n* **Call `setActiveCanvas` with the ID you assigned to your canvas**, which makes it responsive to canvas commands.\n* **Add a giant circle to the canvas.** Use the `circle` command. Make its radius large enough that it goes off the edge of your canvas.\n\nYour code will look something like this:\n\n![](https://images.code.org/f0cc22a1de686db72ebce90c720ae6e4-image-1447994225253.36.59 PM.png)",
        "U3 - Canvas - movementFunction_markdown_instruction": "# Adjusting Circle Size\n\nAmong the other pieces of information contained in each `event` parameter are the values `movementX` and `movementY`. These numbers tell us how far (in pixels) the mouse moved since the last mouse event was triggered, and can be used to measure the speed of the mouse. ** If the movement is large, the mouse is moving fast; if the movement is small, the mouse is moving slowly.**\n\nLet's use the mouse movement speed to make a cool effect. When we draw with a real pen or brush, the line usually gets thin when making quick strokes and is wider and darker when making slower ones. We can generate this effect by **using `movementX` and `movementY` to calculate the radius for the circle.**  Since this calculation might be a little tricky, a smart thing to do would be to **write a function** that takes `movementX` and `movementY` as parameters and **returns** a value that should be used as the radius.\n\n<img src=\"https://images.code.org/b9dc4c20d44af7b4e7725b71cd35fa2b-image-1448313734191.21.43 PM.png\" style=\"width: 350px; float: right; border: solid 1px black\">\n\nThere are several ways to do this. One possible way to write the function is provided on the right, which uses some arithmetic tricks. The function to the right is actually only three lines of code but is heavily commented to explain what it's doing. It makes use of a function called **`Math.abs` which returns the absolute value of a number.** Feel free to use this or another method of converting `movementX` and `movementY` into a radius.\n\n<details> <summary><strong>What is Absolute Value?</strong> [click to expand]</summary>\n`Math.abs` takes a number as input and returns the positive version of this number. \n\nIn math, absolute value is often written with this | | symbol. So |10| is the absolute value of ten and |-10| is the absolute value of negative ten. Both evaluate to 10.\n\nIn Javascript we use `Math.abs` instead of | |.  `Math.abs(-10)` and `Math.abs(10)` both evaluate to <strong>10</strong>.\n</details> <br>\n\n# Do This:\n\n* **Write a function like the one above** that accepts two parameters (one each for `movementX` and `movementY`) and returns a radius. A higher speed should lead to a smaller radius.\n* **Inside your `mousemove` event handler,** set the radius of the circle to the value returned by your function, where the function takes `event.movementX` and `event.movementY` as input.  For example, if using the function above, your code would be: <br>![](https://images.code.org/94a379336084954ba2ab27e80b17dee3-image-1448314255797.30.22 PM.png)\n* Run your program and confirm that **when you draw, the speed of the mouse affects the radius of the dots**. The effect should look something like what's below \n\n![](https://images.code.org/ee83d18f04e4d9d486428273b7321f9f-image-1448394071473.gif)",
        "U3 - Canvas - redrawOriginal_markdown_instruction": "# Redraw Original\n\nIf you were able to get that working and understand what you did, congratulations! That was some serious programming! If not, take a moment to go back and talk through the different components with a classmate. Most of the work we'll be doing for the rest of this lesson uses similar patterns, and you'll want to be comfortable with them as we add more complexity to our app.\n\nThe first thing we are going to do is **create an \"Original\" button that will redraw the image with the same circle radius you used before**. The process will be nearly identical to how you added the \"Random\" button.\n\nIn fact, the code to redraw the original is *exactly* the same, except instead of making the radius of the circle be random, it will just be the fixed value you used originally (probably radius 5 or so).\n\n![](https://images.code.org/9238e313e8f635e2e6b31ad19d0fdc41-image-1448290929994.gif)\n\n# Do This:\n\n<img src=\"https://images.code.org/6cf1d46af7cd92cc1faf1501366e2e1a-image-1448312993714.gif\" style=\"width: 200px; float: right\">\n(**NOTE:** The instructions below are shown in the code animation above.)\n\n* Style a button, give it label like \"Original,\" give it a meaningful ID, and add a \"click\" event handler.\n* Inside the event handler for your \"Original\" button...\n\t* Copy the code from the \"Random\" button event handler.\n    * Paste it inside the event handler for the \"Original\" button.\n\t* Set the `radius` parameter to **whatever value you used when you originally drew dots**.\n* Test your program by drawing a figure and then hitting your \"Randomize\" button. Then hit the \"Original\" button. Your original drawing should appear.",
        "U3 - Canvas - sketch_markdown_instruction": "# Relative Indexes\n\nWhen looping over an array, we use a counter variable (typically `i`) to keep track of which index we're at. We can then access the contents at each index with the syntax `list[i]`.\n\nIf we want, however, we could access the contents of the next element as well, since its index is just one greater. For example, if we are currently focused on the element at index `i`, then `list[i+1]` gives us access to the next element in the array. In other words, you can **reference indexes relative to your counter variable**.\n\n![](https://images.code.org/3bb5dfce60951040172bfe08d98a8750-image-1448393281688.png)\n\nWe are going to use relative indexing to create our final effect, which will look sort of like an etching of the image. The idea is simple:  **for every (x,&nbsp;y) location in the event list, draw a straight line between that location and the location stored 10 spots further down the array.** You will use the **`line` command** to draw a line connecting these points.\n\n# Do This:\n\n* **Read the documentation for `line`**.\n* **Set the style of the final button** in Design Mode, give a label like \"Etch,\" give it a descriptive ID, and attach a click event handler to it.\n* **Call `clearCanvas`** to clear the screen.\n* Create a `for` loop that counts from **0 to `eventList.length - 10`**. \n\t* Why do you think we're not counting over the entire array?\n* Use `line` to draw a line between the (x,&nbsp;y) locations of `eventList[i]` and `eventList[i+10]`.  The full line of code will be another big one: ![](https://images.code.org/5de2c40b56042069379ff20ce5d10cab-image-1448393948598.38.49 PM.png)\n* **Use `setStrokeColor` and/or `setStrokeWidth` inside the event handler** to make the lines visible; otherwise, they will be transparent, since we set the stroke color to transparent at the beginning of the program.\n* **Run your app** and confirm that your new button creates a sketch effect, as shown below.\n\n![](https://images.code.org/c06c268a4757e8838435e576a676a0a2-image-1448395181441.gif)",
        "U3 - Canvas - sprayPaint_markdown_instruction": "# Making Spray Paint with Nested Loops\n\nIn order to make \"Spray Paint\" look more real you will need to draw multiple dots randomly placed around the original x and y locations. In order to do this, you will place one `for` loop inside of another, also known as a **nested loop**. You already have the main loop which visits every index in `eventList`. The inner loop should **draw 5 circles whose x and y locations use `offsetX` and `offsetY` with a small random value added**.   \n\n# Nested Loops\n\n<img src=\"https://images.code.org/15d7590ed9d4c07a40f22da4decc396c-image-1448153719856.54.36 PM.png\" width= 300px ; style=\"float: right\">\n**When nesting loops, it is important that you use different variables to count your iterations**. Look at the example at right.  These nested loops effectively say: **\"for every possible value in `eventList.length`, run a loop 5 times\".  **\n\nSince `i` is used as the counter variable in the outer loop, we need to use a *different counter variable for the inner `for` loop*, or things will go haywire. Why? **If both loops used `i` as a counter variable, the inner loop would keep changing `i` and the outer loop wouldn't count properly.** The example uses `j` as the inner loop variable, but you could use anything that's *not* `i`.\n\n<img src=\"https://images.code.org/b5184430a48ac55d8f6fe7280c983186-image-1448387927473.gif\" style=\"width: 450px\">\n\n# Do This:\n\n<img src=\"https://images.code.org/290adbb84a51b89ca27414746d3a4a93-image-1448395072342.gif\" style=\"width: 200px; float: right\">\n\n(**Note:** Steps shown in animation above.)\n\n* **Add a `for` loop inside the existing `for` loop** in the spray paint event handler. \n* **Change the counter variable** to something other than `i` for the inner `for` loop.\n* **Change the boolean condition** so the inner loop will run **5 times.**\n* **Move the circle** code inside both `for` loops.\n* **Run your app** and confirm that your new button creates a spray paint effect, as shown below.",
        "U3 - Canvas - transparentDots_markdown_instruction": "# Changing Colors in Canvas\n\nWe would like to make our dots transparent so that we can see when they are drawn on top of each other. To set the color and transparency of shapes you draw on your canvas, you need to change both the **stroke** or outline color and the **fill** color. The functions `setStrokeColor` and `setFillColor` can be used to set those colors. \n\nThese functions **accept strings of the form `\"rgba(100, 200, 100, 0.5)\"` as input**. The first three values in the string are RGB values and the last value is the transparency, as represented by a decimal number between 0 and 1.0.  All together it looks like this:\n\n![](https://images.code.org/5f5692259df092ce4e000cbdf5a7df1b-image-1448077147778.png)\n<img src=\"https://images.code.org/e833a63e31dca7d5e8357c0b856dc7cc-image-1448244247180.gif\" style=\"float: right; width: 150px\">\n\n# Do This:\n\n**Before the loop: ** \n* **Add a `setStrokeColor` command** to set the stroke to **fully transparent**.\n* **Add a `setFillColor` command** to set your dots to full black and mostly transparent **(try a value of 0.2)**.",
        "U3 - Conditionals - Combine AND OR and NOT_markdown_instruction": "# Combining AND and OR and NOT\n\nYou can stick a NOT (`!`) in front of any boolean expression to invert its result. This opens the door to express the same logical statements in different ways.  \n\nFor example, let's say you want to determine if a person, based on his or her age (under 12 or over 65) gets to pay a reduced price for a movie ticket.  You might express that like this:\n\n```\n// If your age is less than 12 or greater than 65\nif( (age < 12) || (age > 65) ){\n\twrite(\"You qualify for a reduced price!\");\n}\n```\n\nBut you might also figure out a way to determine if a person gets a reduced price ticket by determining if his or her age is between 12 and 65 (`(age >= 12) && (age <= 65)`) and then taking the inverse of that.  So using the NOT operator this would work as well:\n\n```\n// If your age is NOT between 12 and 65\nif( !( (age >= 12) && (age <= 65) ) ){\n\twrite(\"You qualify for a reduced price!\");\n}\n```\n\n**Why use one over the other?** Personal preference.  Use the one that makes the most sense to you, but it should be a clear expression of what you are trying to say.  \n\n\n# Do This:\nWe've provided you with starting code that prompts the user to enter a **day** and their **age** and store it in variables.\n\n**Add an `if` statement that uses both AND and OR operators**\n\n  * The app should write \"Time for school!\" if it's a weekday and the user is under 18.\n \t* Hint: one way to say that it's a weekday is to say that it's NOT a weekend.\n  * Otherwise, if it's a weekday and the user is 18 or older, it should write \"Time to go to work!\"\n  * Otherwise, it should write \"Time to relax for the weekend!\"\n \n \n**WARNING** logic can get tricky sometimes.  Make sure to test your program with inputs that cover every possibility. There are 4 basic cases to test for:\n\n  * It is a weekday and age is under 18\n  * It is a weekday and age is not under 18\n  * It's not a weekday and age is under 18\n  * It's not a weekday and age is not under 18\n\nTry it out!",
        "U3 - Conditionals - Combine AND and OR_markdown_instruction": "# Combining AND and OR and NOT\n\nYou can stick a NOT (`!`) in front of any boolean expression to invert it's truthiness.  This is useful if you want to express the inverse of a more complex expression.  This opens the door to express the same logical statments in different ways.  \n\nFor example, let's say you want to determine if a person, based on their age (under 12 or over 65) gets to pay a reduced price for a movie ticket.  You might express that like this:\n\n```\nif( (age < 12) || (age > 65) ){\n\twrite(\"You qualify for a reduced price!\");\n}\n```\n\nBut you might also figure out a way to determine if the age is between 12 and 65 (`(age > 5) && (age < 65)`) and then take the inverse of that.  So using the NOT operator this would work as well:\n\n```\nif( !( (age > 5) && (age < 18) ) ){\n\twrite(\"You qualify for a reduced price!\");\n}\n```\n\n**Why use one over the other?** Personal preference.  Use the one that makes the most sense to you, but it should be a clear expression of what you are trying to say.  \n\n\n# Logic Challenge! Do This\nWe've provided you with starting code that prompts the user to enter a **day** and their **age** and store it in variables.\n\n**Add an if statement that uses both AND and OR operators**\n\n  * The app should write \"Time for school!\" if it's a weekday and the user is under 18.\n \t* Hint: one way to say that it's a weekday is to say that it's NOT a weekend.\n  * Otherwise it should write \"Time to go to work!\"\n \n \n**WARNING** logic can get tricky sometimes.  Make sure to test your program with inputs that cover every possibility. There are 4 basic cases to test for:\n\n  * It is a weekday and age is under 18\n  * It is a weekday and age is not under 18\n  * It's not a weekday and age is under 18\n  * It's not a weekday and age is not under 18\n\nTry it out!",
        "U3 - Conditionals - Simple OR_markdown_instruction": "# OR Operator\n\n<img src=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24 PM.png\" style=\"width: 100px; float: right\">\n\nYou will now see the JavaScript boolean operators AND (`&&`)  and OR (`||`) in code toolbox. You can drag them out or simply type them.\n\nLet's try OR right now.  As a reminder: the OR operator will evaluate to true if *either or both* statements are true. If both are false, the OR operator will evaluate to false. \n\n<img src=\"https://images.code.org/48d59f73e701d452dd74ae304db59d93-image-1446482464792.png\" style=\"width: 200px; float:right\"> \n\n\n# Do This:\nWe've provided you with starting code that prompts the user to enter a day of the week and stores it in a variable.\n\n**Add an `if` statement that uses an OR (`||`)** \n\n  * The program should write **\"It's the weekend!\"** if the day entered by the user is a weekend day.  \n  * Otherwise it should write **\"Can't wait for the weekend to get here.\"**",
        "U3 - Conditionals - intoOr_markdown_instruction": "# OR Operator\n\n<img src=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24 PM.png\" style=\"width: 100px; float: right\">\n\nUp till now we have seen the boolean operators ==, >, and <. There are a couple more boolean operators that are very useful to know about. AND(`&&`)  and OR (`||`). Let's take a look at OR.\n\nOR allows you to check multiple boolean expressions together.\n\n<img src=\"https://images.code.org/df380925c0c598f06a5192ff2cfc8401-image-1446156668504.08.03 PM.png\" style=\"width: 100px; float:right\"> \n\nIf either or both statements are true, the OR operator will evaluate to true. If both are false, the OR operator will evaluate to false.  \n\n# Do This\n\n* **Run the code** to see what it does.\n\n* **Add another conditional that check if color is purple or number is greater than 2**\n\n* **Add another conditional that check if direction is left or animal is zebra or number is 4**",
        "U3 - Conditionals - introAND_markdown_instruction": "# OR Operator\n\n<img src=\"https://images.code.org/c1ec7743b3c8a888d76380f789263851-image-1446155863558.57.24 PM.png\" style=\"width: 100px; float: right\">\n\nUp till now we have seen the boolean operators ==, >, and <. There are a couple more boolean operators that are very useful to know about. AND(`&&`)  and OR (`||`). Let's take a look at OR.\n\nOR allows you to check multiple boolean expressions together.\n\n<img src=\"https://images.code.org/df380925c0c598f06a5192ff2cfc8401-image-1446156668504.08.03 PM.png\" style=\"width: 100px; float:right\"> \n\nIf either or both statements are true, the OR operator will evaluate to true. If both are false, the OR operator will evaluate to false.  \n\n# Do This\n\n* **Run the code** to see what it does.\n\n* **Add another conditional that check if color is purple or number is greater than 2**\n\n* **Add another conditional that check if direction is left or animal is zebra or number is 4**",
        "U3 - Design Mode - Console Log_markdown_instruction": "# Updating IDs and Debugging with Console Log\n\nIn the last level you tested out the new command: `console.log`.  In this level we have a couple buttons with event handlers and `console.log` statements, but they are switched around!\n\nWe should have given the buttons better ID names so we could tell the difference based on the ID. **Can you update the ID names and `console.log` messages to match the correct button? **\n\n# Do This\n\n* **Change the IDs** of the buttons in Design Mode to more descriptive names.\n\n* Switch to Code Mode and notice that the **ID pulldowns have been updated to include the new IDs**. (You still need to select the correct ID from the pulldown menu.)\n\n* **Update the `console.log` messages** to match the buttons.\n",
        "U3 - Design Mode - Layers and Delete_markdown_instruction": "# Layering and Deleting\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\" style=\"width: 150px; float: right\">User interface elements can overlap one another, so you'll want the ability to change the order or **depth** at which each one is rendered. \n\nIf you **scroll to the bottom of the Properties tab** you'll find buttons which allow you to easily **delete or change the depth** of an element.\n* **Delete an Element** by selecting it (clicking on it) in the design view and then clicking **Delete** in the properties tab.\n* **Change the depth** of elements by using the double or single arrows.\n  * Click the double arrow to send all the way to front or back.\n  * Click the single arrow to move up or down one layer.\n    \n# Do This:\n\nUse the **delete** and **depth** tools to **create the \"After\" image**\n\n\n<table>\n<tr>\n\t<th style=\"text-align:center\">Before</th>\n    <th style=\"text-align:center\">After</th>\n</tr>\n<tr>\n\t<td align=center><img src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\" style=\"width:200px ; border: solid 1px black\"></td>\n    <td style=\"text-align:center\"><img src=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\" style=\"width:200px; border: solid 1px black\"></td>\n</tr>\n</table>",
        "U3 - Design Mode - WTF Console Log_markdown_instruction": "# Console Log\nIn the last level, we saw a new command: `console.log`. You may have noticed that it prints out text in the Debug Console below the code workspace.\n\n<img src=\"https://images.code.org/326e0f6c7d3b846ba06db998f06f56aa-image-1444419414248.36.33 PM.png\" style=\"width: 450px; border: solid 1px black\"> \n\nThe Debug Console is an important tool for programmers.  You've seen it display error messages, but you can also send messages that a user cannot see to the Debug Console while a program is running. <img src=\"https://images.code.org/cdc253db1b9a3685eaf5ea4b6bc30766-image-1444337429645.png\" style=\"width: 250px; float: right; border: solid 1px black\"> The Debug Console is really helpful for debugging programs because you can send messages to yourself from within your own code!\n\nYou can find `console.log` in the code toolbox under the Variables tab.\n\n# Do This:\n\n* Drag out 3 `console.log` commands into the workspace.\n\n* Update each `console.log` with your own messages.\n\n* Run the program a couple times to test out this new command.",
        "U3 - Dice - Dropdown and Score_markdown_instruction": "# Adding Guess and Score to Dice Game\n\nLet's have the user guess the number that will come up when we roll a single die. \n\nYou can have multiple `if` statements, one after another, if they have different purposes which are separate. \n\n** Note: ** Use the flowchart below to help you figure out the logic of the game.\n\n# Do This:\n\n* **Add a dropdown** to take in the user's guess from 1 to 6.\n\n* **Add a set of `if` statements to check if the dice roll number is equal to the user guess.** Put this set of `if` statements after your set of `if` statements for the dice image. It should be completely separate from the other set of `if` statements. \n\n* Create a variable to **keep track of score**. Give 10 points if they guess right and take one point away when they guess wrong.\n\n* **Display the score** on the screen and update it after each dice roll.\n\n<img src=\"https://images.code.org/ac24917ca18606f6f3c31a6be1a16d73-image-1446174953979.png\" style=\"width: 100%\">\n<a href=\"https://images.code.org/ac24917ca18606f6f3c31a6be1a16d73-image-1446174953979.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "U3 - Dice - Dropdown with Strings_markdown_instruction": "# Adding Difficulty Levels: Dropdowns with Strings\n\nLet's add another element to our dice game: **difficulty levels**. The user will pick either \"Easy\" or \"Hard.\"  These are strings so you might be wondering how to check for equality. **The `==` works on strings as well!** It checks if the first string is exactly the same as the second string. **Strings must be the same letters and even have the same case to be equal**! So \"dog\" and \"Dog\" would not be equal. \n\n# Do This:\n\n* **Add a dropdown** for difficulty level with the options of \"Easy\" or \"Hard.\" \n\n* **Create an `if` statement for difficulty level** which prints the difficulty level to the console.\n\n<img src=\"https://images.code.org/9db291c8dd4192390e008aa764576cd3-image-1446175136919.png\" style=\"width: 100%\">\n<a href=\"https://images.code.org/9db291c8dd4192390e008aa764576cd3-image-1446175136919.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "U3 - Dice - If_markdown_instruction": "# Using `if` to Display Images\n\nWe are going to set up a dice game. We want to show a picture of a single die for each random number generated 1 to 6. We've already set up the screen in Design Mode, with a button to generate the roll and an image to show a picture of the die.\n\n**Note:** The flowchart for the desired behavior is below.\n\n# Do This:\n\n* Add an event handler for the Roll! button so that when the button is clicked it generates a random number from 1 to 6. \n\n* Add conditionals (`if`, `else if`, and `else`) to change the picture of the image (ID: `dice_image`) to display the correct side of the die depending on the random number generated. You will need to use <img src=\"https://images.code.org/89f2c13ef4ead590475c863a087597f8-image-1446535826599.30.16.png\" style=\"width:150px\"> with the URLs below to set the images for the die.\n\t* <img src=\"https://code.org/images/dice/1.png\" style=\"width: 50px\"> Dice 1 Image URL -  https://code.org/images/dice/1.png\n    * <img src=\"https://code.org/images/dice/2.png\" style=\"width: 50px\"> Dice 2 Image URL -  https://code.org/images/dice/2.png\n    * <img src=\"https://code.org/images/dice/3.png\" style=\"width: 50px\"> Dice 3 Image URL - https://code.org/images/dice/3.png\n    * <img src=\"https://code.org/images/dice/4.png\" style=\"width: 50px\"> Dice 4 Image URL - https://code.org/images/dice/4.png\n    * <img src=\"https://code.org/images/dice/5.png\" style=\"width: 50px\"> Dice 5 Image URL - https://code.org/images/dice/5.png\n    * <img src=\"https://code.org/images/dice/6.png\" style=\"width: 50px\"> Dice 6 Image URL -  https://code.org/images/dice/6.png\n\n<img src=\"https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png\" style=\"width: 100%\">\n<a href=\"https://images.code.org/392c125a2620ac4949091fc075864f4c-image-1446174585241.png\" target=\"_blank\">Open diagram in a new tab</a>\n",
        "U3 - Dice - Nested_markdown_instruction": "# Nested *if* Statements\n\n<img src=\"https://images.code.org/1774efb17571d3370662e34b705dde47-image-1446485939643.37.11 PM.png\" style=\"width: 150px; float: right\">\n\n**Let's change the scoring of the game to match the difficulty level.** \n\nNew scoring rules:\n* _Easy: +10 points right answer / -1 point for wrong answer_\n* _Hard: +1 point right answer / -1 point for wrong answer_\n\nHow do we check _both_ the difficulty level and if the user's guess was correct? **We can actually put `if` statements inside of other `if` statements!** So we first want to check what the difficulty level is and then check if the user was right or wrong to determine the score.\n\n** Note: ** The flowchart below outlines the logic you are trying to implement.\n\n# Do This:\n\n* Move a copy of the score `if` statement inside of the difficulty levels. Be careful with indenting. All of the `if` statements for score need to be inside of the difficulty `if` statement (i.e. indented 1 level more than the difficulty `if` statement)\n\n<img src=\"https://images.code.org/2125a027997aeca75d18b8423058063d-image-1446485524945.gif\" style=\"width: 350px\">\n\n\n* Edit the `if` statements to give the correct scores\n\t* Easy level (+10 right, -1 wrong)\n    * Hard level (+1 right, -1 wrong)\n\n<img src=\"https://images.code.org/3b95a9f5cca60fc0ffbf7c2fb174d737-image-1446175290414.png\" style=\"width: 100%\">\n<a href=\"https://images.code.org/3b95a9f5cca60fc0ffbf7c2fb174d737-image-1446175290414.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "U3 - High Low - Debug_markdown_instruction": "# Debug Conditionals\n\nHelp! **I was trying to give the player a hint when their guess was within 2 of the secret number but the code I wrote isn't working.** Can you fix it?\n\nCheck out the flow chart for the logic I wanted. **Hint:** The major problem here is that **conditional statements run in order from top to bottom**. Remember you have to check the smallest/most narrow case first. Which set of numbers is larger/more broad (guess > secret number) or (guess > secret number + 2) ? Another way to think about this is which case is contained completely in the other case?\n\n# Do This:\n\n* Run the code to identify when the program is not working correctly.\n\n* Fix the problem with the order of the conditionals.\n\n<img src=\"https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png\" style=\"width: 100%; float: right\">\n<a href=\"https://images.code.org/76681a7d86bd4097417b25b682eee5a8-image-1458309676819.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "U3 - Keys - Add Image URLs_markdown_instruction": "# Adding Image URLs\n\nWe're ready to start improving the \"My Favorite Things\" app. \n\nWe'll do this in two steps:\n1. We will change it from scrolling text to scrolling images.\n2. We will add key events to scroll with the keyboard.\n\n**Step 1:**\n* The default values in your array should be image URLs.\n* The large **text area** needs to be changed to an **image**.\n* Instead of **setting the text**, you'll now be using `setImageURL` to set the URL of the image.\n\n# Do This:\n**NOTE: We've re-loaded the code from the \"My Favorite Things\" App you wrote in the previous lesson.** (If you want to refer to code you just wrote, you can go back to look at it.)\n\n* **Set the default values** in your array to be image URLs. (You might need to take a minute to go collect a few if you didn't in preparation for this lesson.)\n* In Design Mode **delete the text area** and replace it with an **image**. Make sure your image has a descriptive and meaningful ID.\n* Inside your function that updates the display **replace `setText` with `setImageURL`**. Make sure you reference your new image element **by its correct ID**.<br>\n<img src=\"https://images.code.org/9f7f4aeeb9b1a84ae781043602166865-image-1447337890448.gif\" style=\"width: 350px\">\n* ** Test your app** to confirm that it's now showing the images in your array.",
        "U3 - Keys - Buttons and Keys_markdown_instruction": "# Buttons and Keys\n\nWe now know how to respond to key events, but often we want the user to be able to **do the same thing with the app in multiple ways**. For example, we might want the app to exhibit the same behavior if the user clicks a button on the screen or a key on the keyboard. (This is how so-called \"keyboard shortcuts\" work.)\n\nIn the program you're about to see, we've provided event handlers for some buttons on the screen. You're going to **create identical functionality** for the key events.\n\n# Do This:\n\n* **Add conditional statements inside the `keydown` event handler** to check for when the **up and down arrows** are pressed.\n<img src=\"https://images.code.org/0e0fe80c821c6a3171ec3a272c42325c-image-1447253300861.gif\" style=\"width: 350px\">\n\n* ** Copy the code for the `upImage` button**, and paste into the up arrow `if` statement.\n![](https://images.code.org/ad56005d74736c7c9aa8bedf68529c0e-image-1448300088636.gif)\n\n* ** Copy the code for the down button**, and paste it into the down arrow `if` statement.\n\n* Confirm your app **responds to key events** by running it.  For example, clicking the image of the up arrow in the app should do the same thing as hitting the up arrow on the keyboard.\n\n",
        "U3 - Keys - Key Up and Down_markdown_instruction": "# Using *keyup* and *keydown*\n\nOn the last level, we played with the `keypress` event. Let's take a look at some of the other key events. \n\nYou are going to get the chance to play with `keyup` and `keydown` in this level. **Pay attention to the different values of `event.key` for `keydown` and `keypress`. **\n\n# Do This:\n\n* Switch to the event type to `keydown` or `keyup`. \n\n<img src=\"https://images.code.org/fa91b1a9e3240eb65ff75b381e76ce69-image-1447213909054.gif\" style=\"width: 350px\">\n\n* Try out the event.\n\t* Press and hold a key\n    * Try the arrow keys\n    * Shift\n    * Option\n    * Alt\n    * Others",
        "U3 - Keys - Practice Adding Images with URL_markdown_instruction": "# Adding Image URLs\n\nYou are going to be creating your own image scroller! Lets set up the array of image URLs. There are a couple different ways to set up an array but we are going to use `appendItem` to add all the image URLs. \n\n**Note:** At this point you should have collected image URLs to use for your image scroller. If you have not collected your image URLs yet, go do that now. \n\n# Do This\n\n*  ** Add your image URLs to the images array.**  Pull out an `appendItem` command. Change the array name to match the array. Change the item parameter to your image URL.\n\n<img src=\"https://images.code.org/91fcb850da2f4b2f4cad24d094135867-image-1447174515231.gif\" style=\"width: 350px\">\n\n* ** Test the the 'Add' button** to check that it adds a new image at the current index of the array.\n\n<img src=\"https://images.code.org/0388145b2221da0255ad98005d749a0e-image-1447174724522.gif\" style=\"width: 200px\">\n\n* ** Set the colors and theme **of your app to personalize it. ** Note: ** You can change the way the screen looks but make sure to keep all the elements currently on the screen or your app might not work.",
        "U3 - Keys - Words to Images_markdown_instruction": "# Adding Image URLs\n\nYou are going to be creating your own image scroller! Lets set up the array of image URLs. There are a couple different ways to set up an array but we are going to use `appendItem` to add all the image URLs. \n\n**Note:** At this point you should have collected image URLs to use for your image scroller. If you have not collected your image URLs yet, go do that now. \n\n# Do This\n\n*  ** Add your image URLs to the images array.**  Pull out an `appendItem` command. Change the array name to match the array. Change the item parameter to your image URL.\n\n<img src=\"https://images.code.org/91fcb850da2f4b2f4cad24d094135867-image-1447174515231.gif\" style=\"width: 350px\">\n\n* ** Test the the 'Add' button** to check that it adds a new image at the current index of the array.\n\n<img src=\"https://images.code.org/0388145b2221da0255ad98005d749a0e-image-1447174724522.gif\" style=\"width: 200px\">\n\n* ** Set the colors and theme **of your app to personalize it. ** Note: ** You can change the way the screen looks but make sure to keep all the elements currently on the screen or your app might not work.",
        "U3 - Loops -  Complex Condition_markdown_instruction": "# Expressing Stopping Conditions: \"Until Loops\"\nIt is often more natural to think about looping in terms of when the loop should end rather than when it should continue. For example you might say \"keep going down the road until you see the gas station\" or \"keep calling until you get through to someone.\" You might think of these as \"until loops\" rather than \"while loops,\" since we want the loop to continue **until a condition is true rather than while a condition is true**.\n\n**There is no \"until loop\" in JavaScript** but it is actually quite easy to translate \"until loops\" into `while` loops so that you can use them in programs. An \"until loop\" runs *until* a condition is true, as opposed to a while loop which runs *as long as* a condition is true.  That means an until loop is the logical inverse of a while loop - it runs as long as the **condition is false**. The table below shows how you can use the **NOT** ( `!` ) operator to translate stopping conditions into `while` loop conditions.\n\n| Expressed as Stopping | Expressed as Until Loop | Expressed as While Loop |\n| --- | --- | --- |\n| **Stop** once you reach the gas station | Keep going **until** you reach the gas station | Keep going **while** you have **NOT** reached the gas station|\n| **Stop** calling when you get through to someone | Keep calling **until** you get through to someone | Keep calling **while** you have **NOT** gotten through to someone|\n| **Stop** when `x == y` | `until(x == y){...` | `while(!(x == y)){...`|\n<br>\nNote how we can use the **NOT** operation to find the **logical inverse** (or opposite) of the condition from our \"until loop\" to create a `while` loop. Let's do a little practice of that now.\n\n# Do This:\n\n**Starter code** is provided that repeatedly rolls two dice and writes their values to the screen. **Careful: ** before you edit this code it creates an infinite loop.\n\n* Use the technique above to **modify this code** so that the loop **stops when both dice are 5 or greater**.\n* **Try it out and experiment.** You should exit the loop the first time both dice have values greater than or equal to 5 displayed.\n\n![](https://images.code.org/076fb8e95fabc55e8ee45e31e51ca2d5-image-1448925611863.19.59 PM.png)",
        "U3 - Loops - 13_markdown_instruction": "# Counting by More Than 1\n\nSometimes you want to count up by something other than 1. In that case we do need to use the form of `count = count + 1` where we can change 1 to be any number we want to count up by. The `++` and `--` operators only work for counting by one.\n\nLets try counting by 3. \n\n\n# Do This\n\n* **Starter Code: ** The program right now will count from 1 to 30.\n\n* **Update the code to count up by 3 instead of 1.** So it will say 3,6,9,12,15...",
        "U3 - Loops - 15_markdown_instruction": "# Using an *if* Statement In a Loop\n\nA common thing to do is to use variables to keep track of some sort of count.  When used in a loop we count things very quickly.\n\n**Scenario:**\nIf you roll a pair of dice, rolling a 12 (two sixes) is rare.  How rare?  If you were to roll a pair of dice 1,000 times, on average, how many times would it come up as 12?\n\nTo figure this out, we could write code to run an experiment. It would go something like this:\n* Make a loop that simulates rolling a pair of dice 1,000 times.\n* Inside the loop, add an `if` statement: **if die1 + die2 == 12, then add 1 to a counter**.\n* After the loop, display the result.\n\n# Do This:\nThe **starter code** sets up the whole experiment for you, except it doesn't count the number of 12's rolled - that's your job.\n\n* **Run the code** to see what the experiment does.\n\n* ** Add an `if` statement inside the loop** to check if the sum of the dice is equal to 12, and add 1 to `twelveCount`.\n\n*  Once the loop has completed, **display the number of times the sum was 12.**\n\n**Note:** If you remove (or comment out) the `console.log` statement that displays every roll of the dice, the experiment will speed up A LOT!  You could do tens of thousands of dice rolls in a matter of seconds.",
        "U3 - Loops - 3_markdown_instruction": "# Changing *if* to *while*\n\n** How many times would we have to roll a die before it comes up as a 6?** In the program you're about to see, we **simulate rolling a die (generating a random number between 1 and 6)** in order to answer this question.\n\n# Do This:\n\n** Starter code** is provided which re-rolls a die once if the first roll is not a 6. \n* **Change the `if` statement to a `while` loop** so the program will keep rolling the die **while the current roll is not a 6.** \n\t* **Hint:** The easiest way to do this is to change the text from `if` to `while`.\n<img src=\"https://images.code.org/50b97e8858bf5ebf82eb1d358f875854-image-1446739013775.gif\" style=\"width: 350px; border: solid 1px black \">\n* Run the program to test out the change.\n",
        "U3 - Loops - 7_markdown_instruction": "# Printing After Setting Value\n\nWe started trying to remove the duplicate code we had on the last level by initializing a variable to a nonsense, or \"dummy,\" value that would still ensure we entered the loop. \n\nIn the code provided, not every number is going to display. However, this time we want to try **not to add code** to fix the problem, since duplicate code is inefficient. \n\n# Do This:\n\n* **Starter Code:** The code is completely functional except that it does not print one of the numbers it's supposed to. In addition we don't want it to print the dummy variable of -1.** Hint: ** What should be the last number that prints every time this program runs?\n\n* Run the program to see the behavior.\n\n* Fix the code so that it prints all the values of `num`. **Hint:** You don't need to add any code. Just switch the order of the code you have now!",
        "U3 - Loops - Continue_markdown_instruction": "# Debug Commands\n\n<img src=\"https://images.code.org/c6322845b96b70c9083a6c62736048e5-image-1446739268136.00.34 AM.png\" style=\"width: 250px; float: right\">\n\nCheck out the new box that has appeared next to the Debug Console! These are the debug commands and they are extremely powerful.  These commands allow us to stop a program at a certain point in its execution and slowly follow, step-by-step, what is happening during the run. \n\nIn order, **to use the debug commands you first have to add a breakpoint**. Breakpoitns tell the computer that when you hit this line of code pause and wait for the programmer to tell you what to do next. A breakpoint is marked by <img src=\"https://images.code.org/99c9685af5b15840287b41620cdc82ea-image-1446739738049.08.36 AM.png\" style=\"width: 35px\">. You can create a breakpoint by clicking on the number next to the line of code your want the computer to stop at.\n\n**Note:** You'll notice that once you hit run the <img src=\"https://images.code.org/4eea3a317da5b0781275493955a2d782-image-1446741391883.36.03 AM.png\" style=\"width: 75px\"> button becomes the <img src=\"https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48 AM.png\" style=\"width: 75px\">button.\n\n# Do This\n\n* **Add a breakpoint** to your code so the program will pause each time it restarts the while loop.\n\n<img src=\"https://images.code.org/ae81079677c78d7421b3acc55947fb08-image-1446739414661.gif\" style=\"width: 250px\">\n<br>\n\n* **Use the Debug Commands to to make a list of all the values rolled before a 6**.\n\t* Each time you hit the breakpoint, **use console to check value of num**. \n    * To **move to the next time the value of num changes** use either  <img src=\"https://images.code.org/bd8f1a67242e64e6b3740eac79f881e8-image-1446748421345.33.09 PM.png\" style=\"width: 75px\"> or  <img src=\"https://images.code.org/6c4712da58e32dae2d04c52d9964fca9-image-1446741498097.37.48 AM.png\" style=\"width: 75px\">\n\t\t* **Step Over** - Executes the current line of code and steps over to the next one.\n\t\t* **Continue**  -  Execute until you hit the next break point\n\t\t* ( Note: We will talk about Step in and Step out later.)",
        "U3 - Loops - Minus Minus_markdown_instruction": "# *++* Has a Friend!  Introducing *--*\n\nAs you may have guessed, just as we can write `count = count + 1` as `count++` we can also write `count = count - 1` as `count--`.\n\nLetâs write a program that counts **down** from 10 down to 1. \n\n# Do This:\n\n* **Starter Code: ** The current program counts **up** from 1 to 10. \n\n* **Change the code to use `count--` to count *down* from 10 to 1.** You will need to:\n\t* Change the looping condition.\n    * Change `count++` to `count--`.\n    * Change the initial value assigned to `count`.\n",
        "U3 - Loops - Plus Plus_markdown_instruction": "# *++* Operator\n\nAs programmers we are always looking for more concise ways to write code. It is so common to add 1 to a variable such as in `count = count + 1` that there is actually a shorthand for it. \n\n# Introducing the *++* Operator\n\nYou can write `count++` to add 1 to `count`. `count++` does the exact same thing as `count = count + 1`! \n\nIn fact the computer turns `count++` into `count = count + 1` behind the scenes - it really is just a convenient shorthand.\n\n**Note:** This is more of a programmer style choice so if you want to write your code using `count = count + 1` instead there is nothing wrong with that!\n\n# Do This:\n\n* Change the code to use `count++` instead of `count = count + 1`. (You'll need to be in text mode to do this.)\n\n** Misconception Alert:** You don't need to write `count = count++` - the computer is doing the assignment for you.",
        "U3 - Loops And Arrays - Add 5_markdown_instruction": "# Updating Values in an Array with a *for* Loop\n\nThe `for` loop you set up on the last level is actually so common that we will rarely deviate from this `for` loop setup.\n\n<img src=\"https://images.code.org/fba4d95636869c1c1c1a539fe81ded72-image-1447346793054.45.50 AM.png\">\n\nThis `for` loop basically means **\"for every possible index in `myArray`...\"** and we use it as a basic building block for processing arrays. Common array-processing techniques like searching for a value, updating all values, or calculating simple stats on an array will all be completed using a `for` loop written with the syntax above.\n\nIn fact, we're going to see that happen right now as we **use a `for` loop to add 5 to every value in an array**.\n\n# Do This:\n**Starter code** has been provided that creates an array of random values. You are also given a `for` loop that loops over every index in the array.\n\n* Add code inside the loop to **add 5 to the value at every location in the array**. \n\t* ** Remember: ** `myArray[i]` refers to the element in the array at the current value of `i`.\n* Confirm your code works by **displaying the values in your array before and after your loop**. Below is a sample result.  Notice how, after the array has been processed, all of the values are 5 greater than the originals.\n\n![](https://images.code.org/aaf36ac93098ef7f43fdda04243d17ad-image-1447792214666.29.41 PM.png)",
        "U3 - Loops And Arrays - Challenge 1_markdown_instruction": "# Challenge 1: Loops and Arrays\n\nLet's practice loops over arrays and functions.  \n\n**Challenge:** Write a function that finds and returns the minimum value in an array.  \n\n\n# Do This\n\n* **Starter Code: ** We have given you an array to use to test your function.\n\n* Write a function that finds and **returns the minimum value in an array.**   **Hint:** use a variable to keep track of smallest value you've found so far, and update it when you find a smaller one.",
        "U3 - Loops And Arrays - Challenge 2_markdown_instruction": "# Challenge 2: Loops and Arrays\n\n**Challenge:** Write a function that returns the largest value in an array.\n\n\n# Do This\n\n* **Starter Code: ** We have given you an array to use to test your function.\n\n* Write a function that finds and **returns the maximum value in an array.**  ",
        "U3 - Loops And Arrays - Counting Times_markdown_instruction": "# Counting Occurrences of a Value\n\nInstead of displaying a true/false value for *every* item in the list, let's compute one value and display it.  A common thing to want to do is **count** the number of times a value occurs.  We can do this with a very small change to the code we've already got. \n\n# Do This:\n**Starter Code** is similar to past levels.  We've also created a variable called `fiveCount`.\n\n* ** Add an `if` statement** inside the `for` loop to **increment `fiveCount` if the value is equal to 5. **\n (Note: this will be exactly the same as the `if` statement you wrote in the previous level. Just giving you more practice).\n\n* **Run and re-run your code** to make sure that it's accurately counting the number of 5's in the array. Since the array is getting a random set of values every time you run the program, you might have to run it a bunch of times to thoroughly test it. Make sure you get it to run at least once when no 5's appear in the array.\n\n* Finally, if you'd like to, **change the first loop in the program to add 100 items to the array** instead of 10. Your code should still work to count the number of 5's, no matter how big the original array is!",
        "U3 - Loops And Arrays - Find Min_markdown_instruction": "# Reusing a Function Pattern: Find Minimum\n\n**Nice work! You've just written a function that implements an algorithm to process an array!** If you feel comfortable with the basic pattern you used to create this function, you can quickly create functions for many other useful algorithms that work on arrays.\n\n**Basic Function Pattern**\n\n* Create a **function that accepts an array** as input.\n* **Create a \"flag\" variable** and set its default value before looping through the array.\n* Loop through your array with a `for` loop that **visits every index in the array**.\n* **Update your flag** as necessary with every iteration of your loop.\n* **Display your flag** at the end of the loop.\n\nLet's use this pattern to **write a function that finds and displays the smallest value in an array**.\n\nInstead of using a true/false flag to indicate whether we found a value, **we'll use a variable to keep track of the smallest value we've seen in the array so far**.\n\n# Do This:\n\n**Starter code** has been provided which outlines and calls `findMinVal` with different inputs. Your job will be to finish writing the function.\n\n* Before programming, try to **develop an algorithm that you could use to find the minimum value in an array**. Use the pattern outlined above as a guide.\n* **Write code** in the places indicated with comments to complete the function.  \n\t* You'll want to use the `minVal` variable to keep track of the smallest value you've found so far.\n    * You'll need to **write an `if` statement** that checks whether the current value in the array is less than `minVal`. If it is, then update the smallest value.     \n* **Run the code** to ensure it is working as you intend.\n\n<details><summary><strong>HINT: pseudocode</strong> [click to expand]</summary>\n<p>\nHere is some pseduocode that you should be able to implement.\n</p>\n<pre>\nminVal = first value in array \nfor EACH value IN array\n  if value < minVal\n     minVal = value\n\ndisplay(minVal)\n</pre>\n</details>\n\n\n![](https://images.code.org/e6abdc34c653e4bb0885ffabcf897fc5-image-1447877822696.16.03 PM.png)",
        "U3 - Loops And Arrays - Intro For Loop_markdown_instruction": "# *for* Loop\n\nIt's very common to want to repeat a set of commands a particular number of times. Recently, we have been using the `while` loop to do this by creating a counting variable, setting the boolean expression, and incrementing the value of the counter by 1 each time. We've also used the `for` loop before, and we'll explain it more in-depth now.  The `for` loop was created to wrap all of those components related to counting loops into a single line of code.\n\n<img src=\"https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png\" style=\"width: 450px\">\n\n<img src=\"https://images.code.org/d0d8f34d0f4aabaf66084ceac282448e-image-1447343652405.png\" style=\"width: 450px\">\n\nProgrammers would typically read a loop `for (var i = 0; i < 10; i++)` out like this: <br>\n**\"for variable i starting at 0, while i is less than 10, i plus plus (or increment i by 1)\"**\n\nNotice that in reading a `for` loop we still use the word \"while\".\n\nYou may notice that when you drag a `for` loop out from the toolbox that we've set it up for you with `i` as the variable. \n\n<details> \n<summary>**Why is `i` the variable?** [click to expand]</summary>  \n\nUsing the single character `i` as the variable in a `for` loop has become a convention in programming for a variety of reasons. One reason is that `for` loops are often used when processing arrays - **you can think of `i` as shorthand for index. **   But there is no reason why you have to use `i` if you don't want to.  It's just a variable.  \n</details>\n\n# Do This:\n\n* Drag out the `for` loop.\n\n* Insert a `console.log` statement inside the `for` loop that displays `i`.\n![](https://images.code.org/2a81206296dc693463d7b147f2f93dcb-image-1447446254447.gif)\n\n* Try changing:\n\t* The condition to stop the loop (make it run longer).\n    * The amount you change `i` by each time (try changing `i++` to something like `i += 5`).\n    * The starting value of `i`.\n\n",
        "U3 - Loops And Arrays - Linear Search_markdown_instruction": "# Algorithms and General-Purpose Functions\n\nOver the next several exercises we will be **creating a general-purpose function to determine if a value is contained within an array**.  Over the course of these exercises, keep an eye out for the general pattern we are using, because you'll get to use it again to create functions of your own.\n\nTo begin, we'll start simple. We'll write code that **checks whether an array contains a specific value**. At every index, your program should display \"true\" if the value at that index is a 5 and \"false\" otherwise.\n\n# Do This:\nThe **starter code** is similar to past levels, but you'll notice that we use a loop to construct `myArray` rather than appending items one line at a time.  You are also given the `for` loop you will use.\n\n* Add an `if` statement inside the `for` loop to check if the value of the array at the current index is 5. \n  * If the value is equal to 5, write **true** to the console. Otherwise write **false** to the console.\n* **Test your code** to make sure it is working as you intend. An example output is below.\n\n![](https://images.code.org/a64c3be0a23e25bef67494bdfeb61415-image-1447879494916.44.45 PM.png)",
        "U3 - Loops And Arrays - Loop Array If_markdown_instruction": "# *for* Loop with *if*\n\nSometimes we want to find values in an array that meet certain conditions.  We can add an **`if` statement inside the `for` loop** to individually check every value within the array. To practice this, we will create a `for` loop that will **display every value in the array greater than 5**.\n\n# Do This:\n** Starter code** has been been provided that creates an array of random values.\n\n* Add a `for` loop that references every index in the array.\n\n* Add an `if` statement inside the `for` loop that **displays every value in the array greater than 5** using `console.log`\n\t![](https://images.code.org/969077ff23232e410ce17520b0a71e1e-image-1447390972867.gif)\n    \n* **Note:** Because the original array is being constructed with random values it's *possible* that it might not have any values greater than 5.  Just run the program a few times to make sure it works.  An example of the possible output is below.\n\n![](https://images.code.org/266e23afc3533ebd63b393b2ee8682d8-image-1447796380510.39.26 PM.png)",
        "U3 - Loops And Arrays - Search with Boolean Var_markdown_instruction": "# Using a Boolean Variable as a Flag\n\nWe are going to do a **challenge that is similar to the last exercise** but, rather than counting the number of 5's in the array, we're going to use a different **interesting programming technique for processing arrays** that might prove useful to you in the future. \n\n# Using a Boolean Flag\n\n<img src=\"https://images.code.org/756fcab9d5f48ace76eb5d300fcf58af-image-1447624065160.png\" style=\"float: right; width: 250px\">\nThe technique is generally referred to as **using a boolean \"flag.\"** To understand this idea, think about how some mailboxes work: the flag starts down, and when a person wants to let the mail carrier know there is something to pick up, she puts the flag up to notify the mail carrier that there is outgoing mail in the box.\n\nWe can use a variable to do something similar when programming. Rather than incrementing a count every time we find a 5 in the array, we will use a variable that acts like a **flag**.  We will create a variable before the loop and assign it `false` to start (flag is down). Then, as we process the array, if we find a 5, set the variable to `true` (put the flag up).  \n\nHere is some pseudocode:\n```\nvar flag = FALSE\nFOR EACH item IN list\n  IF (item EQUALS 5)\n    flag = TRUE\n    \nDISPLAY (flag)\n```\nNotice that it doesn't matter if we find more than one 5.  It will just keep setting the flag to `true`.  However, if there are no 5's, the `if` statement in the loop will never execute, and so the variable will remain the value it was initialized to, which was `false`.\n\n# Do This:\n\n* **Implement the pseudocode above** in JavaScript. \n* We've given you code that constructs an array of random values, and the standard `for` loop for looping over an array.\n* The output will be no different from the previous exercise, but you should still **confirm that your program correctly identifies when a 5 is in the array.**\n\n| One or more 5's | No 5's |\n| --- | --- |\n|![](https://images.code.org/15ed45d471e9279a8739bad5f31c3a4d-image-1447452726753.06.31 PM.png) | ![](https://images.code.org/ed19957449c6b68cb19326a6f430edec-image-1447452740979.06.46 PM.png)|\n\n",
        "U3 - Movie Bot - Multiple If Sequences_markdown_instruction": "# Adding Rating to Keywords\n\nUp until now our movie suggestions have just been based on genre. Let's now also look for keywords related to the movie rating like \"G\", \"PG\", \"PG-13\", and \"R\" so we can give movie suggestions based on both genre and rating.\n \n**Note: ** We've updated the flowchart below (highlighted in yellow) to see the logic we are trying to add.\n\n**Note 2: ** The logic of the program right now will yield some odd results - there are some things you can type that will give 2 suggestions - this is expected, for now.  We are just taking a small step here.  We'll refine the code again in later levels.\n\n# Do This:\n\n* **Add another set of `if`, `else-if`, and `else` statements** inside the question `if` statement to **check for keywords for movie ratings (G, PG, PG-13, and R).**\n\n* **Hint:** When checking for \"G\", \"PG\" and \"R\" you need to be a little clever.  R and G are letters that will show up in lots of words and PG will get confused with PG-13. We want to check for \"g\" and \"r\" with spaces on either side. So make sure to use `\" g \"` where there is a space on either side of g instead of `\"g\"`. For \"pg\" you can just add a space after the pg to look for `\"pg \"`\n\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n<img src=\"https://images.code.org/886713cfedf4802e174b68ed2eb36d4b-image-1455816199174.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/886713cfedf4802e174b68ed2eb36d4b-image-1455816199174.png\" target=\"_blank\">Click to open in separate window.</a>",
        "U3 - Movie Bot - Nested Motivation_markdown_instruction": "# Checking for a Question\n\nWe're going to start adding some \"intelligence\" to our Movie Bot. Since we've added `includes` it can now tell if its keywords appear anywhere in the input. As a result some inputs may be questions while others might simply be statements. **We'd like the movie bot to respond differently to questions and statements.**\n\nIn order to tell when the user is asking a question **we will be checking whether the input includes a question mark **.\n\n# Do This:\n\n* Add a separate statement to **check if the input includes a \"?\"**. \n* If the input includes a question mark **print \"That's a good question.\" before the recommendation.**\n* Otherwise print **\"I only answer questions.\" before the recommendation.**\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n**Example Input --->** | **Output**\n---|---\nWhat's the best action movie? | That's a good question. The best action movie is any James Bond movie.\nI love comedy | I only respond to questions. The best comedy movie is The Princess Bride.\n<br>\n**Note:** Check out the flowchart below to see the logic we are trying to change.\n\n<img src=\"https://images.code.org/e32fd89b6e03b9d49c94e39e79120c03-image-1446072381510.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/e32fd89b6e03b9d49c94e39e79120c03-image-1446072381510.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "U3 - Movie Bot - When Multiple If Statements_markdown_instruction": "# Adding a Separate *if*\n\nIt's still the case that sometimes you want to have two completely separate groups of `if` statements because there are separate conditions you want to check and possibly have responses for both. You don't always just keep adding to a giant `if` statement forever.\n\nIn the Movie Bot demo you probably saw that if you type \"please\" and \"thank you\" it adds something extra to the response (it says something like \"Thanks for being polite!\"). Let's add this functionality to your movie bot as well. \n\n**Note: ** Check out the flowchart below to see the logic we are trying to add.\n\n# Do This:\n\n* ** Add an `if` and `else-if` statement that checks for \"please\" and \"thank you\"**. \n\t* If the string includes \"please\" it should say \"Thank you for being so polite!\" before it gives its response.\n    * If the string includes \"thank you\" it should say \"You are very welcome!\" before it gives its response.\n\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n<img src=\"https://images.code.org/3dac4019734e63ecbfd4784c82fbd402-image-1461771319064.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/3dac4019734e63ecbfd4784c82fbd402-image-1461771319064.png\" target=\"_blank\">Click to open in separate window.</a>",
        "U3 - Movie Bot - toLowerCase_markdown_instruction": "# Dealing with Character Case\n\nWhat if the user types **ACTION** instead of **action**? These are two different strings to the computer and therefore it won't recognize they are the same. We want Movie Bot to treat words the same ignoring the case of the letters. We can do this using the string command `toLowerCase`.\n\n**Note: ** Check out the flowchart below to see the logic we are trying to add. \n\n# Do This:\n\n* **Try typing COMEDY, ACtioN, horroR, and Romance** into Movie Bot.\n\n* **Use the `toLowerCase` command** to change all user input into lowercase letters after they enter it.\n\n* **Check that COMEDY, ACtioN, horroR, and Romance generate the same recommendations** as comedy, action, horror, and romance.\n\n<img src=\"https://images.code.org/183082e89d296b88112a5a5380afac6c-image-1446069165327.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/183082e89d296b88112a5a5380afac6c-image-1446069165327.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "U3 - Read Record - 1.6_markdown_instruction": "# Data Commands are Slow\n\nTypically we think of programs running one command after the other in the order they are written. This makes it easy to keep track of what is happening in your program. Since commands running locally on your computer happen **essentially instantaneously**, you never get \"stuck\" waiting for one command to finish before running the next one.\n\n**Data commands take a long time to run**. Once your computer sends a request to your database it needs to wait for the response to be sent across the Internet. \n\n**Let's have a look at just how much slower the data commands are**.\n\n\n\n**The array of objects is passed back as the parameter of the callback function for `readRecords`. ** A callback function is required for readRecords just like createRecord as the request out to the database for records will take varying amounts of time and it is necessary to have a way to notify the program once all the records have been collected and return. \n\nRemember that because of scope function **parameters are only accessible inside their function.** Thus we must **use the records from inside the readRecords callback function.**  This is also good programming practice as the asyncronous nature of fetching data from remote locations requires that we **wait for the callback function to be called to know that we have recieved all the information from the data table.**\n\n# Do This\n\n**A set of data has been provided** in a table named 'myTable'\n\n* **Open the Data Viewer** to look at the table in 'myTable'\n* **Add a `readRecords` command** to your app.\n* **Add a `console.log`** inside the callback function of `readRecords` to **print the `records`**\n* Run the program. Notice that the same information from the table is printed in the console.\n\n![](https://images.code.org/fe3db85465b5dd8a983ba5615f4e851d-image-1449504949223.gif)",
        "U3 - Read Record - 3_markdown_instruction": "# Debugging: Wrong Table Name\n\nWhen debugging programs with data commands it's useful to know some common errors you might be making. Let's see what happens when we try to `readRecords` from a table that doesn't exist in our database.\n\n# Do This\n\n**Starter code is provided** that calls `readRecords` and displays the `records` parameter from the callback function.\n\n* **Change the table name** in readRecords to a table that does not exist\n* **Run the program** to see what value is passed to the `records` parameter.\n* **Did you get an error? Did anything else change? Make a note of the behavior you see for future debugging**\n\n<details><summary>**What you should see (read this after trying it yourself)**</summary>If you read from a table that doesn't exist you won't get any error messages and the database will respond with an empty array. Your database is left as it was before.</details>",
        "U3 - Return Values - constrainTurtle_markdown_instruction": "# Use a Function that Returns a Value in an App\n\nWe create functions to **contain blocks of code that will be used multiple times within our program**. The same is true with functions that return values. Let's see an example of how we might use one of the functions we've written.\n\nThis exercise comes with starter code that creates a **simple turtle driver app**. The x and y location of the turtle are stored in the variables `xloc` and `yloc`. An event handler is used to update these values when the **arrow keys are pressed**, and then a separate `updateTurtle` function is called to draw the turtle on the screen.\n\nCurrently the turtle can drive off the screen. If we are clever about how we use our `constrain` function, however, we can prevent this from happening.\n\n# Do This:\n\n* **Starter code** is provided which allows the turtle to move. Additionally a **working version of `constrain`** is provided.\n* **Call the `constrain` function twice** within the `updateTurtle` function to prevent the turtle from going outside the screen.\n\t* One call to the function for `xloc` and one time for `yloc`.\n    * Recall the screen is **320 by 450 pixels**.\n* **Run your app** and confirm the turtle cannot leave the screen.\n\n![](https://images.code.org/f2e24abdf2d4008dfdc4f2ba9e23ff2c-image-1447958362880.gif)",
        "U3 - Return Values - debuggingConstrain_markdown_instruction": "# Debugging and Multiple Return Statements: *constrain*\n\nWe're going to debug another function that uses multiple return statements. The function is called `constrain` and is used to limit an input number to a certain range. The function accepts three parameters.\n\n* `input` : the number to be constrained.\n* `low` : the lower bound of the range. If `input` is below this value, the function should return the value of `low`.\n* `high` : the upper bound of the range. If `input` is above this value, the function should return the value of `high`.\n\n<details>\n<summary>**Click for sample input and output for `constrain`**</summary>\n* `constrain(15,10,20)` should return 15 since it is within the range of 10 to 20.\n* `constrain(5,10,20)` should return 10 since the input is below the range of 10 to 20.\n* `constrain(25,10,20)` should return 20 since the input is above the range of 10 to 20.\n</details>\n<br>\nUnfortunately, because of the way this function was written, it does not always work as expected. In particular, **because of how `return` was used, some portions of the function never run**. Change the structure of the function to **use the pattern you have been shown in previous exercises, included below**.\n<br> <br>\n**Pattern for Functions that Return Values**\n* Use parameters to provide input.\n* Declare a variable that will be used as output, possibly initializing its value.\n* Update the value in your output variable throughout your program.\n* Return your output variable on the last line of your function.\n\n# Do This:\n\n* **Run the program** and identify the errors generated in the output.\n* **Inspect the logic of `constrain`** to identify the logical errors.\n* **Rewrite** `constrain` to make use of the **pattern for functions that return values**, shown above.\n* **Run the program** to ensure it is now running as you expect.\n\n![](https://images.code.org/38afcc5420e084b3146a8b12cc2d0e72-image-1447952855846.07.25 AM.png)",
        "U3 - Simple Drawing - Ellipse and No Fill_markdown_instruction": "# Project Levels\n\nAlright, let's start drawing some pictures! You are going to work on drawing a rainbow. You are going to do this in steps broken out over a series of levels. Don't worry, though; your code will pass from one level to the next as you make updates. As a result, you can work on one project over a bunch of levels. In the future, you will call this a set of **Project Levels**.  Whenever something is part of a set of project levels you will see this warning: \n\n<img src=\"https://images.code.org/f931e61d4b18026d8d615e3ee87a35c4-image-1461785315914.28.23 PM.png\" style=\"width:600px\">\n\n# Draw Rainbow\n<img src=\"https://images.code.org/028794b8d825d5fa6130582e4271abce-image-1460574974541.15.00 PM.png\" style=\"width:200px; float:right\"> \n<img src=\"https://images.code.org/1d76fb4c8742648bff07f9edda631f6f-image-1460736028983.59.44 AM.png\" style=\"width:200px; float:right\">\nIn order to draw a rainbow you are going to use ellipses. You are probably wondering how you can draw a rainbow with circles. You are going to use a sneaky trick! You can hide half of the circle under rectangles so it looks like they don't exist. Check out the images to the right.\n\n# Do This\nThe starter code contains 3 of the ellipses for the rainbow. Your final result should look like the drawing above on the right. You will need to:\n\n* Add 4 more ellipses all with the same x and y position as the first three\n* Size the ellipses appropriately\n\t* The smallest ellipse has a width of 100 and a height of 100\n    * Each ellipse's width and height are 50 bigger than the one inside of it\n* Add a rectangle for grass",
        "U3 - Simple Drawing - Order of Blocks_markdown_instruction": "# Order of Code Matters\n\nThe order of the blocks of code matters. Computer code is read from top to bottom, in order. The computer will run the step on the first line, then the second line, and so on. This means that when you want something at the **back of your picture, it should be at the top of the program** and when you want something at the **front of your picture, it should be at the bottom of the program.**\n\n# Do This\n<img src=\"https://images.code.org/ff378579f623f93e36bdd7c66e091e20-image-1480368475986.27.20 PM.png\" style=\"float:right\">\nThere is another bug in the program. The program is supposed to look like the picture on the right, but when you run it you won't be able to see all the squares. Can you fix it? \n* **DON'T change the values for the rectangles.**\n* **Change the order of the blocks** so that the image looks like the one on the right. ",
        "U3 - Simple Drawing - Road Rects and Color_markdown_instruction": "<img src=\"https://images.code.org/86a9f34aadf57bb8e3b897b8c6ddf52e-image-1460646615062.09.59 AM.png\" style=\"float:right\" width=150>\n\n# Road Drawing\n\n\n\nLet's try out another example! This is going to be another set of project levels. The final product will look like the image on the right, but we'll start by setting up the background, grass, and road.\n\n# Do This\n\n\n<img src=\"https://images.code.org/fcee25a3bbfea2859e0407b73ef9edd8-image-1460644263112.30.18 AM.png\" style=\"float:right\" width=150>\nThere are starter comments to help you out - don't forget to do this as you go!\n* Add rectangles for the background, grass and road\n* Change the colors to appropriate colors for each item used: \n* Remove the black outline\n\nDon't worry about finishing the whole picture right now. You'll do that in the next few levels.",
        "U3 - Simulation - 4_markdown_instruction": "# Changing the Loop Condition: Streaks of Heads\n\nWe want our simulation to run** while the streak of heads is less than a target length**. In order to do this we'll need to change our looping condition to use the variables we've been using to count our streak of heads. To begin with **your simulation should look for a streak of 3 heads** so that you can still visually confirm the output.\n\n# Do This:\n\n* **Change the condition** used by your `while` loop so that it now runs **while the streak of heads is less than 3**.\n* **Test your program** by running it and visually confirming that its output is correct. It should run like in the example below.\n* **Note:** As before it's possible that your output will sometimes run off the screen. You can still confirm your code is working as you intend (it should never run after a streak of 3) and we will address this issue in the next exercise.\n\n![](https://images.code.org/90ec4022f784ba136e59bb9b7c57a5c7-image-1446862623863.gif)",
        "U3 - Sprites and Mod - Clone No Draw Sprites_markdown_instruction": "# Random Shape Color\n\n** Video on Properties**\n\nThe built in variables for sprites are called properties. Properties can be updated with in the draw loop to create animations just like variables.\n\nOne thing you need to be careful of as you write programs with sprites is that you keep `drawSprites` as the last line inside the draw loop. You don't want to draw the sprties until after all the updates in the loop have happened.\n\n# Do This\nCreate a sprite that is set to a new random color every loop of the draw loop.\n\n* Create a new sprite and make sure it draws on the game area\n* Set the `shapeColor` of the sprite to a random color inside the draw loop\n* Run the program and test that it works",
        "U3 - Sprites and Mod - Rotation Direction_markdown_instruction": "<img src=\"https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif\" style=\"width:300px; float:right\">\n# Rotation Direction\n\nWhen you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!\n\n# Do This\n\nThere are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other. \n\n* Make the gears rotate so they look like they are working as one system.\n* **Hint: They won't all rotate the same direction**.",
        "U3 - User Input - Saving After Input_markdown_instruction": "# Saving After Input\n\n\n# Do This\n\n* **Starter Code:**  The starter code has already saved the name to a variable for later use.\n\n* ** Create a variable to store age ** and use `getText()` to save age for later use.\n\n* ** Remember ** you can always check the value of a variable during execution by typing the name of the variable in the Debug Console.",
        "U3 - User Input and String -  Concat_markdown_instruction": "# Concat String\n\nOn the last level we saved the variables as we said we would want to use them in the future. We are going to use them now to print nice messages out to our user welcoming them and congratulating them on their age. \n\nUp until now we have just printed out different variables on separate lines of code. However sometimes we want to combine the variable with some text on the same line. \n\nFor example what if I want to say \"Welcome to the game, Dani!\". I need to be able to combine strings. \n\nThe way we do this is with the + operator. \n\n`var sampleSentence = \"Welcome to my app, \" + name ;`\n\nNote: This may seem a little weird as you can't use any other math symbols on strings but someone decided this was easier than writing out a long method name so they set it up to work nicely for us. \n\n\n\nWe are going to user Text Area to put text onto the screen as it allows you to put longer blocks of text on the screen easily. \n\n\n# Do This\n\n* **Starter Code:**  The starter code looks like your code from the last level expect now we have a Text Area where we output a welcome message to the user.\n\n* ** Add a TextArea ** to put a message about the users age.\n\n* ** Print in the TextArea** \"I never would have guess you were ____\" where the blank is the age they input. \n",
        "U3 - Variables - Identify Variables_markdown_instruction": "# What happened in the last level?\n\nIn the last level we saw the difference between a var name `foo` and one names `Foo`.  Variable names are ** case sensitive** meaning that capital letters are different than lower case letters. \n\n# Debugging Variables: Part 3\n\nSometimes you have lots of console log statments going on at once and its very difficult to tell which part of the code is printing each message. One strategy to deal with this is to name messages by putting some output in front of them. \n\n# Do This\n\n* **Run the program**. Check out what happens when you click Button 1 in comparison to the other buttons.\n\n* **Add `console.log()` statements** for the other buttons to identify where the value is coming from.",
        "U3 - Variables - Increment_markdown_instruction": "# Incrementing Variables\n\nSo far we have seen explicitly changing the value of a variable to a specific value. What if we want to increase the current value by a certain amount? We can add to the current value. This is called **incrementing** a value.\n\n# Do This\n\n* **Run the program** and add `console.log()` statements to see what is happening. \n\n* ** Add another increment of the current variable**\n\n* **Create another variable**\n\n* **Increment the value of the new variable**.",
        "U3 - Variables - Reassigning Variables with Console.log_markdown_instruction": "# Variable Reassignment\n\nSo far we have seen a bunch of programs that create one variable and keep the value of that variable the same through out the program. However somtimes we want to change the value of the variable as the program executes. The rest of the levels in this progression are all about different ways we can change the variable as the program is running. \n\nThe first and most important thing about variable reassignment is that when you want to change the value of the variable you don't say var in front of the name. This tells the computer \"Go look for this variable in your memory because I already made it\".   The computer will go look for the variable in memory and update its value for you.\n\n# Do This\n\n* **Starter Code:** We have started you off with a variable that changes value and a couple `console.log()` statements. \n\n* **Run the program** to see how variable reassignment works.\n\n* ** Change the values of the variable** to see how that changes the program.\n\n* ** Add another reassignment statement** at the end of the program in order to change the value a second time.",
        "U3 - Variables - Set to Expression with Other Variables_markdown_instruction": "# Expressions with Variables\nArithmetic becomes much more interesting when we use other variables in our expressions. For example you can do this:\n\n<table  style=\"margin-left: auto;\n  margin-right: auto; align: center\">\n<tr>\n<td>\n<img src=\"https://images.code.org/13c21437292031a705744a8c2663c0d4-image-1445547765131.png\" style=\"width: 400px;\">\n</td></tr>\n<tr> <td>\n <h3>\n Mental Model\n![](https://images.code.org/b4a2c125508fb06fd653b90c643cb53b-image-1447272790306.png)</h3>\n</td></tr>\n<tr><td><img src=\"https://images.code.org/95eb7e859d04c72ed82ed80023a870cf-image-1445546103564.gif\" style=\"width: 400px;\"></td>\n</tr>\n</table>\n\nThe end result of an expression with variables is the same as one without.  The major difference is that values are retrieved from memory in order to do the calculation rather than simply hard-coded.\n\n# Mental Model Check\nWatch the animation above. To compute the expression the computer will: **first** retrieve each of the values of the variables used in the expression; **then** the arithmetic expression can be evaluated; **finally** the computed value can be stored in memory.\n\n# Do This:\n<img src=\"https://images.code.org/485f61858e45a39e383497c522c94d64-image-1445548216109.png\" style=\"float: right; width: 300px\">\n* **Scenario:** In the starting code we have provided you with variables that might be the kinds of things you would keep track of in a game: `totalTime`, `points` and `lives`.  (see right).\n\n* Right now the `totalScore` is just set to 0.  We want you to compute a final score so that the person is rewarded for having a lot of points and lives, but penalized for taking a lot of time.\n\n* **Write an expression** that calculates the player's total score and stores it in the `totalScore` variable.  The calculation is: **the player's points *times* lives *divided* by the total time.**\n\n* For the values provided the app display should look like this:\n \n<img src=\"https://images.code.org/10c9c6f162004a1b7216ae36c1427478-image-1445548367117.png\" style=\"width: 250px\">\n",
        "U3 - Variables - Set to Expression with Turtle_markdown_instruction": "** @Baker note: not sure what this level should be... was just playing around**\n\n# Variable Expression Assignment Practice\n\nOn the last level we saw how variables can be set to the value of an expression. A good thing to remember is that expressions can contain more than one symbol in them so we are going to practice some of that on this level with turle. \n\n# Do This\n\n* **Run the current program**\n\n* \n\n* ",
        "U3 - Variables - Set to Expression_markdown_instruction": "# Variables and Arithmetic Expressions\nA common thing to want to do is store the result of an arithmetic expression.  The 4 basic arithmetic operations `+ - * /` are available. \n\n<details><summary><strong>Here is a quick table that shows the arithmetic operators with code examples</strong> [click to expand]</summary>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">operation</th>\n<th style=\"text-align:center\">block</th>\n<th style=\"text-align:center\">text</th>\n<th style=\"text-align:center\">example</th>\n<th style=\"text-align:center\">result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">add</td>\n<td style=\"text-align:center\"><img src=\"https://images.code.org/2cf1014a4e0b1dedd361edc73a0f7eb1-image-1445536786715.png\" alt=\"\"></td>\n<td style=\"text-align:center\">`+`</td>\n<td style=\"text-align:center\">`result = 7 + 3;`</td>\n<td style=\"text-align:center\">stores <strong>10</strong> in <em>result</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">subtract</td>\n<td style=\"text-align:center\"><img src=\"https://images.code.org/96b80cd4d866130c7f8567765f9b4b00-image-1445536805959.png\" alt=\"\"></td>\n<td style=\"text-align:center\">`-`</td>\n<td style=\"text-align:center\">`value = 7 - 3;`</td>\n<td style=\"text-align:center\">stores <strong>4</strong> in <em>value</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiply</td>\n<td style=\"text-align:center\"><img src=\"https://images.code.org/3574725201e009142126f39ad1df8a78-image-1445536817791.png\" alt=\"\"></td>\n<td style=\"text-align:center\">`*`</td>\n<td style=\"text-align:center\">`score = 7 * 3;`</td>\n<td style=\"text-align:center\">stores <strong>21</strong> in <em>score</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">divide</td>\n<td style=\"text-align:center\"><img src=\"https://images.code.org/5d470b223717c9daac5246af0d013bdf-image-1445536826467.png\" alt=\"\"></td>\n<td style=\"text-align:center\">`/`</td>\n<td style=\"text-align:center\">`bonus = 7 / 3;`</td>\n<td style=\"text-align:center\">stores <strong>2.3333</strong> in <em>bonus</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">parentheses</td>\n<td style=\"text-align:center\">none</td>\n<td style=\"text-align:center\">`()`</td>\n<td style=\"text-align:center\">`avg = (99 + 85 + 93) / 3;`</td>\n<td style=\"text-align:center\">stores <strong>92.3333</strong> in <em>avg</em></td>\n</tr>\n</tbody>\n</table>\n</details>\n<br>\n# Misconception Alert \n\n<img src=\"https://images.code.org/18eb833aba4a7199a28929dcd43c73f8-image-1445540549754.gif\" style=\"float: right\">\nWhen you have a statement like `result = 5 + 7;` realize that this **does NOT store a mathematical expression in the variable.**  \n\nRather, with this instruction you are asking to compute 5 + 7 and **THEN** store the answer (a single number) in the variable.\n\n# Do This:\n\n**GOAL:** the goal here is mostly to acquaint yourself with typing arithmetic expressions - the answers to the questions below are less important, and should be used as interesting things to investigate.  \n\nWe've given you some **starting code** with 5 statements similar to ones in the table above.\n* **Add `console.log` or `write` statements** to display the values of each of the variables.\n* Experiment with arithmetic expressions, try to make really big and really small numbers.\n\n<hr>\n\n**Things to Try:**\n* Using **multiplication: what's the biggest a number you can store** in a variable?\n  * How many digits are in the biggest number before it starts using scientific notation?\n* Using **subtraction (or multiplication with negative numbers): what's the lowest number you store?** (low means a negative number with a lot of digits)\n* Using **parentheses** make a crazy-big arithmetic expression.  \n  * NOTE: composing arithmetic expressions is ***much* easier in text mode**, and is actually almost unreadable in block mode.  Try doing this in text mode.\n \n",
        "U3 Digital Assistant Design_markdown_instruction": "# Getting Started with Your Digital Assistant\n\n<img src=\"https://images.code.org/e875ff7b54c314a378cdb784f92371a0-image-1445989933171.52.04.png\" style=\"width:200px;float:right;\">\nOver the course of the next few lessons, you'll be __developing your own digital assistant__. To make your digital assistant more useful, it needs to be able to make __decisions__ based on questions the user asks it, and respond intelligently.\n\nTo get started, __choose a topic__ you want your digital assistant to specialize in. It should be something you are interested in and know a lot about. Examples: Country Music, Sushi, College Football, Comedy Movies.\n\nYou'll next set up the layout for your app. __The basic layout contains just two primary design elements:__ a text input and a text area.\n\n# Do This:\n\n- __Choose a topic__ for your digital assistant to specialize in.\n- __Create the layout__ for your app. Your digital assistant should have:\n    - A name\n    - A text input for the user to ask a question\n    - A text area for the digital assistant to respond\n    - The text area should have a greeting for the user (e.g. Ask me a question about movies!)\n",
        "U3 Digital Assistant Set Text_markdown_instruction": "# Respond to Basic User Input\n\n<img src=\"https://images.code.org/2bed8002ff3c89afb02db5809de1c40e-image-1445996503055.gif\" style=\"width:200px;float:right;\">\nNow you can have your digital assistant repeat what the user typed and add a __default response__. It's not the most intelligent response, but you'll build up to that over the next couple of lessons and it's important to build this program in pieces.  \n\n# Looking Back to Move Forward\nYou're going to now add to your program without as much guidance as usual. Keep in mind that __this is very similar to programs you've already built__, so look back at your work for a refresher.\n- __Mad Libs:__ In Mad Libs you got a user's text when the 'Next' button was clicked, filled in the outline with the responses, and displayed the completed Mad Lib\n- __Introducing the 'change' event:__ You just learned about the 'change' event that triggers when the user hits 'enter' on a text input.\n\n# Do This:\n- __Take the user's question and output it to the text area__ when the 'enter' key is pressed in the text input\n- The response should also __include a default phrase__ such as _\"I don't know about that yet!\"_\n- __Format the response with newline characters__ to separate the user's response from the assistant's response.: `\\n`\n- The __text input should clear__ after the user hits 'enter'",
        "U3 Digital Assistant Target - Mehal_markdown_instruction": "# Introduction to the Digital Assistant\n\n__While digital assistants may seem like magic, they are just elaborate computer programs that parse, or process, text__ looking for combinations of words to make decisions about what to reply.\n\nOver the next few lessons, __you're going to build up your own digital assistant that responds \"intelligently\" to a user's question__, by making a decision about what to reply based on the contents.\n\nYou'll now __explore a demo digital assistant__, Movie Bot, that represents the kind of program that you'll build up to. Try out some of the prompts below and also try your own. You'll quickly find the limits of what this program can and can't do.\n\n# Do this\n__Run Movie Bot. In the _'enter your question here'_ input, type each of the following prompts and hit 'enter' __\n- 'help'\n- 'What is the best PG comedy movie ever?'\n- 'What PG comedy movie should I watch next?'\n- 'Could you please tell me the best romance movie?'\n- 'I waNT To WatCH a MovIE!!!'\n- 'What is the capital of Kentucky?'\n- Play around! Ask more questions of Movie Bot and make a prediction about what logic it's using to reply\n",
        "U3 Digital Assistant Target_markdown_instruction": "# Introduction to the Digital Assistant\n\n__While digital assistants may seem like magic, they are just elaborate computer programs that parse, or process, text__ looking for combinations of words to make decisions about what to reply.\n\nOver the next few lessons, __you're going to build up your own digital assistant that responds \"intelligently\" to a user's question__, by making a decision about what to reply based on the contents.\n\nYou'll now __explore a demo digital assistant__, Movie Bot, that represents the kind of program that you'll build up to. Try out some of the prompts below and also try your own. You'll quickly find the limits of what this program can and can't do.\n\n# Do This:\n__Run Movie Bot. In the _'enter your question here'_ input, type each of the following prompts and hit 'enter.' __\n- 'help'\n- 'What is the best PG comedy movie ever?'\n- 'What PG comedy movie should I watch next?'\n- 'Could you please tell me the best romance movie?'\n- 'I waNT To WatCH a MovIE!!!'\n- 'What is the capital of Kentucky?'\n- Play around! Ask more questions of Movie Bot and make a prediction about what logic it's using to reply.\n",
        "U3 Variables flower example_markdown_instruction": "# Drawing with Variables\n\n**Get excited because you're about to see your first variable used in a program!** You won't need to write any new lines of code. Instead run the program and then try changing the number assigned to the variable `petalSize` in line 3. Be ready to discuss the changes you see and why you think they're happening.\n\n# Do This\n\n* Change the value assigned to `petalSize` and rerun the program.\n* **Turn to a neighbor and discuss:**\n\t* What changes in your program when you change this value?\n    * Where in the code can you see the value of `petalSize` being used?",
        "U3 Variables make a square_markdown_instruction": "# Drawing with Variables\n\nYou're going to start using **variables** in your programs. Variables are like **containers that can store a single piece of information**. There are only three ways to use a variable:\n\n* **Create** a new variable\n* **Assign a value** to a variable (Assign is just a fancy word for \"give\")\n* **Use the value** currently assigned to a variable \n\nYou'll be learning how to use each type of command, but first have a look at a program that makes use of all three.\n\n# Do This\n\n* **Run the program once** to see how it works\n* **Change the number in line 2** and rerun the program\n* **Discuss / Reflect:** \n\t* What changed when you ran the program? Why do you think this happened?\n\t* On each line do you think you are **creating**, **assigning**, or **using** the variable?\n    * Don't worry if you're confused, we're just exploring for now.",
        "U3 mehal's clone_markdown_instruction": "# Introduction to the Digital Assistant\n\n__While digital assistants may seem like magic, they are just elaborate computer programs that parse, or process, text__ looking for combinations of words to make decisions about what to reply.\n\nOver the next few lessons, __you're going to build up your own digital assistant that responds \"intelligently\" to a user's question__, by making a decision about what to reply based on the contents.\n\nYou'll now __explore a demo digital assistant__, Movie Bot, that represents the kind of program that you'll build up to. Try out some of the prompts below and also try your own. You'll quickly find the limits of what this program can and can't do.\n\n# Do this\n__Run Movie Bot. In the _'enter your question here'_ input, type each of the following prompts and hit 'enter' __\n- 'help'\n- 'What is the best PG comedy movie ever?'\n- 'What PG comedy movie should I watch next?'\n- 'Could you please tell me the best romance movie?'\n- 'I waNT To WatCH a MovIE!!!'\n- 'What is the capital of Kentucky?'\n- Play around! Ask more questions of Movie Bot and make a prediction about what logic it's using to reply\n",
        "U3- Variables - Changing the Value_markdown_instruction": "# Variable Reassignment\n\nOur old friend Turtle is back! Turtle is going to allow us to easily play with some variables. \n\nIn the programs we have seen so far the value of the variable stays the same through the whole program. You don't have to keep a variable the same value for the whole program. We can change its value as the program runs.\n\n# Do This\n\n* ** Run the code** and see what happens.\n\n* ** Update the value of 'turnAmount' before each moveForward** so the turtle turns a different amount each time.",
        "U3- Variables - Create And Assign_markdown_instruction": "# Create and Assign At Once\n\nIt's so common to want to create a variable and give it an initial value, that JavaScript has a shortcut that lets you create and assign with one line of code like this:\n\n<img src=\"https://images.code.org/84b576f02fe92989d0955dc8d4122eed-image-1445480709312.png\" style=\"width:120px\">\n\n\nYou'll also see a new block in the toolbox for this (see right).<img src=\"https://images.code.org/cbe3f9ffd0bafef72ce18232f746fdbe-image-1445480538334.gif\" style=\"float: right; width: 350px\">\n\n# Do This:\nWe'll just quickly practice using this form of variable creation and assignment.  The code you write will achieve the same thing as the previous level in fewer lines of code. \n\n* **Create a variable called `lives`** and **assign it the value 3** using the new one-line version of this command. (See animation at right.)\n\n* **Add** `console.log` statements to display the value of `lives` just as before.  \n\n* The output in the console should (again) look like this:\n \n <img src=\"https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png\" style=\"border: solid 1px gray\">\n\n",
        "U3- Variables - Text Mode_markdown_instruction": "# Give Text Mode a Try!\nThe block-based mode of programming is useful for getting code into your app fast and error free.  But sometimes those little tiny edits are a pain. **Use text mode instead!**  Text mode is designed to make typing code fast and easy, and it also gives a lot of help to make your code error free. \n\nLet's re-create these variables again, but explore some features of text mode this time.\n\n# Try Each of These 3 Things\nWe've given you the first two lines of code in a program. \nExpand each box below and try what's suggested - each builds on the previous one, so you might want to go in order.\n\n<details>\n<summary>1. **Switch to text mode and try to type.** [click to expand]</summary>\n \n Switch to text mode and **type out a `console.log` statement** to display the value of `score`.<br>\n <img src=\"https://images.code.org/d8cd6968bbb5fb5b5a8b8b3e41ee7ad1-image-1445353098262.gif\" style=\"width: 500px\">\n</details><br>\n\n<details>\n<summary>2. **Drag blocks into text mode.** [click to expand]</summary>\n\n If you don't want to type *everything* you can drag a block from the toolbox into text mode and it will show you the text version of it. **Add code to create the `lives` variable and a `console.log` message**.<br>\n \n <img src=\"https://images.code.org/b755a871221705ebdc73e73ffbfd1ad0-image-1445353101095.gif\" style=\"width: 500px\">\n\n</details><br>\n\n<details>\n<summary>3. **Check out code completion.** [click to expand]\n</summary>\n When you type commands a tool tip pops up that tries to guess what you're trying to type. If you see what you want in the box, **highlight it** (you can use arrow keys) and then **hit the tab key**. It will auto-complete the code for you!<br>\n \n <img src=\"https://images.code.org/177d70ab086d1481ad2ba5d367379aff-image-1445353103029.gif\" style=\"width: 500px\">\n </details>",
        "U3-AP-Practice-Choose-The-Abstraction_markdown_instruction": "# AP Practice - Identify the Abstraction\n\nOne component of the **AP Create Performance Task** is selecting an abstraction that you developed.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>3. Program Code</b>\n<ul>\n<li>Mark with a <b>rectangle</b> the segment of program code that represents an abstraction you developed.</li>\n</ul>\n</div>\n<br>\n\nHere's the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/341764b27f16965cf27680e20c893a23-image-1508190677805.50.59 PM.png\">\n</div>\n\n# Choose the Student-Created Abstraction\n\nThe program code below is from a program a student developed. \n\n![](https://images.code.org/86d48cfc2c9c81551aa059281e9c62f3-image-1508189804595.34.48 PM.png)\n\n**Write which of the rectangles (A, B, C, or D) is placed around a student-developed abstraction.**\n\n**Then explain your answer using the criteria in the scoring guide.**",
        "U3-AP-Practice-Choose-The-Abstraction_2018_markdown_instruction": "# AP Practice - Identify the Abstraction\n\nOne component of the **AP Create Performance Task** is selecting an abstraction that you developed.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>3. Program Code</b>\n<ul>\n<li>Mark with a <b>rectangle</b> the segment of program code that represents an abstraction you developed.</li>\n</ul>\n</div>\n<br>\n\nHere's the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/341764b27f16965cf27680e20c893a23-image-1508190677805.50.59 PM.png\">\n</div>\n\n# Choose the Student-Created Abstraction\n\nThe program code below is from a program a student developed. \n\n![](https://images.code.org/86d48cfc2c9c81551aa059281e9c62f3-image-1508189804595.34.48 PM.png)\n\n**Write which of the rectangles (A, B, C, or D) is placed around a student-developed abstraction.**\n\n**Then explain your answer using the criteria in the scoring guide.**",
        "U3-AP-Practice-FR-design-process_markdown_instruction": "# AP Practice - Performance Task Response\n\nTop-down design is design process and strategy for breaking down complex things.  The AP Create Peformance task asks you to write about your development process when writing code.  \n\nLet's take a minute to understand this writing prompt and how it is scored. Here is the actual writing prompt **2b** from the AP Create Task guidelines:\n\n<div style=\"width: 70%; margin: auto; font-family: serif; font-size: 12pt; line-height: 1.3; background-color: #EEEEEE; padding: 10px\">\n\n<b>2b.</b> Describe the incremental and iterative development process of your program, focusing on two distinct points in that process. Describe the difficulties and/or opportunities you encountered and how they were resolved or incorporated. In your description clearly indicate whether the development described was collaborative or independent. At least one of these points must refer to independent program development. <i>(Must not exceed 200 words)</i>\n</div>\n<br>\nYour response to this prompt can get up to 2 points, and is scored looking at two major things:\n\n1. (1 point) Do you describe a real *iterative* process for writing the *whole* program - \"Incremental and iterative\" means that you continuously improved your program based on testing, reflection, or feedback from a partner.\n\n2. (1 point) Do you actually describe *two* points in time while writing your code, what the specific issue was, and how you got past it by *reflecting* or *incorporating feedback* from a collaborative partner.\n\nHere are the actual scoring guidelines:\n\n![](https://images.code.org/1cb4a1840d281a9c5c5096becc8c9054-image-1507827422107.png)\n\n## Now you try it\n\nTry to write a response to this AP Prompt thinking about either how you developed the idea for the snowflake drawing program, or how you resolved to make the 3x3 grid program.  You might have to use a little bit of imagination to assume that it's part of a larger program you created yourself.  The point is to *practice writing* about your development process.\n\nNOTE: Writing a response like this will take some time to think about and compose.",
        "U3-AP-Practice-FR-design-process_2018_markdown_instruction": "# AP Practice - Performance Task Response\n\nTop-down design is design process and strategy for breaking down complex things.  The AP Create Peformance task asks you to write about your development process when writing code.  \n\nLet's take a minute to understand this writing prompt and how it is scored. Here is the actual writing prompt **2b** from the AP Create Task guidelines:\n\n<div style=\"width: 70%; margin: auto; font-family: serif; font-size: 12pt; line-height: 1.3; background-color: #EEEEEE; padding: 10px\">\n\n<b>2b.</b> Describe the incremental and iterative development process of your program, focusing on two distinct points in that process. Describe the difficulties and/or opportunities you encountered and how they were resolved or incorporated. In your description clearly indicate whether the development described was collaborative or independent. At least one of these points must refer to independent program development. <i>(Must not exceed 200 words)</i>\n</div>\n<br>\nYour response to this prompt can get up to 2 points, and is scored looking at two major things:\n\n1. (1 point) Do you describe a real *iterative* process for writing the *whole* program - \"Incremental and iterative\" means that you continuously improved your program based on testing, reflection, or feedback from a partner.\n\n2. (1 point) Do you actually describe *two* points in time while writing your code, what the specific issue was, and how you got past it by *reflecting* or *incorporating feedback* from a collaborative partner.\n\nHere are the actual scoring guidelines:\n\n![](https://images.code.org/1cb4a1840d281a9c5c5096becc8c9054-image-1507827422107.png)\n\n## Now you try it\n\nTry to write a response to this AP Prompt thinking about either how you developed the idea for the snowflake drawing program, or how you resolved to make the 3x3 grid program.  You might have to use a little bit of imagination to assume that it's part of a larger program you created yourself.  The point is to *practice writing* about your development process.\n\nNOTE: Writing a response like this will take some time to think about and compose.",
        "U3-AP-Practice-FR-manage-complexity_markdown_instruction": "# AP Practice - Performance Task Response\n\nThe AP Create Performance task asks you to write about an abstraction that you developed and wrote into your code. Most of the time that means identifying a function or procedure you wrote to help \"manage complexity\" in your program.\n\nHere is the actual prompt from the Create Performance Task:\n\n<div style=\"width: 70%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2d.</b> Capture and paste a program code segment that contains an abstraction you developed individually on your own (marked with a <b>rectangle</b>). This abstraction must integrate mathematical and logical concepts. Explain how your abstraction helped manage the complexity of your program.\n<br>\n<i>(Must not exceed 200 words)</i>\n\n</div>\n\n<br>\n\nBelow is a segment of code from an \"under the sea\" program with a rectangle drawn around a portion of the code identifying an abstraction. Imagine that you wrote this and are composing an AP response about how this abstraction manages complexity.  (Note: ignore the requirement that the abstraction integrate \"mathematical and logical concepts\" for this practice response.  Just write about managing complexity).\n\n![](https://images.code.org/d98fa58fce78eff86fd734f32e2960e4-image-1507913593511.png)\n\nExplain how the abstraction marked with the rectangle in the code above helps manage complexity of this program.",
        "U3-AP-Practice-FR-manage-complexity_2018_markdown_instruction": "# AP Practice - Performance Task Response\n\nThe AP Create Performance task asks you to write about an abstraction that you developed and wrote into your code. Most of the time that means identifying a function or procedure you wrote to help \"manage complexity\" in your program.\n\nHere is the actual prompt from the Create Performance Task:\n\n<div style=\"width: 70%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2d.</b> Capture and paste a program code segment that contains an abstraction you developed individually on your own (marked with a <b>rectangle</b>). This abstraction must integrate mathematical and logical concepts. Explain how your abstraction helped manage the complexity of your program.\n<br>\n<i>(Must not exceed 200 words)</i>\n\n</div>\n\n<br>\n\nBelow is a segment of code from an \"under the sea\" program with a rectangle drawn around a portion of the code identifying an abstraction. Imagine that you wrote this and are composing an AP response about how this abstraction manages complexity.  (Note: ignore the requirement that the abstraction integrate \"mathematical and logical concepts\" for this practice response.  Just write about managing complexity).\n\n![](https://images.code.org/d98fa58fce78eff86fd734f32e2960e4-image-1507913593511.png)\n\nExplain how the abstraction marked with the rectangle in the code above helps manage complexity of this program.",
        "U3-AP-Practice-FR-score-abstraction-response_markdown_instruction": "# AP Practice - Scoring a PT Response\n\nIn this scenario imagine that **you are scoring an AP Performance Task response.**  Below we show the student's submitted code as well as their written response for writing prompt **2d**.\n\nAs a reminder, here is that prompt:\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2d.</b> Capture and paste a program code segment that contains an abstraction you developed individually on your own (marked with a <b>rectangle</b>). The abstraction must integrate mathematical and logical concepts. Explain how your abstraction helped manage the complexity of your program. \n<br>\n<i>(Must not exceed 200 words)</i>\n</div>\n<br>\n\nAnd here is the student written response that goes with the code shown at right:\n\n<div style=\"width: 80%; margin: auto; background-color: #d9eff7; padding: 10px; font-family: monospace; font-size: 12pt; line-height: 18pt; display: inline-block\">\n\n<img src=\"https://images.code.org/732ea3633d67312724382facaa281955-image-1507928836621.png\" style=\"float: right; margin-right: 40px\">\n<strong>Student response:</strong><br>\n2d).\nThe abstraction I have identified draws a heart in the program.  The whole program draws a picture with turtle graphics that says \"I [heart] CS\" where the [heart] is actually a drawing of a heart shape. Because I am using the parameterized versions of these turtle functions it helps manage the complexity of the code. Without the parameters the drawing is achieve-able but would require many many more lines of code.  For example: the command to <code>arcRight(220, 30)</code>  - which moves the turtle in a 220-degree arc with a 30-pixel radius - is possible to do with a long series of repeated <code>moveForward</code>, and <code>turnRight</code> commands, possibly hundreds. By using the <code>arcRight</code> command I encapsulate in one line what the code should be doing rather than having to reason about hundreds of lines of code.\n</div>\n<div style=\"clear: both\"></div>\n<br>\nUse the scoring guide (shown below) to determine if the student should be awarded the point for each of the two criteria about abstractions (row 7 and 8)\n\n![](https://images.code.org/478c762d2ac876b8b830caabd62c1571-image-1507929333152.png)\n\n# You score it\nEach row of the scoring guide one is worth one point, so response 2d is worth up to 2 points total.  Should the student get 0, 1 or 2 points total?\n\nBelow explain how you would score it, and why you would or wouldn't award the point for each row. Cite the specific criteria in the scoring guide to justify your response.",
        "U3-AP-Practice-FR-score-abstraction-response_2018_markdown_instruction": "# AP Practice - Scoring a PT Response\n\nIn this scenario imagine that **you are scoring an AP Performance Task response.**  Below we show the student's submitted code as well as their written response for writing prompt **2d**.\n\nAs a reminder, here is that prompt:\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2d.</b> Capture and paste a program code segment that contains an abstraction you developed individually on your own (marked with a <b>rectangle</b>). The abstraction must integrate mathematical and logical concepts. Explain how your abstraction helped manage the complexity of your program. \n<br>\n<i>(Must not exceed 200 words)</i>\n</div>\n<br>\n\nAnd here is the student written response that goes with the code shown at right:\n\n<div style=\"width: 80%; margin: auto; background-color: #d9eff7; padding: 10px; font-family: monospace; font-size: 12pt; line-height: 18pt; display: inline-block\">\n\n<img src=\"https://images.code.org/732ea3633d67312724382facaa281955-image-1507928836621.png\" style=\"float: right; margin-right: 40px\">\n<strong>Student response:</strong><br>\n2d).\nThe abstraction I have identified draws a heart in the program.  The whole program draws a picture with turtle graphics that says \"I [heart] CS\" where the [heart] is actually a drawing of a heart shape. Because I am using the parameterized versions of these turtle functions it helps manage the complexity of the code. Without the parameters the drawing is achieve-able but would require many many more lines of code.  For example: the command to <code>arcRight(220, 30)</code>  - which moves the turtle in a 220-degree arc with a 30-pixel radius - is possible to do with a long series of repeated <code>moveForward</code>, and <code>turnRight</code> commands, possibly hundreds. By using the <code>arcRight</code> command I encapsulate in one line what the code should be doing rather than having to reason about hundreds of lines of code.\n</div>\n<div style=\"clear: both\"></div>\n<br>\nUse the scoring guide (shown below) to determine if the student should be awarded the point for each of the two criteria about abstractions (row 7 and 8)\n\n![](https://images.code.org/478c762d2ac876b8b830caabd62c1571-image-1507929333152.png)\n\n# You score it\nEach row of the scoring guide one is worth one point, so response 2d is worth up to 2 points total.  Should the student get 0, 1 or 2 points total?\n\nBelow explain how you would score it, and why you would or wouldn't award the point for each row. Cite the specific criteria in the scoring guide to justify your response.",
        "U3-Design Mode-Image_markdown_instruction": "# Adding Images\n\nTo practice using images in Design Mode we are going to **recreate the \"Chaser Game\"** from the last lesson.\n\n# Do This:\n\n* **Add an Image element** ![](https://images.code.org/cda02ffe3acc869822a551f5cdbf8606-image-1444667846363.37.14 AM.png)\n* **Choose your image** ![](https://images.code.org/e5b9571ae54af60a3ae597b787e741ea-image-1444667688762.34.42 AM.png)\n\t* **URLs** can be added directly into the \"picture\" field.  \n\t* **Upload images** by clicking \"Choose\".\n\t* **Note:** You can always see all the files you've uploaded by clicking the gear at the top of the toolbox. ![](https://images.code.org/53b405b771bc11bf5d24c84c878c80dd-image-1444668067826.35.10 AM.png)\n* **Insert an event handler** for the image.\n* From here you can **work in Code Mode** to complete the remainder of your application. Recall that in the \"Chaser Game\" you just need an image that runs away from the mouse.\n* If you have time **use Design Mode** to quickly improve some of the visual components of your game.",
        "U3L03 Three Steps_markdown_instruction": "# Do This:\n<img src=\"https://images.code.org/5f20ab5fd8b95754e8cfc948a4b41522-image-1441772307480.png\" align=right width=200>\nWe are going to continue to build up towards a diamond by **defining** a function that draws one side of the diamond.\nIf you look at the whole image we are trying to draw, you'll notice that each of 4 sides is comprised of 3 calls to `drawStep()`, plus a few extra moves (shown in orange).\n\nRight now we'll write the code for one of those sides. So...\n\n**Define** a new function named `drawSide()` which makes three calls in a row to `drawStep()` followed by a `moveForward()` and `right()`.  \n\n**Replace** the original function call to `drawStep()` with a call to your newly defined `drawSide()` function. \n\nThe diagrams below show the intended actions.\n<table>\n<tr>\n<td>![](https://images.code.org/480f6787e4d2daf34d67642e25b29de6-image-1441772552026.png) </td>\n<td>![](https://images.code.org/02f52d406854d6f86535adf2f593ccc9-image-1441772709549.gif) </td>\n</tr>\n</table>\n\n\n",
        "U3L03 Three Steps_2018_markdown_instruction": "# Do This:\n<img src=\"https://images.code.org/5f20ab5fd8b95754e8cfc948a4b41522-image-1441772307480.png\" align=right width=200>\nWe are going to continue to build up towards a diamond by **defining** a function that draws one side of the diamond.\nIf you look at the whole image we are trying to draw, you'll notice that each of 4 sides is comprised of 3 calls to `drawStep()`, plus a few extra moves (shown in orange).\n\nRight now we'll write the code for one of those sides. So...\n\n**Define** a new function named `drawSide()` which makes three calls in a row to `drawStep()` followed by a `moveForward()` and `right()`.  \n\n**Replace** the original function call to `drawStep()` with a call to your newly defined `drawSide()` function. \n\nThe diagrams below show the intended actions.\n<table>\n<tr>\n<td>![](https://images.code.org/480f6787e4d2daf34d67642e25b29de6-image-1441772552026.png) </td>\n<td>![](https://images.code.org/02f52d406854d6f86535adf2f593ccc9-image-1441772709549.gif) </td>\n</tr>\n</table>\n\n\n",
        "U3L06 Challenge 1 triangle_markdown_instruction": "# Terminology: *Parameter*\n\nWhen you have a command like: `moveForward(100)` we say that the `moveForward()` command *accepts a **parameter***.  And 100 is the value *given* or *supplied* to `moveForward()`'s **parameter**.  Since this value can change, you will often see a written description for the command that looks something like **`moveForward(pixels)`** to indicate that the value supplied to `moveForward()`'s **parameter** should be the number of pixels you want it move.\n\nThe good old `moveForward()` command still exists.  In fact it's the **same command** as `moveForward(pixels)`. The \"parameter-less\" version of `moveForward()` simply supplies a **default value** to the parameter.  We might also say that the `moveForward()` command has an **optional parameter** since you could call either `moveForward()` or `moveForward(50)` and it doesn't cause an error when you run the program.\n\nNOTE: you can write your own functions that accept parameters, too!  But we'll get to that in later lessons.\n\n# New Commands!\n\nCheck it out.  The turtle toolbox now contains the *parameterized* versions of the turtle commands including `turnLeft(angle)` and `turnRight(angle)`.  Notice that `penUp()` and `penDown()` don't have parameters.  \n\n# Do This:\n\nUse the parameterized versions of the commands to draw a triangle with sides that are 100 pixels long.\n\n<img src=\"https://images.code.org/0207568ff82b0571fa6757081330749d-image-1441901783815.png\" width=150>",
        "U3L06 Challenge 1 triangle_2018_markdown_instruction": "# Terminology: *Parameter*\n\nWhen you have a command like: `moveForward(100)` we say that the `moveForward()` command *accepts a **parameter***.  And 100 is the value *given* or *supplied* to `moveForward()`'s **parameter**.  Since this value can change, you will often see a written description for the command that looks something like **`moveForward(pixels)`** to indicate that the value supplied to `moveForward()`'s **parameter** should be the number of pixels you want it move.\n\nThe good old `moveForward()` command still exists.  In fact it's the **same command** as `moveForward(pixels)`. The \"parameter-less\" version of `moveForward()` simply supplies a **default value** to the parameter.  We might also say that the `moveForward()` command has an **optional parameter** since you could call either `moveForward()` or `moveForward(50)` and it doesn't cause an error when you run the program.\n\nNOTE: you can write your own functions that accept parameters, too!  But we'll get to that in later lessons.\n\n# New Commands!\n\nCheck it out.  The turtle toolbox now contains the *parameterized* versions of the turtle commands including `turnLeft(angle)` and `turnRight(angle)`.  Notice that `penUp()` and `penDown()` don't have parameters.  \n\n# Do This:\n\nUse the parameterized versions of the commands to draw a triangle with sides that are 100 pixels long.\n\n<img src=\"https://images.code.org/0207568ff82b0571fa6757081330749d-image-1441901783815.png\" width=150>",
        "U3L06 Challenge 4 bullseye_markdown_instruction": "# Hexadecimal Colors\n\nIn reading the documentation, you may have noticed that `penColor()` can accept colors in the **hexadecimal format (e.g. \"#AC9100\")**. Colors on websites will often be represented in this format. It's useful to know how to interpret and use this format when trying  to duplicate colors in your own images.\n\n**Read the documentation:** Review the documentation for `penColor()` and pay particular attention to how to define colors in hexadecimal.\n\n# Do This:\n**Draw the bullseye: ** Draw the bullseye below using a combination of `penColor()` and `dot()`.\n\n***Hint:*** *The sample image was created using three of the following hexadecimal colors: #00ABDC, #CC4400, #1188CC, #006699, #11CC00. Can you recall how hexadecimal color works to select the correct colors on your first try?*\n\n<img src=\"https://images.code.org/d53ae656d6eeae3611449b65db669242-image-1441981098736.png\" style=\"height: 250px\">\n\n**Remember:** The hex colors must have quotes around them so penColor(â#FF0099â)  not penColor(#FF0099).",
        "U3L06 Challenge 4 bullseye_2018_markdown_instruction": "# Hexadecimal Colors\n\nIn reading the documentation, you may have noticed that `penColor()` can accept colors in the **hexadecimal format (e.g. \"#AC9100\")**. Colors on websites will often be represented in this format. It's useful to know how to interpret and use this format when trying  to duplicate colors in your own images.\n\n**Read the documentation:** Review the documentation for `penColor()` and pay particular attention to how to define colors in hexadecimal.\n\n# Do This:\n**Draw the bullseye: ** Draw the bullseye below using a combination of `penColor()` and `dot()`.\n\n***Hint:*** *The sample image was created using three of the following hexadecimal colors: #00ABDC, #CC4400, #1188CC, #006699, #11CC00. Can you recall how hexadecimal color works to select the correct colors on your first try?*\n\n<img src=\"https://images.code.org/d53ae656d6eeae3611449b65db669242-image-1441981098736.png\" style=\"height: 250px\">\n\n**Remember:** The hex colors must have quotes around them so penColor(â#FF0099â)  not penColor(#FF0099).",
        "U3L06 Challenge 5 overlapping circles_markdown_instruction": "# Transparency - Red, Green, Blue, Alpha\n\nThere is another command that lets you set the pen color called `penRGB(r,g,b,a)`.\n\n* The first 3 parameters are for values (in the range 0-255) for the red, green, and blue channels. \n* The 4th parameter `a` stands for \"alpha\".  The \"alpha channel\" for color lets you set the level of **opacity** as a decimal value between 0 and 1 - it is interpreted as a percentage, so 0.5 equates to 50% opaque.  For example: `penRGB(113, 102, 160, 0.5)`.\n\n# Do This:\n\n**Read the Documentation:** To figure out how to use `penRGB()` go read the documentation, paying special attention to the syntax used to give a command **multiple values**.\n\n<img src=\"https://images.code.org/3247af8d88da11a042d0bd9a76b49f12-image-1441982501960.png\" style=\"height: 250px; float: left; margin: 10px\">\n\n**Draw the circles: ** \n\nUse `penRGB()` and `dot()` to draw two overlapping circles as shown in the image.\n",
        "U3L06 Challenge 5 overlapping circles_2018_markdown_instruction": "# Transparency - Red, Green, Blue, Alpha\n\nThere is another command that lets you set the pen color called `penRGB(r,g,b,a)`.\n\n* The first 3 parameters are for values (in the range 0-255) for the red, green, and blue channels. \n* The 4th parameter `a` stands for \"alpha\".  The \"alpha channel\" for color lets you set the level of **opacity** as a decimal value between 0 and 1 - it is interpreted as a percentage, so 0.5 equates to 50% opaque.  For example: `penRGB(113, 102, 160, 0.5)`.\n\n# Do This:\n\n**Read the Documentation:** To figure out how to use `penRGB()` go read the documentation, paying special attention to the syntax used to give a command **multiple values**.\n\n<img src=\"https://images.code.org/3247af8d88da11a042d0bd9a76b49f12-image-1441982501960.png\" style=\"height: 250px; float: left; margin: 10px\">\n\n**Draw the circles: ** \n\nUse `penRGB()` and `dot()` to draw two overlapping circles as shown in the image.\n",
        "U3L06 Challenge 6 squiggles_markdown_instruction": "# Multiple Parameters - Making Arcs\n\nMany commands need more than one parameter to make sense. When a command needs more than one parameter, the parameters are separated by commas and the **order of the parameters matters**.\n\nTwo new commands have been added to the block palette, `arcLeft()` and `arcRight()` which both accept two parameters.\n\n**Read the documentation: ** Read the documentation for `arcLeft()` and `arcRight()` .\n\n<img src=\"https://images.code.org/320a5e54abb95b267738d5e15946b51c-image-1441985535028.png\" style=\"height: 250px; float: left; margin: 10px\">\n\n# Do This:\n\n**Draw a squiggly line: ** \n\nUsing `arcLeft` and `arcRight` along with the ones you have already learned draw a **purple squiggle on a blue background**. Feel free to use any of the methods for choosing colors you have already learned.\n\n\n\nHints:\n* To make the figure exactly, you need to turn before calling arcLeft or arcRight to orient the turtle first.\n* The parameters to arcLeft and arcRight are the same and they are multiples of 10\n* The colors are \"PowderBlue\" and \"Purple\" - though you can use other colors if you like.",
        "U3L06 Challenge 6 squiggles_2018_markdown_instruction": "# Multiple Parameters - Making Arcs\n\nMany commands need more than one parameter to make sense. When a command needs more than one parameter, the parameters are separated by commas and the **order of the parameters matters**.\n\nTwo new commands have been added to the block palette, `arcLeft()` and `arcRight()` which both accept two parameters.\n\n**Read the documentation: ** Read the documentation for `arcLeft()` and `arcRight()` .\n\n<img src=\"https://images.code.org/320a5e54abb95b267738d5e15946b51c-image-1441985535028.png\" style=\"height: 250px; float: left; margin: 10px\">\n\n# Do This:\n\n**Draw a squiggly line: ** \n\nUsing `arcLeft` and `arcRight` along with the ones you have already learned draw a **purple squiggle on a blue background**. Feel free to use any of the methods for choosing colors you have already learned.\n\n\n\nHints:\n* To make the figure exactly, you need to turn before calling arcLeft or arcRight to orient the turtle first.\n* The parameters to arcLeft and arcRight are the same and they are multiples of 10\n* The colors are \"PowderBlue\" and \"Purple\" - though you can use other colors if you like.",
        "U3L06 Challenge 7 smiley face_markdown_instruction": "# Moving Relative to the Screen\n\nThe turtle commands we've seen so far move the turtle **relative to the turtle's location and direction**. If you want to get the turtle to a specific position on the screen using only `moveForward()` or `turnLeft()`, you need to know the turtle's location beforehand.\n\nTwo new commands in the toolbox help resolve this issue. `moveTo()` moves the turtle to a location on the screen based on its X and Y coordinates. `turnTo()` turns the turtle in a specific direction. Together these commands can make many drawings easier to complete.\n\n# Do This:\n\n**Read the documentation: ** Read the documentation for `moveTo()` and `turnTo()`. Pay specific attention to how the coordinate system is arranged in App Lab as it is different from what you might have seen in a math class.\n\n**Draw the smiley: ** Use these new commands to help you draw the smiley face pictured below.\n\n**HINT: ** You can't really do this one without using `penUp()` and `penDown()`.\n\n![](https://images.code.org/20cab2a0b3a4fdfd53d7a1876963fa10-image-1441990625064.png)",
        "U3L06 Challenge 7 smiley face_2018_markdown_instruction": "# Moving Relative to the Screen\n\nThe turtle commands we've seen so far move the turtle **relative to the turtle's location and direction**. If you want to get the turtle to a specific position on the screen using only `moveForward()` or `turnLeft()`, you need to know the turtle's location beforehand.\n\nTwo new commands in the toolbox help resolve this issue. `moveTo()` moves the turtle to a location on the screen based on its X and Y coordinates. `turnTo()` turns the turtle in a specific direction. Together these commands can make many drawings easier to complete.\n\n# Do This:\n\n**Read the documentation: ** Read the documentation for `moveTo()` and `turnTo()`. Pay specific attention to how the coordinate system is arranged in App Lab as it is different from what you might have seen in a math class.\n\n**Draw the smiley: ** Use these new commands to help you draw the smiley face pictured below.\n\n**HINT: ** You can't really do this one without using `penUp()` and `penDown()`.\n\n![](https://images.code.org/20cab2a0b3a4fdfd53d7a1876963fa10-image-1441990625064.png)",
        "U3L07 - allSeaGrass_markdown_instruction": "# Add Seagrass\n<img src=\"https://images.code.org/a67f893ea9187b253ec4f6abcb16b7cf-image-1443048301130.30.42 PM.png\" style=\"width: 200px; float: right\">\nOur new version of `drawSeagrass` now draws a single piece of seagrass with a random height.  Now let's use a loop in `drawAllSeagrass` to fill the sea floor with it.\n\n# Do This:\n\n* **Add a `for` loop** to `drawAllSeagrass` that draws about **50 pieces** of seagrass using your updated `drawSeagrass` function.\n\n",
        "U3L07 - allSeaGrass_2018_markdown_instruction": "# Add Seagrass\n<img src=\"https://images.code.org/a67f893ea9187b253ec4f6abcb16b7cf-image-1443048301130.30.42 PM.png\" style=\"width: 200px; float: right\">\nOur new version of `drawSeagrass` now draws a single piece of seagrass with a random height.  Now let's use a loop in `drawAllSeagrass` to fill the sea floor with it.\n\n# Do This:\n\n* **Add a `for` loop** to `drawAllSeagrass` that draws about **50 pieces** of seagrass using your updated `drawSeagrass` function.\n\n",
        "U3L07 - bubbles_markdown_instruction": "# Add Bubbles\n<img src=\"https://images.code.org/ffeec83d7bb838f87f46ec1638710440-image-1443019519379.44.49 AM.png\" style=\"width: 200px; float: right\">\nThe first high-level function you will write is `drawAllBubbles`. You may have noticed that the bubbles in the image look very similar to the dots example we've already drawn in this lesson. Now we'll use that skill to add to our image.\n\n# Do This:\n\n* **Read** the `drawBubble` function to know how it works and what **parameters** it accepts.\n\n* **Modify the code** of `drawAllBubbles`:\n  * **Add a loop** inside the function.\n  * **Move the commands that were already inside the function *inside the loop* instead** -- In other words \"wrap a loop around the existing lines of code that are inside the function. This way your code will move the turtle randomly and call `drawBubble` many times.\n  * **Set the number of iterations** in your loop so that the screen is filled with bubbles. Try starting with 200 and then adjust to whatever number you like.",
        "U3L07 - bubbles_2018_markdown_instruction": "# Add Bubbles\n<img src=\"https://images.code.org/ffeec83d7bb838f87f46ec1638710440-image-1443019519379.44.49 AM.png\" style=\"width: 200px; float: right\">\nThe first high-level function you will write is `drawAllBubbles`. You may have noticed that the bubbles in the image look very similar to the dots example we've already drawn in this lesson. Now we'll use that skill to add to our image.\n\n# Do This:\n\n* **Read** the `drawBubble` function to know how it works and what **parameters** it accepts.\n\n* **Modify the code** of `drawAllBubbles`:\n  * **Add a loop** inside the function.\n  * **Move the commands that were already inside the function *inside the loop* instead** -- In other words \"wrap a loop around the existing lines of code that are inside the function. This way your code will move the turtle randomly and call `drawBubble` many times.\n  * **Set the number of iterations** in your loop so that the screen is filled with bubbles. Try starting with 200 and then adjust to whatever number you like.",
        "U3L07 - callingFunctionsInLoops_markdown_instruction": "# Calling functions in loops\n\nFor more complex drawings with repeated sections **combining loops and functions** can make your code efficient to write and easy to read.\n\nYou're about to see a program in which a function called `forwardAndLoop()` has been defined. \n\n**Call ** the function without a loop to see how it runs.\n\n**Use** a loop to **call the function multiple times** and complete the figure below.\n\n![](https://images.code.org/ac935a93a639d6608d91afbcee0aebb1-image-1442850398315.46.27 AM.png)",
        "U3L07 - introSquare_markdown_instruction": "# Getting Started with Loops\n\nA **loop** is a block of code that is repeated or \"looped through\" in a program. You will be creating a loop using the `for` loop block.\n\nWe'll start by experimenting with a program similar to what you saw in the video.\n\n# Do This:\n* **Drag** out a `for` loop block.\n* **Inside the loop:**\n\t* **Add** a call to `moveForward`.\n    * **Add** a call `turnLeft`. (HINT: try turning by 137 degrees to start. You can change after that.)\n    \n![](https://images.code.org/4da4a0c8a10a3c9637df96507fece183-image-1443038466204.gif)\n\n* **Run** the program to see the loop in action.\n* **Experiment:**\n  * **Change** the number of times the loop runs.\n  * **Increase** the run speed to see how fast loops can execute.\n  * **How many times** can the loop run before you can no longer tell the difference in the image?\n \n**Move on** once you feel like you have a decent grasp of using a `for` loop: setting the number of times to repeat, running the program, and setting the run speed.\n\n",
        "U3L07 - introSquare_2018_markdown_instruction": "# Getting Started with Loops\n\nA **loop** is a block of code that is repeated or \"looped through\" in a program. You will be creating a loop using the `for` loop block.\n\nWe'll start by experimenting with a program similar to what you saw in the video.\n\n# Do This:\n* **Drag** out a `for` loop block.\n* **Inside the loop:**\n\t* **Add** a call to `moveForward`.\n    * **Add** a call `turnLeft`. (HINT: try turning by 137 degrees to start. You can change after that.)\n    \n![](https://images.code.org/4da4a0c8a10a3c9637df96507fece183-image-1443038466204.gif)\n\n* **Run** the program to see the loop in action.\n* **Experiment:**\n  * **Change** the number of times the loop runs.\n  * **Increase** the run speed to see how fast loops can execute.\n  * **How many times** can the loop run before you can no longer tell the difference in the image?\n \n**Move on** once you feel like you have a decent grasp of using a `for` loop: setting the number of times to repeat, running the program, and setting the run speed.\n\n",
        "U3L07 - loopsWithRandom_markdown_instruction": "# Using Multiple Loops\n\nSome repeated tasks can't easily be solved with a single loop. Instead, you'll need to use **one loop after another**, each one solving a part of the problem. \n\n# Do This:\n\nAdd a loop to fill the screen with semi-transparent white dots until the original dots are \"erased\".\n\n<img src=\"https://images.code.org/329912b3c61cc62acbd36035ff4b823a-image-1443109101866.gif\" style=\"float: right; width: 100px\">\n* **Drag ** a second loop into your code that will run after the first loop.\n* **Add** commands to draw dots in random locations that are white with opacity set to 0.5.\n* **Increase the iterations** so that the colored dots are totally erased. How many does it take?\n\nHINT: you can copy/paste the original loop and just change the color of the dots and number of iterations.\n\n",
        "U3L07 - loopsWithRandom_2018_markdown_instruction": "# Using Multiple Loops\n\nSome repeated tasks can't easily be solved with a single loop. Instead, you'll need to use **one loop after another**, each one solving a part of the problem. \n\n# Do This:\n\nAdd a loop to fill the screen with semi-transparent white dots until the original dots are \"erased\".\n\n<img src=\"https://images.code.org/329912b3c61cc62acbd36035ff4b823a-image-1443109101866.gif\" style=\"float: right; width: 100px\">\n* **Drag ** a second loop into your code that will run after the first loop.\n* **Add** commands to draw dots in random locations that are white with opacity set to 0.5.\n* **Increase the iterations** so that the colored dots are totally erased. How many does it take?\n\nHINT: you can copy/paste the original loop and just change the color of the dots and number of iterations.\n\n",
        "U3L07 - seaGrass_markdown_instruction": "# Controlling Loops with Parameters\n<img src=\"https://images.code.org/37d6dbcab707f67485ab3b0cc2a1cae9-image-1443114033511.png\" style=\"width: 200px; float: right\">\nThis time you will modify one of the lower-level functions - `drawSeagrass`. Notice that the current version of `drawSeagrass` actually uses a loop. We want to modify this function so that we control the number of times it loops with **a parameter**.\n\n# Do This:\n\n* **Look at** the `drawSeagrass` function to see how it currently works.\n\n* **Add a parameter ** that will be used to indicate how many waves the seagrass makes.\n\n<img src=\"https://images.code.org/1f2f0c5e1fc17e541760c4f0fd24b13b-image-1447887194713.7.10 drawSeagrass add param.gif\" style=\"width:350px;padding-left:22px;\">\n\n* **Modify the `'for` loop** so that it uses that **parameter** as the number of times to repeat.\n\n ![](https://images.code.org/23e8e43ec4853c0bdbbbd50b9651300a-image-1443113032135.gif)\n \n* Finally, **modify `drawAllSeagrass`** to call this new two-param version of `drawSeagrass` supplying a reasonable random value for the second parameter as well.\n\n<img src=\"https://images.code.org/4f15021cd9cebb62562665d3ddc82c51-image-1447885963677.PNG\" style=\"width:400px;padding-left:22px;\">",
        "U3L07 - seaGrass_2018_markdown_instruction": "# Controlling Loops with Parameters\n<img src=\"https://images.code.org/37d6dbcab707f67485ab3b0cc2a1cae9-image-1443114033511.png\" style=\"width: 200px; float: right\">\nThis time you will modify one of the lower-level functions - `drawSeagrass`. Notice that the current version of `drawSeagrass` actually uses a loop. We want to modify this function so that we control the number of times it loops with **a parameter**.\n\n# Do This:\n\n* **Look at** the `drawSeagrass` function to see how it currently works.\n\n* **Add a parameter ** that will be used to indicate how many waves the seagrass makes.\n\n<img src=\"https://images.code.org/1f2f0c5e1fc17e541760c4f0fd24b13b-image-1447887194713.7.10 drawSeagrass add param.gif\" style=\"width:350px;padding-left:22px;\">\n\n* **Modify the `'for` loop** so that it uses that **parameter** as the number of times to repeat.\n\n ![](https://images.code.org/23e8e43ec4853c0bdbbbd50b9651300a-image-1443113032135.gif)\n \n* Finally, **modify `drawAllSeagrass`** to call this new two-param version of `drawSeagrass` supplying a reasonable random value for the second parameter as well.\n\n<img src=\"https://images.code.org/4f15021cd9cebb62562665d3ddc82c51-image-1447885963677.PNG\" style=\"width:400px;padding-left:22px;\">",
        "U3L07 - sunBeams_markdown_instruction": "# Add Sunbeams\n<img src=\"https://images.code.org/9e08dae8486f66422d492b8d8a6777eb-image-1443048962131.55.54 PM.png\" style=\"width: 200px; float: right\">\nFinally, we'll add some visual flourish by writing `drawAllSunbeams`. Note: The `turnTo` command makes the turtle face a random direction prior to drawing each sun beam.\n\n# Do This:\n\n* **Read** the `drawSunbeam` function to know how it works and what **parameters** it accepts.\n\n* **Add a loop** to `drawAllSunbeams` to draw about 100 sunbeams. Inside your loop:\n \n* **Place the commands already inside the function in your loop.** This way your code will move the turtle to a random x location at the top of the image (y is 0), `turnTo` a random angle between **165 and 175 degrees**, and call `drawSunbeam`.\n",
        "U3L07 - sunBeams_2018_markdown_instruction": "# Add Sunbeams\n<img src=\"https://images.code.org/9e08dae8486f66422d492b8d8a6777eb-image-1443048962131.55.54 PM.png\" style=\"width: 200px; float: right\">\nFinally, we'll add some visual flourish by writing `drawAllSunbeams`. Note: The `turnTo` command makes the turtle face a random direction prior to drawing each sun beam.\n\n# Do This:\n\n* **Read** the `drawSunbeam` function to know how it works and what **parameters** it accepts.\n\n* **Add a loop** to `drawAllSunbeams` to draw about 100 sunbeams. Inside your loop:\n \n* **Place the commands already inside the function in your loop.** This way your code will move the turtle to a random x location at the top of the image (y is 0), `turnTo` a random angle between **165 and 175 degrees**, and call `drawSunbeam`.\n",
        "U3L07 - topDownDesign_markdown_instruction": "# Top-Down Design\n<img src=\"https://images.code.org/b4379f51db96b8b1c921de2579e16357-image-1443011791766.21.53 AM.png\" style=\"width: 150px; float: right\">\nLook at this complex version of the \"Under the Sea\" scene you drew in the previous lesson. **You now have all the skills you need to recreate this digital scene.**\n\nWe will use **Top-Down Design** to help manage the complexity of drawing this image. The starter code you will be provided already has broken the problem into multiple levels.\n\n# Overview of Program Structure\nYou are about to see that we've provided you with a good amount of starting code.  Here's a brief tour:\n\n**High-Level Function Calls:** These read almost like a story of how you will draw the image. There's one function for every major component of the scene.\n\n<img src=\"https://images.code.org/c07a9b544ab982a91c7cd99339cbe3c9-image-1447885047812.PNG\" style=\"width:200px;\">\n\n**High-Level Function Definitions:** These currently draw **a single copy of each component**. You will add code to these functions to draw many copies of each component in a variety of sizes and colors.\n\n![](https://images.code.org/1782d088206fede56df1e93482d35faa-image-1443019051470.37.20 AM.png)\n\n**Low-Level Functions:** These draw single elements of the scene. Most have been written for you already, but we've left a few for you to complete as well.\n\n![](https://images.code.org/bb081efc86641155eae5f4d363e3ccf4-image-1443019108814.38.22 AM.png)\n\n\n# Do This:\n\n* Review the structure of the code in this level.\n* Run the code to familiarize yourself with what it currently draws.\n* When you are ready to do so, move on!",
        "U3L07 - topDownDesign_2018_markdown_instruction": "# Top-Down Design\n<img src=\"https://images.code.org/b4379f51db96b8b1c921de2579e16357-image-1443011791766.21.53 AM.png\" style=\"width: 150px; float: right\">\nLook at this complex version of the \"Under the Sea\" scene you drew in the previous lesson. **You now have all the skills you need to recreate this digital scene.**\n\nWe will use **Top-Down Design** to help manage the complexity of drawing this image. The starter code you will be provided already has broken the problem into multiple levels.\n\n# Overview of Program Structure\nYou are about to see that we've provided you with a good amount of starting code.  Here's a brief tour:\n\n**High-Level Function Calls:** These read almost like a story of how you will draw the image. There's one function for every major component of the scene.\n\n<img src=\"https://images.code.org/c07a9b544ab982a91c7cd99339cbe3c9-image-1447885047812.PNG\" style=\"width:200px;\">\n\n**High-Level Function Definitions:** These currently draw **a single copy of each component**. You will add code to these functions to draw many copies of each component in a variety of sizes and colors.\n\n![](https://images.code.org/1782d088206fede56df1e93482d35faa-image-1443019051470.37.20 AM.png)\n\n**Low-Level Functions:** These draw single elements of the scene. Most have been written for you already, but we've left a few for you to complete as well.\n\n![](https://images.code.org/bb081efc86641155eae5f4d363e3ccf4-image-1443019108814.38.22 AM.png)\n\n\n# Do This:\n\n* Review the structure of the code in this level.\n* Run the code to familiarize yourself with what it currently draws.\n* When you are ready to do so, move on!",
        "U3L08 - createTwoParamTriangle_markdown_instruction": "# Defining Functions with Multiple Parameters\n\nNow it's your turn to define a function that accepts multiple parameters. Just like in the previous example make sure you **separate your parameters with commas** and give them **descriptive and meaningful** names.\n\n# Do This:\n* **Drag out ** the function block, and **name** your function `drawTriangle`. \n* **Define `drawTriangle` to have two parameters ** within the parentheses making sure to give them **descriptive and meaningful** names separated by commas. \n* The example below uses *size* and *width* for parameter names but you can use whatever you like.\n\n![](https://images.code.org/b1f5eead2ccb60e5ae607feff590bd3c-image-1442850344677.gif)\n\n*  Then **write ** the code inside `function drawTriangle(size, width)` that will make it work as described.\n* Test it out!  **Run ** the code and experiment to create an image similar to the one below.\n\n![](https://images.code.org/a389c07c259c8877989b6920328a4c78-image-1442529590755.39.38 PM.png)\n\n",
        "U3L08 - createTwoParamTriangle_2018_markdown_instruction": "# Defining Functions with Multiple Parameters\n\nNow it's your turn to define a function that accepts multiple parameters. Just like in the previous example make sure you **separate your parameters with commas** and give them **descriptive and meaningful** names.\n\n# Do This:\n* **Drag out ** the function block, and **name** your function `drawTriangle`. \n* **Define `drawTriangle` to have two parameters ** within the parentheses making sure to give them **descriptive and meaningful** names separated by commas. \n* The example below uses *size* and *width* for parameter names but you can use whatever you like.\n\n![](https://images.code.org/b1f5eead2ccb60e5ae607feff590bd3c-image-1442850344677.gif)\n\n*  Then **write ** the code inside `function drawTriangle(size, width)` that will make it work as described.\n* Test it out!  **Run ** the code and experiment to create an image similar to the one below.\n\n![](https://images.code.org/a389c07c259c8877989b6920328a4c78-image-1442529590755.39.38 PM.png)\n\n",
        "U3L08 - drawSquareWithParam - for video_markdown_instruction": "# Defining and using a function with a parameter\nFrom the video, you learned that defining multiple functions to draw different sized squares results in lots of repetitive functions - they are essentially the same, with a few numbers changed - and this is not desirable.\nAny time you find yourself effectively copy and pasting large sections of code, it's usually a sign that there is a better way.\n\n# Do This\nUh oh! Something's wrong! We've set up a program that runs, but doesn't do what it's supposed to do. The program is supposed to make a drawing with two squares that looks like this:\n\n<img src=\"https://images.code.org/3eae30651dabc2f83a8bbbbbf8bea7ad-image-1442420537113.26.34 AM.png\" style=\"width: 150px;\"> \n\nWe've given you the `drawSquare(size)`function that was created in the video, but it's not quite right. Fix the code inside the function so that the program creates the drawing correctly.\n\n**HINT:** You should only need to change one thing about an existing line of code. You don't need to add or remove any lines of code. Remember: The parameter `size` acts like a placeholder for a value that gets plugged into each call to `moveForward()`.\n\n",
        "U3L08 - drawSquareWithParam_markdown_instruction": "# Defining and Using a Function with a Parameter\nFrom the video, you learned that defining multiple functions to draw different sized squares results in lots of repetitive functions - they are essentially the same, with a few numbers changed - and this is not desirable.\nAny time you find yourself effectively copy and pasting large sections of code, it's usually a sign that there is a better way.\n\n# Do This:\nUh oh! Something's wrong! We've set up a program that runs, but doesn't do what it's supposed to do. The program is supposed to make a drawing with two squares that looks like this:\n\n<img src=\"https://images.code.org/3eae30651dabc2f83a8bbbbbf8bea7ad-image-1442420537113.26.34 AM.png\" style=\"width: 150px;\"> \n\nWe've given you the `drawSquare(size)`function that was created in the video, but it's not quite right. **Fix the code inside the `drawSquare` function so that the program creates the drawing correctly.**\n\n**HINT:** You should only need to change one thing about an existing line of code. You don't need to add or remove any lines of code. Remember: The parameter `size` acts like a placeholder for a value that gets plugged into each call to `moveForward()`.\n\n",
        "U3L08 - drawSquareWithParam_2018_markdown_instruction": "# Defining and Using a Function with a Parameter\nFrom the video, you learned that defining multiple functions to draw different sized squares results in lots of repetitive functions - they are essentially the same, with a few numbers changed - and this is not desirable.\nAny time you find yourself effectively copy and pasting large sections of code, it's usually a sign that there is a better way.\n\n# Do This:\nUh oh! Something's wrong! We've set up a program that runs, but doesn't do what it's supposed to do. The program is supposed to make a drawing with two squares that looks like this:\n\n<img src=\"https://images.code.org/3eae30651dabc2f83a8bbbbbf8bea7ad-image-1442420537113.26.34 AM.png\" style=\"width: 150px;\"> \n\nWe've given you the `drawSquare(size)`function that was created in the video, but it's not quite right. **Fix the code inside the `drawSquare` function so that the program creates the drawing correctly.**\n\n**HINT:** You should only need to change one thing about an existing line of code. You don't need to add or remove any lines of code. Remember: The parameter `size` acts like a placeholder for a value that gets plugged into each call to `moveForward()`.\n\n",
        "U3L08 - introUnderTheSea - clone for recovery_markdown_instruction": "# Recover your Under the Sea project code!\n\nBelow you should see your code for the Under the Sea project from CSP Unit 3 - Lesson 8 in the state it was in around 3pm ET, Monday Oct. 30, 2017.\n\n**Students:** To get the code below back into Unit 3 - Lesson 8...\n* Select all your code from the workspace below (Highlight with mouse, or ctrl+A)\n* Copy it (Edit -> Copy, or ctrl+C)\n* Paste it (Edit -> Paste, or ctrl+V) into the project in Unit 3\n    * Here is a link to the project that will open in a new window: <a href=\"https://studio.code.org/s/csp3/stage/8/puzzle/17\" target=_blank>https://studio.code.org/s/csp3/stage/8/puzzle/17</a>\n\n**Teachers:** You can view your students' work here using the blue teacher tray.  Alternatively, you can ask students to use the process above.\n\n**Details:**\n* The Under the Sea code is a \"project\" that sat behind eight levels (\"bubbles\") 10-17 in Unit 3, Lesson 8.  \n* On Oct. 30, 2017 we updated that project in a way that caused code to appear missing for those who had done work prior to the change.\n* Your code still exists! It's just associated with the old project, which is what we have provided below.\n* You can copy and paste your code from below into any of the current Unit 3, Lesson 8, levels 10-17 and it will work for all. (In other words, the code for level 17 is actually referring to the same project as levels 10-17)\n\nWe're sorry about this mistake and for the inconvenience and disappointment it may have caused. Hopefully, you were able to recover the code you worked so hard on.\n\nIf you have further questions please submit a bug report (option in the top-right menu) or send email to support@code.org\n\nThanks,\n\nCSP Team",
        "U3L08 - introUnderTheSea with comments_markdown_instruction": "# Under the Sea!\n\nIn the next several challenges you will be working to improve **one program** that draws an underwater scene.  Each time you  finish a puzzle and move on to the next one, your code will be pulled forward and you'll get new instructions telling you what to add. **Read through ** the program provided to get a basic understanding of what it does.\n\n# Do This:\n\n* **Add function calls ** to the top of the program so that **two fish, two starfish, and two pieces of seagrass** appear somewhere in the scene. You don't need to provide values for the parameters at this stage.\n\n* **Hint:** you need to call `moveTo` before drawing a second fish, starfish or seagrass, otherwise you won't see the second one because it will draw exactly over the first one -- those functions draw based on where the turtle is just before the call.\n\n* **Test out your code**. If something doesnât work like you expect, consider whether you can add anything to the functionsâ definitions to make them better.\n\n* **Continue ** to the next level, **where your code will be waiting for you.**\n\n![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35 PM.png)",
        "U3L08 - introUnderTheSea_markdown_instruction": "# Under the Sea!\n\nIn the next several challenges you will be working to improve **one program** that draws an underwater scene.  Each time you  finish a puzzle and move on to the next one, your code will be pulled forward and you'll get new instructions telling you what to add.\n\n# Do This:\n\n* **Read through ** the program provided to get a basic understanding of what it does.\n* **Add function calls ** in the early lines of the program (somewhere after the background is drawn) so that **two fish, two starfish, and two pieces of seagrass** appear somewhere in the scene. You don't need to provide values for the parameters at this stage.\n* **Hint:** you need to call `moveTo` before drawing a second fish, starfish or seagrass, otherwise you won't see the second one because it will draw exactly over the first one -- those functions draw based on where the turtle is just before the call.\n* Test out your code. If something doesnât work like you expect, consider whether you can add anything to the functionsâ definitions to make them better.\n* **Continue ** to the next level, **where your code will be waiting for you.**\n\n![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35 PM.png)",
        "U3L08 - introUnderTheSea_2018_markdown_instruction": "# Under the Sea!\n\nIn the next several challenges you will be working to improve **one program** that draws an underwater scene.  Each time you  finish a puzzle and move on to the next one, your code will be pulled forward and you'll get new instructions telling you what to add.\n\n# Do This:\n\n* **Read through ** the program provided to get a basic understanding of what it does.\n* **Add function calls ** in the early lines of the program (somewhere after the background is drawn) so that **two fish, two starfish, and two pieces of seagrass** appear somewhere in the scene. You don't need to provide values for the parameters at this stage.\n* **Hint:** you need to call `moveTo` before drawing a second fish, starfish or seagrass, otherwise you won't see the second one because it will draw exactly over the first one -- those functions draw based on where the turtle is just before the call.\n* Test out your code. If something doesnât work like you expect, consider whether you can add anything to the functionsâ definitions to make them better.\n* **Continue ** to the next level, **where your code will be waiting for you.**\n\n![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35 PM.png)",
        "U3L08 - starFish_markdown_instruction": "# Under the Sea\n\nIn the next several levels you will be working to improve the **same program** that draws an under the sea image. Your code will be pulled forward as you receive new instructions.\n\n**Read through ** the program here to understand what it does.\n\n**Add function calls ** to the top of the program so that there are now **two fish, two starfish, and two pieces of seagrass** in the image. Place them wherever you like.\n\n**Continue ** to the next level, **where your code will be waiting for you.**\n\n![](https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35 PM.png)",
        "U3L13 - Debug Id Problem_markdown_instruction": "# Choosing Good IDs\n\n<img src=\"https://images.code.org/f968ce4b09d2500b224af1bf9bacbacd-image-1444155536105.png\" style=\"float: right\">**Good IDs** are **meaningful and descriptive**.\nJust like good names for functions, you will want an ID to describe the intended purpose of the element.  For example, if you have many buttons in your program, you will want to give each an ID that describes what the button does. For example \"forwardButton\", \"leftButton\", etc.\n\n**IDs are also case-sensitive** which means you'll want to develop a style for capitalizing IDs. A common strategy is to use a style called **camelcase**.  In camelcase style, words are combined together with no spaces and each new word, after the first, is capitalized. itTypicallyLooksLikeThis.  \n\n**Why?** Many computer systems do not allow keywords like function names and IDs to contain spaces.  You've already seen several examples like this: `moveForward`, `onEvent`, `turnLeft`, etc.  It's important to realize that camelcase is a style convention, not a hard and fast rule. Sometimes you'll see other styles such as using underscores: `move_forward`, `turn_left`.  But in App Lab we typically use camelcase.\n\n# Rules About IDs\nIn making descriptive and meaningful IDs there **are some rules about IDs** you need to know.  IDs...\n* cannot contain spaces.\n* *must* begin with a letter (A-Z or a-z) and may be followed by any number of digits and letters.\n* can contain hyphens (\"-\"), underscores (\"_\"), colons (\":\"), or periods (\".\").\n\n# Do This:\nThe code you will begin with has an error. If you run it, you'll see that the ID of the button and the event handler don't match.\n\n* **Improve ** the button ID by choosing a **descriptive and meaningful** ID.\n* **Change ** the event handler so that it correctly references the button by its new ID.\n* **Run ** the program to make sure it works.\n",
        "U3L13 - Debugging 1_markdown_instruction": "# Debugging Event-Driven Programs: IDs\n\n**Debugging:** As you write more complex event-driven programs, you'll need to polish your **debugging** skills. Debugging involves locating and correcting errors within a program. It is a critical (and generally unavoidable) step when writing code.<img src=\"https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif\" style=\"float: right; width: 200px\">\n\n**Target Application:** In the next three exercises, you'll debug this application (shown at right) which has two buttons, one for moving forward and one for turning left.\n\n**Debug the problem**:\nIn each problem, we've added various errors into the program and it does not work as intended. You will need to find the errors, debug the problems, and make corrections such that the program works correctly.\n\n**Checking IDs:** Your first debugging task will be to verify that the button IDs match the event-handlers. **Remember that IDs are case-sensitive**.\n\n# Do This:\n**Run the program** and inspect the warnings to find the error.\n\n**Debug ** the program and correct the errors so that it works as intended.\n\n**Run the program** and verify that both buttons have the intended functionality.\n",
        "U3L13 - Debugging 2_markdown_instruction": "# Debugging Event-Driven Programs: Ordering Event Handlers\n\n**Ordering Event Handlers: ** Event handlers must come **after the object they reference in the code**. If your event handler comes before your object (in this case a button) your computer would be looking for an event on an object that does not yet exist. You will get an error message and your code will not work as you intend.<img src=\"https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif\" style=\"float: right; width: 150px\">\n\n**Target Application:** Just like the last exercise, you'll again try to make an app that has two buttons, one for moving forward and one for turning left.  \n\nOnce again, we've introduced a new error.\n\n# Do This:\n**Run the Existing program** to see the error that gets generated.\n\n**Debug ** this program so that it works as intended.\n\n**Run the program ** and try both buttons to make sure they have the intended functionality.",
        "U3L13 - Debugging 3_markdown_instruction": "# Debugging Event-Driven Programs: Logical Errors\nYou're getting good at debugging now!\n\n**Logical Errors: ** Sometimes you can write a program that generates no errors but does not work as you intend. This is the result of **logical errors** in your code. These can be tricky to catch without knowing what your program is supposed to do in the first place, and usually are only found with careful testing of your app's functionality.\n<img src=\"https://images.code.org/b5d00d8027dae463eebb7f1c079cb2e2-image-1444156708725.gif\" style=\"float: right; width: 150px\">\n\n**Target Application:** Just as in the last exercise, you'll try to make an app that has two buttons, one for moving forward and one for turning left.\n\nOnce again we've introduced an error or two (a logical error this time) for you to debug.\n\n# Do This:\n**Run the program ** and experiment to see what's wrong.\n\n**Debug ** this program so that it works as intended.\n\n**Run the program ** and try both buttons to make sure they have the intended functionality.",
        "U3L13 - Turtle Driver Project_markdown_instruction": "# Create a Turtle Driver App!\n\nAt this point you know enough about buttons and event handlers, and how to debug some common issues that arise to be able to **build your own \"turtle-driver\" app** from scratch. \n\n**Build up the program bit by bit**. Don't try to write all the code at once.  Add a button with an event handler, make sure it works, debug any problems, and then move on to the next part.\n\n# Do This:\n\n**Create ** an application with **four buttons**, one for moving the turtle forward and one each for turning left and right.  The fourth button should do whatever you like.\n\n**Use descriptive and meaningful IDs** for your buttons and ensure your event handlers work as you intend.\n\n**If you have extra time** add more buttons that use other turtle commands you'd like to include.  You can also use colors, and different line widths, dots, etc. ",
        "U3L14 - User Input Division calculator_markdown_instruction": "# Assigning User Input to Variables\n<img src=\"https://images.code.org/bad81f7d5e514a1d727e51aab52aac10-image-1445552999503.gif\" style=\"width: 350px; float:right\">\nLet's use `promptNum` to make a simple calculator. The `promptNum` command appears in the variables toolbox because it's typically used as a way to get a value from the user that you want to hold on to while the program runs.\n\n`promptNum` is similar to `randomNumber` in that it is a function whose return value *evaluates to a number*. The difference here is that `promptNum` pops up an input dialog box and waits for the user to type a number.  Once they do and hit \"OK\" the number they typed is returned and we can store it in a variable to use in our programs.\n\n\n# Do This:\nWrite a program that acts as a simple calculator. (An animation of the end result is shown at right.) <img src=\"https://images.code.org/e644d4b17d1d6fdb6b5a93651d512f8a-image-1445552700557.gif\" style=\"width: 250px; float: right\">\n* Ask the user to **enter a number**.\n* Then ask the user to **enter a second number**.\n* **Display the result** of *some* calculation.\n  * The example shows division but you may choose something else if you like.\n\nWe have given you starting code that shows you how to get the first number.  The rest of the code is up to you.\n\n",
        "U3L14 - Variable ReAssignment pt2_markdown_instruction": "# Variable Re-assignment - Part 2: Updating Values\n\nAll of our examples so far have shown how to set the value of a variable by using combinations of numbers and other variables.  But what if you wanted to do something like **add 10 to the *current* value of a variable**? \n\nBecause updating the value in a variable is just moving memory around, the process has to go something like this:\n* Read the current value of a variable.\n* Add 10 to it.\n* Store the new value back into the same variable.\n\nThe technical term for this is called **variable re-assignment** - when you change the value of a variable based on its current contents.   To increase the value of `num1` by 10 you actually need to do this:\n\n<img src=\"https://images.code.org/c49b1a0fb81de4b90558fdb278e40987-image-1445942169121.png\" style=\"float:right\">\n```\nnum1 = num1 + 10;\n```\nThe diagram at right shows a picture of what's happening (it assumes the value of `num1` is 7 before the line is executed).  It's actually very similar to what happens with plain old arithmetic: compute a value, then store it in a variable.  Because the computation has to happen before storing the result in a variable, there is no contradiction here.\n\n<details>\n<Summary><strong>Common Mistakes & Tips</strong> [click to expand]</Summary>\n\n<h3>\nMistake 1\n</h3>\n<p>To increase the value of variable by 10 (for example) a common mistake is to think that this statement alone will do the trick.\n</p><p>\n\n```\nnum1 + 10;\n```\n</p><p>\nIt doesn't. This tells the computer to add 10 to whatever the value of `num1` is.  And the computer will do that, and the result will go....nowhere.  It will be lost.\n</p><p>\nBecause you are trying assign a new value to a variable it should make sense that **the = sign must be involved somehow**.  \n</p>\n<h3>\nMistake 2\n</h3>\n<p>\nIf you were in math class this statment would make no sense:\n```\nnum1 = num1 + 10;\n```\n</p><p>\nBut **remember to read = as \"gets.\"** If you read the statement above as: \"num1 *gets* the value of num1's current value plus 10\" it might make more sense.  Get in the habit of using \"gets.\"\n</p>\n</details>\n\n# Do This:\n\n  * **Make a prediction.**\n We start you out with some code again (see below). \n\n <img src=\"https://images.code.org/60b25394c387bc111451f0e481528733-image-1447800367736.43.42.png\" style=\"width: 500px;\"> \n\n Trace the code and predict what you think will be printed to the console.  (NOTE: We're serious about this \"make a prediction\" stuff. When you force yourself to make a prediction about what code will do you will learn faster since it triggers you to apply your mental model of what's happening.)\n  \n  * **Run the program** to see if you were right.\n \n  * **Add a `console.log` statement**.\n \n  We've left you with a *little bit* of programming to do: add a `console.log` statement at the end of the program to see the last value of `someNum` to see if your full prediction is correct.\n",
        "U3L14 - concatenate simple_markdown_instruction": "# Text and Variables Living Together!\n\nSometimes itâs useful to display text along with the value of a variable in the same line of output. To do this you use `+` to attach a variable onto a literal string of characters.  Here is an example:\n\n<img src=\"https://images.code.org/a35e68b062fc814871a8323938cf3384-image-1445888147995.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\">\n\nNotice that the `+` operator has **two different meanings in JavaScript depending on what type of data you're applying it to**. Click the explanations below for more details.\n\n<details>\n<summary>If **both operands are numbers** `+` means to add those two numbers together.</summary>\n\nThis is standard addition.  It works both with numbers and with variables that contain numbers, as shown below.<br>\n\n<img src=\"https://images.code.org/eb50a1fcea459fe74774d903b07a274f-image-1445887814602.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\n\nBecause `num1` is a variable that holds a number, and 10 itself is obviously a number, in this case `+` will do addition like you would expect.\n\n</details>\n<br>\n<details>\n<summary>If **either of the operands is a string** `+` treats both as if they were strings and combines them to create a single string.</summary>\nThis is potentially confusing behavior and can get pretty weird if the text *looks* like numbers.  For example, this code will display **16100** to the screen.<br>\n\n<img src=\"https://images.code.org/a9c54b664bd192aa5bf611808d88a3bc-image-1445887893598.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\n\nWhy? Because JavaScript sees you trying to display a mix of text and variable values. \"16\" (in quotes) is a string of ASCII characters not a number.  And so JavaScript converts everything to text, and the characters in the result of \"16\"+\"100\" comes out to \"16100\". \n\n</details>\n<br>\n \n**TIP:** It's common to want to sandwich a variable between some text when displaying it.  You can string together multiple pieces of text and variables using the `+` operator.  For example, you can do this:\n<br> \n\n<img src=\"https://images.code.org/65b0e277f058903bd3b956cc59ee5253-image-1445887976271.png\" style=\"border: solid 1px #BBBBBB; height: 30px;\"><br>\n \n<br>\n<details>\n<summary>**Misconception Alert**</summary>\n\nThe **key thing to understand** about the `+` symbol is that it can _only_ do actual arithmetic addition if the values on either side of the `+` are actually numbers or variables that contain numbers. \n\n**And** if the `+` symbol cannot determine whether the value is a number then it **assumes it's a string**, and converts everything to a string and tries to concatenate it.  \n \nThe computer relies on you - the programmer - to make sure that the **type of data** stored in a variable is appropriate for the task at hand.\n</details><br>\n\nOn the next screen we'll have you play with this a little bit, but you'll write statements to display a mix of text and strings from here on out.\n\n# Do This:\nWe have given you the starting code shown below.  You should **modify** the `write` statement on **line 3** to combine text and variables together to make the app display a single line of text as shown.\n\n|starting code|output|\n|--|--|\n|<img src=\"https://images.code.org/a1b84a8728599e9945c576d3bb459140-image-1445891621155.png\" style=\"height:50px\">| <img src=\"https://images.code.org/f5673df128eca0f9637c0cca1729b489-image-1445891800242.png\" style=\"width: 250px\">|",
        "U3L14 - moving memory challenge1_markdown_instruction": "# Moving Memory - Challenge 1\n\nThe next several levels all present challenges related to \"moving memory\" around in your program.  \n\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n\n**Rules**:\n\n  * You may **only** add lines of code that re-assign values of variables provided.\n  * You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n  * You **MAY NOT** type or introduce any numbers.\n  * You **MAY NOT** add or create any new variables.\n  * You **MAY NOT** change or alter the `console.log` statement at all.\n\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n<br><br>\n### Try this example yourself...\n\n",
        "U3L14 - moving memory challenge2_markdown_instruction": "# Moving Memory - Challenge 2\n\n# Try another one!! \n* Click through to see a new problem provided in the starter code.  \n* A reminder of the rules and example are below if you need to sneak a peek.\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "U3L14 - moving memory challenge3_markdown_instruction": "# Moving Memory - Challenge 3\n\nTry another one.  Here is the starting code:\n\n```\nvar x = 2;\nvar y = 3;\n// your code here\n\nconsole.log(\"The value of x is: \" + x + \" (x should be 7)\");\n```\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "U3L14 - moving memory challenge4_markdown_instruction": "# Moving Memory - Challenge 4\n\nTry another one.  Here is the starting code:\n\n```\nvar x = 2;\n// your code here\n\nconsole.log(\"The value of x is: \" + x + \" (x should be 8)\");\n```\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "U3L14 - moving memory challenge5_markdown_instruction": "# Moving Memory - Challenge 5\n\nTry another one.  Here is the starting code:\n\n```\nvar x = 2;\nvar y = 3;\nvar z = 0;\n// your code here\n\nconsole.log(\"The value of x is: \" + x + \" (x should be 3)\");\nconsole.log(\"The value of y is: \" + y + \" (y should be 2)\");\n```\n</p><p>\n<details>\n<summary><strong><big>HINT:</big></strong>(click to expand)</summary>\nSince this one requires you to change the value of two variables you need to be careful about which one you change first, since its new value will affect the next lines of code.\n<p></p>\nYou can also take advantage of the fact that since `z` is not used as a display value, you can use it as a temporary holding ground for one value while you change another.\n\n</details>\n</p><p>\n</p><p>\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "U3L14 - moving memory challenge6_markdown_instruction": "# Moving Memory - Challenge 5\n\nTry another one.  Here is the starting code:\n\n```\nvar x = 5;\nvar y = 11;\nvar z = 4;\n// your code here\n\nconsole.log(\"The value of x is: \" + x + \" (x should be 2)\");\nconsole.log(\"The value of y is: \" + y + \" (y should be 6)\");\nconsole.log(\"The value of z is: \" + z + \" (z should be 8)\");\n```\n</p><p>\n<details>\n<summary><strong><big>HINT:</big></strong> (click to expand)</summary>\nThis one requires you to be a little clever.  Think about setting the value of one variable that you could then use to easily set the value of the other variables.  Then the trick is to figure out how to use the variables you've been given to make that useful value.\n\n</details>\n</p><p>\n</p><p>\n\n<details>\n<summary><strong>Reminder of the rules</strong> (click to expand)</summary>\n\n<p>\n**GOAL:** Set the value of the variable(s) to make the `console.log` statement display what it's supposed to.\n</p><p>\n\n**Rules**:\n</p><p>\n <li>You may **only** add lines of code that re-assign values of variables provided.\n <li> You may **only** use assignment (`=`) and arithmetic operators (`+` `-` `*` `/`).\n <li> You **MAY NOT** type or introduce any numbers.\n <li> You **MAY NOT** change or alter the `console.log` statement at all.\n</p><p>\n \nExample:\n<table>\n<tr>\n\t<th>Code Provided</th>\n</tr>\n<tr>\n <td >\n        <img src=\"https://images.code.org/bd3c9a918b22a2874ae77fc82289aab5-image-1447800921923.52.14.png\"><br>\n        <br>The code you're given will have a few variables initialized to some values.  The last line will be one or more `console.log` statements with a comment indicating what the expected value to display should be.\n        <hr>\n    </td>\n</tr>\n<tr>\n\t<th>A Possible Solution</th>\n</tr>\n<tr>\n\t<td valign=top >\n    <img src=\"https://images.code.org/4742fed6bff4ad62411b9090f8468db0-image-1447800924556.54.37.png\" >\n    <br><br>You need to add a line (or multiple lines) of code to re-assign the values in variables so the `console.log` statement displays what's expected.  In this example we show a solution on line 5.  Please note that there are several different things you could do. For example, you could go crazy and do something like: <strong>y = x + x + (x/x);</strong>.  What you do is up to you.\n    </td> \n</tr>\n</table>\n\n</details>\n\n<br><br>\n### Try it yourself...\n",
        "U3L15 - Debug forget to update var on reset in UpDown app_markdown_instruction": "# Bug Squash!\n\nThe *Count Up/Down App* has a bug! \n\nA ** common mistake** has been introduced into the code.\n\nIt's a tricky one to find because at first it looks like everything is okay.\n\n# Do This:\n\n* **Run the program.**\n\n* **To see the bug:**\n  * Click the up or down arrow until you get to the \"gameOverScreen.\"\n  * Click \"start over.\"\n  * Click the up or down arrow again... what the?\n \n* **Look at the code and fix the problem.**\n\n* **Read about the common mistake** by expanding the area below.\n\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<br><br>\n<strong><big>...forgetting to reset <i>everything</i> you need to actually start over.</big></strong><br><br>\nFrequently to actually reset you need to set a few variables back to initial values <i>and</i> update all the UI components, especially those that rely on those variables, so they reflect the new values.<br><br>\n\nAnother common mistake shown here is setting the text of a label to \"0\" rather than the value of the count variable.  For example, these two lines of code are a little dangerous:<br><br>\n<pre>\ncount = 0;\nsetText(\"countDisplayLabel\", 0);\n</pre>\n\nTo be safe, if a label is supposed to display the value of a variable, you should always use the variable <i>instead of hard-coding numbers</i> as a check on yourself.  The general rule of thumb is: never hard-code a value instead of using a variable that holds the value you need to show.<br><br>\n\n<b>A common strategy</b> for handling this is to put everything you need to reset the app into a function which you can call at both the beginning of your program, and from other screens later on.  For example:<br><br>\n\n<pre>\nfunction resetAll(){\n  count = 0;\n  setText(\"countDisplayLabel\", count);\n  setScreen(\"gamePlayScreen\");\n}\n</pre>\n\nThen in some other code like a button event handler you can just call your reset \nfunction:<br><br>\n\n<pre>\nonEvent(\"startOverButton\", \"click\", \nfunction() {\n  <span style=\"background-color:yellow\">resetAll();</span>\n});\n</pre>\n\n</details>",
        "U3L15 - Debug if never triggers in UpDown app_markdown_instruction": "# Bug Squash!\n\nThe *Count Up/Down App* has a bug! \n\nA ** common mistake** has been introduced into the code.\n\nWe've changed the app so that it counts up and down by 3 rather than by 1.\n\n# Do This:\n\n* **Run the program.**\n\n* **To see the bug:**\n  * Click the up or down arrow trying to get to the game over screen.\n  * It should be impossible to get to the game over screen.\n \n* **Look at the code and fix the problem.**\n\n* **Read about the common mistake** by expanding the area below.\n\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<br><br>\n<strong><big>...the condition you're checking in your `if` statement is actually impossible to reach.</big></strong>\n<p>\nThis problem was probably easy to see here, but in practice <b>logic errors</b> like this can be devilish to track down. It's especially hard because the program gives you no hints that anything is wrong - it is syntactially a correct program. The computer cannot tell ahead of time whether your `if` statements will ever be true. So you need to trace through the logic of your program step by step to try to figure out why something's not happening that you expect should have happened.\n</p>\n\n</details>",
        "U3L15 - Debugging Simple If-statements =v==_markdown_instruction": "# Bug Squash!\n\nThe *Count Up/Down App* has a bug! \n\nA **very common mistake** has been introduced into the code.  It's one that vexes early programmers, but we're sure you'll find it.\n\n# Do This:\n\n* **Run the program.**\n\n* **To see the bug:**\n  * Click the up arrow just once.\n  * Restart the program.\n  * Click the down arrow just once.\n \n* **Look at the code and fix the problem.**\n\n* **Read about the common mistake** by expanding the area below.\n\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<br><br>\n<strong><big>...using `=` instead of `==`</big></strong>\n<p>\n<b>Yup,</b> we told you this is a common mistake!  And it's an easy one to make.\n</p>\n<p>\nRemember that the single `=` sign does assignment and it actually *also* evaluates to true.  This means that if you stick it in an `if` statement, that `if` statement will <i>always</i> be true.\n</p>\n<p>\nOne strategy to avoid this mistake is to **read code aloud in your head** and don't even use the single word \"equal\":\n<li> think **\"gets\"** every time you see `=`</li>\n<li> think **\"equal-equal\"** every time you see `==` </li>\n</p>\n<p>\nIf you get in the habit of thinking that way, these mistakes are easier to catch.  For example you'd see this:<br>\n`if (count = 20)`<br>\nand read:<br>\n<i>\"if count gets 20\"</i> ...and know that that doesn't make sense.\n</p>\n\n<p></p>\n</details>\n\n",
        "U3L15 - Simple If-statements in UpDown App_markdown_instruction": "# Add Your Own *if* Statement\n\nIn most apps you want to make decisions based on the state of some data you're keeping track of in the app.  \n\nWe've **modified** the *Count Up/Down App* to add another screen.  When the count reaches certain values, we'll switch screens.  In the code you'll see an `if` statement has been added to the event handler for up arrow that states:\n\n![](https://images.code.org/6e8acfef603fc7bd900d5ffb3a045150-image-1446125072632.png)\n\n  * **If** the value of `count` is equal to **20, then** set the screen to *\"gameOverScreen\"*.\n<img src=\"https://images.code.org/b737f4a8924a114c8f320130e73949a6-image-1446124106409.gif\" style=\"width: 150px; float: right\">\n\n# Do This:\n**Add an `if` statement so that when counting down the app changes screens when the count reaches -5. **\n\n* **Run the app** and click the up arrow 20 times to see what happens when the `if` statement is triggered.\n* **Study the `if` statement** for the up arrow button to see how it works.\n* **Add an `if` statement** to the down arrow event handler:\n\t* **If** `count` is equal to **-5, then** set the screen to the \"gameOverScreen.\"\n* **Goal:** Once you're finished, clicking the down arrow in the app should work like the animation shown to the right.\n\n<details><summary><strong><big>HINT:</big></strong> [click to expand]</summary>\nThere is a subtle challenge here that you need to set the text of the label on the <i>gameOverScreen</i> when you change screens.\n<p>\n</p>\n<b>NOTE:</b> Your code can call `setText` for any UI element, on any screen, at any time - even if the element isn't on the screen that's currently showing.\n</details>\n\n",
        "U3L15 - count upDown bug forget to set text_markdown_instruction": "# Bug Squash!\n\nThis program has a bug that doesn't produce an error. It just doesn't do what's expected.  The reason is a common mistake that all programmers make.\n\n# Do This:\n* **Run the program.**\n* **To see the bug:**\n  * Click the up arrow about 5 times.\n  * Click the down arrow about 10 times.\n  * Click the up arrow again.\n* **Look at the code and fix the problem.**\n* **Read about the common mistake** by expanding the area below.\n* **Once you've fixed the issue, move on.**\n <p>\n\n</p>\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<big>...forgetting to update the display after changing something in the program</big>\n\n\n<h1> Misconception Alert - Changing a Variable Doesn't Change the Display</h1>\n\nA common misunderstanding about variables and displaying them is to think that a text label that's displaying a variable will change when the variable changes. NO.  A text label is just \"dumb\" container for text.  It's similar to a variable itself in that it won't change unless you explicitly tell it to.\n<p></p>\n<h1>Concept: Separation of Program Data from How It's Viewed</h1>\nMaintaining variables and program data is a **different task** from maintaining the display of the app.  Your program could actually run without updating the display at all - it would still be working behind the scenes; it just wouldn't be very fun or interesting to use.\n<p></p>\n</details>\n\n\n",
        "U3L15 - count upDown bug logic error wrong update_markdown_instruction": "# Bug Squash!\n\nThis program has a few different bugs. Find them and squash them!\n\n# Do This:\n* **Run the program.**\n* **To see the bug:**\n  * Click the up arrow exactly twice.\n \t* Restart the program and do this a few times - you'll notice nothing happens the first time you click.\n  * Click the down arrow several times.\n* **Look at the code and fix the problem.**\n* **Read about the common mistake** by expanding the area below.\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<big>...updating the wrong thing in the wrong event handler.</big>\n<p></p>\nThere are two common mistakes here:\n<p></p>\n1. Mixing up which event handler should do what.\n<p></p>\n2. Updating the display **before** any change is made to the underlying data of the program. \n\tThis can make the app seem oddly out of sync where each event triggers an update to the display that reflects the **last** thing done, not the current thing.\n<p></p>\n</details>",
        "U3L15 - count upDown bug var not created globally_markdown_instruction": "# Bug Squash!\n\nThis program has a few different bugs that are related to the same problem.\n\n# Do This:\n* **Run the program.**\n* **To see the bug:**\n  * Click the up arrow several times.\n  * Click the down arrow.\n* **Look at the code and fix the problem.**\n* **Read about the common mistake** by expanding the area below.\n* **Once you've fixed the issue, move on.**\n\n<details>\n<summary><big><strong>Read about the common mistake here...</strong></big> [click to expand]</summary>\n<big>...thinking you're referencing a global variable when you're not.</big><br>\n\nA common mistake is basically a syntax/spelling error. These mistakes can be really tricky to work out because you *think* you know what you wrote, but the computer doesn't see it that way :)\n<p></p>\n</details>\n\n\n",
        "U3L15 - global var example count up_markdown_instruction": "# Using Variables in Apps!\n<img src=\"https://images.code.org/f156f8d8524c3c0316e4db394e331bdc-image-1446060829590.gif\" style=\"float: right; width: 200px;\">\nThe example program here has a small portion of the *Count Up/Down App* written.  Right now, what the app should do is  shown in the animation to the right.\n\n# Important Concept!\n\nThis small functionality **demonstrates an important concept** - how to create a variable in the app and update it when an event occurs. It may seem fairly straightforward but there are some common misconceptions that we want to alert you to.\n\n# Do This: Misconception Investigation\nOver the next few levels you are going to do a small investigation of two apps that do almost the same thing but *one  works as expected* and *one with a bug* that demonstrates an important concept about using variables in apps.  Here is what you'll do:\n\n1. **Run this app, which works properly.**\n  * Study the code until you think you understand what's happening.\n  * Pay attention to the code that handles the up arrow being clicked.\n\n2. **Run the app on the next screen, which has a bug.**\n  * On the next screen we show you almost the same app, but with a subtle problem.\n  * See if you can spot the difference and fix it.\n\n3. **Report what you found!**\n  * We'll ask you to report what you found.  It's not a quiz.  You can go back and forth until you spot the problem, but you should find it and be able to write what it is.\n\n![]()",
        "U3L15 - practice with setText_markdown_instruction": "# Changing Elements on Screen \n\nThere's another way to display text in your app besides `console.log` and `write`.  \n\nThere is a command called `setText` which will **change the text of a component on screen** given its id. This is a very powerful technique and one that you will use a lot. Here's what it looks like in action....\n\n<img src=\"https://images.code.org/3e5dd320801720d5c62a49146d9ee3d2-image-1446056202170.gif\" style=\"width: 500px\">\n\nLet's do a **very simple** example of using `setText`.\n\n# Do This:\n<img src=\"https://images.code.org/5fc22aef5e8f5161f95a2507c1ec006b-image-1446056758249.gif\" style=\"float: right; width: 175px; border: solid 1px #AAAAAA\">\n* **Run the code** in the app.\n \n Look at the code for the \"upArrow\" event handler and how it sets the text of the label.\n \n* **Modify the code.**\n \n When the down arrow is clicked, set the text of the label to something else.\n\n* **GOAL:**\n  * Your only goal is to successfully use `setText` in this example app.\n  * The app should do something similar to the animated example at right.\n\nOnce you've got it functional, click Finish to move on.\n \n\n",
        "U3L15 - variable scoping problem debugging_markdown_instruction": "# Debugging Problem!\n\n**Uh oh!** The code here is subtly different from the one in the previous example and **now there is a problem**.\n\n# Do This:\n\n* **Run the app** and try it to see the problem. \n* **See the error.**\n  * Note that **NaN** stands for \"Not a Number\" - why would it say this?\n* **Note the difference** between this broken version and the previous one that worked.\n* **Fix the problem** so that it works as before.",
        "U3L15 full clicker app_markdown_instruction": "# Make Your Own \"Clicker\" Game\nYou will be creating your own âclickerâ game similar to the Apple Grabber game you worked on in this lesson. \nThe general object of the game is to click on an element that jumps around every time you click it. You will pick your own theme and decide what the rules are and how to keep score.\n\n** Your Main Tasks Are To:**\n\n  * Pick a theme for your game and add appropriate images and styling.\n  * Add variables to track some data during gameplay.\n  * Add code to event handlers to update the variables and display appropriately.\n \n**See Activity Guide for Requirements**\n\nThere is a full activity guide and rubric for this project.  You can find a link to it in the student resources section for this lesson. Or ask your teacher for it.\n \n<img src=\"https://images.code.org/146107536c50b4a3317f3ebbe2e66f37-image-1446418612319.png\" style=\"float: right; width: 300px\">\n** Template **\n\nThis level is a template for the app. You should **run it to see what it does** right now. You will modify *this* template, both the design elements and the code, for your project.\n\nThe template has 4 screens and some basic navigation functionality and event handlers set up for you.  The game play screen uses the images from the Apple Grabber game, but you should replace these with images related to your chosen theme.\n\n",
        "U3L16 - challenge say hi app_markdown_instruction": "# Introducing the  *change* Event\n\nDid you notice with the demo digital assistant that you could just __type a question, hit 'enter', and the assistant would respond__? Up until now you've been using the click of a button to trigger getting the text from an input or text area.\n\nYou can use a new event type to get this behavior: The __'change' event__ is triggered when the user hits 'enter' in a text input after typing.\n\n\n<img src=\"https://images.code.org/7d1725b236471f8e2a0efed5870660da-image-1446071579670.32.36.png\" style=\"width:350px;\">\n\n# Do This:\n<img src=\"https://images.code.org/f8f1f7ae18acbc570a367886bcd6ca88-image-1445976541574.gif\" style=\"width:250px;\">\n- A __text input__ has been created for you that asks for a user's name.\n- Attach a __'change'__ event handler to the text input.\n- When the 'change' event triggers, __write the user's name and a greeting__.",
        "U3L16 - intro getText_markdown_instruction": "# Getting Text Input\n\nAs we saw a user can now type inside of a text input whenever they want, **but now we'll need a way to access that text**. In order to do that you'll need to use the `getText` command, which you can now find in the **UI Controls** tab.\n\n<img src=\"https://images.code.org/0c6774f2b6d33f8107ec2936102b1a10-image-1445533677192.58.24 PM.png\" style=\"width: 150px;\">\n\nYou can use a `getText` command just like a string within a `console.log` or `write` command. Just like with `setText` you will refer to the UI element by its ID.\n\n![](https://images.code.org/c17e419301d0cfeebf7f0ccee13e415f-image-1445892504376.47.54 PM.png)\n\n# Do This:\n\n* **Read the documentation **  for `getText`.\n* **Add an event handler to the Submit button** that fires when your button is clicked.\n* **Inside the event handler** place code that will **log the name your user input to the console**.\n\n",
        "U3L16 - introSetPosition_markdown_instruction": "# How to Organize the Code\nAs your apps get more complex you'll have to think about how to organize your code so it remains readable and easy for you to locate things when debugging any problems.  We suggest the following convention which breaks the code into 3 major sections:\n* **Top**:  code for UI elements **and** any code for positioning them.\n* **Middle**: code for event handlers.\n* **Bottom**: code for any other other functions you've written. (We don't have any of these yet.)\n\nSo if you have some existing code and want to insert a `setPosition` command, you should place it after `button` but before `onEvent` in the code, like this:\n\n<img src=\"https://images.code.org/ae17e62c077aa9698526371d22db1307-image-1448404255046.gif\" style=\"width: 500px\">\n\n# Do This:\n\n<img src=\"https://images.code.org/3a834b8a4313e31a453525a69acda1f4-image-1444335250982.png\" style=\"float: right; width: 175px\">\n\n* **Starter code** has been provided which creates two buttons and event handlers.\n* **Insert** `setPosition` commands for each button so they appear at the bottom of the screen (as shown).\n  * **Remember:** in an app screen 0,0 is the top left corner and you specify a location by how many pixels from the left and how many down from the top of the screen it is.  The screen is **320 by 450 pixels**.",
        "U3L16 - introStrings_markdown_instruction": "# Strings\n\nThe primary data type we have used so far is **Numbers**. If we want to interact with user-submitted text, however, we'll need to learn about a new data type called a **String**.  A string is a **sequence of ASCII characters**.\n\n**Example** | **Rule**\n---|---\n`\"aString\"` | Strings **might** look a lot like a variable name but there are **many differences**.\n`\"look at all these spaces\"` | Strings can **contain spaces**.\n`\"$2 bills are the coolest\"` | Strings can **contain special characters** (and even start with them).\n`\"11\"` | Strings might **contain only digits**. This looks like a number but it is really 2 ASCII characters.\n`\"\"` | Strings might **contain no characters**.\n<br>\nYou can **store strings in a variable just like a number**. In this example the variable name is `str` but you should choose a name that is **descriptive and meaningful**.\n\n![](https://images.code.org/56e6b30a51556aa3b516e0a49b51cbeb-image-1445894334432.18.40 PM.png)\n\n**Combining Strings:** often you will want to combine multiple strings to create one longer string. You can do this with the `+` operator. The formal name of this process is **concatenation**.\n\nThe program you're about to see is a very simple Mad Libs app that uses strings that are created inside the program and  saved inside of variables. These strings are then **concatenated** with other strings to create a Mad Lib.\n\n# Do This:\n\n* The input words of this Mad Lib are **currently set to the empty string**.\n* **Add your own input words** and run the program to generate the Mad Lib.",
        "U3L16 - nameAgeTemplate_markdown_instruction": "# Text Input Elements\n\nSo far we've been using `promptNum` as a simple way to get a number as input. Now that we know a little about strings were are going to create **user interface elements that users can use to submit text (i.e. strings) instead**. The first and simplest example is `textInput` which you can find in Design Mode.\n\n<img src=\"https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19 PM.png\" style=\"width: 100px\">\n\n# Do This\n\n* **Add two text input elements to this program**, one for the name and one for the age of the user.\n* **Give your text input elements descriptive and meaningful IDs**\n* **In Design Mode** set their default text to prompt the user for their name in age\n* **Compare your app to the example below**\n\n<img src=\"https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11 PM.png\" style=\"float:left; width:200px;\">\n<br>",
        "U3L16 - nameAgeTemplate_2018_markdown_instruction": "# Text Input Elements\n\nSo far we've been using `promptNum` as a simple way to get a number as input. Now that we know a little about strings were are going to create **user interface elements that users can use to submit text (i.e. strings) instead**. The first and simplest example is `textInput` which you can find in Design Mode.\n\n<img src=\"https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19 PM.png\" style=\"width: 100px\">\n\n# Do This\n\n* **Add two text input elements to this program**, one for the name and one for the age of the user.\n* **Give your text input elements descriptive and meaningful IDs**\n* **In Design Mode** set their default text to prompt the user for their name in age\n* **Compare your app to the example below**\n\n<img src=\"https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11 PM.png\" style=\"float:left; width:200px;\">\n<br>",
        "U3L16 - newEventTypes_markdown_instruction": "# New Elements and Events: New Event Types\nYou just wrote your first program that **does not include the turtle**! Moving forward we're going to focus much more on programming apps that use User Interface (UI) elements, but we'll keep the turtle library around in case you want to use it.\n\n<img src=\"https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06 AM.png\" style=\"float: right\">\n\n**New Events**: You may have noticed that the `onEvent` block has a pull-down menu for the event **type** (see right).\n\n# Do This:\n\n* **Experiment** with **each of the different types of mouse events** by selecting from the list. You can also read about them in the documentation.\n\t* click\n    * mousemove\n    * movedown\n    * mouseup\n    * mouseover\n* **Choose** the mouse event type you like most and change your event handler to use it.\n* **Note:** There are some events that capture keystroke events. These are interesting, but they do not work easily with buttons.  We'll stick to mouse events for now, and get to keys later.\n\n**Be sure** to experiment with each one.  The next exercise will quiz you on which one is which.\n\n",
        "U3L16 - setPosition to move button_markdown_instruction": "# New Elements and Events: Moving Buttons with Events\n\nOver the next few exerises we will be exploring several new user interface elements and event types. Your code will be pulled forward as you progress through the exercises.\n\n**Moving Past Turtle:** We've been using buttons to move the turtle. For example, in the program you're about to see a button that moves the turtle to a random location on the screen. We're going to alter this program ** so that the button itself moves every time you click it**.\n\n**Notice** that this means that event handlers can affect the elements they are attached to, not just other elements!  This is an interesting technique for apps.  Now you're going to try it...\n\n# Do This:\n* **Change the ID** of the button to something descriptive and meaningful.\n* **Modify** your event handler so that **it no longer moves the turtle** but instead sets the position of the button itself to a random location on the screen.\n\t* TIP: add `setPosition` to the event handler, and just move the `randomNumber` calls from the turtle.\n\t* Recall the screen is **320 by 450 pixels**.\n\n**Before** | **After**\n---|---\n![](https://images.code.org/a4172e43b6707a3170e4eaf54a2a7b1d-image-1444335577799.gif) | <img src=\"https://images.code.org/4e17b077bd8fbdd43f960d26bb3d252d-image-1444335766972.gif\" style=\"width: 150px\">\n\n\n",
        "U3L16 - singleSetPosition_markdown_instruction": "# Moving and Sizing Buttons\n\nAn important component of designing intuitive and visually appealing user interfaces is the location of the elements on the screen. Using the `setPosition` command (now added to the Toolbox) you can move and set the size of user interface elements.\n\n![](https://images.code.org/c3e42223cbcb096f992d758973d09f63-image-1444664597665.42.48 AM.png)\n\n**NOTE:**\n  * If you only want to set the size you can use the `setSize` function which looks like this:\n\n ![](https://images.code.org/cb742ecf96c04477db0f8361ad5dcdaf-image-1448924017288.png)\n\n  * If you *only* want to set the position *without* changing the size of the element, you can omit the *width* and *height* parameters from the `setPosition` function.  To do that, you need to switch into text mode, like this:\n\n <img src='https://images.code.org/5b565ef5b74b5cd657ba15c67be92b0d-image-1448924356253.gif' style=\"width: 400px\">\n\n# Do This:\n\n* **Read the documentation** for `setPosition`.\n* **Starter code** has been provided which creates a single button.\n* **Move the button to the middle of the screen** using `setPosition`, as in the image below. (You may need to experiment a little bit with the x,y location to get it right).\n* **Remember:** in an app screen 0,0 is the top left corner and you specify a location by how many pixels from the left and how many down from the top of the screen it is.  The screen is **320 by 450 pixels**.\n\n![](https://images.code.org/62840468826ce153d3d0d80bca303827-image-1444662614963.10.05 AM.png)\n\n",
        "U3L16 - stringsVsNumbers_markdown_instruction": "# Strings vs. Numbers\n\nSome strings only contain numeric digits (e.g. `\"512\"`) in which case they look a lot like numbers. In some languages strings cannot be treated as numbers, but there are instances in JavaScript where **a number will be treated like a string or a string will be treated like a number**. This can cause unexpected behavior, so it's good to see these instance beforehand.\n\nThe most frequent instances you will see number or strings treated like the other type is when using **arithmetic operators** (addition, substraction, multiplication, division).\n\n* **Addition:** If either of the values is a string then this will be treated as **string concatenation**. Only when both values are numbers will it be treated as normal addition.\n    * \"2\" + 3 --> \"23\"\n    * 2 + 3 --> 5\n    * 2 + \"a\" --> \"2a\"\n* **Multiplication/Division/Subtraction:** Since this operation does not exist for strings then **all values with these operations will be converted to numbers** if possible.\n\t* \"8\" * \"2\" --> 16\n    * \"8\" / 2 --> 4\n    * 8 - \"a\" --> NaN (an error)\n  \n**Note: In almost all instances you will not want to use the functionality we are exploring here. It is important to be aware of it for debugging purposes**\n\n# Do This\n\n* **This exercise includes some examples of strings and numbers being combined with arithmetic operators**\n* Use this level to **practice with this behavior ** and then move on to complete the matching assessment in the next level.",
        "U3L16 - text labels_markdown_instruction": "# New Elements and Events: Text Labels\n<img src=\"https://images.code.org/20d50fd324908fc48633e1325cc37603-image-1444662791509.png\" style=\"float: right\">\nThe UI controls toolbox contains an element called `textLabel`. A text label is what it sounds like: plain text that you can put in your app. Even though it's just plain text you can still move and resize it using `setPosition`, and you can attach event handlers to it as well.\n\n**NOTE:** resizing a text label does not change the font size of the text.  We'll learn how to do that later.  \n\n# Do This:\n\n* **Read the documentation** for `textLabel`<img src=\"https://images.code.org/fe2ce5f335fd124dc3052270ca0af31f-image-1444336014658.gif\" style=\"float: right; width: 150px\">.\n* **Modify** the program so that your button is now a text label. Just as before, it should move randomly around the screen when clicked. You can make the text whatever you like.\n* **Tip:** If you reuse your button's ID you'll only need to change a single line of code to make your program work. Once you have your program working **choose a descriptive and meaningful ID** for your text label and make the appropriate changes in the event handler.\n\n<br>\n<br>\n<br>\n\n",
        "U3L16 - textInput getText write_markdown_instruction": "# Text Input Elements\n\nSo far we've been using `promptNum` as a simple way to get a number as input. Now that we know a little about strings we are going to create **user interface elements that users can use to submit text (i.e. strings) instead**. The first and simplest example is `textInput` which you can find in Design Mode.\n\n<img src=\"https://images.code.org/4436a3ba2a7596c7724380c7c82d5c29-image-1445533665376.36.19 PM.png\" style=\"width: 100px\">\n\n# Do This:\n\n* **Add two text input elements to this program**, one for the name and one for the age of the user.\n* **Give your text input elements descriptive and meaningful IDs**.\n* **In Design Mode** set their default text to prompt the user for their name and age.\n* **Compare your app to the example below**.\n\n<img src=\"https://images.code.org/865403f21bdb27246caeb31afa7c0b5f-image-1445902764676.39.11 PM.png\" style=\"float:left; width:200px;\">\n<br>",
        "U3L16 - use images_markdown_instruction": "# New Elements and Events: Images\n\n<img src=\"https://images.code.org/a84297658be45dc78bc401d387d10436-image-1444663322356.21.25 AM.png\" style=\"float: right; width: 120px\">\nImages make applications more visually pleasing and interactive. You can add images to your application using the `image` command. For now, just add an `image` element to your app (the default image link is the Code.org logo) and don't worry about choosing a unique image just yet. We'll do that in the very next exercise!\n\n\n# Do This:\n<img src=\"https://images.code.org/8df7b1b56c71de7ad9770646bd7f8792-image-1444336140877.gif\" style=\"float: right; width: 250px\">\n\n* **Modify** the program - change the `textLabel` to an `image` so that the image moves randomly around the screen based on the event you chose.\n* **Tip:** If you reuse your text label's ID you'll only need to change a single line of code to make your program work! Once you have your program working though, it's probably a good idea to choose a descriptive and meaningful ID for your image and make the appropriate changes in the event handler.\n\n<br>",
        "U3L16 Mad Lib Clear Input_markdown_instruction": "# Play It Again and Again!\n\nWhen the user clicks the \"Play again\" button, the first screen should reset and not show the user's previous text.\n\n# Do This:\n- When the \"Play again\" button is clicked, __clear the text from each text input__ on Screen 1.\n- __Free play:__ Add images, or more How-to steps for your Mad Libs, and invite others to play!\n\n<img src=\"https://images.code.org/a49fe3eba4d2d2fb03e45d15aad53dbf-image-1450143105779.16.14 Mad Libs play again button.gif\" style=\"width:200px\">\n\n\n<details>\n<summary>**Hint**</summary>\nTry setting the text to the empty string: `\"\"`.\n</details>\n",
        "U3L16 Mad Lib getText_markdown_instruction": "# Make It Mad! Add the User's Text to Your Mad Libs Outline\n\nNow that you have your Mad Libs outline appearing in the text area, it's time to __incorporate the user's text__ to make your Mad Libs come alive.\n\n# Do This:\n\n- Did you pick good ID names for your text input elements? Update them now if you didn't!\n- When the __Next__ button is clicked, __get the user's text from the text inputs on Screen 1 and store each in a separate variable__.\n- Use string concatenation to __incorporate the user's text into your Mad Labs string__ before updating the text area on Screen 2. \n\n<details>\n<summary>**Hint**</summary>\nUse `getText` to get the text from each of the text inputs on Screen 1.\n</details>\n<details>\n<summary>**Should I make local or global variables?**</summary>\nRemember that the decision to create local variables or global variables is a question of _scope_. Where will you need to access these variables in your program? If you are only using the variables in the click callback function for the \"Next\" button, then they can be _local_ variables in that function. \n</details>",
        "U3L16 Mad Lib setText_markdown_instruction": "# Update the Text Area with Your Mad Libs Outline\n\nWhen figuring out how to make progress with a program, it helps to break the problem down into smaller steps and test your program incrementally. So rather than jumping straight to getting the user input and __concatenating__ it with your Mad Libs outline, start first by just making sure that you can get your Mad Libs outline to appear in the text area when the __Next__ button is clicked on the first screen. \n\nBut wait! If you just use `setText` and pass in the string of your Mad Libs outline, it will look like the screen on the left where all the steps are smushed together. You can use one or more newline characters, `\"\\n\"`, in your string to create a line break in your text.\n\n<table>\n<tr>\n<td>\n<strong>Without newlines</strong>\n</td>\n<td>\n<strong>With newlines</strong>\n</td>\n</tr>\n<tr>\n<td>\n\n<img src=\"https://images.code.org/24fb1385d6199cd52c6e1d3d11e547fc-image-1448404478181.png\" style=\"width:201px;float:right;\">\n</td>\n<td>\n<img src=\"https://images.code.org/3a627993f9e0e4a6d462c8a21b335058-image-1448404299215.png\" style=\"width:200px;float:right;\">\n</td>\n</tr>\n</table>\n\n\n# Do This:\n\n- When the __Next__ button is clicked, you already switch to Screen 2, but now you should also call `setText` on the text area on Screen 2 to your Mad Libs outline. See the images above for one way to temporarily handle the word placeholders.\n- Add in newline characters `\"\\n\"` in your Mad Libs string to format it.\n\n<details>\n<summary>**Newline Examples**</summary>\n<table style=\"width:100%; margin-left:25px;\">\n<tr>\n<td style=\"vertical-align: text-top; border-right:1px solid #000\">\n\t**Example1:**<br/><br/>\n    \n    <samp>console.log(\"How to Drive\\nStep 1.\");<br/><br/></samp>\n    \n    *will be displayed as...*<br/><br/>\n    \n    <samp>How to Drive<br/>Step 1.<br/><br/></samp>\n    \n    *...on your console.*\n</td>\n<td style=\"padding-left:20px;\">\n<samp>**Example2:**<br/><br/>\n    \n    var step1 = \"Step 1: ...\";<br/>\n    \n    var step2 = \"Step 2: ...\";<br/>\n    \n    console.log(step1 + \"\\n\" + step2);<br/><br/></samp>\n    \n    *will be displayed as...*<br/><br/>\n    \n    <samp>Step 1: ...<br/>Step 2: ...<br/><br/></samp>\n    \n    *...on your console.*\n</td>\n</tr>\n</table>\n</details>",
        "U3L16 Mad Lib toUpper_markdown_instruction": "# Why Are You Yelling At Me?! *toUpperCase* and *toLowerCase*\n\nThe main functionality of the Mad Libs app is complete, but there are some finishing touches to add. The user may type input with random letter capitalization, but the Mad Libs output string should be consistently capitalized.\n\n# Do This:\n\n- Pick one or more pieces of the user's input text to transform into \"yelling\" or emphasize by __making it uppercase__ before displaying it.\n- For the other pieces of the user's input text, __make it lowercase__ before displaying it.\n\n<details>\n<summary>**Hint**</summary>\nRemember the rules of updating variables! You can update a variable after first getting its current value and then doing something with it. <br> Example: `song = song.toUpperCase();`\n</details>",
        "U3L17 - introKeyValue_markdown_instruction": "# What are Key Value Pairs?\n\n**Key value pairs** are how you will permanently store information within your apps. Just like a variable a key value pair is referred to by a name (\"key\") and holds one piece of information (\"value\"). That said, there are some important differences between variables and key value pairs.\n\n# Key Value Pairs vs. Variables\n | Key Value Pair | Variable\n---|---|---\n**Storage** | Stored on a remote server (i.e. \"in the cloud\") | Stored in your computer's working memory\n**Persistence** | Permanent, even if you close your app | Deleted when your program terminates\n**Speed** | Accessed by making a request over the Internet, takes time | Accessed immediately\n**Sharing** | All users of your app read and write to the same key value pairs | Each user has their own copy of a variable\n\n# Data Viewer\n\nThe **Data Viewer** (shown below) lets you visually explore the permanent data associated with your app. You can access the Data Viewer by clicking **View Data** and then **view key/value pairs**.\n\n![](https://images.code.org/19b2012027d8f197821e48eb9ba4647d-image-1445283825747.43.26 PM.png)\n\n# Do This\n\n* **Access the Data Viewer** by clicking **View Data** and then **view key/value pairs**\n* A key value pair called `permanentNumber` has already been added to your app\n* **Change the value** stored in `permanentNumber` using the **Edit** button\n* **Create your own key value pair** by clicking **Add**. Give your key value pair any key and value you wish.\n* **Reload** the app (you can just refresh the tab) and confirm the data is still there\n\n![](https://images.code.org/e3fe8c5f10042d0ddd7f1dfe0c2a48c8-image-1445283727281.41.19 PM.png)",
        "U3L17 - readKeyValue_markdown_instruction": "# What are Key Value Pairs?\n\n**Key value pairs** are how you will store information permanently within your apps. In some ways key value pairs act a lot like a variable. They are referred to by a name (their \"key\") and hold one piece of information (their \"value\"). That said, there are some important differences between variables and key value pairs.\n\n# Key Value Pairs vs. Variables\n | Key Value Pair | Variable\n---|---|---\n**Storage** | Stored on a remote server (i.e. \"in the cloud\") | Stored in your computer's working memory\n**Persistence** | Permanent, even if you close your app | Deleted when your program terminates\n**Speed** | Accessed by making a request over the Internet, takes time | Accessed immediately\n**Sharing** | All users of your app read and write to the same key value pairs | Each user has their own copy of a variable\n\nDon't worry about memorizing all of these features now as we'll be exploring them in the coming exercises. \n\n# Data Viewer\n\nFor now we're not even going to write any code with our key value pairs. Instead you'll be using the **Data Viewer** to visually explore the permanent data associated with your app. You can access the Data Viewer by clicking **View Data** and then **view key/value pairs**.\n\n# Do This\n\n* **Access the Data Viewer** by clicking **View Data** and then **view key/value pairs**\n* A key value pair called `permanentNumber` has already been added to your app\n* **Change the value** stored in `permanentNumber` using the **Edit** button\n* **Create your own key value pair** by clicking **Add**. Give your pair any key and value you wish.\n* **Reload** the app (you can just refresh the tab) and confirm the data is still there",
        "U3L19 - Simple If-statements in UpDown App_markdown_instruction": "# Add your own if statement\n\nIn most apps you want to make decisions based on the state of some data you're keeping track of in the app.  \n\nWe've **modified** the *Count Up/Down App* to add another screen.  When the count reaches certain values we'll switch screens.  In the code you'll see an if statment has been added to the event handler for up arrow that states:\n\n![](https://images.code.org/6e8acfef603fc7bd900d5ffb3a045150-image-1446125072632.png)\n\n  * **If** the value of *count* is equal to **20, then** set the screen to *\"gameOverScreen\"*.\n<img src=\"https://images.code.org/b737f4a8924a114c8f320130e73949a6-image-1446124106409.gif\" style=\"width: 150px; float: right\">\n\n# Do This\n**Add an if statement so that when counting down the app changes screens when the count reaches -5. **\n\n* **Run the app** and click the up arrow 20 times to see what happens when the if statement is triggered\n* **Study the if statement** for the up arrow button to see how it works\n* **Add an if statement** to the down arrow event handler:\n\t* **if** the count is equal to **-5, then** set the screen to the \"gameOverScreen\"\n* **Goal:** Once you're done, clicking the down arrow in the app should work like the animation shown to the right.\n\n<details><summary><strong><big>HINT:</big></strong> [click to expand]</summary>\nThere is a subtle challenge here that you need to set the text of of the label on the <i>gameOverScreen</i> when you change screens.\n<p>\n</p>\n<b>NOTE:</b> Your code can call `setText` for any UI element, on any screen, at any time - even if the element isn't on the screen that's currently showing.\n</details>\n\n",
        "U3L19 - global var example count up_markdown_instruction": "# Using Variables in Apps!\n<img src=\"https://images.code.org/f156f8d8524c3c0316e4db394e331bdc-image-1446060829590.gif\" style=\"float: right; width: 200px;\">\nThe example program here has a small portion of the *Count Up/Down App* written.  Right now, what the app should do is  shown in the animation to the right.\n\n# Important Concept!\n\nThis small functionality **demonstrates an important concept** -- how to create a variable in the app and update it when an event occurs. It may seem fairly straightforward but there are some common misconceptions that we want to alert you to.\n\n# Do This: Misconception Investigation\nOver the next few levels you are going to do a small investigation of two apps that do almost the same thing but *one  works as expected* and *one has with a bug* that demonstrates an important concept about using variables in apps.  Here is what you'll do:\n\n1. **Run this app which works properly**\n  * Study the code until you think you understand what's happening\n  * Pay attention to the code that handles the up arrow being clicked\n\n2. **Run the app on the next screen which has a bug**\n  * On the next screen we show you almost the same app, but with a subtle problem\n  * See if you can spot the difference and fix it\n\n3. **Report what you found!**\n  * We'll ask you to report what you found.  It's not a quiz.  You can go back and forth until you spot the problem, but you should find it and be able to write what it is.\n\n![]()",
        "U3L19 - practice with setText_markdown_instruction": "# Changing elements on screen \n\nThere's another way to display text in your app besides `console.log` and `write`.  \n\nThere is a command called **setText** which will **change the text of a component on screen** given its id. This is a very powerful technique and one that you will use a lot. Here's what it looks like in action....\n\n<img src=\"https://images.code.org/3e5dd320801720d5c62a49146d9ee3d2-image-1446056202170.gif\" style=\"width: 500px\">\n\nLet's do a **very simple** example of using **setText**...\n\n# Do This\n<img src=\"https://images.code.org/5fc22aef5e8f5161f95a2507c1ec006b-image-1446056758249.gif\" style=\"float: right; width: 175px; border: solid 1px #AAAAAA\">\n* **Run the code** in the app\n \n Look at the code for the 'upArrow' event handler and how it sets the text of the label.\n \n* **Modify the code**\n \n When the down arrow is clicked, set the text of the label to something else.\n\n* **GOAL**\n  * Your only goal is to successfully use `setText` in this example app\n  * The app should do something similar the animated example at right.\n\nOnce you've got it functional, click Finish to move on.\n \n\n",
        "U3L19 - test reassignment of two vars_markdown_instruction": "# Variable Reassignment - Part 1\n\nSo far we have only set a variable's value once.  But it's called a *variable* for a reason - its value can change (or vary) throughout a program. This is useful and necessary for keeping track of things like a score in a game.\n\nTo re-assign a value to a variable all you have to do is maintain the mental model of what's happening:\n\n  * Variables are containers for information.\n  * The `=` sign is an instruction to set the value.\n  * A series of assignment statements (see example to right) is a list of instructions to execute one at a time - it's not a series of equations that define the state of the world.\n\n# Do This:\n<img src=\"https://images.code.org/066db834ae289ac538609b68c6492c4a-image-1445944263895.png\" style=\"float: right\">\n\n  * **Make a prediction.**\n\n The code on the following screen looks like what is shown at right.  Study it and make a prediction about what will happen when you run the code. What will the values of `a` and `b` be at the end of the program?\n\n* **Add `console.log` statements.** \n\n Prove it to yourself by adding `console.log` statements at the end of the program to find out what the value of `a` and  `b` are.\n \n* **NOTICE:** in the code above, after the variable `a` has been created using `var`, to change a variable's value, you only need to refer to the variable by its name. The word `var` only needs to be used once - when the variable is created for the first time. \n\n* It's a **common mistake** to use `var` everytime you want to *use* a variable but just **remember `var` means CREATE a new variable**.  When you create a new variable it will lose its old value.  We'll look at errors related to this later.\n\n",
        "U3L19 - three basic ops of variables_markdown_instruction": "# Variables Toolbox\nLet's get started with the most basic example of using and controlling the computer's memory with variables. The toolbox has a couple of new commands for working with variables.\n\nWe've given you some starter code that does three things:\n<table>\n<tr>\n<td>\n<ol>\n<li>**Creates** a variable called `score`</li>\n<li> **Assigns** the value *0* to `score`</li>\n<li>**Displays** the value of the `score` to the console (see hint below about quotes) </li>\n</ol> \n</td>\n<td>\n<img src=\"https://images.code.org/056a735a96a603e23768d66f0de32961-image-1445462590619.png\" style=\"width: 350px\">\n</td>\n</tr>\n</table>\n\n\n# Do This:\nYou're going to add another variable, assign it a value, and then display it to the console.\nUse the starting code as a model for what you need to create now.\n<img src=\"https://images.code.org/72744382133081947777e67a5988d4ea-image-1445462803999.gif\" style=\"float: right; width: 350px\">\n* **Create a new variable** by dragging out the `var` block.\n* **Change the name of the variable** from the default `x` to `lives` (see animation at right).\n* **Set the value of `lives` to be 3**.\n* **Add** `console.log` **messages** to show the value of `lives`.\n\nThe output in the debug console should look like this:\n \n  <img src=\"https://images.code.org/6405a3ed95ca3125ea1b2c9ffbdffa94-image-1445349849482.png\" style=\"border: solid 1px gray\">\n<details>\n  <summary>  Debugging Tip: Displaying values of variables [click to expand]</summary>\n   **NOTE: To print the value of a variable you *should not* use quotes.**\n   Notice the difference between these two statements: <br>\n   `console.log(\"score\")`<br>\n   `console.log(score)`<br>\n   It's subtle but important:\n   <br>\n   <li>When `console.log` sees quotation marks it thinks you want to print out the literal characters in the quotes.\n   <li>When `console.log` sees something **without quotation marks** it assumes you're trying to print a variable, and it goes to retrieve its value and displays that. </li>\n \n</details>\n\n![]()\n\n![]()",
        "U3L19 - up down count practice app_markdown_instruction": "# What happened last level?\n\nIn JavaScript you should just think of the word var as shorthand for \"create a variable\". In fact in the case of the last level the program thinks you want another variable names foo. This is the result of **scope**. \n\nThere are two types of variables:\n\n1. **Gloabl Variables** - Created outside of all functions and can be seen and updated by any code.\n1. **Local Variables** - Create inside of a function and can't be seen by any other code. They get created when the function is run, and they get destroyed (seriously) when last line of code in the function has executed. If the function gets run again, then the variable is created again.\n\nSo if you say `var` in front of a variable with the same name as a global variable it actually thinks you want another variable named foo just for this function!\n\n\n# Incrementing with buttons\n\nCheck it out. We have started using increment with a button!  Can you figure out how to set up the Down button to decrement the value of count each time it is clicked?\n\n# Do This\n\n* **Try the starter code.** See how the UP button works.\n\n* ** Set up the DOWN button** to decrease the value of count by 1 each time it is clicked.\n\n* Your app should look like the example when done.",
        "U3L19 - variable reassignment challenge pt2_markdown_instruction": "# Wrapping Up Variables - This is Not Math Class\n\nHopefully you now understand the gist of working with variables.  The major thing to remember is that every time you see an `=` sign it means that you are instructing the computer to set a variable to a new value.  \n\n<img src=\"https://images.code.org/ecced8eb916809f66ac7d555a819c2a6-image-1447803015383.17.43.png\" style=\"float: right\">\nThe example to the right is something that definitely wouldn't make sense in math class, but you should be able to reason about it as a piece of code.  Because it's code, you can also **insert** statements to display the value of variables as they change.  You don't have to guess!\n\n# Do This:\n* ** Make a prediction.** \n\n As usual you should **first** look at the code given to you and reason about what it does.  You should try to predict what the value of `num` will be after all lines have executed.\n\n* ** Insert 3 `console.log` statements.**\n\n Insert `console.log` statements into the existing code to display each value of `num` immediately after it's changed. (The animation below shows how to get started.)\n \n ![](https://images.code.org/0e425ce1a186d49d230395032f970913-image-1447802992249.19.24 add console message.gif)\n \n* **Was your prediction right?**\n \n After you figure out the answer, if your prediction was off, try to understand why.  Where was your misunderstanding?\n",
        "U3L19 - variable reassignment part 1_markdown_instruction": "# Variable Reassignment part 1\n\nSo far we have only set a variable's value once.  But it's called a *variable* for a reason - its value can change (or vary) throughout a program. This is useful and necessary for keeping track of things like a score in a game.\n\nTo re-assign a value to a variable all you have to do is maintain the mental model of what's happening:\n\n  * Variables are containers for information\n  * The '=' sign is an instruction to set the value.\n  * A series of assignment statements (see example to right) is a list of instructions to execute one at a time - it's not a series of equations that define the state of the world.\n\n# Do This\n<img src=\"https://images.code.org/066db834ae289ac538609b68c6492c4a-image-1445944263895.png\" style=\"float: right\">\n\n  * **Make a prediction**\n\n The code on the following screen looks like what is shown at right.  Study it rigth and now and make a prediction about what will happen when you run the code. What will the values of `a` and `b` be at the end of the program?\n\n* **Add console.log statements** \n\n Prove it to yourself by adding `console.log` statements at the end of the program to find out what the value of a and b are.\n \n* **NOTICE:** in the code above, after the variable `a` has been created using `var`, to change  only need to refer to the variable by its name.  The word `var` only needs to be used once - when the variable is created for the first time. \n\n* It's a **common mistake** to use `var` everytime you want to *use* a variable but just **remember `var` means CREATE a new variable**.  When you create a new variable it will lose its old value.  We'll look at errors related to this later.\n\n",
        "U3L19 - variable scoping problem debugging_markdown_instruction": "# Debugging Problem!\n\n**Uh oh!** The code here is subtly different from the one in the previous example and **now there is a problem**.\n\n# Do This\n\n* **Run the app** and try it to see the problem. \n* **See the error**....\n  * Note that **NaN** stands for \"Not a Number\" - why would it say this?\n* **Note the difference** between this broken version and the previous one that worked\n* **Fix the problem** so that it works as before",
        "U3L2 Using Simple Commands_markdown_instruction": "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\" align=right>\n\nGiven only 4 turtle commands, write code in App Lab to complete the drawings in each of the challenges below.  Your goal is to write code that solves the problem as efficiently as possible using only the commands provided.\n\nWhat does âefficientâ mean?  In computer science it can actually mean several different things depending on what youâre talking about.  Work on these challenges, try to solve them in a way that you think is best and weâll ask about efficiency at the end.\n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" align=right>\n# Do This: \nDraw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the Finish button - it will appear once you run the program.",
        "U3L2 Using Simple Commands_2018_markdown_instruction": "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\" align=right>\n\nGiven only 4 turtle commands, write code in App Lab to complete the drawings in each of the challenges below.  Your goal is to write code that solves the problem as efficiently as possible using only the commands provided.\n\nWhat does âefficientâ mean?  In computer science it can actually mean several different things depending on what youâre talking about.  Work on these challenges, try to solve them in a way that you think is best and weâll ask about efficiency at the end.\n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" align=right>\n# Do This: \nDraw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the Finish button - it will appear once you run the program.",
        "U3L23 Chatbot Conditionals 1_markdown_instruction": "# Adding Intelligence Using Conditionals\n\nSo far the digital assistant you created responds with the same message no matter what the user types. Let's look at how to make the digital assistant smarter. Let's work on creating a Movie Bot example before returning to your digital assistant.\n\nIn the last lesson we learned about `if`, `else-if`, and `else` statements. These allow us to make decisions. In the digital assistant we want to make decisions based on keywords. **The first keywords we want the Movie Bot to respond to are the movie genres: comedy, romance, action, and horror. **\n\n**Note: ** Check out the flowchart below to see the logic we are trying to add. The current portions of the diagram that we are creating are <mark>highlighted in yellow</mark>.\n\n# Do This:\n\n* **Run the code** to understand what it does.\n\n* **Add `else-if` statements** to the `if` to check if the word the user typed matches **action, romance and horror**.  **Note:** Movie Bot will only understand input in the form of \"comedy\" not \"Comedy\" or \"What is a comedy?\" \n\n* **Add an `else` statement** to print a default answer for any other input.\n\n<img src=\"https://images.code.org/8ec655795042a2a3a22a85f0886f0d21-image-1446067226646.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/8ec655795042a2a3a22a85f0886f0d21-image-1446067226646.png\" target=\"_blank\">Open diagram in a new tab</a>\n",
        "U3L23 Chatbot Intro 1a_markdown_instruction": "So far, the digital assisant doesn't do much. We'll need to start building up a conversation between the user and the digital assistant. Do the tasks for the next several levels inside the `generateResponse` function.\n\n<details>\n<summary>**Tips of the trade (click)**</summary>\nThe event handler should only handle an event and the actions directly related to it. Everything that is involved in the running of the application (such as storing the user's input inside a variable), should be abstracted into a different function (i.e. `generateResponse`). If that function starts to get complicated, you should create a *helper function* to help abstract some of the complexity.\n</details>\n\n### Instructions:\nThe following instructions should be carried out within the `generateResponse` function\n\n* First store the user's input inside a variable (let's call it `userInput`).\n\n* Make sure the input is correctly stored - log the variable to the console\n\n<details>\n<summary>**Example**</summary>\nIf I type \"What is a function?\" into the input box of my digital assistant, the following lines should be logged to the console.\n<br/><br/>\n&nbsp;&nbsp;&nbsp;text_input entered text: What is a function?<br/>\n&nbsp;&nbsp;&nbsp;generating response<br/>\n&nbsp;&nbsp;&nbsp;What is a function?\n</details>\n<br/>\n<details>\n<summary>**Hint**</summary>\nYou may need the getText block.\n</details>\n\n<br/>\nThe next level will deal with building the conversation variable",
        "U3L23 Chatbot Intro 2_markdown_instruction": "Just like Siri and Cortana, you will want your digital assistant to display both the user's question as well as its own response. How can we build a question-answer conversation?\n\n### Instructions\n\n* Use string concatenation to build up the conversation variable\n* The user's input should be stored as `User: <input>`\n* The assistant's answer should be stored as `<name>: <default response>`\n* Once these phrases have been added to the conversation variable, log the variable to the console\n\n<details>\n<summary>**Example**</summary>\nIf the user asks \"What color is the sky?\" and my assistant's name is \"Bot\" and its default response is \"I don't know.\", the conversation variable should log<br/><br/>\n&nbsp;&nbsp;&nbsp;User: What color is the sky?Bot: I don't know.\n<br/><br/>\n</details>\n\n\n<details>\n<summary>**String concatenation review**</summary>\n<ul>\n<li>You can join two strings together by typing `var newString = str1 + str2;` if str1 and str2 are pre-existing variables.</li>\n<li>If you want to *append* a string to another string, you can type `existingString = existingString + \"appended string\";`</li>\n<li>To shorten things up, you can type `existingString += \"appended string\";`</li>\n</ul><br/>\n</details>\n\n\n<details>\n<summary>**Hint**</summary>\nThe variables `NAME`, `conversation`, `DEFAULT_RESPONSE`, and `userInput` already exist\n</details>\n\n<br/>\nIn the next level, we will look at printing the conversation onto the screen.",
        "U3L23 Chatbot Intro 2a_markdown_instruction": "Now we need to control what gets displayed onto the screen.\n\n### Instructions\n\n* Display the conversation onto the `text_area` element\n\n<details>\n<summary>**Hint**</summary>\nYou may need the `setText` block\n</details>\n\n<br/>\n**Going Further**\n\nAfter the use types a prompt and hits \"enter/return\", the prompt should disappear from the `text_input` element; otherwise, the user will have to erase the input every time s/he types a prompt.\n\n* Add one block to the end of your event handler that will clear the `text_input`\n\n<br/>",
        "U3L23 Chatbot Intro 3_markdown_instruction": "You have now displayed the user's input on the screen, but it is all scrunched together. In this level, we will add some nicer formatting by using the newline character.\n\n### Instructions\n\n* Add newline characters: Your user's input and your chatbot's response should be on separate lines. The character `\\n` will add a new line to your message. Your newline character needs to live between quotes! \n\n<table style=\"width:100%; margin-left:25px;\">\n<tr>\n<td style=\"vertical-align: text-top; border-right:1px solid #000\">\n\t**Example1:**<br/><br/>\n    \n    `write(\"Hi!\\nuh huh\");`<br/><br/>\n    \n    *will be displayed as...*<br/><br/>\n    \n    Hi!<br/>uh huh<br/><br/>\n    \n    *...on your screen.*\n</td>\n<td style=\"padding-left:20px;\">\n    **Example2:**<br/><br/>\n    \n    `var firstName = \"Jessica\";`<br/>\n    \n    `var lastName = \"Programmer\";`<br/>\n    \n    `write(firstName + \"\\n\" + lastName);`<br/><br/>\n    \n    *will be displayed as...*<br/><br/>\n    \n    Jessica<br/>Programmer<br/><br/>\n    \n    *...on your screen.*\n</td>\n</tr>\n</table>",
        "U3L23 Digital Assistant 1_markdown_instruction": "To make a digital assistant, you'll need to start by reading and displaying the user's input.\n\n### Instructions:\n\n* Get the user's input from the <samp>text_input</samp> element.\n* Set the <samp>text_area</samp> element to display the user's input.\n\n<details>\n<summary>**Example**</summary>\n![](https://images.code.org/77d5e6fe9805bd012207db53ddc7c7d3-image-1439502867128.gif)\n</details>\n\n<details>\n<summary>**Hint**</summary>\nYou may need to use the <samp>get_text</samp> and <samp>set_text</samp> blocks\n</details>",
        "U3L23 Digital Assistant 2_markdown_instruction": "Next, you need to add a response from the digital assistant. For now, just make the digital assistant say \"I don't know.\"\n\n### Instructions:\n\n* After each of the user's inputs, print the response \"I don't know.\"\n  * Both the input and the response should be visible in the <samp>text_area</samp>\n\n<details>\n<summary>**Example**</summary>\n![](https://images.code.org/df27a7694d7fdb6b62085a9f1cd19088-image-1439503950645.gif)\n</details>\n\n<details>\n<summary>**Hint**</summary>\nUse string concatenation! i.e. var string = \"Hello\" + \" World\";\n</details>\n",
        "U3L23 Digital Assistant 3_markdown_instruction": "It can get annoying to have to delete the input every time you type a prompt for the digital assistant.\n\n### Instructions:\n\n* Every time the user's input is displayed in the <samp>text_area</samp>, clear the input from the <samp>text_input</samp>\n\n<details>\n<summary>**Example**</summary>\n![](https://images.code.org/fdc3c64fec527ac9d96a01d90ce71389-image-1439504453388.gif)\n</details>\n\n<details>\n<summary>**Hint**</summary>\nTry setting the text to the empty string: \"\".\n</details>",
        "U3L23 Digital Assistant 4_markdown_instruction": "It makes more sense for the user's prompt and the digital assistant's response to be on different lines. You can use the newline character, <samp>\"\\n\"</samp>, to split a line.\n\n### Instructions:\n\n* Display the user's input and the digital assistant's response on different lines.\n\n<details>\n<summary>**Example**</summary>\n![](https://images.code.org/f00e629f9a448c975b4c5c276a191a9d-image-1439504923043.gif)</details>\n<details>\n<summary>**Hint**</summary>\n<table style=\"width:100%; margin-left:25px;\">\n<tr>\n<td style=\"vertical-align: text-top; border-right:1px solid #000\">\n\t**Example1:**<br/><br/>\n    \n    <samp>console.log(\"Hi!\\nuh huh\");<br/><br/></samp>\n    \n    *will be displayed as...*<br/><br/>\n    \n    <samp>Hi!<br/>uh huh<br/><br/></samp>\n    \n    *...on your console.*\n</td>\n<td style=\"padding-left:20px;\">\n<samp>**Example2:**<br/><br/>\n    \n    var firstName = \"Jessica\";<br/>\n    \n    var lastName = \"Programmer\";<br/>\n    \n    console.log(firstName + \"\\n\" + lastName);<br/><br/></samp>\n    \n    *will be displayed as...*<br/><br/>\n    \n    <samp>Jessica<br/>Programmer<br/><br/></samp>\n    \n    *...on your console.*\n</td>\n</tr>\n</table>\n</details>\n\n",
        "U3L23 Digital Assistant 5_markdown_instruction": "It's a little difficult to tell which line is the user's command and which line is the digital assistant's response.\n\n### Instructions:\n\n* Start the user's command with the phrase \"User:\"\n* Start the digital assistant's response with the phrase \"Bot:\"\n\n<details>\n<summary>**Example**</summary>\n![](https://images.code.org/0ead464a371ef792a5b5acea88b416ae-image-1439506843163.gif)\n</details>\n",
        "U3L23 Digital Assistant 6_markdown_instruction": "Now we need to add a starting prompt so the user knows how the digital assistant works.\n\n### Instructions:\n\n* When the user hits Run, display the text \"I'm a generic digital assistant. Ask me anything!\"\n\n<details>\n<summary>**Example**</summary>\n![](https://images.code.org/255cb1cb52f04d9f8a2d2064ad599a1e-image-1439507318188.gif)\n</details>\n\n",
        "U3L23 Free Response Getting Started_markdown_instruction": "Siri is a digital assistant built into Apple's iOS devices, including iPhones and iPads. Watch the advertisement for Siri, below. \n\n<iframe width=\"637px\" height=\"375px\" src=\"https://www.youtube.com/embed/8ciagGASro0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<br/>\n__Reflect on the prompts below:__ \n\n- What types of information does Siri respond to in the video?\n- What do you think Siri is paying attention to in order to create these answers?\n",
        "U3L24 Basic String Parsing 1_markdown_instruction": "## String Parsing\n\nYour personal assistant can now respond to many key words. Unfortunately, it doesn't understand any keyword if it is in the middle of a sentence. We can solve this problem by using the <samp>str.indexOf(searchValue)</samp> function. \n\n<samp>str.indexOf(searchValue)</samp> will return a non-negative number if the searchValue is somewhere in str. Otherwise, it will return -1. You can use this property to set the condition in an if statement.\n\n<details>\n<summary>**Example** </summary>\n<pre>`\tif (sentence.indexOf(\"word\") >= 0) {\n    \tsetText(textArea, \"'word' is in the sentence!\");\n    }`</pre>\n</details>\n\n### Instructions\n\n* Adjust the chained conditional to use <samp>indexOf()</samp> instead of <samp>str == \"word\"</samp>\n* The chef's assistant should respond to a sentence that contains the word pizza or the word soup",
        "U3L24 Chatbot Basic Conditionals_markdown_instruction": "# Digital Assistant Project\n\n**Your Digital Assistant Project is back!** Now that you've learned how to use conditional logic to control your program flow, it's time to add functionality to the digital assistant you previously designed.\n\n# Do This:\n\n* You should have already created a flowchart to design the logic for your digital assistant. \n* **Use your flowchart to program your digital assistant so that it \"intelligently\" responds to user input.**\n\t* Feel free to make changes to your existing project in Design Mode, if needed.\n* **Test your program thoroughly** to make sure your digital assistant responds to user input appropriately.\n* Once you're done, **submit your project!**\n",
        "U3L24 Chatbot Conditionals 3_markdown_instruction": "## Chained Conditionals\n\nNow we have a bot that responds to anything and has a special response to the color blue. How can we add a special response for more colors? By using an `if`/`else if`/`else` statement (read \"if\" ... \"else if\" ... \"else\"). By adding an `else if` statement, we create a chained conditional. \n\n<details>\n<summary>**Example**</summary>\n<pre>`\tif (yourResponse == myResponse) {\n    \tsetText(\"text_area\", \"We agree!\");\n    } else if (yourResponse == mySecondResponse) {\n    \tsetText(\"text_area\", \"We agree again!\");\n    } else {\n    \tsetText(\"text_area\", \"We don't agree :(\");\n    }`</pre>\n</details> \n\n### Instructions\n\n* Adjust the `if`/`else` statement to make an `if`/`else if`/`else` statement.\n* Chain multiple `else if` statements together to create unique responses for at least 5 different colors.\n\t* Your color bot must have a unique response for the colors blue, red, and green, and for two additional colors of your choice.\n    \n<details>\n<summary>**Chaining Conditionals**</summary>\nWe can chain as many `else if`'s together as we want. A chained conditional could look like `if`/`else if`/`else if`/.../`else if`/`else`. The chain always starts with an `if`, ends with and `else`, and has only `else if`'s in between.\n</details>\n    \n<br/>\n",
        "U3L24 Chatbot Nested Conditionals_markdown_instruction": "Here's your digital assistant again! Time to make it a little smarter.\n\n### Instructions\n\n* Add the `contains` function to your digital assistant\n* Add a nested conditional to your digital assistant so it can respond to at least two subtopics\n* Your nested conditional should include at least 3 `else if` statements.\n\n\n<details>\n<summary>**Example**</summary>\n<pre><code>if (contains(input, \"subtopic_1\")) {\n\tif (contains(input, \"detail_A\")) {\n    \tsetText(\"text_area\", \"The input contains detail_A and subtopic_1\");\n    } else if (contains(input, \"detail_B\")) {\n    \tsetText(\"text_area\", \"The input contains detail_B and subtopic_1\");\n    } else if (contains(input, \"detail_C\")) {\n    \tsetText(\"text_area\", \"The input contains detail_c and subtopic_1\");\n    }\n} else if (contains(input, \"subtopic_2\")) {\n\tif (contains(input, \"detail_Z\")) {\n    \tsetText(\"text_area\", \"The input contains detail_Z and subtopic_2\"));\n    } else if (contains(input, \"detail_Y\")) {\n    \tsetText(\"text_area\", \"The input contains detail_Y and subtopic_2\"));\n    } else {\n    \tsetText(\"text_area\", \"The input contains subtopic_2, but no details\"));\n    }\n} else {\n\tsetText(\"text_area\", \"The input doesn't contain any subtopics I know about\");\n}</code></pre>\n</details>",
        "U3L24 Nested Conditionals 1_markdown_instruction": "# Adding *includes* to the Movie Bot\n\nIf our Movie Bot is asked a question like \"What is a good comedy movie?\" it currently won't know how to respond, **even though the question includes one of its keywords.** By using `includes` we can allow our Movie Bot to sense if a keyword appears anywhere in the question.\n\n# Do This:\n\n* **Suggestion: Switch to Text Mode.** This will be much easier in Text Mode.\n* **Change all your boolean expressions to use `includes` instead of `==`**.\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n![](https://images.code.org/0df459c4ccd9b613b23409af7ff5f59e-image-1446139233341.gif)\n\n**Note: ** Check out the flowchart below to see the logic we are trying to change.\n\n\n<img src=\"https://images.code.org/ea8340252f50774c352f58fa7cc12e5c-image-1446069734921.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/ea8340252f50774c352f58fa7cc12e5c-image-1446069734921.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "U3L24 Nested Conditionals 2_markdown_instruction": "# Nested Conditionals\n\nThe way we left the Movie Bot in the last exercise is a little strange to see as a user. **Currently when the input doesn't have a question mark the Movie Bot says \"I only respond to questions.\" but it still provides a recommendation**. We're going to alter our code so that the movie recommendation is only provided if the user asks a question.\n\n# Do This:\n\n* **Nest your movie genre `if` statements** inside the \"?\" `if` statement so that **a recommendation is made only if a question was asked**.\n* **Remove the \"That's a good question.\"** output.\n* Ensure that **if your input is not a question** then the response is **I only respond to questions.**\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n**Example Input --->** | **Output**\n---|---\nWhat's the best action movie? | The best action movie is any James Bond movie.\nI love comedy | I only respond to questions.\n<br>\n**Note: ** Check out the flowchart below to see the logic we are trying to change.\n\n<img src=\"https://images.code.org/c319d7ba43112451a6b25aa9475cacb5-image-1446074593924.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/c319d7ba43112451a6b25aa9475cacb5-image-1446074593924.png\" target=\"_blank\">Open diagram in a new tab</a>",
        "U3L24 Nested Conditionals Bugs 2_markdown_instruction": "# Debugging: Order of Conditionals\n\nHere is a simplified Movie Bot with just some logic to detect when the user inputs \"action\" and the different rating types. There is a problem though. I can't get some of the recommendations. Can you help?\n\n# Do This\n\n* **Try out the different combinations of \"action\" and the movie ratings (G, PG, PG-13, and R)**.  You'll see some recommendations cannot be reached.  Can you figure out why?\n\n* ** Fix the problem with the code so that all the conditions can be reached**  ",
        "U3L24 Nested Conditionals Bugs_markdown_instruction": "## #1: Why use \"else\" at all?\n\nYou may have noticed that you can simply use multiple `if` statements in a row and get the same functionality that you would get by using chained or nested conditionals. Why not just use `if` statements?\n\n<br/>\nThe short answer is that `else if` and `else` make your life easier. \n\n### Instructions\nWe've removed all the chained and nested conditionals from this level. \n\n* Use the \"Activity Guide - Debugging Conditionals\"\n* Expose the bugs in this problem by typing inputs into the user-input box. \n* Track which inputs cause unexpected outputs.",
        "U3L25 - drag out key event_markdown_instruction": "# *keypress*\n\nIf we want to add keyboard input to our apps we'll need to learn about how key events work in App Lab. To start let's take a closer look at the `onEvent` block. We already know that event handlers call a function. What we'll see now is that they also **pass a parameter**. The default name for this parameter is simply `event` but you can change it to be anything you like. \n\nThe `event` parameter is a more complex kind of variable (called an \"Object\") that we'll learn more about later. For now just know that for both mouse and keyboard events, the event parameter passes more information about the event. In the case of key events **you can find out the key(s) that were actually pressed by using `event.key`**.\n\n# Do This:\n\n* Drag out an `onEvent` block.\n* Change the ID to `screen1` and the event type to `keypress`.  \n\n<img src=\"https://images.code.org/537b5bbef3db62c90155528e6753a00a-image-1447175732347.gif\" style=\"width: 450px\">\n\n* Once you hit **Run**, **click on the screen so that the keystrokes will register**.\n* **Type different combinations of keys** and check out the results in the console. Does every key combination print to the console? Some keys to try:\n    * Letter keys\n    * Number keys\n    * Shift key\n    * Hold shift and letter\n    * Delete key\n    * Left and right arrow keys\n    * Press and hold a key",
        "U3L25 Chatbot Strings_markdown_instruction": "## Adding String Manipulation\n\nWelcome back to your digital assistant! Update your digital assistant to use the things you have learned about string manipulation.\n\n### Instructions\n\n**Required**: Adjust your digital assistant to read inputs the same way regardless of capitalization\n\n* Example: <samp>\"input\"</samp> should be evaluated the same way as <samp>\"Input\"</samp>, <samp>\"INPUT\"</samp>, and <samp>\"inPUt\"</samp>\n    \n\t<details><summary>**Hint**</summary>You may need `str.toLower()`.</details>\n\n<br/>\n**Required**: If a user asks about a keyword that your digital assistant does not understand, make your digital assistant respond <samp>\"I don't know what &lt;keyword> is.\"</samp>\n* &lt;keyword> in this case represents any keyword unknown to your digital assistant.\n* You may assume that the user will ask in the format <samp>\"What is &lt;keyword>?\"</samp>\n\n\t<details><summary>**Hint**</summary>Use `str.substring()`\n\t<details><summary>**Big Hint 1**</summary>The first input should be `\"What is \".length`\n\t<details><summary>**Big Hint 2**</summary>The second input should be `str.length - 1`</details></details></details>",
        "U3L25 String Parsing 5_markdown_instruction": "## Challenge 3.1\n\nWhat if somebody changes the string from <samp>\"Wisdom begins with wonder.\"</samp> to <samp>\"Does wisdom begin with wonder?\"</samp>? Even though \"begin\" and \"nder\" still exist in the string, the solution to the last level will no longer work. \n\n### Instructions\n\n* Fill in the function, <samp>findBeginNder()</samp> to get the strings \"begin\" and \"nder\" from a sentence no matter where in the sentence they exist.\n* This function should print the strings *and* their index to the console. \n* Test the function on all of the sample inputs.\n\n<details>\n<summary>**Hint**</summary>\nYou may need <samp>string.indexOf(substring)</samp> and <samp>substring.length</samp><br/>\n<details>\n<summary>**Big Hint**</summary>\nTry using <samp>string.indexOf(\"word\")</samp> and <samp>(str.indexOf(\"word\") + \"word\".length)</samp> as your inputs into <samp>string.substring()</samp>\n</details>\n<br/>\n</details>\n\n",
        "U3L25 String Parsing 6_markdown_instruction": "## Challenge 4\n\nSometimes we want to reorder information in strings. Write a function that takes a name (first last) and reorders it (last, first).\n\n\tExample: âAda Lovelaceâ -> âLovelace, Adaâ\n\nYour function should work for all the given sample inputs.\n\n<details>\n<summary>**Hint**</summary>\nUse substrings, length, index of, and your prior knowledge of concatenation.<br/>\n<details>\n<summary>**Big Hint**</summary>\n1. Grab the first name, store it in a variable<br/>\n2. Grab the last name, store it in a variable<br/>\n3. Concatenate the last name, a comma, and the first name (use the \"+\" operator)\n</details>\n</details>\n<br/>\n\n\n<br/>",
        "U3L26 AND operator_markdown_instruction": "# AND Operator in Movie Bot\n\nOn the last level you may have noticed that if you typed in a question like \"What is an R rated comedy movie?\" It gives two movie suggestions! It would make more sense for it to give one suggestion.\n\nWe could use nested `if` statements to do this by nesting `if` statements about ratings inside of `if` statements about genre. However, you might be getting a sinking feeling that this could become a lot of nested `if` statements very quickly! \n\n**Instead let's use the AND operator (`&&`) to check for a genre and a rating at the same time.** \n\n<img src=\"https://images.code.org/a9307ead3b147e0a8016f2054f47f5f2-image-1446153610104.png\" style=\"width: 200px; float:right\">\n\nBe careful about the order of the `if` statements. As a general principle you want to check the most specific conditions before checking more general ones.  For example, you want to have an `if` statement that checks for rating AND genre evaluated before one that just checks for genre on its own. Having a more general `if` statement checked first might cut off or prevent more specific conditions from being reached.\n\nYou still want your app to give suggestions when just a rating or just a genre is detected, so keep this principle of ordering in mind. (Try them in the reverse order if you're interested in seeing what happens :))\n\n**Note: ** Check out the flowchart below to see the logic we are trying to add.\n\n# Do This:\n\n* **Try the question \"What is an R rated comedy movie?** to see the result.\n\n* **Update the code to give only one movie suggestion when a genre and a rating are detected in the input.**\n\t* Make one set of `if`, `else-if`, and `else` statements about genre and rating\n    * Add conditional statements to check for a comedy movie AND a rating. You could do this for all the genres but stick to one for now.\n\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n<img src=\"https://images.code.org/e64c26fed584ddbb5e5a62e6800d5e69-image-1455816162662.png\" style=\"width: 100%\">\n\n<a href=\"https://images.code.org/e64c26fed584ddbb5e5a62e6800d5e69-image-1455816162662.png\" target=\"_blank\">Click to open in separate window.</a>",
        "U3L26 Compound Logic_markdown_instruction": "## Multiple Operators\n\nThe logical operators AND, OR, and NOT can be combined to make more complicated logic sentences. Generally, if you use more than one type of logical operator, you should put them between parentheses.\n\n<details>\n<summary>**Example**</summary>\n<pre>`var accurate = true, correct = true, inaccurate = false, incorrect = false;\nif (!(inaccurate || incorrect) && (accurate && correct)) {\n\tsetText(\"text_area\", \"It must be true!\");\n} else {\n\tsetText(\"text_area\", \"Saddly, it's false.\");\n}`</pre>\n</details>\n\n### Instructions\n\nIn the last level, we detected if a command contained the word \"bad.\" That was helpful, but there are lots of other words for bad movies that we need to catch.\n\n* Write a function called isBad that detects the words \"bad,\" \"worst,\" and \"terrible.\"\n* If all these phrases are detected, make Movie Bot respond \"The top grossing animated and G-rated film in the 2000 decade was Finding Nemo.\"\n",
        "U3L26 NOT operator_markdown_instruction": "## NOT Operator\n\nThe NOT operator can be used to reverse a boolean statement. If a statements true, the NOT operator will evaluate to false. If the statement is false, the NOT operator will evaluate to true. The NOT operator looks like \"!\" in JavaScript.\n\n<details>\n<summary>**Example**</summary>\n<pre>`if (!contains(sentence, \"word1\")) {\n\tsetText(\"text_area\", \"Word1 is not in the sentence!\");\n} else {\n\tsetText(\"text_area\", \"Word1 is in the sentence!\");\n}`</pre>\n</details>\n\n<details>\n<summary>**Where is the NOT block?**</summary>\n![](https://images.code.org/85c2de713a94c930611c0fd6afeaf3d6-image-1438876242202.gif)\n</details>\n\n### Instructions\n\nMovie Bot helps people find the most popular movies.\n\n* Write a conditional statement that detects if a command does not contain the phrase \"bad\"\n* If \"bad\" is not detected, make Movie Bot respond normally. Otherwise, make Movie Bot say \"Sorry, I don't know about bad movies.\" \n\n",
        "U3L26 OR operator_markdown_instruction": "# OR Operator in Movie Bot\n\nLet's try to check for the keywords related to questions (\"who\", \"what\", \"where\", \"when\", \"why\", \"how\", and \"?\") to decide if the user asked a question. You could do this with a chain of `if-else-if` statements, but it would not be very efficient. \n\nInstead let's use a **series of OR operators (`||`)** to check whether \"who\", \"what\", \"where\", \"when\", \"why\", \"how\" or \"?\" show up in the user input. \n\n**Note: ** We've updated the the flowchart below to show the logic we are trying to add to the initial question.\n\n# Do This:\n\n* **Update the `if` statement** to check if **\"who\" OR \"what\" OR \"where\" OR \"when\" OR \"why\" OR \"how\" OR \"?\"** have been typed in by the user.\n\n* **Test out a couple sentences with your keywords** to make sure the change worked.\n\n<img src=\"https://images.code.org/6104c7fd0ecd31010d12be79bc350831-image-1446495141539.png\" style=\"width=500px\">\n",
        "U3L2_TurtleSquare_right_markdown_instruction": "<img src=\"https://images.code.org/ad48e7224312a6c41f4fc5727af53cc0-image-1436287265071.png\" align=right> \n# Do This:\nThis time, draw a 1 x 1 square to the *front and right* of the turtle as efficiently as possible.  Notice that there is no command to turn right! You need to figure out how to draw this by only turning left and moving forward.  The program should stop with turtle in its original position, facing its original direction.\n\nWhen you're done click the Finish button to move onto the next problem.\n\n",
        "U3L2_TurtleSquare_right_2018_markdown_instruction": "<img src=\"https://images.code.org/ad48e7224312a6c41f4fc5727af53cc0-image-1436287265071.png\" align=right> \n# Do This:\nThis time, draw a 1 x 1 square to the *front and right* of the turtle as efficiently as possible.  Notice that there is no command to turn right! You need to figure out how to draw this by only turning left and moving forward.  The program should stop with turtle in its original position, facing its original direction.\n\nWhen you're done click the Finish button to move onto the next problem.\n\n",
        "U4 - Add Row By Hand_markdown_instruction": "# Add a Record by Hand\n\nYou can also add new records in the data table itself by clicking the \"Add row\" button.\n\n# Do This:\n  * Go to the \"mySongs\" data table.\n  * Click the \"Add row\" button. <img src=\"https://images.code.org/403521f908a9055f4597f649deb3cfab-image-1449260729474.png\" style=\"width: 70px\">\n  * Enter the information for a song of your choosing.\n \t* If you can't think of a song use: **Don't Stop Believin'** by *Journey*.  It's 250 seconds long.\n  * Once you've added a record in the data table come back here and continue to the next level.\n\n",
        "U4 - Add Row By Hand_2018_markdown_instruction": "# Add a Record by Hand\n\nYou can also add new records in the data table itself by clicking the \"Add row\" button.\n\n# Do This:\n  * Go to the \"mySongs\" data table.\n  * Click the \"Add row\" button. <img src=\"https://images.code.org/403521f908a9055f4597f649deb3cfab-image-1449260729474.png\" style=\"width: 70px\">\n  * Enter the information for a song of your choosing.\n \t* If you can't think of a song use: **Don't Stop Believin'** by *Journey*.  It's 250 seconds long.\n  * Once you've added a record in the data table come back here and continue to the next level.\n\n",
        "U4 - Charts - Import Data 1_markdown_instruction": "# Importing Data\n\nYou already know how to individually add new records to the tables in your database by using the `createRecord` command or by individually adding rows in the App Lab data viewer. But **adding new records one by one can quickly become tedious** if you want to create several new records.\n\nLuckily, the data viewer allows you to **import data** that youâve already collected in a **CSV file**.\n\n<details>\n<summary>Whatâs a CSV file? [click to expand]</summary>\n\nA CSV file is a comma-separated values file, which is a plain ASCII text file that stores information from a table. Each row in the CSV file corresponds to a row in a table of data. The cells in each row are stored as text fields separated by commas (hence the name). Because itâs a plain ASCII text document, CSV files are a universally-used format for sharing data. Almost all tools and programs for working with data - for example, Excel or Google Sheets - will allow you to import and export data tables as CSV files.\n</details>\n<br>\n\nFor each row in your CSV file, App Lab will create a new record and populate it with the information from that row.\n\n**Note:** Make sure that **the first row in your CSV file lists the names for each column in your table**. When you import your file, App Lab will use this row to automatically name the columns in your table.\n\n# Do This:\n\nWeâve provided you with a CSV file of some sample data <a href=\"https://docs.google.com/spreadsheets/d/1SkbOS1SNbDpRVouU20it_QlOAF_ndtTPGqgQ6smHXJo/edit?usp=sharing\" target=\"_blank\">here</a>.\n\n* **Download the file to your computer.** Make sure you remember where you saved it!\n* Open the data viewer and **view the data for the table named âmytable.â**\n* Click the **âImportâ** button, then click the **âChoose Fileâ** button that appears.\n* **Select the correct file** from your directory, then click the **âOverwrite & Importâ** button.\n\t* **Note:** When you press this button, any data that you currently have in your table will be deleted and overwritten! Make sure you really want to overwrite your existing data.\n* When your page reloads, **your table should be populated with the data from the CSV file!**\n\nThe animation below shows how to import a CSV file using the data viewer:\n\n![](https://images.code.org/db9523cebd1512bee55037e4774822a0-image-1450231058543.gif)",
        "U4 - Charts - Import Data 1_2018_markdown_instruction": "# Importing Data\n\nYou already know how to individually add new records to the tables in your database by using the `createRecord` command or by individually adding rows in the App Lab data viewer. But **adding new records one by one can quickly become tedious** if you want to create several new records.\n\nLuckily, the data viewer allows you to **import data** that youâve already collected in a **CSV file**.\n\n<details>\n<summary>Whatâs a CSV file? [click to expand]</summary>\n\nA CSV file is a comma-separated values file, which is a plain ASCII text file that stores information from a table. Each row in the CSV file corresponds to a row in a table of data. The cells in each row are stored as text fields separated by commas (hence the name). Because itâs a plain ASCII text document, CSV files are a universally-used format for sharing data. Almost all tools and programs for working with data - for example, Excel or Google Sheets - will allow you to import and export data tables as CSV files.\n</details>\n<br>\n\nFor each row in your CSV file, App Lab will create a new record and populate it with the information from that row.\n\n**Note:** Make sure that **the first row in your CSV file lists the names for each column in your table**. When you import your file, App Lab will use this row to automatically name the columns in your table.\n\n# Do This:\n\nWeâve provided you with a CSV file of some sample data <a href=\"https://docs.google.com/spreadsheets/d/1SkbOS1SNbDpRVouU20it_QlOAF_ndtTPGqgQ6smHXJo/edit?usp=sharing\" target=\"_blank\">here</a>.\n\n* **Download the file to your computer.** Make sure you remember where you saved it!\n* Open the data viewer and **view the data for the table named âmytable.â**\n* Click the **âImportâ** button, then click the **âChoose Fileâ** button that appears.\n* **Select the correct file** from your directory, then click the **âOverwrite & Importâ** button.\n\t* **Note:** When you press this button, any data that you currently have in your table will be deleted and overwritten! Make sure you really want to overwrite your existing data.\n* When your page reloads, **your table should be populated with the data from the CSV file!**\n\nThe animation below shows how to import a CSV file using the data viewer:\n\n![](https://images.code.org/db9523cebd1512bee55037e4774822a0-image-1450231058543.gif)",
        "U4 - Charts - Line Chart 1_markdown_instruction": "Youâve seen a few examples of scatter charts already, but **there are other chart types that may be better-suited to create a visualization** from your data set. In the next few levels, you will learn about one of these chart types: the **line chart.**\n\n# Line Charts\n\nYour database has been populated with records about the **popularity of different hashtags** over time. In this level, you will use this data to **create a line chart that shows how the popularity of â#tbtâ has changed over time.**\n\n# Do This:\n\n* **Open the data viewer** and look at the data youâve been provided.\n* **Add a chart UI element** to your app.\n* Use the `drawChartFromRecords` block to create a line chart.\n\t* **Make sure `chartID` matches** the ID of your UI chart.\n\t* **Change `chartType`** to âline.â\n\t* **Change `tableName`** to match the name of the table in your database.\n\t* **Fill in the `columns` array.** For this chart, youâll want the **months since January 2012 on your x-axis** and the **#tbt popularity on your y-axis.**\n* **Run the app** and see the results.\n\t* Now that your chart has meaningful labels, **what conclusions can you draw about the data set?** What trends do you notice in the popularity of #tbt over time? When was the hashtag most popular? Least popular? How might this information be utilized by people who use hashtags to publicize their posts?\n",
        "U4 - Charts - Line Chart 1_2018_markdown_instruction": "Youâve seen a few examples of scatter charts already, but **there are other chart types that may be better-suited to create a visualization** from your data set. In the next few levels, you will learn about one of these chart types: the **line chart.**\n\n# Line Charts\n\nYour database has been populated with records about the **popularity of different hashtags** over time. In this level, you will use this data to **create a line chart that shows how the popularity of â#tbtâ has changed over time.**\n\n# Do This:\n\n* **Open the data viewer** and look at the data youâve been provided.\n* **Add a chart UI element** to your app.\n* Use the `drawChartFromRecords` block to create a line chart.\n\t* **Make sure `chartID` matches** the ID of your UI chart.\n\t* **Change `chartType`** to âline.â\n\t* **Change `tableName`** to match the name of the table in your database.\n\t* **Fill in the `columns` array.** For this chart, youâll want the **months since January 2012 on your x-axis** and the **#tbt popularity on your y-axis.**\n* **Run the app** and see the results.\n\t* Now that your chart has meaningful labels, **what conclusions can you draw about the data set?** What trends do you notice in the popularity of #tbt over time? When was the hashtag most popular? Least popular? How might this information be utilized by people who use hashtags to publicize their posts?\n",
        "U4 - Charts - Line Chart 2_markdown_instruction": "In the last level, you may have noticed that **the âhashtagsâ table also has a column of information about a second hashtag, â#nofilterâ.** Ideally, it would be helpful if your chart could show lines for **both** hashtags, so you could **compare the relationship** between the two.\n\n# Plotting Additional Columns\n\nFortunately, the `columns` parameter allows you to add additional elements to the array. You already learned that the first element in `columns` specifies which table column to use for the x-axis of your chart. It turns out that ***each additional element* will be plotted as a separate line on the y-axis.** This means that, if there are three elements total in `columns`, then there will be *two* separate lines plotted on your line chart.\n\nLetâs try an example of this now. \n\n# Do This:\n\n* Your code with the line chart from the previous level has been provided.\n* **Add a third element to the `columns` array**, to display another line that shows the change in popularity of #nofilter over time. Your code should look something like this (click image to enlarge):\n\n<a href=\"https://images.code.org/e3239e1f87fc0283ffef918fbbf7aef8-image-1450401624351.20.07.png\" target=\"_blank\">![](https://images.code.org/e3239e1f87fc0283ffef918fbbf7aef8-image-1450401624351.20.07.png)</a>\n\n* **Run the app** and see the results.\n\t* What relationships do you notice between the two lines? What conclusions can you draw from this? Which hashtag would you want to use if you were trying to publicize your post to the most people?\n\n",
        "U4 - Charts - Line Chart 2_2018_markdown_instruction": "In the last level, you may have noticed that **the âhashtagsâ table also has a column of information about a second hashtag, â#nofilterâ.** Ideally, it would be helpful if your chart could show lines for **both** hashtags, so you could **compare the relationship** between the two.\n\n# Plotting Additional Columns\n\nFortunately, the `columns` parameter allows you to add additional elements to the array. You already learned that the first element in `columns` specifies which table column to use for the x-axis of your chart. It turns out that ***each additional element* will be plotted as a separate line on the y-axis.** This means that, if there are three elements total in `columns`, then there will be *two* separate lines plotted on your line chart.\n\nLetâs try an example of this now. \n\n# Do This:\n\n* Your code with the line chart from the previous level has been provided.\n* **Add a third element to the `columns` array**, to display another line that shows the change in popularity of #nofilter over time. Your code should look something like this (click image to enlarge):\n\n<a href=\"https://images.code.org/e3239e1f87fc0283ffef918fbbf7aef8-image-1450401624351.20.07.png\" target=\"_blank\">![](https://images.code.org/e3239e1f87fc0283ffef918fbbf7aef8-image-1450401624351.20.07.png)</a>\n\n* **Run the app** and see the results.\n\t* What relationships do you notice between the two lines? What conclusions can you draw from this? Which hashtag would you want to use if you were trying to publicize your post to the most people?\n\n",
        "U4 - Charts - Remixing Apps with Data_markdown_instruction": "# Remixing Apps That Use Data\n\nLetâs say you want to **remix** a classmateâs app to add some cool new features. You can do this by clicking the âRemixâ button at the top of your screen.\n\n<img src=\"https://images.code.org/71f299efc9b95ab85471f6a66450af26-image-1450299352596.55.40.png\">\n\n**Clicking the âRemixâ button creates your own copy of the app**, so that you can make changes and add things without affecting the original app. Remixing an app copies over all the **code** and **design elements** of the original app, but what happens to the **data**?\n\n# Do This:\n* **Run this app** and see what it prints to the console. Open the data viewer and **see what records are stored**.\n* **Remix the app** by clicking the âRemixâ button at the top of your screen.\n\t* **Note:** This will take you out of this stage and bring you to a more free-form version of App Lab.\n* Go **run the remixed version** of the app. See what it prints to the console, look around in the data viewer, and then **come back here**. Weâll talk about what happened in the next level.\n\n",
        "U4 - Charts - Remixing Apps with Data_2018_markdown_instruction": "# Remixing Apps That Use Data\n\nLetâs say you want to **remix** a classmateâs app to add some cool new features. You can do this by clicking the âRemixâ button at the top of your screen.\n\n<img src=\"https://images.code.org/71f299efc9b95ab85471f6a66450af26-image-1450299352596.55.40.png\">\n\n**Clicking the âRemixâ button creates your own copy of the app**, so that you can make changes and add things without affecting the original app. Remixing an app copies over all the **code** and **design elements** of the original app, but what happens to the **data**?\n\n# Do This:\n* **Run this app** and see what it prints to the console. Open the data viewer and **see what records are stored**.\n* **Remix the app** by clicking the âRemixâ button at the top of your screen.\n\t* **Note:** This will take you out of this stage and bring you to a more free-form version of App Lab.\n* Go **run the remixed version** of the app. See what it prints to the console, look around in the data viewer, and then **come back here**. Weâll talk about what happened in the next level.\n\n",
        "U4 - Charts - Scatter Chart_markdown_instruction": "**Congratulations**, you made a chart in your app!<br>\n\n<details><summary><strong>What does it all mean?</strong> (Click to expand)</summary><br>\n\nAlthough the chart you created is pretty, you may have noticed that itâs still difficult to really understand what the data set represents, since neither the table nor the columns have descriptive and meaningful names.<br>\n\nIn this level, your database has been updated so that the **table and column names are more meaningful**. Now when you look at the data viewer, you can see that the table actually represents **Rotten Tomatoes movie ratings**, and the columns represent the **Tomatometer and Audience ratings**. Youâre going to have to make some slight changes to incorporate these new names, but first youâll need to learn about a few more parameters in the `drawChartFromRecords` block.\n</details><br>\n\n# *drawChartFromRecords* Parameters\n\nYou may have noticed in the last level that the `drawChartFromRecords` block has a number of different parameters. You already used the first two parameters, `chartID` and `chartType`, in the last level. In this level, you will learn how to use the next two parameters: `tableName` and `columns`.\n\n![](https://images.code.org/72fe5a628ad5f4d78489863f6e1db251-image-1450395111592.png)\n\n\nThe `tableName` parameter lets you specify **which table** from your database you want to use to make your chart. This parameter becomes especially important if you have more than one table in your database.\n\n<img src=\"https://images.code.org/0844592b1473862203c0aeef01d2e83a-image-1450395192097.gif\" style=\"width: 200px; float: right\">\nThe `columns` parameter lets you specify **which columns** from your table to use when making your chart. `columns` is actually an **array of strings**, and **each string specifies the name of a column** to be used in your chart. In most cases, the **first element** in `columns` will represent which table column you want to use as the **x-axis** for your chart. For your scatter chart, the **second element** in `columns` will represent which table column you want to plot on the **y-axis**.\n\n# Do This:\n\n* **Open the data viewer** and look at the data youâve been provided.\n* **Add a chart UI element** to your app.\n* Use the `drawChartFromRecords` block to **create a scatter plot.**\n\t* **Make sure `chartID` matches** the ID of your UI chart.\n\t* **Change `chartType`** to âscatter.â\n\t* **Change `tableName`** to match the name of the table in your database. Check the data viewer if you need to be reminded what your table is named.\n\t* **Fill in the `columns` array.** For this chart, youâll want the **Tomatometer rating on your x-axis** and the **Audience rating on your y-axis.**\n* **Run the app** and see the results.\n\t* Now that your chart has meaningful labels, **what conclusions can you draw about the data set?** What relationships do you see between the Tomatometer rating and the Audience rating?\n\n\n",
        "U4 - Charts - Scatter Chart_2018_markdown_instruction": "**Congratulations**, you made a chart in your app!<br>\n\n<details><summary><strong>What does it all mean?</strong> (Click to expand)</summary><br>\n\nAlthough the chart you created is pretty, you may have noticed that itâs still difficult to really understand what the data set represents, since neither the table nor the columns have descriptive and meaningful names.<br>\n\nIn this level, your database has been updated so that the **table and column names are more meaningful**. Now when you look at the data viewer, you can see that the table actually represents **Rotten Tomatoes movie ratings**, and the columns represent the **Tomatometer and Audience ratings**. Youâre going to have to make some slight changes to incorporate these new names, but first youâll need to learn about a few more parameters in the `drawChartFromRecords` block.\n</details><br>\n\n# *drawChartFromRecords* Parameters\n\nYou may have noticed in the last level that the `drawChartFromRecords` block has a number of different parameters. You already used the first two parameters, `chartID` and `chartType`, in the last level. In this level, you will learn how to use the next two parameters: `tableName` and `columns`.\n\n![](https://images.code.org/72fe5a628ad5f4d78489863f6e1db251-image-1450395111592.png)\n\n\nThe `tableName` parameter lets you specify **which table** from your database you want to use to make your chart. This parameter becomes especially important if you have more than one table in your database.\n\n<img src=\"https://images.code.org/0844592b1473862203c0aeef01d2e83a-image-1450395192097.gif\" style=\"width: 200px; float: right\">\nThe `columns` parameter lets you specify **which columns** from your table to use when making your chart. `columns` is actually an **array of strings**, and **each string specifies the name of a column** to be used in your chart. In most cases, the **first element** in `columns` will represent which table column you want to use as the **x-axis** for your chart. For your scatter chart, the **second element** in `columns` will represent which table column you want to plot on the **y-axis**.\n\n# Do This:\n\n* **Open the data viewer** and look at the data youâve been provided.\n* **Add a chart UI element** to your app.\n* Use the `drawChartFromRecords` block to **create a scatter plot.**\n\t* **Make sure `chartID` matches** the ID of your UI chart.\n\t* **Change `chartType`** to âscatter.â\n\t* **Change `tableName`** to match the name of the table in your database. Check the data viewer if you need to be reminded what your table is named.\n\t* **Fill in the `columns` array.** For this chart, youâll want the **Tomatometer rating on your x-axis** and the **Audience rating on your y-axis.**\n* **Run the app** and see the results.\n\t* Now that your chart has meaningful labels, **what conclusions can you draw about the data set?** What relationships do you see between the Tomatometer rating and the Audience rating?\n\n\n",
        "U4 - Charts - drawChartFromRecords 1_markdown_instruction": "# Visualizing Data\n\nSo far, youâve been able to visualize the data you collected by using `readRecords` and **printing out your table to the console**. But you may have found that **itâs hard to draw meaningful conclusions from your data** by looking at a long list of text.\n\nAnother way that people visualize data is by **creating graphs or charts**. When you plot information on a chart, you can more easily see patterns and trends in your data, which allows you to **understand and draw conclusions from your data**. In App Lab, the block that lets you chart data is `drawChartFromRecords`.\n\n![](https://images.code.org/d03c13264c127088e6b505a30c83fde2-image-1450388738029.18.40.png)\n\n# *drawChartFromRecords*\n\nIn the next several levels, you will learn how to use a new block called `drawChartFromRecords`. This block allows you to **construct charts from records in your database** to create your own data visualizations.\n\n# Do This:\n\n* **Open the data viewer** and see what records are stored in âmytable.â\n* In Design Mode, drag a **chart** from the toolbox into your app.\n\t* Make sure you give your chart a **meaningful and descriptive ID**!\n\n![](https://images.code.org/419d63a96da5eac9989fa0cb62f0c6f3-image-1450468649142.gif)\n\n* **Drag out the `drawChartFromRecords` block.** It has some default code provided.\n* **Change the ID** in the `drawChartFromRecords` block to match the ID of the chart UI element you created. **Change the chart type** from âbarâ to âscatter.â\n\n![](https://images.code.org/3d6d79a716afb9a25e81269974615b98-image-1450389317947.gif)\n\n* **Run the program** and see the results.\n\t* **Note:** After you hit âRun,â it might take a moment for your chart to load the data from the database.",
        "U4 - Charts - drawChartFromRecords 1_2018_markdown_instruction": "# Visualizing Data\n\nSo far, youâve been able to visualize the data you collected by using `readRecords` and **printing out your table to the console**. But you may have found that **itâs hard to draw meaningful conclusions from your data** by looking at a long list of text.\n\nAnother way that people visualize data is by **creating graphs or charts**. When you plot information on a chart, you can more easily see patterns and trends in your data, which allows you to **understand and draw conclusions from your data**. In App Lab, the block that lets you chart data is `drawChartFromRecords`.\n\n![](https://images.code.org/d03c13264c127088e6b505a30c83fde2-image-1450388738029.18.40.png)\n\n# *drawChartFromRecords*\n\nIn the next several levels, you will learn how to use a new block called `drawChartFromRecords`. This block allows you to **construct charts from records in your database** to create your own data visualizations.\n\n# Do This:\n\n* **Open the data viewer** and see what records are stored in âmytable.â\n* In Design Mode, drag a **chart** from the toolbox into your app.\n\t* Make sure you give your chart a **meaningful and descriptive ID**!\n\n![](https://images.code.org/419d63a96da5eac9989fa0cb62f0c6f3-image-1450468649142.gif)\n\n* **Drag out the `drawChartFromRecords` block.** It has some default code provided.\n* **Change the ID** in the `drawChartFromRecords` block to match the ID of the chart UI element you created. **Change the chart type** from âbarâ to âscatter.â\n\n![](https://images.code.org/3d6d79a716afb9a25e81269974615b98-image-1450389317947.gif)\n\n* **Run the program** and see the results.\n\t* **Note:** After you hit âRun,â it might take a moment for your chart to load the data from the database.",
        "U4 - Charts - drawChartFromRecords Options 1_markdown_instruction": "# Customizing Your Charts\n\nYou now have a chart that allows you to **see relationships and trends in your data!**\n\nYou may find that you want **greater control over the appearance of your chart**. Luckily, `drawChartFromRecords` block actually has another parameter that lets you customize different components of your chart! Letâs take advantage of that ability now to manipulate some components of your chart.\n\n# The *options* Object\n\nIf you look at the `drawChartFromRecords` block, you will see that **there is an additional parameter after the `columns` array, called `options`**. This parameter is actually an object whose properties correspond to different parts of your chart. There are many different properties that you can set for your chart, but for this level youâll only be working with the `title` and `colors` properties.\n\n# Do This:\n\n* At the beginning of your program, **create a new object called `options`.**\n* By default, your chart is not labeled with a title, but a descriptive title will help others understand your chart more clearly.\n  * **Set the `title` property** to âPopularity of Hashtags Over Time.â\n* **Change the colors of the lines for each hashtag** by setting the `colors` property. `colors` expects an array of strings, where each string is a color name like âpurpleâ or âyellowâ.\n\t* **Note:** When you set `colors`, make sure the **number of elements in the array matches the number of columns youâre plotting.** For example, if youâre plotting two lines, youâll need to make sure `colors` has two strings - one color for each line.\n* **Add your `options` object as an additional parameter to `drawChartFromRecords`.** Your code should now look something like this (click image to enlarge):<br><a href=\"https://images.code.org/42fdbac98871d9ebcfca3501a1ae092b-image-1457061566573.6.png\" target=\"_blank\">![](https://images.code.org/42fdbac98871d9ebcfca3501a1ae092b-image-1457061566573.6.png)</a>\n* Run the app and verify that your title appears above the chart and that your lines have new colors.\n",
        "U4 - Charts - drawChartFromRecords Options 1_2018_markdown_instruction": "# Customizing Your Charts\n\nYou now have a chart that allows you to **see relationships and trends in your data!**\n\nYou may find that you want **greater control over the appearance of your chart**. Luckily, `drawChartFromRecords` block actually has another parameter that lets you customize different components of your chart! Letâs take advantage of that ability now to manipulate some components of your chart.\n\n# The *options* Object\n\nIf you look at the `drawChartFromRecords` block, you will see that **there is an additional parameter after the `columns` array, called `options`**. This parameter is actually an object whose properties correspond to different parts of your chart. There are many different properties that you can set for your chart, but for this level youâll only be working with the `title` and `colors` properties.\n\n# Do This:\n\n* At the beginning of your program, **create a new object called `options`.**\n* By default, your chart is not labeled with a title, but a descriptive title will help others understand your chart more clearly.\n  * **Set the `title` property** to âPopularity of Hashtags Over Time.â\n* **Change the colors of the lines for each hashtag** by setting the `colors` property. `colors` expects an array of strings, where each string is a color name like âpurpleâ or âyellowâ.\n\t* **Note:** When you set `colors`, make sure the **number of elements in the array matches the number of columns youâre plotting.** For example, if youâre plotting two lines, youâll need to make sure `colors` has two strings - one color for each line.\n* **Add your `options` object as an additional parameter to `drawChartFromRecords`.** Your code should now look something like this (click image to enlarge):<br><a href=\"https://images.code.org/42fdbac98871d9ebcfca3501a1ae092b-image-1457061566573.6.png\" target=\"_blank\">![](https://images.code.org/42fdbac98871d9ebcfca3501a1ae092b-image-1457061566573.6.png)</a>\n* Run the app and verify that your title appears above the chart and that your lines have new colors.\n",
        "U4 - Objects - createDotNotation_markdown_instruction": "# Creating Objects with Dot Notation\n\nWe've used dot notation to reference values in an object, but **you can also use dot notation to set the values in an object**. The example below shows how you might use this ability to build an object.\n\n![](https://images.code.org/1f7e0d6b6696d4c6a4b1bfe8b4b5b8a5-image-1449085564719.45.40 PM.png)\n\nThis pattern works because **setting the value of a new property will automatically add it to the object**. This will typically be our preferred way of creating and referencing objects. \n\n<details>\n<summary>**Alternate Method of Creating Objects** (click to expand)</summary>\nYou can create an object in a single line using the syntax below. **For large objects this method can quickly become difficult to read and write**. It will not be used in examples but you can use it if you wish.\n<ul>\n<li>Curly braces are placed around the contents of an object `{}`</li>\n<li>Properties of the object are given a name and a value which are separated by a colon `:`</li>\n<li>Properties are separated from one another by commas `,`</li>\n<li>Property names should be strings but do not need to be placed in double quotes. If they are not strings they will be coerced to strings, possibly creating unpredictable behavior.</li>\n<li> **Example:** `var user = {userName:\"Ada\", password:\"csIsAwesome\", yearBorn:1815};`</li>\n</ul>\n</details>\n\n# Do This:\n\n**Starter code** is provided which creates several student objects using the pattern shown above. The last student object is currently empty.\n\n* Use the pattern shown above to **complete the final student object for yourself.**\n* Make sure your object **has the same property names as the other 4**.\n* Run the program to **display the contents of your objects**. Confirm the values you expected appear there.\n\n![](https://images.code.org/304a8cb6ef242292f4e818d40a257dc6-image-1449516213225.23.07 PM.png)",
        "U4 - Objects - createDotNotation_2018_markdown_instruction": "# Creating Objects with Dot Notation\n\nWe've used dot notation to reference values in an object, but **you can also use dot notation to set the values in an object**. The example below shows how you might use this ability to build an object.\n\n![](https://images.code.org/1f7e0d6b6696d4c6a4b1bfe8b4b5b8a5-image-1449085564719.45.40 PM.png)\n\nThis pattern works because **setting the value of a new property will automatically add it to the object**. This will typically be our preferred way of creating and referencing objects. \n\n<details>\n<summary>**Alternate Method of Creating Objects** (click to expand)</summary>\nYou can create an object in a single line using the syntax below. **For large objects this method can quickly become difficult to read and write**. It will not be used in examples but you can use it if you wish.\n<ul>\n<li>Curly braces are placed around the contents of an object `{}`</li>\n<li>Properties of the object are given a name and a value which are separated by a colon `:`</li>\n<li>Properties are separated from one another by commas `,`</li>\n<li>Property names should be strings but do not need to be placed in double quotes. If they are not strings they will be coerced to strings, possibly creating unpredictable behavior.</li>\n<li> **Example:** `var user = {userName:\"Ada\", password:\"csIsAwesome\", yearBorn:1815};`</li>\n</ul>\n</details>\n\n# Do This:\n\n**Starter code** is provided which creates several student objects using the pattern shown above. The last student object is currently empty.\n\n* Use the pattern shown above to **complete the final student object for yourself.**\n* Make sure your object **has the same property names as the other 4**.\n* Run the program to **display the contents of your objects**. Confirm the values you expected appear there.\n\n![](https://images.code.org/304a8cb6ef242292f4e818d40a257dc6-image-1449516213225.23.07 PM.png)",
        "U4 - Objects - eventParameter_markdown_instruction": "# We've Seen Objects Before\n\n**The object that we've used most frequently is the `event` parameter of our event handlers**.\n\n![](https://images.code.org/81b5d14af7f7a81d796627d74990cdfb-image-1449511907664.11.28 PM.png)\n\nBefore we move on to creating objects of our own, let's take another look at this `event` parameter (or as we'll call it now, the \"event object\") and recall how they were used.\n\n# Do This:\n\n**Starter code** is provided which creates event handlers for both a \"click\" and \"keydown\" event and displays the contents of the event object they create.\n\n* **Run the program** and trigger both a keyboard event and a mouse event.\n* **Examine the objects displayed in the Debug Console** to recall the different pieces of information they contain.\n* **Reflect: ** Why wouldn't we want this information stored in many variables? Why wouldn't we want this information stored in an array?\n\n",
        "U4 - Objects - eventParameter_2018_markdown_instruction": "# We've Seen Objects Before\n\n**The object that we've used most frequently is the `event` parameter of our event handlers**.\n\n![](https://images.code.org/81b5d14af7f7a81d796627d74990cdfb-image-1449511907664.11.28 PM.png)\n\nBefore we move on to creating objects of our own, let's take another look at this `event` parameter (or as we'll call it now, the \"event object\") and recall how they were used.\n\n# Do This:\n\n**Starter code** is provided which creates event handlers for both a \"click\" and \"keydown\" event and displays the contents of the event object they create.\n\n* **Run the program** and trigger both a keyboard event and a mouse event.\n* **Examine the objects displayed in the Debug Console** to recall the different pieces of information they contain.\n* **Reflect: ** Why wouldn't we want this information stored in many variables? Why wouldn't we want this information stored in an array?\n\n",
        "U4 - Objects - exemplarContactsApp_markdown_instruction": "# Contacts App\nOnce you close the instructions you'll see an app we call the *Contacts App* which demonstrates where we are headed over the next few lessons.\n\nThis app might remind you of the Photo Album project you completed earlier in this course. This is because **both apps follow a pattern that is useful and very common**: you have a list of information and the user wants to look at each item individually, maybe even update or modify it. \n\nThe main difference between the Photo Album and the Contacts App is that before, you simply had an array of strings, and **now your array will contain objects with multiple pieces of information in each object**.\n\n# Do This:\n\n* **Use the example Contacts App.**\n\t* **Left and right arrow keys** change the current contact shown.\n    * **Click \"Add Contacts\"** and add a contact for yourself.\n* **Once you are comfortable with the app's functionality move on to begin building it yourself!**",
        "U4 - Objects - exemplarContactsApp_2018_markdown_instruction": "# Contacts App\nOnce you close the instructions you'll see an app we call the *Contacts App* which demonstrates where we are headed over the next few lessons.\n\nThis app might remind you of the Photo Album project you completed earlier in this course. This is because **both apps follow a pattern that is useful and very common**: you have a list of information and the user wants to look at each item individually, maybe even update or modify it. \n\nThe main difference between the Photo Album and the Contacts App is that before, you simply had an array of strings, and **now your array will contain objects with multiple pieces of information in each object**.\n\n# Do This:\n\n* **Use the example Contacts App.**\n\t* **Left and right arrow keys** change the current contact shown.\n    * **Click \"Add Contacts\"** and add a contact for yourself.\n* **Once you are comfortable with the app's functionality move on to begin building it yourself!**",
        "U4 - Objects - readStarterCode_markdown_instruction": "# Getting Started\nYou've learned a little bit about objects, and now you're going to practice using them in an app.\n\nYou've been provided some starter code and the UI elements needed to make this app. Your primary focus will be on integrating what you've learned about objects to create the functionality you saw in the Contacts App.\n\n# Do This:\n\n**Starter code** is provided, including the UI elements of your app and useful code for creating some of the familiar functionality we've designed in previous projects.\n\n* **Run the progam** to see what it does right now. (Answer: **Not much** - you'll be adding the rest of the functionality.)\n* **Look through the starter code** to understand what you already have available.\n* **Go into Design Mode** as well and look at the different UI elements and their IDs. \n\t* **Notice that there are 2 screens** with descriptive IDs already given.\n* Once you're comfortable with the starter code, move on to the next exercise.",
        "U4 - Objects - readStarterCode_2018_markdown_instruction": "# Getting Started\nYou've learned a little bit about objects, and now you're going to practice using them in an app.\n\nYou've been provided some starter code and the UI elements needed to make this app. Your primary focus will be on integrating what you've learned about objects to create the functionality you saw in the Contacts App.\n\n# Do This:\n\n**Starter code** is provided, including the UI elements of your app and useful code for creating some of the familiar functionality we've designed in previous projects.\n\n* **Run the progam** to see what it does right now. (Answer: **Not much** - you'll be adding the rest of the functionality.)\n* **Look through the starter code** to understand what you already have available.\n* **Go into Design Mode** as well and look at the different UI elements and their IDs. \n\t* **Notice that there are 2 screens** with descriptive IDs already given.\n* Once you're comfortable with the starter code, move on to the next exercise.",
        "U4 - Objects - resetIndexAndShow_markdown_instruction": "# Showing the New Contact\n\nWhen a user adds a contact, they should be **automatically taken to the `showContactsScreen`, and the newly added contact should be shown**. Additionally, when they return to the `addContactsScreen`, the fields should be cleared out.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* **Add code** to the event handler for the \"Save Contact\" button that:\n  * **Clears the text** from the inputs on that page.\n  * **Switches the screen** back to `showContactsScreen`.\n  * **Sets the `currentIndex`** and calls `showCurrentContact` so that the newly-added contact is shown.\n\n![](https://images.code.org/734a4db82d61680bc4064eee5509d9c5-image-1449529424169.gif)\n\n",
        "U4 - Objects - resetIndexAndShow_2018_markdown_instruction": "# Showing the New Contact\n\nWhen a user adds a contact, they should be **automatically taken to the `showContactsScreen`, and the newly added contact should be shown**. Additionally, when they return to the `addContactsScreen`, the fields should be cleared out.\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* **Add code** to the event handler for the \"Save Contact\" button that:\n  * **Clears the text** from the inputs on that page.\n  * **Switches the screen** back to `showContactsScreen`.\n  * **Sets the `currentIndex`** and calls `showCurrentContact` so that the newly-added contact is shown.\n\n![](https://images.code.org/734a4db82d61680bc4064eee5509d9c5-image-1449529424169.gif)\n\n",
        "U4 - Objects - showContact1_markdown_instruction": "# Displaying Contacts\n\nIn order to keep track of the current contact to display, a variable called `currentIndex` has been created. \n\n![](https://images.code.org/a116bfa6fdac0b9c4077c076089599ba-image-1449242207423.15.17 AM.png)\n\nAn event handler has been added, which changes this variable when you press the \"Left\" and \"Right\" arrow keys and makes sure the index is between 0 and the length of the contacts array (similar to the photo album project from before). Then it calls `showCurrentContact`.\n\n![](https://images.code.org/37cc2e3f0555cd0eb4c683d04a8712f4-image-1449520773029.png)\n\n**Recall** that if you have an array, you can treat any index of the array like a variable.  To get at a property of an object in the array at the current index, we can do this:\n\n![](https://images.code.org/7c5926550471ef8a368e7cd7e4c8d172-image-1449521254405.png)\n\n# Do This:\n<img src=\"https://images.code.org/fa99b8cf8084910b1a4086e06385f9c2-image-1449243444865.37.13 AM.png\" style=\"float: right; width: 200px\">\nLet's make `showCurrentContact` work. **Your code from the previous exercise** is provided.\n\n* **Add code to the `showCurrentContact` function** that sets the text of the \"contactInfo\" to `contacts[currentIndex].name`.\n\n* **Run your program** and you should be able to use the left and right arrow keys to cycle through the names of your contacts.",
        "U4 - Objects - showContact1_2018_markdown_instruction": "# Displaying Contacts\n\nIn order to keep track of the current contact to display, a variable called `currentIndex` has been created. \n\n![](https://images.code.org/a116bfa6fdac0b9c4077c076089599ba-image-1449242207423.15.17 AM.png)\n\nAn event handler has been added, which changes this variable when you press the \"Left\" and \"Right\" arrow keys and makes sure the index is between 0 and the length of the contacts array (similar to the photo album project from before). Then it calls `showCurrentContact`.\n\n![](https://images.code.org/37cc2e3f0555cd0eb4c683d04a8712f4-image-1449520773029.png)\n\n**Recall** that if you have an array, you can treat any index of the array like a variable.  To get at a property of an object in the array at the current index, we can do this:\n\n![](https://images.code.org/7c5926550471ef8a368e7cd7e4c8d172-image-1449521254405.png)\n\n# Do This:\n<img src=\"https://images.code.org/fa99b8cf8084910b1a4086e06385f9c2-image-1449243444865.37.13 AM.png\" style=\"float: right; width: 200px\">\nLet's make `showCurrentContact` work. **Your code from the previous exercise** is provided.\n\n* **Add code to the `showCurrentContact` function** that sets the text of the \"contactInfo\" to `contacts[currentIndex].name`.\n\n* **Run your program** and you should be able to use the left and right arrow keys to cycle through the names of your contacts.",
        "U4 - Objects - showContact2_markdown_instruction": "# Show Full Contact Information\n\nNow we'll want to show the full contact information. You'll need to reference each property of the contact using the same notation you used in the last exercise.\n\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* **Add code to your `showCurrentContact` function** so that the `phone` and `birthday` information is also displayed. Give each piece of information a descriptive header, as shown below.\n* **Reminder: ** You can concatenate strings with the `+` operator. `\\n` will place text on a new line.\n\n![](https://images.code.org/3aec850ad2c5ce21b1288dbec6fff711-image-1449246407070.26.34 AM.png)",
        "U4 - Objects - showContact2_2018_markdown_instruction": "# Show Full Contact Information\n\nNow we'll want to show the full contact information. You'll need to reference each property of the contact using the same notation you used in the last exercise.\n\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* **Add code to your `showCurrentContact` function** so that the `phone` and `birthday` information is also displayed. Give each piece of information a descriptive header, as shown below.\n* **Reminder: ** You can concatenate strings with the `+` operator. `\\n` will place text on a new line.\n\n![](https://images.code.org/3aec850ad2c5ce21b1288dbec6fff711-image-1449246407070.26.34 AM.png)",
        "U4 - Read Record - 1.3_markdown_instruction": "# Asynchronous Commands\nAs you just saw, **the callback function for a `readRecords` command does not run immediately**. In fact, **commands outside of the callback function will run**. \n\nWe say that the callback function of `readRecords` is **asynchronous**, because the rest of your program will not wait for the response from the database; it will continue executing, and eventually the callback function will be triggered once the data has arrived from the database.  \n\n<details><summary><strong>Terminology: Synchronous vs. Asynchronous</strong> [Click to expand]</summary>\n<P>\n\"Asynchronous\" is the opposite of \"synchronous\".  In programming, we talk about whether <strong>functions are synchronous or asynchronous</strong>.\n</P>\n<p>\n<strong>Synchronous</strong> (or \"in sync\") - things happening at the same time.  \"The dance moves were in sync with the music.\" \n<ul><li>When functions are \"synchronous\", if Function A calls or triggers Function B, Function B will execute immediately, at the moment it's called, and A will wait for B to complete before continuing on.\n</li>\n</ul>\n</p>\n<p>\n<strong>Asynchronous</strong> (or \"NOT in sync\") - things happening at different times or not in a prescribed sequence. \n<ul>\n<li>When functions are asynchronous, if Function A calls or triggers Function B, Function B will execute at some <strong>later time in the future, and A will continue without waiting for B.</strong> </li>\n<li>Asynchronous functions are used especially when the Internet is involved, because sending a request for data and getting it back can take time. The setup is common: send a request for data, and as part of the request specify what <i>should happen when the data eventually comes back.  This is what the callback function is for.</i></li>\n</ul>\n</p>\n</details>\n\n<br>\nThis allows your program to keep running while you wait for responses from the database, but **asynchronous commands can make it challenging to keep track of the order your program will run in**.\n\nYou typically think of programs waiting for one command to finish before running the next. This style of programming is referred to as **synchronous** and is generally much easier to read and write.\n\n# Callback Functions are like Event Handlers\n\n**Event handlers** for UI elements can be triggered at any time. You cannot know ahead of time when the event will be triggered, **so all the code that should run when the event is triggered needs to go in the event handler**.\n\n![](https://images.code.org/a6303ef07bf90ddf22f77950dd29a971-image-1449691163707.gif)\n\nThe same thing is true with the callback function for data commands. **If a piece of code should run after a response has been received from the database it must be placed in the callback function**.\n\n![](https://images.code.org/7908fa39f133ec1ce374f8e9943c5257-image-1449692589680.gif)\n\n**Tip: Treat the callback function of a data command like an event handler. It gets triggered when you receive the response from the database**\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* **Move your second `console.log` command inside the callback function**.\n* **Run the program** and pay close attention to **the order in which the commands run**. You can **check the Debug Console** to see which `console.log` command ran first.",
        "U4 - Read Record - 1.3_2018_markdown_instruction": "# Asynchronous Commands\nAs you just saw, **the callback function for a `readRecords` command does not run immediately**. In fact, **commands outside of the callback function will run**. \n\nWe say that the callback function of `readRecords` is **asynchronous**, because the rest of your program will not wait for the response from the database; it will continue executing, and eventually the callback function will be triggered once the data has arrived from the database.  \n\n<details><summary><strong>Terminology: Synchronous vs. Asynchronous</strong> [Click to expand]</summary>\n<P>\n\"Asynchronous\" is the opposite of \"synchronous\".  In programming, we talk about whether <strong>functions are synchronous or asynchronous</strong>.\n</P>\n<p>\n<strong>Synchronous</strong> (or \"in sync\") - things happening at the same time.  \"The dance moves were in sync with the music.\" \n<ul><li>When functions are \"synchronous\", if Function A calls or triggers Function B, Function B will execute immediately, at the moment it's called, and A will wait for B to complete before continuing on.\n</li>\n</ul>\n</p>\n<p>\n<strong>Asynchronous</strong> (or \"NOT in sync\") - things happening at different times or not in a prescribed sequence. \n<ul>\n<li>When functions are asynchronous, if Function A calls or triggers Function B, Function B will execute at some <strong>later time in the future, and A will continue without waiting for B.</strong> </li>\n<li>Asynchronous functions are used especially when the Internet is involved, because sending a request for data and getting it back can take time. The setup is common: send a request for data, and as part of the request specify what <i>should happen when the data eventually comes back.  This is what the callback function is for.</i></li>\n</ul>\n</p>\n</details>\n\n<br>\nThis allows your program to keep running while you wait for responses from the database, but **asynchronous commands can make it challenging to keep track of the order your program will run in**.\n\nYou typically think of programs waiting for one command to finish before running the next. This style of programming is referred to as **synchronous** and is generally much easier to read and write.\n\n# Callback Functions are like Event Handlers\n\n**Event handlers** for UI elements can be triggered at any time. You cannot know ahead of time when the event will be triggered, **so all the code that should run when the event is triggered needs to go in the event handler**.\n\n![](https://images.code.org/a6303ef07bf90ddf22f77950dd29a971-image-1449691163707.gif)\n\nThe same thing is true with the callback function for data commands. **If a piece of code should run after a response has been received from the database it must be placed in the callback function**.\n\n![](https://images.code.org/7908fa39f133ec1ce374f8e9943c5257-image-1449692589680.gif)\n\n**Tip: Treat the callback function of a data command like an event handler. It gets triggered when you receive the response from the database**\n\n# Do This:\n\n**Your code from the previous exercise** is provided.\n\n* **Move your second `console.log` command inside the callback function**.\n* **Run the program** and pay close attention to **the order in which the commands run**. You can **check the Debug Console** to see which `console.log` command ran first.",
        "U4 - Read Record - 3_markdown_instruction": "# Debugging: Wrong Table Name\n\nYou may have run into this in the previous level already, but let's see what happens when we try to `readRecords` from a table that doesn't exist in our database.\n\n# Do This\n\n\n* **Drag out `readRecords`** and leave the table name as \"myTable\"\n* **Run the program** to see what value is passed to the `records` parameter.\n* **Did you get an error? Did anything else change? Make a note of the behavior you see for future debugging**\n\n<details><summary>**What you should see (read this after trying it yourself)**</summary>\n<br>\n<p>\n\nIf you read from a table that doesn't exist you won't get any error messages and the database will respond by <strong>sending back an empty array of records</strong>.  An empty array looks like [] in the console.  Any other tables in the database are left unchanged.\n</p>\n<p>\nAs a <strong>debugging tip:</strong> if your requests for reading records from the database are coming up empty, double check that the code and the actual table name are spelled the table name <i>exactly the same</i> - capitalization and spaces matter!\n</p>\n\n</details>",
        "U4 - Read Record - 3_2018_markdown_instruction": "# Debugging: Wrong Table Name\n\nYou may have run into this in the previous level already, but let's see what happens when we try to `readRecords` from a table that doesn't exist in our database.\n\n# Do This\n\n\n* **Drag out `readRecords`** and leave the table name as \"myTable\"\n* **Run the program** to see what value is passed to the `records` parameter.\n* **Did you get an error? Did anything else change? Make a note of the behavior you see for future debugging**\n\n<details><summary>**What you should see (read this after trying it yourself)**</summary>\n<br>\n<p>\n\nIf you read from a table that doesn't exist you won't get any error messages and the database will respond by <strong>sending back an empty array of records</strong>.  An empty array looks like [] in the console.  Any other tables in the database are left unchanged.\n</p>\n<p>\nAs a <strong>debugging tip:</strong> if your requests for reading records from the database are coming up empty, double check that the code and the actual table name are spelled the table name <i>exactly the same</i> - capitalization and spaces matter!\n</p>\n\n</details>",
        "U4 - Read Record - 4.1_markdown_instruction": "# Using Your Records\n\nThe `records` parameter in your callback function is **an array of objects**. \n\nIt can be used exactly the same as other arrays of objects you have seen before.\n\n| You can... | code|\n|:-- |:--|\n|**refence each object (record) by an index**| `records[5]`|\n|**reference each property of an object using dot notation**| `records[5].title`|\n|**find out the number of objects in the array** | `records.length`|\n\n# Do This:\n\n**Starter code is provided** which reads records from the same **\"topMovies\" table** you saw in the previous level.\n\n**Add code** inside the callback function of `readRecords` that:\n\n  * Displays the **first movie in the array** (i.e. displays `records[0]`).\n  * Displays the **last movie in the array.**\n \t* Try using `records.length-1` rather than a hard-coded number.\n  * Displays the `title` of the **third movie in the array**.\n\n**Run the program** and confirm that you are displaying the correct movie.  Your output should look like this:\n\n![](https://images.code.org/d3c0f6bd73b637828f0057fa91d6f56f-image-1524524661772.03.55 PM.png)",
        "U4 - Read Record - 4.1_2018_markdown_instruction": "# Using Your Records\n\nThe `records` parameter in your callback function is **an array of objects**. \n\nIt can be used exactly the same as other arrays of objects you have seen before.\n\n| You can... | code|\n|:-- |:--|\n|**refence each object (record) by an index**| `records[5]`|\n|**reference each property of an object using dot notation**| `records[5].title`|\n|**find out the number of objects in the array** | `records.length`|\n\n# Do This:\n\n**Starter code is provided** which reads records from the same **\"topMovies\" table** you saw in the previous level.\n\n**Add code** inside the callback function of `readRecords` that:\n\n  * Displays the **first movie in the array** (i.e. displays `records[0]`).\n  * Displays the **last movie in the array.**\n \t* Try using `records.length-1` rather than a hard-coded number.\n  * Displays the `title` of the **third movie in the array**.\n\n**Run the program** and confirm that you are displaying the correct movie.  Your output should look like this:\n\n![](https://images.code.org/d3c0f6bd73b637828f0057fa91d6f56f-image-1524524661772.03.55 PM.png)",
        "U4 - Read Record - 5_markdown_instruction": "# Reading Records: Looping over the Array\n\nWe can loop over the `records` array just like any other array to **perform the an action for every object in the array**. Recall that the standard way of doing this is to use a `for` loop.  \n\nFor example, if you had an array called `records` and each object in the array had a property called `name` you could display every name in your array like this:\n\n![](https://images.code.org/baf9aa7c93c78ad5992e29ebc7baacb8-image-1449872724581.png)\n\n# Do This:\n**Starter code is provided** which reads records from the \"topMovies\" table.\n\n* Add a `for` loop to the callback function of the `readRecords` command.\n* Add code to your `for` loop that displays **only the title of every movie in the list**.\n\t* HINT: to display the title of a movie inside the for loop use `records[i].title`.\n* Your output should look like this:\n\n![](https://images.code.org/5b13735c52308f57241e7c34707c82e6-image-1449783907117.44.02 PM.png) ",
        "U4 - Read Record - 5_2018_markdown_instruction": "# Reading Records: Looping over the Array\n\nWe can loop over the `records` array just like any other array to **perform the an action for every object in the array**. Recall that the standard way of doing this is to use a `for` loop.  \n\nFor example, if you had an array called `records` and each object in the array had a property called `name` you could display every name in your array like this:\n\n![](https://images.code.org/baf9aa7c93c78ad5992e29ebc7baacb8-image-1449872724581.png)\n\n# Do This:\n**Starter code is provided** which reads records from the \"topMovies\" table.\n\n* Add a `for` loop to the callback function of the `readRecords` command.\n* Add code to your `for` loop that displays **only the title of every movie in the list**.\n\t* HINT: to display the title of a movie inside the for loop use `records[i].title`.\n* Your output should look like this:\n\n![](https://images.code.org/5b13735c52308f57241e7c34707c82e6-image-1449783907117.44.02 PM.png) ",
        "U4 - ReadRecords - Contacts App 1_markdown_instruction": "# Contacts App: Loading Your Contacts From the Database\n\nThe way you left your Contacts App in the last lesson, **your app had stored data in a remote database but could not read it back**. Now that you know how to use `readRecords`, you will be able to read that data into your app at the start of the program.\n\nRather than constructing and adding objects one-by-one to the `contacts` array, you can simply get the array of records from the database and use that as the global variable in our app.  Let's do it.\n\n# Do This:\n\n**Your code from the \"Contacts App\" is provided.**\n\n* Go to the Data Viewer for your app and confirm that your contacts data is stored there.\n* **Remove any code** from your program that:\n\t* Constructed an object for a contact, (e.g. `contact1`, `contact2`, etc.\n    * Appended an object to the `contacts` array. \n    \n* Drag out a `readRecords` command and place it after the command `contacts = [];`\n\n* In the **callback function** of `readRecords`:\n  * Set `contacts = records`.\n  * Call `showCurrentContact`.\n\n<details>\n<summary><strong>What your code should look like</strong> (click to expand)</summary>\n<p>\nThe first few lines of your contacts app should now look like this.  \n</p>\n![](https://images.code.org/d0c426401a35ff99ab9eb86128bc7be5-image-1449949740702.48.41 PM.png)\n\n<p>Notice that this actually makes the program simpler: rather than constructing and adding objects one-by-one to the `contacts` array, we simply get the array of records from the database and <strong>assign it to `contacts`</strong>.  \n</p>\n<p>\nSince `contacts` is a global variable in our app, the rest of the code can use it.  \n</p>\n\n</details>",
        "U4 - ReadRecords - Contacts App 1_2018_markdown_instruction": "# Contacts App: Loading Your Contacts From the Database\n\nThe way you left your Contacts App in the last lesson, **your app had stored data in a remote database but could not read it back**. Now that you know how to use `readRecords`, you will be able to read that data into your app at the start of the program.\n\nRather than constructing and adding objects one-by-one to the `contacts` array, you can simply get the array of records from the database and use that as the global variable in our app.  Let's do it.\n\n# Do This:\n\n**Your code from the \"Contacts App\" is provided.**\n\n* Go to the Data Viewer for your app and confirm that your contacts data is stored there.\n* **Remove any code** from your program that:\n\t* Constructed an object for a contact, (e.g. `contact1`, `contact2`, etc.\n    * Appended an object to the `contacts` array. \n    \n* Drag out a `readRecords` command and place it after the command `contacts = [];`\n\n* In the **callback function** of `readRecords`:\n  * Set `contacts = records`.\n  * Call `showCurrentContact`.\n\n<details>\n<summary><strong>What your code should look like</strong> (click to expand)</summary>\n<p>\nThe first few lines of your contacts app should now look like this.  \n</p>\n![](https://images.code.org/d0c426401a35ff99ab9eb86128bc7be5-image-1449949740702.48.41 PM.png)\n\n<p>Notice that this actually makes the program simpler: rather than constructing and adding objects one-by-one to the `contacts` array, we simply get the array of records from the database and <strong>assign it to `contacts`</strong>.  \n</p>\n<p>\nSince `contacts` is a global variable in our app, the rest of the code can use it.  \n</p>\n\n</details>",
        "U4 - ReadRecords - Contacts App 2_markdown_instruction": "# Refreshing Local Data\n\nYour app is still running off of an array called `contacts` that is stored in your app. You can think of this as a **local copy of your database**. In order to prevent it from getting out of sync with your actual database, you should **refresh the contents of this array every time you make changes to the database**.\n\nSince you will need to refresh your app many times in your program, **you will create a single function that refreshes the data in your app and displays the results**.\n\n# Do This:\n\n**Your code and database for the Contacts App is provided.**\n\n**Goal: Move the code that loads the data from the database into a function called `refreshLocalData`**.\n\n  * Create a function called `refreshLocalData`. <img src=\"https://images.code.org/e0e29e916e63bc8c914ee1387729c86b-image-1450115424518.gif\" style=\"width: 350px; float: right\">\n\n  * Move the call to `readRecords` from the top of you code into the function. (See animation).\n\n  * Make a call to `refreshLocalData` at the beginning of your program.\n\t* You need this now to trigger the initial loading of the data.\n    * <details><summary><strong>The top of your program should now look like this.</strong> (click to expand)</summary>![](https://images.code.org/89f5a3a70d66d2fe5b382b79a6aef347-image-1455908393952.PNG)</details>\n\n* Run the program and confirm that **it still copies the data from your database into the `contacts` array**.\n\n",
        "U4 - ReadRecords - Contacts App 2_2018_markdown_instruction": "# Refreshing Local Data\n\nYour app is still running off of an array called `contacts` that is stored in your app. You can think of this as a **local copy of your database**. In order to prevent it from getting out of sync with your actual database, you should **refresh the contents of this array every time you make changes to the database**.\n\nSince you will need to refresh your app many times in your program, **you will create a single function that refreshes the data in your app and displays the results**.\n\n# Do This:\n\n**Your code and database for the Contacts App is provided.**\n\n**Goal: Move the code that loads the data from the database into a function called `refreshLocalData`**.\n\n  * Create a function called `refreshLocalData`. <img src=\"https://images.code.org/e0e29e916e63bc8c914ee1387729c86b-image-1450115424518.gif\" style=\"width: 350px; float: right\">\n\n  * Move the call to `readRecords` from the top of you code into the function. (See animation).\n\n  * Make a call to `refreshLocalData` at the beginning of your program.\n\t* You need this now to trigger the initial loading of the data.\n    * <details><summary><strong>The top of your program should now look like this.</strong> (click to expand)</summary>![](https://images.code.org/89f5a3a70d66d2fe5b382b79a6aef347-image-1455908393952.PNG)</details>\n\n* Run the program and confirm that **it still copies the data from your database into the `contacts` array**.\n\n",
        "U4 - ReadRecords - Contacts App 3_markdown_instruction": "# Updating Your Contacts: Adding a Contact\n\nWhen you add a new contact to your app, it currently gets added to your database by calling `createRecord`. Once this happens, **your local copy of `contacts` is no longer up to date**. \n\nWe can address this by calling `refreshLocalData` any time we add anything to the database. For example, any time we `createRecord`, we can refresh the local data as soon as we know the new record was successfully added to the database (i.e. when the callback function is triggered).\n\n# Do This:\n\n**Your code and database for the Contacts App is provided.**\n\n  * Your app currently **adds a new contact to the database** when you click the \"Save Contact\" button.\n \n  * **Add a call to `refreshLocalData` inside the callback function of `createRecord`**.\n \n  * Move the line to update `currentIndex` from the event handler for the \"Save Contact\" button into `refreshLocalData`.\n \n  * <details><summary><strong>Your code should look like this.</strong> (click to expand)</summary>![](https://images.code.org/a24b562559cbec49df721908de6969fe-image-1455911309789.PNG)![](https://images.code.org/f969b8e71578ff1cace8a57620b1ba7e-image-1455911311856.PNG)</details>\n\n* Run the program, and **confirm that when you add a contact to your database, you can also see it in your app**.\n\n  * <details><summary><strong>Now when you run your program, a different contact gets displayed first. Why?</strong> (click to expand)</summary>\nSince you moved the line to update `currentIndex`, now every time you call `refreshLocalData`, the current index gets set to the newest contact in your database, which means `showCurrentContact` will display the most recently added contact. So when you call `refreshLocalData` at the beginning of your program to load your contacts into the `contacts` array, it will also make sure the newest contact is displayed first.</details>\n\n\n\n",
        "U4 - ReadRecords - Contacts App 3_2018_markdown_instruction": "# Updating Your Contacts: Adding a Contact\n\nWhen you add a new contact to your app, it currently gets added to your database by calling `createRecord`. Once this happens, **your local copy of `contacts` is no longer up to date**. \n\nWe can address this by calling `refreshLocalData` any time we add anything to the database. For example, any time we `createRecord`, we can refresh the local data as soon as we know the new record was successfully added to the database (i.e. when the callback function is triggered).\n\n# Do This:\n\n**Your code and database for the Contacts App is provided.**\n\n  * Your app currently **adds a new contact to the database** when you click the \"Save Contact\" button.\n \n  * **Add a call to `refreshLocalData` inside the callback function of `createRecord`**.\n \n  * Move the line to update `currentIndex` from the event handler for the \"Save Contact\" button into `refreshLocalData`.\n \n  * <details><summary><strong>Your code should look like this.</strong> (click to expand)</summary>![](https://images.code.org/a24b562559cbec49df721908de6969fe-image-1455911309789.PNG)![](https://images.code.org/f969b8e71578ff1cace8a57620b1ba7e-image-1455911311856.PNG)</details>\n\n* Run the program, and **confirm that when you add a contact to your database, you can also see it in your app**.\n\n  * <details><summary><strong>Now when you run your program, a different contact gets displayed first. Why?</strong> (click to expand)</summary>\nSince you moved the line to update `currentIndex`, now every time you call `refreshLocalData`, the current index gets set to the newest contact in your database, which means `showCurrentContact` will display the most recently added contact. So when you call `refreshLocalData` at the beginning of your program to load your contacts into the `contacts` array, it will also make sure the newest contact is displayed first.</details>\n\n\n\n",
        "U4 - deleteRecords 0_markdown_instruction": "# Deleting Records with Code\n\nYou can delete a record \"by hand\" in the Data Viewer by clicking the <img src=\"https://images.code.org/b45cebe6d06d8c2d45a233bd3c472a62-image-1449850229074.png\" style=\"width: 50px\"> button.\n\nTo delete a record with code you use the `deleteRecord` command.  It works similarly to the other data tools in that it has 3 parameters:\n\n  * The **name of the table** you want to delete from.\n  * The **object** you want to delete.\n  * A **callback** function.\n\n`deleteRecord` is **different from the other data commands** in one critical way. The object you send to the database ***only* needs to contain the id of the record** you want to delete.  \n \n\n# Do This:\n\n**Your database already includes a table called \"mytable\"**\n\n  * Go to the Data Viewer and **look at the data in \"mytable\"**.\n  * **Drag out** the `deleteRecord` block.\n \t* It includes **default code** to delete the record with id:1 in \"mytable\".\n  * Run the code and **confirm that the record with id:1 (\"Greg\") is deleted from the database**.\n\n![](https://images.code.org/f1168e1793f646575f26d86e66ddcae4-image-1457470120824.gif)",
        "U4 - deleteRecords 0_2018_markdown_instruction": "# Deleting Records with Code\n\nYou can delete a record \"by hand\" in the Data Viewer by clicking the <img src=\"https://images.code.org/b45cebe6d06d8c2d45a233bd3c472a62-image-1449850229074.png\" style=\"width: 50px\"> button.\n\nTo delete a record with code you use the `deleteRecord` command.  It works similarly to the other data tools in that it has 3 parameters:\n\n  * The **name of the table** you want to delete from.\n  * The **object** you want to delete.\n  * A **callback** function.\n\n`deleteRecord` is **different from the other data commands** in one critical way. The object you send to the database ***only* needs to contain the id of the record** you want to delete.  \n \n\n# Do This:\n\n**Your database already includes a table called \"mytable\"**\n\n  * Go to the Data Viewer and **look at the data in \"mytable\"**.\n  * **Drag out** the `deleteRecord` block.\n \t* It includes **default code** to delete the record with id:1 in \"mytable\".\n  * Run the code and **confirm that the record with id:1 (\"Greg\") is deleted from the database**.\n\n![](https://images.code.org/f1168e1793f646575f26d86e66ddcae4-image-1457470120824.gif)",
        "U4 - deleteRecords 1_markdown_instruction": "# Deleting Records Continued...\n\nThe other difference with `deleteRecord` is that the database **sends back a boolean called `success`.** \n\nUsing the `success` boolean, you can write a callback function that will behave differently based on whether or not `deleteRecord` ran successfully.\n\n* If the database was able to successfully delete the specified record, `success` will be set to **true** in the callback function. \n* If the database was **not** able to delete the record, `success` will be **false.**\n\nLet's do a little more experimentation with `deleteRecord` on a sample database.  **We've given you a new database that has about 40 songs in it.** You have a few different things to try so don't miss them.\n\n# Do This:\n\n* **Click View Data.** Look at the \"mySongs\" table and **find the ID of the song \"Little Bunny Foo Foo.\"** \n* **Drag out the `deleteRecord` block.**\n  * Set the table name to \"mySongs.\"\n  * Set the `id` of the object to delete to the ID of \"Little Bunny Foo Foo.\"\n* **Add an `if` statement to the callback function.**\n  * If `success` is true, print \"Record deleted successfully\" to the console.\n  * Otherwise, print \"Could not delete record\" to the console.\n* **Run the code.**\n  * Verify that you deleted \"Little Bunny Foo Foo\" from the list of songs.\n* **Run the exact same code again.**\n  * This will attempt to delete a record with the ID you just deleted. See what happens...",
        "U4 - deleteRecords 1_2018_markdown_instruction": "# Deleting Records Continued...\n\nThe other difference with `deleteRecord` is that the database **sends back a boolean called `success`.** \n\nUsing the `success` boolean, you can write a callback function that will behave differently based on whether or not `deleteRecord` ran successfully.\n\n* If the database was able to successfully delete the specified record, `success` will be set to **true** in the callback function. \n* If the database was **not** able to delete the record, `success` will be **false.**\n\nLet's do a little more experimentation with `deleteRecord` on a sample database.  **We've given you a new database that has about 40 songs in it.** You have a few different things to try so don't miss them.\n\n# Do This:\n\n* **Click View Data.** Look at the \"mySongs\" table and **find the ID of the song \"Little Bunny Foo Foo.\"** \n* **Drag out the `deleteRecord` block.**\n  * Set the table name to \"mySongs.\"\n  * Set the `id` of the object to delete to the ID of \"Little Bunny Foo Foo.\"\n* **Add an `if` statement to the callback function.**\n  * If `success` is true, print \"Record deleted successfully\" to the console.\n  * Otherwise, print \"Could not delete record\" to the console.\n* **Run the code.**\n  * Verify that you deleted \"Little Bunny Foo Foo\" from the list of songs.\n* **Run the exact same code again.**\n  * This will attempt to delete a record with the ID you just deleted. See what happens...",
        "U4 - deleteRecords 2 delete object_markdown_instruction": "# Using Objects to Specify What to Delete\n\nWhen deleting an object in the database **the only property the database checks is `id` - *everything else* in the object is ignorned by `deleteRecord`**.\n\nThe **key takeway** is that you can pass *any* object to `deleteRecord`. As long as it has a property called `id` the database will try to delete a record with that ID.\n\nLet's look at an example. \n\n# Do This:\n <img src=\"https://images.code.org/0af097cf5062c49743275f2c3df21bf7-image-1449864027240.gif\" style=\"float: right; width: 350px\">\n \n**Starter code is provided** that constructs an object called `song` and sets `song.id = 9` (the ID of \"Little Bunny Foo Foo\"). Additional \"junk\" properties are added as well. The \"mySongs\" table in the database has been restored to its original state.\n \n* **Replace the second parameter of deleteRecord to use the `song` object** instead of `{id:1}` (see animation at right).\n* Run your program and **confirm that the record with id 9 is deleted** by checking in the Data Viewer.\n* **Change the ID in the `song` object** to the ID of a different record in your database.\n* Run your program and **confirm another record in \"mySongs\" was deleted.**",
        "U4 - deleteRecords 2 delete object_2018_markdown_instruction": "# Using Objects to Specify What to Delete\n\nWhen deleting an object in the database **the only property the database checks is `id` - *everything else* in the object is ignorned by `deleteRecord`**.\n\nThe **key takeway** is that you can pass *any* object to `deleteRecord`. As long as it has a property called `id` the database will try to delete a record with that ID.\n\nLet's look at an example. \n\n# Do This:\n <img src=\"https://images.code.org/0af097cf5062c49743275f2c3df21bf7-image-1449864027240.gif\" style=\"float: right; width: 350px\">\n \n**Starter code is provided** that constructs an object called `song` and sets `song.id = 9` (the ID of \"Little Bunny Foo Foo\"). Additional \"junk\" properties are added as well. The \"mySongs\" table in the database has been restored to its original state.\n \n* **Replace the second parameter of deleteRecord to use the `song` object** instead of `{id:1}` (see animation at right).\n* Run your program and **confirm that the record with id 9 is deleted** by checking in the Data Viewer.\n* **Change the ID in the `song` object** to the ID of a different record in your database.\n* Run your program and **confirm another record in \"mySongs\" was deleted.**",
        "U4 Model Design 1_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://curriculum.code.org/media/screen_model.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Creating a digital prototype\n\nUsing the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app \"Recycling Finder\". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.\n\n<!--<img src=\"https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png\" style=\"width: 300px; float: right; clear: both;\">-->\n\n# Do This\n\n* **Make sure you are in Design Mode,** the switch appears above your app window on the left.\n* **Click on the title text** to view its properties.\n* **Change the property \"text\"** to \"Recycling Finder\".\n* **Change the \"font size\"** to make the title larger.\n* **Change the \"text alignment\"** so the title is centered on the screen.\n\n_Note: Make sure you click **\"Run\"** before moving on to save your progress._",
        "U4 Model Design 1_2018_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://curriculum.code.org/media/screen_model.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Creating a digital prototype\n\nUsing the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app \"Recycling Finder\". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.\n\n<!--<img src=\"https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png\" style=\"width: 300px; float: right; clear: both;\">-->\n\n# Do This\n\n* **Make sure you are in Design Mode,** the switch appears above your app window on the left.\n* **Click on the title text** to view its properties.\n* **Change the property \"text\"** to \"Recycling Finder\".\n* **Change the \"font size\"** to make the title larger.\n* **Change the \"text alignment\"** so the title is centered on the screen.\n\n_Note: Make sure you click **\"Run\"** before moving on to save your progress._",
        "U4 Model Design 2_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Adding more text\n\nEach screen of your app is composed of multiple design _elements_. You can drag out elements from the \"Design Toolbox\" on the left side of the workspace. To add more blocks of text, just drag out additional \"label\" elements.\n\n# Do This\n\n* **Drag out a new \"label\" element** and place it where the \"home_description\" text should be.\n* **Change the id** to match the prototype (home_description)\n* **Change the field \"text\"** to match the prototype.\n* **Resize** the text area by clicking and dragging the bottom right corner.\n* **Change any other properties** to make the text look like you want it to.",
        "U4 Model Design 2_2018_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Adding more text\n\nEach screen of your app is composed of multiple design _elements_. You can drag out elements from the \"Design Toolbox\" on the left side of the workspace. To add more blocks of text, just drag out additional \"label\" elements.\n\n# Do This\n\n* **Drag out a new \"label\" element** and place it where the \"home_description\" text should be.\n* **Change the id** to match the prototype (home_description)\n* **Change the field \"text\"** to match the prototype.\n* **Resize** the text area by clicking and dragging the bottom right corner.\n* **Change any other properties** to make the text look like you want it to.",
        "U4 Model Design 3_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Adding images\n\nThe prototype just has a plain black square where the logo should be - let's add an image to spice it up. The \"image\" element allows you to either upload an image from your computer or select from a library of graphic icons.\n\n\n# Do This\n\n* **Drag out a new \"image\" element** and place between the description and the title.\n* **Change the id** to match the prototype.\n* **Click the \"Choose...\" link** next to the \"image\" field.\n* **Select the \"Icons\" tab** and choose an icon for your logo.\n* **Change the color** of the icon using the \"icon color\" field.",
        "U4 Model Design 3_2018_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Adding images\n\nThe prototype just has a plain black square where the logo should be - let's add an image to spice it up. The \"image\" element allows you to either upload an image from your computer or select from a library of graphic icons.\n\n\n# Do This\n\n* **Drag out a new \"image\" element** and place between the description and the title.\n* **Change the id** to match the prototype.\n* **Click the \"Choose...\" link** next to the \"image\" field.\n* **Select the \"Icons\" tab** and choose an icon for your logo.\n* **Change the color** of the icon using the \"icon color\" field.",
        "U4 Model Design 4_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Adding buttons\n\nButtons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.\n\n# Do This\n\n* **Drag out a new \"button\" element** for each of the two remaining buttons.\n* **Change the ids** to match the prototype.\n* **Change the text** to match the prototype.\n* **Modify other properties** to make the screen look like you'd like.\n\n<img src=\"https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif\" style=\"width: 500px;\">",
        "U4 Model Design 4_2018_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Adding buttons\n\nButtons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.\n\n# Do This\n\n* **Drag out a new \"button\" element** for each of the two remaining buttons.\n* **Change the ids** to match the prototype.\n* **Change the text** to match the prototype.\n* **Modify other properties** to make the screen look like you'd like.\n\n<img src=\"https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif\" style=\"width: 500px;\">",
        "U4 Model Design 5_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Making a Search Box\n\nThe search box in our prototype can be created using a \"Text Input\" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.\n\n# Do This\n\n* **Add a Text Input** element.\n* **Change the id** to match the prototype.\n* **Add a Label** with the text \"Location\" next to your text input.",
        "U4 Model Design 5_2018_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Making a Search Box\n\nThe search box in our prototype can be created using a \"Text Input\" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.\n\n# Do This\n\n* **Add a Text Input** element.\n* **Change the id** to match the prototype.\n* **Add a Label** with the text \"Location\" next to your text input.",
        "U4 Model Design 6_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Checkboxes\n\nThe type of recyclables you're searching for can be set using \"Checkbox\" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.\n\n# Do This\n\n* **Add a Checkbox** for each of the options.\n* **Change the ids** to match the prototype.\n* **Add labels** to describe each checkbox.",
        "U4 Model Design 6_2018_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Checkboxes\n\nThe type of recyclables you're searching for can be set using \"Checkbox\" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.\n\n# Do This\n\n* **Add a Checkbox** for each of the options.\n* **Change the ids** to match the prototype.\n* **Add labels** to describe each checkbox.",
        "U4 Model Design 7_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://curriculum.code.org/media/screen_model.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Finishing Touches\n\nBy now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.\n\n# Do This\n\n* **Check over the prototype** to make sure you've included everything.\n* **Read through your IDs** and fix any that aren't descriptive.\n* **Clean up** any rough edges by resizing or moving around elements.",
        "U4 Model Design 7_2018_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://curriculum.code.org/media/screen_model.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Finishing Touches\n\nBy now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.\n\n# Do This\n\n* **Check over the prototype** to make sure you've included everything.\n* **Read through your IDs** and fix any that aren't descriptive.\n* **Clean up** any rough edges by resizing or moving around elements.",
        "U4 Model Program 1.5_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://curriculum.code.org/media/screen_model_about.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Design the About Screen\n\nTo add elements to your new About screen, you'll need to first select it from the screens dropdown.\n\n# Do This\n\n* **Complete the About screen** using the prototype to the right.\n* **Use the screens dropdown** to switch between your Home and About screens.",
        "U4 Model Program 1.5_2018_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://curriculum.code.org/media/screen_model_about.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Design the About Screen\n\nTo add elements to your new About screen, you'll need to first select it from the screens dropdown.\n\n# Do This\n\n* **Complete the About screen** using the prototype to the right.\n* **Use the screens dropdown** to switch between your Home and About screens.",
        "U4 Model Program 2_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Screen Import\n\nIn addition to adding new blank screens, you can import screens from \"Import Screen...\" To import a screen from someone else, you'll need them to give you the sharing URL.\n\n**Note:** Screens you import _must not_ share any IDs with elements already in your app!\n\n# Do This\n\nAnother student has created a search results screen that you can import into your app. Their app's share link is **<a href=\"https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/\" target=\"_blank\">https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**\n\n* **Select \"Import Screen...** from the screens dropdown.\n* **Copy and paste the above url** into the import screens dialog.\n* **Select the screen** you wish to import.\n* **Click Import** to import the screen.\n* **Use the screens dropdown** to switch between your Home, About, and Search screens.",
        "U4 Model Program 2_2018_markdown_instruction": "<div markdown=\"1\" style=\"float: right; margin: 20px;\">\n\n![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)\n\n<br/>\n\nClick to expand\n\n</div>\n\n# Screen Import\n\nIn addition to adding new blank screens, you can import screens from \"Import Screen...\" To import a screen from someone else, you'll need them to give you the sharing URL.\n\n**Note:** Screens you import _must not_ share any IDs with elements already in your app!\n\n# Do This\n\nAnother student has created a search results screen that you can import into your app. Their app's share link is **<a href=\"https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/\" target=\"_blank\">https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**\n\n* **Select \"Import Screen...** from the screens dropdown.\n* **Copy and paste the above url** into the import screens dialog.\n* **Select the screen** you wish to import.\n* **Click Import** to import the screen.\n* **Use the screens dropdown** to switch between your Home, About, and Search screens.",
        "U4 Model Program 3_markdown_instruction": "# Button Events\n\nWith our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the \"home_search_btn\" button and print something to the console when it's clicked\n\n# Do This\n\nYou're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.\n\n![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)\n\n* **Drag out an `onEvent` block** from the code toolbox.\n* **Select \"home_search_btn\"** from the \"id\" dropdown.\n* **Drag out a `console.log` block** from the variables drawer.\n* **Run your app**.\n* **Click the Search button** and look for messages in the console.",
        "U4 Model Program 3_2018_markdown_instruction": "# Button Events\n\nWith our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the \"home_search_btn\" button and print something to the console when it's clicked\n\n# Do This\n\nYou're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.\n\n![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)\n\n* **Drag out an `onEvent` block** from the code toolbox.\n* **Select \"home_search_btn\"** from the \"id\" dropdown.\n* **Drag out a `console.log` block** from the variables drawer.\n* **Run your app**.\n* **Click the Search button** and look for messages in the console.",
        "U4 Model Program 4_markdown_instruction": "# Changing Screens On Click\n\nThe `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.\n\n# Do This\n\nUsing the `onEvent` block that you've created, make your program change to the \"search\" screen when the \"home_search_btn\" is clicked.\n\n* **Drag out a `setScreen` block** an put it inside the `onEvent` block.\n* **Select \"search\"** from the `setScreen` dropdown.\n* **Run your app** and test the \"home_search_btn\" button.",
        "U4 Model Program 4_2018_markdown_instruction": "# Changing Screens On Click\n\nThe `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.\n\n# Do This\n\nUsing the `onEvent` block that you've created, make your program change to the \"search\" screen when the \"home_search_btn\" is clicked.\n\n* **Drag out a `setScreen` block** an put it inside the `onEvent` block.\n* **Select \"search\"** from the `setScreen` dropdown.\n* **Run your app** and test the \"home_search_btn\" button.",
        "U4-AP-Practice-Choose-The-Data-Concern_markdown_instruction": "# AP Practice - Identify the Data Concern\n\nOne component of the **AP Explore Performance Task** is describing a data concern related to a computing innovation.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>Computing Innovation</b>\n<br>\n<br>\n2d.  Using specific details, describe\n<br>\n<br>\n\n<li>at least one data storage concern, data privacy concern, or data security concern directly related to the computing innovation.</li>\n\n</div>\n<br>\n\n## Sample Responses\n\nTwo of the responses below qualify as a data storage, privacy or security concern and two do not.  Can you identify the two that do?\n\n---\n\n**Response A:** *Facial recognition technology stores data mapping a user's face, for example to unlock a phone. A privacy concern for this technology is that governments could force technology companies to turn over this data allowing them to passively and continuously monitor the movements of its citizens without their knowledge or consent.*\n\n**Response B:** *Software that tracks soccer player movements on the field can be used to generate new statistics that help value contributions of individual players. A data concern is that this information may be used to justify getting rid of less productive players.*\n\n**Response C:** *Social networks allow users to share vast amounts of private information about their lives. A security concern of this technology is that this publicly available data may enable stalkers or other criminals to identify potential targets.*\n\n**Response D:** *Self-driving vehicles store vast amounts of information about their location and the world around them. A data concern for the trucking industry is that all of this information could be coordinated to make trucks more efficient causing many people who drive trucks for a living to lose their jobs.*\n\n---\n\nHere's the scoring guide for this part of the question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/6ff69107762c5afb27661625600d2bfb-image-1510609916491.51.42 PM.png\">\n</div>\n\n<br>\n\n\n## Choose the two (2) responses that are data concerns\n\n**Choose the two responses (A, B, C, or D) that would earn the point as data storage, security or privacy concern. Then justify why you chose them.**",
        "U4-AP-Practice-Choose-The-Data-Concern_2018_markdown_instruction": "# AP Practice - Identify the Data Concern\n\nOne component of the **AP Explore Performance Task** is describing a data concern related to a computing innovation.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>Computing Innovation</b>\n<br>\n<br>\n2d.  Using specific details, describe\n<br>\n<br>\n\n<li>at least one data storage concern, data privacy concern, or data security concern directly related to the computing innovation.</li>\n\n</div>\n<br>\n\n## Sample Responses\n\nTwo of the responses below qualify as a data storage, privacy or security concern and two do not.  Can you identify the two that do?\n\n---\n\n**Response A:** *Facial recognition technology stores data mapping a user's face, for example to unlock a phone. A privacy concern for this technology is that governments could force technology companies to turn over this data allowing them to passively and continuously monitor the movements of its citizens without their knowledge or consent.*\n\n**Response B:** *Software that tracks soccer player movements on the field can be used to generate new statistics that help value contributions of individual players. A data concern is that this information may be used to justify getting rid of less productive players.*\n\n**Response C:** *Social networks allow users to share vast amounts of private information about their lives. A security concern of this technology is that this publicly available data may enable stalkers or other criminals to identify potential targets.*\n\n**Response D:** *Self-driving vehicles store vast amounts of information about their location and the world around them. A data concern for the trucking industry is that all of this information could be coordinated to make trucks more efficient causing many people who drive trucks for a living to lose their jobs.*\n\n---\n\nHere's the scoring guide for this part of the question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/6ff69107762c5afb27661625600d2bfb-image-1510609916491.51.42 PM.png\">\n</div>\n\n<br>\n\n\n## Choose the two (2) responses that are data concerns\n\n**Choose the two responses (A, B, C, or D) that would earn the point as data storage, security or privacy concern. Then justify why you chose them.**",
        "U4-AP-Practice-Choose-The-Harmful-Effect_markdown_instruction": "# AP Practice - Justify the Score\n\nOne component of the **AP Explore Performance Task** is describing a data concern related to a computing innovation.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>Computing Innovation</b>\n<br>\n<br>\n2d.  Using specific details, describe\n<br>\n<br>\n<ul>\n<li>at least one data storage concern, data privacy concern, or data security concern directly related to the computing innovation.</li>\n</ul>\n</div>\n<br>\n\n**Sample Student Response:** A student submitted the following response as part of this question.\n\n*\"FaceApp has permission to use many devices on your smartphone, including the camera. A data concern that arises from this is that the company could use this permission to see what you're doing.\"*\n\n\n**Scoring Guide:** Here's the scoring guide for this part of the question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08 AM.png\">\n</div>\n\n<br>\n\n# Justify the Score\n\nBased on the scoring guidelines listed above, the student would NOT get Row 6 of the response and would likely not be awarded Row 7.\n\n**Explain why the student would not be awarded either row. Make a suggestion(s) for ways this response could be improved**\n\n\n",
        "U4-AP-Practice-Device-or-Data?_markdown_instruction": "# AP Practice - Justify the Score\n\n**Written Prompt** -- Here is a portion of the AP Explore Performance Task written response prompt 2d:\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>Computing Innovation</b>\n<br>\n<br>\n2d.  Using specific details, describe\n<br><br>\n<li>at least one data storage concern, data privacy concern, or data security concern directly related to the computing innovation.</li>\n</div>\n<br>\n\n**Sample Student Response** -- here is a snippet of a sample student response addressing a data concern:\n\n<div style=\"width: 80%; margin: auto; background-color: #d9f3f5; padding: 10px; font-family: serif; font-size: 12pt; line-height: 17pt\">\n\n<em> The FaceSnap app has permission to use many devices on your smartphone, including the camera. A data privacy concern that arises from this is that the company could access the camera to see what you're doing without your knowledge.</em>\n\n</div>\n\n<br>\n\n**Zero points!!!** -- based on the scoring guidelines listed below the student would **NOT** get a point for Row 6 and would likely **NOT** be awarded a point for Row 7 either.\n\n**Why?** Here are the scoring guidelines for rows 6 and 7.\n\n![](https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08 AM.png)\n\n## Justify the score\n\nIn the space provided below explain:\n\n1. Why the student would not be awarded either row based on the scoring guidelines. \n2. Make a suggestion(s) for how to modify the response so the student would get the point.",
        "U4-AP-Practice-Justify-the-Score_markdown_instruction": "# AP Practice - Justify the Score\n\n**Written Prompt** -- Here is a portion of the AP Explore Performance Task written response prompt 2d:\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>Computing Innovation</b>\n<br>\n<br>\n2d.  Using specific details, describe\n<br><br>\n<li>at least one data storage concern, data privacy concern, or data security concern directly related to the computing innovation.</li>\n</div>\n<br>\n\n**Sample Student Response** -- here is a snippet of a sample student response addressing a data concern:\n\n<div style=\"width: 80%; margin: auto; background-color: #d9f3f5; padding: 10px; font-family: serif; font-size: 12pt; line-height: 17pt\">\n\n<em> The FaceSnap app has permission to use many devices on your smartphone, including the camera. A data privacy concern that arises from this is that the company could access the camera to see what you're doing without your knowledge.</em>\n\n</div>\n\n<br>\n\n**Zero points!!!** -- based on the scoring guidelines listed below the student would **NOT** get a point for Row 6 and would likely **NOT** be awarded a point for Row 7 either.\n\n**Why?** Here are the scoring guidelines for rows 6 and 7.\n\n![](https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08 AM.png)\n\n## Justify the score\n\nIn the space provided below explain:\n\n1. Why the student would not be awarded either row based on the scoring guidelines. \n2. Make a suggestion(s) for how to modify the response so the student would get the point.",
        "U4-AP-Practice-Justify-the-Score_2018_markdown_instruction": "# AP Practice - Justify the Score\n\n**Written Prompt** -- Here is a portion of the AP Explore Performance Task written response prompt 2d:\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>Computing Innovation</b>\n<br>\n<br>\n2d.  Using specific details, describe\n<br><br>\n<li>at least one data storage concern, data privacy concern, or data security concern directly related to the computing innovation.</li>\n</div>\n<br>\n\n**Sample Student Response** -- here is a snippet of a sample student response addressing a data concern:\n\n<div style=\"width: 80%; margin: auto; background-color: #d9f3f5; padding: 10px; font-family: serif; font-size: 12pt; line-height: 17pt\">\n\n<em> The FaceSnap app has permission to use many devices on your smartphone, including the camera. A data privacy concern that arises from this is that the company could access the camera to see what you're doing without your knowledge.</em>\n\n</div>\n\n<br>\n\n**Zero points!!!** -- based on the scoring guidelines listed below the student would **NOT** get a point for Row 6 and would likely **NOT** be awarded a point for Row 7 either.\n\n**Why?** Here are the scoring guidelines for rows 6 and 7.\n\n![](https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08 AM.png)\n\n## Justify the score\n\nIn the space provided below explain:\n\n1. Why the student would not be awarded either row based on the scoring guidelines. \n2. Make a suggestion(s) for how to modify the response so the student would get the point.",
        "U4L02 - Objects - eventParameter_markdown_instruction": "# We've Seen Objects Before\n\nWe're going to see how we can use objects to organize data in our own apps, but this actually isn't the first time we've used objects in our programs. **The object that we've used most frequently is the event parameter of our event handlers**. This single object contains many pieces of information about the event which can be accessed to determine how to respond to the event. For example `event.key` contains the key that was pressed for key events, and `event.offsetX` and `event.offsetY` contain the location of the mouse for mouse events.\n\nBefore we move on to creating objects of our own, let's take another look at this event parameter (or as we'll call it now event object) and recall how they were used.\n\n# Do This\n\n**Starter code** is provided which creates event handlers for both a \"click\" and \"keydown\" event and displays the contents of the event object they create.\n\n* **Run the program** and trigger both a keyboard event and a mouse event.\n* **Examine the objects displayed in the Debug Console** to recall the different pieces of information they contain.\n* **Reflect: ** Why wouldn't we want this information stored in many variables? Why wouldn't we want this information stored in an array?",
        "U4L06 Data Storage 2_markdown_instruction": "## User Input Data\n\nThe app is a continuation of the previous one we started. Add a text label to collect the users name and use that as the data input for the record. Instead of creating the JSON object and updating the values when the button is click try updating the JSON object whenever the value in the textbox is changed. \n\n**Run the app and click the button multiple times and see what happens. Is there a problem you notice? **",
        "U4L06 Data Storage 4_markdown_instruction": "## Data From Dropdowns\n\nYour app may need other types of user data to be saved other than just text boxes. \n\n** Add a label and drop down box to your app and save the data to your JSON object and add it to your table. **\n\nDon't forget about the user experience! How can you reset the dropdown after the user information has been stored?",
        "U4L15 Read Data 3_markdown_instruction": "Print the sentence using the first JSON object in the array.\n\n** Hint: ** Delete the for loop - dont forget the closing brace! See what happens.",
        "U5 AP Create Practice onEvent Doesnt Count_markdown_instruction": "# AP Practice - Create PT - Choosing an Abstraction\n\nOne component of the **AP Create Performance Task** is creating and describing an abstraction in your program. Here's the actual prompt.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2. Written Responses</b>\n<ul>\n2d. Capture and paste a program code segment that contains an abstraction you developed individually on your own (marked with a <b>rectangle</b> in <b>section 3</b> below). This abstraction must integrate mathematical and logical concepts.\nExplain how your abstraction helped manage the complexity of your program.\n<i>(Must not exceed 200 words)</i>\n</ul>\n</div>\n<br>\n\nHere's one row of the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/7d5773ed70d947bf75e0c1b3f7e60911-image-1515454332418.32.05 PM.png\">\n</div>\n\n<br>\n\n# Grade the Response\n\nBelow is a segment of code from a \"clicker\" program with a rectangle drawn around a portion of the code identifying an abstraction.\n\n![](https://images.code.org/7ceaa61af4feb06707f593e4b4ec1947-image-1515454046037.26.18 PM.png)\n\nEach row is worth one point that either can or cannot be awarded. **Explain why you would or would NOT award the point for Row 7 based on the criteria given above.**",
        "U5 AP Create Practice onEvent Doesnt Count_2018_markdown_instruction": "# AP Practice - Create PT - Choosing an Abstraction\n\nOne component of the **AP Create Performance Task** is creating and describing an abstraction in your program. Here's the actual prompt.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2. Written Responses</b>\n<ul>\n2d. Capture and paste a program code segment that contains an abstraction you developed individually on your own (marked with a <b>rectangle</b> in <b>section 3</b> below). This abstraction must integrate mathematical and logical concepts.\nExplain how your abstraction helped manage the complexity of your program.\n<i>(Must not exceed 200 words)</i>\n</ul>\n</div>\n<br>\n\nHere's one row of the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/7d5773ed70d947bf75e0c1b3f7e60911-image-1515454332418.32.05 PM.png\">\n</div>\n\n<br>\n\n# Grade the Response\n\nBelow is a segment of code from a \"clicker\" program with a rectangle drawn around a portion of the code identifying an abstraction.\n\n![](https://images.code.org/7ceaa61af4feb06707f593e4b4ec1947-image-1515454046037.26.18 PM.png)\n\nEach row is worth one point that either can or cannot be awarded. **Explain why you would or would NOT award the point for Row 7 based on the criteria given above.**",
        "U5 AP Practice Create Abstraction Color Sleuth_markdown_instruction": "# AP Practice - Create PT - Abstraction\n\nOne component of the **AP Create Performance Task** is describing an abstraction within your program.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2. Written Responses</b>\n<ul>\n2d. Capture and paste a program code segment that contains an abstraction you developed individually on your own (marked with a <b>rectangle</b> in <b>section 3</b> below). This abstraction must integrate mathematical and logical concepts. Explain how your abstraction helped manage the complexity of your program.\n<i>(Must not exceed 200 words)</i></ul>\n</div>\n<br>\n\nHere's one row of the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/d994f69c99550a352de5565ee4d74f54-image-1516226857132.04.40 PM.png\">\n</div>\n\n# Write the Response\n\n![](https://images.code.org/33f44fc55155b5e75afd37475640bc16-image-1515653209087.46.40 PM.png)\n\n<div style=\"clear:both\"></div>\n\n<br>\n\nThe code selection above is taken from the Color Sleuth activity you just completed. This selection **would count as an abstraction** on the Create PT, but to earn Row 8 **you will need to describe how this abstraction manages complexity**. \n\n**Write response 2d describing the abstraction above. Use the writing prompt and scoring guidelines as a guide.**",
        "U5 AP Practice Create Abstraction Color Sleuth_2018_markdown_instruction": "# AP Practice - Create PT - Abstraction\n\nOne component of the **AP Create Performance Task** is describing an abstraction within your program.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2. Written Responses</b>\n<ul>\n2d. Capture and paste a program code segment that contains an abstraction you developed individually on your own (marked with a <b>rectangle</b> in <b>section 3</b> below). This abstraction must integrate mathematical and logical concepts. Explain how your abstraction helped manage the complexity of your program.\n<i>(Must not exceed 200 words)</i></ul>\n</div>\n<br>\n\nHere's one row of the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/d994f69c99550a352de5565ee4d74f54-image-1516226857132.04.40 PM.png\">\n</div>\n\n# Write the Response\n\n![](https://images.code.org/33f44fc55155b5e75afd37475640bc16-image-1515653209087.46.40 PM.png)\n\n<div style=\"clear:both\"></div>\n\n<br>\n\nThe code selection above is taken from the Color Sleuth activity you just completed. This selection **would count as an abstraction** on the Create PT, but to earn Row 8 **you will need to describe how this abstraction manages complexity**. \n\n**Write response 2d describing the abstraction above. Use the writing prompt and scoring guidelines as a guide.**",
        "U5 AP Practice Create Algorithm Color Sleuth_markdown_instruction": "# AP Practice - Create PT - Algorithm\n\nOne component of the **AP Create Performance Task** is describing an algorithm within your program.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2. Written Responses</b>\n<ul>\n2c. Capture and paste a program code segment that implements an algorithm (marked with an <b>oval</b> in <b>section 3</b> below) and that is fundamental for your program to achieve its intended purpose. This code segment must be an algorithm you developed individually on your own, must include two or more algorithms, and must integrate mathematical and/or logical concepts. Describe how each algorithm within your selected algorithm functions independently, as well as in combination with others, to form a new algorithm that helps to achieve the intended purpose of the program. <i>(Must not exceed 200 words)</i>\n</ul>\n</div>\n<br>\n\nHere's two rows of the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/febdb2c140b9a4f34f2d4a93370c8b53-image-1515518259767.17.31 AM.png\">\n</div>\n\n# Write the Response\n\n<img src=\"https://images.code.org/e841e427e8020f075c8718631bf0cfb3-image-1516228295228.31.22 PM.png\" style=\"float:right\">\n\nThis code selection is taken from the Color Sleuth activity you just completed and **would count as an algorithm** on the Create PT.\n\n**Write response 2c describing the algorithm above. Use the writing prompt and scoring guidelines as a guide.** Here are the main points to make sure you include.\n\n* Name your main algorithm and each of the two sub-algorithms\n* Explain *what* each sub-algorithm does and *how* the code of each actually works\n* Explain how the main algorithm works and how it helps achieve the purpose of the program",
        "U5 AP Practice Create Algorithm Color Sleuth_2018_markdown_instruction": "# AP Practice - Create PT - Algorithm\n\nOne component of the **AP Create Performance Task** is describing an algorithm within your program.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2. Written Responses</b>\n<ul>\n2c. Capture and paste a program code segment that implements an algorithm (marked with an <b>oval</b> in <b>section 3</b> below) and that is fundamental for your program to achieve its intended purpose. This code segment must be an algorithm you developed individually on your own, must include two or more algorithms, and must integrate mathematical and/or logical concepts. Describe how each algorithm within your selected algorithm functions independently, as well as in combination with others, to form a new algorithm that helps to achieve the intended purpose of the program. <i>(Must not exceed 200 words)</i>\n</ul>\n</div>\n<br>\n\nHere's two rows of the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/febdb2c140b9a4f34f2d4a93370c8b53-image-1515518259767.17.31 AM.png\">\n</div>\n\n# Write the Response\n\n<img src=\"https://images.code.org/e841e427e8020f075c8718631bf0cfb3-image-1516228295228.31.22 PM.png\" style=\"float:right\">\n\nThis code selection is taken from the Color Sleuth activity you just completed and **would count as an algorithm** on the Create PT.\n\n**Write response 2c describing the algorithm above. Use the writing prompt and scoring guidelines as a guide.** Here are the main points to make sure you include.\n\n* Name your main algorithm and each of the two sub-algorithms\n* Explain *what* each sub-algorithm does and *how* the code of each actually works\n* Explain how the main algorithm works and how it helps achieve the purpose of the program",
        "U5 AP Practice Create Algorithm How vs What_markdown_instruction": "# AP Practice - Create PT - Process\n\nOne component of the **AP Create Performance Task** is describing the development process used for your program.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2. Written Responses</b>\n<ul>\n2b. Describe the incremental and iterative development process of your program, focusing on two distinct points in that process. Describe the difficulties and/or opportunities you encountered and how they were resolved or incorporated. In your description clearly indicate whether the development described was collaborative or independent. At least one of these points must refer to independent program development. <i>(Must not exceed 200 words)</i>\n</ul>\n</div>\n<br>\n\nHere's two rows of the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/18480a117da79e3c5599edfe0b98836a-image-1515438403469.06.32 AM.png\">\n</div>\n\n# Grade the Response\n\nA student wrote the following response.\n\n*\"In developing my program I encountered two major problems. The first one was early in programming when sometimes the apple would disappear from the screen. By debugging my program I was able to recognize that the ranges of my random X values went from 0-3200, not 0-320. I was easily able to correct this issue in my code. A second issue occurred when I realized that classmates using the game often didn't know how to start it. In order to fix this problem I made the button significantly larger and a different color than the background. Afterwards I no longer saw this problem.\"*\n\n\nEach row is worth one point that either can or cannot be awarded. **Explain why you would or would not award the points for Row 2 and Row 3 based on the criteria given above**",
        "U5 AP Practice Create Process_markdown_instruction": "# AP Practice - Create PT - Process\n\nOne component of the **AP Create Performance Task** is describing the development process used for your program.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2. Written Responses</b>\n<ul>\n2b. Describe the incremental and iterative development process of your program, focusing on two distinct points in that process. Describe the difficulties and/or opportunities you encountered and how they were resolved or incorporated. In your description clearly indicate whether the development described was collaborative or independent. At least one of these points must refer to independent program development. <i>(Must not exceed 200 words)</i>\n</ul>\n</div>\n<br>\n\nHere's two rows of the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/18480a117da79e3c5599edfe0b98836a-image-1515438403469.06.32 AM.png\">\n</div>\n\n# Grade the Response\n\nA student wrote the following response.\n\n*\"In developing my program I encountered two major problems. The first one was early in programming when sometimes the apple would disappear from the screen. By debugging my program I was able to recognize that the ranges of my random X values went from 0-3200, not 0-320. I was easily able to correct this issue in my code. A second issue occurred when I realized that classmates using the game often didn't know how to start it. In order to fix this problem I made the button significantly larger and a different color than the background. Afterwards I no longer saw this problem.\"*\n\n\nEach row is worth one point that either can or cannot be awarded. **Explain why you would or would not award the points for Row 2 and Row 3**.\n\nHint: Pay particular attention to the last column of the scoring guidelines and the checklists entitled \"Do NOT award a point if...\"",
        "U5 AP Practice Create Process_2018_markdown_instruction": "# AP Practice - Create PT - Process\n\nOne component of the **AP Create Performance Task** is describing the development process used for your program.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2. Written Responses</b>\n<ul>\n2b. Describe the incremental and iterative development process of your program, focusing on two distinct points in that process. Describe the difficulties and/or opportunities you encountered and how they were resolved or incorporated. In your description clearly indicate whether the development described was collaborative or independent. At least one of these points must refer to independent program development. <i>(Must not exceed 200 words)</i>\n</ul>\n</div>\n<br>\n\nHere's two rows of the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/18480a117da79e3c5599edfe0b98836a-image-1515438403469.06.32 AM.png\">\n</div>\n\n# Grade the Response\n\nA student wrote the following response.\n\n*\"In developing my program I encountered two major problems. The first one was early in programming when sometimes the apple would disappear from the screen. By debugging my program I was able to recognize that the ranges of my random X values went from 0-3200, not 0-320. I was easily able to correct this issue in my code. A second issue occurred when I realized that classmates using the game often didn't know how to start it. In order to fix this problem I made the button significantly larger and a different color than the background. Afterwards I no longer saw this problem.\"*\n\n\nEach row is worth one point that either can or cannot be awarded. **Explain why you would or would not award the points for Row 2 and Row 3**.\n\nHint: Pay particular attention to the last column of the scoring guidelines and the checklists entitled \"Do NOT award a point if...\"",
        "U5 Check Password if statement lock image_markdown_instruction": "<img src=\"https://images.code.org/117a2a8e098760173f16048fde721295-image-1479829058899.gif\" style=\"float: right; width: 150px\">\n## You try it -- Text Password Checker\n\n**Key idea**: You can use `==` to compare strings as well as numbers.  \n\n* Let's use an if-statement in an event handler to compare text that a user inputs in a UI element.\n\n**The setup:**\n* Note the setup in Design Mode\n* There are two images: a red lock, and a green \"unlock\".\n* The green \"unlock\" is *hidden* at the start.\n\n## Do this:\n\n**Add an if-statement to the event handler to check the password and display the \"unlock\" only if the password is correct** \n\n* You can use `==` to compare the text you get from the *password_input* text box and a string you want to use as the password. The boolean expression you should use should look like this:\n\n![](https://images.code.org/9124274f38ed19bdae6cfc4b492162b6-image-1479828796051.png)\n\n* If the user entered the correct password then **show** the green \"unlock\" and **hide** the red lock.\n\t* We've provide the code to hide and show the images. You just need to add the if-statement.\n* Otherwise do nothing.  They can try again.\n\n",
        "U5 Check Password if statement lock image_2018_markdown_instruction": "<img src=\"https://images.code.org/117a2a8e098760173f16048fde721295-image-1479829058899.gif\" style=\"float: right; width: 150px\">\n## You try it -- Text Password Checker\n\n**Key idea**: You can use `==` to compare strings as well as numbers.  \n\n* Let's use an if-statement in an event handler to compare text that a user inputs in a UI element.\n\n**The setup:**\n* Note the setup in Design Mode\n* There are two images: a red lock, and a green \"unlock\".\n* The green \"unlock\" is *hidden* at the start.\n\n## Do this:\n\n**Add an if-statement to the event handler to check the password and display the \"unlock\" only if the password is correct** \n\n* You can use `==` to compare the text you get from the *password_input* text box and a string you want to use as the password. The boolean expression you should use should look like this:\n\n![](https://images.code.org/9124274f38ed19bdae6cfc4b492162b6-image-1479828796051.png)\n\n* If the user entered the correct password then **show** the green \"unlock\" and **hide** the red lock.\n\t* We've provide the code to hide and show the images. You just need to add the if-statement.\n* Otherwise do nothing.  They can try again.\n\n",
        "U5 ColorSleuth add global var correct plus console.log_markdown_instruction": "## Next: display which button was chosen in the console\n\nIn the game the \"correct\" button is the one we randomly chose to make a different color.  Let's add a console.log message to display its ID - it will make future work easier.\n\n* add a console.log message like `console.log(\"correct one is: \" + randButtonId)` at the end of the `setBoard` function.\n* overall the setBoard function will look like this:\n\n\t\tfunction setBoard(){\n        \t\n            // generate random color\n            // make all 4 buttons have same color\n            // pick a random Button Id\n            // set its color to something different\n            \n            console.log(\"correct one is: \" + randButtonId);  <-- Add this line\n\t\t}",
        "U5 ColorSleuth add global var correct plus console.log_2018_markdown_instruction": "## Next: display which button was chosen in the console\n\nIn the game the \"correct\" button is the one we randomly chose to make a different color.  Let's add a console.log message to display its ID - it will make future work easier.\n\n* add a console.log message like `console.log(\"correct one is: \" + randButtonId)` at the end of the `setBoard` function.\n* overall the setBoard function will look like this:\n\n\t\tfunction setBoard(){\n        \t\n            // generate random color\n            // make all 4 buttons have same color\n            // pick a random Button Id\n            // set its color to something different\n            \n            console.log(\"correct one is: \" + randButtonId);  <-- Add this line\n\t\t}",
        "U5 ColorSleuth checkCorrect part1 link to event handlers_markdown_instruction": "## Steps 2 and 3 - Add checkCorrect(buttonId) and Event Handlers\n\nThis feels like a big step, but it's actually just a few small ones.  We'll see some new functionality at the end.\n\n1. **Add a function definition for `checkCorrect(buttonId)` that:**\n\t* Contains a console.log message to display the parameter\n    * Calls setBoard()\n\n            function checkCorrect(buttonId){\n                console.log(\"Checking: \"+buttonId);\n                setBoard();\n            }\n\n2. **Add 4 \"click\" event handlers - one for each button - that call checkCorrect**\n\t* The event handling functions should call `checkCorrect(...)` with its button id.\n\t* So for *button1* it should look something like:\n\n\t\t\tonEvent(\"button1\", \"click\", function(){\n        \t\tcheckCorrect(\"button1\");\n        \t});\n        \n\n**TESTING**\n\nOnce you've added this code you should really see some changes.  When you click on buttons you should see:\n1. Console messages showing what was clicked\n2. The board should change each time you click a button\n3. Console messages showing the correct answer for each new board.\n\n![](https://images.code.org/2941465a60c0f61c83979192c1de29ce-image-1481146240419.gif)",
        "U5 ColorSleuth checkCorrect part1 link to event handlers_2018_markdown_instruction": "## Steps 2 and 3 - Add checkCorrect(buttonId) and Event Handlers\n\nThis feels like a big step, but it's actually just a few small ones.  We'll see some new functionality at the end.\n\n1. **Add a function definition for `checkCorrect(buttonId)` that:**\n\t* Contains a console.log message to display the parameter\n    * Calls setBoard()\n\n            function checkCorrect(buttonId){\n                console.log(\"Checking: \"+buttonId);\n                setBoard();\n            }\n\n2. **Add 4 \"click\" event handlers - one for each button - that call checkCorrect**\n\t* The event handling functions should call `checkCorrect(...)` with its button id.\n\t* So for *button1* it should look something like:\n\n\t\t\tonEvent(\"button1\", \"click\", function(){\n        \t\tcheckCorrect(\"button1\");\n        \t});\n        \n\n**TESTING**\n\nOnce you've added this code you should really see some changes.  When you click on buttons you should see:\n1. Console messages showing what was clicked\n2. The board should change each time you click a button\n3. Console messages showing the correct answer for each new board.\n\n![](https://images.code.org/2941465a60c0f61c83979192c1de29ce-image-1481146240419.gif)",
        "U5 ColorSleuth nextTurn pt1 add var and function and console.log_markdown_instruction": "# Next Step - Alternating Turns\n\nThis is another step that requires 3 parts.  But **notice there is a pattern** to what we're starting to do, and it is a common one:\n\n1. Add a global variable\n2. Add a new function definition (that updates that variable in some way)\n3. Add a call to the new function you just made.\n\nAnd that's exactly what you're going to do right now.\n\n1. Add global `var currentPlayer = 1` to the top of the program.\n2. Add a new function definition in your code for `switchPlayer()` with an if-statement and console.log message.  It should look something like this:\n\n\t\tfunction switchPlayer(){\n        \tif(currentPlayer==1){\n            \tcurrentPlayer=2;\n            } else {\n            \tcurrentPlayer=1;\n            }\n            console.log(\"current player is: \"+currentPlayer);\n        }\n\n3. Add a call `switchPlayer()` as the last line inside the `checkCorrect` function\n\n**TEST IT OUT**\n<img src=\"https://images.code.org/e0cbd1d16fa43842d2352df55caa2959-image-1481210618149.png\" style=\"float: right\">\n\n* After you add this code, you should see a new message in the console amongst the others indicating whose turn it is.  The output might look something like the output shown at right (look for lines that say **current player is: 2**)\n* Note: right now most of our output is in the console because it's easy and fast to verify that things are working.  We'll start updating the UI next!\n",
        "U5 ColorSleuth nextTurn pt1 add var and function and console.log_2018_markdown_instruction": "# Next Step - Alternating Turns\n\nThis is another step that requires 3 parts.  But **notice there is a pattern** to what we're starting to do, and it is a common one:\n\n1. Add a global variable\n2. Add a new function definition (that updates that variable in some way)\n3. Add a call to the new function you just made.\n\nAnd that's exactly what you're going to do right now.\n\n1. Add global `var currentPlayer = 1` to the top of the program.\n2. Add a new function definition in your code for `switchPlayer()` with an if-statement and console.log message.  It should look something like this:\n\n\t\tfunction switchPlayer(){\n        \tif(currentPlayer==1){\n            \tcurrentPlayer=2;\n            } else {\n            \tcurrentPlayer=1;\n            }\n            console.log(\"current player is: \"+currentPlayer);\n        }\n\n3. Add a call `switchPlayer()` as the last line inside the `checkCorrect` function\n\n**TEST IT OUT**\n<img src=\"https://images.code.org/e0cbd1d16fa43842d2352df55caa2959-image-1481210618149.png\" style=\"float: right\">\n\n* After you add this code, you should see a new message in the console amongst the others indicating whose turn it is.  The output might look something like the output shown at right (look for lines that say **current player is: 2**)\n* Note: right now most of our output is in the console because it's easy and fast to verify that things are working.  We'll start updating the UI next!\n",
        "U5 ColorSleuth part 4 make random RGB string_markdown_instruction": "## You try it - make a random color\n<img src=\"https://images.code.org/b4910df16847c1b74034f884dc21a528-image-1481043331643.gif\" style=\"float: right\">\n**First:** Make the base `color` be a string with random values in it rather than hard-coded.\n\n**Second:** Add 20 to each of the R, G, B values to make `diffColor`\n\n**This means** you will have to insert several lines of code in two different places in your program: just before you create `var color` and just before `var diffColor`.\n\n**Run multiple times to test!** - Each time you run the program you should see randomly chosen colors with a randomly chosen button that's slightly different.\n\n<details><summary>Code Reference from Alexis and Michael's discussion [click to expand] </summary>\n\n<p>\nHere is the code they discussed for creating an RGB string with random values: \n</p>\n\n\n<pre style=\"width: 400px\"><code>var R = randomNumber(0,235);\nvar G = randomNumber(0,235);\nvar B = randomNumber(0,235);\n\nvar color = rgb(R, G, B);\n</code></pre>\n\n<br>\n<p>\nAnd here is the code they discussed to make <code>diffColor</code>:\n</p>\n<pre style=\"width: 400px\"><code>R = R+20;  //add 20 to current value of R\nG = G+20;\nB = B+20;\n\nvar diffColor = rgb(R, G, B);\n</code></pre>\n\n</details>\n\n",
        "U5 ColorSleuth part 4 make random RGB string_2018_markdown_instruction": "## You try it - make a random color\n<img src=\"https://images.code.org/b4910df16847c1b74034f884dc21a528-image-1481043331643.gif\" style=\"float: right\">\n**First:** Make the base `color` be a string with random values in it rather than hard-coded.\n\n**Second:** Add 20 to each of the R, G, B values to make `diffColor`\n\n**This means** you will have to insert several lines of code in two different places in your program: just before you create `var color` and just before `var diffColor`.\n\n**Run multiple times to test!** - Each time you run the program you should see randomly chosen colors with a randomly chosen button that's slightly different.\n\n<details><summary>Code Reference from Alexis and Michael's discussion [click to expand] </summary>\n\n<p>\nHere is the code they discussed for creating an RGB string with random values: \n</p>\n\n\n<pre style=\"width: 400px\"><code>var R = randomNumber(0,235);\nvar G = randomNumber(0,235);\nvar B = randomNumber(0,235);\n\nvar color = rgb(R, G, B);\n</code></pre>\n\n<br>\n<p>\nAnd here is the code they discussed to make <code>diffColor</code>:\n</p>\n<pre style=\"width: 400px\"><code>R = R+20;  //add 20 to current value of R\nG = G+20;\nB = B+20;\n\nvar diffColor = rgb(R, G, B);\n</code></pre>\n\n</details>\n\n",
        "U5 ColorSleuth part 5 make setBoard function_markdown_instruction": "## Next Step - encapsulate \"game board\" creation in a function\n\nLet's call the 4 buttons with random colors the **\"Game Board.\"** Assuming that your program now creates a new randomly generated game board each time you run, let's take the next step.\n\nWhen playing the game we need to create a new game board repeatedly, not just when the program starts.  Since we have a chunk of code that we want to use repeatedly, **that's a clue we should take that code and put it in a function**.\n\n## DO THIS:\n\n* Define a new function called `setBoard`.\n* Move all of the code that sets the colors of the buttons inside the function - this is actually **all** the code you have so far.\n* Add a call to `setBoard()` as the first line of code in the program to verify that it works\n* When you're done the code should look like this:\n\n    \tsetBoard();  \t\t\t\n    \tfunction setBoard(){\n\n\t\t\t< all the button color setting code \n            you wrote from previous exercises >\n            \n\t\t}\n    \n    \n<details><summary><strong>TIP:</strong> This is easy in text-mode [click to expand]</summary>\n\n<p>\nBecause this is a relatively large chunk of code to move inside a function, it might be easier to do in text mode.\n</p>\n<li>Add the function definition at the top including the opening curly-brace</li>\n<li>Type a closing curly-brace at the bottom</li>\n<li>Optional: indent all the code inside the function so it looks cleaner - select all and hit TAB</li>\n\n<img src=\"https://images.code.org/ba0de530ca89174bae5fa1be455eb048-image-1481047960566.gif\">\n\n</details>\n<br>\n**NOTE:** The program should not behave any differently after this step - we're just organizing the code to make it more useful. In the next step will make more use of `setBoard()`.  For now, just make the function and call it once.\n\n",
        "U5 ColorSleuth part 5 make setBoard function_2018_markdown_instruction": "## Next Step - encapsulate \"game board\" creation in a function\n\nLet's call the 4 buttons with random colors the **\"Game Board.\"** Assuming that your program now creates a new randomly generated game board each time you run, let's take the next step.\n\nWhen playing the game we need to create a new game board repeatedly, not just when the program starts.  Since we have a chunk of code that we want to use repeatedly, **that's a clue we should take that code and put it in a function**.\n\n## DO THIS:\n\n* Define a new function called `setBoard`.\n* Move all of the code that sets the colors of the buttons inside the function - this is actually **all** the code you have so far.\n* Add a call to `setBoard()` as the first line of code in the program to verify that it works\n* When you're done the code should look like this:\n\n    \tsetBoard();  \t\t\t\n    \tfunction setBoard(){\n\n\t\t\t< all the button color setting code \n            you wrote from previous exercises >\n            \n\t\t}\n    \n    \n<details><summary><strong>TIP:</strong> This is easy in text-mode [click to expand]</summary>\n\n<p>\nBecause this is a relatively large chunk of code to move inside a function, it might be easier to do in text mode.\n</p>\n<li>Add the function definition at the top including the opening curly-brace</li>\n<li>Type a closing curly-brace at the bottom</li>\n<li>Optional: indent all the code inside the function so it looks cleaner - select all and hit TAB</li>\n\n<img src=\"https://images.code.org/ba0de530ca89174bae5fa1be455eb048-image-1481047960566.gif\">\n\n</details>\n<br>\n**NOTE:** The program should not behave any differently after this step - we're just organizing the code to make it more useful. In the next step will make more use of `setBoard()`.  For now, just make the function and call it once.\n\n",
        "U5 ColorSleuth scoring pt1 vars function stub console_markdown_instruction": "## Next Step - add function updateScoreBy \n\nWe're going to follow the same pattern we used when adding switch player.  We'll add variables, a function, calls to the function, and for now just use `console.log` statements to verify we've got things working.\n\n1. Add global variables to the top of the code: `var p1Score=0;` and `var p2Score=0;`\n2. Add a new function definition `updateScoreBy` with an if-statement and console.log to verify.  Something like this:\n\n\t\tfunction updateScoreBy(amt){\n        \tif(currentPlayer == 1){\n            \tp1Score = p1Score + amt;\n            } else {\n            \tp2Score = p2Score + amt;\n            }\n            console.log(\"P1 score: \" + p1Score);\n            console.log(\"P2 score: \" + p2Score);\n        }\n\n3. Add calls to `updateScoreBy(1)` and `updateScoreBy(-3)` to the appropriate place inside the if statement in the `checkCorrect` function.\n\t* You can leave your console.log statements in there for now as well.  Just add calls to `updateScoreBy` along with them.\n\n**TEST IT OUT**\n\nWhen you run the program now you should be able to verify in the console that the player's scores are updating.  Study the console output to make sure and verify that:\n\n* updateScoreBy is being called from checkCorrect with each click\n\t* if you have console.log statements in `updateScoreBy` then you should at least see that it's being called with each click\n* The correct player's score is being updated\n* The scores are being updated by the correct amount\n\nA sample of the output might look like this:\n\n![](https://images.code.org/eb33f7d6d634e4f98e613bc13b231601-image-1481219318239.png)",
        "U5 ColorSleuth scoring pt1 vars function stub console_2018_markdown_instruction": "## Next Step - add function updateScoreBy \n\nWe're going to follow the same pattern we used when adding switch player.  We'll add variables, a function, calls to the function, and for now just use `console.log` statements to verify we've got things working.\n\n1. Add global variables to the top of the code: `var p1Score=0;` and `var p2Score=0;`\n2. Add a new function definition `updateScoreBy` with an if-statement and console.log to verify.  Something like this:\n\n\t\tfunction updateScoreBy(amt){\n        \tif(currentPlayer == 1){\n            \tp1Score = p1Score + amt;\n            } else {\n            \tp2Score = p2Score + amt;\n            }\n            console.log(\"P1 score: \" + p1Score);\n            console.log(\"P2 score: \" + p2Score);\n        }\n\n3. Add calls to `updateScoreBy(1)` and `updateScoreBy(-3)` to the appropriate place inside the if statement in the `checkCorrect` function.\n\t* You can leave your console.log statements in there for now as well.  Just add calls to `updateScoreBy` along with them.\n\n**TEST IT OUT**\n\nWhen you run the program now you should be able to verify in the console that the player's scores are updating.  Study the console output to make sure and verify that:\n\n* updateScoreBy is being called from checkCorrect with each click\n\t* if you have console.log statements in `updateScoreBy` then you should at least see that it's being called with each click\n* The correct player's score is being updated\n* The scores are being updated by the correct amount\n\nA sample of the output might look like this:\n\n![](https://images.code.org/eb33f7d6d634e4f98e613bc13b231601-image-1481219318239.png)",
        "U5 ColorSleuth scoring pt2 add scoring if statement console_markdown_instruction": "\nDO THIS:\n\n* add an if statement to updateScore\n* if currentPlayer == player1\n      player1Score += amt\n* else\n       player2score += amt\n       \nNote: cleverness of `amt` var.  Means we don't need to decide whether to add or subtract.  \n\n",
        "U5 ColorSleuth scoring pt3 update UI for scoring_markdown_instruction": "## Next step - update the UI to show the score.\n<img src=\"https://images.code.org/2614d8d57f91d9a29d86a0223ec35d63-image-1481221332835.gif\" style=\"float: right\">\nThis is pretty easy at this point.\n\nThere are UI text labels for the player's scores called `score1_label` and `score2_label`.\n\nAdd `setText` statements at the end of the function (either replace the console.log statements, or just add after them).  The label for player 1 would look like this:\n\n\t\tsetText(\"score1_label\", p1Score);\n\n**TEST IT OUT**\n\n* After adding the `setText` statements you should see the score being updated with each click (see animation).\n* You can actually play the game a little bit now!\n\n<details><summary>Why set both text labels each time? [click to expand]</summary>\n\nYou might be wondering why we set <em>both</em> text labels each time <code>updateScoreBy</code> is called, rather than putting it inside the if-statement to set the text of the appropriate label.  After all, only one score is changing every time.<br>\n<li>The reason is basically: laziness.  Even though only one score will change with each click, it really doesn't hurt to set both text labels just to be safe.</li>\n<li>In the future, maybe you might change the app so that both player1 and player2's scores might change with a single click. Maybe, maybe not.</li>\n<li>But we can be lazy and just set both score text labels every time and not have to worry about it.</li>\n</details>\n\n",
        "U5 ColorSleuth scoring pt3 update UI for scoring_2018_markdown_instruction": "## Next step - update the UI to show the score.\n<img src=\"https://images.code.org/2614d8d57f91d9a29d86a0223ec35d63-image-1481221332835.gif\" style=\"float: right\">\nThis is pretty easy at this point.\n\nThere are UI text labels for the player's scores called `score1_label` and `score2_label`.\n\nAdd `setText` statements at the end of the function (either replace the console.log statements, or just add after them).  The label for player 1 would look like this:\n\n\t\tsetText(\"score1_label\", p1Score);\n\n**TEST IT OUT**\n\n* After adding the `setText` statements you should see the score being updated with each click (see animation).\n* You can actually play the game a little bit now!\n\n<details><summary>Why set both text labels each time? [click to expand]</summary>\n\nYou might be wondering why we set <em>both</em> text labels each time <code>updateScoreBy</code> is called, rather than putting it inside the if-statement to set the text of the appropriate label.  After all, only one score is changing every time.<br>\n<li>The reason is basically: laziness.  Even though only one score will change with each click, it really doesn't hurt to set both text labels just to be safe.</li>\n<li>In the future, maybe you might change the app so that both player1 and player2's scores might change with a single click. Maybe, maybe not.</li>\n<li>But we can be lazy and just set both score text labels every time and not have to worry about it.</li>\n</details>\n\n",
        "U5 Video if-else-if_markdown_instruction": "### Points to pay attention to:\n\n* **START at 2:20**  \n    This is the second half of the video you watched earlier. \n\n* An If-else-if statement let's you check more than one condition at a time.\n* The **order of conditions matters**. Since conditions are checked sequentially from top to bottom, the code that gets executed will be the *first* statement to evaluate to true.\n\n",
        "U5 if-else dropdown guess dice_markdown_instruction": "<img src=\"https://images.code.org/bd3094161d7d58800b1a6a981383fc6c-image-1479848098180.gif\" style=\"float: right\">\n\n## You try it \n\nThis is a slightly more involved example.  You'll need to study the starting design and code a little bit, but you only have to insert a single if-else statement and move some lines of code into the appropriate if or else clause to make it work.\n\n## Do this\n\n**Study the starting code first to see what it does**\n\n* You *can* run it to see what happens before doing anything - it just won't work right\n* **Notice** the function `reset()` - which hides the images.  \n\t* We made a function because we want to run this code from two different event handlers.\n\n**Add an if-else statement in the *roll_btn* event handler** to check if the random number that represents a dice roll matches the user's guess in the dropdown\n\nIf they guessed correctly\n* Show the trophy image\n* Add 6 to the score\n\nOtherwise:\n* Show the frowny face image\n* Subtract 1 from the score\n\n**Setup Notes:**\n* All UI elements are added for you (images are hidden) - flip to Design Mode to see.\n* All lines of code *except* for the if-else statement and condition are also provided - you'll need to move them around once you've added the if-else statement.\n* Notice the global `score` variable which will keep track of the score between clicks\n* We've added comments in the code to help you out - you can remove them if you like.\n\n<details><summary>Hint: [click to expand]</summary>\n<br>\nThe condition needs to us <code>==</code> compare <code>dieVal</code> with the value in the dropdown.  To get the value out of the dropdown you use <code>getNumber(\"guess_dropdown\")</code>.<br><br>(You could use <code>getText(\"guess_dropdown\")</code> and it would still work, because <code>==</code> tries to convert text to a number for comparison so <code>\"6\"==6</code> is true.  But since we're expecting a number in the dropdown we should use <code>getNumber</code> so it makes sense when reading the code.)\n</details>",
        "U5 if-else dropdown guess dice_2018_markdown_instruction": "<img src=\"https://images.code.org/bd3094161d7d58800b1a6a981383fc6c-image-1479848098180.gif\" style=\"float: right\">\n\n## You try it \n\nThis is a slightly more involved example.  You'll need to study the starting design and code a little bit, but you only have to insert a single if-else statement and move some lines of code into the appropriate if or else clause to make it work.\n\n## Do this\n\n**Study the starting code first to see what it does**\n\n* You *can* run it to see what happens before doing anything - it just won't work right\n* **Notice** the function `reset()` - which hides the images.  \n\t* We made a function because we want to run this code from two different event handlers.\n\n**Add an if-else statement in the *roll_btn* event handler** to check if the random number that represents a dice roll matches the user's guess in the dropdown\n\nIf they guessed correctly\n* Show the trophy image\n* Add 6 to the score\n\nOtherwise:\n* Show the frowny face image\n* Subtract 1 from the score\n\n**Setup Notes:**\n* All UI elements are added for you (images are hidden) - flip to Design Mode to see.\n* All lines of code *except* for the if-else statement and condition are also provided - you'll need to move them around once you've added the if-else statement.\n* Notice the global `score` variable which will keep track of the score between clicks\n* We've added comments in the code to help you out - you can remove them if you like.\n\n<details><summary>Hint: [click to expand]</summary>\n<br>\nThe condition needs to us <code>==</code> compare <code>dieVal</code> with the value in the dropdown.  To get the value out of the dropdown you use <code>getNumber(\"guess_dropdown\")</code>.<br><br>(You could use <code>getText(\"guess_dropdown\")</code> and it would still work, because <code>==</code> tries to convert text to a number for comparison so <code>\"6\"==6</code> is true.  But since we're expecting a number in the dropdown we should use <code>getNumber</code> so it makes sense when reading the code.)\n</details>",
        "U5 if-else dropdown movie checker_markdown_instruction": "<img src=\"https://images.code.org/38b037a468dd7a9df53ce29b5b720a03-image-1479852997408.gif\" style=\"float: right\">\n\n## You Try It\n\nThis example is very similar to the worked example on the previous page - it is a version of the movie age checker that uses a dropdown.\n\nWe've provided the starting UI elements, including the dropdown - but none of the code.\n\n**Do this:**\nUsing the examples on the previous page as a guide...\n\n* Add an event handler for the *dropdown menu that triggers on *\"change\"*.\n* Add an if statement to check if the age chosen in the dropdown is `>=` to 13 and set the text in the *result_label*\n\t* if the age is 13 or over set the text to \"You are old enough to see a PG-13 movie alone\"\n    * Otherwise, set the text to \"You are not old enough to see a PG-13 movie alone\"\n\n**Tip:** Use `getNumber(id)` instead of `getText(id)` to get the value out of the dropdown\n\n* One major difference from the example is that we want to compare the value of the dropdown to a number using `>=` rather than with `==`\n* You should to use `getNumber(\"age_dropdown\")` to extract the value *as a number rather than text*. \n* This is the same reason we use `promptNum` instead of `prompt` for simple console examples.\n* It will still work if you use `getText` but isn't good form.",
        "U5 if-else dropdown movie checker_2018_markdown_instruction": "<img src=\"https://images.code.org/38b037a468dd7a9df53ce29b5b720a03-image-1479852997408.gif\" style=\"float: right\">\n\n## You Try It\n\nThis example is very similar to the worked example on the previous page - it is a version of the movie age checker that uses a dropdown.\n\nWe've provided the starting UI elements, including the dropdown - but none of the code.\n\n**Do this:**\nUsing the examples on the previous page as a guide...\n\n* Add an event handler for the *dropdown menu that triggers on *\"change\"*.\n* Add an if statement to check if the age chosen in the dropdown is `>=` to 13 and set the text in the *result_label*\n\t* if the age is 13 or over set the text to \"You are old enough to see a PG-13 movie alone\"\n    * Otherwise, set the text to \"You are not old enough to see a PG-13 movie alone\"\n\n**Tip:** Use `getNumber(id)` instead of `getText(id)` to get the value out of the dropdown\n\n* One major difference from the example is that we want to compare the value of the dropdown to a number using `>=` rather than with `==`\n* You should to use `getNumber(\"age_dropdown\")` to extract the value *as a number rather than text*. \n* This is the same reason we use `promptNum` instead of `prompt` for simple console examples.\n* It will still work if you use `getText` but isn't good form.",
        "U5 if-else weeekend challenge_markdown_instruction": "<img src=\"https://images.code.org/42591321cf2bf9e4b90e89e0ea613c9f-image-1479909970655.gif\" style=\"float: right\">\n\n## Challenge: It's the weekend!\n\n**Make an app tells you whether to stay home or go to school based on what day of the week it is.**\n\n\nIn this challenge you will:\n\n* Add your own dropdown menu in design mode\n* Add an event handler for the dropdown\n* Write an if-statement that's slightly tricky\n\n## Do this:\n\n* In Design Mode **add a dropdown** menu and fill it with the days of the week: *Monday, Tuesday,...,Sunday*\n* **Add an event handler** for that dropdown that activates on *\"change\"*\n* **Add an `if-else` statement** to the event handler that checks which day was selected and...\n\n\t* **If** the day selected was a weekend day (*Saturday* or *Sunday*) then display a message that says \"It's the weekend! Stay home!\"\n\n\t* **Otherwise** (the day is a weekday) display a message that says \"It's a weekday. Go to school\".\n* Your message should be displayed by setting the text of the *msg_label* provided in design mode.\n\n## Testing:\n\n* Once you have something functional, make sure you test *every* day of the week to verify the output is correct\n* The if-statement here is trickier than before.\n\n<details><summary>HINT: [click to expand]</summary>\n<br>\n\n<li>The trick here is that, unless you want to check all seven days with individual if-statements, you need to <strong>nest</strong> one if-statement inside another.</li>\n<li>The reason is that in order to know it's a weekday you need to know <em>both</em> that it's NOT Sunday <em>and</em> that it's not Saturday either.  That's two boolean conditions.</li>\n<li>Here is the skeleton of an if-else structure that will work.  Notice that the the if-statement that checks for Sunday is <em>inside</em> the else clause of the statement that checks for Saturday</li>\n\n\n<pre>\n\nIF it's saturday\n   ...\nELSE\n   IF it's sunday\n      ...\n   ELSE\n      ...\n\n</pre>\n\n</details>\n\n",
        "U5 if-else weeekend challenge_2018_markdown_instruction": "<img src=\"https://images.code.org/42591321cf2bf9e4b90e89e0ea613c9f-image-1479909970655.gif\" style=\"float: right\">\n\n## Challenge: It's the weekend!\n\n**Make an app tells you whether to stay home or go to school based on what day of the week it is.**\n\n\nIn this challenge you will:\n\n* Add your own dropdown menu in design mode\n* Add an event handler for the dropdown\n* Write an if-statement that's slightly tricky\n\n## Do this:\n\n* In Design Mode **add a dropdown** menu and fill it with the days of the week: *Monday, Tuesday,...,Sunday*\n* **Add an event handler** for that dropdown that activates on *\"change\"*\n* **Add an `if-else` statement** to the event handler that checks which day was selected and...\n\n\t* **If** the day selected was a weekend day (*Saturday* or *Sunday*) then display a message that says \"It's the weekend! Stay home!\"\n\n\t* **Otherwise** (the day is a weekday) display a message that says \"It's a weekday. Go to school\".\n* Your message should be displayed by setting the text of the *msg_label* provided in design mode.\n\n## Testing:\n\n* Once you have something functional, make sure you test *every* day of the week to verify the output is correct\n* The if-statement here is trickier than before.\n\n<details><summary>HINT: [click to expand]</summary>\n<br>\n\n<li>The trick here is that, unless you want to check all seven days with individual if-statements, you need to <strong>nest</strong> one if-statement inside another.</li>\n<li>The reason is that in order to know it's a weekday you need to know <em>both</em> that it's NOT Sunday <em>and</em> that it's not Saturday either.  That's two boolean conditions.</li>\n<li>Here is the skeleton of an if-else structure that will work.  Notice that the the if-statement that checks for Sunday is <em>inside</em> the else clause of the statement that checks for Saturday</li>\n\n\n<pre>\n\nIF it's saturday\n   ...\nELSE\n   IF it's sunday\n      ...\n   ELSE\n      ...\n\n</pre>\n\n</details>\n\n",
        "U5 if-else-if movie example_markdown_instruction": "# *if-else-if*\n\nLet's recreate the movie ratings example from the previous page (and video).\n\nAdd an `if-else-if` statement with a series of `else-if`s to display the right message based on the user's age.\n\nWe've started you out with code that prompts the user for her age.  We've also provided all the console.log statements you need.\n\n**Your task:** Add an `if-else-if` statement with the appropriate *Boolean expressions*, and move the `console.log` statements into the right clause so the correct message gets displayed.  Here is a reminder of what is supposed to happen.\n\n* **If** the user's age is 17 or over, they can see an R-rated movie\n* **else if** the user's age is 13 or over, they can see a PG-13 movie\n* **else if** the user's age is 5 or over they can see a PG movie\n* **else** display a message about the user being too young\n\n* **Test out the program** to make sure your updates worked.\n\n## Coding Tips\n\n**Create an `else-if`** by hitting the <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12 PM.png\" style=\"width: 40px\"> at the bottom of an `if` statement. The first <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12 PM.png\" style=\"width: 40px\"> will add an `else`, the second will add an `else-if`.\n\n**Remove an `else-if`** -- if you add an extra `else-if` by accident, you can remove it by switching into text mode and deleting the text.  Don't forget to delete the curly-braces `{` and `}` that go with it.\n\n\n",
        "U5 if-else-if movie example_2018_markdown_instruction": "# *if-else-if*\n\nLet's recreate the movie ratings example from the previous page (and video).\n\nAdd an `if-else-if` statement with a series of `else-if`s to display the right message based on the user's age.\n\nWe've started you out with code that prompts the user for her age.  We've also provided all the console.log statements you need.\n\n**Your task:** Add an `if-else-if` statement with the appropriate *Boolean expressions*, and move the `console.log` statements into the right clause so the correct message gets displayed.  Here is a reminder of what is supposed to happen.\n\n* **If** the user's age is 17 or over, they can see an R-rated movie\n* **else if** the user's age is 13 or over, they can see a PG-13 movie\n* **else if** the user's age is 5 or over they can see a PG movie\n* **else** display a message about the user being too young\n\n* **Test out the program** to make sure your updates worked.\n\n## Coding Tips\n\n**Create an `else-if`** by hitting the <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12 PM.png\" style=\"width: 40px\"> at the bottom of an `if` statement. The first <img src=\"https://images.code.org/f762344bc839dd8385730bb7d909657f-image-1446237096776.31.12 PM.png\" style=\"width: 40px\"> will add an `else`, the second will add an `else-if`.\n\n**Remove an `else-if`** -- if you add an extra `else-if` by accident, you can remove it by switching into text mode and deleting the text.  Don't forget to delete the curly-braces `{` and `}` that go with it.\n\n\n",
        "U5 if-else-if quiz grade_markdown_instruction": "# Quiz Grade\n\n**Prompt the user for their quiz score (0-100) and tell them what letter grade (A-F) they got.**\n\n**Example:** if the user enters `84` at the prompt your program should output: `Your quiz grade is a B.` Here's the score-to-grade breakdown:\n```\nLetter Grade:   A       B      C      D      F\n Score Range: 90-100  80-89  70-79  60-69  0-59\n```\n\n\n\nWe've started you out with the prompt and the `console.log` statements you need.  **Your task is to add the *if-else-if* statements to make it work.\n\n**Remember:** the order in which you check the boolean conditions *matters*.\n\n\n\n",
        "U5 if-else-if quiz grade_2018_markdown_instruction": "# Quiz Grade\n\n**Prompt the user for their quiz score (0-100) and tell them what letter grade (A-F) they got.**\n\n**Example:** if the user enters `84` at the prompt your program should output: `Your quiz grade is a B.` Here's the score-to-grade breakdown:\n```\nLetter Grade:   A       B      C      D      F\n Score Range: 90-100  80-89  70-79  60-69  0-59\n```\n\n\n\nWe've started you out with the prompt and the `console.log` statements you need.  **Your task is to add the *if-else-if* statements to make it work.\n\n**Remember:** the order in which you check the boolean conditions *matters*.\n\n\n\n",
        "U5-AP-Algorithm-Does-It-Count_markdown_instruction": "# AP Practice - Algorithm - Score the Response\n\nOne component of the **AP Create Performance Task** is selecting and describing an algorithm that you developed.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2. Written Responses</b>\n<ul>\n2c. Capture and paste a program code segment that implements an algorithm (marked with an <b>oval</b> in <b>section 3</b> below) and that is fundamental for your program to achieve its intended purpose. This code segment must be an algorithm you developed individually on your own, must include two or more algorithms, and must integrate mathematical and/or logical concepts. Describe how each algorithm within your selected algorithm functions independently, as well as in combination with others, to form a new algorithm that helps to achieve the intended purpose of the program. (Must not exceed 200 words)\n</ul>\n</div>\n<br>\n\nHere's the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/73352bdcc7c3b46ee949f534a0de9dd4-image-1515191914293.38.22 PM.png\">\n</div>\n\n# Score the Response\n\n**Written Response:** *\"My algorithm controls the log-in for the app. This piece of my program is important because the data included in my app needs to be secure. The algorithm makes sure only users with the correct password get in to the app to use it.\"*\n\n**Program Code:** \n\n<img src=\"https://images.code.org/e1929ddfdc31d0a96c9111a6e76f43d0-image-1517465128952.png\" style=\"height:300px\">\n\n**Explain why you would or would not award the point for Row 5 based on the criteria given above**\n",
        "U5-AP-Algorithm-Does-It-Count_2018_markdown_instruction": "# AP Practice - Algorithm - Score the Response\n\nOne component of the **AP Create Performance Task** is selecting and describing an algorithm that you developed.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2. Written Responses</b>\n<ul>\n2c. Capture and paste a program code segment that implements an algorithm (marked with an <b>oval</b> in <b>section 3</b> below) and that is fundamental for your program to achieve its intended purpose. This code segment must be an algorithm you developed individually on your own, must include two or more algorithms, and must integrate mathematical and/or logical concepts. Describe how each algorithm within your selected algorithm functions independently, as well as in combination with others, to form a new algorithm that helps to achieve the intended purpose of the program. (Must not exceed 200 words)\n</ul>\n</div>\n<br>\n\nHere's the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/73352bdcc7c3b46ee949f534a0de9dd4-image-1515191914293.38.22 PM.png\">\n</div>\n\n# Score the Response\n\n**Written Response:** *\"My algorithm controls the log-in for the app. This piece of my program is important because the data included in my app needs to be secure. The algorithm makes sure only users with the correct password get in to the app to use it.\"*\n\n**Program Code:** \n\n<img src=\"https://images.code.org/e1929ddfdc31d0a96c9111a6e76f43d0-image-1517465128952.png\" style=\"height:300px\">\n\n**Explain why you would or would not award the point for Row 5 based on the criteria given above**\n",
        "U5-AP-Practice-Choose-The-Algorithm_markdown_instruction": "# AP Practice - Identify the Abstraction\n\nOne component of the **AP Create Performance Task** is selecting an abstraction that you developed.\n\n<div style=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>3. Program Code</b>\n<ul>\n<li>Mark with a <b>rectangle</b> the segment of program code that represents an abstraction you developed.</li>\n</ul>\n</div>\n<br>\n\nHere's the scoring guide for this question\n\n<div style=\"magin:auto\">\n\t<img src=\"https://images.code.org/341764b27f16965cf27680e20c893a23-image-1508190677805.50.59 PM.png\">\n</div>\n\n# Choose the Student-Created Abstraction\n\nThe program code below is from a program a student developed. \n\n![](https://images.code.org/86d48cfc2c9c81551aa059281e9c62f3-image-1508189804595.34.48 PM.png)\n\n**Write which of the rectangles (A, B, C, or D) is placed around a student-developed abstraction.**\n\n**Then explain your answer using the criteria in the scoring guide.**",
        "U5-AP-Practice-FR-manage-complexity_markdown_instruction": "# AP Practice - Performance Task Response\n\nThe AP Create Performance task asks you to write about an abstraction that you developed and wrote into your code. Most of the time that means identifying a function or procedure you wrote to help \"manage complexity\" in your program.\n\nHere is the actual prompt from the Create Performance Task:\n\n<div style=\"width: 70%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\n\n<b>2d.</b> Capture and paste a program code segment that contains an abstraction you developed individually on your own (marked with a <b>rectangle</b>). This abstraction must integrate mathematical and logical concepts. Explain how your abstraction helped manage the complexity of your program.\n<br>\n<i>(Must not exceed 200 words)</i>\n\n</div>\n\n<br>\n\nBelow is a segment of code from an \"under the sea\" program with a rectangle drawn around a portion of the code identifying an abstraction. Imagine that you wrote this and are composing an AP response about how this abstraction manages complexity.  (Note: ignore the requirement that the abstraction integrate \"mathematical and logical concepts\" for this practice response.  Just write about managing complexity).\n\n![](https://images.code.org/d98fa58fce78eff86fd734f32e2960e4-image-1507913593511.png)\n\nExplain how the abstraction marked with the rectangle in the code above helps manage complexity of this program.",
        "U6 - updateRecord - Callback Success Parameter_markdown_instruction": "#*updateRecord* Callback Function\n\nYou may have noticed that the callback function for `updateRecord` has an additional parameter: `success`. When `updateRecord` finishes, it returns the updated record as well as a boolean called `success`, which is `true` if the record was successfully updated and `false` otherwise.\n\nThe `success` parameter is useful in altering how your program behaves based on whether an error occurred when your program tried to update a record.\n\n**Your code from the previous exercise has been provided.**\n\n# Do This: \n\n* Add a line to the beginning of `updateSong` that sets `songToUpdate.seconds`.\n\t* **Hint:** \"Eye of the Tiger\" is 244 seconds long.\n* Add an `if-else` block inside the callback function for `updateRecord`.\n\t* If `updateRecord` finishes successfully, print out the updated recordâs title and artist.\n\t* Otherwise, if `updateRecord` does not finish successfully, print out an error message.\n* Run the program and verify that the updated song title and artist are still printed to the console.\n* Open the Data Viewer and check that the record for \"Eye of the Tiger\" is now fully filled in.\n\n**Your code should end up looking similar to the code depicted in the image.**\n\n![](https://images.code.org/b95ac5c5c45942b3eef85823dee48c42-image-1455666651198.PNG)",
        "U6 - updateRecord - Callback Success Parameter_2018_markdown_instruction": "#*updateRecord* Callback Function\n\nYou may have noticed that the callback function for `updateRecord` has an additional parameter: `success`. When `updateRecord` finishes, it returns the updated record as well as a boolean called `success`, which is `true` if the record was successfully updated and `false` otherwise.\n\nThe `success` parameter is useful in altering how your program behaves based on whether an error occurred when your program tried to update a record.\n\n**Your code from the previous exercise has been provided.**\n\n# Do This: \n\n* Add a line to the beginning of `updateSong` that sets `songToUpdate.seconds`.\n\t* **Hint:** \"Eye of the Tiger\" is 244 seconds long.\n* Add an `if-else` block inside the callback function for `updateRecord`.\n\t* If `updateRecord` finishes successfully, print out the updated recordâs title and artist.\n\t* Otherwise, if `updateRecord` does not finish successfully, print out an error message.\n* Run the program and verify that the updated song title and artist are still printed to the console.\n* Open the Data Viewer and check that the record for \"Eye of the Tiger\" is now fully filled in.\n\n**Your code should end up looking similar to the code depicted in the image.**\n\n![](https://images.code.org/b95ac5c5c45942b3eef85823dee48c42-image-1455666651198.PNG)",
        "U6 - updateRecord - Contacts - Edit UI_markdown_instruction": "# Editing Contacts in the Contacts App\n\nNow that youâre familiar with how `updateRecord` works, itâs time to add in functionality to the Contacts App so you can edit contacts in your database. First, youâll need to do some work in Design Mode to set up the UI elements youâll need.\n\n# Do This:\n\n** Your code and database from the Contacts App are provided.**\n\n* **Change the âDeleteâ button on the âviewContactsScreenâ to an âEditâ button.** Make sure you **change the button text and ID to something descriptive**. You might also want to change the style of the button.\n\t* **Note:** Leave the event handler for the old âDeleteâ button as is. Youâll still use it  later.\n* **Add a new screen called âeditContactsScreenâ** and add UI elements that look similar to the ones in the image. Donât forget to give your UI elements **descriptive and meaningful names**.\n\t* **Note:** Make sure the ID for your new âDeleteâ button matches the ID in your event handler for the old delete button. If you do this, your new âDeleteâ button should work without needing to change anything in your event handler.\n\n| Updated \"viewContactsScreen\": | New \"editContactsScreen\": |\n|------|------|\n| ![](https://images.code.org/aef7efbfea4493037d127ca97d83fcc6-image-1455919502578.png) | ![](https://images.code.org/ee5ce040dd52239719c2b4c790134d08-image-1455919496715.png) |\n\n",
        "U6 - updateRecord - Contacts - Edit UI_2018_markdown_instruction": "# Editing Contacts in the Contacts App\n\nNow that youâre familiar with how `updateRecord` works, itâs time to add in functionality to the Contacts App so you can edit contacts in your database. First, youâll need to do some work in Design Mode to set up the UI elements youâll need.\n\n# Do This:\n\n** Your code and database from the Contacts App are provided.**\n\n* **Change the âDeleteâ button on the âviewContactsScreenâ to an âEditâ button.** Make sure you **change the button text and ID to something descriptive**. You might also want to change the style of the button.\n\t* **Note:** Leave the event handler for the old âDeleteâ button as is. Youâll still use it  later.\n* **Add a new screen called âeditContactsScreenâ** and add UI elements that look similar to the ones in the image. Donât forget to give your UI elements **descriptive and meaningful names**.\n\t* **Note:** Make sure the ID for your new âDeleteâ button matches the ID in your event handler for the old delete button. If you do this, your new âDeleteâ button should work without needing to change anything in your event handler.\n\n| Updated \"viewContactsScreen\": | New \"editContactsScreen\": |\n|------|------|\n| ![](https://images.code.org/aef7efbfea4493037d127ca97d83fcc6-image-1455919502578.png) | ![](https://images.code.org/ee5ce040dd52239719c2b4c790134d08-image-1455919496715.png) |\n\n",
        "U6 - updateRecord - Contacts - Edit event handler_markdown_instruction": "# Event Handlers for âEditâ and âGo Backâ Buttons\n\nNow that you have all the UI elements you need, itâs time to set up the event handlers. In this level, youâll write the event handlers for the **âEditâ button** and the **new âGo Backâ button**. (Youâll write the event handler for âUpdate Contactâ in the next level.)\n\n# Do This:\n\n* **Add an event handler for the âGo Backâ button** on the screen for editing contacts. In the event handler:\n\t* Set the screen to `viewContactsScreen`.\n* **Add an event handler for the âEditâ button.** In the event handler:\n\t* Use `setText` to populate each of the text inputs with the appropriate information from the current contact (which you can access using `contacts[currentIndex]`).\n\t* Set the screen to `editContactsScreen`.\n* **Add an event handler to update the preview image** on the âEditâ screen when the user changes the image URL.\n\t* This event handler should be analogous to the one you wrote for `editURLinput`.\n* If you havenât already, **move the `setScreen` line from your âSave Contactâ button event handler into `showCurrentContact`.** This way, when you delete a contact and reload your local copy of `contacts`, your app will redirect to the âView Contactsâ screen.\n* **Run your program** and verify that the âEdit,â âGo Back,â and âDeleteâ buttons all work and that your preview image updates when you change the URL text.\n\n\n<details><summary><strong>Your code should look similar to this.</strong> (click to expand)</summary>\n![](https://images.code.org/74b697567fae902cad13d7df9e695b2b-image-1455921921229.png)\n</details>\n\n",
        "U6 - updateRecord - Contacts - Edit event handler_2018_markdown_instruction": "# Event Handlers for âEditâ and âGo Backâ Buttons\n\nNow that you have all the UI elements you need, itâs time to set up the event handlers. In this level, youâll write the event handlers for the **âEditâ button** and the **new âGo Backâ button**. (Youâll write the event handler for âUpdate Contactâ in the next level.)\n\n# Do This:\n\n* **Add an event handler for the âGo Backâ button** on the screen for editing contacts. In the event handler:\n\t* Set the screen to `viewContactsScreen`.\n* **Add an event handler for the âEditâ button.** In the event handler:\n\t* Use `setText` to populate each of the text inputs with the appropriate information from the current contact (which you can access using `contacts[currentIndex]`).\n\t* Set the screen to `editContactsScreen`.\n* **Add an event handler to update the preview image** on the âEditâ screen when the user changes the image URL.\n\t* This event handler should be analogous to the one you wrote for `editURLinput`.\n* If you havenât already, **move the `setScreen` line from your âSave Contactâ button event handler into `showCurrentContact`.** This way, when you delete a contact and reload your local copy of `contacts`, your app will redirect to the âView Contactsâ screen.\n* **Run your program** and verify that the âEdit,â âGo Back,â and âDeleteâ buttons all work and that your preview image updates when you change the URL text.\n\n\n<details><summary><strong>Your code should look similar to this.</strong> (click to expand)</summary>\n![](https://images.code.org/74b697567fae902cad13d7df9e695b2b-image-1455921921229.png)\n</details>\n\n",
        "U6 - updateRecord - Contacts - Save edited contact_markdown_instruction": "# Saving an Updated Contact in the Database\n\nThe last step for your Contacts App is to save the updated information from the user in the database. You can accomplish this by using `updateRecord`.\n\n# Do This:\n\n* **Add an event handler for the âUpdate Contactâ button.** In the event handler:\n\t* Create a new object called `objToUpdate` and set it to a copy of the current contact.\n\t* Call `updateRecord`, and make sure to set the first and second parameters.\n\t* In the callback function for `updateRecord`, call `refreshLocalData` to update your local copy of the database.\n* **Run your program** and verify that when you edit the information for a contact, the changes are reflected when you return to the \"View Contacts\" screen.\n\n<details><summary><strong>Your code should look similar to this.</strong> (click to expand)</summary>![](https://images.code.org/8f1c01a434934ee3bfdc4941f657b4dc-image-1455924274767.png)</details><br>\n\n**Congratulations!** You now have a fully-functioning Contacts App!\n\nYou can use this same pattern of **create, read, update, and delete** commands (a.k.a. â**CRUD** commandsâ) to store permanent data in many different types of apps.\n\n",
        "U6 - updateRecord - Contacts - Save edited contact_2018_markdown_instruction": "# Saving an Updated Contact in the Database\n\nThe last step for your Contacts App is to save the updated information from the user in the database. You can accomplish this by using `updateRecord`.\n\n# Do This:\n\n* **Add an event handler for the âUpdate Contactâ button.** In the event handler:\n\t* Create a new object called `objToUpdate` and set it to a copy of the current contact.\n\t* Call `updateRecord`, and make sure to set the first and second parameters.\n\t* In the callback function for `updateRecord`, call `refreshLocalData` to update your local copy of the database.\n* **Run your program** and verify that when you edit the information for a contact, the changes are reflected when you return to the \"View Contacts\" screen.\n\n<details><summary><strong>Your code should look similar to this.</strong> (click to expand)</summary>![](https://images.code.org/8f1c01a434934ee3bfdc4941f657b4dc-image-1455924274767.png)</details><br>\n\n**Congratulations!** You now have a fully-functioning Contacts App!\n\nYou can use this same pattern of **create, read, update, and delete** commands (a.k.a. â**CRUD** commandsâ) to store permanent data in many different types of apps.\n\n",
        "U6 - updateRecord - Default Block_markdown_instruction": "# Updating Records\n\nSometimes in your program, you may want to make edits to a record that already exists in your database. You can do this using the `updateRecord` block.\n\n![](https://images.code.org/c62e74c0fff801bb59a024894f7e8caf-image-1455576434177.PNG)\n\n`updateRecord` has three parameters:\n\n* The **name of the table** which contains the record you want to update\n* The **object** you want to update.\n* A **callback function**\n\nThe object in the second parameter needs to have an ID property. As with `deleteRecord`, this objectâs ID is used to determine which record in the database should be updated.\n\n\n# Do This:\n\n**Your database already includes a table called âmySongsâ.**\n\n* Open the Data Viewer for mySongs and note that the record for **âEye of the Tigerâ is missing information** for the artist and seconds columns.<br>![](https://images.code.org/3e7f6503480eaeeea2be6eedc51fa5bd-image-1455666147565.PNG)\n* **Run the starter code provided and take note of what prints to the console.**\n* **Drag out the `updateRecord` block.**\n\t* Set the table name to **âmySongsâ**.\n\t* Set the object  to `songToUpdate`.\n\t* In the callback function, add a `console.log` statement to **print out the updated recordâs title and artist.**\n* **Run the program again.**\n\t* Look at the output to the console.\n    * Refresh the Data Viewer and **verify that the record for âEye of the Tigerâ has been updated.**\n\n",
        "U6 - updateRecord - Default Block_2018_markdown_instruction": "# Updating Records\n\nSometimes in your program, you may want to make edits to a record that already exists in your database. You can do this using the `updateRecord` block.\n\n![](https://images.code.org/c62e74c0fff801bb59a024894f7e8caf-image-1455576434177.PNG)\n\n`updateRecord` has three parameters:\n\n* The **name of the table** which contains the record you want to update\n* The **object** you want to update.\n* A **callback function**\n\nThe object in the second parameter needs to have an ID property. As with `deleteRecord`, this objectâs ID is used to determine which record in the database should be updated.\n\n\n# Do This:\n\n**Your database already includes a table called âmySongsâ.**\n\n* Open the Data Viewer for mySongs and note that the record for **âEye of the Tigerâ is missing information** for the artist and seconds columns.<br>![](https://images.code.org/3e7f6503480eaeeea2be6eedc51fa5bd-image-1455666147565.PNG)\n* **Run the starter code provided and take note of what prints to the console.**\n* **Drag out the `updateRecord` block.**\n\t* Set the table name to **âmySongsâ**.\n\t* Set the object  to `songToUpdate`.\n\t* In the callback function, add a `console.log` statement to **print out the updated recordâs title and artist.**\n* **Run the program again.**\n\t* Look at the output to the console.\n    * Refresh the Data Viewer and **verify that the record for âEye of the Tigerâ has been updated.**\n\n",
        "U6 - updateRecord - Update Nonexistent Record_markdown_instruction": "# What If *updateRecord* Fails?\n\nIn the previous exercise, you added functionality that should print an error message if `updateRecord` returns without successfully updating the record in the database. But when should `updateRecord` fail?\n\nRemember, the object parameter needs to have an ID property that matches the ID of a record in the specified table. If the object doesnât have an ID property or if the ID property doesnât exist in the table, `updateRecord` wonât be able to successfully update the record.\n\nTo see this behavior, youâre going to add some code that will force `updateRecord` to fail.\n\n**Your code from the previous exercise has been provided.**\n\n# Do This:\n\n* At the beginning of the `updateSong` function, set `songToUpdate.artist` to a different string.\n* Add another line to set `songToUpdate.id` to an ID that isnât in the **mySongs** table (e.g., **8**).\n* Run the program. Take note of what gets printed to the console, then check the \"Eye of the Tiger\" record in the Data Viewer.\n\n![](https://images.code.org/db411452ec8b319452395c3383b3dd66-image-1455667133974.gif)\n\n<details>\n<summary><strong>What happened?</strong> (click to expand)</summary>\n\nWhen the record ID doesnât match any in the specified table, `updateRecord` canât find a record to update, so it sets the `success` parameter in the callback function to `false` and finishes without changing any records. Be careful to always make sure the object you pass `updateRecord` has an ID that matches a record in the table.\n</details>\n\n",
        "U6 - updateRecord - Update Nonexistent Record_2018_markdown_instruction": "# What If *updateRecord* Fails?\n\nIn the previous exercise, you added functionality that should print an error message if `updateRecord` returns without successfully updating the record in the database. But when should `updateRecord` fail?\n\nRemember, the object parameter needs to have an ID property that matches the ID of a record in the specified table. If the object doesnât have an ID property or if the ID property doesnât exist in the table, `updateRecord` wonât be able to successfully update the record.\n\nTo see this behavior, youâre going to add some code that will force `updateRecord` to fail.\n\n**Your code from the previous exercise has been provided.**\n\n# Do This:\n\n* At the beginning of the `updateSong` function, set `songToUpdate.artist` to a different string.\n* Add another line to set `songToUpdate.id` to an ID that isnât in the **mySongs** table (e.g., **8**).\n* Run the program. Take note of what gets printed to the console, then check the \"Eye of the Tiger\" record in the Data Viewer.\n\n![](https://images.code.org/db411452ec8b319452395c3383b3dd66-image-1455667133974.gif)\n\n<details>\n<summary><strong>What happened?</strong> (click to expand)</summary>\n\nWhen the record ID doesnât match any in the specified table, `updateRecord` canât find a record to update, so it sets the `success` parameter in the callback function to `false` and finishes without changing any records. Be careful to always make sure the object you pass `updateRecord` has an ID that matches a record in the table.\n</details>\n\n",
        "Unit 2 RGB Mapping_markdown_instruction": "# RGB Colors\n\nAll colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.\n\n* **Click \"Run\" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.\n* For each of the colors below, match it to its RGB value. Type your response in the box below.\n\nA) red: 216, green: 191, blue: 216 - rgb(216,191,216)\n\nB) red: 255, green: 239, blue: 213 - rgb(255,239,213)\n\nC) red: 255, green: 140, blue: 105 - rgb(255,140,105)\n\nD) red: 123, green: 104, blue: 238 - rgb(123,104,238)\n\nE) red: 107, green: 142, blue: 35 - rgb(107,142,35)\n\n\n<div style=\"font-size: 16px\">\n<br />\n<details>\n<summary>**Why do red and green make yellow?**</summary>\n<p>When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href=\"https://en.wikipedia.org/wiki/Additive_color\">Wikipedia - Additive Color</a>\n</p> </details>\n<details>\n<summary>**How many colors can I make with RGB color mixing?**</summary>\n<p>\nYou can make make over sixteen million different colors with RGB color mixing.\n</p></details>\n</div>\n",
        "Video. Introduction to Conditionals - Part 2.3_markdown_instruction": "### Points to pay attention to:\n\n* **START at 2:20**  \n    This is the second half of the video you watched earlier. \n\n* An If-else-if statement let's you check more than one condition at a time.\n* The **order of conditions matters**. Since conditions are checked sequentially from top to bottom, the code that gets executed will be the *first* statement to evaluate to true.\n\n",
        "Video. Introduction to Conditionals - Part 2_markdown_instruction": "### Points to pay attention to:\n\n* **NOTE:** Stop play at 1:37.  \n    It's all you need for the exercises that follow.  You'll watch the remainder of the video after that.\n\n* An IF statement can have an else clause, but an ELSE clause cannot exist on its own.\n* With an else clause you are *guaranteeing* that one of two portions of code will run.\n\n",
        "Visual Accessibility_markdown_instruction": "# Visual Accessibility: Color Contrast\n\nPeople need to be able to see and read the content on your web page for it to be useful. Not everyone will see your website the same way you do. Some people might have bad eye sight, others are color blind. How do you design with these differences in mind?\n\nOne of the easiest ways to insure that many people will be able to read the content on your website is to make sure their is enough contrast between the different colors you are using together on your site. Contrast is the state of being strikingly different from something else. Check out the below example of contrasting colors.\n\n| Example 1 | Example 2 |\n| --------- | --------- |\n|<img src=\"https://images.code.org/f4f8acab4c8fe45cddef0436c52084cf-image-1476231852248.jpg\" style=\"width:200px\"> | <img src=\"https://images.code.org/76ea7aba97b7a9717f8b784b0987a055-image-1476231855350.jpg\" style=\"width:200px\"> |\n\nStare at example 1 for a few seconds. You might notice that the edges of the text blur with the background or it feels like the image is pulsing. This is because the value of the colors is too close together. The second is definitely easier to look at because one color is dark and one is light.\n\nA way to test this is convert everything to grayscale. Notice how in the example below the example with contrasting colors is easier to view in grayscale.\n\n<img src=\"https://images.code.org/40be05f66945d5cf0fda69be95986a4a-image-1476232151166.jpg\" style=\"width:300px\">\n\nContrast can be a powerful tool to use in your website. You can direct a users eye to a certain part of the page using contrast. Check out this page. Where is your eye drawn?\n\n<img src=\"https://images.code.org/63af145760dc94d66dfff8791c1dfe65-image-1476232407521.32.15 PM.jpg\" style=\"width:500px\">\n\nYour answer is probably the orange buttons. Thats because those buttons have contrasting colors to the rest of the page which are lighter.\n\n# Do This\n\n* Use the <a href=\"http://contrastchecker.com/\"> color contrast checker </a> to see the difference in contrast of the different colors you are using together on your site. This website uses hex codes for colors. Remember that you can find the hex codes for your colors in your color information from lesson 10.\n* Click the \"See Grayscale\" button to see how well you can read the different text and background colors\n* Consider making changes to your color choices by darkening or lightening up certain colors to make them easier to read.\n\n** Images and examples from http://gomedia.com/zine/tutorials/rule-three-contrast-contrast-contrast/ **",
        "What is a Heuristic?_markdown_instruction": "## What is a Heuristic? \n\nIn lesson 2 students will take on the challenge of compressing various pieces of text. Over time, they will see that different types of text require different approaches to compression. The lesson ends with an activity where students develop a heuristic, or a rule of thumb, that can be applied to different pieces of text in order to compress them. \n\nThere are three Essential Knowledge Statements and one Exclusion Statement in the Framework dealing with Heuristics: \n\n>- 4.2.1D Some problems can be solved but not in a reasonable time. In these cases, heuristic approaches may be helpful to find solutions in reasonable time. \n- 4.2.2A A heuristic is a technique that may allow us to find an approximate solution when typical methods fail to find an exact solution. \n- 4.2.2B Heuristics may be helpful for finding an approximate solution more quickly when exact methods are too slow. \n- Exclusion Statement (4.2.2B): Specific heuristic solutions are beyond the scope of this course and the AP Exam.\n\nMany people are confused by the difference between *algorithms* and *heuristics*. Check out the following resource for some clarification about the overlaps and differences between the two. ",
        "aE1_markdown_instruction": "<img src=\"https://images.code.org/fa3c416b74ff9071455535955bc4df35-image-1465507662295.gif\" style=\"float:left; width:100px; margin: 0 20px 80px 100px;\"/>\n\n<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\">\nFirst, we need napkins!\n\nChoose your favorite shape:\n  - Square (Easy)\n  - Triangle (Medium)\n  - Pentagon (Hard)\n\n</div>\n<br/>\n\n",
        "aE2_markdown_instruction": "<img src=\"https://images.code.org/2a67ea28a0fb9f674fd764b350b297da-image-1465514320176.gif\" style=\"width:400px; margin: 0 20px 20px 10px;\"/>\n\n<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >Now we need enough for everyone!\n<br/><br/>\n\nLet's take the shape we just made and line up a row of 14 napkins.  \n<br/>\nIf you place one loop inside another loop, we call that a nested loop. \n\nHow can you loop all of the code from your last stage to make sure all 14 napkins line up next to each other?</div>\n",
        "aE3_markdown_instruction": "<img src=\"https://images.code.org/e9fe83556eec68be9ebd7de9a16267b1-image-1465516277348.gif\" style=\"width:400px; margin: 0 20px 20px 100px;\" loop=\"infinite\"/>\n\n<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nWe've got to have a tablecloth!  <br/></br>\n\nTake your row of 14 napkins and sew 14 of those together with another **outer loop** to make a cover for our table.\n</div>\n\n",
        "aE7_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nHow about some streamers?\n<br/><br/>\nIf you create another loop like this one, but turn left instead of right, what happens? \n\nCan you repeat all of that to draw this wave?\n</div>",
        "aE8_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nThe artist wants to give picture frames as party favors!\n<br/><br/>\nLet's loop the code from our streamers four times to create this frame. \n<br/><br/>We've added a special block called `curvy corner` to give you fancy round corners!\n</div>",
        "aEfreeplay_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\n<b>Free Play:</b>\nFor a final touch, we need some ornaments to hang around the house.\n<br/><br/>\nCan you design a decoration to spice up the party?\n</div>\n<br/>\n<h4>\n<details>\n<summary>Need Ideas?</summary>\n<br/>\n<br/>\nTry making a tablecloth full of diamond napkins!  \n<img src=\"https://images.code.org/2c092ea5edbb33405c019110df3f5710-image-1466095499984.43.56.png\" width=\"200px\"/>  \n<hr/>\n<br/>\nMake an ornament!   \n<img src=\"https://images.code.org/361d2ad667853418a040ec9383505169-image-1466096394561.56.12.png\" width=\"200px\"/>  \n<hr/>\n\n<br/>Make something completely new!  \n<img src=\"https://images.code.org/6809a1bd2a364ae7e0ff42745ec1fe1b-image-1466097871045.23.44.png\" width=\"200px\"/>  \n<hr/>\n\n\n</details>\n</h4>\n\n",
        "allthethings_embed_video_markdown_instruction": "Siri is a digital assistant built into Apple's iOS devices, including iPhones and iPads. Watch the advertisement for Siri, below. \n\n<iframe width=\"637px\" height=\"375px\" src=\"https://www.youtube.com/embed/8ciagGASro0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<br/>\n__Reflect on the prompts below:__ \n\n- What types of information does Siri respond to in the video?\n- What do you think Siri is paying attention to in order to create these answers?\n",
        "allthethings_moviebot_markdown_instruction": "# Please sign in to test applab levels (By design, applab levels only work if signed in. Normally, we make people sign in, but this is only enforceable for a whole script and would be annoying to do for the allthethings script).\n# Introduction to the Digital Assistant\n\n__While digital assistants may seem like magic, they are just elaborate computer programs that parse, or process, text__ looking for combinations of words to make decisions about what to reply.\n\nOver the next few lessons, __you're going to build up your own digital assistant that responds \"intelligently\" to a user's question__, by making a decision about what to reply based on the contents.\n\nYou'll now __explore a demo digital assistant__, Movie Bot, that represents the kind of program that you'll build up to. Try out some of the prompts below and also try your own. You'll quickly find the limits of what this program can and can't do.\n\n# Do this\n__Run Movie Bot. In the _'enter your question here'_ input, type each of the following prompts and hit 'enter' __\n- 'help'\n- 'What is the best PG comedy movie ever?'\n- 'What PG comedy movie should I watch next?'\n- 'Could you please tell me the best romance movie?'\n- 'I waNT To WatCH a MovIE!!!'\n- 'What is the capital of Kentucky?'\n- Play around! Ask more questions of Movie Bot and make a prediction about what logic it's using to reply\n",
        "allthethings_ttscsp_markdown_instruction": "\n# Play with different event types\n\n<img src=\"https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06 AM.png\" style=\"float: right\">\nIf you haven't yet, you should experiment with different event types with your `onEvent` blocks.  The ones that will work best here are mouse-related ones such as:\n  * click\n  * mousemove\n  * movedown\n  * mouseup\n  * mouseover\n\n*There are some events that capture keystrokes from the keyboard. These are interesting, but they do not work easily with buttons. We'll stick to mouse events for now, and get to keys later.*\n\n**Be sure** to experiment with each of the ones that start with \"mouse...\".\n\nOnce you've have played a little bit, click Finish to move on.\n\n",
        "artistDebugVideo1_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nUse the `repeat` loop to add waves to the water.<br/>\n</div>\n\n<img src=\"https://images.code.org/06a1120e0b2da4dbcf960a22c3abc248-image-1470787144854.gif\" width=\"300\"/>\n",
        "artistLoopsK2_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nNow, use a `repeat` loop to draw this line five times!<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif\" width=\"300\"/>\n",
        "artistLoopsK2gradek_artist_loops3_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nNow, use a `repeat` loop to draw this line five times!<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif\" width=\"300\"/>\n",
        "artistLoopsK9_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\n**Challenge:**  Lovely! Let's take a walk around the garden.<br/><br/>\n</div>\n\n<img src=\"https://images.code.org/cb5646ef57f68b47fa6c2762253a7044-image-1467936260174.gif\" width=\"300\"/>\n",
        "artistLoopsKFP_markdown_instruction": "Picture time!  Use what you have learned to draw a picture of what you think the Artist saw on stage.\n\n<hr/>\n<h3>Ideas</h3>\n<table>\n<tr>\n<td>\n<img src=\"https://images.code.org/8f4f2a68dae2cf0aa82cc0a49ea4df04-image-1466787750475.gif\" width=\"150\"/><br/>\n<h4>A Singing Snail</h4><br/><br/>\n</td>\n\n<td>\n<img src=\"https://images.code.org/732ce5dd91c7f49f06e88da1a9f664f3-image-1466794904255.gif\" width=\"150\"/><br/>\n<h4>A Big City</h4><br/><br/>\n</td>\n\n<td>\n<img src=\"https://images.code.org/37fdd6fdd761df09fd4949d5e43f0a7f-image-1466795165642.gif\" width=\"150\"/><br/>\n<h4>A Concert</h4><br/><br/>\n</td>\n\n<td>\n<img src=\"https://images.code.org/f7bf86b0f86669d82ee2c1565738b9cb-image-1466794447737.gif\" width=\"150\"/><br/>\n<h4>A Birthday Cake</h4><br/><br/>\n</td>\n\n</tr>\n</table>\n",
        "course2_playlab_stage17_11_markdown_instruction": "Create your own story. When you're done, click Finish to let friends try your story on their phones.\n<br/>\n\n<h5>\n<details>\n<summary><b>Need some ideas?</b></summary>\n\t<br/>\n\t<h5>\n\t\t<ul>\n        \t<li><strong>Who's there?</strong> - Make characters appear with random images, so no one knows who's showing up next.</li>\n            <li><strong>Going on an Adventure</strong> - Change the background, then have the characters talk about where they are now. </li>\n            <li><strong>Pinball</strong> - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen. </li>\n        </ul>\n\t</h5>\n</details>\n</h5>\n",
        "courseA_artist_loops9_markdown_instruction": "##**Challenge:** The stairs down to the dock are broken.  Help me fix them.\n\n![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)",
        "courseA_collector_loops2_markdown_instruction": "Get all three piles! Move Laurel to each piece of treasure, then use this block:\n  <xml><block type=\"collector_collect\"/></xml>",
        "courseA_collector_loops2_2018_markdown_instruction": "Get all three piles! Move Laurel to each piece of treasure, then use this block:\n  <xml><block type=\"collector_collect\"/></xml>",
        "courseA_collector_preLoops7_markdown_instruction": "Get all three piles! Move Laurel to each piece of treasure, then use this block:\n  <xml><block type=\"collector_collect\"/></xml>",
        "courseC_artist_loops5b_markdown_instruction": "What happens when you `move forward` then `move backward` by 100, 200, or 400 pixels somewhere inside the loop?  \n- Try using the `set pattern` block before you start your loop to make a work of art!\n___\n![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)",
        "courseC_artist_loops5b_2018_markdown_instruction": "What happens when you `move forward` then `move backward` by 100, 200, or 400 pixels somewhere inside the loop?  \n- Try using the `set pattern` block before you start your loop to make a work of art!\n___\n![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)",
        "courseC_artist_loops7a_markdown_instruction": "Try changing the `repeat` loop to run a different number of times.  How far do you have to turn to go around in a full circle?\n- Try changing how many times you spin\n  - Try a 60 degree turn for 6 times around\n  - Try a 20 degree turn for 18 times around\n___\nThis image uses a pirate, a ninja, and a giraffe. They loop 18 times with a 20 degree turn.\n\n![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)",
        "courseC_artist_loops7a_2018_markdown_instruction": "Try changing the `repeat` loop to run a different number of times.  How far do you have to turn to go around in a full circle?\n- Try changing how many times you spin\n  - Try a 60 degree turn for 6 times around\n  - Try a 20 degree turn for 18 times around\n___\nThis image uses a pirate, a ninja, and a giraffe. They loop 18 times with a 20 degree turn.\n\n![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)",
        "courseC_playLab_embedded_markdown_instruction": "##Here's a game for you to play! \nTo win, get the penguin to run into the octopus. Use your arrow keys to move the penguin around.\n\nOnce you are done, you will learn how to make this game!",
        "courseD_Frozen_nested3_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Letâs make it into a snowflake.\"_\n\nNext, jump Elsa back to the center using the `jump to 200 over and 200 down` block, and spin her around to draw the line of shapes again and again in a bunch of different directions.   \n\nWhat amazing snowflakes you can make!\n<hr/>\nTake a look at these examples with polygons:  \n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\n\nAbstract shapes might make a snowflake more like one of these:  \n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)",
        "courseD_Frozen_nested6_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Letâs try something new. This time, skate in a zig-zag.\"_\n\n\n<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\" width=\"200px\" style=\"float: left; margin: 0 15px 15px 0;\" />\nDraw a stair-step pattern that uses turns between 75 and 105 degrees -- but make sure that your left and right turns use the same angle.  \n(You will see why later.)",
        "courseD_artist_5_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Try changing the shapes or the lengths of the lines to make this your own!\"_\n\n<br/>  \n\n**Inspiration:** You can change your drawing in any way you want, but here is an idea:\n\n- Try switching the types of shape in the middle of the snowflake with the one at the end of each line!",
        "courseD_artist_6_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Letâs try something new. This time, skate in a zig-zag.\"_\n\n<br/>  \n\n**Inspiration:** Try changing your long 150 pixel line into 6 short lines of **25** pixels\n\n- Turn by **45** degrees in alternate directions after each short line to get a zig-zag look\n- Where do you need to put a new `repeat` block to make this happen?\n- How many times do you have to repeat your pattern of 2 short lines to get 6 total?",
        "courseD_artist_functions7_markdown_instruction": "Let's take the code for the window and add it to function `draw a window`. Now, we can call the function any time we need to draw a window without having to write the code again. \n\n<img src=\"https://images.code.org/57c016bcafe697e6ddb196e0f13c9ef9-image-1468602046641.gif\" width=\"450px\"/>\n<br/> \n\nTry solving this puzzle by creating `draw a window` and calling it five times. Watch out for the door!\n\n- The top windows are 50 pixels away from each other.  \n- The bottom windows are 100 pixels below the top set.",
        "courseD_artist_project1a_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Letâs try something new. This time, skate in a zig-zag.\"_\n\n\n<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\" width=\"200px\" style=\"float: left; margin: 0 15px 15px 0;\" />\nDraw a stair-step pattern that uses turns between 75 and 105 degrees -- but make sure that your left and right turns use the same angle.  \n(You will see why later.)",
        "courseD_artist_project1a_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Letâs try something new. This time, skate in a zig-zag.\"_\n\n\n<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\" width=\"200px\" style=\"float: left; margin: 0 15px 15px 0;\" />\nDraw a stair-step pattern that uses turns between 75 and 105 degrees -- but make sure that your left and right turns use the same angle.  \n(You will see why later.)",
        "courseD_artist_project3_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Letâs make it into a snowflake.\"_\n\nNext, jump Elsa back to the center using the `jump to 200 over and 200 down` block, and spin her around to draw the line of shapes again and again in a bunch of different directions.   \n\nWhat amazing snowflakes you can make!\n<hr/>\nTake a look at these examples with polygons:  \n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\n\nAbstract shapes might make a snowflake more like one of these:  \n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)",
        "courseD_artist_project3_2018_markdown_instruction": "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _\"Letâs make it into a snowflake.\"_\n\nNext, jump Elsa back to the center using the `jump to 200 over and 200 down` block, and spin her around to draw the line of shapes again and again in a bunch of different directions.   \n\nWhat amazing snowflakes you can make!\n<hr/>\nTake a look at these examples with polygons:  \n![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\n![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\n![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\n\nAbstract shapes might make a snowflake more like one of these:  \n![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\n![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\n![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)",
        "courseD_bee_nestedLoops1a_markdown_instruction": "*\"This is going to **BEE** great!\"*\n\nHelp the bee collect all of the nectar.",
        "courseD_bee_nestedLoops1a_2018_markdown_instruction": "*\"This is going to **BEE** great!\"*\n\nHelp the bee collect all of the nectar.",
        "courseE_artist_ramp11_markdown_instruction": "Great!  Now let's make a square using Artist!  The blocks are a little different, but the idea is the same.\n<hr/>\nEach side of the square has a length of 200 pixels, and you will need to turn 90 degrees to make each angle.",
        "courseE_artist_ramp12_markdown_instruction": "Use what you've learned to draw this triangle inside of a square.\n<hr/>\nThe sides are each 200 pixels long. You will need to turn 90 degrees to make the square and 120 degrees to make the triangle.",
        "courseF_artist_fwp_challenge2_markdown_instruction": "Wow! Use what you learned in the previous level to draw an image like this.\n\n*Hint: Use parameters to make your code simpler.*\n\n<br/>\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\" width=\"300px\"/>\n<br/>  ",
        "courseF_artist_fwp_challenge2_2018_markdown_instruction": "Wow! Use what you learned in the previous level to draw an image like this.\n\n*Hint: Use parameters to make your code simpler.*\n\n<br/>\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\" width=\"300px\"/>\n<br/>  ",
        "csd1dlp-assessment_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 1, and have a good sense of the the role of assessment across the unit. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Assessment in Unit 1\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 1. Your response should clearly address each of the items below: \n\n1. What summative and formative assessment opportunities are built into the unit? \n\t* Whatâs the role of the project(s) in the unit? \n\t* How does the project(s) apply content and skills that were developed during the unit? \n2. Which student practices (PPCCC) are honed the most in this unit through the activities and projects? \n3. What are the core 2017 CSTA standards or threads of the K-12 framework in this unit?\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n",
        "csd1dlp-lessons_markdown_instruction": "<br><br>\n\n> **NOTE: Before you start this reflection, make sure youâve reviewed the lessons in Unit 1 and have a good sense of the connections between lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 1 Lesson Connections and Philosophy\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 1. Your response should clearly address each of the items below: \n\n1. What does a typical lesson in this unit look like? \n\n2. What is the connection between early lessons and later lessons?\n\n3. Where do you see the Curriculum Values and philosophy emphasized in this unit?\n\t- In what ways does the curriculum support building a positive classroom community?\n\n4. How does the Input-Output-Store-Process model help prepare a student to think more deeply about the way computers help us to solve problems?\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n",
        "csd1dlp-tools_markdown_instruction": "\n\n<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 1, and have a good sense of the the role of tools in the lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 1 Tool Philosophy and Use\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 1. Your response should clearly address each of the items below: \n\n- How would you respond to a teacher who asks why is the first unit does not use computers?\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n",
        "csd2dlp-assessment_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 2, and have a good sense of the the role of assessment across the unit. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Assessment in Unit 2\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 2. Your response should clearly address each of the items below: \n\n1. What summative and formative assessment opportunities are built into the unit? \n\t* Whatâs the role of the project(s) in the unit? \n\t* How does the project(s) apply content and skills that were developed during the unit? \n\t* What kinds of special considerations come with the unit long project in this unit?\n2. What skills and knowledge should students leave the unit with?\n3. What are the core 2017 CSTA standards or threads of the K-12 framework in this unit?\n\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n",
        "csd2dlp-lessons_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 2, and have a good sense of the connections between lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 2 Lesson Connections and Philosophy\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 2. Your response should clearly address each of the items below: \n\n1. Which lessons are particularly tricky to teach in this unit and why? \n2. How is the content spiraled or scaffolded within the unit? \n3. What connections or hooks into Unit 1 can be used to motivate early lessons in unit 2?\n4. Why teach HTML and CSS before starting with JavaScript in Game Lab? \n5. What two Classroom Practices do you feel are most important in this unit? Why?\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n",
        "csd2dlp-tools_markdown_instruction": "\n\n<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 2, and have a good sense of the the role of tools in the lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 2 Tool Philosophy and Use\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 2. Your response should clearly address each of the items below: \n\n1. How would you respond to a teacher who says they are just going to put students on the computer and let them go at their own pace?\n2. Whatâs the philosophy of using Web Lab in this unit? \n\t* In what ways is Web Lab educational rather than professional? \n\t* What kind of supports exist for students working Web Lab?\n\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n",
        "csd3dlp-assessment_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 3, and have a good sense of the the role of assessment across the unit. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Assessment in Unit 3\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 3. Your response should clearly address each of the items below: \n\n1. What summative and formative assessment opportunities are built into the unit? \n\t* Whatâs the role of the project(s) in the unit? \n\t* How does the project(s) apply content and skills that were developed during the unit? \n2. Which student practices (PPCCC) are honed the most in this unit through the activities and projects? \n3. What are the core 2017 CSTA standards concepts (algorithms & programming, computing systems, data analysis, impacts of computing, and networks & the internet), and practices (Fostering an Inclusive Computing Culture, Collaborating Around Computing, Recognizing and Defining Computational Problems, Developing and Using Abstractions, Creating Computational Artifacts, Testing and Refining Computational Artifacts, and Communicating About Computing) emphasized in this unit? How are they emphasized?\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n",
        "csd3dlp-lessons_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 3, and have a good sense of the connections between lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 3 Lesson Connections and Philosophy\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 3. Your response should clearly address each of the items below: \n\n1. Which lessons are particularly tricky to teach in this unit and why?\n2. Which lessons are particularly foundational in the unit and why?\n3. How is the content spiraled or scaffolded within the unit? \n4. How would you recommend a teacher differentiate instruction in this unit if their students had a wide range of background with programming?\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n",
        "csd3dlp-tools_markdown_instruction": "\n\n<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 3, and have a good sense of the the role of tools in the lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 3 Tool Philosophy and Use\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 3. Your response should clearly address each of the items below: \n\n1. Whatâs the role of the teacher in this unit, where much of the computer science content is embedded in the levels?\n\t* Whatâs the philosophy of programming in Game Lab? \n\t* In what ways is Game Lab educational rather than professional? \n\t* What kind of supports exist for students using Game Lab?\n2. What does a teacher need to keep in mind to help their students transition from Web Lab to Game Lab?\n\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n",
        "csd4dlp-assessment_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 4, and have a good sense of the the role of assessment across the unit. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Assessment in Unit 4\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 4. Your response should clearly address each of the items below: \n\n1. What skills and knowledge should students leave the unit with? What summative and formative assessment opportunities are built into the unit to assess those skills and knowledge?\n2. What kinds of special considerations come with the group project in this unit?\n3. What are the core 2017 CSTA standards concepts (algorithms & programming, computing systems, data analysis, impacts of computing, and networks & the internet), and practices (Fostering an Inclusive Computing Culture, Collaborating Around Computing, Recognizing and Defining Computational Problems, Developing and Using Abstractions, Creating Computational Artifacts, Testing and Refining Computational Artifacts, and Communicating About Computing) emphasized in this unit? How are they emphasized?\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n ",
        "csd4dlp-lessons_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 4, and have a good sense of the connections between lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 4 Lesson Connections and Philosophy\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 4. Your response should clearly address each of the items below: \n\n1. CS Discoveries is set up to allow for the class to be taught as two separate semesters where Unit 4 may be the first unit of a new course. What is the role of this unit in kicking off semester 2 of the curriculum?\n2. How is the problem solving process used in this unit? How it is connected to how they used the problem solving process in Units 1 to 3?\n4. Where do you see the Curriculum Values and philosophy emphasized in this unit?\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n",
        "csd4dlp-tools_markdown_instruction": "\n\n<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 4, and have a good sense of the the role of tools in the lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 4 Tool Philosophy and Use\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 4. Your response should clearly address each of the items below: \n\n1. App Lab is used in later lessons in this unit. What is the role of App Lab in this unit? How is it different from other times in the curriculum a tool is present?\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n",
        "csd5dlp-assessment_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 5, and have a good sense of the the role of assessment across the unit. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Assessment in Unit 5\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 5. Your response should clearly address each of the items below: \n\n1. What skills and knowledge should students leave the unit with? What summative and formative assessment opportunities are built into the unit to assess those skills and knowledge?\n3. What are the core 2017 CSTA standards concepts (algorithms & programming, computing systems, data analysis, impacts of computing, and networks & the internet), and practices (Fostering an Inclusive Computing Culture, Collaborating Around Computing, Recognizing and Defining Computational Problems, Developing and Using Abstractions, Creating Computational Artifacts, Testing and Refining Computational Artifacts, and Communicating About Computing) emphasized in this unit? How are they emphasized?\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n ",
        "csd5dlp-lessons_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 5, and have a good sense of the connections between lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 5 Lesson Connections and Philosophy\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 5. Your response should clearly address each of the items below: \n\n1. Which lessons are particularly tricky to teach in this unit and why? \n2. What is the connection between the first chapter and second chapter of this unit?\n3. To what depth are students expected to understand binary representation systems? How does the order and structure of the lessons support this understanding?\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n",
        "csd5dlp-tools_markdown_instruction": "\n\n<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 5, and have a good sense of the the role of tools in the lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 5 Tool Philosophy and Use\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 5. Your response should clearly address each of the items below: \n\n1. This unit makes use of a tool optional (teachers can use a spreadsheet tool if they want). If a teacher asked about whether to use a tool or not what kind of things would say/ask in response to support them?\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n",
        "csd6dlp-assessment_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 6, and have a good sense of the the role of assessment across the unit. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Assessment in Unit 6\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 6. Your response should clearly address each of the items below: \n\n1. What skills and knowledge should students leave this unit with? What summative and formative assessment opportunities are built into the unit to assess those skills and knowledge?\n2. What are the core 2017 CSTA standards concepts (algorithms & programming, computing systems, data analysis, impacts of computing, and networks & the internet), and practices (Fostering an Inclusive Computing Culture, Collaborating Around Computing, Recognizing and Defining Computational Problems, Developing and Using Abstractions, Creating Computational Artifacts, Testing and Refining Computational Artifacts, and Communicating About Computing) emphasized in this unit? How are they emphasized?\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n ",
        "csd6dlp-lessons_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 6, and have a good sense of the connections between lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 6 Lesson Connections and Philosophy\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 6. Your response should clearly address each of the items below: \n\n1. Which lessons are particularly tricky to teach in this unit and why?\n2. Which lessons are particularly foundational in the unit?\n3. Which programming skills from Unit 3 does this unit rely upon? What new skills are introduced?\n4. How does the way students program with the Circuit Playground connect back to the Input-Output-Store-Process model from Unit 1?\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n",
        "csd6dlp-tools_markdown_instruction": "\n\n<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 6, and have a good sense of the the role of tools in the lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 6 Tool Philosophy and Use\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 6. Your response should clearly address each of the items below: \n\n1. What advice do you have for teachers about how to handle the transition from programming in Game Lab to programming in App Lab? \n\t* Whatâs the philosophy of programming in App Lab with Maker Toolkit? \n2. In what ways are the tools in the unit educational rather than professional? \n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n",
        "csp1dlp-assessment_markdown_instruction": "\n\n<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 1, and have a good sense of the the role of assessment across the unit. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Assessment in Unit 1\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 1. Your response should clearly address each of the items below: \n\n1. Whatâs the role of the practice Performance Task(s), or PTs, in the unit? \n  - Which PTs are being practiced?\n  - How does the practice PT build on what content and skills were developed during the unit? \n2. What summative and formative assessment opportunities are built into the unit? \n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n",
        "csp1dlp-lessons_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 1, and have a good sense of the connections between lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 1 Lesson Connections and Philosophy\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 1. Your response should clearly address each of the items below: \n\n1. What skills and knowledge should students leave the unit with?\n  - Which Big Idea(s) are students learning the most about? Where and how are those BI(s) addressed? \n  - Which skills or Computational Practices are honed through the activities and projects? \n\n2. What is the connection between early lessons and later lessons?\n  - How is the content spiraled or scaffolded within the unit? \n  - What foundation is being laid early on and how is it leveraged throughout the unit? Why? \n  - How would you respond to a teacher who says âwhatâs the pointâ of lesson 4? \n\n3. Which lessons are particularly tricky to teach in this unit and why? \n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n",
        "csp1dlp-tools_markdown_instruction": "\n\n<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 1, and have a good sense of the the role of tools in the lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 1 Tool Philosophy and Use\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 1. Your response should clearly address each of the items below: \n\n- Why are we using the Internet Simulator rather than teaching without it? \n- In what ways is the Internet Simulator educational rather than professional? \n- Whatâs the philosophy of teaching with the Internet Simulator? \n- This is a very Internet Simulator heavy unit. What are strategies for dealing with students who are getting fatigued by the end of the unit? \n- Many classes have technology issues at the start of the year (computers are not ready yet, etc). How would you recommend a teacher approaches the first unit if sheâs having issues with technology access?\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n",
        "csp2dlp-assessment_markdown_instruction": "\n\n<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 2, and have a good sense of the the role of assessment across the unit. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Assessment in Unit 2 \n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 2. Your response should clearly address each of the items below: \n\n1. Whatâs the role of the practice Performance Task(s), or PTs, in the unit? \n  - How does the practice Explore PT build on what content and skills were developed during the unit? \n2. What summative and formative assessment opportunities are built into the unit? \n\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n",
        "csp2dlp-lessons_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 2, and have a good sense of the connections between lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 2 Lesson Connections and Philosophy\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 2. Your response should clearly address each of the items below:\n\n1. What skills and knowledge should students leave the unit with?\n  - Which Learning Objectives (LOs) under the Big Idea of data are explored in the second chapter of unit 2? These data-related LOs are in the interest of preparing for the Explore Task. How would you explain the lens used to look at data in chapter 2 and the connection to the Explore Task?\n  - Which skills or Computational Practices are honed through the activities and projects? \n2. What is the connection between early lessons and later lessons?\n  - What connections or hooks into unit 1 that can be used to motivate early lessons in unit 2? \n  - How would you described the connection between chapter 1 and chapter 2 to a teacher? \n  - What foundation is being laid early on and how is it leveraged throughout the unit? Why? \n3. Which lessons are particularly tricky to teach in this unit and why? \n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n\n",
        "csp2dlp-tools_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 2, and have a good sense of the the role of tools in the lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 2 Tool Philosophy and Use\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 2. Your response should clearly address each of the items below: \n\n- Why are we using whatever tools are present in the unit rather than teaching without them? \n- In what ways are the tools in the unit educational rather than professional? \n- Whatâs the philosophy of teaching with these tools? \n\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n",
        "csp3dlp-assessment_markdown_instruction": "\n\n<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 3, and have a good sense of the the role of assessment across the unit. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Assessment in Unit 3 \n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 3. Your response should clearly address each of the items below: \n\n1. Whatâs the role of the practice Performance Task(s), or PTs, in the unit? \n  - How does the practice Create PT build on what content and skills were developed during the unit? \n2. What summative and formative assessment opportunities are built into the unit? \n\n\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n",
        "csp3dlp-lessons_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 3, and have a good sense of the connections between lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 3 Lesson Connections and Philosophy\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 3. Your response should clearly address each of the items below: \n\n1. What skills and knowledge should students leave the unit with?\n  - Which Big Idea(s) are students learning the most about? Where and how are those BI(s) addressed? \n  - Which skills or Computational Practices are honed through the activities and projects? \n2. What is the connection between early lessons and later lessons?\n  - How is the content spiraled or scaffolded within the unit? \n  - How would you respond to a teacher who says âwhatâs the pointâ of lessons 1 - 3? \n  - Unit 3 starts with sequencing, functions, and functions with parameters, which is not a typical way of starting a unit on programming (many lead with variables, for example). What are some of the potential reasons and benefits of doing it this way?\n  - What foundation is being laid early on and how is it leveraged throughout the unit? Why? \n  - Which lessons are particularly tricky to teach in this unit and why? \n3. How would you recommend a teacher differentiate instruction in this unit if her students had a wide range of background with programming?\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n",
        "csp3dlp-tools_markdown_instruction": "\n<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 3, and have a good sense of the the role of tools in the lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 3 Tool Philosophy and Use\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 3. Your response should clearly address each of the items below:\n\n- Why are we using Applab in Code Studio rather than teaching with another tool? \n- In what ways is Applab educational rather than professional? \n- Whatâs the role of the teacher in this unit, where much of the cs content is embedded in the levels?\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n",
        "csp4dlp-assessment_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 4, and have a good sense of the the role of assessment across the unit. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Assessment in Unit 4 \n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 4. Your response should clearly address each of the items below: \n\n1. Whatâs the role of the practice Performance Task(s), or PTs, in the unit? \n2. What summative and formative assessment opportunities are built into the unit? \n\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n",
        "csp4dlp-lessons_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 4, and have a good sense of the connections between lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 4 Lesson Connections and Philosophy\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 4. Your response should clearly address each of the items below: \n\n1. Which Big Idea(s) are students learning the most about? Where and how are those BI(s) addressed? \n2. Which skills or Computational Practices are honed through the activities and projects? \n3. What recommendations do you have about the optional lessons in this unit? (when and why would a teacher choose to use them?)\n4. How can the material covered in the earlier units be connected to Unit 4 topics? (specifically the internet and data) \n5. Which lessons are particularly tricky to teach in this unit and why? \n \n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n ",
        "csp4dlp-tools_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 4, and have a good sense of the the role of tools in the lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 4 Tool Philosophy and Use\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 4. Your response should clearly address each of the items below:\n\n- Why are we using whatever tools are present in the unit rather than teaching without them? \n- Whatâs the philosophy of teaching with these tools? \n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n ",
        "csp5dlp-assessment_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 5, and have a good sense of the the role of assessment across the unit. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Assessment in Unit 5\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 5. Your response should clearly address each of the items below: \n\n1. What content thatâs covered in unit 5 is required for the create PT? What content is going to be on the fixed-response exam (as shown in the exam reference guide in the course and exam description) but isnât required for the performance task? \n2. What summative and formative assessment opportunities are built into the unit? \n\n\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n\n\n",
        "csp5dlp-lessons_markdown_instruction": "<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 5, and have a good sense of the connections between lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 5 Lesson Connections and Philosophy\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 5. Your response should clearly address each of the items below: \n\n1. Which Big Idea(s) are students learning the most about? Where and how are those BI(s) addressed? \n2. Which skills or Computational Practices are honed through the activities and projects? \n3. What advice do you have for teachers about how to handle the transition from turtle (back in unit 3)  to event-driven programming (here in unit 5)?  \n4. What lessons are foundational to this unit? How are they important to success in later lessons?\n5. Which lessons are particularly tricky to teach in this unit and why? \n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. \n \n",
        "csp5dlp-tools_markdown_instruction": "\n\n<br><br>\n\n> **NOTE: before you start this reflection, make sure youâve reviewed the lesson in Unit 5, and have a good sense of the the role of tools in the lessons. If you havenât already reviewed the materials, do that now and come back to this reflection later.**\n\n\n# Unit 5 Tool Philosophy and Use\n\nFor this reflection, youâre going to consider each of the prompts below and craft a written response that demonstrates your understanding of the lessons in Unit 5. Your response should clearly address each of the items below:\n\n1. Whatâs the philosophy of teaching with Applab? \n2. Whatâs the general cadence and structure of a lesson in unit 5? *(how are the levels in a typical lesson paced out, and whatâs the general progression)*\n\n\n\n>## Getting Credit for Completing this Reflection \n\n>- Once you submit your reflection, your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other facilitators. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering the reflection questions listed above. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit.\n- In order to get credit for completing this prompt, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to an instructor for review. You will always have a chance to address feedback from your reviewers and resubmit your reflections! Reviewer feedback will show up at the bottom of this page, once itâs available. ",
        "csp_affirmation_control_markdown_instruction": "This brief activity allows you to reflect about what you have learned in this course so far. It is provided to you by your teacher, but *you will not be graded on this.*\n\nSome topics in the course may be interesting to you, others may be less interesting.\n\n<strong>\n&#49;. Write down 1 or 2 topics that are most interesting to you:\n\n</strong>\n\n<input type=text><br>\n<input type=text>\n<br><br>\n\n<strong>\n&#50;. How did you prepare for taking this test? Do you feel more or less prepared to answer questions about the topics that interest you?\n</strong>\n\n*Write a few sentences, focusing on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_control_2_markdown_instruction": "This brief activity allows you to reflect about what you have learned in this course so far. It is provided to you by your teacher, but *you will not be graded on this.*\n\nSome topics in the course may be interesting to you, others may be less interesting.\n\n<strong>\n&#49;. Write down 1 or 2 topics that are most interesting to you:\n\n</strong>\n\n<input type=text><br>\n<input type=text>\n<br><br>\n\n<strong>\n&#50;. How did you prepare for taking this test? Do you feel more or less prepared to answer questions about the topics that interest you?\n</strong>\n\n*Write a few sentences, focusing on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_control_2018_markdown_instruction": "This brief activity allows you to reflect about what you have learned in this course so far. It is provided to you by your teacher, but *you will not be graded on this.*\n\nSome topics in the course may be interesting to you, others may be less interesting.\n\n<strong>\n&#49;. Write down 1 or 2 topics that are most interesting to you:\n\n</strong>\n\n<input type=text><br>\n<input type=text>\n<br><br>\n\n<strong>\n&#50;. How did you prepare for taking this test? Do you feel more or less prepared to answer questions about the topics that interest you?\n</strong>\n\n*Write a few sentences, focusing on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_control_2_2018_markdown_instruction": "This brief activity allows you to reflect about what you have learned in this course so far. It is provided to you by your teacher, but *you will not be graded on this.*\n\nSome topics in the course may be interesting to you, others may be less interesting.\n\n<strong>\n&#49;. Write down 1 or 2 topics that are most interesting to you:\n\n</strong>\n\n<input type=text><br>\n<input type=text>\n<br><br>\n\n<strong>\n&#50;. How did you prepare for taking this test? Do you feel more or less prepared to answer questions about the topics that interest you?\n</strong>\n\n*Write a few sentences, focusing on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_control_3_markdown_instruction": "This brief activity allows you to reflect about what you have learned in this course so far. It is provided to you by your teacher, but *you will not be graded on this.*\n\nSome topics in the course may be interesting to you, others may be less interesting.\n\n<strong>\n&#49;. Write down 1 or 2 topics that are most interesting to you:\n\n</strong>\n\n<input type=text><br>\n<input type=text>\n<br><br>\n\n<strong>\n&#50;. How did you prepare for taking this test? Do you feel more or less prepared to answer questions about the topics that interest you?\n</strong>\n\n*Write a few sentences, focusing on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_control_3_2018_markdown_instruction": "This brief activity allows you to reflect about what you have learned in this course so far. It is provided to you by your teacher, but *you will not be graded on this.*\n\nSome topics in the course may be interesting to you, others may be less interesting.\n\n<strong>\n&#49;. Write down 1 or 2 topics that are most interesting to you:\n\n</strong>\n\n<input type=text><br>\n<input type=text>\n<br><br>\n\n<strong>\n&#50;. How did you prepare for taking this test? Do you feel more or less prepared to answer questions about the topics that interest you?\n</strong>\n\n*Write a few sentences, focusing on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_control_4_markdown_instruction": "This brief activity allows you to reflect about what you have learned in this course so far. It is provided to you by your teacher, but *you will not be graded on this.*\n\nSome topics in the course may be interesting to you, others may be less interesting.\n\n<strong>\n&#49;. Write down 1 or 2 topics that are most interesting to you:\n\n</strong>\n\n<input type=text><br>\n<input type=text>\n<br><br>\n\n<strong>\n&#50;. How did you prepare for taking this test? Do you feel more or less prepared to answer questions about the topics that interest you?\n</strong>\n\n*Write a few sentences, focusing on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_control_4_2018_markdown_instruction": "This brief activity allows you to reflect about what you have learned in this course so far. It is provided to you by your teacher, but *you will not be graded on this.*\n\nSome topics in the course may be interesting to you, others may be less interesting.\n\n<strong>\n&#49;. Write down 1 or 2 topics that are most interesting to you:\n\n</strong>\n\n<input type=text><br>\n<input type=text>\n<br><br>\n\n<strong>\n&#50;. How did you prepare for taking this test? Do you feel more or less prepared to answer questions about the topics that interest you?\n</strong>\n\n*Write a few sentences, focusing on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_control_5_markdown_instruction": "This brief activity allows you to reflect about what you have learned in this course so far. It is provided to you by your teacher, but *you will not be graded on this.*\n\nSome topics in the course may be interesting to you, others may be less interesting.\n\n<strong>\n&#49;. Write down 1 or 2 topics that are most interesting to you:\n\n</strong>\n\n<input type=text><br>\n<input type=text>\n<br><br>\n\n<strong>\n&#50;. How did you prepare for taking this test? Do you feel more or less prepared to answer questions about the topics that interest you?\n</strong>\n\n*Write a few sentences, focusing on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_control_5_2018_markdown_instruction": "This brief activity allows you to reflect about what you have learned in this course so far. It is provided to you by your teacher, but *you will not be graded on this.*\n\nSome topics in the course may be interesting to you, others may be less interesting.\n\n<strong>\n&#49;. Write down 1 or 2 topics that are most interesting to you:\n\n</strong>\n\n<input type=text><br>\n<input type=text>\n<br><br>\n\n<strong>\n&#50;. How did you prepare for taking this test? Do you feel more or less prepared to answer questions about the topics that interest you?\n</strong>\n\n*Write a few sentences, focusing on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_intervention_markdown_instruction": "This brief activity allows you to reflect about whatâs most important to you. It is provided to you by your teacher, but *you will not be graded on this.*\n\nBelow is a list of values and qualities. Some of them may be important to you, others may be unimportant. \n\n<strong>\n&#49;. What's most important to you?</strong> (select one or more)\n\n\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5 cellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color: #FFFFFF\">\n  <tr style=\"border: 5px solid white\">\n    <td width=25% style=\"border: 5px solid white;\">\n    <label><input type=\"checkbox\"> Relationships with friends and family\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sports and athletics\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Relationships with friends or family\n    </label></td>\n    <td  width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Creativity\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spirituality or religion\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sense of humor\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Health and fitness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Physical attractiveness\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Romantic values\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Kindness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spontaneity, living life in the moment\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Independence\n    </label></td>\n  </tr>\n</table>\n<br>\n<br>\n\n<strong>\n&#50;. Why are these values important to you? Describe a time in your life when they were really important.\n</strong>\n\n*Write a few sentences. Focus on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_intervention_2_markdown_instruction": "This brief activity allows you to reflect about whatâs most important to you. It is provided to you by your teacher, but *you will not be graded on this.*\n\nBelow is a list of values and qualities. Some of them may be important to you, others may be unimportant. \n\n<strong>\n&#49;. What's most important to you?</strong> (select one or more)\n\n\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5 cellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color: #FFFFFF\">\n  <tr style=\"border: 5px solid white\">\n    <td width=25% style=\"border: 5px solid white;\">\n    <label><input type=\"checkbox\"> Relationships with friends and family\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sports and athletics\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Relationships with friends or family\n    </label></td>\n    <td  width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Creativity\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spirituality or religion\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sense of humor\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Health and fitness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Physical attractiveness\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Romantic values\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Kindness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spontaneity, living life in the moment\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Independence\n    </label></td>\n  </tr>\n</table>\n<br>\n<br>\n\n<strong>\n&#50;. Why are these values important to you? Describe a time in your life when they were really important.\n</strong>\n\n*Write a few sentences. Focus on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_intervention_2018_markdown_instruction": "This brief activity allows you to reflect about whatâs most important to you. It is provided to you by your teacher, but *you will not be graded on this.*\n\nBelow is a list of values and qualities. Some of them may be important to you, others may be unimportant. \n\n<strong>\n&#49;. What's most important to you?</strong> (select one or more)\n\n\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5 cellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color: #FFFFFF\">\n  <tr style=\"border: 5px solid white\">\n    <td width=25% style=\"border: 5px solid white;\">\n    <label><input type=\"checkbox\"> Relationships with friends and family\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sports and athletics\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Relationships with friends or family\n    </label></td>\n    <td  width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Creativity\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spirituality or religion\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sense of humor\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Health and fitness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Physical attractiveness\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Romantic values\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Kindness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spontaneity, living life in the moment\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Independence\n    </label></td>\n  </tr>\n</table>\n<br>\n<br>\n\n<strong>\n&#50;. Why are these values important to you? Describe a time in your life when they were really important.\n</strong>\n\n*Write a few sentences. Focus on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_intervention_2_2018_markdown_instruction": "This brief activity allows you to reflect about whatâs most important to you. It is provided to you by your teacher, but *you will not be graded on this.*\n\nBelow is a list of values and qualities. Some of them may be important to you, others may be unimportant. \n\n<strong>\n&#49;. What's most important to you?</strong> (select one or more)\n\n\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5 cellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color: #FFFFFF\">\n  <tr style=\"border: 5px solid white\">\n    <td width=25% style=\"border: 5px solid white;\">\n    <label><input type=\"checkbox\"> Relationships with friends and family\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sports and athletics\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Relationships with friends or family\n    </label></td>\n    <td  width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Creativity\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spirituality or religion\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sense of humor\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Health and fitness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Physical attractiveness\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Romantic values\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Kindness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spontaneity, living life in the moment\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Independence\n    </label></td>\n  </tr>\n</table>\n<br>\n<br>\n\n<strong>\n&#50;. Why are these values important to you? Describe a time in your life when they were really important.\n</strong>\n\n*Write a few sentences. Focus on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_intervention_3_markdown_instruction": "This brief activity allows you to reflect about whatâs most important to you. It is provided to you by your teacher, but *you will not be graded on this.*\n\nBelow is a list of values and qualities. Some of them may be important to you, others may be unimportant. \n\n<strong>\n&#49;. What's most important to you?</strong> (select one or more)\n\n\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5 cellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color: #FFFFFF\">\n  <tr style=\"border: 5px solid white\">\n    <td width=25% style=\"border: 5px solid white;\">\n    <label><input type=\"checkbox\"> Relationships with friends and family\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sports and athletics\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Relationships with friends or family\n    </label></td>\n    <td  width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Creativity\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spirituality or religion\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sense of humor\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Health and fitness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Physical attractiveness\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Romantic values\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Kindness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spontaneity, living life in the moment\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Independence\n    </label></td>\n  </tr>\n</table>\n<br>\n<br>\n\n<strong>\n&#50;. Why are these values important to you? Describe a time in your life when they were really important.\n</strong>\n\n*Write a few sentences. Focus on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_intervention_3_2018_markdown_instruction": "This brief activity allows you to reflect about whatâs most important to you. It is provided to you by your teacher, but *you will not be graded on this.*\n\nBelow is a list of values and qualities. Some of them may be important to you, others may be unimportant. \n\n<strong>\n&#49;. What's most important to you?</strong> (select one or more)\n\n\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5 cellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color: #FFFFFF\">\n  <tr style=\"border: 5px solid white\">\n    <td width=25% style=\"border: 5px solid white;\">\n    <label><input type=\"checkbox\"> Relationships with friends and family\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sports and athletics\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Relationships with friends or family\n    </label></td>\n    <td  width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Creativity\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spirituality or religion\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sense of humor\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Health and fitness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Physical attractiveness\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Romantic values\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Kindness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spontaneity, living life in the moment\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Independence\n    </label></td>\n  </tr>\n</table>\n<br>\n<br>\n\n<strong>\n&#50;. Why are these values important to you? Describe a time in your life when they were really important.\n</strong>\n\n*Write a few sentences. Focus on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_intervention_4_markdown_instruction": "This brief activity allows you to reflect about whatâs most important to you. It is provided to you by your teacher, but *you will not be graded on this.*\n\nBelow is a list of values and qualities. Some of them may be important to you, others may be unimportant. \n\n<strong>\n&#49;. What's most important to you?</strong> (select one or more)\n\n\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5 cellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color: #FFFFFF\">\n  <tr style=\"border: 5px solid white\">\n    <td width=25% style=\"border: 5px solid white;\">\n    <label><input type=\"checkbox\"> Relationships with friends and family\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sports and athletics\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Relationships with friends or family\n    </label></td>\n    <td  width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Creativity\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spirituality or religion\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sense of humor\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Health and fitness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Physical attractiveness\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Romantic values\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Kindness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spontaneity, living life in the moment\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Independence\n    </label></td>\n  </tr>\n</table>\n<br>\n<br>\n\n<strong>\n&#50;. Why are these values important to you? Describe a time in your life when they were really important.\n</strong>\n\n*Write a few sentences. Focus on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_intervention_4_2018_markdown_instruction": "This brief activity allows you to reflect about whatâs most important to you. It is provided to you by your teacher, but *you will not be graded on this.*\n\nBelow is a list of values and qualities. Some of them may be important to you, others may be unimportant. \n\n<strong>\n&#49;. What's most important to you?</strong> (select one or more)\n\n\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5 cellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color: #FFFFFF\">\n  <tr style=\"border: 5px solid white\">\n    <td width=25% style=\"border: 5px solid white;\">\n    <label><input type=\"checkbox\"> Relationships with friends and family\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sports and athletics\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Relationships with friends or family\n    </label></td>\n    <td  width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Creativity\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spirituality or religion\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sense of humor\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Health and fitness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Physical attractiveness\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Romantic values\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Kindness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spontaneity, living life in the moment\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Independence\n    </label></td>\n  </tr>\n</table>\n<br>\n<br>\n\n<strong>\n&#50;. Why are these values important to you? Describe a time in your life when they were really important.\n</strong>\n\n*Write a few sentences. Focus on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_intervention_5_markdown_instruction": "This brief activity allows you to reflect about whatâs most important to you. It is provided to you by your teacher, but *you will not be graded on this.*\n\nBelow is a list of values and qualities. Some of them may be important to you, others may be unimportant. \n\n<strong>\n&#49;. What's most important to you?</strong> (select one or more)\n\n\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5 cellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color: #FFFFFF\">\n  <tr style=\"border: 5px solid white\">\n    <td width=25% style=\"border: 5px solid white;\">\n    <label><input type=\"checkbox\"> Relationships with friends and family\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sports and athletics\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Relationships with friends or family\n    </label></td>\n    <td  width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Creativity\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spirituality or religion\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sense of humor\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Health and fitness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Physical attractiveness\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Romantic values\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Kindness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spontaneity, living life in the moment\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Independence\n    </label></td>\n  </tr>\n</table>\n<br>\n<br>\n\n<strong>\n&#50;. Why are these values important to you? Describe a time in your life when they were really important.\n</strong>\n\n*Write a few sentences. Focus on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_affirmation_intervention_5_2018_markdown_instruction": "This brief activity allows you to reflect about whatâs most important to you. It is provided to you by your teacher, but *you will not be graded on this.*\n\nBelow is a list of values and qualities. Some of them may be important to you, others may be unimportant. \n\n<strong>\n&#49;. What's most important to you?</strong> (select one or more)\n\n\n<table bordercolor=\"#FFFFFF\" width=75% cellpadding=5 cellspacing=10 style=\"background-color: #d9eff7; border-width: 10px; border-color: #FFFFFF\">\n  <tr style=\"border: 5px solid white\">\n    <td width=25% style=\"border: 5px solid white;\">\n    <label><input type=\"checkbox\"> Relationships with friends and family\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sports and athletics\n    </label></td>\n    <td width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Relationships with friends or family\n    </label></td>\n    <td  width=25% style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Creativity\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spirituality or religion\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Sense of humor\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Health and fitness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Physical attractiveness\n    </label></td>\n  </tr>\n  <tr>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Romantic values\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Kindness\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Spontaneity, living life in the moment\n    </label></td>\n    <td style=\"border: 5px solid white\">\n    <label><input type=\"checkbox\"> Independence\n    </label></td>\n  </tr>\n</table>\n<br>\n<br>\n\n<strong>\n&#50;. Why are these values important to you? Describe a time in your life when they were really important.\n</strong>\n\n*Write a few sentences. Focus on your thoughts and feelings, don't worry about how well written it is.*",
        "csp_socialBelonging_intervention_markdown_instruction": "## Starting out in Computer Science\n\nComputer science has changed the way we communicate with each other, make art and movies, grow food, and even treat illnesses. **Everyone can learn computer science and make a difference:** It really does not matter how much or little experience you have with computer science already, or what age, gender, or skin color you have.\n\n***\n\n## Quotes from students\n\nStill, we understand that it can be daunting at first to take a computer science course. So here are a few student quotes describing their experiences. **Please read the quotes carefully and respond to the prompt below**. \n\n\n<div style=\"background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\n\n<p style=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right: 30px; \">\nAt the start of the class I worried that I was different from the other students. I wasn't sure I fit in â I \tworried that I couldnât do it and that the teacher and other students would look down on me. A few days after I started, I realized that almost everyone who takes the class isnât sure if they fit in at first. It's something everyone goes through. Now it seems ironic â everybody feels different at first, when really we're all going through the same thing.</p>\n<p style=\"font-size: 70px; text-align: right; margin-right: 5%; margin-top: -10px; opacity: 0.5\">&rdquo;</p>\n<p style=\"text-align: right; font-size: 125%; font-style: italic; margin-right: 70px; margin-top: -20px; \">\nSofia P. (age 16)\n</p>\n\n</div>\n<br>\n\n<div style=\"background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color: #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;\">\n\n\n<p style=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right: 30px;\">I loved this computer science class! I've met some cool people and learned a lot. But it was a difficult transition. The first few days I was intimidated and not sure why I should learn computer science. Why would I need it? But then we talked in class about things Iâm interested in, like music and design, and I realized that I can learn how to do cool new things. I had the wrong picture in my head about CS, itâs actually very creative! I just had to be patient and find ways to connect the class to what I really care about.</p>\n<p style=\"font-size: 70px; text-align: right; opacity: 0.5\">&rdquo;</p>\n<p style=\"text-align: right; font-size: 125%;  font-style: italic; margin-right: 30px; margin-top: -20px\">\nJasmin D. (age 17)\n</p>\n</div>\n<br>\n\n<div style=\"background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\n\n<p style=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right: 30px; \">I didnât have any experience with code, and I worried that I was not prepared for this class. Other students did some programming at home or in summer camps. On my first day, I was so nervous about getting bad grades and looking stupid. But then, I started to feel better â I talked with other students and enjoyed the class more. I became more comfortable asking for help when I had a problem. It turned out that the students with CS experience had the same issues as me! Hah, it took some time, but now I really feel like I belong in CS class.</p>\n\n<p style=\"font-size: 70px; text-align: right; opacity: 0.5\">&rdquo;</p>\n<p style=\"text-align: right; font-size: 125%;  font-style: italic; margin-right: 30px; margin-top: -20px\">\nSam J. (age 17)\n</p>\n</div>\n\n***\n<p style=\"font-size: 125%\"> Each of these students had similar experiences and realizations. </p>\n\n## Reflect and Summarize: \n\n\n<p style=\"font-size: 150%; color: black; font-weight: bolder; line-height: 1.5\">Why do you think the students worry at first about whether they belong in the class? How did they become comfortable with it over time?</p>\n\n*Please write a short paragraph. Don't worry about spelling, grammar, or how well written it is.*",
        "csp_socialBelonging_intervention_2018_markdown_instruction": "## Starting out in Computer Science\n\nComputer science has changed the way we communicate with each other, make art and movies, grow food, and even treat illnesses. **Everyone can learn computer science and make a difference:** It really does not matter how much or little experience you have with computer science already, or what age, gender, or skin color you have.\n\n***\n\n## Quotes from students\n\nStill, we understand that it can be daunting at first to take a computer science course. So here are a few student quotes describing their experiences. **Please read the quotes carefully and respond to the prompt below**. \n\n\n<div style=\"background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\n\n<p style=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right: 30px; \">\nAt the start of the class I worried that I was different from the other students. I wasn't sure I fit in â I \tworried that I couldnât do it and that the teacher and other students would look down on me. A few days after I started, I realized that almost everyone who takes the class isnât sure if they fit in at first. It's something everyone goes through. Now it seems ironic â everybody feels different at first, when really we're all going through the same thing.</p>\n<p style=\"font-size: 70px; text-align: right; margin-right: 5%; margin-top: -10px; opacity: 0.5\">&rdquo;</p>\n<p style=\"text-align: right; font-size: 125%; font-style: italic; margin-right: 70px; margin-top: -20px; \">\nSofia P. (age 16)\n</p>\n\n</div>\n<br>\n\n<div style=\"background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color: #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;\">\n\n\n<p style=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right: 30px;\">I loved this computer science class! I've met some cool people and learned a lot. But it was a difficult transition. The first few days I was intimidated and not sure why I should learn computer science. Why would I need it? But then we talked in class about things Iâm interested in, like music and design, and I realized that I can learn how to do cool new things. I had the wrong picture in my head about CS, itâs actually very creative! I just had to be patient and find ways to connect the class to what I really care about.</p>\n<p style=\"font-size: 70px; text-align: right; opacity: 0.5\">&rdquo;</p>\n<p style=\"text-align: right; font-size: 125%;  font-style: italic; margin-right: 30px; margin-top: -20px\">\nJasmin D. (age 17)\n</p>\n</div>\n<br>\n\n<div style=\"background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;\">\n\n<p style=\"font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5\">&ldquo;</p>\n<p style=\"line-height: 1.5; margin-left: 10px; margin-right: 30px; \">I didnât have any experience with code, and I worried that I was not prepared for this class. Other students did some programming at home or in summer camps. On my first day, I was so nervous about getting bad grades and looking stupid. But then, I started to feel better â I talked with other students and enjoyed the class more. I became more comfortable asking for help when I had a problem. It turned out that the students with CS experience had the same issues as me! Hah, it took some time, but now I really feel like I belong in CS class.</p>\n\n<p style=\"font-size: 70px; text-align: right; opacity: 0.5\">&rdquo;</p>\n<p style=\"text-align: right; font-size: 125%;  font-style: italic; margin-right: 30px; margin-top: -20px\">\nSam J. (age 17)\n</p>\n</div>\n\n***\n<p style=\"font-size: 125%\"> Each of these students had similar experiences and realizations. </p>\n\n## Reflect and Summarize: \n\n\n<p style=\"font-size: 150%; color: black; font-weight: bolder; line-height: 1.5\">Why do you think the students worry at first about whether they belong in the class? How did they become comfortable with it over time?</p>\n\n*Please write a short paragraph. Don't worry about spelling, grammar, or how well written it is.*",
        "grade1_artist_loopsFP_markdown_instruction": "Use what you have learned to draw a picture of what you think the artist saw when he got home.\n\n<hr/>\n<h3>Ideas</h3>\n<table>\n<tr>\n<td>\n<img src=\"https://images.code.org/8f4f2a68dae2cf0aa82cc0a49ea4df04-image-1466787750475.gif\" width=\"150\"/><br/>\n<h4>A Singing Snail</h4><br/><br/>\n</td>\n\n<td>\n<img src=\"https://images.code.org/732ce5dd91c7f49f06e88da1a9f664f3-image-1466794904255.gif\" width=\"150\"/><br/>\n<h4>A Big City</h4><br/><br/>\n</td>\n\n<td>\n<img src=\"https://images.code.org/37fdd6fdd761df09fd4949d5e43f0a7f-image-1466795165642.gif\" width=\"150\"/><br/>\n<h4>A Concert</h4><br/><br/>\n</td>\n\n<td>\n<img src=\"https://images.code.org/f7bf86b0f86669d82ee2c1565738b9cb-image-1466794447737.gif\" width=\"150\"/><br/>\n<h4>A Birthday Cake</h4><br/><br/>\n</td>\n\n</tr>\n</table>\n",
        "grade1_playlab_events1_markdown_instruction": "This game is called \"Play Lab\".  \n\n<br/>\nSee if you can figure out what each block does.",
        "grade2_MakeDogTag_10_markdown_instruction": "Now, draw anything you like!\n<br/><br/>\nHere are some ideas you could try if you get stuck (the last one is a challenge):\n<br/>\n<hr/>\n<h3>Ideas</h3>\n<table>\n<tr>\n<td>\n<img src=\"https://images.code.org/c8748bea36ec8ea92ceb13d86cd862d2-image-1471033427162.13.51 PM.png\" width=\"150\"/><br/>\n</td>\n\n<td>\n<img src=\"https://images.code.org/57c582dca6126e30de36b5bef5517f78-image-1471033432715.03.46 PM.png\" width=\"150\"/><br/>\n</td>\n\n<td>\n<img src=\"https://images.code.org/9df13dec95da560686472580304d9ee3-image-1471033275008.55.15 PM.png\" width=\"150\"/><br/>\n</td>\n\n</tr>\n</table>\n\n\n",
        "grade2_playlab_project_6_markdown_instruction": "<style>\n.hint{\n\tpadding: 15px 15px 15px 40px; \n    background-color:#eeeeee; \n    border-radius:10px;\n}\n.hintInner{\n\tpadding: 15px 15px 15px 15px;  \n    background-color:#FFFFFF; \n    border-radius:10px;\n}\n\nimg{\n\tborder-radius: 10px;\n    mix-blend-mode: multiply;\n}\n\n</style>\n\nCreate your own story. When you're done, click \"Finish\" to share with friends.\n<br/>\n\n<h5 class=\"hint\">\n<details>\n<summary><b>Need some ideas?</b></summary>\n\t<br/>\n\t<h5 class=\"hintInner\">\n\t\t<ul>\n        \t<li><strong>Who's there?</strong> - Make characters appear with random images, so no one knows who's showing up next.</li>\n            <li><strong>Going on an Adventure</strong> - Change the background, then have the characters talk about where they are now. </li>\n            <li><strong>Pinball</strong> - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen. </li>\n        </ul>\n\t</h5>\n</details>\n</h5>\n",
        "grade4_artist_functions_freeplay_markdown_instruction": "Create your own project! This creation will be saved to your Projects dashboard so that you can easily edit it any time!\n<hr/>\n<h3>Here are some ideas if you are looking for inspiration, or make your own function!</h3>\n<table>\n<tr>\n<td>\n<img src=\"https://images.code.org/7e85601182e37a5331a17c0e29cf504d-image-1471042674372.42.08 PM.png\" width=\"200\"/><br/>\n</td>\n\n<td>\n<img src=\"https://images.code.org/6ae7664d92a706e852d92dc419836557-image-1471042678266.55.48 PM.png\" width=\"200\"/><br/>\n</td>\n\n\n</tr>\n</table>",
        "grade4_artist_functions_windows2_markdown_instruction": "Let's take the code for the window and add it to function `draw a window`. Now, we can call the function any time we need to draw a window without having to write the code again. \n\n<img src=\"https://images.code.org/57c016bcafe697e6ddb196e0f13c9ef9-image-1468602046641.gif\" width=\"450px\"/>\n<br/> \n\nTry solving this puzzle by creating `draw a window` and calling it five times. Watch out for the door!\n\n- The top windows are 50 pixels away from each other.  \n- The bottom windows are 100 pixels below the top set.",
        "grade4_artist_nestedLoops_challenge_markdown_instruction": "<img src=\"https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png\" width=\"150px;\" style=\"mix-blend-mode: multiply;\" />\n\n**Play time:**  Here is the code for an interesting shape.   \n\nWhat happens when you repeat it multiple times, turning between each iteration?   \n\nNotice that the turns in this shape add up to *420 degrees*, which means that when your artist is done drawing, it will be facing a different direction than when you started.  That new direction is exactly *60 degrees* to the *right* of where you began.\n\n<hr/>\n\n<h4>\n<details>\n<summary><b>Repeat 4</b></summary>\n<br/>\nIf you want to come full circle in just 4 repetitions, you need the artist to turn a total of **360 degrees/4 = 90 degrees** each time.  You can do that by adding an extra `turn right by 30 degrees` block to the outer loop (since **60+30 = 90**.)  \n<br/>\n<img src=\"https://images.code.org/9da67a628ed72e87520a02a0d917e2af-image-1440132370113.44.12.png\" width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n<br/><br/>\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Repeat 6</b></summary>\n<br/>\nWhen you repeat the shape as-is 6 times, you get a total rotation of **6x60 degrees** which is a full **360 degree** cycle.  \n<img src=\"https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png\"  width=\"500px;\"  style=\"mix-blend-mode: multiply;\" />\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Repeat 12</b></summary>\n<br/>\nIf you want to repeat the image 12 times, you need the artist to turn a total of **360 degrees/12 = 30 degrees** each iteration.  That means you will need to adjust the artist back a bit with `turn left by 30 degrees` before you repeat the shape again.   <br/><br/>\n<img src=\"https://images.code.org/ad254952522674496918561096817c66-image-1440132424792.44.01.png\" width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n</details>\n</h4>\n\nNow it's your turn!  Can you recreate each image by repeating the starting shape?  ",
        "grade4_playlab_test_markdown_instruction": "<h5><b>\nIn our game, how should we score points? \n</b></h5> \n<br/>\n\n1. Add 1 to your `points` variable each time Dog hits Cat with a piece of pie.  <br/>    <br/> \n2. Use the `when actor 2 touches anything` event to trigger an update to your score. You can increment your variable by setting `points = points + 1.`  <br/>   <br/> \n3. Get your score up to 10 to pass the level.\n\n<br/><br/>\n<h4>\n**Note:** Use the right arrow to throw pie!\n</h4>",
        "grade4_review_artist1_markdown_instruction": "Hi, I'm an artist. You can write code to make me draw almost anything. Use a few blocks to make me draw over the grey lines in the picture. (Each line is 100 pixels long)\n\n<br>  \n",
        "grade5_artist_functionparameters8_markdown_instruction": "Use the function from the last puzzle to draw this series of shapes.  \n\n\nThe triangle has 21 pixel sides, and the sides in each following shape are 7 pixels longer than the last.   \nUse the `multiplication`block to make this all happen with just one function call.\n<hr/>\nBe sure to jump 100 pixels between polygons. <br>\nThe multipication block looks like this ![](https://images.code.org/55e293447c6b26bbbcf29cda2036706b-image-1481322763779.png)\n\n",
        "grade5_artist_parameters_squares2_markdown_instruction": "Now try creating the function from scratch!  \n\nCreate a function called `draw a square` and use it to outline these four boxes.  \nMake sure to add a parameter for `length`!\n\n<hr/>\nStarting from the upper right, the box widths are 50, 100, 150, and 200.",
        "grade5_artist_variables_freeplay16_markdown_instruction": "Still playing?  \n\nHere is a blank canvas where you can create whatever you want!\n\n<hr/>\n<h3>If you're looking for ideas, try one of these:</h3>\n<table>\n<tr>\n<td>\n<img src=\"https://images.code.org/2e8a6853ccb3ffe9bc6d25aaeea75514-image-1471047821651.10.45 PM.png\" width=\"200\"/><br/>\n</td>\n\n<td>\n<img src=\"https://images.code.org/0b63705c28ac282637a3a5b3cede8608-image-1471047826162.18.02 PM.png\" width=\"200\"/><br/>\n</td>\n\n</tr>\n</table>",
        "grade5_artist_variables_pentagons12_markdown_instruction": "Let's set the `sides` variable to 5. The more sides we add to this algorithm, the bigger this whole pattern gets! \n\n<br/>\nNotice that there is another variable called `length`. \nWe can now use that variable wherever we have a `move forward` block. \n\nSet the `length` variable to 75 for this shape.",
        "grade5_bee_parameters_new2_markdown_instruction": "Here's some code that solves the last puzzle.  \nLet's turn it into a function, then call the function to check this row for nectar.  \n<hr/>\nThis may seem like a strange step now, but it will be really helpful soon!",
        "grade5_bee_parameters_new6_markdown_instruction": "You can make code shorter and more efficient when you combine functions with other programming elements.  \n<hr/>\n<h3>What blocks can you use with your function to build a short and sweet solution to this puzzle?</h3>",
        "grade5_playlab_parameters_points1_markdown_instruction": "Here's the same game but most of the code is hidden. We've added a new function called `score_points.`\n<br/>\n<hr>\n<br/>\n<h4>\nAdd a new parameter called `points` to the `player_score` function. \n<br/>\nThe `score_points` function should be able to both add and remove points from `player_score` depending on which actor is hit.<br>\nChanging the score by 1 will add a point, while changing the score by -1 will subtract a point.\n</h4>\n<br/>\n<hr>\n*Note:  When you're done, click \"Run\" to play.  When Dog scores 6 points, you will move on to the next puzzle.*",
        "grade5_playlab_variables1_markdown_instruction": "This time you don't have to write any code, just hit `Run` to play the game! \n\n<br/>\nIn this game, you're the dog who is trying to collect more flags than the cat. Use the down arrow to control the dog. Press `Finish` when you're done playing.",
        "grade5_playlab_variables71_markdown_instruction": "Here's our game from an earlier stage but most of the code is hidden. We've added a new function called `score_points.`\n<br/>\n<hr>\n<br/>\n<h4>\nEdit the function so that a new parameter called `points` is added to `player_score`.  \n<br/>\nThe variable `player_score` should increase each time Dog tags Cat with pie, and decrease each time that Cat tags Dog with a sandwich.\n</h4>\n<br/>\n<hr>\n*Note: When you're done, click \"Run\" to play.  When Dog scores 6 points, you will move on to the next puzzle.*",
        "grade5_playlab_variables81_markdown_instruction": "We've added one last function for you.\n<hr/>\n\n<h4>\nUse an `if` statement to program your game to call the `level_up` function only when `player_score` becomes greater than a certain number.<br/><br/>\n</h4>\n<i>For example: `player_score` > 6</i>\n\n\n<hr/>\n<i>Play the game, and make it to level 3 to move to the next puzzle.</i>",
        "gradek_artist_loops6_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\nUse the `repeat` loop to add waves to the water.<br/>\n</div>\n\n<img src=\"https://images.code.org/06a1120e0b2da4dbcf960a22c3abc248-image-1470787144854.gif\" width=\"300\"/>\n",
        "gradek_artist_loops8_markdown_instruction": "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\n**Challenge:** The stairs down to the dock are broken.  Help me fix them.<br/>\n</div>\n\n<img src=\"https://images.code.org/53c68133f897895caa0369b4afa3ec3b-image-1470789463684.gif\" width=\"300\"/>\n",
        "gradek_artist_loopsFP_markdown_instruction": "The artist saw something funny in the distance.  Draw what you think he saw.\n\n<hr/>\n<h3>Ideas</h3>\n<table>\n<tr>\n<td>\n<img src=\"https://images.code.org/8f4f2a68dae2cf0aa82cc0a49ea4df04-image-1466787750475.gif\" width=\"150\"/><br/>\n<h4>A Singing Snail</h4><br/><br/>\n</td>\n\n<td>\n<img src=\"https://images.code.org/732ce5dd91c7f49f06e88da1a9f664f3-image-1466794904255.gif\" width=\"150\"/><br/>\n<h4>A Big City</h4><br/><br/>\n</td>\n\n<td>\n<img src=\"https://images.code.org/37fdd6fdd761df09fd4949d5e43f0a7f-image-1466795165642.gif\" width=\"150\"/><br/>\n<h4>A Concert</h4><br/><br/>\n</td>\n\n<td>\n<img src=\"https://images.code.org/f7bf86b0f86669d82ee2c1565738b9cb-image-1466794447737.gif\" width=\"150\"/><br/>\n<h4>A Birthday Cake</h4><br/><br/>\n</td>\n\n</tr>\n</table>\n",
        "love_spring_3_markdown_instruction": "<b>The sun is shining, the birds are chirping, and now it's time to play!</b>  <br/><br/>\n\nRobin has chosen a number between 10 and 30.  \nUse the up and down arrows to make a guess about what it is.  \nClick Robin to submit your guess.\n\n- Robin will move up when your guess is too high\n- Robin will move down when your guess is too low\n- Where do you change how far Robin moves each time?\n- Where would you change the range of numbers to choose from?\n- Can you change the code so that Robin chooses a number between 1 & 20?\n\n<br/>\n<b>When you're ready, press \"Run\" and play until you guess Robin's number!</b>",
        "multi-lesson Teaching and Student Support Plan_markdown_instruction": "<br><br>\n> **NOTE: before you start this task, make sure youâve reviewed the lesson resources in this module, and have a good sense of how the lesson works. If you havenât already reviewed the materials, do that now and come back to this task later.**\n\n# Teaching and Student Support Plan\n\n## Task Description\n\nNow that you have a better sense of this lessons in this sequence, letâs think about the types of supports students will need in order to be successful. Since the curriculum is based on inquiry learning, lessons feature activities that engage students in discovering core concepts themselves. Itâs important to think through implementation plans and student support. In this task you will make a plan for teaching and student support **for one of the lessons in this sequence** that takes into account differentiation strategies and make-up work for absent students. Your teaching and student support plan should cover the following: \n\n\n- **Which lesson in the sequence are you discussing?** \n\n- **Details on how you will implement and differentiate the lesson:**\n\n  - An outline of any changes you will need to make to the lesson to fit your local constraints or context (for example: pacing and time, dealing with classroom setup, etc). \n  - An overview of the types of student needs youâll likely need to support in your classroom (for example: students who are struggling to understand the underlying concept; students who are already familiar with the concept, but still have room to learn more; etc)\n  - Your plan for addressing each of the needs outlined above (for example: integrating extension activities or other materials for students who already know something about the topic)\n  - How will you address or emphasize the connection between lessons in this sequence? \n\n<br>\n- **Plan for catching up absent students:**\n\n  - How will absent students catch up on activities they missed? \n  - How will you use the fact that the lessons in this sequence are related and build on one another to address make-up work? \n\nYou can type out your teaching and student support plan in the box below, or you can upload a word doc or pdf file. \n\n## Getting Credit for Completing this Task\n\n#### Task Review Details\n\nIf this module is listed as  your âfocus areaâ, then your response to the prompt above will be shared anonymously and reviewed by your peers, and you will review the work done by other teachers. Reviewers will be looking for thoughtful and thorough answers that demonstrate that you have spent time considering how the lesson will play out in your own classroom. Reviewers will have an opportunity to give feedback on your submission, and you can respond to that feedback and resubmit. \n\nIn order to get credit for completing this task, two reviewers need to agree that you have responded to the prompts fully. If reviewers donât feel comfortable making a decision about your task submission, they can elevate to a facilitator to review. You will always have a chance to address feedback from your reviewers and resubmit your task! Reviewer feedback will show up at the bottom of this page, once itâs available. \n\n<br><br>",
        "sample10a_markdown_instruction": "<h4>You have helped the adventurer and her bee!  \nAs a reward, please stay and play around in my magical village.  \n<br/>\n\nYou should have everything you need to create a game of your own.</h4>",
        "subgoal U3 L4 introducing subgoal labels_markdown_instruction": "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\" align=right>\n\nGiven only 4 turtle commands, write code in App Lab to complete the drawings in each of the challenges below.  Your goal is to write code that solves the problem as efficiently as possible using only the commands provided.\n\nWhat does âefficientâ mean?  In computer science it can actually mean several different things depending on what youâre talking about.  Work on these challenges, try to solve them in a way that you think is best and weâll ask about efficiency at the end.\n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" align=right>\n# Do This: \nDraw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the Finish button - it will appear once you run the program.",
        "subgoal U3L2 Using Simple Commands_markdown_instruction": "<img src=\"https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png\" align=right>\n\nGiven only 4 turtle commands, write code in App Lab to complete the drawings in each of the challenges below.  Your goal is to write code that solves the problem as efficiently as possible using only the commands provided.\n\nWhat does âefficientâ mean?  In computer science it can actually mean several different things depending on what youâre talking about.  Work on these challenges, try to solve them in a way that you think is best and weâll ask about efficiency at the end.\n\n<img src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\" align=right>\n# Do This: \nDraw a 1 x 1 square to the front and left of the turtle as efficiently as possible. The program should stop with turtle in its original position, facing its original direction.\n\nOnce you think you have a solution, click the Finish button - it will appear once you run the program.",
        "subgoalU3L2_TurtleSquare_right_markdown_instruction": "<img src=\"https://images.code.org/ad48e7224312a6c41f4fc5727af53cc0-image-1436287265071.png\" align=right> \n# Do This:\nThis time, draw a 1 x 1 square to the *front and right* of the turtle as efficiently as possible.  Notice that there is no command to turn right! You need to figure out how to draw this by only turning left and moving forward.  The program should stop with turtle in its original position, facing its original direction.\n\nWhen you're done click the Finish button to move onto the next problem.\n"
      }
    }
  }
}